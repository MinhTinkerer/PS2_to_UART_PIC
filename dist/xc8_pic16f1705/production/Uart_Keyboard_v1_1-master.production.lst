

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jan 21 15:51:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011C                     	;# 
   136  018C                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019F                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  028C                     	;# 
   191  028E                     	;# 
   192  0291                     	;# 
   193  0291                     	;# 
   194  0292                     	;# 
   195  0293                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029A                     	;# 
   202  029E                     	;# 
   203  030C                     	;# 
   204  030E                     	;# 
   205  038C                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0397                     	;# 
   211  0398                     	;# 
   212  0399                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  041C                     	;# 
   217  041D                     	;# 
   218  041E                     	;# 
   219  0511                     	;# 
   220  0515                     	;# 
   221  0617                     	;# 
   222  0618                     	;# 
   223  0619                     	;# 
   224  0619                     	;# 
   225  061A                     	;# 
   226  061B                     	;# 
   227  061C                     	;# 
   228  061C                     	;# 
   229  0691                     	;# 
   230  0692                     	;# 
   231  0693                     	;# 
   232  0694                     	;# 
   233  0695                     	;# 
   234  0696                     	;# 
   235  0697                     	;# 
   236  0698                     	;# 
   237  0699                     	;# 
   238  069A                     	;# 
   239  069B                     	;# 
   240  069C                     	;# 
   241  069D                     	;# 
   242  069E                     	;# 
   243  069F                     	;# 
   244  0E0F                     	;# 
   245  0E10                     	;# 
   246  0E11                     	;# 
   247  0E12                     	;# 
   248  0E13                     	;# 
   249  0E14                     	;# 
   250  0E15                     	;# 
   251  0E17                     	;# 
   252  0E20                     	;# 
   253  0E21                     	;# 
   254  0E22                     	;# 
   255  0E24                     	;# 
   256  0E25                     	;# 
   257  0E28                     	;# 
   258  0E29                     	;# 
   259  0E2A                     	;# 
   260  0E2B                     	;# 
   261  0E90                     	;# 
   262  0E91                     	;# 
   263  0E92                     	;# 
   264  0E94                     	;# 
   265  0E95                     	;# 
   266  0EA0                     	;# 
   267  0EA1                     	;# 
   268  0EA2                     	;# 
   269  0EA3                     	;# 
   270  0EA4                     	;# 
   271  0EA5                     	;# 
   272  0F0F                     	;# 
   273  0F10                     	;# 
   274  0F11                     	;# 
   275  0F12                     	;# 
   276  0F13                     	;# 
   277  0F14                     	;# 
   278  0F15                     	;# 
   279  0F16                     	;# 
   280  0F17                     	;# 
   281  0F18                     	;# 
   282  0F19                     	;# 
   283  0F1A                     	;# 
   284  0F1B                     	;# 
   285  0F1C                     	;# 
   286  0F1D                     	;# 
   287  0F1E                     	;# 
   288  0F1F                     	;# 
   289  0F20                     	;# 
   290  0F21                     	;# 
   291  0F22                     	;# 
   292  0F23                     	;# 
   293  0F24                     	;# 
   294  0F25                     	;# 
   295  0F26                     	;# 
   296  0F27                     	;# 
   297  0F28                     	;# 
   298  0F29                     	;# 
   299  0F2A                     	;# 
   300  0F2B                     	;# 
   301  0F2C                     	;# 
   302  0F2D                     	;# 
   303  0F9E                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  010C                     	;# 
   359  010E                     	;# 
   360  0111                     	;# 
   361  0112                     	;# 
   362  0113                     	;# 
   363  0114                     	;# 
   364  0115                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  0118                     	;# 
   368  0119                     	;# 
   369  011C                     	;# 
   370  018C                     	;# 
   371  018E                     	;# 
   372  0191                     	;# 
   373  0191                     	;# 
   374  0192                     	;# 
   375  0193                     	;# 
   376  0193                     	;# 
   377  0194                     	;# 
   378  0195                     	;# 
   379  0196                     	;# 
   380  0197                     	;# 
   381  0199                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019F                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  028C                     	;# 
   425  028E                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0293                     	;# 
   431  0298                     	;# 
   432  0298                     	;# 
   433  0299                     	;# 
   434  029A                     	;# 
   435  029A                     	;# 
   436  029E                     	;# 
   437  030C                     	;# 
   438  030E                     	;# 
   439  038C                     	;# 
   440  038E                     	;# 
   441  0391                     	;# 
   442  0392                     	;# 
   443  0393                     	;# 
   444  0397                     	;# 
   445  0398                     	;# 
   446  0399                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0511                     	;# 
   454  0515                     	;# 
   455  0617                     	;# 
   456  0618                     	;# 
   457  0619                     	;# 
   458  0619                     	;# 
   459  061A                     	;# 
   460  061B                     	;# 
   461  061C                     	;# 
   462  061C                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0696                     	;# 
   469  0697                     	;# 
   470  0698                     	;# 
   471  0699                     	;# 
   472  069A                     	;# 
   473  069B                     	;# 
   474  069C                     	;# 
   475  069D                     	;# 
   476  069E                     	;# 
   477  069F                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E17                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E28                     	;# 
   492  0E29                     	;# 
   493  0E2A                     	;# 
   494  0E2B                     	;# 
   495  0E90                     	;# 
   496  0E91                     	;# 
   497  0E92                     	;# 
   498  0E94                     	;# 
   499  0E95                     	;# 
   500  0EA0                     	;# 
   501  0EA1                     	;# 
   502  0EA2                     	;# 
   503  0EA3                     	;# 
   504  0EA4                     	;# 
   505  0EA5                     	;# 
   506  0F0F                     	;# 
   507  0F10                     	;# 
   508  0F11                     	;# 
   509  0F12                     	;# 
   510  0F13                     	;# 
   511  0F14                     	;# 
   512  0F15                     	;# 
   513  0F16                     	;# 
   514  0F17                     	;# 
   515  0F18                     	;# 
   516  0F19                     	;# 
   517  0F1A                     	;# 
   518  0F1B                     	;# 
   519  0F1C                     	;# 
   520  0F1D                     	;# 
   521  0F1E                     	;# 
   522  0F1F                     	;# 
   523  0F20                     	;# 
   524  0F21                     	;# 
   525  0F22                     	;# 
   526  0F23                     	;# 
   527  0F24                     	;# 
   528  0F25                     	;# 
   529  0F26                     	;# 
   530  0F27                     	;# 
   531  0F28                     	;# 
   532  0F29                     	;# 
   533  0F2A                     	;# 
   534  0F2B                     	;# 
   535  0F2C                     	;# 
   536  0F2D                     	;# 
   537  0F9E                     	;# 
   538  0FE4                     	;# 
   539  0FE5                     	;# 
   540  0FE6                     	;# 
   541  0FE7                     	;# 
   542  0FE8                     	;# 
   543  0FE9                     	;# 
   544  0FEA                     	;# 
   545  0FEB                     	;# 
   546  0FED                     	;# 
   547  0FEE                     	;# 
   548  0FEF                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000E                     	;# 
   563  0011                     	;# 
   564  0012                     	;# 
   565  0013                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  008C                     	;# 
   576  008E                     	;# 
   577  0091                     	;# 
   578  0092                     	;# 
   579  0093                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0098                     	;# 
   584  0099                     	;# 
   585  009A                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  009F                     	;# 
   592  010C                     	;# 
   593  010E                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  011C                     	;# 
   604  018C                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  028C                     	;# 
   659  028E                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029A                     	;# 
   670  029E                     	;# 
   671  030C                     	;# 
   672  030E                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  0397                     	;# 
   679  0398                     	;# 
   680  0399                     	;# 
   681  0415                     	;# 
   682  0416                     	;# 
   683  0417                     	;# 
   684  041C                     	;# 
   685  041D                     	;# 
   686  041E                     	;# 
   687  0511                     	;# 
   688  0515                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0696                     	;# 
   703  0697                     	;# 
   704  0698                     	;# 
   705  0699                     	;# 
   706  069A                     	;# 
   707  069B                     	;# 
   708  069C                     	;# 
   709  069D                     	;# 
   710  069E                     	;# 
   711  069F                     	;# 
   712  0E0F                     	;# 
   713  0E10                     	;# 
   714  0E11                     	;# 
   715  0E12                     	;# 
   716  0E13                     	;# 
   717  0E14                     	;# 
   718  0E15                     	;# 
   719  0E17                     	;# 
   720  0E20                     	;# 
   721  0E21                     	;# 
   722  0E22                     	;# 
   723  0E24                     	;# 
   724  0E25                     	;# 
   725  0E28                     	;# 
   726  0E29                     	;# 
   727  0E2A                     	;# 
   728  0E2B                     	;# 
   729  0E90                     	;# 
   730  0E91                     	;# 
   731  0E92                     	;# 
   732  0E94                     	;# 
   733  0E95                     	;# 
   734  0EA0                     	;# 
   735  0EA1                     	;# 
   736  0EA2                     	;# 
   737  0EA3                     	;# 
   738  0EA4                     	;# 
   739  0EA5                     	;# 
   740  0F0F                     	;# 
   741  0F10                     	;# 
   742  0F11                     	;# 
   743  0F12                     	;# 
   744  0F13                     	;# 
   745  0F14                     	;# 
   746  0F15                     	;# 
   747  0F16                     	;# 
   748  0F17                     	;# 
   749  0F18                     	;# 
   750  0F19                     	;# 
   751  0F1A                     	;# 
   752  0F1B                     	;# 
   753  0F1C                     	;# 
   754  0F1D                     	;# 
   755  0F1E                     	;# 
   756  0F1F                     	;# 
   757  0F20                     	;# 
   758  0F21                     	;# 
   759  0F22                     	;# 
   760  0F23                     	;# 
   761  0F24                     	;# 
   762  0F25                     	;# 
   763  0F26                     	;# 
   764  0F27                     	;# 
   765  0F28                     	;# 
   766  0F29                     	;# 
   767  0F2A                     	;# 
   768  0F2B                     	;# 
   769  0F2C                     	;# 
   770  0F2D                     	;# 
   771  0F9E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008E                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010E                     	;# 
   828  0111                     	;# 
   829  0112                     	;# 
   830  0113                     	;# 
   831  0114                     	;# 
   832  0115                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  0118                     	;# 
   836  0119                     	;# 
   837  011C                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  028C                     	;# 
   893  028E                     	;# 
   894  0291                     	;# 
   895  0291                     	;# 
   896  0292                     	;# 
   897  0293                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  029A                     	;# 
   904  029E                     	;# 
   905  030C                     	;# 
   906  030E                     	;# 
   907  038C                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0397                     	;# 
   913  0398                     	;# 
   914  0399                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  041C                     	;# 
   919  041D                     	;# 
   920  041E                     	;# 
   921  0511                     	;# 
   922  0515                     	;# 
   923  0617                     	;# 
   924  0618                     	;# 
   925  0619                     	;# 
   926  0619                     	;# 
   927  061A                     	;# 
   928  061B                     	;# 
   929  061C                     	;# 
   930  061C                     	;# 
   931  0691                     	;# 
   932  0692                     	;# 
   933  0693                     	;# 
   934  0694                     	;# 
   935  0695                     	;# 
   936  0696                     	;# 
   937  0697                     	;# 
   938  0698                     	;# 
   939  0699                     	;# 
   940  069A                     	;# 
   941  069B                     	;# 
   942  069C                     	;# 
   943  069D                     	;# 
   944  069E                     	;# 
   945  069F                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E17                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E24                     	;# 
   958  0E25                     	;# 
   959  0E28                     	;# 
   960  0E29                     	;# 
   961  0E2A                     	;# 
   962  0E2B                     	;# 
   963  0E90                     	;# 
   964  0E91                     	;# 
   965  0E92                     	;# 
   966  0E94                     	;# 
   967  0E95                     	;# 
   968  0EA0                     	;# 
   969  0EA1                     	;# 
   970  0EA2                     	;# 
   971  0EA3                     	;# 
   972  0EA4                     	;# 
   973  0EA5                     	;# 
   974  0F0F                     	;# 
   975  0F10                     	;# 
   976  0F11                     	;# 
   977  0F12                     	;# 
   978  0F13                     	;# 
   979  0F14                     	;# 
   980  0F15                     	;# 
   981  0F16                     	;# 
   982  0F17                     	;# 
   983  0F18                     	;# 
   984  0F19                     	;# 
   985  0F1A                     	;# 
   986  0F1B                     	;# 
   987  0F1C                     	;# 
   988  0F1D                     	;# 
   989  0F1E                     	;# 
   990  0F1F                     	;# 
   991  0F20                     	;# 
   992  0F21                     	;# 
   993  0F22                     	;# 
   994  0F23                     	;# 
   995  0F24                     	;# 
   996  0F25                     	;# 
   997  0F26                     	;# 
   998  0F27                     	;# 
   999  0F28                     	;# 
  1000  0F29                     	;# 
  1001  0F2A                     	;# 
  1002  0F2B                     	;# 
  1003  0F2C                     	;# 
  1004  0F2D                     	;# 
  1005  0F9E                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000E                     	;# 
  1031  0011                     	;# 
  1032  0012                     	;# 
  1033  0013                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001B                     	;# 
  1042  001C                     	;# 
  1043  008C                     	;# 
  1044  008E                     	;# 
  1045  0091                     	;# 
  1046  0092                     	;# 
  1047  0093                     	;# 
  1048  0095                     	;# 
  1049  0096                     	;# 
  1050  0097                     	;# 
  1051  0098                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  009F                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011C                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0197                     	;# 
  1083  0199                     	;# 
  1084  0199                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019A                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019C                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019D                     	;# 
  1099  019D                     	;# 
  1100  019E                     	;# 
  1101  019E                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  028C                     	;# 
  1127  028E                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  029A                     	;# 
  1138  029E                     	;# 
  1139  030C                     	;# 
  1140  030E                     	;# 
  1141  038C                     	;# 
  1142  038E                     	;# 
  1143  0391                     	;# 
  1144  0392                     	;# 
  1145  0393                     	;# 
  1146  0397                     	;# 
  1147  0398                     	;# 
  1148  0399                     	;# 
  1149  0415                     	;# 
  1150  0416                     	;# 
  1151  0417                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  0511                     	;# 
  1156  0515                     	;# 
  1157  0617                     	;# 
  1158  0618                     	;# 
  1159  0619                     	;# 
  1160  0619                     	;# 
  1161  061A                     	;# 
  1162  061B                     	;# 
  1163  061C                     	;# 
  1164  061C                     	;# 
  1165  0691                     	;# 
  1166  0692                     	;# 
  1167  0693                     	;# 
  1168  0694                     	;# 
  1169  0695                     	;# 
  1170  0696                     	;# 
  1171  0697                     	;# 
  1172  0698                     	;# 
  1173  0699                     	;# 
  1174  069A                     	;# 
  1175  069B                     	;# 
  1176  069C                     	;# 
  1177  069D                     	;# 
  1178  069E                     	;# 
  1179  069F                     	;# 
  1180  0E0F                     	;# 
  1181  0E10                     	;# 
  1182  0E11                     	;# 
  1183  0E12                     	;# 
  1184  0E13                     	;# 
  1185  0E14                     	;# 
  1186  0E15                     	;# 
  1187  0E17                     	;# 
  1188  0E20                     	;# 
  1189  0E21                     	;# 
  1190  0E22                     	;# 
  1191  0E24                     	;# 
  1192  0E25                     	;# 
  1193  0E28                     	;# 
  1194  0E29                     	;# 
  1195  0E2A                     	;# 
  1196  0E2B                     	;# 
  1197  0E90                     	;# 
  1198  0E91                     	;# 
  1199  0E92                     	;# 
  1200  0E94                     	;# 
  1201  0E95                     	;# 
  1202  0EA0                     	;# 
  1203  0EA1                     	;# 
  1204  0EA2                     	;# 
  1205  0EA3                     	;# 
  1206  0EA4                     	;# 
  1207  0EA5                     	;# 
  1208  0F0F                     	;# 
  1209  0F10                     	;# 
  1210  0F11                     	;# 
  1211  0F12                     	;# 
  1212  0F13                     	;# 
  1213  0F14                     	;# 
  1214  0F15                     	;# 
  1215  0F16                     	;# 
  1216  0F17                     	;# 
  1217  0F18                     	;# 
  1218  0F19                     	;# 
  1219  0F1A                     	;# 
  1220  0F1B                     	;# 
  1221  0F1C                     	;# 
  1222  0F1D                     	;# 
  1223  0F1E                     	;# 
  1224  0F1F                     	;# 
  1225  0F20                     	;# 
  1226  0F21                     	;# 
  1227  0F22                     	;# 
  1228  0F23                     	;# 
  1229  0F24                     	;# 
  1230  0F25                     	;# 
  1231  0F26                     	;# 
  1232  0F27                     	;# 
  1233  0F28                     	;# 
  1234  0F29                     	;# 
  1235  0F2A                     	;# 
  1236  0F2B                     	;# 
  1237  0F2C                     	;# 
  1238  0F2D                     	;# 
  1239  0F9E                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000E                     	;# 
  1265  0011                     	;# 
  1266  0012                     	;# 
  1267  0013                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008E                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0093                     	;# 
  1282  0095                     	;# 
  1283  0096                     	;# 
  1284  0097                     	;# 
  1285  0098                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  009F                     	;# 
  1294  010C                     	;# 
  1295  010E                     	;# 
  1296  0111                     	;# 
  1297  0112                     	;# 
  1298  0113                     	;# 
  1299  0114                     	;# 
  1300  0115                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  0118                     	;# 
  1304  0119                     	;# 
  1305  011C                     	;# 
  1306  018C                     	;# 
  1307  018E                     	;# 
  1308  0191                     	;# 
  1309  0191                     	;# 
  1310  0192                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0199                     	;# 
  1318  0199                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019A                     	;# 
  1322  019A                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019D                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019E                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  019F                     	;# 
  1339  019F                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  020C                     	;# 
  1343  020E                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  028C                     	;# 
  1361  028E                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  029A                     	;# 
  1372  029E                     	;# 
  1373  030C                     	;# 
  1374  030E                     	;# 
  1375  038C                     	;# 
  1376  038E                     	;# 
  1377  0391                     	;# 
  1378  0392                     	;# 
  1379  0393                     	;# 
  1380  0397                     	;# 
  1381  0398                     	;# 
  1382  0399                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  0511                     	;# 
  1390  0515                     	;# 
  1391  0617                     	;# 
  1392  0618                     	;# 
  1393  0619                     	;# 
  1394  0619                     	;# 
  1395  061A                     	;# 
  1396  061B                     	;# 
  1397  061C                     	;# 
  1398  061C                     	;# 
  1399  0691                     	;# 
  1400  0692                     	;# 
  1401  0693                     	;# 
  1402  0694                     	;# 
  1403  0695                     	;# 
  1404  0696                     	;# 
  1405  0697                     	;# 
  1406  0698                     	;# 
  1407  0699                     	;# 
  1408  069A                     	;# 
  1409  069B                     	;# 
  1410  069C                     	;# 
  1411  069D                     	;# 
  1412  069E                     	;# 
  1413  069F                     	;# 
  1414  0E0F                     	;# 
  1415  0E10                     	;# 
  1416  0E11                     	;# 
  1417  0E12                     	;# 
  1418  0E13                     	;# 
  1419  0E14                     	;# 
  1420  0E15                     	;# 
  1421  0E17                     	;# 
  1422  0E20                     	;# 
  1423  0E21                     	;# 
  1424  0E22                     	;# 
  1425  0E24                     	;# 
  1426  0E25                     	;# 
  1427  0E28                     	;# 
  1428  0E29                     	;# 
  1429  0E2A                     	;# 
  1430  0E2B                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0EA0                     	;# 
  1437  0EA1                     	;# 
  1438  0EA2                     	;# 
  1439  0EA3                     	;# 
  1440  0EA4                     	;# 
  1441  0EA5                     	;# 
  1442  0F0F                     	;# 
  1443  0F10                     	;# 
  1444  0F11                     	;# 
  1445  0F12                     	;# 
  1446  0F13                     	;# 
  1447  0F14                     	;# 
  1448  0F15                     	;# 
  1449  0F16                     	;# 
  1450  0F17                     	;# 
  1451  0F18                     	;# 
  1452  0F19                     	;# 
  1453  0F1A                     	;# 
  1454  0F1B                     	;# 
  1455  0F1C                     	;# 
  1456  0F1D                     	;# 
  1457  0F1E                     	;# 
  1458  0F1F                     	;# 
  1459  0F20                     	;# 
  1460  0F21                     	;# 
  1461  0F22                     	;# 
  1462  0F23                     	;# 
  1463  0F24                     	;# 
  1464  0F25                     	;# 
  1465  0F26                     	;# 
  1466  0F27                     	;# 
  1467  0F28                     	;# 
  1468  0F29                     	;# 
  1469  0F2A                     	;# 
  1470  0F2B                     	;# 
  1471  0F2C                     	;# 
  1472  0F2D                     	;# 
  1473  0F9E                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0098                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011C                     	;# 
  1540  018C                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  028C                     	;# 
  1595  028E                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0293                     	;# 
  1601  0298                     	;# 
  1602  0298                     	;# 
  1603  0299                     	;# 
  1604  029A                     	;# 
  1605  029A                     	;# 
  1606  029E                     	;# 
  1607  030C                     	;# 
  1608  030E                     	;# 
  1609  038C                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  0511                     	;# 
  1624  0515                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  069A                     	;# 
  1643  069B                     	;# 
  1644  069C                     	;# 
  1645  069D                     	;# 
  1646  069E                     	;# 
  1647  069F                     	;# 
  1648  0E0F                     	;# 
  1649  0E10                     	;# 
  1650  0E11                     	;# 
  1651  0E12                     	;# 
  1652  0E13                     	;# 
  1653  0E14                     	;# 
  1654  0E15                     	;# 
  1655  0E17                     	;# 
  1656  0E20                     	;# 
  1657  0E21                     	;# 
  1658  0E22                     	;# 
  1659  0E24                     	;# 
  1660  0E25                     	;# 
  1661  0E28                     	;# 
  1662  0E29                     	;# 
  1663  0E2A                     	;# 
  1664  0E2B                     	;# 
  1665  0E90                     	;# 
  1666  0E91                     	;# 
  1667  0E92                     	;# 
  1668  0E94                     	;# 
  1669  0E95                     	;# 
  1670  0EA0                     	;# 
  1671  0EA1                     	;# 
  1672  0EA2                     	;# 
  1673  0EA3                     	;# 
  1674  0EA4                     	;# 
  1675  0EA5                     	;# 
  1676  0F0F                     	;# 
  1677  0F10                     	;# 
  1678  0F11                     	;# 
  1679  0F12                     	;# 
  1680  0F13                     	;# 
  1681  0F14                     	;# 
  1682  0F15                     	;# 
  1683  0F16                     	;# 
  1684  0F17                     	;# 
  1685  0F18                     	;# 
  1686  0F19                     	;# 
  1687  0F1A                     	;# 
  1688  0F1B                     	;# 
  1689  0F1C                     	;# 
  1690  0F1D                     	;# 
  1691  0F1E                     	;# 
  1692  0F1F                     	;# 
  1693  0F20                     	;# 
  1694  0F21                     	;# 
  1695  0F22                     	;# 
  1696  0F23                     	;# 
  1697  0F24                     	;# 
  1698  0F25                     	;# 
  1699  0F26                     	;# 
  1700  0F27                     	;# 
  1701  0F28                     	;# 
  1702  0F29                     	;# 
  1703  0F2A                     	;# 
  1704  0F2B                     	;# 
  1705  0F2C                     	;# 
  1706  0F2D                     	;# 
  1707  0F9E                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000E                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0013                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008E                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0093                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0098                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  009F                     	;# 
  1762  010C                     	;# 
  1763  010E                     	;# 
  1764  0111                     	;# 
  1765  0112                     	;# 
  1766  0113                     	;# 
  1767  0114                     	;# 
  1768  0115                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  0118                     	;# 
  1772  0119                     	;# 
  1773  011C                     	;# 
  1774  018C                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  0199                     	;# 
  1787  0199                     	;# 
  1788  019A                     	;# 
  1789  019A                     	;# 
  1790  019A                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019D                     	;# 
  1800  019D                     	;# 
  1801  019D                     	;# 
  1802  019E                     	;# 
  1803  019E                     	;# 
  1804  019E                     	;# 
  1805  019F                     	;# 
  1806  019F                     	;# 
  1807  019F                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  020C                     	;# 
  1811  020E                     	;# 
  1812  0211                     	;# 
  1813  0211                     	;# 
  1814  0212                     	;# 
  1815  0212                     	;# 
  1816  0213                     	;# 
  1817  0213                     	;# 
  1818  0214                     	;# 
  1819  0214                     	;# 
  1820  0215                     	;# 
  1821  0215                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0216                     	;# 
  1825  0216                     	;# 
  1826  0217                     	;# 
  1827  0217                     	;# 
  1828  028C                     	;# 
  1829  028E                     	;# 
  1830  0291                     	;# 
  1831  0291                     	;# 
  1832  0292                     	;# 
  1833  0293                     	;# 
  1834  0293                     	;# 
  1835  0298                     	;# 
  1836  0298                     	;# 
  1837  0299                     	;# 
  1838  029A                     	;# 
  1839  029A                     	;# 
  1840  029E                     	;# 
  1841  030C                     	;# 
  1842  030E                     	;# 
  1843  038C                     	;# 
  1844  038E                     	;# 
  1845  0391                     	;# 
  1846  0392                     	;# 
  1847  0393                     	;# 
  1848  0397                     	;# 
  1849  0398                     	;# 
  1850  0399                     	;# 
  1851  0415                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  041C                     	;# 
  1855  041D                     	;# 
  1856  041E                     	;# 
  1857  0511                     	;# 
  1858  0515                     	;# 
  1859  0617                     	;# 
  1860  0618                     	;# 
  1861  0619                     	;# 
  1862  0619                     	;# 
  1863  061A                     	;# 
  1864  061B                     	;# 
  1865  061C                     	;# 
  1866  061C                     	;# 
  1867  0691                     	;# 
  1868  0692                     	;# 
  1869  0693                     	;# 
  1870  0694                     	;# 
  1871  0695                     	;# 
  1872  0696                     	;# 
  1873  0697                     	;# 
  1874  0698                     	;# 
  1875  0699                     	;# 
  1876  069A                     	;# 
  1877  069B                     	;# 
  1878  069C                     	;# 
  1879  069D                     	;# 
  1880  069E                     	;# 
  1881  069F                     	;# 
  1882  0E0F                     	;# 
  1883  0E10                     	;# 
  1884  0E11                     	;# 
  1885  0E12                     	;# 
  1886  0E13                     	;# 
  1887  0E14                     	;# 
  1888  0E15                     	;# 
  1889  0E17                     	;# 
  1890  0E20                     	;# 
  1891  0E21                     	;# 
  1892  0E22                     	;# 
  1893  0E24                     	;# 
  1894  0E25                     	;# 
  1895  0E28                     	;# 
  1896  0E29                     	;# 
  1897  0E2A                     	;# 
  1898  0E2B                     	;# 
  1899  0E90                     	;# 
  1900  0E91                     	;# 
  1901  0E92                     	;# 
  1902  0E94                     	;# 
  1903  0E95                     	;# 
  1904  0EA0                     	;# 
  1905  0EA1                     	;# 
  1906  0EA2                     	;# 
  1907  0EA3                     	;# 
  1908  0EA4                     	;# 
  1909  0EA5                     	;# 
  1910  0F0F                     	;# 
  1911  0F10                     	;# 
  1912  0F11                     	;# 
  1913  0F12                     	;# 
  1914  0F13                     	;# 
  1915  0F14                     	;# 
  1916  0F15                     	;# 
  1917  0F16                     	;# 
  1918  0F17                     	;# 
  1919  0F18                     	;# 
  1920  0F19                     	;# 
  1921  0F1A                     	;# 
  1922  0F1B                     	;# 
  1923  0F1C                     	;# 
  1924  0F1D                     	;# 
  1925  0F1E                     	;# 
  1926  0F1F                     	;# 
  1927  0F20                     	;# 
  1928  0F21                     	;# 
  1929  0F22                     	;# 
  1930  0F23                     	;# 
  1931  0F24                     	;# 
  1932  0F25                     	;# 
  1933  0F26                     	;# 
  1934  0F27                     	;# 
  1935  0F28                     	;# 
  1936  0F29                     	;# 
  1937  0F2A                     	;# 
  1938  0F2B                     	;# 
  1939  0F2C                     	;# 
  1940  0F2D                     	;# 
  1941  0F9E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000E                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  008C                     	;# 
  1980  008E                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0093                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0098                     	;# 
  1988  0099                     	;# 
  1989  009A                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  009F                     	;# 
  1996  010C                     	;# 
  1997  010E                     	;# 
  1998  0111                     	;# 
  1999  0112                     	;# 
  2000  0113                     	;# 
  2001  0114                     	;# 
  2002  0115                     	;# 
  2003  0116                     	;# 
  2004  0117                     	;# 
  2005  0118                     	;# 
  2006  0119                     	;# 
  2007  011C                     	;# 
  2008  018C                     	;# 
  2009  018E                     	;# 
  2010  0191                     	;# 
  2011  0191                     	;# 
  2012  0192                     	;# 
  2013  0193                     	;# 
  2014  0193                     	;# 
  2015  0194                     	;# 
  2016  0195                     	;# 
  2017  0196                     	;# 
  2018  0197                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  020C                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028E                     	;# 
  2064  0291                     	;# 
  2065  0291                     	;# 
  2066  0292                     	;# 
  2067  0293                     	;# 
  2068  0293                     	;# 
  2069  0298                     	;# 
  2070  0298                     	;# 
  2071  0299                     	;# 
  2072  029A                     	;# 
  2073  029A                     	;# 
  2074  029E                     	;# 
  2075  030C                     	;# 
  2076  030E                     	;# 
  2077  038C                     	;# 
  2078  038E                     	;# 
  2079  0391                     	;# 
  2080  0392                     	;# 
  2081  0393                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  041C                     	;# 
  2089  041D                     	;# 
  2090  041E                     	;# 
  2091  0511                     	;# 
  2092  0515                     	;# 
  2093  0617                     	;# 
  2094  0618                     	;# 
  2095  0619                     	;# 
  2096  0619                     	;# 
  2097  061A                     	;# 
  2098  061B                     	;# 
  2099  061C                     	;# 
  2100  061C                     	;# 
  2101  0691                     	;# 
  2102  0692                     	;# 
  2103  0693                     	;# 
  2104  0694                     	;# 
  2105  0695                     	;# 
  2106  0696                     	;# 
  2107  0697                     	;# 
  2108  0698                     	;# 
  2109  0699                     	;# 
  2110  069A                     	;# 
  2111  069B                     	;# 
  2112  069C                     	;# 
  2113  069D                     	;# 
  2114  069E                     	;# 
  2115  069F                     	;# 
  2116  0E0F                     	;# 
  2117  0E10                     	;# 
  2118  0E11                     	;# 
  2119  0E12                     	;# 
  2120  0E13                     	;# 
  2121  0E14                     	;# 
  2122  0E15                     	;# 
  2123  0E17                     	;# 
  2124  0E20                     	;# 
  2125  0E21                     	;# 
  2126  0E22                     	;# 
  2127  0E24                     	;# 
  2128  0E25                     	;# 
  2129  0E28                     	;# 
  2130  0E29                     	;# 
  2131  0E2A                     	;# 
  2132  0E2B                     	;# 
  2133  0E90                     	;# 
  2134  0E91                     	;# 
  2135  0E92                     	;# 
  2136  0E94                     	;# 
  2137  0E95                     	;# 
  2138  0EA0                     	;# 
  2139  0EA1                     	;# 
  2140  0EA2                     	;# 
  2141  0EA3                     	;# 
  2142  0EA4                     	;# 
  2143  0EA5                     	;# 
  2144  0F0F                     	;# 
  2145  0F10                     	;# 
  2146  0F11                     	;# 
  2147  0F12                     	;# 
  2148  0F13                     	;# 
  2149  0F14                     	;# 
  2150  0F15                     	;# 
  2151  0F16                     	;# 
  2152  0F17                     	;# 
  2153  0F18                     	;# 
  2154  0F19                     	;# 
  2155  0F1A                     	;# 
  2156  0F1B                     	;# 
  2157  0F1C                     	;# 
  2158  0F1D                     	;# 
  2159  0F1E                     	;# 
  2160  0F1F                     	;# 
  2161  0F20                     	;# 
  2162  0F21                     	;# 
  2163  0F22                     	;# 
  2164  0F23                     	;# 
  2165  0F24                     	;# 
  2166  0F25                     	;# 
  2167  0F26                     	;# 
  2168  0F27                     	;# 
  2169  0F28                     	;# 
  2170  0F29                     	;# 
  2171  0F2A                     	;# 
  2172  0F2B                     	;# 
  2173  0F2C                     	;# 
  2174  0F2D                     	;# 
  2175  0F9E                     	;# 
  2176  0FE4                     	;# 
  2177  0FE5                     	;# 
  2178  0FE6                     	;# 
  2179  0FE7                     	;# 
  2180  0FE8                     	;# 
  2181  0FE9                     	;# 
  2182  0FEA                     	;# 
  2183  0FEB                     	;# 
  2184  0FED                     	;# 
  2185  0FEE                     	;# 
  2186  0FEF                     	;# 
  2187  0000                     	;# 
  2188  0001                     	;# 
  2189  0002                     	;# 
  2190  0003                     	;# 
  2191  0004                     	;# 
  2192  0005                     	;# 
  2193  0006                     	;# 
  2194  0007                     	;# 
  2195  0008                     	;# 
  2196  0009                     	;# 
  2197  000A                     	;# 
  2198  000B                     	;# 
  2199  000C                     	;# 
  2200  000E                     	;# 
  2201  0011                     	;# 
  2202  0012                     	;# 
  2203  0013                     	;# 
  2204  0015                     	;# 
  2205  0016                     	;# 
  2206  0016                     	;# 
  2207  0017                     	;# 
  2208  0018                     	;# 
  2209  0019                     	;# 
  2210  001A                     	;# 
  2211  001B                     	;# 
  2212  001C                     	;# 
  2213  008C                     	;# 
  2214  008E                     	;# 
  2215  0091                     	;# 
  2216  0092                     	;# 
  2217  0093                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009B                     	;# 
  2226  009C                     	;# 
  2227  009D                     	;# 
  2228  009E                     	;# 
  2229  009F                     	;# 
  2230  010C                     	;# 
  2231  010E                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0115                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0118                     	;# 
  2240  0119                     	;# 
  2241  011C                     	;# 
  2242  018C                     	;# 
  2243  018E                     	;# 
  2244  0191                     	;# 
  2245  0191                     	;# 
  2246  0192                     	;# 
  2247  0193                     	;# 
  2248  0193                     	;# 
  2249  0194                     	;# 
  2250  0195                     	;# 
  2251  0196                     	;# 
  2252  0197                     	;# 
  2253  0199                     	;# 
  2254  0199                     	;# 
  2255  0199                     	;# 
  2256  019A                     	;# 
  2257  019A                     	;# 
  2258  019A                     	;# 
  2259  019B                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019C                     	;# 
  2265  019C                     	;# 
  2266  019C                     	;# 
  2267  019D                     	;# 
  2268  019D                     	;# 
  2269  019D                     	;# 
  2270  019E                     	;# 
  2271  019E                     	;# 
  2272  019E                     	;# 
  2273  019F                     	;# 
  2274  019F                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  020C                     	;# 
  2279  020E                     	;# 
  2280  0211                     	;# 
  2281  0211                     	;# 
  2282  0212                     	;# 
  2283  0212                     	;# 
  2284  0213                     	;# 
  2285  0213                     	;# 
  2286  0214                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  028C                     	;# 
  2297  028E                     	;# 
  2298  0291                     	;# 
  2299  0291                     	;# 
  2300  0292                     	;# 
  2301  0293                     	;# 
  2302  0293                     	;# 
  2303  0298                     	;# 
  2304  0298                     	;# 
  2305  0299                     	;# 
  2306  029A                     	;# 
  2307  029A                     	;# 
  2308  029E                     	;# 
  2309  030C                     	;# 
  2310  030E                     	;# 
  2311  038C                     	;# 
  2312  038E                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  0393                     	;# 
  2316  0397                     	;# 
  2317  0398                     	;# 
  2318  0399                     	;# 
  2319  0415                     	;# 
  2320  0416                     	;# 
  2321  0417                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  0511                     	;# 
  2326  0515                     	;# 
  2327  0617                     	;# 
  2328  0618                     	;# 
  2329  0619                     	;# 
  2330  0619                     	;# 
  2331  061A                     	;# 
  2332  061B                     	;# 
  2333  061C                     	;# 
  2334  061C                     	;# 
  2335  0691                     	;# 
  2336  0692                     	;# 
  2337  0693                     	;# 
  2338  0694                     	;# 
  2339  0695                     	;# 
  2340  0696                     	;# 
  2341  0697                     	;# 
  2342  0698                     	;# 
  2343  0699                     	;# 
  2344  069A                     	;# 
  2345  069B                     	;# 
  2346  069C                     	;# 
  2347  069D                     	;# 
  2348  069E                     	;# 
  2349  069F                     	;# 
  2350  0E0F                     	;# 
  2351  0E10                     	;# 
  2352  0E11                     	;# 
  2353  0E12                     	;# 
  2354  0E13                     	;# 
  2355  0E14                     	;# 
  2356  0E15                     	;# 
  2357  0E17                     	;# 
  2358  0E20                     	;# 
  2359  0E21                     	;# 
  2360  0E22                     	;# 
  2361  0E24                     	;# 
  2362  0E25                     	;# 
  2363  0E28                     	;# 
  2364  0E29                     	;# 
  2365  0E2A                     	;# 
  2366  0E2B                     	;# 
  2367  0E90                     	;# 
  2368  0E91                     	;# 
  2369  0E92                     	;# 
  2370  0E94                     	;# 
  2371  0E95                     	;# 
  2372  0EA0                     	;# 
  2373  0EA1                     	;# 
  2374  0EA2                     	;# 
  2375  0EA3                     	;# 
  2376  0EA4                     	;# 
  2377  0EA5                     	;# 
  2378  0F0F                     	;# 
  2379  0F10                     	;# 
  2380  0F11                     	;# 
  2381  0F12                     	;# 
  2382  0F13                     	;# 
  2383  0F14                     	;# 
  2384  0F15                     	;# 
  2385  0F16                     	;# 
  2386  0F17                     	;# 
  2387  0F18                     	;# 
  2388  0F19                     	;# 
  2389  0F1A                     	;# 
  2390  0F1B                     	;# 
  2391  0F1C                     	;# 
  2392  0F1D                     	;# 
  2393  0F1E                     	;# 
  2394  0F1F                     	;# 
  2395  0F20                     	;# 
  2396  0F21                     	;# 
  2397  0F22                     	;# 
  2398  0F23                     	;# 
  2399  0F24                     	;# 
  2400  0F25                     	;# 
  2401  0F26                     	;# 
  2402  0F27                     	;# 
  2403  0F28                     	;# 
  2404  0F29                     	;# 
  2405  0F2A                     	;# 
  2406  0F2B                     	;# 
  2407  0F2C                     	;# 
  2408  0F2D                     	;# 
  2409  0F9E                     	;# 
  2410  0FE4                     	;# 
  2411  0FE5                     	;# 
  2412  0FE6                     	;# 
  2413  0FE7                     	;# 
  2414  0FE8                     	;# 
  2415  0FE9                     	;# 
  2416  0FEA                     	;# 
  2417  0FEB                     	;# 
  2418  0FED                     	;# 
  2419  0FEE                     	;# 
  2420  0FEF                     	;# 
  2421  0000                     	;# 
  2422  0001                     	;# 
  2423  0002                     	;# 
  2424  0003                     	;# 
  2425  0004                     	;# 
  2426  0005                     	;# 
  2427  0006                     	;# 
  2428  0007                     	;# 
  2429  0008                     	;# 
  2430  0009                     	;# 
  2431  000A                     	;# 
  2432  000B                     	;# 
  2433  000C                     	;# 
  2434  000E                     	;# 
  2435  0011                     	;# 
  2436  0012                     	;# 
  2437  0013                     	;# 
  2438  0015                     	;# 
  2439  0016                     	;# 
  2440  0016                     	;# 
  2441  0017                     	;# 
  2442  0018                     	;# 
  2443  0019                     	;# 
  2444  001A                     	;# 
  2445  001B                     	;# 
  2446  001C                     	;# 
  2447  008C                     	;# 
  2448  008E                     	;# 
  2449  0091                     	;# 
  2450  0092                     	;# 
  2451  0093                     	;# 
  2452  0095                     	;# 
  2453  0096                     	;# 
  2454  0097                     	;# 
  2455  0098                     	;# 
  2456  0099                     	;# 
  2457  009A                     	;# 
  2458  009B                     	;# 
  2459  009B                     	;# 
  2460  009C                     	;# 
  2461  009D                     	;# 
  2462  009E                     	;# 
  2463  009F                     	;# 
  2464  010C                     	;# 
  2465  010E                     	;# 
  2466  0111                     	;# 
  2467  0112                     	;# 
  2468  0113                     	;# 
  2469  0114                     	;# 
  2470  0115                     	;# 
  2471  0116                     	;# 
  2472  0117                     	;# 
  2473  0118                     	;# 
  2474  0119                     	;# 
  2475  011C                     	;# 
  2476  018C                     	;# 
  2477  018E                     	;# 
  2478  0191                     	;# 
  2479  0191                     	;# 
  2480  0192                     	;# 
  2481  0193                     	;# 
  2482  0193                     	;# 
  2483  0194                     	;# 
  2484  0195                     	;# 
  2485  0196                     	;# 
  2486  0197                     	;# 
  2487  0199                     	;# 
  2488  0199                     	;# 
  2489  0199                     	;# 
  2490  019A                     	;# 
  2491  019A                     	;# 
  2492  019A                     	;# 
  2493  019B                     	;# 
  2494  019B                     	;# 
  2495  019B                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019C                     	;# 
  2499  019C                     	;# 
  2500  019C                     	;# 
  2501  019D                     	;# 
  2502  019D                     	;# 
  2503  019D                     	;# 
  2504  019E                     	;# 
  2505  019E                     	;# 
  2506  019E                     	;# 
  2507  019F                     	;# 
  2508  019F                     	;# 
  2509  019F                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  020C                     	;# 
  2513  020E                     	;# 
  2514  0211                     	;# 
  2515  0211                     	;# 
  2516  0212                     	;# 
  2517  0212                     	;# 
  2518  0213                     	;# 
  2519  0213                     	;# 
  2520  0214                     	;# 
  2521  0214                     	;# 
  2522  0215                     	;# 
  2523  0215                     	;# 
  2524  0215                     	;# 
  2525  0215                     	;# 
  2526  0216                     	;# 
  2527  0216                     	;# 
  2528  0217                     	;# 
  2529  0217                     	;# 
  2530  028C                     	;# 
  2531  028E                     	;# 
  2532  0291                     	;# 
  2533  0291                     	;# 
  2534  0292                     	;# 
  2535  0293                     	;# 
  2536  0293                     	;# 
  2537  0298                     	;# 
  2538  0298                     	;# 
  2539  0299                     	;# 
  2540  029A                     	;# 
  2541  029A                     	;# 
  2542  029E                     	;# 
  2543  030C                     	;# 
  2544  030E                     	;# 
  2545  038C                     	;# 
  2546  038E                     	;# 
  2547  0391                     	;# 
  2548  0392                     	;# 
  2549  0393                     	;# 
  2550  0397                     	;# 
  2551  0398                     	;# 
  2552  0399                     	;# 
  2553  0415                     	;# 
  2554  0416                     	;# 
  2555  0417                     	;# 
  2556  041C                     	;# 
  2557  041D                     	;# 
  2558  041E                     	;# 
  2559  0511                     	;# 
  2560  0515                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  0691                     	;# 
  2570  0692                     	;# 
  2571  0693                     	;# 
  2572  0694                     	;# 
  2573  0695                     	;# 
  2574  0696                     	;# 
  2575  0697                     	;# 
  2576  0698                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  069B                     	;# 
  2580  069C                     	;# 
  2581  069D                     	;# 
  2582  069E                     	;# 
  2583  069F                     	;# 
  2584  0E0F                     	;# 
  2585  0E10                     	;# 
  2586  0E11                     	;# 
  2587  0E12                     	;# 
  2588  0E13                     	;# 
  2589  0E14                     	;# 
  2590  0E15                     	;# 
  2591  0E17                     	;# 
  2592  0E20                     	;# 
  2593  0E21                     	;# 
  2594  0E22                     	;# 
  2595  0E24                     	;# 
  2596  0E25                     	;# 
  2597  0E28                     	;# 
  2598  0E29                     	;# 
  2599  0E2A                     	;# 
  2600  0E2B                     	;# 
  2601  0E90                     	;# 
  2602  0E91                     	;# 
  2603  0E92                     	;# 
  2604  0E94                     	;# 
  2605  0E95                     	;# 
  2606  0EA0                     	;# 
  2607  0EA1                     	;# 
  2608  0EA2                     	;# 
  2609  0EA3                     	;# 
  2610  0EA4                     	;# 
  2611  0EA5                     	;# 
  2612  0F0F                     	;# 
  2613  0F10                     	;# 
  2614  0F11                     	;# 
  2615  0F12                     	;# 
  2616  0F13                     	;# 
  2617  0F14                     	;# 
  2618  0F15                     	;# 
  2619  0F16                     	;# 
  2620  0F17                     	;# 
  2621  0F18                     	;# 
  2622  0F19                     	;# 
  2623  0F1A                     	;# 
  2624  0F1B                     	;# 
  2625  0F1C                     	;# 
  2626  0F1D                     	;# 
  2627  0F1E                     	;# 
  2628  0F1F                     	;# 
  2629  0F20                     	;# 
  2630  0F21                     	;# 
  2631  0F22                     	;# 
  2632  0F23                     	;# 
  2633  0F24                     	;# 
  2634  0F25                     	;# 
  2635  0F26                     	;# 
  2636  0F27                     	;# 
  2637  0F28                     	;# 
  2638  0F29                     	;# 
  2639  0F2A                     	;# 
  2640  0F2B                     	;# 
  2641  0F2C                     	;# 
  2642  0F2D                     	;# 
  2643  0F9E                     	;# 
  2644  0FE4                     	;# 
  2645  0FE5                     	;# 
  2646  0FE6                     	;# 
  2647  0FE7                     	;# 
  2648  0FE8                     	;# 
  2649  0FE9                     	;# 
  2650  0FEA                     	;# 
  2651  0FEB                     	;# 
  2652  0FED                     	;# 
  2653  0FEE                     	;# 
  2654  0FEF                     	;# 
  2655                           
  2656                           	psect	idataBANK2
  2657  0002                     __pidataBANK2:	
  2658                           
  2659                           ;initializer for _Read_Timer
  2660  0002  3414               	retlw	20
  2661  0003  3400               	retlw	0
  2662                           
  2663                           	psect	idataBANK4
  2664  0C98                     __pidataBANK4:	
  2665                           
  2666                           ;initializer for _BAUD
  2667  0C98  3480               	retlw	128
  2668  0C99  3425               	retlw	37
  2669  0C9A  3400               	retlw	0
  2670  0C9B  3400               	retlw	0
  2671                           
  2672                           ;initializer for _Version
  2673  0C9C  3431               	retlw	49
  2674  0C9D  342E               	retlw	46
  2675  0C9E  3431               	retlw	49
  2676  0C9F  345F               	retlw	95
  2677  0CA0  3444               	retlw	68
  2678  0CA1  3457               	retlw	87
  2679  0CA2  3430               	retlw	48
  2680  0CA3  3461               	retlw	97
  2681  0CA4  3400               	retlw	0
  2682                           
  2683                           ;initializer for _MEM
  2684  0CA5  3400               	retlw	0
  2685  0CA6  3400               	retlw	0
  2686  0CA7  3480               	retlw	128
  2687  0CA8  3425               	retlw	37
  2688                           
  2689                           	psect	stringtext
  2690  0800                     __pstringtext:	
  2691  0800                     _ScanCodeFunctionNoE0:	
  2692  0800  3400               	retlw	0
  2693  0801  3411               	retlw	17
  2694  0802  3400               	retlw	0
  2695  0803  340C               	retlw	12
  2696  0804  340A               	retlw	10
  2697  0805  3406               	retlw	6
  2698  0806  3407               	retlw	7
  2699  0807  3414               	retlw	20
  2700  0808  3400               	retlw	0
  2701  0809  3412               	retlw	18
  2702  080A  3410               	retlw	16
  2703  080B  340E               	retlw	14
  2704  080C  340B               	retlw	11
  2705  080D  3400               	retlw	0
  2706  080E  3400               	retlw	0
  2707  080F  3400               	retlw	0
  2708  0810  3400               	retlw	0
  2709  0811  341C               	retlw	28
  2710  0812  3400               	retlw	0
  2711  0813  3400               	retlw	0
  2712  0814  341A               	retlw	26
  2713  0815  3400               	retlw	0
  2714  0816  3400               	retlw	0
  2715  0817  3400               	retlw	0
  2716  0818  3400               	retlw	0
  2717  0819  3400               	retlw	0
  2718  081A  3400               	retlw	0
  2719  081B  3400               	retlw	0
  2720  081C  3400               	retlw	0
  2721  081D  3400               	retlw	0
  2722  081E  3400               	retlw	0
  2723  081F  3400               	retlw	0
  2724  0820  3400               	retlw	0
  2725  0821  3400               	retlw	0
  2726  0822  3400               	retlw	0
  2727  0823  3400               	retlw	0
  2728  0824  3400               	retlw	0
  2729  0825  3400               	retlw	0
  2730  0826  3400               	retlw	0
  2731  0827  3400               	retlw	0
  2732  0828  3400               	retlw	0
  2733  0829  3400               	retlw	0
  2734  082A  3400               	retlw	0
  2735  082B  3400               	retlw	0
  2736  082C  3400               	retlw	0
  2737  082D  3400               	retlw	0
  2738  082E  3400               	retlw	0
  2739  082F  3400               	retlw	0
  2740  0830  3400               	retlw	0
  2741  0831  3400               	retlw	0
  2742  0832  3400               	retlw	0
  2743  0833  3400               	retlw	0
  2744  0834  3400               	retlw	0
  2745  0835  3400               	retlw	0
  2746  0836  3400               	retlw	0
  2747  0837  3400               	retlw	0
  2748  0838  3400               	retlw	0
  2749  0839  3400               	retlw	0
  2750  083A  3400               	retlw	0
  2751  083B  3400               	retlw	0
  2752  083C  3400               	retlw	0
  2753  083D  3400               	retlw	0
  2754  083E  3400               	retlw	0
  2755  083F  3400               	retlw	0
  2756  0840  3400               	retlw	0
  2757  0841  3400               	retlw	0
  2758  0842  3400               	retlw	0
  2759  0843  3400               	retlw	0
  2760  0844  3400               	retlw	0
  2761  0845  3400               	retlw	0
  2762  0846  3400               	retlw	0
  2763  0847  3400               	retlw	0
  2764  0848  3400               	retlw	0
  2765  0849  3400               	retlw	0
  2766  084A  3400               	retlw	0
  2767  084B  3400               	retlw	0
  2768  084C  3400               	retlw	0
  2769  084D  3400               	retlw	0
  2770  084E  3400               	retlw	0
  2771  084F  3400               	retlw	0
  2772  0850  3400               	retlw	0
  2773  0851  3400               	retlw	0
  2774  0852  3400               	retlw	0
  2775  0853  3400               	retlw	0
  2776  0854  3400               	retlw	0
  2777  0855  3400               	retlw	0
  2778  0856  3400               	retlw	0
  2779  0857  3400               	retlw	0
  2780  0858  3400               	retlw	0
  2781  0859  3400               	retlw	0
  2782  085A  3400               	retlw	0
  2783  085B  3400               	retlw	0
  2784  085C  3400               	retlw	0
  2785  085D  3400               	retlw	0
  2786  085E  3400               	retlw	0
  2787  085F  3400               	retlw	0
  2788  0860  3400               	retlw	0
  2789  0861  3400               	retlw	0
  2790  0862  3400               	retlw	0
  2791  0863  3400               	retlw	0
  2792  0864  3400               	retlw	0
  2793  0865  3400               	retlw	0
  2794  0866  3400               	retlw	0
  2795  0867  3400               	retlw	0
  2796  0868  3400               	retlw	0
  2797  0869  3400               	retlw	0
  2798  086A  3400               	retlw	0
  2799  086B  3400               	retlw	0
  2800  086C  3400               	retlw	0
  2801  086D  3400               	retlw	0
  2802  086E  3400               	retlw	0
  2803  086F  3400               	retlw	0
  2804  0870  3400               	retlw	0
  2805  0871  3400               	retlw	0
  2806  0872  3400               	retlw	0
  2807  0873  3400               	retlw	0
  2808  0874  3400               	retlw	0
  2809  0875  3400               	retlw	0
  2810  0876  3400               	retlw	0
  2811  0877  3400               	retlw	0
  2812  0878  3413               	retlw	19
  2813  0879  3400               	retlw	0
  2814  087A  3400               	retlw	0
  2815  087B  3400               	retlw	0
  2816  087C  3400               	retlw	0
  2817  087D  3400               	retlw	0
  2818  087E  3400               	retlw	0
  2819  087F  3400               	retlw	0
  2820  0880  3400               	retlw	0
  2821  0881  3400               	retlw	0
  2822  0882  3400               	retlw	0
  2823  0883  340F               	retlw	15
  2824  0884                     __end_of_ScanCodeFunctionNoE0:	
  2825  0884                     _ScanCode:	
  2826  0884  3409               	retlw	9
  2827  0885  3460               	retlw	96
  2828  0886  3400               	retlw	0
  2829  0887  3400               	retlw	0
  2830  0888  3400               	retlw	0
  2831  0889  3400               	retlw	0
  2832  088A  3400               	retlw	0
  2833  088B  3400               	retlw	0
  2834  088C  3471               	retlw	113
  2835  088D  3431               	retlw	49
  2836  088E  3400               	retlw	0
  2837  088F  3400               	retlw	0
  2838  0890  3400               	retlw	0
  2839  0891  347A               	retlw	122
  2840  0892  3473               	retlw	115
  2841  0893  3461               	retlw	97
  2842  0894  3477               	retlw	119
  2843  0895  3432               	retlw	50
  2844  0896  3400               	retlw	0
  2845  0897  3400               	retlw	0
  2846  0898  3463               	retlw	99
  2847  0899  3478               	retlw	120
  2848  089A  3464               	retlw	100
  2849  089B  3465               	retlw	101
  2850  089C  3434               	retlw	52
  2851  089D  3433               	retlw	51
  2852  089E  3400               	retlw	0
  2853  089F  3400               	retlw	0
  2854  08A0  3420               	retlw	32
  2855  08A1  3476               	retlw	118
  2856  08A2  3466               	retlw	102
  2857  08A3  3474               	retlw	116
  2858  08A4  3472               	retlw	114
  2859  08A5  3435               	retlw	53
  2860  08A6  3400               	retlw	0
  2861  08A7  3400               	retlw	0
  2862  08A8  346E               	retlw	110
  2863  08A9  3462               	retlw	98
  2864  08AA  3468               	retlw	104
  2865  08AB  3467               	retlw	103
  2866  08AC  3479               	retlw	121
  2867  08AD  3436               	retlw	54
  2868  08AE  3400               	retlw	0
  2869  08AF  3400               	retlw	0
  2870  08B0  3400               	retlw	0
  2871  08B1  346D               	retlw	109
  2872  08B2  346A               	retlw	106
  2873  08B3  3475               	retlw	117
  2874  08B4  3437               	retlw	55
  2875  08B5  3438               	retlw	56
  2876  08B6  3400               	retlw	0
  2877  08B7  3400               	retlw	0
  2878  08B8  342C               	retlw	44
  2879  08B9  346B               	retlw	107
  2880  08BA  3469               	retlw	105
  2881  08BB  346F               	retlw	111
  2882  08BC  3430               	retlw	48
  2883  08BD  3439               	retlw	57
  2884  08BE  3400               	retlw	0
  2885  08BF  3400               	retlw	0
  2886  08C0  342E               	retlw	46
  2887  08C1  342F               	retlw	47
  2888  08C2  346C               	retlw	108
  2889  08C3  343B               	retlw	59
  2890  08C4  3470               	retlw	112
  2891  08C5  342D               	retlw	45
  2892  08C6  3400               	retlw	0
  2893  08C7  3400               	retlw	0
  2894  08C8  3400               	retlw	0
  2895  08C9  3427               	retlw	39
  2896  08CA  3400               	retlw	0
  2897  08CB  345B               	retlw	91
  2898  08CC  343D               	retlw	61
  2899  08CD  3400               	retlw	0
  2900  08CE  3400               	retlw	0
  2901  08CF  3400               	retlw	0
  2902  08D0  3400               	retlw	0
  2903  08D1  340D               	retlw	13
  2904  08D2  345D               	retlw	93
  2905  08D3  3400               	retlw	0
  2906  08D4  345C               	retlw	92
  2907  08D5  3400               	retlw	0
  2908  08D6  3400               	retlw	0
  2909  08D7  3400               	retlw	0
  2910  08D8  3400               	retlw	0
  2911  08D9  3400               	retlw	0
  2912  08DA  3400               	retlw	0
  2913  08DB  3400               	retlw	0
  2914  08DC  3400               	retlw	0
  2915  08DD  3408               	retlw	8
  2916  08DE  3400               	retlw	0
  2917  08DF  3400               	retlw	0
  2918  08E0  3431               	retlw	49
  2919  08E1  3400               	retlw	0
  2920  08E2  3434               	retlw	52
  2921  08E3  3437               	retlw	55
  2922  08E4  3400               	retlw	0
  2923  08E5  3400               	retlw	0
  2924  08E6  3400               	retlw	0
  2925  08E7  3430               	retlw	48
  2926  08E8  342E               	retlw	46
  2927  08E9  3432               	retlw	50
  2928  08EA  3435               	retlw	53
  2929  08EB  3436               	retlw	54
  2930  08EC  3438               	retlw	56
  2931  08ED  341B               	retlw	27
  2932  08EE  3400               	retlw	0
  2933  08EF  3400               	retlw	0
  2934  08F0  342B               	retlw	43
  2935  08F1  3433               	retlw	51
  2936  08F2  342D               	retlw	45
  2937  08F3  342A               	retlw	42
  2938  08F4  3439               	retlw	57
  2939  08F5                     __end_of_ScanCode:	
  2940  08F5                     _ScanCodeSHIFT:	
  2941  08F5  3409               	retlw	9
  2942  08F6  347E               	retlw	126
  2943  08F7  3400               	retlw	0
  2944  08F8  3400               	retlw	0
  2945  08F9  3400               	retlw	0
  2946  08FA  3400               	retlw	0
  2947  08FB  3400               	retlw	0
  2948  08FC  3400               	retlw	0
  2949  08FD  3451               	retlw	81
  2950  08FE  3421               	retlw	33
  2951  08FF  3400               	retlw	0
  2952  0900  3400               	retlw	0
  2953  0901  3400               	retlw	0
  2954  0902  345A               	retlw	90
  2955  0903  3453               	retlw	83
  2956  0904  3441               	retlw	65
  2957  0905  3457               	retlw	87
  2958  0906  3440               	retlw	64
  2959  0907  3400               	retlw	0
  2960  0908  3400               	retlw	0
  2961  0909  3443               	retlw	67
  2962  090A  3458               	retlw	88
  2963  090B  3444               	retlw	68
  2964  090C  3445               	retlw	69
  2965  090D  3424               	retlw	36
  2966  090E  3423               	retlw	35
  2967  090F  3400               	retlw	0
  2968  0910  3400               	retlw	0
  2969  0911  3420               	retlw	32
  2970  0912  3456               	retlw	86
  2971  0913  3446               	retlw	70
  2972  0914  3454               	retlw	84
  2973  0915  3452               	retlw	82
  2974  0916  3425               	retlw	37
  2975  0917  3400               	retlw	0
  2976  0918  3400               	retlw	0
  2977  0919  344E               	retlw	78
  2978  091A  3442               	retlw	66
  2979  091B  3448               	retlw	72
  2980  091C  3447               	retlw	71
  2981  091D  3459               	retlw	89
  2982  091E  345E               	retlw	94
  2983  091F  3400               	retlw	0
  2984  0920  3400               	retlw	0
  2985  0921  3400               	retlw	0
  2986  0922  344D               	retlw	77
  2987  0923  344A               	retlw	74
  2988  0924  3455               	retlw	85
  2989  0925  3426               	retlw	38
  2990  0926  342A               	retlw	42
  2991  0927  3400               	retlw	0
  2992  0928  3400               	retlw	0
  2993  0929  343C               	retlw	60
  2994  092A  344B               	retlw	75
  2995  092B  3449               	retlw	73
  2996  092C  344F               	retlw	79
  2997  092D  3429               	retlw	41
  2998  092E  3428               	retlw	40
  2999  092F  3400               	retlw	0
  3000  0930  3400               	retlw	0
  3001  0931  343E               	retlw	62
  3002  0932  343F               	retlw	63
  3003  0933  344C               	retlw	76
  3004  0934  343A               	retlw	58
  3005  0935  3450               	retlw	80
  3006  0936  345F               	retlw	95
  3007  0937  3400               	retlw	0
  3008  0938  3400               	retlw	0
  3009  0939  3400               	retlw	0
  3010  093A  3422               	retlw	34
  3011  093B  3400               	retlw	0
  3012  093C  347B               	retlw	123
  3013  093D  342B               	retlw	43
  3014  093E  3400               	retlw	0
  3015  093F  3400               	retlw	0
  3016  0940  3400               	retlw	0
  3017  0941  3400               	retlw	0
  3018  0942  340D               	retlw	13
  3019  0943  347D               	retlw	125
  3020  0944  3400               	retlw	0
  3021  0945  347C               	retlw	124
  3022  0946  3400               	retlw	0
  3023  0947  3400               	retlw	0
  3024  0948  3400               	retlw	0
  3025  0949  3400               	retlw	0
  3026  094A  3400               	retlw	0
  3027  094B  3400               	retlw	0
  3028  094C  3400               	retlw	0
  3029  094D  3400               	retlw	0
  3030  094E  3408               	retlw	8
  3031  094F  3400               	retlw	0
  3032  0950  3400               	retlw	0
  3033  0951  3431               	retlw	49
  3034  0952  3400               	retlw	0
  3035  0953  3434               	retlw	52
  3036  0954  3437               	retlw	55
  3037  0955  3400               	retlw	0
  3038  0956  3400               	retlw	0
  3039  0957  3400               	retlw	0
  3040  0958  3430               	retlw	48
  3041  0959  342E               	retlw	46
  3042  095A  3432               	retlw	50
  3043  095B  3435               	retlw	53
  3044  095C  3436               	retlw	54
  3045  095D  3438               	retlw	56
  3046  095E  341B               	retlw	27
  3047  095F  3400               	retlw	0
  3048  0960  3400               	retlw	0
  3049  0961  342B               	retlw	43
  3050  0962  3433               	retlw	51
  3051  0963  342D               	retlw	45
  3052  0964  342A               	retlw	42
  3053  0965  3439               	retlw	57
  3054  0966                     __end_of_ScanCodeSHIFT:	
  3055  0966                     _ScanCodeFunctionE0:	
  3056  0966  341E               	retlw	30
  3057  0967  3400               	retlw	0
  3058  0968  3400               	retlw	0
  3059  0969  341F               	retlw	31
  3060  096A  3400               	retlw	0
  3061  096B  3400               	retlw	0
  3062  096C  3400               	retlw	0
  3063  096D  3400               	retlw	0
  3064  096E  3400               	retlw	0
  3065  096F  3400               	retlw	0
  3066  0970  3400               	retlw	0
  3067  0971  3400               	retlw	0
  3068  0972  3400               	retlw	0
  3069  0973  3400               	retlw	0
  3070  0974  3419               	retlw	25
  3071  0975  3400               	retlw	0
  3072  0976  3400               	retlw	0
  3073  0977  3400               	retlw	0
  3074  0978  3400               	retlw	0
  3075  0979  3400               	retlw	0
  3076  097A  3400               	retlw	0
  3077  097B  3400               	retlw	0
  3078  097C  341D               	retlw	29
  3079  097D  3400               	retlw	0
  3080  097E  3400               	retlw	0
  3081  097F  3400               	retlw	0
  3082  0980  3400               	retlw	0
  3083  0981  3400               	retlw	0
  3084  0982  3400               	retlw	0
  3085  0983  3400               	retlw	0
  3086  0984  3400               	retlw	0
  3087  0985  3400               	retlw	0
  3088  0986  3400               	retlw	0
  3089  0987  3400               	retlw	0
  3090  0988  3400               	retlw	0
  3091  0989  3400               	retlw	0
  3092  098A  3400               	retlw	0
  3093  098B  3400               	retlw	0
  3094  098C  3400               	retlw	0
  3095  098D  3400               	retlw	0
  3096  098E  3400               	retlw	0
  3097  098F  3400               	retlw	0
  3098  0990  3400               	retlw	0
  3099  0991  3400               	retlw	0
  3100  0992  3400               	retlw	0
  3101  0993  3400               	retlw	0
  3102  0994  3400               	retlw	0
  3103  0995  3400               	retlw	0
  3104  0996  3400               	retlw	0
  3105  0997  3400               	retlw	0
  3106  0998  3400               	retlw	0
  3107  0999  3400               	retlw	0
  3108  099A  3400               	retlw	0
  3109  099B  3400               	retlw	0
  3110  099C  3400               	retlw	0
  3111  099D  3400               	retlw	0
  3112  099E  3400               	retlw	0
  3113  099F  342F               	retlw	47
  3114  09A0  3400               	retlw	0
  3115  09A1  3400               	retlw	0
  3116  09A2  3400               	retlw	0
  3117  09A3  3400               	retlw	0
  3118  09A4  3400               	retlw	0
  3119  09A5  3400               	retlw	0
  3120  09A6  3400               	retlw	0
  3121  09A7  3400               	retlw	0
  3122  09A8  3400               	retlw	0
  3123  09A9  3400               	retlw	0
  3124  09AA  3400               	retlw	0
  3125  09AB  3400               	retlw	0
  3126  09AC  3400               	retlw	0
  3127  09AD  3400               	retlw	0
  3128  09AE  3400               	retlw	0
  3129  09AF  340D               	retlw	13
  3130  09B0  3400               	retlw	0
  3131  09B1  3400               	retlw	0
  3132  09B2  3400               	retlw	0
  3133  09B3  3400               	retlw	0
  3134  09B4  3400               	retlw	0
  3135  09B5  3400               	retlw	0
  3136  09B6  3400               	retlw	0
  3137  09B7  3400               	retlw	0
  3138  09B8  3400               	retlw	0
  3139  09B9  3400               	retlw	0
  3140  09BA  3400               	retlw	0
  3141  09BB  3400               	retlw	0
  3142  09BC  3400               	retlw	0
  3143  09BD  3400               	retlw	0
  3144  09BE  3401               	retlw	1
  3145  09BF  3400               	retlw	0
  3146  09C0  3403               	retlw	3
  3147  09C1  3416               	retlw	22
  3148  09C2  3400               	retlw	0
  3149  09C3  3400               	retlw	0
  3150  09C4  3400               	retlw	0
  3151  09C5  3415               	retlw	21
  3152  09C6  347F               	retlw	127
  3153  09C7  3404               	retlw	4
  3154  09C8  3400               	retlw	0
  3155  09C9  3405               	retlw	5
  3156  09CA  3402               	retlw	2
  3157  09CB  3400               	retlw	0
  3158  09CC  3400               	retlw	0
  3159  09CD  3400               	retlw	0
  3160  09CE  3400               	retlw	0
  3161  09CF  3418               	retlw	24
  3162  09D0  3400               	retlw	0
  3163  09D1  3400               	retlw	0
  3164  09D2  3417               	retlw	23
  3165  09D3                     __end_of_ScanCodeFunctionE0:	
  3166  09D3                     _dpowers:	
  3167  09D3  3401               	retlw	1
  3168  09D4  3400               	retlw	0
  3169  09D5  3400               	retlw	0
  3170  09D6  3400               	retlw	0
  3171  09D7  340A               	retlw	10
  3172  09D8  3400               	retlw	0
  3173  09D9  3400               	retlw	0
  3174  09DA  3400               	retlw	0
  3175  09DB  3464               	retlw	100
  3176  09DC  3400               	retlw	0
  3177  09DD  3400               	retlw	0
  3178  09DE  3400               	retlw	0
  3179  09DF  34E8               	retlw	232
  3180  09E0  3403               	retlw	3
  3181  09E1  3400               	retlw	0
  3182  09E2  3400               	retlw	0
  3183  09E3  3410               	retlw	16
  3184  09E4  3427               	retlw	39
  3185  09E5  3400               	retlw	0
  3186  09E6  3400               	retlw	0
  3187  09E7  34A0               	retlw	160
  3188  09E8  3486               	retlw	134
  3189  09E9  3401               	retlw	1
  3190  09EA  3400               	retlw	0
  3191  09EB  3440               	retlw	64
  3192  09EC  3442               	retlw	66
  3193  09ED  340F               	retlw	15
  3194  09EE  3400               	retlw	0
  3195  09EF  3480               	retlw	128
  3196  09F0  3496               	retlw	150
  3197  09F1  3498               	retlw	152
  3198  09F2  3400               	retlw	0
  3199  09F3  3400               	retlw	0
  3200  09F4  34E1               	retlw	225
  3201  09F5  34F5               	retlw	245
  3202  09F6  3405               	retlw	5
  3203  09F7  3400               	retlw	0
  3204  09F8  34CA               	retlw	202
  3205  09F9  349A               	retlw	154
  3206  09FA  343B               	retlw	59
  3207  09FB                     __end_of_dpowers:	
  3208  000B                     _INTCON	set	11
  3209  000B                     _INTCONbits	set	11
  3210  0011                     _PIR1bits	set	17
  3211  000C                     _PORTA	set	12
  3212  001B                     _PR2	set	27
  3213  001C                     _T2CON	set	28
  3214  001C                     _T2CONbits	set	28
  3215  009D                     _ADCON0	set	157
  3216  009E                     _ADCON1	set	158
  3217  009C                     _ADRESH	set	156
  3218  009B                     _ADRESL	set	155
  3219  0095                     _OPTION_REGbits	set	149
  3220  0099                     _OSCCON	set	153
  3221  009A                     _OSCSTAT	set	154
  3222  0091                     _PIE1	set	145
  3223  0091                     _PIE1bits	set	145
  3224  008C                     _TRISAbits	set	140
  3225  008E                     _TRISCbits	set	142
  3226  04D0                     _HFIOFS	set	1232
  3227  0117                     _FVRCON	set	279
  3228  010C                     _LATA	set	268
  3229  010E                     _LATC	set	270
  3230  018C                     _ANSELA	set	396
  3231  018E                     _ANSELC	set	398
  3232  019F                     _BAUD1CON	set	415
  3233  0192                     _PMADRH	set	402
  3234  0191                     _PMADRL	set	401
  3235  0195                     _PMCON1	set	405
  3236  0196                     _PMCON2	set	406
  3237  0194                     _PMDATH	set	404
  3238  0193                     _PMDATL	set	403
  3239  019D                     _RC1STA	set	413
  3240  019D                     _RC1STAbits	set	413
  3241  0199                     _RCREG	set	409
  3242  019D                     _RCSTA	set	413
  3243  019D                     _RCSTAbits	set	413
  3244  019B                     _SPBRG	set	411
  3245  019C                     _SPBRGH	set	412
  3246  019E                     _TX1STA	set	414
  3247  019E                     _TX1STAbits	set	414
  3248  019A                     _TXREG	set	410
  3249  019E                     _TXSTAbits	set	414
  3250  020C                     _WPUA	set	524
  3251  020E                     _WPUC	set	526
  3252  029A                     _CCP2CONbits	set	666
  3253  0393                     _IOCAF	set	915
  3254  0392                     _IOCAN	set	914
  3255  0391                     _IOCAP	set	913
  3256  0E25                     _CKPPS	set	3621
  3257  0E0F                     _PPSLOCK	set	3599
  3258  0E24                     _RXPPS	set	3620
  3259  0EA2                     _RC2PPS	set	3746
  3260  09FB                     __stringdata:	
  3261  09FB                     STR_30:	
  3262  09FB  3442               	retlw	66	;'B'
  3263  09FC  3461               	retlw	97	;'a'
  3264  09FD  3475               	retlw	117	;'u'
  3265  09FE  3464               	retlw	100	;'d'
  3266  09FF  3420               	retlw	32	;' '
  3267  0A00  3477               	retlw	119	;'w'
  3268  0A01  3469               	retlw	105	;'i'
  3269  0A02  346C               	retlw	108	;'l'
  3270  0A03  346C               	retlw	108	;'l'
  3271  0A04  3420               	retlw	32	;' '
  3272  0A05  3462               	retlw	98	;'b'
  3273  0A06  3465               	retlw	101	;'e'
  3274  0A07  3420               	retlw	32	;' '
  3275  0A08  3473               	retlw	115	;'s'
  3276  0A09  3465               	retlw	101	;'e'
  3277  0A0A  3474               	retlw	116	;'t'
  3278  0A0B  3420               	retlw	32	;' '
  3279  0A0C  3474               	retlw	116	;'t'
  3280  0A0D  346F               	retlw	111	;'o'
  3281  0A0E  3420               	retlw	32	;' '
  3282  0A0F  3425               	retlw	37	;'%'
  3283  0A10  346C               	retlw	108	;'l'
  3284  0A11  3475               	retlw	117	;'u'
  3285  0A12  3420               	retlw	32	;' '
  3286  0A13  3477               	retlw	119	;'w'
  3287  0A14  3469               	retlw	105	;'i'
  3288  0A15  3474               	retlw	116	;'t'
  3289  0A16  3468               	retlw	104	;'h'
  3290  0A17  3420               	retlw	32	;' '
  3291  0A18  3445               	retlw	69	;'E'
  3292  0A19  3476               	retlw	118	;'v'
  3293  0A1A  3465               	retlw	101	;'e'
  3294  0A1B  346E               	retlw	110	;'n'
  3295  0A1C  3420               	retlw	32	;' '
  3296  0A1D  3470               	retlw	112	;'p'
  3297  0A1E  3461               	retlw	97	;'a'
  3298  0A1F  3472               	retlw	114	;'r'
  3299  0A20  3469               	retlw	105	;'i'
  3300  0A21  3474               	retlw	116	;'t'
  3301  0A22  3479               	retlw	121	;'y'
  3302  0A23  3420               	retlw	32	;' '
  3303  0A24  3462               	retlw	98	;'b'
  3304  0A25  3469               	retlw	105	;'i'
  3305  0A26  3474               	retlw	116	;'t'
  3306  0A27  340D               	retlw	13
  3307  0A28  340A               	retlw	10
  3308  0A29  3400               	retlw	0
  3309  0A2A                     STR_29:	
  3310  0A2A  3442               	retlw	66	;'B'
  3311  0A2B  3461               	retlw	97	;'a'
  3312  0A2C  3475               	retlw	117	;'u'
  3313  0A2D  3464               	retlw	100	;'d'
  3314  0A2E  3420               	retlw	32	;' '
  3315  0A2F  3477               	retlw	119	;'w'
  3316  0A30  3469               	retlw	105	;'i'
  3317  0A31  346C               	retlw	108	;'l'
  3318  0A32  346C               	retlw	108	;'l'
  3319  0A33  3420               	retlw	32	;' '
  3320  0A34  3462               	retlw	98	;'b'
  3321  0A35  3465               	retlw	101	;'e'
  3322  0A36  3420               	retlw	32	;' '
  3323  0A37  3473               	retlw	115	;'s'
  3324  0A38  3465               	retlw	101	;'e'
  3325  0A39  3474               	retlw	116	;'t'
  3326  0A3A  3420               	retlw	32	;' '
  3327  0A3B  3474               	retlw	116	;'t'
  3328  0A3C  346F               	retlw	111	;'o'
  3329  0A3D  3420               	retlw	32	;' '
  3330  0A3E  3425               	retlw	37	;'%'
  3331  0A3F  346C               	retlw	108	;'l'
  3332  0A40  3475               	retlw	117	;'u'
  3333  0A41  3420               	retlw	32	;' '
  3334  0A42  3477               	retlw	119	;'w'
  3335  0A43  3469               	retlw	105	;'i'
  3336  0A44  3474               	retlw	116	;'t'
  3337  0A45  3468               	retlw	104	;'h'
  3338  0A46  3420               	retlw	32	;' '
  3339  0A47  344F               	retlw	79	;'O'
  3340  0A48  3464               	retlw	100	;'d'
  3341  0A49  3464               	retlw	100	;'d'
  3342  0A4A  3420               	retlw	32	;' '
  3343  0A4B  3470               	retlw	112	;'p'
  3344  0A4C  3461               	retlw	97	;'a'
  3345  0A4D  3472               	retlw	114	;'r'
  3346  0A4E  3469               	retlw	105	;'i'
  3347  0A4F  3474               	retlw	116	;'t'
  3348  0A50  3479               	retlw	121	;'y'
  3349  0A51  3420               	retlw	32	;' '
  3350  0A52  3462               	retlw	98	;'b'
  3351  0A53  3469               	retlw	105	;'i'
  3352  0A54  3474               	retlw	116	;'t'
  3353  0A55  340D               	retlw	13
  3354  0A56  340A               	retlw	10
  3355  0A57  3400               	retlw	0
  3356  0A58                     STR_33:	
  3357  0A58  3442               	retlw	66	;'B'
  3358  0A59  3461               	retlw	97	;'a'
  3359  0A5A  3475               	retlw	117	;'u'
  3360  0A5B  3464               	retlw	100	;'d'
  3361  0A5C  3420               	retlw	32	;' '
  3362  0A5D  3477               	retlw	119	;'w'
  3363  0A5E  3469               	retlw	105	;'i'
  3364  0A5F  346C               	retlw	108	;'l'
  3365  0A60  346C               	retlw	108	;'l'
  3366  0A61  3420               	retlw	32	;' '
  3367  0A62  3462               	retlw	98	;'b'
  3368  0A63  3465               	retlw	101	;'e'
  3369  0A64  3420               	retlw	32	;' '
  3370  0A65  3473               	retlw	115	;'s'
  3371  0A66  3465               	retlw	101	;'e'
  3372  0A67  3474               	retlw	116	;'t'
  3373  0A68  3420               	retlw	32	;' '
  3374  0A69  3474               	retlw	116	;'t'
  3375  0A6A  346F               	retlw	111	;'o'
  3376  0A6B  3420               	retlw	32	;' '
  3377  0A6C  3425               	retlw	37	;'%'
  3378  0A6D  346C               	retlw	108	;'l'
  3379  0A6E  3475               	retlw	117	;'u'
  3380  0A6F  3420               	retlw	32	;' '
  3381  0A70  3477               	retlw	119	;'w'
  3382  0A71  3469               	retlw	105	;'i'
  3383  0A72  3474               	retlw	116	;'t'
  3384  0A73  3468               	retlw	104	;'h'
  3385  0A74  3420               	retlw	32	;' '
  3386  0A75  346E               	retlw	110	;'n'
  3387  0A76  346F               	retlw	111	;'o'
  3388  0A77  3420               	retlw	32	;' '
  3389  0A78  3470               	retlw	112	;'p'
  3390  0A79  3461               	retlw	97	;'a'
  3391  0A7A  3472               	retlw	114	;'r'
  3392  0A7B  3469               	retlw	105	;'i'
  3393  0A7C  3474               	retlw	116	;'t'
  3394  0A7D  3479               	retlw	121	;'y'
  3395  0A7E  3420               	retlw	32	;' '
  3396  0A7F  3462               	retlw	98	;'b'
  3397  0A80  3469               	retlw	105	;'i'
  3398  0A81  3474               	retlw	116	;'t'
  3399  0A82  340D               	retlw	13
  3400  0A83  340A               	retlw	10
  3401  0A84  3400               	retlw	0
  3402  0A85                     STR_32:	
  3403  0A85  3442               	retlw	66	;'B'
  3404  0A86  3461               	retlw	97	;'a'
  3405  0A87  3475               	retlw	117	;'u'
  3406  0A88  3464               	retlw	100	;'d'
  3407  0A89  3420               	retlw	32	;' '
  3408  0A8A  3477               	retlw	119	;'w'
  3409  0A8B  3469               	retlw	105	;'i'
  3410  0A8C  346C               	retlw	108	;'l'
  3411  0A8D  346C               	retlw	108	;'l'
  3412  0A8E  3420               	retlw	32	;' '
  3413  0A8F  3462               	retlw	98	;'b'
  3414  0A90  3465               	retlw	101	;'e'
  3415  0A91  3420               	retlw	32	;' '
  3416  0A92  3473               	retlw	115	;'s'
  3417  0A93  3465               	retlw	101	;'e'
  3418  0A94  3474               	retlw	116	;'t'
  3419  0A95  3420               	retlw	32	;' '
  3420  0A96  3474               	retlw	116	;'t'
  3421  0A97  346F               	retlw	111	;'o'
  3422  0A98  3420               	retlw	32	;' '
  3423  0A99  3425               	retlw	37	;'%'
  3424  0A9A  346C               	retlw	108	;'l'
  3425  0A9B  3475               	retlw	117	;'u'
  3426  0A9C  3420               	retlw	32	;' '
  3427  0A9D  3477               	retlw	119	;'w'
  3428  0A9E  3469               	retlw	105	;'i'
  3429  0A9F  3474               	retlw	116	;'t'
  3430  0AA0  3468               	retlw	104	;'h'
  3431  0AA1  3420               	retlw	32	;' '
  3432  0AA2  3453               	retlw	83	;'S'
  3433  0AA3  3470               	retlw	112	;'p'
  3434  0AA4  3461               	retlw	97	;'a'
  3435  0AA5  3463               	retlw	99	;'c'
  3436  0AA6  3465               	retlw	101	;'e'
  3437  0AA7  3420               	retlw	32	;' '
  3438  0AA8  3462               	retlw	98	;'b'
  3439  0AA9  3469               	retlw	105	;'i'
  3440  0AAA  3474               	retlw	116	;'t'
  3441  0AAB  340D               	retlw	13
  3442  0AAC  340A               	retlw	10
  3443  0AAD  3400               	retlw	0
  3444  0AAE                     STR_31:	
  3445  0AAE  3442               	retlw	66	;'B'
  3446  0AAF  3461               	retlw	97	;'a'
  3447  0AB0  3475               	retlw	117	;'u'
  3448  0AB1  3464               	retlw	100	;'d'
  3449  0AB2  3420               	retlw	32	;' '
  3450  0AB3  3477               	retlw	119	;'w'
  3451  0AB4  3469               	retlw	105	;'i'
  3452  0AB5  346C               	retlw	108	;'l'
  3453  0AB6  346C               	retlw	108	;'l'
  3454  0AB7  3420               	retlw	32	;' '
  3455  0AB8  3462               	retlw	98	;'b'
  3456  0AB9  3465               	retlw	101	;'e'
  3457  0ABA  3420               	retlw	32	;' '
  3458  0ABB  3473               	retlw	115	;'s'
  3459  0ABC  3465               	retlw	101	;'e'
  3460  0ABD  3474               	retlw	116	;'t'
  3461  0ABE  3420               	retlw	32	;' '
  3462  0ABF  3474               	retlw	116	;'t'
  3463  0AC0  346F               	retlw	111	;'o'
  3464  0AC1  3420               	retlw	32	;' '
  3465  0AC2  3425               	retlw	37	;'%'
  3466  0AC3  346C               	retlw	108	;'l'
  3467  0AC4  3475               	retlw	117	;'u'
  3468  0AC5  3420               	retlw	32	;' '
  3469  0AC6  3477               	retlw	119	;'w'
  3470  0AC7  3469               	retlw	105	;'i'
  3471  0AC8  3474               	retlw	116	;'t'
  3472  0AC9  3468               	retlw	104	;'h'
  3473  0ACA  3420               	retlw	32	;' '
  3474  0ACB  344D               	retlw	77	;'M'
  3475  0ACC  3461               	retlw	97	;'a'
  3476  0ACD  3472               	retlw	114	;'r'
  3477  0ACE  346B               	retlw	107	;'k'
  3478  0ACF  3420               	retlw	32	;' '
  3479  0AD0  3462               	retlw	98	;'b'
  3480  0AD1  3469               	retlw	105	;'i'
  3481  0AD2  3474               	retlw	116	;'t'
  3482  0AD3  340D               	retlw	13
  3483  0AD4  340A               	retlw	10
  3484  0AD5  3400               	retlw	0
  3485  0AD6                     STR_27:	
  3486  0AD6  3452               	retlw	82	;'R'
  3487  0AD7  3465               	retlw	101	;'e'
  3488  0AD8  3473               	retlw	115	;'s'
  3489  0AD9  3465               	retlw	101	;'e'
  3490  0ADA  3474               	retlw	116	;'t'
  3491  0ADB  3420               	retlw	32	;' '
  3492  0ADC  3474               	retlw	116	;'t'
  3493  0ADD  346F               	retlw	111	;'o'
  3494  0ADE  3420               	retlw	32	;' '
  3495  0ADF  3439               	retlw	57	;'9'
  3496  0AE0  3436               	retlw	54	;'6'
  3497  0AE1  3430               	retlw	48	;'0'
  3498  0AE2  3430               	retlw	48	;'0'
  3499  0AE3  3420               	retlw	32	;' '
  3500  0AE4  3477               	retlw	119	;'w'
  3501  0AE5  3469               	retlw	105	;'i'
  3502  0AE6  3474               	retlw	116	;'t'
  3503  0AE7  3468               	retlw	104	;'h'
  3504  0AE8  3420               	retlw	32	;' '
  3505  0AE9  346E               	retlw	110	;'n'
  3506  0AEA  346F               	retlw	111	;'o'
  3507  0AEB  3420               	retlw	32	;' '
  3508  0AEC  3470               	retlw	112	;'p'
  3509  0AED  3461               	retlw	97	;'a'
  3510  0AEE  3472               	retlw	114	;'r'
  3511  0AEF  3469               	retlw	105	;'i'
  3512  0AF0  3474               	retlw	116	;'t'
  3513  0AF1  3479               	retlw	121	;'y'
  3514  0AF2  3420               	retlw	32	;' '
  3515  0AF3  3462               	retlw	98	;'b'
  3516  0AF4  3469               	retlw	105	;'i'
  3517  0AF5  3474               	retlw	116	;'t'
  3518  0AF6  340D               	retlw	13
  3519  0AF7  340A               	retlw	10
  3520  0AF8  3400               	retlw	0
  3521  0AF9                     STR_14:	
  3522  0AF9  3442               	retlw	66	;'B'
  3523  0AFA  3461               	retlw	97	;'a'
  3524  0AFB  3475               	retlw	117	;'u'
  3525  0AFC  3464               	retlw	100	;'d'
  3526  0AFD  3420               	retlw	32	;' '
  3527  0AFE  3469               	retlw	105	;'i'
  3528  0AFF  3473               	retlw	115	;'s'
  3529  0B00  3420               	retlw	32	;' '
  3530  0B01  3425               	retlw	37	;'%'
  3531  0B02  346C               	retlw	108	;'l'
  3532  0B03  3475               	retlw	117	;'u'
  3533  0B04  3420               	retlw	32	;' '
  3534  0B05  3477               	retlw	119	;'w'
  3535  0B06  3469               	retlw	105	;'i'
  3536  0B07  3474               	retlw	116	;'t'
  3537  0B08  3468               	retlw	104	;'h'
  3538  0B09  3420               	retlw	32	;' '
  3539  0B0A  3445               	retlw	69	;'E'
  3540  0B0B  3476               	retlw	118	;'v'
  3541  0B0C  3465               	retlw	101	;'e'
  3542  0B0D  346E               	retlw	110	;'n'
  3543  0B0E  3420               	retlw	32	;' '
  3544  0B0F  3470               	retlw	112	;'p'
  3545  0B10  3461               	retlw	97	;'a'
  3546  0B11  3472               	retlw	114	;'r'
  3547  0B12  3469               	retlw	105	;'i'
  3548  0B13  3474               	retlw	116	;'t'
  3549  0B14  3479               	retlw	121	;'y'
  3550  0B15  3420               	retlw	32	;' '
  3551  0B16  3462               	retlw	98	;'b'
  3552  0B17  3469               	retlw	105	;'i'
  3553  0B18  3474               	retlw	116	;'t'
  3554  0B19  340D               	retlw	13
  3555  0B1A  340A               	retlw	10
  3556  0B1B  3400               	retlw	0
  3557  0B1C                     STR_5:	
  3558  0B1C  3454               	retlw	84	;'T'
  3559  0B1D  346F               	retlw	111	;'o'
  3560  0B1E  3420               	retlw	32	;' '
  3561  0B1F  3443               	retlw	67	;'C'
  3562  0B20  3468               	retlw	104	;'h'
  3563  0B21  3461               	retlw	97	;'a'
  3564  0B22  346E               	retlw	110	;'n'
  3565  0B23  3467               	retlw	103	;'g'
  3566  0B24  3465               	retlw	101	;'e'
  3567  0B25  3420               	retlw	32	;' '
  3568  0B26  3442               	retlw	66	;'B'
  3569  0B27  3441               	retlw	65	;'A'
  3570  0B28  3455               	retlw	85	;'U'
  3571  0B29  3444               	retlw	68	;'D'
  3572  0B2A  3420               	retlw	32	;' '
  3573  0B2B  3468               	retlw	104	;'h'
  3574  0B2C  3469               	retlw	105	;'i'
  3575  0B2D  3474               	retlw	116	;'t'
  3576  0B2E  3420               	retlw	32	;' '
  3577  0B2F  3422               	retlw	34	;'"'
  3578  0B30  3443               	retlw	67	;'C'
  3579  0B31  344E               	retlw	78	;'N'
  3580  0B32  3454               	retlw	84	;'T'
  3581  0B33  342B               	retlw	43	;'+'
  3582  0B34  3441               	retlw	65	;'A'
  3583  0B35  344C               	retlw	76	;'L'
  3584  0B36  3454               	retlw	84	;'T'
  3585  0B37  342B               	retlw	43	;'+'
  3586  0B38  3444               	retlw	68	;'D'
  3587  0B39  3445               	retlw	69	;'E'
  3588  0B3A  344C               	retlw	76	;'L'
  3589  0B3B  3422               	retlw	34	;'"'
  3590  0B3C  340D               	retlw	13
  3591  0B3D  340A               	retlw	10
  3592  0B3E  3400               	retlw	0
  3593  0B3F                     STR_13:	
  3594  0B3F  3442               	retlw	66	;'B'
  3595  0B40  3461               	retlw	97	;'a'
  3596  0B41  3475               	retlw	117	;'u'
  3597  0B42  3464               	retlw	100	;'d'
  3598  0B43  3420               	retlw	32	;' '
  3599  0B44  3469               	retlw	105	;'i'
  3600  0B45  3473               	retlw	115	;'s'
  3601  0B46  3420               	retlw	32	;' '
  3602  0B47  3425               	retlw	37	;'%'
  3603  0B48  346C               	retlw	108	;'l'
  3604  0B49  3475               	retlw	117	;'u'
  3605  0B4A  3420               	retlw	32	;' '
  3606  0B4B  3477               	retlw	119	;'w'
  3607  0B4C  3469               	retlw	105	;'i'
  3608  0B4D  3474               	retlw	116	;'t'
  3609  0B4E  3468               	retlw	104	;'h'
  3610  0B4F  3420               	retlw	32	;' '
  3611  0B50  344F               	retlw	79	;'O'
  3612  0B51  3464               	retlw	100	;'d'
  3613  0B52  3464               	retlw	100	;'d'
  3614  0B53  3420               	retlw	32	;' '
  3615  0B54  3470               	retlw	112	;'p'
  3616  0B55  3461               	retlw	97	;'a'
  3617  0B56  3472               	retlw	114	;'r'
  3618  0B57  3469               	retlw	105	;'i'
  3619  0B58  3474               	retlw	116	;'t'
  3620  0B59  3479               	retlw	121	;'y'
  3621  0B5A  3420               	retlw	32	;' '
  3622  0B5B  3462               	retlw	98	;'b'
  3623  0B5C  3469               	retlw	105	;'i'
  3624  0B5D  3474               	retlw	116	;'t'
  3625  0B5E  340D               	retlw	13
  3626  0B5F  340A               	retlw	10
  3627  0B60  3400               	retlw	0
  3628  0B61                     STR_17:	
  3629  0B61  3442               	retlw	66	;'B'
  3630  0B62  3461               	retlw	97	;'a'
  3631  0B63  3475               	retlw	117	;'u'
  3632  0B64  3464               	retlw	100	;'d'
  3633  0B65  3420               	retlw	32	;' '
  3634  0B66  3469               	retlw	105	;'i'
  3635  0B67  3473               	retlw	115	;'s'
  3636  0B68  3420               	retlw	32	;' '
  3637  0B69  3425               	retlw	37	;'%'
  3638  0B6A  346C               	retlw	108	;'l'
  3639  0B6B  3475               	retlw	117	;'u'
  3640  0B6C  3420               	retlw	32	;' '
  3641  0B6D  3477               	retlw	119	;'w'
  3642  0B6E  3469               	retlw	105	;'i'
  3643  0B6F  3474               	retlw	116	;'t'
  3644  0B70  3468               	retlw	104	;'h'
  3645  0B71  3420               	retlw	32	;' '
  3646  0B72  346E               	retlw	110	;'n'
  3647  0B73  346F               	retlw	111	;'o'
  3648  0B74  3420               	retlw	32	;' '
  3649  0B75  3470               	retlw	112	;'p'
  3650  0B76  3461               	retlw	97	;'a'
  3651  0B77  3472               	retlw	114	;'r'
  3652  0B78  3469               	retlw	105	;'i'
  3653  0B79  3474               	retlw	116	;'t'
  3654  0B7A  3479               	retlw	121	;'y'
  3655  0B7B  3420               	retlw	32	;' '
  3656  0B7C  3462               	retlw	98	;'b'
  3657  0B7D  3469               	retlw	105	;'i'
  3658  0B7E  3474               	retlw	116	;'t'
  3659  0B7F  340D               	retlw	13
  3660  0B80  340A               	retlw	10
  3661  0B81  3400               	retlw	0
  3662  0B82                     STR_16:	
  3663  0B82  3442               	retlw	66	;'B'
  3664  0B83  3461               	retlw	97	;'a'
  3665  0B84  3475               	retlw	117	;'u'
  3666  0B85  3464               	retlw	100	;'d'
  3667  0B86  3420               	retlw	32	;' '
  3668  0B87  3469               	retlw	105	;'i'
  3669  0B88  3473               	retlw	115	;'s'
  3670  0B89  3420               	retlw	32	;' '
  3671  0B8A  3425               	retlw	37	;'%'
  3672  0B8B  346C               	retlw	108	;'l'
  3673  0B8C  3475               	retlw	117	;'u'
  3674  0B8D  3420               	retlw	32	;' '
  3675  0B8E  3477               	retlw	119	;'w'
  3676  0B8F  3469               	retlw	105	;'i'
  3677  0B90  3474               	retlw	116	;'t'
  3678  0B91  3468               	retlw	104	;'h'
  3679  0B92  3420               	retlw	32	;' '
  3680  0B93  3453               	retlw	83	;'S'
  3681  0B94  3470               	retlw	112	;'p'
  3682  0B95  3461               	retlw	97	;'a'
  3683  0B96  3463               	retlw	99	;'c'
  3684  0B97  3465               	retlw	101	;'e'
  3685  0B98  3420               	retlw	32	;' '
  3686  0B99  3462               	retlw	98	;'b'
  3687  0B9A  3469               	retlw	105	;'i'
  3688  0B9B  3474               	retlw	116	;'t'
  3689  0B9C  340D               	retlw	13
  3690  0B9D  340A               	retlw	10
  3691  0B9E  3400               	retlw	0
  3692  0B9F                     STR_15:	
  3693  0B9F  3442               	retlw	66	;'B'
  3694  0BA0  3461               	retlw	97	;'a'
  3695  0BA1  3475               	retlw	117	;'u'
  3696  0BA2  3464               	retlw	100	;'d'
  3697  0BA3  3420               	retlw	32	;' '
  3698  0BA4  3469               	retlw	105	;'i'
  3699  0BA5  3473               	retlw	115	;'s'
  3700  0BA6  3420               	retlw	32	;' '
  3701  0BA7  3425               	retlw	37	;'%'
  3702  0BA8  346C               	retlw	108	;'l'
  3703  0BA9  3475               	retlw	117	;'u'
  3704  0BAA  3420               	retlw	32	;' '
  3705  0BAB  3477               	retlw	119	;'w'
  3706  0BAC  3469               	retlw	105	;'i'
  3707  0BAD  3474               	retlw	116	;'t'
  3708  0BAE  3468               	retlw	104	;'h'
  3709  0BAF  3420               	retlw	32	;' '
  3710  0BB0  344D               	retlw	77	;'M'
  3711  0BB1  3461               	retlw	97	;'a'
  3712  0BB2  3472               	retlw	114	;'r'
  3713  0BB3  346B               	retlw	107	;'k'
  3714  0BB4  3420               	retlw	32	;' '
  3715  0BB5  3462               	retlw	98	;'b'
  3716  0BB6  3469               	retlw	105	;'i'
  3717  0BB7  3474               	retlw	116	;'t'
  3718  0BB8  340D               	retlw	13
  3719  0BB9  340A               	retlw	10
  3720  0BBA  3400               	retlw	0
  3721  0BBB                     STR_2:	
  3722  0BBB  3450               	retlw	80	;'P'
  3723  0BBC  3453               	retlw	83	;'S'
  3724  0BBD  342F               	retlw	47	;'/'
  3725  0BBE  3432               	retlw	50	;'2'
  3726  0BBF  3420               	retlw	32	;' '
  3727  0BC0  344B               	retlw	75	;'K'
  3728  0BC1  3465               	retlw	101	;'e'
  3729  0BC2  3479               	retlw	121	;'y'
  3730  0BC3  3462               	retlw	98	;'b'
  3731  0BC4  346F               	retlw	111	;'o'
  3732  0BC5  3461               	retlw	97	;'a'
  3733  0BC6  3472               	retlw	114	;'r'
  3734  0BC7  3464               	retlw	100	;'d'
  3735  0BC8  3420               	retlw	32	;' '
  3736  0BC9  3474               	retlw	116	;'t'
  3737  0BCA  346F               	retlw	111	;'o'
  3738  0BCB  3420               	retlw	32	;' '
  3739  0BCC  3452               	retlw	82	;'R'
  3740  0BCD  3453               	retlw	83	;'S'
  3741  0BCE  342D               	retlw	45	;'-'
  3742  0BCF  3432               	retlw	50	;'2'
  3743  0BD0  3433               	retlw	51	;'3'
  3744  0BD1  3432               	retlw	50	;'2'
  3745  0BD2  340D               	retlw	13
  3746  0BD3  340A               	retlw	10
  3747  0BD4  3400               	retlw	0
  3748  0BD5                     STR_6:	
  3749  0BD5  344E               	retlw	78	;'N'
  3750  0BD6  346F               	retlw	111	;'o'
  3751  0BD7  3420               	retlw	32	;' '
  3752  0BD8  344B               	retlw	75	;'K'
  3753  0BD9  3465               	retlw	101	;'e'
  3754  0BDA  3479               	retlw	121	;'y'
  3755  0BDB  3462               	retlw	98	;'b'
  3756  0BDC  346F               	retlw	111	;'o'
  3757  0BDD  3461               	retlw	97	;'a'
  3758  0BDE  3472               	retlw	114	;'r'
  3759  0BDF  3464               	retlw	100	;'d'
  3760  0BE0  3420               	retlw	32	;' '
  3761  0BE1  3463               	retlw	99	;'c'
  3762  0BE2  346F               	retlw	111	;'o'
  3763  0BE3  346E               	retlw	110	;'n'
  3764  0BE4  346E               	retlw	110	;'n'
  3765  0BE5  3465               	retlw	101	;'e'
  3766  0BE6  3463               	retlw	99	;'c'
  3767  0BE7  3474               	retlw	116	;'t'
  3768  0BE8  3465               	retlw	101	;'e'
  3769  0BE9  3464               	retlw	100	;'d'
  3770  0BEA  340D               	retlw	13
  3771  0BEB  340A               	retlw	10
  3772  0BEC  3400               	retlw	0
  3773  0BED                     STR_8:	
  3774  0BED  3449               	retlw	73	;'I'
  3775  0BEE  346E               	retlw	110	;'n'
  3776  0BEF  3469               	retlw	105	;'i'
  3777  0BF0  3474               	retlw	116	;'t'
  3778  0BF1  3469               	retlw	105	;'i'
  3779  0BF2  3461               	retlw	97	;'a'
  3780  0BF3  346C               	retlw	108	;'l'
  3781  0BF4  3469               	retlw	105	;'i'
  3782  0BF5  347A               	retlw	122	;'z'
  3783  0BF6  3461               	retlw	97	;'a'
  3784  0BF7  3474               	retlw	116	;'t'
  3785  0BF8  3469               	retlw	105	;'i'
  3786  0BF9  346F               	retlw	111	;'o'
  3787  0BFA  346E               	retlw	110	;'n'
  3788  0BFB  3420               	retlw	32	;' '
  3789  0BFC  3446               	retlw	70	;'F'
  3790  0BFD  3461               	retlw	97	;'a'
  3791  0BFE  3469               	retlw	105	;'i'
  3792  0BFF  346C               	retlw	108	;'l'
  3793  0C00  340D               	retlw	13
  3794  0C01  340A               	retlw	10
  3795  0C02  3400               	retlw	0
  3796  0C03                     STR_7:	
  3797  0C03  344B               	retlw	75	;'K'
  3798  0C04  3465               	retlw	101	;'e'
  3799  0C05  3479               	retlw	121	;'y'
  3800  0C06  3462               	retlw	98	;'b'
  3801  0C07  346F               	retlw	111	;'o'
  3802  0C08  3461               	retlw	97	;'a'
  3803  0C09  3472               	retlw	114	;'r'
  3804  0C0A  3464               	retlw	100	;'d'
  3805  0C0B  3420               	retlw	32	;' '
  3806  0C0C  3443               	retlw	67	;'C'
  3807  0C0D  346F               	retlw	111	;'o'
  3808  0C0E  346E               	retlw	110	;'n'
  3809  0C0F  346E               	retlw	110	;'n'
  3810  0C10  3465               	retlw	101	;'e'
  3811  0C11  3463               	retlw	99	;'c'
  3812  0C12  3474               	retlw	116	;'t'
  3813  0C13  3465               	retlw	101	;'e'
  3814  0C14  3464               	retlw	100	;'d'
  3815  0C15  340D               	retlw	13
  3816  0C16  340A               	retlw	10
  3817  0C17  3400               	retlw	0
  3818  0C18                     STR_34:	
  3819  0C18  3442               	retlw	66	;'B'
  3820  0C19  3461               	retlw	97	;'a'
  3821  0C1A  3475               	retlw	117	;'u'
  3822  0C1B  3464               	retlw	100	;'d'
  3823  0C1C  3420               	retlw	32	;' '
  3824  0C1D  344F               	retlw	79	;'O'
  3825  0C1E  3475               	retlw	117	;'u'
  3826  0C1F  3474               	retlw	116	;'t'
  3827  0C20  3420               	retlw	32	;' '
  3828  0C21  346F               	retlw	111	;'o'
  3829  0C22  3466               	retlw	102	;'f'
  3830  0C23  3420               	retlw	32	;' '
  3831  0C24  3452               	retlw	82	;'R'
  3832  0C25  3461               	retlw	97	;'a'
  3833  0C26  346E               	retlw	110	;'n'
  3834  0C27  3467               	retlw	103	;'g'
  3835  0C28  3465               	retlw	101	;'e'
  3836  0C29  340D               	retlw	13
  3837  0C2A  340A               	retlw	10
  3838  0C2B  3400               	retlw	0
  3839  0C2C                     STR_11:	
  3840  0C2C  3456               	retlw	86	;'V'
  3841  0C2D  346F               	retlw	111	;'o'
  3842  0C2E  346C               	retlw	108	;'l'
  3843  0C2F  3474               	retlw	116	;'t'
  3844  0C30  3461               	retlw	97	;'a'
  3845  0C31  3467               	retlw	103	;'g'
  3846  0C32  3465               	retlw	101	;'e'
  3847  0C33  3420               	retlw	32	;' '
  3848  0C34  3474               	retlw	116	;'t'
  3849  0C35  346F               	retlw	111	;'o'
  3850  0C36  346F               	retlw	111	;'o'
  3851  0C37  3420               	retlw	32	;' '
  3852  0C38  3448               	retlw	72	;'H'
  3853  0C39  3469               	retlw	105	;'i'
  3854  0C3A  3467               	retlw	103	;'g'
  3855  0C3B  3468               	retlw	104	;'h'
  3856  0C3C  3421               	retlw	33	;'!'
  3857  0C3D  340D               	retlw	13
  3858  0C3E  340A               	retlw	10
  3859  0C3F  3400               	retlw	0
  3860  0C40                     STR_10:	
  3861  0C40  3456               	retlw	86	;'V'
  3862  0C41  346F               	retlw	111	;'o'
  3863  0C42  346C               	retlw	108	;'l'
  3864  0C43  3474               	retlw	116	;'t'
  3865  0C44  3461               	retlw	97	;'a'
  3866  0C45  3467               	retlw	103	;'g'
  3867  0C46  3465               	retlw	101	;'e'
  3868  0C47  3420               	retlw	32	;' '
  3869  0C48  3474               	retlw	116	;'t'
  3870  0C49  346F               	retlw	111	;'o'
  3871  0C4A  346F               	retlw	111	;'o'
  3872  0C4B  3420               	retlw	32	;' '
  3873  0C4C  344C               	retlw	76	;'L'
  3874  0C4D  346F               	retlw	111	;'o'
  3875  0C4E  3477               	retlw	119	;'w'
  3876  0C4F  3421               	retlw	33	;'!'
  3877  0C50  340D               	retlw	13
  3878  0C51  340A               	retlw	10
  3879  0C52  3400               	retlw	0
  3880  0C53                     STR_3:	
  3881  0C53  3446               	retlw	70	;'F'
  3882  0C54  3469               	retlw	105	;'i'
  3883  0C55  3472               	retlw	114	;'r'
  3884  0C56  346D               	retlw	109	;'m'
  3885  0C57  3477               	retlw	119	;'w'
  3886  0C58  3461               	retlw	97	;'a'
  3887  0C59  3472               	retlw	114	;'r'
  3888  0C5A  3465               	retlw	101	;'e'
  3889  0C5B  3420               	retlw	32	;' '
  3890  0C5C  3456               	retlw	86	;'V'
  3891  0C5D  3465               	retlw	101	;'e'
  3892  0C5E  3472               	retlw	114	;'r'
  3893  0C5F  3473               	retlw	115	;'s'
  3894  0C60  3469               	retlw	105	;'i'
  3895  0C61  346F               	retlw	111	;'o'
  3896  0C62  346E               	retlw	110	;'n'
  3897  0C63  343A               	retlw	58	;':'
  3898  0C64  3420               	retlw	32	;' '
  3899  0C65  3400               	retlw	0
  3900  0C66                     STR_26:	
  3901  0C66  3445               	retlw	69	;'E'
  3902  0C67  346E               	retlw	110	;'n'
  3903  0C68  3474               	retlw	116	;'t'
  3904  0C69  3465               	retlw	101	;'e'
  3905  0C6A  3472               	retlw	114	;'r'
  3906  0C6B  3420               	retlw	32	;' '
  3907  0C6C  3442               	retlw	66	;'B'
  3908  0C6D  3461               	retlw	97	;'a'
  3909  0C6E  3475               	retlw	117	;'u'
  3910  0C6F  3464               	retlw	100	;'d'
  3911  0C70  3420               	retlw	32	;' '
  3912  0C71  3472               	retlw	114	;'r'
  3913  0C72  3461               	retlw	97	;'a'
  3914  0C73  3474               	retlw	116	;'t'
  3915  0C74  3465               	retlw	101	;'e'
  3916  0C75  340D               	retlw	13
  3917  0C76  340A               	retlw	10
  3918  0C77  3400               	retlw	0
  3919  0C78                     STR_9:	
  3920  0C78  344B               	retlw	75	;'K'
  3921  0C79  3465               	retlw	101	;'e'
  3922  0C7A  3479               	retlw	121	;'y'
  3923  0C7B  3462               	retlw	98	;'b'
  3924  0C7C  346F               	retlw	111	;'o'
  3925  0C7D  3461               	retlw	97	;'a'
  3926  0C7E  3472               	retlw	114	;'r'
  3927  0C7F  3464               	retlw	100	;'d'
  3928  0C80  3420               	retlw	32	;' '
  3929  0C81  3450               	retlw	80	;'P'
  3930  0C82  3461               	retlw	97	;'a'
  3931  0C83  3473               	retlw	115	;'s'
  3932  0C84  3473               	retlw	115	;'s'
  3933  0C85  3421               	retlw	33	;'!'
  3934  0C86  340D               	retlw	13
  3935  0C87  340A               	retlw	10
  3936  0C88  3400               	retlw	0
  3937  0C89                     STR_19:	
  3938  0C89  3450               	retlw	80	;'P'
  3939  0C8A  3472               	retlw	114	;'r'
  3940  0C8B  346F               	retlw	111	;'o'
  3941  0C8C  3467               	retlw	103	;'g'
  3942  0C8D  3472               	retlw	114	;'r'
  3943  0C8E  3461               	retlw	97	;'a'
  3944  0C8F  346D               	retlw	109	;'m'
  3945  0C90  3420               	retlw	32	;' '
  3946  0C91  3446               	retlw	70	;'F'
  3947  0C92  3461               	retlw	97	;'a'
  3948  0C93  3469               	retlw	105	;'i'
  3949  0C94  346C               	retlw	108	;'l'
  3950  0C95  340D               	retlw	13
  3951  0C96  340A               	retlw	10
  3952  0C97  3400               	retlw	0
  3953  0C98                     __end_of__stringdata:	
  3954                           
  3955                           ; #config settings
  3956  0000                     
  3957                           	psect	cinit
  3958  00DB                     start_initialization:	
  3959  00DB                     __initialization:	
  3960                           
  3961                           ; Clear objects allocated to BANK0
  3962  00DB  01E6               	clrf	__pbssBANK0& (0+127)
  3963  00DC  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3964  00DD  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3965  00DE  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3966  00DF  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3967                           
  3968                           ; Clear objects allocated to BANK1
  3969  00E0  0021               	movlb	1	; select bank1
  3970  00E1  01E8               	clrf	__pbssBANK1& (0+127)
  3971  00E2  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3972  00E3  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3973  00E4  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  3974                           
  3975                           ; Clear objects allocated to BANK2
  3976  00E5  305F               	movlw	low __pbssBANK2
  3977  00E6  0084               	movwf	4
  3978  00E7  3001               	movlw	high __pbssBANK2
  3979  00E8  0085               	movwf	5
  3980  00E9  300E               	movlw	14
  3981  00EA  3190  2000  3180   	fcall	clear_ram0
  3982                           
  3983                           ; Clear objects allocated to BANK3
  3984  00ED  30A0               	movlw	low __pbssBANK3
  3985  00EE  0084               	movwf	4
  3986  00EF  3001               	movlw	high __pbssBANK3
  3987  00F0  0085               	movwf	5
  3988  00F1  300F               	movlw	15
  3989  00F2  3190  2000  3180   	fcall	clear_ram0
  3990                           
  3991                           ; Clear objects allocated to BANK4
  3992  00F5  3031               	movlw	low __pbssBANK4
  3993  00F6  0084               	movwf	4
  3994  00F7  3002               	movlw	high __pbssBANK4
  3995  00F8  0085               	movwf	5
  3996  00F9  300C               	movlw	12
  3997  00FA  3190  2000  3180   	fcall	clear_ram0
  3998                           
  3999                           ; Initialize objects allocated to BANK2
  4000  00FD  0022               	movlb	2	; select bank2
  4001  00FE  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  4002  0101  00ED               	movwf	__pdataBANK2& (0+127)
  4003  0102  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  4004  0105  00EE               	movwf	(__pdataBANK2+1)& (0+127)
  4005                           
  4006                           ; Initialize objects allocated to BANK4
  4007  0106  3098               	movlw	low __pidataBANK4
  4008  0107  0084               	movwf	4
  4009  0108  308C               	movlw	(high __pidataBANK4)| (0+128)
  4010  0109  0085               	movwf	5
  4011  010A  3020               	movlw	low __pdataBANK4
  4012  010B  0086               	movwf	6
  4013  010C  3002               	movlw	high __pdataBANK4
  4014  010D  0087               	movwf	7
  4015  010E  3011               	movlw	17
  4016  010F  3198  20B0         	fcall	init_ram
  4017  0111                     end_of_initialization:	
  4018                           ;End of C runtime variable initialization code
  4019                           
  4020  0111                     __end_of__initialization:	
  4021  0111  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  4022  0112  0020               	movlb	0
  4023  0113  318E  2E48         	ljmp	_main	;jump to C main() function
  4024                           
  4025                           	psect	bssBANK0
  4026  0066                     __pbssBANK0:	
  4027  0066                     _Left_Shift_Key:	
  4028  0066                     	ds	1
  4029  0067                     _PARITY:	
  4030  0067                     	ds	1
  4031  0068                     _PS_2_bits:	
  4032  0068                     	ds	1
  4033  0069                     _ParityTyped:	
  4034  0069                     	ds	1
  4035  006A                     _Shift_Key:	
  4036  006A                     	ds	1
  4037                           
  4038                           	psect	bssBANK1
  4039  00E8                     __pbssBANK1:	
  4040  00E8                     _Alarm:	
  4041  00E8                     	ds	1
  4042  00E9                     _ECHO:	
  4043  00E9                     	ds	1
  4044  00EA                     _blinkdelay:	
  4045  00EA                     	ds	1
  4046  00EB                     _i:	
  4047  00EB                     	ds	1
  4048                           
  4049                           	psect	bssBANK2
  4050  015F                     __pbssBANK2:	
  4051  015F                     _BatteryVoltage:	
  4052  015F                     	ds	4
  4053  0163                     _BAUDMODE:	
  4054  0163                     	ds	1
  4055  0164                     _Caps_Lock_Key:	
  4056  0164                     	ds	1
  4057  0165                     _Caps_Lock_Key_old:	
  4058  0165                     	ds	1
  4059  0166                     _Delete:	
  4060  0166                     	ds	1
  4061  0167                     _LALT:	
  4062  0167                     	ds	1
  4063  0168                     _LControl:	
  4064  0168                     	ds	1
  4065  0169                     _Left_Shift_Key_old:	
  4066  0169                     	ds	1
  4067  016A                     _RALT:	
  4068  016A                     	ds	1
  4069  016B                     _RControl:	
  4070  016B                     	ds	1
  4071  016C                     _Right_Shift_Key_old:	
  4072  016C                     	ds	1
  4073                           
  4074                           	psect	dataBANK2
  4075  016D                     __pdataBANK2:	
  4076  016D                     _Read_Timer:	
  4077  016D                     	ds	2
  4078                           
  4079                           	psect	bssBANK3
  4080  01A0                     __pbssBANK3:	
  4081  01A0                     _BaudTyped:	
  4082  01A0                     	ds	4
  4083  01A4                     _PS_2_Read_Data_First:	
  4084  01A4                     	ds	2
  4085  01A6                     _PS_2_Read_Data_Forth:	
  4086  01A6                     	ds	2
  4087  01A8                     _PS_2_Read_Data_Second:	
  4088  01A8                     	ds	2
  4089  01AA                     _PS_2_Read_Data_Third:	
  4090  01AA                     	ds	2
  4091  01AC                     _CapsCount:	
  4092  01AC                     	ds	1
  4093  01AD                     _Caps_Lock:	
  4094  01AD                     	ds	1
  4095  01AE                     _Right_Shift_Key:	
  4096  01AE                     	ds	1
  4097                           
  4098                           	psect	bssBANK4
  4099  0231                     __pbssBANK4:	
  4100  0231                     _PS_2_Read_Data_FirstTEMP:	
  4101  0231                     	ds	2
  4102  0233                     _PS_2_Read_Data_ForthTEMP:	
  4103  0233                     	ds	2
  4104  0235                     _PS_2_Read_Data_SecondTEMP:	
  4105  0235                     	ds	2
  4106  0237                     _PS_2_Read_Data_ThirdTEMP:	
  4107  0237                     	ds	2
  4108  0239                     _SinLEDtimer:	
  4109  0239                     	ds	2
  4110  023B                     _pwrLEDtoggle:	
  4111  023B                     	ds	2
  4112                           
  4113                           	psect	dataBANK4
  4114  0220                     __pdataBANK4:	
  4115  0220                     _BAUD:	
  4116  0220                     	ds	4
  4117  0224                     _Version:	
  4118  0224                     	ds	9
  4119  022D                     _MEM:	
  4120  022D                     	ds	4
  4121                           
  4122                           	psect	clrtext
  4123  1000                     clear_ram0:	
  4124                           ;	Called with FSR0 containing the base address, and
  4125                           ;	WREG with the size to clear
  4126                           
  4127  1000  0064               	clrwdt	;clear the watchdog before getting into this loop
  4128  1001                     clrloop0:	
  4129  1001  0180               	clrf	0	;clear RAM location pointed to by FSR
  4130  1002  3101               	addfsr 0,1
  4131  1003  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4132  1004  2801               	goto	clrloop0	;have we reached the end yet?
  4133  1005  3400               	retlw	0	;all done for this memory range, return
  4134                           
  4135                           	psect	inittext
  4136  18B0                     init_ram:	
  4137  18B0  00FE               	movwf	126
  4138  18B1                     initloop:	
  4139  18B1  0012               	moviw fsr0++
  4140  18B2  001E               	movwi fsr1++
  4141  18B3  0BFE               	decfsz	126,f
  4142  18B4  28B1               	goto	initloop
  4143  18B5  3400               	retlw	0
  4144                           
  4145                           	psect	cstackBANK5
  4146  02A0                     __pcstackBANK5:	
  4147  02A0                     PS_2_Update@buf:	
  4148                           
  4149                           ; 60 bytes @ 0x0
  4150  02A0                     	ds	60
  4151  02DC                     _PS_2_Update$854:	
  4152                           
  4153                           ; 1 bytes @ 0x3C
  4154  02DC                     	ds	1
  4155  02DD                     _PS_2_Update$855:	
  4156                           
  4157                           ; 1 bytes @ 0x3D
  4158  02DD                     	ds	1
  4159  02DE                     _PS_2_Update$856:	
  4160                           
  4161                           ; 1 bytes @ 0x3E
  4162  02DE                     	ds	1
  4163  02DF                     _PS_2_Update$857:	
  4164                           
  4165                           ; 1 bytes @ 0x3F
  4166  02DF                     	ds	1
  4167  02E0                     PS_2_Update@temp:	
  4168                           
  4169                           ; 1 bytes @ 0x40
  4170  02E0                     	ds	1
  4171                           
  4172                           	psect	cstackBANK3
  4173  01AF                     __pcstackBANK3:	
  4174  01AF                     ??_PS_2_Update:	
  4175                           
  4176                           ; 0 bytes @ 0x0
  4177  01AF                     	ds	9
  4178                           
  4179                           	psect	cstackBANK2
  4180  0120                     __pcstackBANK2:	
  4181  0120                     SetBaud@buf:	
  4182                           
  4183                           ; 50 bytes @ 0x0
  4184  0120                     	ds	50
  4185  0152                     SetBaud@Baudtemp:	
  4186                           
  4187                           ; 4 bytes @ 0x32
  4188  0152                     	ds	4
  4189  0156                     SetBaud@Paritytemp:	
  4190                           
  4191                           ; 4 bytes @ 0x36
  4192  0156                     	ds	4
  4193  015A                     SetBaud@temp:	
  4194                           
  4195                           ; 4 bytes @ 0x3A
  4196  015A                     	ds	4
  4197  015E                     SetBaud@i:	
  4198                           
  4199                           ; 1 bytes @ 0x3E
  4200  015E                     	ds	1
  4201                           
  4202                           	psect	cstackBANK1
  4203  00A0                     __pcstackBANK1:	
  4204  00A0                     ReadVoltage@voltage:	
  4205  00A0                     WriteFlash_Sequential@TempBufH:	
  4206                           ; 4 bytes @ 0x0
  4207                           
  4208  00A0                     Init_System@buf:	
  4209                           ; 32 bytes @ 0x0
  4210                           
  4211                           
  4212                           ; 60 bytes @ 0x0
  4213  00A0                     	ds	4
  4214  00A4                     ReadVoltage@temp:	
  4215                           
  4216                           ; 2 bytes @ 0x4
  4217  00A4                     	ds	28
  4218  00C0                     WriteFlash_Sequential@TempBufL:	
  4219                           
  4220                           ; 32 bytes @ 0x20
  4221  00C0                     	ds	28
  4222  00DC                     Init_System@temp:	
  4223                           
  4224                           ; 4 bytes @ 0x3C
  4225  00DC                     	ds	4
  4226  00E0                     Init_System@Parity:	
  4227  00E0                     WriteFlash_Sequential@tempH:	
  4228                           ; 1 bytes @ 0x40
  4229                           
  4230                           
  4231                           ; 1 bytes @ 0x40
  4232  00E0                     	ds	1
  4233  00E1                     WriteFlash_Sequential@tempL:	
  4234  00E1                     Init_System@Baud:	
  4235                           ; 1 bytes @ 0x41
  4236                           
  4237                           
  4238                           ; 4 bytes @ 0x41
  4239  00E1                     	ds	1
  4240  00E2                     WriteFlash_Sequential@amountTemp:	
  4241                           
  4242                           ; 1 bytes @ 0x42
  4243  00E2                     	ds	1
  4244  00E3                     WriteFlash_Sequential@temp:	
  4245                           
  4246                           ; 2 bytes @ 0x43
  4247  00E3                     	ds	2
  4248  00E5                     WriteFlash_Sequential@spaces:	
  4249                           
  4250                           ; 1 bytes @ 0x45
  4251  00E5                     	ds	1
  4252  00E6                     WriteFlash_Sequential@i:	
  4253                           
  4254                           ; 1 bytes @ 0x46
  4255  00E6                     	ds	1
  4256  00E7                     main@i:	
  4257                           
  4258                           ; 1 bytes @ 0x47
  4259  00E7                     	ds	1
  4260                           
  4261                           	psect	cstackCOMMON
  4262  0070                     __pcstackCOMMON:	
  4263  0070                     ?_UART_send_break:	
  4264  0070                     ?_ConfigureOscillator:	
  4265                           ; 0 bytes @ 0x0
  4266                           
  4267  0070                     ?_InitApp:	
  4268                           ; 0 bytes @ 0x0
  4269                           
  4270  0070                     ?_Init_System:	
  4271                           ; 0 bytes @ 0x0
  4272                           
  4273  0070                     ?_PS_2_INIT:	
  4274                           ; 0 bytes @ 0x0
  4275                           
  4276  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4277                           ; 0 bytes @ 0x0
  4278                           
  4279  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4280                           ; 0 bytes @ 0x0
  4281                           
  4282  0070                     ?_PS_2_Update:	
  4283                           ; 0 bytes @ 0x0
  4284                           
  4285  0070                     ?_baudUSART:	
  4286                           ; 0 bytes @ 0x0
  4287                           
  4288  0070                     ?_Clock_TRIS:	
  4289                           ; 0 bytes @ 0x0
  4290                           
  4291  0070                     ?_Data_TRIS:	
  4292                           ; 0 bytes @ 0x0
  4293                           
  4294  0070                     ?_INIT_PS_2_INTERRUPT:	
  4295                           ; 0 bytes @ 0x0
  4296                           
  4297  0070                     ?_DisableInternalADC:	
  4298                           ; 0 bytes @ 0x0
  4299                           
  4300  0070                     ?_isr:	
  4301                           ; 0 bytes @ 0x0
  4302                           
  4303  0070                     ?_main:	
  4304                           ; 0 bytes @ 0x0
  4305                           
  4306  0070                     ?_CloseUSART:	
  4307                           ; 0 bytes @ 0x0
  4308                           
  4309  0070                     ?_UNLOCK:	
  4310                           ; 0 bytes @ 0x0
  4311                           
  4312  0070                     ??i1_ReadUSART:	
  4313                           ; 0 bytes @ 0x0
  4314                           
  4315  0070                     ?i1_UART_send_break:	
  4316                           ; 0 bytes @ 0x0
  4317                           
  4318  0070                     ??i1_UART_send_break:	
  4319                           ; 0 bytes @ 0x0
  4320                           
  4321  0070                     ??i1_READ_PS_2_PIN:	
  4322                           ; 0 bytes @ 0x0
  4323                           
  4324  0070                     ?_READ_PS_2_PIN:	
  4325                           ; 0 bytes @ 0x0
  4326                           
  4327  0070                     ?_ReadUSART:	
  4328                           ; 1 bytes @ 0x0
  4329                           
  4330  0070                     ?_Keyboard_Connected:	
  4331                           ; 1 bytes @ 0x0
  4332                           
  4333  0070                     ?_Init_PS_2_Send:	
  4334                           ; 1 bytes @ 0x0
  4335                           
  4336  0070                     ?_Decode_Scan_Code_Shift:	
  4337                           ; 1 bytes @ 0x0
  4338                           
  4339  0070                     ?_Send_PS2:	
  4340                           ; 1 bytes @ 0x0
  4341                           
  4342  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4343                           ; 1 bytes @ 0x0
  4344                           
  4345  0070                     ?_Decode_Scan_Code:	
  4346                           ; 1 bytes @ 0x0
  4347                           
  4348  0070                     ?_Decode_Scan_Code_Function:	
  4349                           ; 1 bytes @ 0x0
  4350                           
  4351  0070                     ?_Reverse_Byte:	
  4352                           ; 1 bytes @ 0x0
  4353                           
  4354  0070                     ?_ISNUMBER:	
  4355                           ; 1 bytes @ 0x0
  4356                           
  4357  0070                     ?i1_CheckSum_byte:	
  4358                           ; 1 bytes @ 0x0
  4359                           
  4360  0070                     ?i1_ReadUSART:	
  4361                           ; 1 bytes @ 0x0
  4362                           
  4363  0070                     ?i1_READ_PS_2_PIN:	
  4364                           ; 1 bytes @ 0x0
  4365                           
  4366  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4367                           ; 1 bytes @ 0x0
  4368                           
  4369  0070                     i1CheckSum_byte@This:	
  4370                           ; 1 bytes @ 0x0
  4371                           
  4372                           
  4373                           ; 2 bytes @ 0x0
  4374  0070                     	ds	1
  4375  0071                     i1ReadUSART@data:	
  4376                           
  4377                           ; 1 bytes @ 0x1
  4378  0071                     	ds	1
  4379  0072                     i1CheckSum_byte@Odd_Even:	
  4380                           
  4381                           ; 1 bytes @ 0x2
  4382  0072                     	ds	1
  4383  0073                     ??i1_CheckSum_byte:	
  4384                           
  4385                           ; 0 bytes @ 0x3
  4386  0073                     	ds	1
  4387  0074                     i1CheckSum_byte@ThisTemp:	
  4388                           
  4389                           ; 2 bytes @ 0x4
  4390  0074                     	ds	2
  4391  0076                     i1CheckSum_byte@Parity:	
  4392                           
  4393                           ; 1 bytes @ 0x6
  4394  0076                     	ds	1
  4395  0077                     i1CheckSum_byte@i:	
  4396                           
  4397                           ; 1 bytes @ 0x7
  4398  0077                     	ds	1
  4399  0078                     ?i1_UARTchar:	
  4400  0078                     i1UARTchar@NinethBit_override:	
  4401                           ; 0 bytes @ 0x8
  4402                           
  4403                           
  4404                           ; 1 bytes @ 0x8
  4405  0078                     	ds	1
  4406  0079                     i1UARTchar@NinethBit_override_data:	
  4407                           
  4408                           ; 1 bytes @ 0x9
  4409  0079                     	ds	1
  4410  007A                     ??i1_UARTchar:	
  4411                           
  4412                           ; 0 bytes @ 0xA
  4413  007A                     	ds	4
  4414                           
  4415                           	psect	cstackBANK0
  4416  0020                     __pcstackBANK0:	
  4417  0020                     i1UARTchar@data:	
  4418                           
  4419                           ; 1 bytes @ 0x0
  4420  0020                     	ds	1
  4421  0021                     ??_isr:	
  4422                           
  4423                           ; 0 bytes @ 0x1
  4424  0021                     	ds	2
  4425  0023                     isr@Rx_fault:	
  4426                           
  4427                           ; 1 bytes @ 0x3
  4428  0023                     	ds	1
  4429  0024                     isr@rx:	
  4430                           
  4431                           ; 1 bytes @ 0x4
  4432  0024                     	ds	1
  4433  0025                     ??_READ_PS_2_PIN:	
  4434  0025                     ??_ReadUSART:	
  4435                           ; 0 bytes @ 0x5
  4436                           
  4437  0025                     ??_UART_send_break:	
  4438                           ; 0 bytes @ 0x5
  4439                           
  4440  0025                     ??_ConfigureOscillator:	
  4441                           ; 0 bytes @ 0x5
  4442                           
  4443  0025                     ??_InitApp:	
  4444                           ; 0 bytes @ 0x5
  4445                           
  4446  0025                     ?_delayUS:	
  4447                           ; 0 bytes @ 0x5
  4448                           
  4449  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4450                           ; 0 bytes @ 0x5
  4451                           
  4452  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4453                           ; 0 bytes @ 0x5
  4454                           
  4455  0025                     ?_OpenUSART:	
  4456                           ; 0 bytes @ 0x5
  4457                           
  4458  0025                     ??_baudUSART:	
  4459                           ; 0 bytes @ 0x5
  4460                           
  4461  0025                     ??_Clock_TRIS:	
  4462                           ; 0 bytes @ 0x5
  4463                           
  4464  0025                     ??_Data_TRIS:	
  4465                           ; 0 bytes @ 0x5
  4466                           
  4467  0025                     ??_INIT_PS_2_INTERRUPT:	
  4468                           ; 0 bytes @ 0x5
  4469                           
  4470  0025                     ??_Decode_Scan_Code_Shift:	
  4471                           ; 0 bytes @ 0x5
  4472                           
  4473  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4474                           ; 0 bytes @ 0x5
  4475                           
  4476  0025                     ??_Decode_Scan_Code:	
  4477                           ; 0 bytes @ 0x5
  4478                           
  4479  0025                     ??_Decode_Scan_Code_Function:	
  4480                           ; 0 bytes @ 0x5
  4481                           
  4482  0025                     ??_DisableInternalADC:	
  4483                           ; 0 bytes @ 0x5
  4484                           
  4485  0025                     ??_Reverse_Byte:	
  4486                           ; 0 bytes @ 0x5
  4487                           
  4488  0025                     ??_ISNUMBER:	
  4489                           ; 0 bytes @ 0x5
  4490                           
  4491  0025                     ??_CloseUSART:	
  4492                           ; 0 bytes @ 0x5
  4493                           
  4494  0025                     ??_UNLOCK:	
  4495                           ; 0 bytes @ 0x5
  4496                           
  4497  0025                     ?_BlockErase:	
  4498                           ; 0 bytes @ 0x5
  4499                           
  4500  0025                     ?___flge:	
  4501                           ; 0 bytes @ 0x5
  4502                           
  4503  0025                     ?_CheckSum_byte:	
  4504                           ; 1 bit 
  4505                           
  4506  0025                     ?_ReadFlash_2Byte:	
  4507                           ; 1 bytes @ 0x5
  4508                           
  4509  0025                     ?___flpack:	
  4510                           ; 2 bytes @ 0x5
  4511                           
  4512  0025                     ?___lmul:	
  4513                           ; 4 bytes @ 0x5
  4514                           
  4515  0025                     ?___lldiv:	
  4516                           ; 4 bytes @ 0x5
  4517                           
  4518  0025                     ISNUMBER@ascii:	
  4519                           ; 4 bytes @ 0x5
  4520                           
  4521  0025                     baudUSART@baudconfig:	
  4522                           ; 1 bytes @ 0x5
  4523                           
  4524  0025                     Clock_TRIS@direction:	
  4525                           ; 1 bytes @ 0x5
  4526                           
  4527  0025                     Data_TRIS@direction:	
  4528                           ; 1 bytes @ 0x5
  4529                           
  4530  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4531                           ; 1 bytes @ 0x5
  4532                           
  4533  0025                     READ_PS_2_PIN@DATA_CLK:	
  4534                           ; 1 bytes @ 0x5
  4535                           
  4536  0025                     Decode_Scan_Code@Code:	
  4537                           ; 1 bytes @ 0x5
  4538                           
  4539  0025                     Decode_Scan_Code_Shift@Code:	
  4540                           ; 1 bytes @ 0x5
  4541                           
  4542  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4543                           ; 1 bytes @ 0x5
  4544                           
  4545  0025                     Decode_Scan_Code_Function@Code:	
  4546                           ; 1 bytes @ 0x5
  4547                           
  4548  0025                     CheckSum_byte@This:	
  4549                           ; 1 bytes @ 0x5
  4550                           
  4551  0025                     OpenUSART@spbrg:	
  4552                           ; 2 bytes @ 0x5
  4553                           
  4554  0025                     ReadFlash_2Byte@row:	
  4555                           ; 2 bytes @ 0x5
  4556                           
  4557  0025                     BlockErase@row:	
  4558                           ; 2 bytes @ 0x5
  4559                           
  4560  0025                     delayUS@US:	
  4561                           ; 2 bytes @ 0x5
  4562                           
  4563  0025                     ___lmul@multiplier:	
  4564                           ; 4 bytes @ 0x5
  4565                           
  4566  0025                     ___flpack@arg:	
  4567                           ; 4 bytes @ 0x5
  4568                           
  4569  0025                     ___flge@ff1:	
  4570                           ; 4 bytes @ 0x5
  4571                           
  4572  0025                     ___lldiv@divisor:	
  4573                           ; 4 bytes @ 0x5
  4574                           
  4575                           
  4576                           ; 4 bytes @ 0x5
  4577  0025                     	ds	1
  4578  0026                     ??_PS_2_INIT:	
  4579  0026                     ReadUSART@data:	
  4580                           ; 0 bytes @ 0x6
  4581                           
  4582  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4583                           ; 1 bytes @ 0x6
  4584                           
  4585  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4586                           ; 1 bytes @ 0x6
  4587                           
  4588                           
  4589                           ; 1 bytes @ 0x6
  4590  0026                     	ds	1
  4591  0027                     ??_OpenUSART:	
  4592  0027                     ??_BlockErase:	
  4593                           ; 0 bytes @ 0x7
  4594                           
  4595  0027                     CheckSum_byte@Odd_Even:	
  4596                           ; 0 bytes @ 0x7
  4597                           
  4598  0027                     Reverse_Byte@temp:	
  4599                           ; 1 bytes @ 0x7
  4600                           
  4601  0027                     OpenUSART@config:	
  4602                           ; 1 bytes @ 0x7
  4603                           
  4604  0027                     ReadFlash_2Byte@column:	
  4605                           ; 1 bytes @ 0x7
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x7
  4609  0027                     	ds	1
  4610  0028                     ??_CheckSum_byte:	
  4611  0028                     ??_ReadFlash_2Byte:	
  4612                           ; 0 bytes @ 0x8
  4613                           
  4614  0028                     Reverse_Byte@This:	
  4615                           ; 0 bytes @ 0x8
  4616                           
  4617                           
  4618                           ; 1 bytes @ 0x8
  4619  0028                     	ds	1
  4620  0029                     ??_delayUS:	
  4621  0029                     ___flpack@exp:	
  4622                           ; 0 bytes @ 0x9
  4623                           
  4624  0029                     CheckSum_byte@ThisTemp:	
  4625                           ; 1 bytes @ 0x9
  4626                           
  4627  0029                     ___lmul@multiplicand:	
  4628                           ; 2 bytes @ 0x9
  4629                           
  4630  0029                     ___flge@ff2:	
  4631                           ; 4 bytes @ 0x9
  4632                           
  4633  0029                     ___lldiv@dividend:	
  4634                           ; 4 bytes @ 0x9
  4635                           
  4636                           
  4637                           ; 4 bytes @ 0x9
  4638  0029                     	ds	1
  4639  002A                     ?_ReadFlash_4Byte:	
  4640  002A                     ___flpack@sign:	
  4641                           ; 4 bytes @ 0xA
  4642                           
  4643  002A                     ReadFlash_4Byte@row:	
  4644                           ; 1 bytes @ 0xA
  4645                           
  4646  002A                     delayUS@i:	
  4647                           ; 2 bytes @ 0xA
  4648                           
  4649                           
  4650                           ; 4 bytes @ 0xA
  4651  002A                     	ds	1
  4652  002B                     ??___flpack:	
  4653  002B                     CheckSum_byte@Parity:	
  4654                           ; 0 bytes @ 0xB
  4655                           
  4656                           
  4657                           ; 1 bytes @ 0xB
  4658  002B                     	ds	1
  4659  002C                     CheckSum_byte@i:	
  4660  002C                     ReadFlash_4Byte@column:	
  4661                           ; 1 bytes @ 0xC
  4662                           
  4663                           
  4664                           ; 1 bytes @ 0xC
  4665  002C                     	ds	1
  4666  002D                     ?_UARTchar:	
  4667  002D                     ??___lmul:	
  4668                           ; 0 bytes @ 0xD
  4669                           
  4670  002D                     ??___flge:	
  4671                           ; 0 bytes @ 0xD
  4672                           
  4673  002D                     ??___lldiv:	
  4674                           ; 0 bytes @ 0xD
  4675                           
  4676  002D                     UARTchar@NinethBit_override:	
  4677                           ; 0 bytes @ 0xD
  4678                           
  4679  002D                     ___lmul@product:	
  4680                           ; 1 bytes @ 0xD
  4681                           
  4682                           
  4683                           ; 4 bytes @ 0xD
  4684  002D                     	ds	1
  4685  002E                     ??_ReadFlash_4Byte:	
  4686  002E                     delayUS@j:	
  4687                           ; 0 bytes @ 0xE
  4688                           
  4689  002E                     UARTchar@NinethBit_override_data:	
  4690                           ; 1 bytes @ 0xE
  4691                           
  4692  002E                     ___lldiv@quotient:	
  4693                           ; 1 bytes @ 0xE
  4694                           
  4695                           
  4696                           ; 4 bytes @ 0xE
  4697  002E                     	ds	1
  4698  002F                     ??_UARTchar:	
  4699  002F                     ??_Send_PS2:	
  4700                           ; 0 bytes @ 0xF
  4701                           
  4702  002F                     ?_WriteFlash_Sequential:	
  4703                           ; 0 bytes @ 0xF
  4704                           
  4705  002F                     ?_InternalADC_Read:	
  4706                           ; 0 bytes @ 0xF
  4707                           
  4708  002F                     ?___lwtofl:	
  4709                           ; 2 bytes @ 0xF
  4710                           
  4711  002F                     WriteFlash_Sequential@row:	
  4712                           ; 4 bytes @ 0xF
  4713                           
  4714  002F                     ___lwtofl@c:	
  4715                           ; 2 bytes @ 0xF
  4716                           
  4717                           
  4718                           ; 2 bytes @ 0xF
  4719  002F                     	ds	2
  4720  0031                     ??_InternalADC_Read:	
  4721  0031                     WriteFlash_Sequential@buffer:	
  4722                           ; 0 bytes @ 0x11
  4723                           
  4724                           
  4725                           ; 1 bytes @ 0x11
  4726  0031                     	ds	1
  4727  0032                     WriteFlash_Sequential@amount:	
  4728  0032                     ___lldiv@counter:	
  4729                           ; 1 bytes @ 0x12
  4730                           
  4731                           
  4732                           ; 1 bytes @ 0x12
  4733  0032                     	ds	1
  4734  0033                     ?_InitUART:	
  4735  0033                     ??_WriteFlash_Sequential:	
  4736                           ; 0 bytes @ 0x13
  4737                           
  4738  0033                     ??___lwtofl:	
  4739                           ; 0 bytes @ 0x13
  4740                           
  4741  0033                     ?___llmod:	
  4742                           ; 0 bytes @ 0x13
  4743                           
  4744  0033                     UARTchar@data:	
  4745                           ; 4 bytes @ 0x13
  4746                           
  4747  0033                     Send_PS2@oddparity:	
  4748                           ; 1 bytes @ 0x13
  4749                           
  4750  0033                     InternalADC_Read@channel:	
  4751                           ; 1 bytes @ 0x13
  4752                           
  4753  0033                     InitUART@Baud:	
  4754                           ; 1 bytes @ 0x13
  4755                           
  4756  0033                     ReadFlash_4Byte@temp:	
  4757                           ; 4 bytes @ 0x13
  4758                           
  4759  0033                     ___llmod@divisor:	
  4760                           ; 4 bytes @ 0x13
  4761                           
  4762                           
  4763                           ; 4 bytes @ 0x13
  4764  0033                     	ds	1
  4765  0034                     ?_UARTstringWAIT:	
  4766  0034                     ?___fldiv:	
  4767                           ; 0 bytes @ 0x14
  4768                           
  4769  0034                     Send_PS2@command:	
  4770                           ; 4 bytes @ 0x14
  4771                           
  4772  0034                     UARTstringWAIT@data:	
  4773                           ; 1 bytes @ 0x14
  4774                           
  4775  0034                     ___fldiv@f2:	
  4776                           ; 2 bytes @ 0x14
  4777                           
  4778                           
  4779                           ; 4 bytes @ 0x14
  4780  0034                     	ds	1
  4781  0035                     Send_PS2@i:	
  4782                           
  4783                           ; 1 bytes @ 0x15
  4784  0035                     	ds	1
  4785  0036                     ??_UARTstringWAIT:	
  4786  0036                     ?_WriteBaud:	
  4787                           ; 0 bytes @ 0x16
  4788                           
  4789  0036                     Send_PS2@timeout:	
  4790                           ; 0 bytes @ 0x16
  4791                           
  4792  0036                     WriteBaud@row:	
  4793                           ; 2 bytes @ 0x16
  4794                           
  4795                           
  4796                           ; 2 bytes @ 0x16
  4797  0036                     	ds	1
  4798  0037                     ?_ReadBaud:	
  4799  0037                     InitUART@parity:	
  4800                           ; 4 bytes @ 0x17
  4801                           
  4802  0037                     ReadBaud@row:	
  4803                           ; 1 bytes @ 0x17
  4804                           
  4805  0037                     ___llmod@dividend:	
  4806                           ; 2 bytes @ 0x17
  4807                           
  4808                           
  4809                           ; 4 bytes @ 0x17
  4810  0037                     	ds	1
  4811  0038                     ??_Init_PS_2_Send:	
  4812  0038                     ??_InitUART:	
  4813                           ; 0 bytes @ 0x18
  4814                           
  4815  0038                     WriteBaud@Baud:	
  4816                           ; 0 bytes @ 0x18
  4817                           
  4818  0038                     ___fldiv@f1:	
  4819                           ; 4 bytes @ 0x18
  4820                           
  4821                           
  4822                           ; 4 bytes @ 0x18
  4823  0038                     	ds	1
  4824  0039                     ReadBaud@column:	
  4825                           
  4826                           ; 1 bytes @ 0x19
  4827  0039                     	ds	2
  4828  003B                     ??_ReadBaud:	
  4829  003B                     ??___llmod:	
  4830                           ; 0 bytes @ 0x1B
  4831                           
  4832                           
  4833                           ; 0 bytes @ 0x1B
  4834  003B                     	ds	1
  4835  003C                     ??___fldiv:	
  4836  003C                     WriteBaud@Parity:	
  4837                           ; 0 bytes @ 0x1C
  4838                           
  4839  003C                     ___llmod@counter:	
  4840                           ; 1 bytes @ 0x1C
  4841                           
  4842                           
  4843                           ; 1 bytes @ 0x1C
  4844  003C                     	ds	1
  4845  003D                     ??_WriteBaud:	
  4846  003D                     ?_sprintf:	
  4847                           ; 0 bytes @ 0x1D
  4848                           
  4849  003D                     sprintf@sp:	
  4850                           ; 2 bytes @ 0x1D
  4851                           
  4852                           
  4853                           ; 2 bytes @ 0x1D
  4854  003D                     	ds	2
  4855  003F                     sprintf@f:	
  4856                           
  4857                           ; 2 bytes @ 0x1F
  4858  003F                     	ds	1
  4859  0040                     InitUART@spbrg:	
  4860                           
  4861                           ; 2 bytes @ 0x20
  4862  0040                     	ds	1
  4863  0041                     ___fldiv@f3:	
  4864                           
  4865                           ; 4 bytes @ 0x21
  4866  0041                     	ds	1
  4867  0042                     InitUART@baudconfig:	
  4868                           
  4869                           ; 1 bytes @ 0x22
  4870  0042                     	ds	1
  4871  0043                     InitUART@config:	
  4872  0043                     ReadBaud@temp:	
  4873                           ; 1 bytes @ 0x23
  4874                           
  4875                           
  4876                           ; 4 bytes @ 0x23
  4877  0043                     	ds	1
  4878  0044                     InitUART@temp:	
  4879                           
  4880                           ; 4 bytes @ 0x24
  4881  0044                     	ds	1
  4882  0045                     ??_sprintf:	
  4883  0045                     ___fldiv@cntr:	
  4884                           ; 0 bytes @ 0x25
  4885                           
  4886  0045                     WriteBaud@temp:	
  4887                           ; 1 bytes @ 0x25
  4888                           
  4889                           
  4890                           ; 4 bytes @ 0x25
  4891  0045                     	ds	1
  4892  0046                     ___fldiv@exp:	
  4893                           
  4894                           ; 1 bytes @ 0x26
  4895  0046                     	ds	1
  4896  0047                     ___fldiv@sign:	
  4897                           
  4898                           ; 1 bytes @ 0x27
  4899  0047                     	ds	1
  4900  0048                     ?___flmul:	
  4901  0048                     ___flmul@f1:	
  4902                           ; 4 bytes @ 0x28
  4903                           
  4904                           
  4905                           ; 4 bytes @ 0x28
  4906  0048                     	ds	3
  4907  004B                     sprintf@flag:	
  4908                           
  4909                           ; 1 bytes @ 0x2B
  4910  004B                     	ds	1
  4911  004C                     sprintf@prec:	
  4912  004C                     ___flmul@f2:	
  4913                           ; 2 bytes @ 0x2C
  4914                           
  4915                           
  4916                           ; 4 bytes @ 0x2C
  4917  004C                     	ds	2
  4918  004E                     sprintf@_val:	
  4919                           
  4920                           ; 4 bytes @ 0x2E
  4921  004E                     	ds	2
  4922  0050                     ??___flmul:	
  4923                           
  4924                           ; 0 bytes @ 0x30
  4925  0050                     	ds	2
  4926  0052                     sprintf@ap:	
  4927                           
  4928                           ; 1 bytes @ 0x32
  4929  0052                     	ds	1
  4930  0053                     sprintf@c:	
  4931                           
  4932                           ; 1 bytes @ 0x33
  4933  0053                     	ds	1
  4934  0054                     ??_Init_System:	
  4935  0054                     ?_SetBaud:	
  4936                           ; 0 bytes @ 0x34
  4937                           
  4938  0054                     SetBaud@Baud:	
  4939                           ; 0 bytes @ 0x34
  4940                           
  4941                           
  4942                           ; 4 bytes @ 0x34
  4943  0054                     	ds	1
  4944  0055                     ___flmul@exp:	
  4945                           
  4946                           ; 1 bytes @ 0x35
  4947  0055                     	ds	1
  4948  0056                     ___flmul@f3_as_product:	
  4949                           
  4950                           ; 4 bytes @ 0x36
  4951  0056                     	ds	2
  4952  0058                     SetBaud@Parity:	
  4953                           
  4954                           ; 1 bytes @ 0x38
  4955  0058                     	ds	1
  4956  0059                     ??_SetBaud:	
  4957                           
  4958                           ; 0 bytes @ 0x39
  4959  0059                     	ds	1
  4960  005A                     ___flmul@cntr:	
  4961                           
  4962                           ; 1 bytes @ 0x3A
  4963  005A                     	ds	1
  4964  005B                     ___flmul@sign:	
  4965                           
  4966                           ; 1 bytes @ 0x3B
  4967  005B                     	ds	1
  4968  005C                     ?_ReadVoltage:	
  4969                           
  4970                           ; 4 bytes @ 0x3C
  4971  005C                     	ds	4
  4972  0060                     ??_ReadVoltage:	
  4973                           
  4974                           ; 0 bytes @ 0x40
  4975  0060                     	ds	1
  4976  0061                     ??_Keyboard_Connected:	
  4977  0061                     Keyboard_Connected@i:	
  4978                           ; 0 bytes @ 0x41
  4979                           
  4980                           
  4981                           ; 4 bytes @ 0x41
  4982  0061                     	ds	4
  4983  0065                     ??_main:	
  4984                           
  4985                           ; 0 bytes @ 0x45
  4986  0065                     	ds	1
  4987                           
  4988                           	psect	maintext
  4989  0E48                     __pmaintext:	
  4990 ;;
  4991 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4992 ;;
  4993 ;; *************** function _main *****************
  4994 ;; Defined at:
  4995 ;;		line 67 in file "main.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  i               1   71[BANK1 ] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 17F/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        2 bytes
  5014 ;; Hardware stack levels required when called:   10
  5015 ;; This function calls:
  5016 ;;		_ConfigureOscillator
  5017 ;;		_InitApp
  5018 ;;		_Init_PS_2_Send
  5019 ;;		_Init_System
  5020 ;;		_Keyboard_Connected
  5021 ;;		_PS_2_DISABLE_INTERRUPT
  5022 ;;		_PS_2_ENABLE_INTERRUPT
  5023 ;;		_PS_2_INIT
  5024 ;;		_PS_2_Update
  5025 ;;		_ReadVoltage
  5026 ;;		_UARTstringWAIT
  5027 ;;		___flge
  5028 ;;		_delayUS
  5029 ;; This function is called by:
  5030 ;;		Startup code after reset
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _main
  5036  0E48                     _main:	
  5037                           
  5038                           ;main.c: 69: unsigned char i=0;
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5042  0E48  0021               	movlb	1	; select bank1
  5043  0E49  01E7               	clrf	main@i^(0+128)
  5044                           
  5045                           ;main.c: 71: ConfigureOscillator();
  5046  0E4A  3199  2140  318E   	fcall	_ConfigureOscillator
  5047                           
  5048                           ;main.c: 72: InitApp();
  5049  0E4D  3190  2006  318E   	fcall	_InitApp
  5050                           
  5051                           ;main.c: 73: Init_System();
  5052  0E50  3195  2583  318E   	fcall	_Init_System
  5053                           
  5054                           ;main.c: 74: PS_2_INIT();
  5055  0E53  3198  20F7  318E   	fcall	_PS_2_INIT
  5056                           
  5057                           ;main.c: 77: for(i =0;i<10;i++)
  5058  0E56  0021               	movlb	1	; select bank1
  5059  0E57  01E7               	clrf	main@i^(0+128)
  5060  0E58  300A               	movlw	10
  5061  0E59  0267               	subwf	main@i^(0+128),w
  5062  0E5A  1803               	btfsc	3,0
  5063  0E5B  2E86               	goto	l7424
  5064  0E5C                     l158:	
  5065                           
  5066                           ;main.c: 78: {
  5067                           ;main.c: 79: LATC |= 0b00010000;
  5068  0E5C  0022               	movlb	2	; select bank2
  5069  0E5D  160E               	bsf	14,4	;volatile
  5070                           
  5071                           ;main.c: 80: delayUS(10000);
  5072  0E5E  3000               	movlw	0
  5073  0E5F  0020               	movlb	0	; select bank0
  5074  0E60  00A8               	movwf	delayUS@US+3
  5075  0E61  3000               	movlw	0
  5076  0E62  00A7               	movwf	delayUS@US+2
  5077  0E63  3027               	movlw	39
  5078  0E64  00A6               	movwf	delayUS@US+1
  5079  0E65  3010               	movlw	16
  5080  0E66  00A5               	movwf	delayUS@US
  5081  0E67  319B  2323  318E   	fcall	_delayUS
  5082                           
  5083                           ;main.c: 81: LATC &= ~0b00010000;
  5084  0E6A  30EF               	movlw	239
  5085  0E6B  0020               	movlb	0	; select bank0
  5086  0E6C  00E5               	movwf	??_main
  5087  0E6D  0865               	movf	??_main,w
  5088  0E6E  0022               	movlb	2	; select bank2
  5089  0E6F  058E               	andwf	14,f	;volatile
  5090                           
  5091                           ;main.c: 82: delayUS(10000);
  5092  0E70  3000               	movlw	0
  5093  0E71  0020               	movlb	0	; select bank0
  5094  0E72  00A8               	movwf	delayUS@US+3
  5095  0E73  3000               	movlw	0
  5096  0E74  00A7               	movwf	delayUS@US+2
  5097  0E75  3027               	movlw	39
  5098  0E76  00A6               	movwf	delayUS@US+1
  5099  0E77  3010               	movlw	16
  5100  0E78  00A5               	movwf	delayUS@US
  5101  0E79  319B  2323  318E   	fcall	_delayUS
  5102  0E7C  3001               	movlw	1
  5103  0E7D  0020               	movlb	0	; select bank0
  5104  0E7E  00E5               	movwf	??_main
  5105  0E7F  0865               	movf	??_main,w
  5106  0E80  0021               	movlb	1	; select bank1
  5107  0E81  07E7               	addwf	main@i^(0+128),f
  5108  0E82  300A               	movlw	10
  5109  0E83  0267               	subwf	main@i^(0+128),w
  5110  0E84  1C03               	skipc
  5111  0E85  2E5C               	goto	l158
  5112  0E86                     l7424:	
  5113                           
  5114                           ;main.c: 83: }
  5115                           ;main.c: 85: PS_2_DISABLE_INTERRUPT(0b00100000);
  5116  0E86  3020               	movlw	32
  5117  0E87  3199  21DD  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  5118                           
  5119                           ;main.c: 87: UARTstringWAIT("\r\n");
  5120  0E8A  303D               	movlw	low ((STR_11+17)| (0+32768))
  5121  0E8B  0020               	movlb	0	; select bank0
  5122  0E8C  00B4               	movwf	UARTstringWAIT@data
  5123  0E8D  308C               	movlw	high ((STR_11+17)| (0+32768))
  5124  0E8E  00B5               	movwf	UARTstringWAIT@data+1
  5125  0E8F  319A  22F0  318E   	fcall	_UARTstringWAIT
  5126                           
  5127                           ;main.c: 88: delayUS(10000);
  5128  0E92  3000               	movlw	0
  5129  0E93  0020               	movlb	0	; select bank0
  5130  0E94  00A8               	movwf	delayUS@US+3
  5131  0E95  3000               	movlw	0
  5132  0E96  00A7               	movwf	delayUS@US+2
  5133  0E97  3027               	movlw	39
  5134  0E98  00A6               	movwf	delayUS@US+1
  5135  0E99  3010               	movlw	16
  5136  0E9A  00A5               	movwf	delayUS@US
  5137  0E9B  319B  2323  318E   	fcall	_delayUS
  5138                           
  5139                           ;main.c: 89: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  5140  0E9E  30BB               	movlw	low (STR_2| (0+32768))
  5141  0E9F  0020               	movlb	0	; select bank0
  5142  0EA0  00B4               	movwf	UARTstringWAIT@data
  5143  0EA1  308B               	movlw	high (STR_2| (0+32768))
  5144  0EA2  00B5               	movwf	UARTstringWAIT@data+1
  5145  0EA3  319A  22F0  318E   	fcall	_UARTstringWAIT
  5146                           
  5147                           ;main.c: 90: delayUS(5000);
  5148  0EA6  3000               	movlw	0
  5149  0EA7  0020               	movlb	0	; select bank0
  5150  0EA8  00A8               	movwf	delayUS@US+3
  5151  0EA9  3000               	movlw	0
  5152  0EAA  00A7               	movwf	delayUS@US+2
  5153  0EAB  3013               	movlw	19
  5154  0EAC  00A6               	movwf	delayUS@US+1
  5155  0EAD  3088               	movlw	136
  5156  0EAE  00A5               	movwf	delayUS@US
  5157  0EAF  319B  2323  318E   	fcall	_delayUS
  5158                           
  5159                           ;main.c: 91: UARTstringWAIT("Firmware Version: ");
  5160  0EB2  3053               	movlw	low (STR_3| (0+32768))
  5161  0EB3  0020               	movlb	0	; select bank0
  5162  0EB4  00B4               	movwf	UARTstringWAIT@data
  5163  0EB5  308C               	movlw	high (STR_3| (0+32768))
  5164  0EB6  00B5               	movwf	UARTstringWAIT@data+1
  5165  0EB7  319A  22F0  318E   	fcall	_UARTstringWAIT
  5166                           
  5167                           ;main.c: 92: UARTstringWAIT(Version);
  5168  0EBA  3024               	movlw	low _Version
  5169  0EBB  0020               	movlb	0	; select bank0
  5170  0EBC  00B4               	movwf	UARTstringWAIT@data
  5171  0EBD  3002               	movlw	high _Version
  5172  0EBE  00B5               	movwf	UARTstringWAIT@data+1
  5173  0EBF  319A  22F0  318E   	fcall	_UARTstringWAIT
  5174                           
  5175                           ;main.c: 93: UARTstringWAIT("\r\n");
  5176  0EC2  303D               	movlw	low ((STR_11+17)| (0+32768))
  5177  0EC3  0020               	movlb	0	; select bank0
  5178  0EC4  00B4               	movwf	UARTstringWAIT@data
  5179  0EC5  308C               	movlw	high ((STR_11+17)| (0+32768))
  5180  0EC6  00B5               	movwf	UARTstringWAIT@data+1
  5181  0EC7  319A  22F0  318E   	fcall	_UARTstringWAIT
  5182                           
  5183                           ;main.c: 94: delayUS(5000);
  5184  0ECA  3000               	movlw	0
  5185  0ECB  0020               	movlb	0	; select bank0
  5186  0ECC  00A8               	movwf	delayUS@US+3
  5187  0ECD  3000               	movlw	0
  5188  0ECE  00A7               	movwf	delayUS@US+2
  5189  0ECF  3013               	movlw	19
  5190  0ED0  00A6               	movwf	delayUS@US+1
  5191  0ED1  3088               	movlw	136
  5192  0ED2  00A5               	movwf	delayUS@US
  5193  0ED3  319B  2323  318E   	fcall	_delayUS
  5194                           
  5195                           ;main.c: 95: UARTstringWAIT("To Change BAUD hit \"CNT+ALT+DEL\"\r\n");
  5196  0ED6  301C               	movlw	low (STR_5| (0+32768))
  5197  0ED7  0020               	movlb	0	; select bank0
  5198  0ED8  00B4               	movwf	UARTstringWAIT@data
  5199  0ED9  308B               	movlw	high (STR_5| (0+32768))
  5200  0EDA  00B5               	movwf	UARTstringWAIT@data+1
  5201  0EDB  319A  22F0  318E   	fcall	_UARTstringWAIT
  5202                           
  5203                           ;main.c: 96: delayUS(10000);
  5204  0EDE  3000               	movlw	0
  5205  0EDF  0020               	movlb	0	; select bank0
  5206  0EE0  00A8               	movwf	delayUS@US+3
  5207  0EE1  3000               	movlw	0
  5208  0EE2  00A7               	movwf	delayUS@US+2
  5209  0EE3  3027               	movlw	39
  5210  0EE4  00A6               	movwf	delayUS@US+1
  5211  0EE5  3010               	movlw	16
  5212  0EE6  00A5               	movwf	delayUS@US
  5213  0EE7  319B  2323  318E   	fcall	_delayUS
  5214                           
  5215                           ;main.c: 98: if(!Keyboard_Connected())
  5216  0EEA  319D  25AA  318E   	fcall	_Keyboard_Connected
  5217  0EED  3800               	iorlw	0
  5218  0EEE  1D03               	skipz
  5219  0EEF  2EFE               	goto	l7448
  5220                           
  5221                           ;main.c: 99: {
  5222                           ;main.c: 100: UARTstringWAIT("No Keyboard connected\r\n");
  5223  0EF0  30D5               	movlw	low (STR_6| (0+32768))
  5224  0EF1  0020               	movlb	0	; select bank0
  5225  0EF2  00B4               	movwf	UARTstringWAIT@data
  5226  0EF3  308B               	movlw	high (STR_6| (0+32768))
  5227  0EF4  00B5               	movwf	UARTstringWAIT@data+1
  5228  0EF5  319A  22F0  318E   	fcall	_UARTstringWAIT
  5229  0EF8                     l7446:	
  5230                           ;main.c: 102: while(!Keyboard_Connected());
  5231                           
  5232  0EF8  319D  25AA  318E   	fcall	_Keyboard_Connected
  5233  0EFB  3A00               	xorlw	0
  5234  0EFC  1903               	skipnz
  5235  0EFD  2EF8               	goto	l7446
  5236  0EFE                     l7448:	
  5237                           
  5238                           ;main.c: 103: }
  5239                           ;main.c: 104: UARTstringWAIT("Keyboard Connected\r\n");
  5240  0EFE  3003               	movlw	low (STR_7| (0+32768))
  5241  0EFF  0020               	movlb	0	; select bank0
  5242  0F00  00B4               	movwf	UARTstringWAIT@data
  5243  0F01  308C               	movlw	high (STR_7| (0+32768))
  5244  0F02  00B5               	movwf	UARTstringWAIT@data+1
  5245  0F03  319A  22F0  318E   	fcall	_UARTstringWAIT
  5246                           
  5247                           ;main.c: 105: if(!Init_PS_2_Send())
  5248  0F06  3193  239C  318E   	fcall	_Init_PS_2_Send
  5249  0F09  3800               	iorlw	0
  5250  0F0A  1D03               	skipz
  5251  0F0B  2F1D               	goto	l7456
  5252                           
  5253                           ;main.c: 106: {
  5254                           ;main.c: 107: delayUS(10000);
  5255  0F0C  3000               	movlw	0
  5256  0F0D  0020               	movlb	0	; select bank0
  5257  0F0E  00A8               	movwf	delayUS@US+3
  5258  0F0F  3000               	movlw	0
  5259  0F10  00A7               	movwf	delayUS@US+2
  5260  0F11  3027               	movlw	39
  5261  0F12  00A6               	movwf	delayUS@US+1
  5262  0F13  3010               	movlw	16
  5263  0F14  00A5               	movwf	delayUS@US
  5264  0F15  319B  2323  318E   	fcall	_delayUS
  5265                           
  5266                           ;main.c: 108: UARTstringWAIT("Initialization Fail\r\n");
  5267  0F18  30ED               	movlw	low (STR_8| (0+32768))
  5268  0F19  0020               	movlb	0	; select bank0
  5269  0F1A  00B4               	movwf	UARTstringWAIT@data
  5270  0F1B  308B               	movlw	high (STR_8| (0+32768))
  5271  0F1C  2F21               	goto	L1
  5272  0F1D                     l7456:	
  5273                           ;main.c: 109: }
  5274                           
  5275                           
  5276                           ;main.c: 110: else
  5277                           ;main.c: 111: {
  5278                           ;main.c: 112: UARTstringWAIT("Keyboard Pass!\r\n");
  5279  0F1D  3078               	movlw	low (STR_9| (0+32768))
  5280  0F1E  0020               	movlb	0	; select bank0
  5281  0F1F  00B4               	movwf	UARTstringWAIT@data
  5282  0F20  308C               	movlw	high (STR_9| (0+32768))
  5283  0F21                     L1:	
  5284  0F21  00B5               	movwf	UARTstringWAIT@data+1
  5285  0F22  319A  22F0  318E   	fcall	_UARTstringWAIT
  5286                           
  5287                           ;main.c: 113: }
  5288                           ;main.c: 114: BatteryVoltage = ReadVoltage();
  5289  0F25  319F  2792  318E   	fcall	_ReadVoltage
  5290  0F28  0020               	movlb	0	; select bank0
  5291  0F29  085F               	movf	?_ReadVoltage+3,w
  5292  0F2A  0022               	movlb	2	; select bank2
  5293  0F2B  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5294  0F2C  0020               	movlb	0	; select bank0
  5295  0F2D  085E               	movf	?_ReadVoltage+2,w
  5296  0F2E  0022               	movlb	2	; select bank2
  5297  0F2F  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5298  0F30  0020               	movlb	0	; select bank0
  5299  0F31  085D               	movf	?_ReadVoltage+1,w
  5300  0F32  0022               	movlb	2	; select bank2
  5301  0F33  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5302  0F34  0020               	movlb	0	; select bank0
  5303  0F35  085C               	movf	?_ReadVoltage,w
  5304  0F36  0022               	movlb	2	; select bank2
  5305  0F37  00DF               	movwf	_BatteryVoltage^(0+256)
  5306                           
  5307                           ;main.c: 115: if(BatteryVoltage < 4.65 )
  5308  0F38  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5309  0F39  0020               	movlb	0	; select bank0
  5310  0F3A  00A8               	movwf	___flge@ff1+3
  5311  0F3B  0022               	movlb	2	; select bank2
  5312  0F3C  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5313  0F3D  0020               	movlb	0	; select bank0
  5314  0F3E  00A7               	movwf	___flge@ff1+2
  5315  0F3F  0022               	movlb	2	; select bank2
  5316  0F40  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5317  0F41  0020               	movlb	0	; select bank0
  5318  0F42  00A6               	movwf	___flge@ff1+1
  5319  0F43  0022               	movlb	2	; select bank2
  5320  0F44  085F               	movf	_BatteryVoltage^(0+256),w
  5321  0F45  0020               	movlb	0	; select bank0
  5322  0F46  00A5               	movwf	___flge@ff1
  5323  0F47  3040               	movlw	64
  5324  0F48  00AC               	movwf	___flge@ff2+3
  5325  0F49  3094               	movlw	148
  5326  0F4A  00AB               	movwf	___flge@ff2+2
  5327  0F4B  30CC               	movlw	204
  5328  0F4C  00AA               	movwf	___flge@ff2+1
  5329  0F4D  30CD               	movlw	205
  5330  0F4E  00A9               	movwf	___flge@ff2
  5331  0F4F  319E  26C1  318E   	fcall	___flge
  5332  0F52  1803               	btfsc	3,0
  5333  0F53  2F59               	goto	l7464
  5334                           
  5335                           ;main.c: 116: {
  5336                           ;main.c: 117: UARTstringWAIT("Voltage too Low!\r\n");
  5337  0F54  3040               	movlw	low (STR_10| (0+32768))
  5338  0F55  0020               	movlb	0	; select bank0
  5339  0F56  00B4               	movwf	UARTstringWAIT@data
  5340  0F57  308C               	movlw	high (STR_10| (0+32768))
  5341  0F58  2F7B               	goto	L2
  5342  0F59                     l7464:	
  5343                           ;main.c: 118: }
  5344                           
  5345                           
  5346                           ;main.c: 119: else if (BatteryVoltage > 5.35)
  5347  0F59  3040               	movlw	64
  5348  0F5A  0020               	movlb	0	; select bank0
  5349  0F5B  00A8               	movwf	___flge@ff1+3
  5350  0F5C  30AB               	movlw	171
  5351  0F5D  00A7               	movwf	___flge@ff1+2
  5352  0F5E  3033               	movlw	51
  5353  0F5F  00A6               	movwf	___flge@ff1+1
  5354  0F60  3033               	movlw	51
  5355  0F61  00A5               	movwf	___flge@ff1
  5356  0F62  0022               	movlb	2	; select bank2
  5357  0F63  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5358  0F64  0020               	movlb	0	; select bank0
  5359  0F65  00AC               	movwf	___flge@ff2+3
  5360  0F66  0022               	movlb	2	; select bank2
  5361  0F67  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5362  0F68  0020               	movlb	0	; select bank0
  5363  0F69  00AB               	movwf	___flge@ff2+2
  5364  0F6A  0022               	movlb	2	; select bank2
  5365  0F6B  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5366  0F6C  0020               	movlb	0	; select bank0
  5367  0F6D  00AA               	movwf	___flge@ff2+1
  5368  0F6E  0022               	movlb	2	; select bank2
  5369  0F6F  085F               	movf	_BatteryVoltage^(0+256),w
  5370  0F70  0020               	movlb	0	; select bank0
  5371  0F71  00A9               	movwf	___flge@ff2
  5372  0F72  319E  26C1  318E   	fcall	___flge
  5373  0F75  1803               	btfsc	3,0
  5374  0F76  2F7F               	goto	l7468
  5375                           
  5376                           ;main.c: 120: {
  5377                           ;main.c: 121: UARTstringWAIT("Voltage too High!\r\n");
  5378  0F77  302C               	movlw	low (STR_11| (0+32768))
  5379  0F78  0020               	movlb	0	; select bank0
  5380  0F79  00B4               	movwf	UARTstringWAIT@data
  5381  0F7A  308C               	movlw	high (STR_11| (0+32768))
  5382  0F7B                     L2:	
  5383  0F7B  00B5               	movwf	UARTstringWAIT@data+1
  5384  0F7C  319A  22F0  318E   	fcall	_UARTstringWAIT
  5385  0F7F                     l7468:	
  5386                           
  5387                           ;main.c: 122: }
  5388                           ;main.c: 123: PS_2_ENABLE_INTERRUPT(0b00100000);
  5389  0F7F  3020               	movlw	32
  5390  0F80  3199  21B0  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5391  0F83                     l7470:	
  5392                           ;main.c: 125: while(1)
  5393                           
  5394                           
  5395                           ;main.c: 126: {
  5396                           ;main.c: 127: BatteryVoltage = ReadVoltage();
  5397  0F83  319F  2792  318E   	fcall	_ReadVoltage
  5398  0F86  0020               	movlb	0	; select bank0
  5399  0F87  085F               	movf	?_ReadVoltage+3,w
  5400  0F88  0022               	movlb	2	; select bank2
  5401  0F89  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5402  0F8A  0020               	movlb	0	; select bank0
  5403  0F8B  085E               	movf	?_ReadVoltage+2,w
  5404  0F8C  0022               	movlb	2	; select bank2
  5405  0F8D  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5406  0F8E  0020               	movlb	0	; select bank0
  5407  0F8F  085D               	movf	?_ReadVoltage+1,w
  5408  0F90  0022               	movlb	2	; select bank2
  5409  0F91  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5410  0F92  0020               	movlb	0	; select bank0
  5411  0F93  085C               	movf	?_ReadVoltage,w
  5412  0F94  0022               	movlb	2	; select bank2
  5413  0F95  00DF               	movwf	_BatteryVoltage^(0+256)
  5414                           
  5415                           ;main.c: 128: if(BatteryVoltage < 4.65 || BatteryVoltage > 5.35)
  5416  0F96  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5417  0F97  0020               	movlb	0	; select bank0
  5418  0F98  00A8               	movwf	___flge@ff1+3
  5419  0F99  0022               	movlb	2	; select bank2
  5420  0F9A  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5421  0F9B  0020               	movlb	0	; select bank0
  5422  0F9C  00A7               	movwf	___flge@ff1+2
  5423  0F9D  0022               	movlb	2	; select bank2
  5424  0F9E  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5425  0F9F  0020               	movlb	0	; select bank0
  5426  0FA0  00A6               	movwf	___flge@ff1+1
  5427  0FA1  0022               	movlb	2	; select bank2
  5428  0FA2  085F               	movf	_BatteryVoltage^(0+256),w
  5429  0FA3  0020               	movlb	0	; select bank0
  5430  0FA4  00A5               	movwf	___flge@ff1
  5431  0FA5  3040               	movlw	64
  5432  0FA6  00AC               	movwf	___flge@ff2+3
  5433  0FA7  3094               	movlw	148
  5434  0FA8  00AB               	movwf	___flge@ff2+2
  5435  0FA9  30CC               	movlw	204
  5436  0FAA  00AA               	movwf	___flge@ff2+1
  5437  0FAB  30CD               	movlw	205
  5438  0FAC  00A9               	movwf	___flge@ff2
  5439  0FAD  319E  26C1  318E   	fcall	___flge
  5440  0FB0  1C03               	btfss	3,0
  5441  0FB1  2FD0               	goto	l7476
  5442  0FB2  3040               	movlw	64
  5443  0FB3  0020               	movlb	0	; select bank0
  5444  0FB4  00A8               	movwf	___flge@ff1+3
  5445  0FB5  30AB               	movlw	171
  5446  0FB6  00A7               	movwf	___flge@ff1+2
  5447  0FB7  3033               	movlw	51
  5448  0FB8  00A6               	movwf	___flge@ff1+1
  5449  0FB9  3033               	movlw	51
  5450  0FBA  00A5               	movwf	___flge@ff1
  5451  0FBB  0022               	movlb	2	; select bank2
  5452  0FBC  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5453  0FBD  0020               	movlb	0	; select bank0
  5454  0FBE  00AC               	movwf	___flge@ff2+3
  5455  0FBF  0022               	movlb	2	; select bank2
  5456  0FC0  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5457  0FC1  0020               	movlb	0	; select bank0
  5458  0FC2  00AB               	movwf	___flge@ff2+2
  5459  0FC3  0022               	movlb	2	; select bank2
  5460  0FC4  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5461  0FC5  0020               	movlb	0	; select bank0
  5462  0FC6  00AA               	movwf	___flge@ff2+1
  5463  0FC7  0022               	movlb	2	; select bank2
  5464  0FC8  085F               	movf	_BatteryVoltage^(0+256),w
  5465  0FC9  0020               	movlb	0	; select bank0
  5466  0FCA  00A9               	movwf	___flge@ff2
  5467  0FCB  319E  26C1  318E   	fcall	___flge
  5468  0FCE  1803               	btfsc	3,0
  5469  0FCF  2FE6               	goto	l170
  5470  0FD0                     l7476:	
  5471                           
  5472                           ;main.c: 129: {
  5473                           ;main.c: 130: pwrLEDtoggle++;
  5474  0FD0  3001               	movlw	1
  5475  0FD1  0024               	movlb	4	; select bank4
  5476  0FD2  07BB               	addwf	_pwrLEDtoggle^(0+512),f
  5477  0FD3  3000               	movlw	0
  5478  0FD4  3DBC               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5479                           
  5480                           ;main.c: 131: if(pwrLEDtoggle > 1000)
  5481  0FD5  3003               	movlw	3
  5482  0FD6  023C               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5483  0FD7  30E9               	movlw	233
  5484  0FD8  1903               	skipnz
  5485  0FD9  023B               	subwf	_pwrLEDtoggle^(0+512),w
  5486  0FDA  1C03               	skipc
  5487  0FDB  2FE8               	goto	l7482
  5488                           
  5489                           ;main.c: 132: {
  5490                           ;main.c: 133: LATC ^= 0b00000010;
  5491  0FDC  3002               	movlw	2
  5492  0FDD  0020               	movlb	0	; select bank0
  5493  0FDE  00E5               	movwf	??_main
  5494  0FDF  0865               	movf	??_main,w
  5495  0FE0  0022               	movlb	2	; select bank2
  5496  0FE1  068E               	xorwf	14,f	;volatile
  5497                           
  5498                           ;main.c: 134: pwrLEDtoggle = 0;
  5499  0FE2  0024               	movlb	4	; select bank4
  5500  0FE3  01BB               	clrf	_pwrLEDtoggle^(0+512)
  5501  0FE4  01BC               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5502                           
  5503                           ;main.c: 135: }
  5504                           ;main.c: 136: }
  5505  0FE5  2FE8               	goto	l7482
  5506  0FE6                     l170:	
  5507                           
  5508                           ;main.c: 137: else
  5509                           ;main.c: 138: {
  5510                           ;main.c: 139: LATC |= 0b00000010;
  5511  0FE6  0022               	movlb	2	; select bank2
  5512  0FE7  148E               	bsf	14,1	;volatile
  5513  0FE8                     l7482:	
  5514                           
  5515                           ;main.c: 140: }
  5516                           ;main.c: 141: if(SinLEDtimer >= 100)
  5517  0FE8  3000               	movlw	0
  5518  0FE9  0024               	movlb	4	; select bank4
  5519  0FEA  023A               	subwf	(_SinLEDtimer+1)^(0+512),w
  5520  0FEB  3064               	movlw	100
  5521  0FEC  1903               	skipnz
  5522  0FED  0239               	subwf	_SinLEDtimer^(0+512),w
  5523  0FEE  1C03               	skipc
  5524  0FEF  2FF7               	goto	l7486
  5525                           
  5526                           ;main.c: 142: {
  5527                           ;main.c: 143: LATC &= ~0b00001000;
  5528  0FF0  30F7               	movlw	247
  5529  0FF1  0020               	movlb	0	; select bank0
  5530  0FF2  00E5               	movwf	??_main
  5531  0FF3  0865               	movf	??_main,w
  5532  0FF4  0022               	movlb	2	; select bank2
  5533  0FF5  058E               	andwf	14,f	;volatile
  5534                           
  5535                           ;main.c: 144: }
  5536  0FF6  2FFC               	goto	l7488
  5537  0FF7                     l7486:	
  5538                           
  5539                           ;main.c: 145: else
  5540                           ;main.c: 146: {
  5541                           ;main.c: 147: SinLEDtimer++;
  5542  0FF7  3001               	movlw	1
  5543  0FF8  0024               	movlb	4	; select bank4
  5544  0FF9  07B9               	addwf	_SinLEDtimer^(0+512),f
  5545  0FFA  3000               	movlw	0
  5546  0FFB  3DBA               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5547  0FFC                     l7488:	
  5548                           
  5549                           ;main.c: 148: }
  5550                           ;main.c: 149: PS_2_Update();
  5551  0FFC  3181  2115  318E   	fcall	_PS_2_Update
  5552  0FFF  2F83               	goto	l7470
  5553  1000                     __end_of_main:	
  5554                           
  5555                           	psect	text1
  5556  1EC1                     __ptext1:	
  5557 ;; *************** function ___flge *****************
  5558 ;; Defined at:
  5559 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  ff1             4    5[BANK0 ] unsigned char 
  5562 ;;  ff2             4    9[BANK0 ] unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:       16 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    3
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_main
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           
  5589                           ;psect for function ___flge
  5590  1EC1                     ___flge:	
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5594  1EC1  0020               	movlb	0	; select bank0
  5595  1EC2  1FA8               	btfss	___flge@ff1+3,7
  5596  1EC3  2EEB               	goto	l5474
  5597  1EC4  3000               	movlw	0
  5598  1EC5  00AD               	movwf	??___flge
  5599  1EC6  3000               	movlw	0
  5600  1EC7  00AE               	movwf	??___flge+1
  5601  1EC8  3000               	movlw	0
  5602  1EC9  00AF               	movwf	??___flge+2
  5603  1ECA  3080               	movlw	128
  5604  1ECB  00B0               	movwf	??___flge+3
  5605  1ECC  0925               	comf	___flge@ff1,w
  5606  1ECD  00B1               	movwf	??___flge+4
  5607  1ECE  0926               	comf	___flge@ff1+1,w
  5608  1ECF  00B2               	movwf	??___flge+5
  5609  1ED0  0927               	comf	___flge@ff1+2,w
  5610  1ED1  00B3               	movwf	??___flge+6
  5611  1ED2  0928               	comf	___flge@ff1+3,w
  5612  1ED3  00B4               	movwf	??___flge+7
  5613  1ED4  0AB1               	incf	??___flge+4,f
  5614  1ED5  1903               	skipnz
  5615  1ED6  0AB2               	incf	??___flge+5,f
  5616  1ED7  1903               	skipnz
  5617  1ED8  0AB3               	incf	??___flge+6,f
  5618  1ED9  1903               	skipnz
  5619  1EDA  0AB4               	incf	??___flge+7,f
  5620  1EDB  0831               	movf	??___flge+4,w
  5621  1EDC  07AD               	addwf	??___flge,f
  5622  1EDD  0832               	movf	??___flge+5,w
  5623  1EDE  3DAE               	addwfc	??___flge+1,f
  5624  1EDF  0833               	movf	??___flge+6,w
  5625  1EE0  3DAF               	addwfc	??___flge+2,f
  5626  1EE1  0834               	movf	??___flge+7,w
  5627  1EE2  3DB0               	addwfc	??___flge+3,f
  5628  1EE3  0830               	movf	??___flge+3,w
  5629  1EE4  00A8               	movwf	___flge@ff1+3
  5630  1EE5  082F               	movf	??___flge+2,w
  5631  1EE6  00A7               	movwf	___flge@ff1+2
  5632  1EE7  082E               	movf	??___flge+1,w
  5633  1EE8  00A6               	movwf	___flge@ff1+1
  5634  1EE9  082D               	movf	??___flge,w
  5635  1EEA  00A5               	movwf	___flge@ff1
  5636  1EEB                     l5474:	
  5637  1EEB  1FAC               	btfss	___flge@ff2+3,7
  5638  1EEC  2F14               	goto	l5478
  5639  1EED  3000               	movlw	0
  5640  1EEE  00AD               	movwf	??___flge
  5641  1EEF  3000               	movlw	0
  5642  1EF0  00AE               	movwf	??___flge+1
  5643  1EF1  3000               	movlw	0
  5644  1EF2  00AF               	movwf	??___flge+2
  5645  1EF3  3080               	movlw	128
  5646  1EF4  00B0               	movwf	??___flge+3
  5647  1EF5  0929               	comf	___flge@ff2,w
  5648  1EF6  00B1               	movwf	??___flge+4
  5649  1EF7  092A               	comf	___flge@ff2+1,w
  5650  1EF8  00B2               	movwf	??___flge+5
  5651  1EF9  092B               	comf	___flge@ff2+2,w
  5652  1EFA  00B3               	movwf	??___flge+6
  5653  1EFB  092C               	comf	___flge@ff2+3,w
  5654  1EFC  00B4               	movwf	??___flge+7
  5655  1EFD  0AB1               	incf	??___flge+4,f
  5656  1EFE  1903               	skipnz
  5657  1EFF  0AB2               	incf	??___flge+5,f
  5658  1F00  1903               	skipnz
  5659  1F01  0AB3               	incf	??___flge+6,f
  5660  1F02  1903               	skipnz
  5661  1F03  0AB4               	incf	??___flge+7,f
  5662  1F04  0831               	movf	??___flge+4,w
  5663  1F05  07AD               	addwf	??___flge,f
  5664  1F06  0832               	movf	??___flge+5,w
  5665  1F07  3DAE               	addwfc	??___flge+1,f
  5666  1F08  0833               	movf	??___flge+6,w
  5667  1F09  3DAF               	addwfc	??___flge+2,f
  5668  1F0A  0834               	movf	??___flge+7,w
  5669  1F0B  3DB0               	addwfc	??___flge+3,f
  5670  1F0C  0830               	movf	??___flge+3,w
  5671  1F0D  00AC               	movwf	___flge@ff2+3
  5672  1F0E  082F               	movf	??___flge+2,w
  5673  1F0F  00AB               	movwf	___flge@ff2+2
  5674  1F10  082E               	movf	??___flge+1,w
  5675  1F11  00AA               	movwf	___flge@ff2+1
  5676  1F12  082D               	movf	??___flge,w
  5677  1F13  00A9               	movwf	___flge@ff2
  5678  1F14                     l5478:	
  5679  1F14  3080               	movlw	128
  5680  1F15  06A8               	xorwf	___flge@ff1+3,f
  5681  1F16  3080               	movlw	128
  5682  1F17  06AC               	xorwf	___flge@ff2+3,f
  5683  1F18  082C               	movf	___flge@ff2+3,w
  5684  1F19  0228               	subwf	___flge@ff1+3,w
  5685  1F1A  1D03               	skipz
  5686  1F1B  0008               	return
  5687  1F1C  082B               	movf	___flge@ff2+2,w
  5688  1F1D  0227               	subwf	___flge@ff1+2,w
  5689  1F1E  1D03               	skipz
  5690  1F1F  0008               	return
  5691  1F20  082A               	movf	___flge@ff2+1,w
  5692  1F21  0226               	subwf	___flge@ff1+1,w
  5693  1F22  1D03               	skipz
  5694  1F23  0008               	return
  5695  1F24  0829               	movf	___flge@ff2,w
  5696  1F25  0225               	subwf	___flge@ff1,w
  5697  1F26  0008               	return
  5698  1F27                     __end_of___flge:	
  5699                           
  5700                           	psect	text2
  5701  1F92                     __ptext2:	
  5702 ;; *************** function _ReadVoltage *****************
  5703 ;; Defined at:
  5704 ;;		line 27 in file "ADC.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  voltage         4    0[BANK1 ] unsigned char 
  5709 ;;  temp            2    4[BANK1 ] unsigned int 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  4   60[BANK0 ] unsigned int 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0, pclath, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5719 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;Total ram usage:       11 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    5
  5726 ;; This function calls:
  5727 ;;		_DisableInternalADC
  5728 ;;		_InternalADC_Read
  5729 ;;		___fldiv
  5730 ;;		___flmul
  5731 ;;		___lwtofl
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _ReadVoltage
  5739  1F92                     _ReadVoltage:	
  5740                           
  5741                           ;ADC.c: 29: unsigned int temp;
  5742                           ;ADC.c: 30: double voltage;
  5743                           ;ADC.c: 31: LATC &= ~0b00000001;
  5744                           
  5745                           ;incstack = 0
  5746                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5747  1F92  30FE               	movlw	254
  5748  1F93  0020               	movlb	0	; select bank0
  5749  1F94  00E0               	movwf	??_ReadVoltage
  5750  1F95  0860               	movf	??_ReadVoltage,w
  5751  1F96  0022               	movlb	2	; select bank2
  5752  1F97  058E               	andwf	14,f	;volatile
  5753                           
  5754                           ;ADC.c: 32: temp = InternalADC_Read(2);
  5755  1F98  3002               	movlw	2
  5756  1F99  319B  2397  319F   	fcall	_InternalADC_Read
  5757  1F9C  0020               	movlb	0	; select bank0
  5758  1F9D  0830               	movf	?_InternalADC_Read+1,w
  5759  1F9E  0021               	movlb	1	; select bank1
  5760  1F9F  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5761  1FA0  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5762  1FA1  0020               	movlb	0	; select bank0
  5763  1FA2  082F               	movf	?_InternalADC_Read,w
  5764  1FA3  0021               	movlb	1	; select bank1
  5765  1FA4  01A4               	clrf	ReadVoltage@temp^(0+128)
  5766  1FA5  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5767                           
  5768                           ;ADC.c: 33: DisableInternalADC();
  5769  1FA6  3187  27F8  319F   	fcall	_DisableInternalADC
  5770                           
  5771                           ;ADC.c: 34: LATC |= 0b00000001;
  5772  1FA9  0022               	movlb	2	; select bank2
  5773  1FAA  140E               	bsf	14,0	;volatile
  5774                           
  5775                           ;ADC.c: 37: voltage = ((double)temp / 1000) * 5.7;
  5776  1FAB  3040               	movlw	64
  5777  1FAC  0020               	movlb	0	; select bank0
  5778  1FAD  00CB               	movwf	___flmul@f1+3
  5779  1FAE  30B6               	movlw	182
  5780  1FAF  00CA               	movwf	___flmul@f1+2
  5781  1FB0  3066               	movlw	102
  5782  1FB1  00C9               	movwf	___flmul@f1+1
  5783  1FB2  3066               	movlw	102
  5784  1FB3  00C8               	movwf	___flmul@f1
  5785  1FB4  3044               	movlw	68
  5786  1FB5  00B7               	movwf	___fldiv@f2+3
  5787  1FB6  307A               	movlw	122
  5788  1FB7  00B6               	movwf	___fldiv@f2+2
  5789  1FB8  3000               	movlw	0
  5790  1FB9  00B5               	movwf	___fldiv@f2+1
  5791  1FBA  3000               	movlw	0
  5792  1FBB  00B4               	movwf	___fldiv@f2
  5793  1FBC  0021               	movlb	1	; select bank1
  5794  1FBD  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5795  1FBE  0020               	movlb	0	; select bank0
  5796  1FBF  01B0               	clrf	___lwtofl@c+1
  5797  1FC0  07B0               	addwf	___lwtofl@c+1,f
  5798  1FC1  0021               	movlb	1	; select bank1
  5799  1FC2  0824               	movf	ReadVoltage@temp^(0+128),w
  5800  1FC3  0020               	movlb	0	; select bank0
  5801  1FC4  01AF               	clrf	___lwtofl@c
  5802  1FC5  07AF               	addwf	___lwtofl@c,f
  5803  1FC6  3199  21C5  319F   	fcall	___lwtofl
  5804  1FC9  0020               	movlb	0	; select bank0
  5805  1FCA  0832               	movf	?___lwtofl+3,w
  5806  1FCB  00BB               	movwf	___fldiv@f1+3
  5807  1FCC  0831               	movf	?___lwtofl+2,w
  5808  1FCD  00BA               	movwf	___fldiv@f1+2
  5809  1FCE  0830               	movf	?___lwtofl+1,w
  5810  1FCF  00B9               	movwf	___fldiv@f1+1
  5811  1FD0  082F               	movf	?___lwtofl,w
  5812  1FD1  00B8               	movwf	___fldiv@f1
  5813  1FD2  3190  2029  319F   	fcall	___fldiv
  5814  1FD5  0020               	movlb	0	; select bank0
  5815  1FD6  0837               	movf	?___fldiv+3,w
  5816  1FD7  00CF               	movwf	___flmul@f2+3
  5817  1FD8  0836               	movf	?___fldiv+2,w
  5818  1FD9  00CE               	movwf	___flmul@f2+2
  5819  1FDA  0835               	movf	?___fldiv+1,w
  5820  1FDB  00CD               	movwf	___flmul@f2+1
  5821  1FDC  0834               	movf	?___fldiv,w
  5822  1FDD  00CC               	movwf	___flmul@f2
  5823  1FDE  3190  20EA         	fcall	___flmul
  5824  1FE0  0020               	movlb	0	; select bank0
  5825  1FE1  084B               	movf	?___flmul+3,w
  5826  1FE2  0021               	movlb	1	; select bank1
  5827  1FE3  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5828  1FE4  0020               	movlb	0	; select bank0
  5829  1FE5  084A               	movf	?___flmul+2,w
  5830  1FE6  0021               	movlb	1	; select bank1
  5831  1FE7  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5832  1FE8  0020               	movlb	0	; select bank0
  5833  1FE9  0849               	movf	?___flmul+1,w
  5834  1FEA  0021               	movlb	1	; select bank1
  5835  1FEB  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5836  1FEC  0020               	movlb	0	; select bank0
  5837  1FED  0848               	movf	?___flmul,w
  5838  1FEE  0021               	movlb	1	; select bank1
  5839  1FEF  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5840                           
  5841                           ;ADC.c: 38: return voltage;
  5842  1FF0  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5843  1FF1  0020               	movlb	0	; select bank0
  5844  1FF2  00DF               	movwf	?_ReadVoltage+3
  5845  1FF3  0021               	movlb	1	; select bank1
  5846  1FF4  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5847  1FF5  0020               	movlb	0	; select bank0
  5848  1FF6  00DE               	movwf	?_ReadVoltage+2
  5849  1FF7  0021               	movlb	1	; select bank1
  5850  1FF8  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5851  1FF9  0020               	movlb	0	; select bank0
  5852  1FFA  00DD               	movwf	?_ReadVoltage+1
  5853  1FFB  0021               	movlb	1	; select bank1
  5854  1FFC  0820               	movf	ReadVoltage@voltage^(0+128),w
  5855  1FFD  0020               	movlb	0	; select bank0
  5856  1FFE  00DC               	movwf	?_ReadVoltage
  5857  1FFF  0008               	return
  5858  2000                     __end_of_ReadVoltage:	
  5859                           
  5860                           	psect	text3
  5861  19C5                     __ptext3:	
  5862 ;; *************** function ___lwtofl *****************
  5863 ;; Defined at:
  5864 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  c               2   15[BANK0 ] unsigned int 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  4   15[BANK0 ] unsigned int 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0, pclath, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5878 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;Total ram usage:        5 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    4
  5885 ;; This function calls:
  5886 ;;		___flpack
  5887 ;; This function is called by:
  5888 ;;		_ReadVoltage
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           
  5893                           ;psect for function ___lwtofl
  5894  19C5                     ___lwtofl:	
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5898  19C5  0020               	movlb	0	; select bank0
  5899  19C6  082F               	movf	___lwtofl@c,w
  5900  19C7  00A5               	movwf	___flpack@arg
  5901  19C8  0830               	movf	___lwtofl@c+1,w
  5902  19C9  00A6               	movwf	___flpack@arg+1
  5903  19CA  01A7               	clrf	___flpack@arg+2
  5904  19CB  01A8               	clrf	___flpack@arg+3
  5905  19CC  3096               	movlw	150
  5906  19CD  00B3               	movwf	??___lwtofl
  5907  19CE  0833               	movf	??___lwtofl,w
  5908  19CF  00A9               	movwf	___flpack@exp
  5909  19D0  01AA               	clrf	___flpack@sign
  5910  19D1  319F  2727         	fcall	___flpack
  5911  19D3  0020               	movlb	0	; select bank0
  5912  19D4  0828               	movf	?___flpack+3,w
  5913  19D5  00B2               	movwf	?___lwtofl+3
  5914  19D6  0827               	movf	?___flpack+2,w
  5915  19D7  00B1               	movwf	?___lwtofl+2
  5916  19D8  0826               	movf	?___flpack+1,w
  5917  19D9  00B0               	movwf	?___lwtofl+1
  5918  19DA  0825               	movf	?___flpack,w
  5919  19DB  00AF               	movwf	?___lwtofl
  5920  19DC  0008               	return
  5921  19DD                     __end_of___lwtofl:	
  5922                           
  5923                           	psect	text4
  5924  10EA                     __ptext4:	
  5925 ;; *************** function ___flmul *****************
  5926 ;; Defined at:
  5927 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  f1              4   40[BANK0 ] unsigned int 
  5930 ;;  f2              4   44[BANK0 ] unsigned int 
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5933 ;;  sign            1   59[BANK0 ] unsigned char 
  5934 ;;  cntr            1   58[BANK0 ] unsigned char 
  5935 ;;  exp             1   53[BANK0 ] unsigned char 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  4   40[BANK0 ] unsigned char 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5945 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;Total ram usage:       20 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    4
  5952 ;; This function calls:
  5953 ;;		___flpack
  5954 ;; This function is called by:
  5955 ;;		_ReadVoltage
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function ___flmul
  5961  10EA                     ___flmul:	
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5965  10EA  0020               	movlb	0	; select bank0
  5966  10EB  0848               	movf	___flmul@f1,w
  5967  10EC  00D0               	movwf	??___flmul
  5968  10ED  0849               	movf	___flmul@f1+1,w
  5969  10EE  00D1               	movwf	??___flmul+1
  5970  10EF  084A               	movf	___flmul@f1+2,w
  5971  10F0  00D2               	movwf	??___flmul+2
  5972  10F1  084B               	movf	___flmul@f1+3,w
  5973  10F2  00D3               	movwf	??___flmul+3
  5974  10F3  1003               	clrc
  5975  10F4  0D52               	rlf	??___flmul+2,w
  5976  10F5  0D53               	rlf	??___flmul+3,w
  5977  10F6  00D4               	movwf	??___flmul+4
  5978  10F7  0854               	movf	??___flmul+4,w
  5979  10F8  00D5               	movwf	___flmul@exp
  5980  10F9  08D5               	movf	___flmul@exp,f
  5981  10FA  1D03               	skipz
  5982  10FB  2905               	goto	l7158
  5983  10FC  3000               	movlw	0
  5984  10FD  00CB               	movwf	?___flmul+3
  5985  10FE  3000               	movlw	0
  5986  10FF  00CA               	movwf	?___flmul+2
  5987  1100  3000               	movlw	0
  5988  1101  00C9               	movwf	?___flmul+1
  5989  1102  3000               	movlw	0
  5990  1103  00C8               	movwf	?___flmul
  5991  1104  0008               	return
  5992  1105                     l7158:	
  5993  1105  084C               	movf	___flmul@f2,w
  5994  1106  00D0               	movwf	??___flmul
  5995  1107  084D               	movf	___flmul@f2+1,w
  5996  1108  00D1               	movwf	??___flmul+1
  5997  1109  084E               	movf	___flmul@f2+2,w
  5998  110A  00D2               	movwf	??___flmul+2
  5999  110B  084F               	movf	___flmul@f2+3,w
  6000  110C  00D3               	movwf	??___flmul+3
  6001  110D  1003               	clrc
  6002  110E  0D52               	rlf	??___flmul+2,w
  6003  110F  0D53               	rlf	??___flmul+3,w
  6004  1110  00D4               	movwf	??___flmul+4
  6005  1111  0854               	movf	??___flmul+4,w
  6006  1112  00DB               	movwf	___flmul@sign
  6007  1113  08DB               	movf	___flmul@sign,f
  6008  1114  1D03               	skipz
  6009  1115  291F               	goto	l7164
  6010  1116  3000               	movlw	0
  6011  1117  00CB               	movwf	?___flmul+3
  6012  1118  3000               	movlw	0
  6013  1119  00CA               	movwf	?___flmul+2
  6014  111A  3000               	movlw	0
  6015  111B  00C9               	movwf	?___flmul+1
  6016  111C  3000               	movlw	0
  6017  111D  00C8               	movwf	?___flmul
  6018  111E  0008               	return
  6019  111F                     l7164:	
  6020  111F  085B               	movf	___flmul@sign,w
  6021  1120  3E7B               	addlw	123
  6022  1121  00D0               	movwf	??___flmul
  6023  1122  0850               	movf	??___flmul,w
  6024  1123  07D5               	addwf	___flmul@exp,f
  6025  1124  0848               	movf	___flmul@f1,w
  6026  1125  00D0               	movwf	??___flmul
  6027  1126  0849               	movf	___flmul@f1+1,w
  6028  1127  00D1               	movwf	??___flmul+1
  6029  1128  084A               	movf	___flmul@f1+2,w
  6030  1129  00D2               	movwf	??___flmul+2
  6031  112A  084B               	movf	___flmul@f1+3,w
  6032  112B  00D3               	movwf	??___flmul+3
  6033  112C  3018               	movlw	24
  6034  112D                     u9955:	
  6035  112D  36D3               	lsrf	??___flmul+3,f
  6036  112E  0CD2               	rrf	??___flmul+2,f
  6037  112F  0CD1               	rrf	??___flmul+1,f
  6038  1130  0CD0               	rrf	??___flmul,f
  6039  1131  0B89               	decfsz	9,f
  6040  1132  292D               	goto	u9955
  6041  1133  0850               	movf	??___flmul,w
  6042  1134  00D4               	movwf	??___flmul+4
  6043  1135  0854               	movf	??___flmul+4,w
  6044  1136  00DB               	movwf	___flmul@sign
  6045  1137  084C               	movf	___flmul@f2,w
  6046  1138  00D0               	movwf	??___flmul
  6047  1139  084D               	movf	___flmul@f2+1,w
  6048  113A  00D1               	movwf	??___flmul+1
  6049  113B  084E               	movf	___flmul@f2+2,w
  6050  113C  00D2               	movwf	??___flmul+2
  6051  113D  084F               	movf	___flmul@f2+3,w
  6052  113E  00D3               	movwf	??___flmul+3
  6053  113F  3018               	movlw	24
  6054  1140                     u9965:	
  6055  1140  36D3               	lsrf	??___flmul+3,f
  6056  1141  0CD2               	rrf	??___flmul+2,f
  6057  1142  0CD1               	rrf	??___flmul+1,f
  6058  1143  0CD0               	rrf	??___flmul,f
  6059  1144  0B89               	decfsz	9,f
  6060  1145  2940               	goto	u9965
  6061  1146  0850               	movf	??___flmul,w
  6062  1147  00D4               	movwf	??___flmul+4
  6063  1148  0854               	movf	??___flmul+4,w
  6064  1149  06DB               	xorwf	___flmul@sign,f
  6065  114A  3080               	movlw	128
  6066  114B  00D0               	movwf	??___flmul
  6067  114C  0850               	movf	??___flmul,w
  6068  114D  05DB               	andwf	___flmul@sign,f
  6069  114E  17CA               	bsf	___flmul@f1+2,7
  6070  114F  17CE               	bsf	___flmul@f2+2,7
  6071  1150  30FF               	movlw	255
  6072  1151  05CC               	andwf	___flmul@f2,f
  6073  1152  30FF               	movlw	255
  6074  1153  05CD               	andwf	___flmul@f2+1,f
  6075  1154  30FF               	movlw	255
  6076  1155  05CE               	andwf	___flmul@f2+2,f
  6077  1156  3000               	movlw	0
  6078  1157  05CF               	andwf	___flmul@f2+3,f
  6079  1158  3000               	movlw	0
  6080  1159  00D9               	movwf	___flmul@f3_as_product+3
  6081  115A  3000               	movlw	0
  6082  115B  00D8               	movwf	___flmul@f3_as_product+2
  6083  115C  3000               	movlw	0
  6084  115D  00D7               	movwf	___flmul@f3_as_product+1
  6085  115E  3000               	movlw	0
  6086  115F  00D6               	movwf	___flmul@f3_as_product
  6087  1160  3007               	movlw	7
  6088  1161  00D0               	movwf	??___flmul
  6089  1162  0850               	movf	??___flmul,w
  6090  1163  00DA               	movwf	___flmul@cntr
  6091  1164                     l7176:	
  6092  1164  1C48               	btfss	___flmul@f1,0
  6093  1165  296E               	goto	l7180
  6094  1166  084C               	movf	___flmul@f2,w
  6095  1167  07D6               	addwf	___flmul@f3_as_product,f
  6096  1168  084D               	movf	___flmul@f2+1,w
  6097  1169  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6098  116A  084E               	movf	___flmul@f2+2,w
  6099  116B  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6100  116C  084F               	movf	___flmul@f2+3,w
  6101  116D  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6102  116E                     l7180:	
  6103  116E  3001               	movlw	1
  6104  116F                     u9985:	
  6105  116F  36CB               	lsrf	___flmul@f1+3,f
  6106  1170  0CCA               	rrf	___flmul@f1+2,f
  6107  1171  0CC9               	rrf	___flmul@f1+1,f
  6108  1172  0CC8               	rrf	___flmul@f1,f
  6109  1173  0B89               	decfsz	9,f
  6110  1174  296F               	goto	u9985
  6111  1175  3001               	movlw	1
  6112  1176                     u9995:	
  6113  1176  35CC               	lslf	___flmul@f2,f
  6114  1177  0DCD               	rlf	___flmul@f2+1,f
  6115  1178  0DCE               	rlf	___flmul@f2+2,f
  6116  1179  0DCF               	rlf	___flmul@f2+3,f
  6117  117A  0B89               	decfsz	9,f
  6118  117B  2976               	goto	u9995
  6119  117C  3001               	movlw	1
  6120  117D  02DA               	subwf	___flmul@cntr,f
  6121  117E  1D03               	btfss	3,2
  6122  117F  2964               	goto	l7176
  6123  1180  3011               	movlw	17
  6124  1181  00D0               	movwf	??___flmul
  6125  1182  0850               	movf	??___flmul,w
  6126  1183  00DA               	movwf	___flmul@cntr
  6127  1184                     l7188:	
  6128  1184  1C48               	btfss	___flmul@f1,0
  6129  1185  298E               	goto	l7192
  6130  1186  084C               	movf	___flmul@f2,w
  6131  1187  07D6               	addwf	___flmul@f3_as_product,f
  6132  1188  084D               	movf	___flmul@f2+1,w
  6133  1189  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6134  118A  084E               	movf	___flmul@f2+2,w
  6135  118B  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6136  118C  084F               	movf	___flmul@f2+3,w
  6137  118D  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6138  118E                     l7192:	
  6139  118E  3001               	movlw	1
  6140  118F                     u10025:	
  6141  118F  36CB               	lsrf	___flmul@f1+3,f
  6142  1190  0CCA               	rrf	___flmul@f1+2,f
  6143  1191  0CC9               	rrf	___flmul@f1+1,f
  6144  1192  0CC8               	rrf	___flmul@f1,f
  6145  1193  0B89               	decfsz	9,f
  6146  1194  298F               	goto	u10025
  6147  1195  3001               	movlw	1
  6148  1196                     u10035:	
  6149  1196  36D9               	lsrf	___flmul@f3_as_product+3,f
  6150  1197  0CD8               	rrf	___flmul@f3_as_product+2,f
  6151  1198  0CD7               	rrf	___flmul@f3_as_product+1,f
  6152  1199  0CD6               	rrf	___flmul@f3_as_product,f
  6153  119A  0B89               	decfsz	9,f
  6154  119B  2996               	goto	u10035
  6155  119C  3001               	movlw	1
  6156  119D  02DA               	subwf	___flmul@cntr,f
  6157  119E  1D03               	btfss	3,2
  6158  119F  2984               	goto	l7188
  6159  11A0  0859               	movf	___flmul@f3_as_product+3,w
  6160  11A1  00A8               	movwf	___flpack@arg+3
  6161  11A2  0858               	movf	___flmul@f3_as_product+2,w
  6162  11A3  00A7               	movwf	___flpack@arg+2
  6163  11A4  0857               	movf	___flmul@f3_as_product+1,w
  6164  11A5  00A6               	movwf	___flpack@arg+1
  6165  11A6  0856               	movf	___flmul@f3_as_product,w
  6166  11A7  00A5               	movwf	___flpack@arg
  6167  11A8  0855               	movf	___flmul@exp,w
  6168  11A9  00D0               	movwf	??___flmul
  6169  11AA  0850               	movf	??___flmul,w
  6170  11AB  00A9               	movwf	___flpack@exp
  6171  11AC  085B               	movf	___flmul@sign,w
  6172  11AD  00D1               	movwf	??___flmul+1
  6173  11AE  0851               	movf	??___flmul+1,w
  6174  11AF  00AA               	movwf	___flpack@sign
  6175  11B0  319F  2727         	fcall	___flpack
  6176  11B2  0020               	movlb	0	; select bank0
  6177  11B3  0828               	movf	?___flpack+3,w
  6178  11B4  00CB               	movwf	?___flmul+3
  6179  11B5  0827               	movf	?___flpack+2,w
  6180  11B6  00CA               	movwf	?___flmul+2
  6181  11B7  0826               	movf	?___flpack+1,w
  6182  11B8  00C9               	movwf	?___flmul+1
  6183  11B9  0825               	movf	?___flpack,w
  6184  11BA  00C8               	movwf	?___flmul
  6185  11BB  0008               	return
  6186  11BC                     __end_of___flmul:	
  6187                           
  6188                           	psect	text5
  6189  1029                     __ptext5:	
  6190 ;; *************** function ___fldiv *****************
  6191 ;; Defined at:
  6192 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  f2              4   20[BANK0 ] unsigned char 
  6195 ;;  f1              4   24[BANK0 ] unsigned char 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  f3              4   33[BANK0 ] unsigned char 
  6198 ;;  sign            1   39[BANK0 ] unsigned char 
  6199 ;;  exp             1   38[BANK0 ] unsigned char 
  6200 ;;  cntr            1   37[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  4   20[BANK0 ] unsigned char 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:       20 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    4
  6217 ;; This function calls:
  6218 ;;		___flpack
  6219 ;; This function is called by:
  6220 ;;		_ReadVoltage
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function ___fldiv
  6226  1029                     ___fldiv:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6230  1029  0020               	movlb	0	; select bank0
  6231  102A  0838               	movf	___fldiv@f1,w
  6232  102B  00BC               	movwf	??___fldiv
  6233  102C  0839               	movf	___fldiv@f1+1,w
  6234  102D  00BD               	movwf	??___fldiv+1
  6235  102E  083A               	movf	___fldiv@f1+2,w
  6236  102F  00BE               	movwf	??___fldiv+2
  6237  1030  083B               	movf	___fldiv@f1+3,w
  6238  1031  00BF               	movwf	??___fldiv+3
  6239  1032  1003               	clrc
  6240  1033  0D3E               	rlf	??___fldiv+2,w
  6241  1034  0D3F               	rlf	??___fldiv+3,w
  6242  1035  00C0               	movwf	??___fldiv+4
  6243  1036  0840               	movf	??___fldiv+4,w
  6244  1037  00C6               	movwf	___fldiv@exp
  6245  1038  08C6               	movf	___fldiv@exp,f
  6246  1039  1D03               	skipz
  6247  103A  2844               	goto	l7120
  6248  103B  3000               	movlw	0
  6249  103C  00B7               	movwf	?___fldiv+3
  6250  103D  3000               	movlw	0
  6251  103E  00B6               	movwf	?___fldiv+2
  6252  103F  3000               	movlw	0
  6253  1040  00B5               	movwf	?___fldiv+1
  6254  1041  3000               	movlw	0
  6255  1042  00B4               	movwf	?___fldiv
  6256  1043  0008               	return
  6257  1044                     l7120:	
  6258  1044  0834               	movf	___fldiv@f2,w
  6259  1045  00BC               	movwf	??___fldiv
  6260  1046  0835               	movf	___fldiv@f2+1,w
  6261  1047  00BD               	movwf	??___fldiv+1
  6262  1048  0836               	movf	___fldiv@f2+2,w
  6263  1049  00BE               	movwf	??___fldiv+2
  6264  104A  0837               	movf	___fldiv@f2+3,w
  6265  104B  00BF               	movwf	??___fldiv+3
  6266  104C  1003               	clrc
  6267  104D  0D3E               	rlf	??___fldiv+2,w
  6268  104E  0D3F               	rlf	??___fldiv+3,w
  6269  104F  00C0               	movwf	??___fldiv+4
  6270  1050  0840               	movf	??___fldiv+4,w
  6271  1051  00C7               	movwf	___fldiv@sign
  6272  1052  08C7               	movf	___fldiv@sign,f
  6273  1053  1D03               	skipz
  6274  1054  285E               	goto	l7126
  6275  1055  3000               	movlw	0
  6276  1056  00B7               	movwf	?___fldiv+3
  6277  1057  3000               	movlw	0
  6278  1058  00B6               	movwf	?___fldiv+2
  6279  1059  3000               	movlw	0
  6280  105A  00B5               	movwf	?___fldiv+1
  6281  105B  3000               	movlw	0
  6282  105C  00B4               	movwf	?___fldiv
  6283  105D  0008               	return
  6284  105E                     l7126:	
  6285  105E  3089               	movlw	137
  6286  105F  0747               	addwf	___fldiv@sign,w
  6287  1060  00BC               	movwf	??___fldiv
  6288  1061  083C               	movf	??___fldiv,w
  6289  1062  02C6               	subwf	___fldiv@exp,f
  6290  1063  0838               	movf	___fldiv@f1,w
  6291  1064  00BC               	movwf	??___fldiv
  6292  1065  0839               	movf	___fldiv@f1+1,w
  6293  1066  00BD               	movwf	??___fldiv+1
  6294  1067  083A               	movf	___fldiv@f1+2,w
  6295  1068  00BE               	movwf	??___fldiv+2
  6296  1069  083B               	movf	___fldiv@f1+3,w
  6297  106A  00BF               	movwf	??___fldiv+3
  6298  106B  3018               	movlw	24
  6299  106C                     u9875:	
  6300  106C  36BF               	lsrf	??___fldiv+3,f
  6301  106D  0CBE               	rrf	??___fldiv+2,f
  6302  106E  0CBD               	rrf	??___fldiv+1,f
  6303  106F  0CBC               	rrf	??___fldiv,f
  6304  1070  0B89               	decfsz	9,f
  6305  1071  286C               	goto	u9875
  6306  1072  083C               	movf	??___fldiv,w
  6307  1073  00C0               	movwf	??___fldiv+4
  6308  1074  0840               	movf	??___fldiv+4,w
  6309  1075  00C7               	movwf	___fldiv@sign
  6310  1076  0834               	movf	___fldiv@f2,w
  6311  1077  00BC               	movwf	??___fldiv
  6312  1078  0835               	movf	___fldiv@f2+1,w
  6313  1079  00BD               	movwf	??___fldiv+1
  6314  107A  0836               	movf	___fldiv@f2+2,w
  6315  107B  00BE               	movwf	??___fldiv+2
  6316  107C  0837               	movf	___fldiv@f2+3,w
  6317  107D  00BF               	movwf	??___fldiv+3
  6318  107E  3018               	movlw	24
  6319  107F                     u9885:	
  6320  107F  36BF               	lsrf	??___fldiv+3,f
  6321  1080  0CBE               	rrf	??___fldiv+2,f
  6322  1081  0CBD               	rrf	??___fldiv+1,f
  6323  1082  0CBC               	rrf	??___fldiv,f
  6324  1083  0B89               	decfsz	9,f
  6325  1084  287F               	goto	u9885
  6326  1085  083C               	movf	??___fldiv,w
  6327  1086  00C0               	movwf	??___fldiv+4
  6328  1087  0840               	movf	??___fldiv+4,w
  6329  1088  06C7               	xorwf	___fldiv@sign,f
  6330  1089  3080               	movlw	128
  6331  108A  00BC               	movwf	??___fldiv
  6332  108B  083C               	movf	??___fldiv,w
  6333  108C  05C7               	andwf	___fldiv@sign,f
  6334  108D  17BA               	bsf	___fldiv@f1+2,7
  6335  108E  30FF               	movlw	255
  6336  108F  05B8               	andwf	___fldiv@f1,f
  6337  1090  30FF               	movlw	255
  6338  1091  05B9               	andwf	___fldiv@f1+1,f
  6339  1092  30FF               	movlw	255
  6340  1093  05BA               	andwf	___fldiv@f1+2,f
  6341  1094  3000               	movlw	0
  6342  1095  05BB               	andwf	___fldiv@f1+3,f
  6343  1096  17B6               	bsf	___fldiv@f2+2,7
  6344  1097  30FF               	movlw	255
  6345  1098  05B4               	andwf	___fldiv@f2,f
  6346  1099  30FF               	movlw	255
  6347  109A  05B5               	andwf	___fldiv@f2+1,f
  6348  109B  30FF               	movlw	255
  6349  109C  05B6               	andwf	___fldiv@f2+2,f
  6350  109D  3000               	movlw	0
  6351  109E  05B7               	andwf	___fldiv@f2+3,f
  6352  109F  3020               	movlw	32
  6353  10A0  00BC               	movwf	??___fldiv
  6354  10A1  083C               	movf	??___fldiv,w
  6355  10A2  00C5               	movwf	___fldiv@cntr
  6356  10A3                     l7138:	
  6357  10A3  3001               	movlw	1
  6358  10A4                     u9895:	
  6359  10A4  35C1               	lslf	___fldiv@f3,f
  6360  10A5  0DC2               	rlf	___fldiv@f3+1,f
  6361  10A6  0DC3               	rlf	___fldiv@f3+2,f
  6362  10A7  0DC4               	rlf	___fldiv@f3+3,f
  6363  10A8  0B89               	decfsz	9,f
  6364  10A9  28A4               	goto	u9895
  6365  10AA  0837               	movf	___fldiv@f2+3,w
  6366  10AB  023B               	subwf	___fldiv@f1+3,w
  6367  10AC  1D03               	skipz
  6368  10AD  28B8               	goto	u9905
  6369  10AE  0836               	movf	___fldiv@f2+2,w
  6370  10AF  023A               	subwf	___fldiv@f1+2,w
  6371  10B0  1D03               	skipz
  6372  10B1  28B8               	goto	u9905
  6373  10B2  0835               	movf	___fldiv@f2+1,w
  6374  10B3  0239               	subwf	___fldiv@f1+1,w
  6375  10B4  1D03               	skipz
  6376  10B5  28B8               	goto	u9905
  6377  10B6  0834               	movf	___fldiv@f2,w
  6378  10B7  0238               	subwf	___fldiv@f1,w
  6379  10B8                     u9905:	
  6380  10B8  1C03               	skipc
  6381  10B9  28C3               	goto	l7144
  6382  10BA  0834               	movf	___fldiv@f2,w
  6383  10BB  02B8               	subwf	___fldiv@f1,f
  6384  10BC  0835               	movf	___fldiv@f2+1,w
  6385  10BD  3BB9               	subwfb	___fldiv@f1+1,f
  6386  10BE  0836               	movf	___fldiv@f2+2,w
  6387  10BF  3BBA               	subwfb	___fldiv@f1+2,f
  6388  10C0  0837               	movf	___fldiv@f2+3,w
  6389  10C1  3BBB               	subwfb	___fldiv@f1+3,f
  6390  10C2  1441               	bsf	___fldiv@f3,0
  6391  10C3                     l7144:	
  6392  10C3  3001               	movlw	1
  6393  10C4                     u9915:	
  6394  10C4  35B8               	lslf	___fldiv@f1,f
  6395  10C5  0DB9               	rlf	___fldiv@f1+1,f
  6396  10C6  0DBA               	rlf	___fldiv@f1+2,f
  6397  10C7  0DBB               	rlf	___fldiv@f1+3,f
  6398  10C8  0B89               	decfsz	9,f
  6399  10C9  28C4               	goto	u9915
  6400  10CA  3001               	movlw	1
  6401  10CB  02C5               	subwf	___fldiv@cntr,f
  6402  10CC  1D03               	btfss	3,2
  6403  10CD  28A3               	goto	l7138
  6404  10CE  0844               	movf	___fldiv@f3+3,w
  6405  10CF  00A8               	movwf	___flpack@arg+3
  6406  10D0  0843               	movf	___fldiv@f3+2,w
  6407  10D1  00A7               	movwf	___flpack@arg+2
  6408  10D2  0842               	movf	___fldiv@f3+1,w
  6409  10D3  00A6               	movwf	___flpack@arg+1
  6410  10D4  0841               	movf	___fldiv@f3,w
  6411  10D5  00A5               	movwf	___flpack@arg
  6412  10D6  0846               	movf	___fldiv@exp,w
  6413  10D7  00BC               	movwf	??___fldiv
  6414  10D8  083C               	movf	??___fldiv,w
  6415  10D9  00A9               	movwf	___flpack@exp
  6416  10DA  0847               	movf	___fldiv@sign,w
  6417  10DB  00BD               	movwf	??___fldiv+1
  6418  10DC  083D               	movf	??___fldiv+1,w
  6419  10DD  00AA               	movwf	___flpack@sign
  6420  10DE  319F  2727         	fcall	___flpack
  6421  10E0  0020               	movlb	0	; select bank0
  6422  10E1  0828               	movf	?___flpack+3,w
  6423  10E2  00B7               	movwf	?___fldiv+3
  6424  10E3  0827               	movf	?___flpack+2,w
  6425  10E4  00B6               	movwf	?___fldiv+2
  6426  10E5  0826               	movf	?___flpack+1,w
  6427  10E6  00B5               	movwf	?___fldiv+1
  6428  10E7  0825               	movf	?___flpack,w
  6429  10E8  00B4               	movwf	?___fldiv
  6430  10E9  0008               	return
  6431  10EA                     __end_of___fldiv:	
  6432                           
  6433                           	psect	text6
  6434  1F27                     __ptext6:	
  6435 ;; *************** function ___flpack *****************
  6436 ;; Defined at:
  6437 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  arg             4    5[BANK0 ] unsigned long 
  6440 ;;  exp             1    9[BANK0 ] unsigned char 
  6441 ;;  sign            1   10[BANK0 ] unsigned char 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  4    5[BANK0 ] unsigned char 
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, status,0
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6453 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;Total ram usage:       10 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    3
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		___fldiv
  6464 ;;		___flmul
  6465 ;;		___lwtofl
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function ___flpack
  6471  1F27                     ___flpack:	
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6475  1F27  0020               	movlb	0	; select bank0
  6476  1F28  0829               	movf	___flpack@exp,w
  6477  1F29  1903               	btfsc	3,2
  6478  1F2A  2F31               	goto	l6528
  6479  1F2B  0828               	movf	___flpack@arg+3,w
  6480  1F2C  0427               	iorwf	___flpack@arg+2,w
  6481  1F2D  0426               	iorwf	___flpack@arg+1,w
  6482  1F2E  0425               	iorwf	___flpack@arg,w
  6483  1F2F  1D03               	skipz
  6484  1F30  2F45               	goto	l6534
  6485  1F31                     l6528:	
  6486  1F31  3000               	movlw	0
  6487  1F32  00A8               	movwf	?___flpack+3
  6488  1F33  3000               	movlw	0
  6489  1F34  00A7               	movwf	?___flpack+2
  6490  1F35  3000               	movlw	0
  6491  1F36  00A6               	movwf	?___flpack+1
  6492  1F37  3000               	movlw	0
  6493  1F38  00A5               	movwf	?___flpack
  6494  1F39  0008               	return
  6495  1F3A                     l6532:	
  6496  1F3A  3001               	movlw	1
  6497  1F3B  00AB               	movwf	??___flpack
  6498  1F3C  082B               	movf	??___flpack,w
  6499  1F3D  07A9               	addwf	___flpack@exp,f
  6500  1F3E  3001               	movlw	1
  6501  1F3F                     u8475:	
  6502  1F3F  36A8               	lsrf	___flpack@arg+3,f
  6503  1F40  0CA7               	rrf	___flpack@arg+2,f
  6504  1F41  0CA6               	rrf	___flpack@arg+1,f
  6505  1F42  0CA5               	rrf	___flpack@arg,f
  6506  1F43  0B89               	decfsz	9,f
  6507  1F44  2F3F               	goto	u8475
  6508  1F45                     l6534:	
  6509  1F45  30FE               	movlw	254
  6510  1F46  0528               	andwf	___flpack@arg+3,w
  6511  1F47  1903               	btfsc	3,2
  6512  1F48  2F5D               	goto	l1269
  6513  1F49  2F3A               	goto	l6532
  6514  1F4A                     l6536:	
  6515  1F4A  3001               	movlw	1
  6516  1F4B  00AB               	movwf	??___flpack
  6517  1F4C  082B               	movf	??___flpack,w
  6518  1F4D  07A9               	addwf	___flpack@exp,f
  6519  1F4E  3001               	movlw	1
  6520  1F4F  07A5               	addwf	___flpack@arg,f
  6521  1F50  3000               	movlw	0
  6522  1F51  3DA6               	addwfc	___flpack@arg+1,f
  6523  1F52  3000               	movlw	0
  6524  1F53  3DA7               	addwfc	___flpack@arg+2,f
  6525  1F54  3000               	movlw	0
  6526  1F55  3DA8               	addwfc	___flpack@arg+3,f
  6527  1F56  3001               	movlw	1
  6528  1F57                     u8495:	
  6529  1F57  36A8               	lsrf	___flpack@arg+3,f
  6530  1F58  0CA7               	rrf	___flpack@arg+2,f
  6531  1F59  0CA6               	rrf	___flpack@arg+1,f
  6532  1F5A  0CA5               	rrf	___flpack@arg,f
  6533  1F5B  0B89               	decfsz	9,f
  6534  1F5C  2F57               	goto	u8495
  6535  1F5D                     l1269:	
  6536  1F5D  30FF               	movlw	255
  6537  1F5E  0528               	andwf	___flpack@arg+3,w
  6538  1F5F  1903               	btfsc	3,2
  6539  1F60  2F6B               	goto	l6544
  6540  1F61  2F4A               	goto	l6536
  6541  1F62                     l6542:	
  6542  1F62  3001               	movlw	1
  6543  1F63  02A9               	subwf	___flpack@exp,f
  6544  1F64  3001               	movlw	1
  6545  1F65                     u8515:	
  6546  1F65  35A5               	lslf	___flpack@arg,f
  6547  1F66  0DA6               	rlf	___flpack@arg+1,f
  6548  1F67  0DA7               	rlf	___flpack@arg+2,f
  6549  1F68  0DA8               	rlf	___flpack@arg+3,f
  6550  1F69  0B89               	decfsz	9,f
  6551  1F6A  2F65               	goto	u8515
  6552  1F6B                     l6544:	
  6553  1F6B  1FA7               	btfss	___flpack@arg+2,7
  6554  1F6C  2F62               	goto	l6542
  6555  1F6D  1829               	btfsc	___flpack@exp,0
  6556  1F6E  2F77               	goto	l1275
  6557  1F6F  30FF               	movlw	255
  6558  1F70  05A5               	andwf	___flpack@arg,f
  6559  1F71  30FF               	movlw	255
  6560  1F72  05A6               	andwf	___flpack@arg+1,f
  6561  1F73  307F               	movlw	127
  6562  1F74  05A7               	andwf	___flpack@arg+2,f
  6563  1F75  30FF               	movlw	255
  6564  1F76  05A8               	andwf	___flpack@arg+3,f
  6565  1F77                     l1275:	
  6566  1F77  1003               	clrc
  6567  1F78  0CA9               	rrf	___flpack@exp,f
  6568  1F79  0829               	movf	___flpack@exp,w
  6569  1F7A  00AB               	movwf	??___flpack
  6570  1F7B  01AC               	clrf	??___flpack+1
  6571  1F7C  01AD               	clrf	??___flpack+2
  6572  1F7D  01AE               	clrf	??___flpack+3
  6573  1F7E  3018               	movlw	24
  6574  1F7F                     u8545:	
  6575  1F7F  35AB               	lslf	??___flpack,f
  6576  1F80  0DAC               	rlf	??___flpack+1,f
  6577  1F81  0DAD               	rlf	??___flpack+2,f
  6578  1F82  0DAE               	rlf	??___flpack+3,f
  6579  1F83  0B89               	decfsz	9,f
  6580  1F84  2F7F               	goto	u8545
  6581  1F85  082B               	movf	??___flpack,w
  6582  1F86  04A5               	iorwf	___flpack@arg,f
  6583  1F87  082C               	movf	??___flpack+1,w
  6584  1F88  04A6               	iorwf	___flpack@arg+1,f
  6585  1F89  082D               	movf	??___flpack+2,w
  6586  1F8A  04A7               	iorwf	___flpack@arg+2,f
  6587  1F8B  082E               	movf	??___flpack+3,w
  6588  1F8C  04A8               	iorwf	___flpack@arg+3,f
  6589  1F8D  082A               	movf	___flpack@sign,w
  6590  1F8E  1903               	btfsc	3,2
  6591  1F8F  0008               	return
  6592  1F90  17A8               	bsf	___flpack@arg+3,7
  6593  1F91  0008               	return
  6594  1F92                     __end_of___flpack:	
  6595                           
  6596                           	psect	text7
  6597  1B97                     __ptext7:	
  6598 ;; *************** function _InternalADC_Read *****************
  6599 ;; Defined at:
  6600 ;;		line 41 in file "ADC.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  channel         1    wreg     unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  channel         1   19[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  2   15[BANK0 ] unsigned int 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        5 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    4
  6621 ;; This function calls:
  6622 ;;		_delayUS
  6623 ;; This function is called by:
  6624 ;;		_ReadVoltage
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _InternalADC_Read
  6630  1B97                     _InternalADC_Read:	
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6634                           ;InternalADC_Read@channel stored from wreg
  6635  1B97  0020               	movlb	0	; select bank0
  6636  1B98  00B3               	movwf	InternalADC_Read@channel
  6637                           
  6638                           ;ADC.c: 43: ADCON0 =0;
  6639  1B99  0021               	movlb	1	; select bank1
  6640  1B9A  019D               	clrf	29	;volatile
  6641                           
  6642                           ;ADC.c: 44: ADCON1 =0;
  6643  1B9B  019E               	clrf	30	;volatile
  6644                           
  6645                           ;ADC.c: 45: ADCON1 |= 0b01010000;
  6646  1B9C  3050               	movlw	80
  6647  1B9D  0020               	movlb	0	; select bank0
  6648  1B9E  00B1               	movwf	??_InternalADC_Read
  6649  1B9F  0831               	movf	??_InternalADC_Read,w
  6650  1BA0  0021               	movlb	1	; select bank1
  6651  1BA1  049E               	iorwf	30,f	;volatile
  6652                           
  6653                           ;ADC.c: 46: FVRCON |= 0b10000000;
  6654  1BA2  0022               	movlb	2	; select bank2
  6655  1BA3  1797               	bsf	23,7	;volatile
  6656                           
  6657                           ;ADC.c: 47: FVRCON |= 0x01;
  6658  1BA4  1417               	bsf	23,0	;volatile
  6659  1BA5                     l1056:	
  6660                           ;ADC.c: 48: while(!(FVRCON & 0b01000000));
  6661                           
  6662  1BA5  1F17               	btfss	23,6	;volatile
  6663  1BA6  2BA5               	goto	l1056
  6664                           
  6665                           ;ADC.c: 49: ADCON0 |= (channel << 2);
  6666  1BA7  0020               	movlb	0	; select bank0
  6667  1BA8  0833               	movf	InternalADC_Read@channel,w
  6668  1BA9  00B1               	movwf	??_InternalADC_Read
  6669  1BAA  3001               	movlw	1
  6670  1BAB                     u9835:	
  6671  1BAB  35B1               	lslf	??_InternalADC_Read,f
  6672  1BAC  3EFF               	addlw	-1
  6673  1BAD  1D03               	skipz
  6674  1BAE  2BAB               	goto	u9835
  6675  1BAF  3531               	lslf	??_InternalADC_Read,w
  6676  1BB0  00B2               	movwf	??_InternalADC_Read+1
  6677  1BB1  0832               	movf	??_InternalADC_Read+1,w
  6678  1BB2  0021               	movlb	1	; select bank1
  6679  1BB3  049D               	iorwf	29,f	;volatile
  6680                           
  6681                           ;ADC.c: 50: ADCON1 |= 0b10000011;
  6682  1BB4  3083               	movlw	131
  6683  1BB5  0020               	movlb	0	; select bank0
  6684  1BB6  00B1               	movwf	??_InternalADC_Read
  6685  1BB7  0831               	movf	??_InternalADC_Read,w
  6686  1BB8  0021               	movlb	1	; select bank1
  6687  1BB9  049E               	iorwf	30,f	;volatile
  6688                           
  6689                           ;ADC.c: 51: ADCON0 |= 0b00000001;
  6690  1BBA  141D               	bsf	29,0	;volatile
  6691                           
  6692                           ;ADC.c: 52: (PIE1bits.ADIE=0);
  6693  1BBB  1311               	bcf	17,6	;volatile
  6694                           
  6695                           ;ADC.c: 53: delayUS(5);
  6696  1BBC  3000               	movlw	0
  6697  1BBD  0020               	movlb	0	; select bank0
  6698  1BBE  00A8               	movwf	delayUS@US+3
  6699  1BBF  3000               	movlw	0
  6700  1BC0  00A7               	movwf	delayUS@US+2
  6701  1BC1  3000               	movlw	0
  6702  1BC2  00A6               	movwf	delayUS@US+1
  6703  1BC3  3005               	movlw	5
  6704  1BC4  00A5               	movwf	delayUS@US
  6705  1BC5  319B  2323  319B   	fcall	_delayUS
  6706                           
  6707                           ;ADC.c: 54: ADCON0 |= 0b00000010;
  6708  1BC8  0021               	movlb	1	; select bank1
  6709  1BC9  149D               	bsf	29,1	;volatile
  6710  1BCA                     l1059:	
  6711                           ;ADC.c: 55: while(ADCON0 & 0b00000010);
  6712                           
  6713  1BCA  189D               	btfsc	29,1	;volatile
  6714  1BCB  2BCA               	goto	l1059
  6715                           
  6716                           ;ADC.c: 56: return ((ADRESH << 8) + ADRESL);
  6717  1BCC  081C               	movf	28,w	;volatile
  6718  1BCD  0020               	movlb	0	; select bank0
  6719  1BCE  01B0               	clrf	?_InternalADC_Read+1
  6720  1BCF  07B0               	addwf	?_InternalADC_Read+1,f
  6721  1BD0  0021               	movlb	1	; select bank1
  6722  1BD1  081B               	movf	27,w	;volatile
  6723  1BD2  0020               	movlb	0	; select bank0
  6724  1BD3  01AF               	clrf	?_InternalADC_Read
  6725  1BD4  07AF               	addwf	?_InternalADC_Read,f
  6726  1BD5  0008               	return
  6727  1BD6                     __end_of_InternalADC_Read:	
  6728                           
  6729                           	psect	text8
  6730  07F8                     __ptext8:	
  6731 ;; *************** function _DisableInternalADC *****************
  6732 ;; Defined at:
  6733 ;;		line 58 in file "ADC.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;		None               void
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        1 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    3
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_ReadVoltage
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _DisableInternalADC
  6763  07F8                     _DisableInternalADC:	
  6764                           
  6765                           ;ADC.c: 60: ADCON0 &= ~0b00000001;
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6769  07F8  30FE               	movlw	254
  6770  07F9  0020               	movlb	0	; select bank0
  6771  07FA  00A5               	movwf	??_DisableInternalADC
  6772  07FB  0825               	movf	??_DisableInternalADC,w
  6773  07FC  0021               	movlb	1	; select bank1
  6774  07FD  059D               	andwf	29,f	;volatile
  6775  07FE  0008               	return
  6776  07FF                     __end_of_DisableInternalADC:	
  6777                           
  6778                           	psect	text9
  6779  18F7                     __ptext9:	
  6780 ;; *************** function _PS_2_INIT *****************
  6781 ;; Defined at:
  6782 ;;		line 88 in file "PS_2.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    4
  6803 ;; This function calls:
  6804 ;;		_Clock_TRIS
  6805 ;;		_Data_TRIS
  6806 ;;		_INIT_PS_2_INTERRUPT
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _PS_2_INIT
  6814  18F7                     _PS_2_INIT:	
  6815                           
  6816                           ;PS_2.c: 91: Clock_TRIS(1);
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6820  18F7  3001               	movlw	1
  6821  18F8  3198  20CA  3198   	fcall	_Clock_TRIS
  6822                           
  6823                           ;PS_2.c: 92: Data_TRIS(1);
  6824  18FB  3001               	movlw	1
  6825  18FC  3198  20D5  3198   	fcall	_Data_TRIS
  6826                           
  6827                           ;PS_2.c: 93: INIT_PS_2_INTERRUPT(0b00100000);
  6828  18FF  3020               	movlw	32
  6829  1900  3199  211F         	fcall	_INIT_PS_2_INTERRUPT
  6830  1902  0008               	return
  6831  1903                     __end_of_PS_2_INIT:	
  6832                           
  6833                           	psect	text10
  6834  191F                     __ptext10:	
  6835 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6836 ;; Defined at:
  6837 ;;		line 123 in file "PS_2.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  DATA_CLK        1    wreg     unsigned char 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, status,2
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;Total ram usage:        1 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    3
  6858 ;; This function calls:
  6859 ;;		Nothing
  6860 ;; This function is called by:
  6861 ;;		_PS_2_INIT
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           
  6866                           ;psect for function _INIT_PS_2_INTERRUPT
  6867  191F                     _INIT_PS_2_INTERRUPT:	
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6871                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6872  191F  0020               	movlb	0	; select bank0
  6873  1920  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6874                           
  6875                           ;PS_2.c: 125: IOCAP =0;
  6876  1921  0027               	movlb	7	; select bank7
  6877  1922  0191               	clrf	17	;volatile
  6878                           
  6879                           ;PS_2.c: 126: IOCAN =0;
  6880  1923  0192               	clrf	18	;volatile
  6881                           
  6882                           ;PS_2.c: 127: if(DATA_CLK == 0b00100000)
  6883  1924  0020               	movlb	0	; select bank0
  6884  1925  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6885  1926  3A20               	xorlw	32
  6886  1927  1D03               	skipz
  6887  1928  292C               	goto	l679
  6888                           
  6889                           ;PS_2.c: 128: {
  6890                           ;PS_2.c: 131: IOCAN |= 0b00100000;
  6891  1929  0027               	movlb	7	; select bank7
  6892  192A  1692               	bsf	18,5	;volatile
  6893                           
  6894                           ;PS_2.c: 132: }
  6895  192B  0008               	return
  6896  192C                     l679:	
  6897                           
  6898                           ;PS_2.c: 133: else
  6899                           ;PS_2.c: 134: {
  6900                           ;PS_2.c: 137: IOCAN |= 0b00010000;
  6901  192C  0027               	movlb	7	; select bank7
  6902  192D  1612               	bsf	18,4	;volatile
  6903  192E  0008               	return
  6904  192F                     __end_of_INIT_PS_2_INTERRUPT:	
  6905                           
  6906                           	psect	text11
  6907  1DAA                     __ptext11:	
  6908 ;; *************** function _Keyboard_Connected *****************
  6909 ;; Defined at:
  6910 ;;		line 1057 in file "PS_2.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  i               4   65[BANK0 ] unsigned long 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      unsigned char 
  6917 ;; Registers used:
  6918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;Total ram usage:        4 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    9
  6931 ;; This function calls:
  6932 ;;		_PS_2_DISABLE_INTERRUPT
  6933 ;;		_PS_2_ENABLE_INTERRUPT
  6934 ;;		_PS_2_Update
  6935 ;;		_Send_PS2
  6936 ;;		_delayUS
  6937 ;; This function is called by:
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _Keyboard_Connected
  6944  1DAA                     _Keyboard_Connected:	
  6945                           
  6946                           ;PS_2.c: 1059: unsigned long i=0;
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6950  1DAA  3000               	movlw	0
  6951  1DAB  0020               	movlb	0	; select bank0
  6952  1DAC  00E4               	movwf	Keyboard_Connected@i+3
  6953  1DAD  3000               	movlw	0
  6954  1DAE  00E3               	movwf	Keyboard_Connected@i+2
  6955  1DAF  3000               	movlw	0
  6956  1DB0  00E2               	movwf	Keyboard_Connected@i+1
  6957  1DB1  3000               	movlw	0
  6958  1DB2  00E1               	movwf	Keyboard_Connected@i
  6959                           
  6960                           ;PS_2.c: 1060: ECHO =0;
  6961  1DB3  0021               	movlb	1	; select bank1
  6962  1DB4  01E9               	clrf	_ECHO^(0+128)	;volatile
  6963                           
  6964                           ;PS_2.c: 1061: Send_PS2(0xEE);
  6965  1DB5  30EE               	movlw	238
  6966  1DB6  318C  24A9  319D   	fcall	_Send_PS2
  6967                           
  6968                           ;PS_2.c: 1062: PS_2_ENABLE_INTERRUPT(0b00100000);
  6969  1DB9  3020               	movlw	32
  6970  1DBA  3199  21B0  319D   	fcall	_PS_2_ENABLE_INTERRUPT
  6971                           
  6972                           ;PS_2.c: 1063: for(i=0;i<8000;i++)
  6973  1DBD  3000               	movlw	0
  6974  1DBE  0020               	movlb	0	; select bank0
  6975  1DBF  00E4               	movwf	Keyboard_Connected@i+3
  6976  1DC0  3000               	movlw	0
  6977  1DC1  00E3               	movwf	Keyboard_Connected@i+2
  6978  1DC2  3000               	movlw	0
  6979  1DC3  00E2               	movwf	Keyboard_Connected@i+1
  6980  1DC4  3000               	movlw	0
  6981  1DC5  00E1               	movwf	Keyboard_Connected@i
  6982  1DC6  2DD0               	goto	L4
  6983  1DC7                     l7280:	
  6984                           ;PS_2.c: 1068: {
  6985                           ;PS_2.c: 1069: break;
  6986                           
  6987  1DC7  3001               	movlw	1
  6988  1DC8  0020               	movlb	0	; select bank0
  6989  1DC9  07E1               	addwf	Keyboard_Connected@i,f
  6990  1DCA  3000               	movlw	0
  6991  1DCB  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6992  1DCC  3000               	movlw	0
  6993  1DCD  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6994  1DCE  3000               	movlw	0
  6995  1DCF  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6996  1DD0                     L4:	
  6997  1DD0  3000               	movlw	0
  6998  1DD1  0264               	subwf	Keyboard_Connected@i+3,w
  6999  1DD2  1D03               	skipz
  7000  1DD3  2DDE               	goto	u10115
  7001  1DD4  3000               	movlw	0
  7002  1DD5  0263               	subwf	Keyboard_Connected@i+2,w
  7003  1DD6  1D03               	skipz
  7004  1DD7  2DDE               	goto	u10115
  7005  1DD8  301F               	movlw	31
  7006  1DD9  0262               	subwf	Keyboard_Connected@i+1,w
  7007  1DDA  1D03               	skipz
  7008  1DDB  2DDE               	goto	u10115
  7009  1DDC  3040               	movlw	64
  7010  1DDD  0261               	subwf	Keyboard_Connected@i,w
  7011  1DDE                     u10115:	
  7012  1DDE  1803               	btfsc	3,0
  7013  1DDF  2DF3               	goto	l7282
  7014                           
  7015                           ;PS_2.c: 1064: {
  7016                           ;PS_2.c: 1065: PS_2_Update();
  7017  1DE0  3181  2115  319D   	fcall	_PS_2_Update
  7018                           
  7019                           ;PS_2.c: 1066: delayUS(10);
  7020  1DE3  3000               	movlw	0
  7021  1DE4  0020               	movlb	0	; select bank0
  7022  1DE5  00A8               	movwf	delayUS@US+3
  7023  1DE6  3000               	movlw	0
  7024  1DE7  00A7               	movwf	delayUS@US+2
  7025  1DE8  3000               	movlw	0
  7026  1DE9  00A6               	movwf	delayUS@US+1
  7027  1DEA  300A               	movlw	10
  7028  1DEB  00A5               	movwf	delayUS@US
  7029  1DEC  319B  2323  319D   	fcall	_delayUS
  7030                           
  7031                           ;PS_2.c: 1067: if(ECHO)
  7032  1DEF  0021               	movlb	1	; select bank1
  7033  1DF0  0869               	movf	_ECHO^(0+128),w	;volatile
  7034  1DF1  1903               	btfsc	3,2
  7035  1DF2  2DC7               	goto	l7280
  7036  1DF3                     l7282:	
  7037                           
  7038                           ;PS_2.c: 1070: }
  7039                           ;PS_2.c: 1071: }
  7040                           ;PS_2.c: 1072: PS_2_DISABLE_INTERRUPT(0b00100000);
  7041  1DF3  3020               	movlw	32
  7042  1DF4  3199  21DD  319D   	fcall	_PS_2_DISABLE_INTERRUPT
  7043                           
  7044                           ;PS_2.c: 1073: if(ECHO)
  7045  1DF7  0021               	movlb	1	; select bank1
  7046  1DF8  0869               	movf	_ECHO^(0+128),w	;volatile
  7047  1DF9  1903               	btfsc	3,2
  7048  1DFA  2DFD               	goto	l7292
  7049                           
  7050                           ;PS_2.c: 1074: {
  7051                           ;PS_2.c: 1075: return 1;
  7052  1DFB  3001               	movlw	1
  7053                           
  7054                           ;PS_2.c: 1076: }
  7055  1DFC  0008               	return
  7056  1DFD                     l7292:	
  7057                           
  7058                           ;PS_2.c: 1077: else
  7059                           ;PS_2.c: 1078: {
  7060                           ;PS_2.c: 1079: return 0;
  7061  1DFD  3000               	movlw	0
  7062  1DFE  0008               	return
  7063  1DFF                     __end_of_Keyboard_Connected:	
  7064                           
  7065                           	psect	text12
  7066  0115                     __ptext12:	
  7067 ;; *************** function _PS_2_Update *****************
  7068 ;; Defined at:
  7069 ;;		line 212 in file "PS_2.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;		None
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  buf            60    0[BANK5 ] unsigned char [60]
  7074 ;;  temp            1   64[BANK5 ] unsigned char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;		None               void
  7077 ;; Registers used:
  7078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  7086 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  7088 ;;Total ram usage:       74 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    8
  7091 ;; This function calls:
  7092 ;;		_CheckSum_byte
  7093 ;;		_Decode_Scan_Code
  7094 ;;		_Decode_Scan_Code_Function
  7095 ;;		_Decode_Scan_Code_FunctionE0
  7096 ;;		_Decode_Scan_Code_Shift
  7097 ;;		_ISNUMBER
  7098 ;;		_PS_2_DISABLE_INTERRUPT
  7099 ;;		_PS_2_ENABLE_INTERRUPT
  7100 ;;		_Reverse_Byte
  7101 ;;		_Send_PS2
  7102 ;;		_SetBaud
  7103 ;;		_UART_send_break
  7104 ;;		_UARTchar
  7105 ;;		_UARTstringWAIT
  7106 ;;		___lmul
  7107 ;;		_delayUS
  7108 ;;		_sprintf
  7109 ;; This function is called by:
  7110 ;;		_main
  7111 ;;		_Keyboard_Connected
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _PS_2_Update
  7117  0115                     _PS_2_Update:	
  7118                           
  7119                           ;PS_2.c: 214: unsigned char temp =0;
  7120                           
  7121                           ;incstack = 0
  7122                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7123  0115  0025               	movlb	5	; select bank5
  7124  0116  01E0               	clrf	PS_2_Update@temp^(0+640)
  7125                           
  7126                           ;PS_2.c: 215: unsigned char buf[60];
  7127                           ;PS_2.c: 217: if(Read_Timer < 20)
  7128  0117  3000               	movlw	0
  7129  0118  0022               	movlb	2	; select bank2
  7130  0119  026E               	subwf	(_Read_Timer+1)^(0+256),w
  7131  011A  3014               	movlw	20
  7132  011B  1903               	skipnz
  7133  011C  026D               	subwf	_Read_Timer^(0+256),w
  7134  011D  1803               	skipnc
  7135  011E  2924               	goto	l6560
  7136                           
  7137                           ;PS_2.c: 218: {
  7138                           ;PS_2.c: 219: Read_Timer++;
  7139  011F  3001               	movlw	1
  7140  0120  07ED               	addwf	_Read_Timer^(0+256),f
  7141  0121  3000               	movlw	0
  7142  0122  3DEE               	addwfc	(_Read_Timer+1)^(0+256),f
  7143                           
  7144                           ;PS_2.c: 220: }
  7145  0123  2926               	goto	l6562
  7146  0124                     l6560:	
  7147                           
  7148                           ;PS_2.c: 221: else
  7149                           ;PS_2.c: 222: {
  7150                           ;PS_2.c: 223: PS_2_bits = 0;
  7151  0124  0020               	movlb	0	; select bank0
  7152  0125  01E8               	clrf	_PS_2_bits
  7153  0126                     l6562:	
  7154                           
  7155                           ;PS_2.c: 224: }
  7156                           ;PS_2.c: 226: if(Read_Timer == 20 && PS_2_bits != 0)
  7157  0126  3014               	movlw	20
  7158  0127  0022               	movlb	2	; select bank2
  7159  0128  066D               	xorwf	_Read_Timer^(0+256),w
  7160  0129  046E               	iorwf	(_Read_Timer+1)^(0+256),w
  7161  012A  1D03               	skipz
  7162  012B  0008               	return
  7163  012C  0020               	movlb	0	; select bank0
  7164  012D  0868               	movf	_PS_2_bits,w
  7165  012E  1903               	btfsc	3,2
  7166  012F  0008               	return
  7167                           
  7168                           ;PS_2.c: 227: {
  7169                           ;PS_2.c: 229: PS_2_DISABLE_INTERRUPT(0b00100000);
  7170  0130  3020               	movlw	32
  7171  0131  3199  21DD  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7172                           
  7173                           ;PS_2.c: 230: PIE1bits.RCIE = 0;
  7174  0134  0021               	movlb	1	; select bank1
  7175  0135  1291               	bcf	17,5	;volatile
  7176                           
  7177                           ;PS_2.c: 232: if(PS_2_bits >= 11)
  7178  0136  300B               	movlw	11
  7179  0137  0020               	movlb	0	; select bank0
  7180  0138  0268               	subwf	_PS_2_bits,w
  7181  0139  1C03               	skipc
  7182  013A  2992               	goto	l6582
  7183                           
  7184                           ;PS_2.c: 233: {
  7185                           ;PS_2.c: 236: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7186  013B  0024               	movlb	4	; select bank4
  7187  013C  0832               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7188  013D  0023               	movlb	3	; select bank3
  7189  013E  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7190  013F  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7191  0140  0024               	movlb	4	; select bank4
  7192  0141  0831               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7193  0142  0023               	movlb	3	; select bank3
  7194  0143  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7195  0144  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7196                           
  7197                           ;PS_2.c: 237: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7198  0145  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7199  0146  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7200  0147  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7201  0148  00AF               	movwf	??_PS_2_Update^(0+384)
  7202  0149  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7203  014A  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7204  014B  3001               	movlw	1
  7205  014C  052F               	andwf	??_PS_2_Update^(0+384),w
  7206  014D  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7207  014E  3000               	movlw	0
  7208  014F  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7209  0150  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7210  0151  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7211  0152  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7212  0153  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7213  0154  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7214  0155  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7215  0156  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7216  0157  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7217  0158  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7218  0159  30FF               	movlw	255
  7219  015A  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7220  015B  0020               	movlb	0	; select bank0
  7221  015C  00A5               	movwf	CheckSum_byte@This
  7222  015D  3000               	movlw	0
  7223  015E  0023               	movlb	3	; select bank3
  7224  015F  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7225  0160  0020               	movlb	0	; select bank0
  7226  0161  00A6               	movwf	CheckSum_byte@This+1
  7227  0162  3003               	movlw	3
  7228  0163  0023               	movlb	3	; select bank3
  7229  0164  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7230  0165  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7231  0166  0020               	movlb	0	; select bank0
  7232  0167  00A7               	movwf	CheckSum_byte@Odd_Even
  7233  0168  319A  225C  3181   	fcall	_CheckSum_byte
  7234  016B  0023               	movlb	3	; select bank3
  7235  016C  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7236  016D  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7237  016E  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7238  016F  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7239  0170  1D03               	skipz
  7240  0171  2974               	goto	u8605
  7241  0172  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7242  0173  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7243  0174                     u8605:	
  7244  0174  1D03               	skipz
  7245  0175  2990               	goto	l6580
  7246                           
  7247                           ;PS_2.c: 238: {
  7248                           ;PS_2.c: 240: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7249  0176  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7250  0177  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7251  0178  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7252  0179  00AF               	movwf	??_PS_2_Update^(0+384)
  7253  017A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7254  017B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7255  017C  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7256  017D  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7257  017E  30FF               	movlw	255
  7258  017F  052F               	andwf	??_PS_2_Update^(0+384),w
  7259  0180  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7260  0181  3000               	movlw	0
  7261  0182  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7262  0183  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7263                           
  7264                           ;PS_2.c: 241: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7265  0184  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7266  0185  319D  2555  3181   	fcall	_Reverse_Byte
  7267  0188  0023               	movlb	3	; select bank3
  7268  0189  00AF               	movwf	??_PS_2_Update^(0+384)
  7269  018A  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7270  018B  082F               	movf	??_PS_2_Update^(0+384),w
  7271  018C  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7272  018D  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7273  018E  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7274                           
  7275                           ;PS_2.c: 242: }
  7276  018F  2992               	goto	l6582
  7277  0190                     l6580:	
  7278                           
  7279                           ;PS_2.c: 243: else
  7280                           ;PS_2.c: 244: {
  7281                           ;PS_2.c: 246: PS_2_Read_Data_First =0;
  7282  0190  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7283  0191  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7284  0192                     l6582:	
  7285                           
  7286                           ;PS_2.c: 247: }
  7287                           ;PS_2.c: 248: }
  7288                           ;PS_2.c: 249: if(PS_2_bits >= (22))
  7289  0192  3016               	movlw	22
  7290  0193  0020               	movlb	0	; select bank0
  7291  0194  0268               	subwf	_PS_2_bits,w
  7292  0195  1C03               	skipc
  7293  0196  29F0               	goto	l6594
  7294                           
  7295                           ;PS_2.c: 250: {
  7296                           ;PS_2.c: 253: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7297  0197  0024               	movlb	4	; select bank4
  7298  0198  0836               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7299  0199  0023               	movlb	3	; select bank3
  7300  019A  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7301  019B  07A9               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7302  019C  0024               	movlb	4	; select bank4
  7303  019D  0835               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7304  019E  0023               	movlb	3	; select bank3
  7305  019F  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7306  01A0  07A8               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7307                           
  7308                           ;PS_2.c: 254: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7309  01A1  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7310  01A2  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7311  01A3  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7312  01A4  00AF               	movwf	??_PS_2_Update^(0+384)
  7313  01A5  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7314  01A6  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7315  01A7  3001               	movlw	1
  7316  01A8  052F               	andwf	??_PS_2_Update^(0+384),w
  7317  01A9  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7318  01AA  3000               	movlw	0
  7319  01AB  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7320  01AC  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7321  01AD  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7322  01AE  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7323  01AF  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7324  01B0  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7325  01B1  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7326  01B2  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7327  01B3  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7328  01B4  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7329  01B5  30FF               	movlw	255
  7330  01B6  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7331  01B7  0020               	movlb	0	; select bank0
  7332  01B8  00A5               	movwf	CheckSum_byte@This
  7333  01B9  3000               	movlw	0
  7334  01BA  0023               	movlb	3	; select bank3
  7335  01BB  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7336  01BC  0020               	movlb	0	; select bank0
  7337  01BD  00A6               	movwf	CheckSum_byte@This+1
  7338  01BE  3003               	movlw	3
  7339  01BF  0023               	movlb	3	; select bank3
  7340  01C0  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7341  01C1  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7342  01C2  0020               	movlb	0	; select bank0
  7343  01C3  00A7               	movwf	CheckSum_byte@Odd_Even
  7344  01C4  319A  225C  3181   	fcall	_CheckSum_byte
  7345  01C7  0023               	movlb	3	; select bank3
  7346  01C8  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7347  01C9  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7348  01CA  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7349  01CB  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7350  01CC  1D03               	skipz
  7351  01CD  29D0               	goto	u8625
  7352  01CE  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7353  01CF  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7354  01D0                     u8625:	
  7355  01D0  1D03               	skipz
  7356  01D1  29EC               	goto	l6592
  7357                           
  7358                           ;PS_2.c: 255: {
  7359                           ;PS_2.c: 257: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7360  01D2  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7361  01D3  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7362  01D4  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7363  01D5  00AF               	movwf	??_PS_2_Update^(0+384)
  7364  01D6  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7365  01D7  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7366  01D8  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7367  01D9  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7368  01DA  30FF               	movlw	255
  7369  01DB  052F               	andwf	??_PS_2_Update^(0+384),w
  7370  01DC  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7371  01DD  3000               	movlw	0
  7372  01DE  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7373  01DF  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7374                           
  7375                           ;PS_2.c: 258: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7376  01E0  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7377  01E1  319D  2555  3181   	fcall	_Reverse_Byte
  7378  01E4  0023               	movlb	3	; select bank3
  7379  01E5  00AF               	movwf	??_PS_2_Update^(0+384)
  7380  01E6  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7381  01E7  082F               	movf	??_PS_2_Update^(0+384),w
  7382  01E8  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7383  01E9  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7384  01EA  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7385                           
  7386                           ;PS_2.c: 259: }
  7387  01EB  29F0               	goto	l6594
  7388  01EC                     l6592:	
  7389                           
  7390                           ;PS_2.c: 260: else
  7391                           ;PS_2.c: 261: {
  7392                           ;PS_2.c: 263: PS_2_Read_Data_First =0;
  7393  01EC  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7394  01ED  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7395                           
  7396                           ;PS_2.c: 264: PS_2_Read_Data_Second =0;
  7397  01EE  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7398  01EF  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7399  01F0                     l6594:	
  7400                           
  7401                           ;PS_2.c: 265: }
  7402                           ;PS_2.c: 266: }
  7403                           ;PS_2.c: 267: if(PS_2_bits >= (33))
  7404  01F0  3021               	movlw	33
  7405  01F1  0020               	movlb	0	; select bank0
  7406  01F2  0268               	subwf	_PS_2_bits,w
  7407  01F3  1C03               	skipc
  7408  01F4  2A50               	goto	l6606
  7409                           
  7410                           ;PS_2.c: 268: {
  7411                           ;PS_2.c: 271: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7412  01F5  0024               	movlb	4	; select bank4
  7413  01F6  0838               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7414  01F7  0023               	movlb	3	; select bank3
  7415  01F8  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7416  01F9  07AB               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7417  01FA  0024               	movlb	4	; select bank4
  7418  01FB  0837               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7419  01FC  0023               	movlb	3	; select bank3
  7420  01FD  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7421  01FE  07AA               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7422                           
  7423                           ;PS_2.c: 272: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7424  01FF  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7425  0200  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7426  0201  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7427  0202  00AF               	movwf	??_PS_2_Update^(0+384)
  7428  0203  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7429  0204  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7430  0205  3001               	movlw	1
  7431  0206  052F               	andwf	??_PS_2_Update^(0+384),w
  7432  0207  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7433  0208  3000               	movlw	0
  7434  0209  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7435  020A  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7436  020B  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7437  020C  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7438  020D  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7439  020E  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7440  020F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7441  0210  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7442  0211  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7443  0212  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7444  0213  30FF               	movlw	255
  7445  0214  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7446  0215  0020               	movlb	0	; select bank0
  7447  0216  00A5               	movwf	CheckSum_byte@This
  7448  0217  3000               	movlw	0
  7449  0218  0023               	movlb	3	; select bank3
  7450  0219  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7451  021A  0020               	movlb	0	; select bank0
  7452  021B  00A6               	movwf	CheckSum_byte@This+1
  7453  021C  3003               	movlw	3
  7454  021D  0023               	movlb	3	; select bank3
  7455  021E  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7456  021F  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7457  0220  0020               	movlb	0	; select bank0
  7458  0221  00A7               	movwf	CheckSum_byte@Odd_Even
  7459  0222  319A  225C  3181   	fcall	_CheckSum_byte
  7460  0225  0023               	movlb	3	; select bank3
  7461  0226  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7462  0227  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7463  0228  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7464  0229  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7465  022A  1D03               	skipz
  7466  022B  2A2E               	goto	u8645
  7467  022C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7468  022D  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7469  022E                     u8645:	
  7470  022E  1D03               	skipz
  7471  022F  2A4A               	goto	l6604
  7472                           
  7473                           ;PS_2.c: 273: {
  7474                           ;PS_2.c: 275: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7475  0230  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7476  0231  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7477  0232  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7478  0233  00AF               	movwf	??_PS_2_Update^(0+384)
  7479  0234  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7480  0235  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7481  0236  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7482  0237  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7483  0238  30FF               	movlw	255
  7484  0239  052F               	andwf	??_PS_2_Update^(0+384),w
  7485  023A  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7486  023B  3000               	movlw	0
  7487  023C  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7488  023D  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7489                           
  7490                           ;PS_2.c: 276: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7491  023E  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7492  023F  319D  2555  3181   	fcall	_Reverse_Byte
  7493  0242  0023               	movlb	3	; select bank3
  7494  0243  00AF               	movwf	??_PS_2_Update^(0+384)
  7495  0244  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7496  0245  082F               	movf	??_PS_2_Update^(0+384),w
  7497  0246  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7498  0247  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7499  0248  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7500                           
  7501                           ;PS_2.c: 277: }
  7502  0249  2A50               	goto	l6606
  7503  024A                     l6604:	
  7504                           
  7505                           ;PS_2.c: 278: else
  7506                           ;PS_2.c: 279: {
  7507                           ;PS_2.c: 281: PS_2_Read_Data_First =0;
  7508  024A  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7509  024B  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7510                           
  7511                           ;PS_2.c: 282: PS_2_Read_Data_Second =0;
  7512  024C  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7513  024D  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7514                           
  7515                           ;PS_2.c: 283: PS_2_Read_Data_Third =0;
  7516  024E  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7517  024F  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7518  0250                     l6606:	
  7519                           
  7520                           ;PS_2.c: 284: }
  7521                           ;PS_2.c: 285: }
  7522                           ;PS_2.c: 286: if(PS_2_bits >= (44))
  7523  0250  302C               	movlw	44
  7524  0251  0020               	movlb	0	; select bank0
  7525  0252  0268               	subwf	_PS_2_bits,w
  7526  0253  1C03               	skipc
  7527  0254  2AB2               	goto	l6618
  7528                           
  7529                           ;PS_2.c: 287: {
  7530                           ;PS_2.c: 290: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7531  0255  0024               	movlb	4	; select bank4
  7532  0256  0834               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7533  0257  0023               	movlb	3	; select bank3
  7534  0258  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7535  0259  07A7               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7536  025A  0024               	movlb	4	; select bank4
  7537  025B  0833               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7538  025C  0023               	movlb	3	; select bank3
  7539  025D  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7540  025E  07A6               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7541                           
  7542                           ;PS_2.c: 291: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7543  025F  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7544  0260  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7545  0261  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7546  0262  00AF               	movwf	??_PS_2_Update^(0+384)
  7547  0263  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7548  0264  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7549  0265  3001               	movlw	1
  7550  0266  052F               	andwf	??_PS_2_Update^(0+384),w
  7551  0267  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7552  0268  3000               	movlw	0
  7553  0269  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7554  026A  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7555  026B  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7556  026C  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7557  026D  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7558  026E  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7559  026F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7560  0270  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7561  0271  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7562  0272  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7563  0273  30FF               	movlw	255
  7564  0274  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7565  0275  0020               	movlb	0	; select bank0
  7566  0276  00A5               	movwf	CheckSum_byte@This
  7567  0277  3000               	movlw	0
  7568  0278  0023               	movlb	3	; select bank3
  7569  0279  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7570  027A  0020               	movlb	0	; select bank0
  7571  027B  00A6               	movwf	CheckSum_byte@This+1
  7572  027C  3003               	movlw	3
  7573  027D  0023               	movlb	3	; select bank3
  7574  027E  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7575  027F  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7576  0280  0020               	movlb	0	; select bank0
  7577  0281  00A7               	movwf	CheckSum_byte@Odd_Even
  7578  0282  319A  225C  3181   	fcall	_CheckSum_byte
  7579  0285  0023               	movlb	3	; select bank3
  7580  0286  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7581  0287  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7582  0288  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7583  0289  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7584  028A  1D03               	skipz
  7585  028B  2A8E               	goto	u8665
  7586  028C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7587  028D  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7588  028E                     u8665:	
  7589  028E  1D03               	skipz
  7590  028F  2AAA               	goto	l6616
  7591                           
  7592                           ;PS_2.c: 292: {
  7593                           ;PS_2.c: 294: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7594  0290  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7595  0291  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7596  0292  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7597  0293  00AF               	movwf	??_PS_2_Update^(0+384)
  7598  0294  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7599  0295  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7600  0296  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7601  0297  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7602  0298  30FF               	movlw	255
  7603  0299  052F               	andwf	??_PS_2_Update^(0+384),w
  7604  029A  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7605  029B  3000               	movlw	0
  7606  029C  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7607  029D  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7608                           
  7609                           ;PS_2.c: 295: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7610  029E  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7611  029F  319D  2555  3181   	fcall	_Reverse_Byte
  7612  02A2  0023               	movlb	3	; select bank3
  7613  02A3  00AF               	movwf	??_PS_2_Update^(0+384)
  7614  02A4  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7615  02A5  082F               	movf	??_PS_2_Update^(0+384),w
  7616  02A6  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7617  02A7  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7618  02A8  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7619                           
  7620                           ;PS_2.c: 296: }
  7621  02A9  2AB2               	goto	l6618
  7622  02AA                     l6616:	
  7623                           
  7624                           ;PS_2.c: 297: else
  7625                           ;PS_2.c: 298: {
  7626                           ;PS_2.c: 300: PS_2_Read_Data_First =0;
  7627  02AA  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7628  02AB  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7629                           
  7630                           ;PS_2.c: 301: PS_2_Read_Data_Second =0;
  7631  02AC  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7632  02AD  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7633                           
  7634                           ;PS_2.c: 302: PS_2_Read_Data_Third =0;
  7635  02AE  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7636  02AF  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7637                           
  7638                           ;PS_2.c: 303: PS_2_Read_Data_Forth =0;
  7639  02B0  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7640  02B1  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7641  02B2                     l6618:	
  7642                           
  7643                           ;PS_2.c: 304: }
  7644                           ;PS_2.c: 305: }
  7645                           ;PS_2.c: 307: if(PS_2_Read_Data_Forth)
  7646  02B2  0023               	movlb	3	; select bank3
  7647  02B3  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7648  02B4  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7649  02B5  1903               	skipnz
  7650  02B6  2ACD               	goto	l6630
  7651                           
  7652                           ;PS_2.c: 308: {
  7653                           ;PS_2.c: 309: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7654                           ;PS_2.c: 310: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7655  02B7  30F0               	movlw	240
  7656  02B8  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7657  02B9  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7658  02BA  1903               	skipnz
  7659  02BB  2C06               	goto	l6762
  7660  02BC  30F0               	movlw	240
  7661  02BD  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7662  02BE  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7663  02BF  1903               	skipnz
  7664  02C0  2C06               	goto	l6762
  7665  02C1  30F0               	movlw	240
  7666  02C2  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7667  02C3  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7668  02C4  1903               	skipnz
  7669  02C5  2C06               	goto	l6762
  7670  02C6  30F0               	movlw	240
  7671  02C7  0626               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7672  02C8  0427               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7673  02C9  1903               	skipnz
  7674  02CA  2C06               	goto	l6762
  7675                           
  7676                           ;PS_2.c: 311: {
  7677                           ;PS_2.c: 313: __nop();
  7678  02CB  0000               	nop
  7679                           
  7680                           ;PS_2.c: 314: }
  7681                           ;PS_2.c: 315: }
  7682  02CC  2C06               	goto	l6762
  7683  02CD                     l6630:	
  7684                           
  7685                           ;PS_2.c: 316: else if(PS_2_Read_Data_Third)
  7686  02CD  0023               	movlb	3	; select bank3
  7687  02CE  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7688  02CF  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7689  02D0  1903               	skipnz
  7690  02D1  2B22               	goto	l6666
  7691                           
  7692                           ;PS_2.c: 317: {
  7693                           ;PS_2.c: 319: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7694                           ;PS_2.c: 320: PS_2_Read_Data_First != 0xE0 &&
  7695                           ;PS_2.c: 321: PS_2_Read_Data_Second != 0xE0 &&
  7696                           ;PS_2.c: 322: PS_2_Read_Data_Third != 0xE0)
  7697  02D2  30F0               	movlw	240
  7698  02D3  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7699  02D4  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7700  02D5  1D03               	skipz
  7701  02D6  2AFD               	goto	l6650
  7702  02D7  30F0               	movlw	240
  7703  02D8  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7704  02D9  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7705  02DA  1903               	skipnz
  7706  02DB  2AFD               	goto	l6650
  7707  02DC  30E0               	movlw	224
  7708  02DD  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7709  02DE  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7710  02DF  1903               	skipnz
  7711  02E0  2AFD               	goto	l6650
  7712  02E1  30E0               	movlw	224
  7713  02E2  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7714  02E3  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7715  02E4  1903               	skipnz
  7716  02E5  2AFD               	goto	l6650
  7717  02E6  30E0               	movlw	224
  7718  02E7  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7719  02E8  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7720  02E9  1903               	skipnz
  7721  02EA  2AFD               	goto	l6650
  7722                           
  7723                           ;PS_2.c: 323: {
  7724                           ;PS_2.c: 325: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7725  02EB  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7726  02EC  3199  219D  3181   	fcall	_Decode_Scan_Code_Shift
  7727  02EF  3A00               	xorlw	0
  7728  02F0  1903               	skipnz
  7729  02F1  2AFD               	goto	l6650
  7730                           
  7731                           ;PS_2.c: 326: {
  7732                           ;PS_2.c: 328: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7733  02F2  0023               	movlb	3	; select bank3
  7734  02F3  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7735  02F4  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7736  02F5  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7737  02F6  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7738  02F7  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7739  02F8  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7740                           
  7741                           ;PS_2.c: 329: PS_2_Read_Data_Second = 0;
  7742  02F9  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7743  02FA  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7744                           
  7745                           ;PS_2.c: 330: PS_2_Read_Data_Third = 0;
  7746  02FB  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7747  02FC  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7748  02FD                     l6650:	
  7749                           
  7750                           ;PS_2.c: 331: }
  7751                           ;PS_2.c: 332: }
  7752                           ;PS_2.c: 333: if(PS_2_Read_Data_First == 0xE0)
  7753  02FD  30E0               	movlw	224
  7754  02FE  0023               	movlb	3	; select bank3
  7755  02FF  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7756  0300  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7757  0301  1D03               	skipz
  7758  0302  2C06               	goto	l6762
  7759                           
  7760                           ;PS_2.c: 334: {
  7761                           ;PS_2.c: 335: if(PS_2_Read_Data_Second == 0xF0)
  7762  0303  30F0               	movlw	240
  7763  0304  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7764  0305  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7765  0306  1D03               	skipz
  7766  0307  2C06               	goto	l6762
  7767                           
  7768                           ;PS_2.c: 336: {
  7769                           ;PS_2.c: 337: if(PS_2_Read_Data_Third == 0x11 )
  7770  0308  3011               	movlw	17
  7771  0309  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7772  030A  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7773  030B  1D03               	skipz
  7774  030C  2B10               	goto	l6658
  7775                           
  7776                           ;PS_2.c: 338: {
  7777                           ;PS_2.c: 339: LALT = 0;
  7778  030D  0022               	movlb	2	; select bank2
  7779  030E  01E7               	clrf	_LALT^(0+256)
  7780                           
  7781                           ;PS_2.c: 340: }
  7782  030F  2C06               	goto	l6762
  7783  0310                     l6658:	
  7784                           
  7785                           ;PS_2.c: 341: else if(PS_2_Read_Data_Third == 0x14 )
  7786  0310  3014               	movlw	20
  7787  0311  0023               	movlb	3	; select bank3
  7788  0312  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7789  0313  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7790  0314  1D03               	skipz
  7791  0315  2B19               	goto	l6662
  7792                           
  7793                           ;PS_2.c: 342: {
  7794                           ;PS_2.c: 343: LControl = 0;
  7795  0316  0022               	movlb	2	; select bank2
  7796  0317  01E8               	clrf	_LControl^(0+256)
  7797                           
  7798                           ;PS_2.c: 344: }
  7799  0318  2C06               	goto	l6762
  7800  0319                     l6662:	
  7801                           
  7802                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x71 )
  7803  0319  3071               	movlw	113
  7804  031A  0023               	movlb	3	; select bank3
  7805  031B  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7806  031C  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7807  031D  1D03               	skipz
  7808  031E  2C06               	goto	l6762
  7809                           
  7810                           ;PS_2.c: 346: {
  7811                           ;PS_2.c: 347: Delete = 0;
  7812  031F  0022               	movlb	2	; select bank2
  7813  0320  01E6               	clrf	_Delete^(0+256)
  7814                           
  7815                           ;PS_2.c: 348: }
  7816                           ;PS_2.c: 349: }
  7817                           ;PS_2.c: 350: }
  7818                           ;PS_2.c: 351: }
  7819  0321  2C06               	goto	l6762
  7820  0322                     l6666:	
  7821                           
  7822                           ;PS_2.c: 352: else if(PS_2_Read_Data_Second)
  7823  0322  0023               	movlb	3	; select bank3
  7824  0323  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7825  0324  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7826  0325  1903               	skipnz
  7827  0326  2C06               	goto	l6762
  7828                           
  7829                           ;PS_2.c: 353: {
  7830                           ;PS_2.c: 355: if(PS_2_Read_Data_First == 0xF0)
  7831  0327  30F0               	movlw	240
  7832  0328  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7833  0329  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7834  032A  1D03               	skipz
  7835  032B  2BAC               	goto	l6730
  7836                           
  7837                           ;PS_2.c: 356: {
  7838                           ;PS_2.c: 358: if(PS_2_Read_Data_Second == 0x12)
  7839  032C  3012               	movlw	18
  7840  032D  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7841  032E  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7842  032F  1D03               	skipz
  7843  0330  2B33               	goto	l6674
  7844                           
  7845                           ;PS_2.c: 359: {
  7846                           ;PS_2.c: 360: Right_Shift_Key =0;
  7847  0331  01AE               	clrf	_Right_Shift_Key^(0+384)
  7848                           
  7849                           ;PS_2.c: 361: }
  7850  0332  2B4C               	goto	l6686
  7851  0333                     l6674:	
  7852                           
  7853                           ;PS_2.c: 362: else if(PS_2_Read_Data_Second == 0x59)
  7854  0333  3059               	movlw	89
  7855  0334  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7856  0335  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7857  0336  1D03               	skipz
  7858  0337  2B3B               	goto	l6678
  7859                           
  7860                           ;PS_2.c: 363: {
  7861                           ;PS_2.c: 364: Left_Shift_Key =0;
  7862  0338  0020               	movlb	0	; select bank0
  7863  0339  01E6               	clrf	_Left_Shift_Key
  7864                           
  7865                           ;PS_2.c: 365: }
  7866  033A  2B4C               	goto	l6686
  7867  033B                     l6678:	
  7868                           
  7869                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x14)
  7870  033B  3014               	movlw	20
  7871  033C  0023               	movlb	3	; select bank3
  7872  033D  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7873  033E  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7874  033F  1D03               	skipz
  7875  0340  2B44               	goto	l6682
  7876                           
  7877                           ;PS_2.c: 367: {
  7878                           ;PS_2.c: 368: RControl =0;
  7879  0341  0022               	movlb	2	; select bank2
  7880  0342  01EB               	clrf	_RControl^(0+256)
  7881                           
  7882                           ;PS_2.c: 369: }
  7883  0343  2B4C               	goto	l6686
  7884  0344                     l6682:	
  7885                           
  7886                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x11 )
  7887  0344  3011               	movlw	17
  7888  0345  0023               	movlb	3	; select bank3
  7889  0346  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7890  0347  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7891  0348  1D03               	skipz
  7892  0349  2B4C               	goto	l6686
  7893                           
  7894                           ;PS_2.c: 371: {
  7895                           ;PS_2.c: 372: RALT =0;
  7896  034A  0022               	movlb	2	; select bank2
  7897  034B  01EA               	clrf	_RALT^(0+256)
  7898  034C                     l6686:	
  7899                           
  7900                           ;PS_2.c: 373: }
  7901                           ;PS_2.c: 374: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7902  034C  3059               	movlw	89
  7903  034D  0023               	movlb	3	; select bank3
  7904  034E  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7905  034F  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7906  0350  1903               	skipnz
  7907  0351  2B57               	goto	l6690
  7908  0352  3012               	movlw	18
  7909  0353  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7910  0354  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7911  0355  1D03               	skipz
  7912  0356  2BA4               	goto	l6726
  7913  0357                     l6690:	
  7914                           
  7915                           ;PS_2.c: 375: {
  7916                           ;PS_2.c: 376: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7917  0357  08AE               	movf	_Right_Shift_Key^(0+384),f
  7918  0358  1D03               	skipz
  7919  0359  2C06               	goto	l6762
  7920  035A  0020               	movlb	0	; select bank0
  7921  035B  08E6               	movf	_Left_Shift_Key,f
  7922  035C  1D03               	skipz
  7923  035D  2C06               	goto	l6762
  7924                           
  7925                           ;PS_2.c: 377: {
  7926                           ;PS_2.c: 378: if(!Send_PS2(0xED))
  7927  035E  30ED               	movlw	237
  7928  035F  318C  24A9  3181   	fcall	_Send_PS2
  7929  0362  3800               	iorlw	0
  7930  0363  1D03               	skipz
  7931  0364  2B6E               	goto	l6700
  7932                           
  7933                           ;PS_2.c: 379: {
  7934                           ;PS_2.c: 380: if(!Send_PS2(0x00))
  7935  0365  3000               	movlw	0
  7936  0366  318C  24A9  3181   	fcall	_Send_PS2
  7937  0369  3800               	iorlw	0
  7938  036A  1D03               	skipz
  7939  036B  2B6E               	goto	l6700
  7940                           
  7941                           ;PS_2.c: 381: {
  7942                           ;PS_2.c: 382: Shift_Key = 0;
  7943  036C  0020               	movlb	0	; select bank0
  7944  036D  01EA               	clrf	_Shift_Key
  7945  036E                     l6700:	
  7946                           
  7947                           ;PS_2.c: 383: }
  7948                           ;PS_2.c: 384: }
  7949                           ;PS_2.c: 385: if(Caps_Lock)
  7950  036E  0023               	movlb	3	; select bank3
  7951  036F  082D               	movf	_Caps_Lock^(0+384),w
  7952  0370  1903               	btfsc	3,2
  7953  0371  2B8B               	goto	l6714
  7954                           
  7955                           ;PS_2.c: 386: {
  7956                           ;PS_2.c: 387: CapsCount=0;
  7957  0372  01AC               	clrf	_CapsCount^(0+384)
  7958  0373                     l6712:	
  7959                           ;PS_2.c: 388: while(CapsCount<10)
  7960                           
  7961  0373  300A               	movlw	10
  7962  0374  022C               	subwf	_CapsCount^(0+384),w
  7963  0375  1803               	btfsc	3,0
  7964  0376  2C06               	goto	l6762
  7965                           
  7966                           ;PS_2.c: 389: {
  7967                           ;PS_2.c: 390: if(!Send_PS2(0xED))
  7968  0377  30ED               	movlw	237
  7969  0378  318C  24A9  3181   	fcall	_Send_PS2
  7970  037B  3800               	iorlw	0
  7971  037C  1D03               	skipz
  7972  037D  2B85               	goto	l6710
  7973                           
  7974                           ;PS_2.c: 391: {
  7975                           ;PS_2.c: 392: if(!Send_PS2(0x04))
  7976  037E  3004               	movlw	4
  7977  037F  318C  24A9  3181   	fcall	_Send_PS2
  7978  0382  3800               	iorlw	0
  7979  0383  1903               	btfsc	3,2
  7980  0384  2C06               	goto	l6762
  7981  0385                     l6710:	
  7982                           ;PS_2.c: 393: {
  7983                           ;PS_2.c: 394: break;
  7984                           
  7985                           
  7986                           ;PS_2.c: 395: }
  7987                           ;PS_2.c: 396: }
  7988                           ;PS_2.c: 397: CapsCount++;
  7989  0385  3001               	movlw	1
  7990  0386  0023               	movlb	3	; select bank3
  7991  0387  00AF               	movwf	??_PS_2_Update^(0+384)
  7992  0388  082F               	movf	??_PS_2_Update^(0+384),w
  7993  0389  07AC               	addwf	_CapsCount^(0+384),f
  7994  038A  2B73               	goto	l6712
  7995  038B                     l6714:	
  7996                           ;PS_2.c: 398: }
  7997                           ;PS_2.c: 399: }
  7998                           
  7999                           
  8000                           ;PS_2.c: 400: else
  8001                           ;PS_2.c: 401: {
  8002                           ;PS_2.c: 402: CapsCount=0;
  8003  038B  01AC               	clrf	_CapsCount^(0+384)
  8004  038C                     l6724:	
  8005                           ;PS_2.c: 403: while(CapsCount<10)
  8006                           
  8007  038C  300A               	movlw	10
  8008  038D  022C               	subwf	_CapsCount^(0+384),w
  8009  038E  1803               	btfsc	3,0
  8010  038F  2C06               	goto	l6762
  8011                           
  8012                           ;PS_2.c: 404: {
  8013                           ;PS_2.c: 405: if(!Send_PS2(0xED))
  8014  0390  30ED               	movlw	237
  8015  0391  318C  24A9  3181   	fcall	_Send_PS2
  8016  0394  3800               	iorlw	0
  8017  0395  1D03               	skipz
  8018  0396  2B9E               	goto	l6722
  8019                           
  8020                           ;PS_2.c: 406: {
  8021                           ;PS_2.c: 407: if(!Send_PS2(0x00))
  8022  0397  3000               	movlw	0
  8023  0398  318C  24A9  3181   	fcall	_Send_PS2
  8024  039B  3800               	iorlw	0
  8025  039C  1903               	btfsc	3,2
  8026  039D  2C06               	goto	l6762
  8027  039E                     l6722:	
  8028                           ;PS_2.c: 408: {
  8029                           ;PS_2.c: 409: break;
  8030                           
  8031                           
  8032                           ;PS_2.c: 410: }
  8033                           ;PS_2.c: 411: }
  8034                           ;PS_2.c: 412: CapsCount++;
  8035  039E  3001               	movlw	1
  8036  039F  0023               	movlb	3	; select bank3
  8037  03A0  00AF               	movwf	??_PS_2_Update^(0+384)
  8038  03A1  082F               	movf	??_PS_2_Update^(0+384),w
  8039  03A2  07AC               	addwf	_CapsCount^(0+384),f
  8040  03A3  2B8C               	goto	l6724
  8041  03A4                     l6726:	
  8042                           ;PS_2.c: 413: }
  8043                           ;PS_2.c: 414: }
  8044                           ;PS_2.c: 415: }
  8045                           ;PS_2.c: 416: }
  8046                           
  8047                           
  8048                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x58)
  8049  03A4  3058               	movlw	88
  8050  03A5  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8051  03A6  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8052  03A7  1D03               	skipz
  8053  03A8  2C06               	goto	l6762
  8054                           
  8055                           ;PS_2.c: 418: {
  8056                           ;PS_2.c: 419: Caps_Lock_Key = 0;
  8057  03A9  0022               	movlb	2	; select bank2
  8058  03AA  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8059                           
  8060                           ;PS_2.c: 420: }
  8061                           ;PS_2.c: 421: }
  8062  03AB  2C06               	goto	l6762
  8063  03AC                     l6730:	
  8064                           
  8065                           ;PS_2.c: 422: else if(PS_2_Read_Data_First == 0xE0)
  8066  03AC  30E0               	movlw	224
  8067  03AD  0023               	movlb	3	; select bank3
  8068  03AE  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8069  03AF  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8070  03B0  1D03               	skipz
  8071  03B1  2C06               	goto	l6762
  8072                           
  8073                           ;PS_2.c: 423: {
  8074                           ;PS_2.c: 425: if(PS_2_Read_Data_Second == 0x11 )
  8075  03B2  3011               	movlw	17
  8076  03B3  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8077  03B4  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8078  03B5  1D03               	skipz
  8079  03B6  2BBB               	goto	l6736
  8080                           
  8081                           ;PS_2.c: 426: {
  8082                           ;PS_2.c: 427: LALT = 1;
  8083  03B7  0022               	movlb	2	; select bank2
  8084  03B8  01E7               	clrf	_LALT^(0+256)
  8085  03B9  0AE7               	incf	_LALT^(0+256),f
  8086                           
  8087                           ;PS_2.c: 428: }
  8088  03BA  2BCE               	goto	l764
  8089  03BB                     l6736:	
  8090                           
  8091                           ;PS_2.c: 429: else if(PS_2_Read_Data_Second == 0x14 )
  8092  03BB  3014               	movlw	20
  8093  03BC  0023               	movlb	3	; select bank3
  8094  03BD  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8095  03BE  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8096  03BF  1D03               	skipz
  8097  03C0  2BC5               	goto	l6740
  8098                           
  8099                           ;PS_2.c: 430: {
  8100                           ;PS_2.c: 431: LControl = 1;
  8101  03C1  0022               	movlb	2	; select bank2
  8102  03C2  01E8               	clrf	_LControl^(0+256)
  8103  03C3  0AE8               	incf	_LControl^(0+256),f
  8104                           
  8105                           ;PS_2.c: 432: }
  8106  03C4  2BCE               	goto	l764
  8107  03C5                     l6740:	
  8108                           
  8109                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x71 )
  8110  03C5  3071               	movlw	113
  8111  03C6  0023               	movlb	3	; select bank3
  8112  03C7  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8113  03C8  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8114  03C9  1D03               	skipz
  8115  03CA  2BCE               	goto	l764
  8116                           
  8117                           ;PS_2.c: 434: {
  8118                           ;PS_2.c: 435: Delete = 1;
  8119  03CB  0022               	movlb	2	; select bank2
  8120  03CC  01E6               	clrf	_Delete^(0+256)
  8121  03CD  0AE6               	incf	_Delete^(0+256),f
  8122  03CE                     l764:	
  8123                           
  8124                           ;PS_2.c: 436: }
  8125                           ;PS_2.c: 437: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8126  03CE  0025               	movlb	5	; select bank5
  8127  03CF  01DC               	clrf	_PS_2_Update$854^(0+640)
  8128  03D0  0ADC               	incf	_PS_2_Update$854^(0+640),f
  8129  03D1  0022               	movlb	2	; select bank2
  8130  03D2  08E7               	movf	_LALT^(0+256),f
  8131  03D3  1D03               	skipz
  8132  03D4  2BDA               	goto	l6750
  8133  03D5  08EA               	movf	_RALT^(0+256),f
  8134  03D6  1D03               	skipz
  8135  03D7  2BDA               	goto	l6750
  8136  03D8  0025               	movlb	5	; select bank5
  8137  03D9  01DC               	clrf	_PS_2_Update$854^(0+640)
  8138  03DA                     l6750:	
  8139  03DA  0025               	movlb	5	; select bank5
  8140  03DB  01DD               	clrf	_PS_2_Update$855^(0+640)
  8141  03DC  0ADD               	incf	_PS_2_Update$855^(0+640),f
  8142  03DD  0022               	movlb	2	; select bank2
  8143  03DE  08EB               	movf	_RControl^(0+256),f
  8144  03DF  1D03               	skipz
  8145  03E0  2BE6               	goto	l6758
  8146  03E1  08E8               	movf	_LControl^(0+256),f
  8147  03E2  1D03               	skipz
  8148  03E3  2BE6               	goto	l6758
  8149  03E4  0025               	movlb	5	; select bank5
  8150  03E5  01DD               	clrf	_PS_2_Update$855^(0+640)
  8151  03E6                     l6758:	
  8152  03E6  0022               	movlb	2	; select bank2
  8153  03E7  0866               	movf	_Delete^(0+256),w
  8154  03E8  0023               	movlb	3	; select bank3
  8155  03E9  00AF               	movwf	??_PS_2_Update^(0+384)
  8156  03EA  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8157  03EB  0025               	movlb	5	; select bank5
  8158  03EC  085D               	movf	_PS_2_Update$855^(0+640),w
  8159  03ED  075C               	addwf	_PS_2_Update$854^(0+640),w
  8160  03EE  0023               	movlb	3	; select bank3
  8161  03EF  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8162  03F0  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8163  03F1  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8164  03F2  082F               	movf	??_PS_2_Update^(0+384),w
  8165  03F3  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8166  03F4  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8167  03F5  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8168  03F6  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8169  03F7  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8170  03F8  3003               	movlw	3
  8171  03F9  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8172  03FA  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8173  03FB  1903               	skipnz
  8174  03FC  2C06               	goto	l6762
  8175                           
  8176                           ;PS_2.c: 438: {
  8177                           ;PS_2.c: 440: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8178  03FD  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  8179  03FE  3199  218A  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8180  0401  0023               	movlb	3	; select bank3
  8181  0402  00AF               	movwf	??_PS_2_Update^(0+384)
  8182  0403  082F               	movf	??_PS_2_Update^(0+384),w
  8183  0404  0025               	movlb	5	; select bank5
  8184  0405  00E0               	movwf	PS_2_Update@temp^(0+640)
  8185  0406                     l6762:	
  8186                           
  8187                           ;PS_2.c: 441: }
  8188                           ;PS_2.c: 442: }
  8189                           ;PS_2.c: 443: }
  8190                           ;PS_2.c: 444: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8191                           ;PS_2.c: 445: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8192  0406  0023               	movlb	3	; select bank3
  8193  0407  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8194  0408  0424               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8195  0409  1903               	skipnz
  8196  040A  2D6B               	goto	l6912
  8197  040B  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8198  040C  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8199  040D  1D03               	skipz
  8200  040E  2D6B               	goto	l6912
  8201  040F  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8202  0410  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8203  0411  1D03               	skipz
  8204  0412  2D6B               	goto	l6912
  8205  0413  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8206  0414  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8207  0415  1D03               	skipz
  8208  0416  2D6B               	goto	l6912
  8209                           
  8210                           ;PS_2.c: 446: {
  8211                           ;PS_2.c: 448: if(PS_2_Read_Data_First == 0x12)
  8212  0417  3012               	movlw	18
  8213  0418  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8214  0419  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8215  041A  1D03               	skipz
  8216  041B  2C1F               	goto	l6774
  8217                           
  8218                           ;PS_2.c: 449: {
  8219                           ;PS_2.c: 450: Right_Shift_Key = 1;
  8220  041C  01AE               	clrf	_Right_Shift_Key^(0+384)
  8221  041D  0AAE               	incf	_Right_Shift_Key^(0+384),f
  8222                           
  8223                           ;PS_2.c: 451: }
  8224  041E  2C27               	goto	l6778
  8225  041F                     l6774:	
  8226                           
  8227                           ;PS_2.c: 452: else if(PS_2_Read_Data_First == 0x59)
  8228  041F  3059               	movlw	89
  8229  0420  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8230  0421  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8231  0422  1D03               	skipz
  8232  0423  2C27               	goto	l6778
  8233                           
  8234                           ;PS_2.c: 453: {
  8235                           ;PS_2.c: 454: Left_Shift_Key = 1;
  8236  0424  0020               	movlb	0	; select bank0
  8237  0425  01E6               	clrf	_Left_Shift_Key
  8238  0426  0AE6               	incf	_Left_Shift_Key,f
  8239  0427                     l6778:	
  8240                           
  8241                           ;PS_2.c: 455: }
  8242                           ;PS_2.c: 456: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8243  0427  0023               	movlb	3	; select bank3
  8244  0428  082E               	movf	_Right_Shift_Key^(0+384),w
  8245  0429  3A01               	xorlw	1
  8246  042A  1D03               	skipz
  8247  042B  2C30               	goto	l6782
  8248  042C  0022               	movlb	2	; select bank2
  8249  042D  086C               	movf	_Right_Shift_Key_old^(0+256),w
  8250  042E  1903               	btfsc	3,2
  8251  042F  2C39               	goto	l6786
  8252  0430                     l6782:	
  8253  0430  0020               	movlb	0	; select bank0
  8254  0431  0866               	movf	_Left_Shift_Key,w
  8255  0432  3A01               	xorlw	1
  8256  0433  1D03               	skipz
  8257  0434  2C79               	goto	l6814
  8258  0435  0022               	movlb	2	; select bank2
  8259  0436  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8260  0437  1D03               	skipz
  8261  0438  2C79               	goto	l6814
  8262  0439                     l6786:	
  8263                           
  8264                           ;PS_2.c: 457: {
  8265                           ;PS_2.c: 459: if(!Send_PS2(0xED))
  8266  0439  30ED               	movlw	237
  8267  043A  318C  24A9  3181   	fcall	_Send_PS2
  8268  043D  3800               	iorlw	0
  8269  043E  1D03               	skipz
  8270  043F  2C79               	goto	l6814
  8271                           
  8272                           ;PS_2.c: 460: {
  8273                           ;PS_2.c: 461: if(Caps_Lock)
  8274  0440  0023               	movlb	3	; select bank3
  8275  0441  082D               	movf	_Caps_Lock^(0+384),w
  8276  0442  1903               	btfsc	3,2
  8277  0443  2C5D               	goto	l6802
  8278                           
  8279                           ;PS_2.c: 462: {
  8280                           ;PS_2.c: 463: CapsCount=0;
  8281  0444  01AC               	clrf	_CapsCount^(0+384)
  8282  0445                     l6800:	
  8283                           ;PS_2.c: 464: while(CapsCount<10)
  8284                           
  8285  0445  300A               	movlw	10
  8286  0446  022C               	subwf	_CapsCount^(0+384),w
  8287  0447  1803               	btfsc	3,0
  8288  0448  2C79               	goto	l6814
  8289                           
  8290                           ;PS_2.c: 465: {
  8291                           ;PS_2.c: 466: if(!Send_PS2(0xED))
  8292  0449  30ED               	movlw	237
  8293  044A  318C  24A9  3181   	fcall	_Send_PS2
  8294  044D  3800               	iorlw	0
  8295  044E  1D03               	skipz
  8296  044F  2C57               	goto	l6798
  8297                           
  8298                           ;PS_2.c: 467: {
  8299                           ;PS_2.c: 468: if(!Send_PS2(0x05))
  8300  0450  3005               	movlw	5
  8301  0451  318C  24A9  3181   	fcall	_Send_PS2
  8302  0454  3800               	iorlw	0
  8303  0455  1903               	btfsc	3,2
  8304  0456  2C76               	goto	l6808
  8305  0457                     l6798:	
  8306                           ;PS_2.c: 471: break;
  8307                           
  8308                           ;PS_2.c: 469: {
  8309                           ;PS_2.c: 470: Shift_Key = 1;
  8310                           
  8311                           
  8312                           ;PS_2.c: 472: }
  8313                           ;PS_2.c: 473: }
  8314                           ;PS_2.c: 474: CapsCount++;
  8315  0457  3001               	movlw	1
  8316  0458  0023               	movlb	3	; select bank3
  8317  0459  00AF               	movwf	??_PS_2_Update^(0+384)
  8318  045A  082F               	movf	??_PS_2_Update^(0+384),w
  8319  045B  07AC               	addwf	_CapsCount^(0+384),f
  8320  045C  2C45               	goto	l6800
  8321  045D                     l6802:	
  8322                           ;PS_2.c: 475: }
  8323                           ;PS_2.c: 476: }
  8324                           
  8325                           
  8326                           ;PS_2.c: 477: else
  8327                           ;PS_2.c: 478: {
  8328                           ;PS_2.c: 479: CapsCount=0;
  8329  045D  01AC               	clrf	_CapsCount^(0+384)
  8330                           
  8331                           ;PS_2.c: 480: while(CapsCount<10)
  8332  045E  2C64               	goto	l6812
  8333  045F                     l6810:	
  8334                           ;PS_2.c: 487: break;
  8335                           
  8336                           
  8337                           ;PS_2.c: 488: }
  8338                           ;PS_2.c: 489: }
  8339                           ;PS_2.c: 490: CapsCount++;
  8340  045F  3001               	movlw	1
  8341  0460  0023               	movlb	3	; select bank3
  8342  0461  00AF               	movwf	??_PS_2_Update^(0+384)
  8343  0462  082F               	movf	??_PS_2_Update^(0+384),w
  8344  0463  07AC               	addwf	_CapsCount^(0+384),f
  8345  0464                     l6812:	
  8346  0464  300A               	movlw	10
  8347  0465  022C               	subwf	_CapsCount^(0+384),w
  8348  0466  1803               	btfsc	3,0
  8349  0467  2C79               	goto	l6814
  8350                           
  8351                           ;PS_2.c: 481: {
  8352                           ;PS_2.c: 482: if(!Send_PS2(0xED))
  8353  0468  30ED               	movlw	237
  8354  0469  318C  24A9  3181   	fcall	_Send_PS2
  8355  046C  3800               	iorlw	0
  8356  046D  1D03               	skipz
  8357  046E  2C5F               	goto	l6810
  8358                           
  8359                           ;PS_2.c: 483: {
  8360                           ;PS_2.c: 484: if(!Send_PS2(0x01))
  8361  046F  3001               	movlw	1
  8362  0470  318C  24A9  3181   	fcall	_Send_PS2
  8363  0473  3800               	iorlw	0
  8364  0474  1D03               	skipz
  8365  0475  2C5F               	goto	l6810
  8366  0476                     l6808:	
  8367                           
  8368                           ;PS_2.c: 485: {
  8369                           ;PS_2.c: 486: Shift_Key = 1;
  8370  0476  0020               	movlb	0	; select bank0
  8371  0477  01EA               	clrf	_Shift_Key
  8372  0478  0AEA               	incf	_Shift_Key,f
  8373  0479                     l6814:	
  8374                           
  8375                           ;PS_2.c: 491: }
  8376                           ;PS_2.c: 492: }
  8377                           ;PS_2.c: 493: }
  8378                           ;PS_2.c: 494: }
  8379                           ;PS_2.c: 495: if(PS_2_Read_Data_First == 0x14 )
  8380  0479  3014               	movlw	20
  8381  047A  0023               	movlb	3	; select bank3
  8382  047B  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8383  047C  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8384  047D  1D03               	skipz
  8385  047E  2C83               	goto	l6818
  8386                           
  8387                           ;PS_2.c: 496: {
  8388                           ;PS_2.c: 497: RControl = 1;
  8389  047F  0022               	movlb	2	; select bank2
  8390  0480  01EB               	clrf	_RControl^(0+256)
  8391  0481  0AEB               	incf	_RControl^(0+256),f
  8392                           
  8393                           ;PS_2.c: 498: }
  8394  0482  2D6B               	goto	l6912
  8395  0483                     l6818:	
  8396                           
  8397                           ;PS_2.c: 499: else if(PS_2_Read_Data_First == 0x11 )
  8398  0483  3011               	movlw	17
  8399  0484  0023               	movlb	3	; select bank3
  8400  0485  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8401  0486  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8402  0487  1D03               	skipz
  8403  0488  2C8D               	goto	l6822
  8404                           
  8405                           ;PS_2.c: 500: {
  8406                           ;PS_2.c: 501: RALT = 1;
  8407  0489  0022               	movlb	2	; select bank2
  8408  048A  01EA               	clrf	_RALT^(0+256)
  8409  048B  0AEA               	incf	_RALT^(0+256),f
  8410                           
  8411                           ;PS_2.c: 502: }
  8412  048C  2D6B               	goto	l6912
  8413  048D                     l6822:	
  8414                           
  8415                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0xEE )
  8416  048D  30EE               	movlw	238
  8417  048E  0023               	movlb	3	; select bank3
  8418  048F  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8419  0490  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8420  0491  1D03               	skipz
  8421  0492  2C99               	goto	l6826
  8422                           
  8423                           ;PS_2.c: 504: {
  8424                           ;PS_2.c: 505: ECHO = 1;
  8425  0493  3001               	movlw	1
  8426  0494  00AF               	movwf	??_PS_2_Update^(0+384)
  8427  0495  082F               	movf	??_PS_2_Update^(0+384),w
  8428  0496  0021               	movlb	1	; select bank1
  8429  0497  00E9               	movwf	_ECHO^(0+128)	;volatile
  8430                           
  8431                           ;PS_2.c: 506: }
  8432  0498  2D6B               	goto	l6912
  8433  0499                     l6826:	
  8434                           
  8435                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0x58)
  8436  0499  3058               	movlw	88
  8437  049A  0023               	movlb	3	; select bank3
  8438  049B  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8439  049C  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8440  049D  1D03               	skipz
  8441  049E  2D20               	goto	l6886
  8442                           
  8443                           ;PS_2.c: 508: {
  8444                           ;PS_2.c: 509: Caps_Lock_Key = 1;
  8445  049F  0022               	movlb	2	; select bank2
  8446  04A0  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8447  04A1  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8448                           
  8449                           ;PS_2.c: 510: if(Caps_Lock_Key_old == 0)
  8450  04A2  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8451  04A3  1D03               	skipz
  8452  04A4  2D6B               	goto	l6912
  8453                           
  8454                           ;PS_2.c: 511: {
  8455                           ;PS_2.c: 512: if(Caps_Lock)
  8456  04A5  0023               	movlb	3	; select bank3
  8457  04A6  082D               	movf	_Caps_Lock^(0+384),w
  8458  04A7  1903               	btfsc	3,2
  8459  04A8  2CE4               	goto	l6860
  8460                           
  8461                           ;PS_2.c: 513: {
  8462                           ;PS_2.c: 514: if(Shift_Key)
  8463  04A9  0020               	movlb	0	; select bank0
  8464  04AA  086A               	movf	_Shift_Key,w
  8465  04AB  1903               	btfsc	3,2
  8466  04AC  2CC7               	goto	l6848
  8467                           
  8468                           ;PS_2.c: 515: {
  8469                           ;PS_2.c: 516: CapsCount=0;
  8470  04AD  0023               	movlb	3	; select bank3
  8471  04AE  01AC               	clrf	_CapsCount^(0+384)
  8472  04AF                     l6846:	
  8473                           ;PS_2.c: 517: while(CapsCount<10)
  8474                           
  8475  04AF  300A               	movlw	10
  8476  04B0  022C               	subwf	_CapsCount^(0+384),w
  8477  04B1  1803               	btfsc	3,0
  8478  04B2  2D6B               	goto	l6912
  8479                           
  8480                           ;PS_2.c: 518: {
  8481                           ;PS_2.c: 519: if(!Send_PS2(0xED))
  8482  04B3  30ED               	movlw	237
  8483  04B4  318C  24A9  3181   	fcall	_Send_PS2
  8484  04B7  3800               	iorlw	0
  8485  04B8  1D03               	skipz
  8486  04B9  2CC1               	goto	l6844
  8487                           
  8488                           ;PS_2.c: 520: {
  8489                           ;PS_2.c: 521: if(!Send_PS2(0x01))
  8490  04BA  3001               	movlw	1
  8491  04BB  318C  24A9  3181   	fcall	_Send_PS2
  8492  04BE  3800               	iorlw	0
  8493  04BF  1903               	btfsc	3,2
  8494  04C0  2CDB               	goto	l6854
  8495  04C1                     l6844:	
  8496                           ;PS_2.c: 524: break;
  8497                           
  8498                           ;PS_2.c: 522: {
  8499                           ;PS_2.c: 523: Caps_Lock =0;
  8500                           
  8501                           
  8502                           ;PS_2.c: 525: }
  8503                           ;PS_2.c: 526: }
  8504                           ;PS_2.c: 527: CapsCount++;
  8505  04C1  3001               	movlw	1
  8506  04C2  0023               	movlb	3	; select bank3
  8507  04C3  00AF               	movwf	??_PS_2_Update^(0+384)
  8508  04C4  082F               	movf	??_PS_2_Update^(0+384),w
  8509  04C5  07AC               	addwf	_CapsCount^(0+384),f
  8510  04C6  2CAF               	goto	l6846
  8511  04C7                     l6848:	
  8512                           ;PS_2.c: 528: }
  8513                           ;PS_2.c: 529: }
  8514                           
  8515                           
  8516                           ;PS_2.c: 530: else
  8517                           ;PS_2.c: 531: {
  8518                           ;PS_2.c: 532: CapsCount=0;
  8519  04C7  0023               	movlb	3	; select bank3
  8520  04C8  01AC               	clrf	_CapsCount^(0+384)
  8521  04C9                     l6858:	
  8522                           ;PS_2.c: 533: while(CapsCount<10)
  8523                           
  8524  04C9  300A               	movlw	10
  8525  04CA  022C               	subwf	_CapsCount^(0+384),w
  8526  04CB  1803               	btfsc	3,0
  8527  04CC  2D6B               	goto	l6912
  8528                           
  8529                           ;PS_2.c: 534: {
  8530                           ;PS_2.c: 535: if(!Send_PS2(0xED))
  8531  04CD  30ED               	movlw	237
  8532  04CE  318C  24A9  3181   	fcall	_Send_PS2
  8533  04D1  3800               	iorlw	0
  8534  04D2  1D03               	skipz
  8535  04D3  2CDE               	goto	l6856
  8536                           
  8537                           ;PS_2.c: 536: {
  8538                           ;PS_2.c: 537: if(!Send_PS2(0x00))
  8539  04D4  3000               	movlw	0
  8540  04D5  318C  24A9  3181   	fcall	_Send_PS2
  8541  04D8  3800               	iorlw	0
  8542  04D9  1D03               	skipz
  8543  04DA  2CDE               	goto	l6856
  8544  04DB                     l6854:	
  8545                           
  8546                           ;PS_2.c: 538: {
  8547                           ;PS_2.c: 539: Caps_Lock =0;
  8548  04DB  0023               	movlb	3	; select bank3
  8549  04DC  01AD               	clrf	_Caps_Lock^(0+384)
  8550                           
  8551                           ;PS_2.c: 540: break;
  8552  04DD  2D6B               	goto	l6912
  8553  04DE                     l6856:	
  8554                           
  8555                           ;PS_2.c: 541: }
  8556                           ;PS_2.c: 542: }
  8557                           ;PS_2.c: 543: CapsCount++;
  8558  04DE  3001               	movlw	1
  8559  04DF  0023               	movlb	3	; select bank3
  8560  04E0  00AF               	movwf	??_PS_2_Update^(0+384)
  8561  04E1  082F               	movf	??_PS_2_Update^(0+384),w
  8562  04E2  07AC               	addwf	_CapsCount^(0+384),f
  8563  04E3  2CC9               	goto	l6858
  8564  04E4                     l6860:	
  8565                           ;PS_2.c: 544: }
  8566                           ;PS_2.c: 545: }
  8567                           ;PS_2.c: 546: }
  8568                           
  8569                           
  8570                           ;PS_2.c: 547: else
  8571                           ;PS_2.c: 548: {
  8572                           ;PS_2.c: 549: if(Shift_Key)
  8573  04E4  0020               	movlb	0	; select bank0
  8574  04E5  086A               	movf	_Shift_Key,w
  8575  04E6  1903               	btfsc	3,2
  8576  04E7  2D02               	goto	l6874
  8577                           
  8578                           ;PS_2.c: 550: {
  8579                           ;PS_2.c: 551: CapsCount=0;
  8580  04E8  0023               	movlb	3	; select bank3
  8581  04E9  01AC               	clrf	_CapsCount^(0+384)
  8582  04EA                     l6872:	
  8583                           ;PS_2.c: 552: while(CapsCount<10)
  8584                           
  8585  04EA  300A               	movlw	10
  8586  04EB  022C               	subwf	_CapsCount^(0+384),w
  8587  04EC  1803               	btfsc	3,0
  8588  04ED  2D6B               	goto	l6912
  8589                           
  8590                           ;PS_2.c: 553: {
  8591                           ;PS_2.c: 554: if(!Send_PS2(0xED))
  8592  04EE  30ED               	movlw	237
  8593  04EF  318C  24A9  3181   	fcall	_Send_PS2
  8594  04F2  3800               	iorlw	0
  8595  04F3  1D03               	skipz
  8596  04F4  2CFC               	goto	l6870
  8597                           
  8598                           ;PS_2.c: 555: {
  8599                           ;PS_2.c: 556: if(!Send_PS2(0x05))
  8600  04F5  3005               	movlw	5
  8601  04F6  318C  24A9  3181   	fcall	_Send_PS2
  8602  04F9  3800               	iorlw	0
  8603  04FA  1903               	btfsc	3,2
  8604  04FB  2D16               	goto	l6880
  8605  04FC                     l6870:	
  8606                           ;PS_2.c: 559: break;
  8607                           
  8608                           ;PS_2.c: 557: {
  8609                           ;PS_2.c: 558: Caps_Lock =1;
  8610                           
  8611                           
  8612                           ;PS_2.c: 560: }
  8613                           ;PS_2.c: 561: }
  8614                           ;PS_2.c: 562: CapsCount++;
  8615  04FC  3001               	movlw	1
  8616  04FD  0023               	movlb	3	; select bank3
  8617  04FE  00AF               	movwf	??_PS_2_Update^(0+384)
  8618  04FF  082F               	movf	??_PS_2_Update^(0+384),w
  8619  0500  07AC               	addwf	_CapsCount^(0+384),f
  8620  0501  2CEA               	goto	l6872
  8621  0502                     l6874:	
  8622                           ;PS_2.c: 563: }
  8623                           ;PS_2.c: 564: }
  8624                           
  8625                           
  8626                           ;PS_2.c: 565: else
  8627                           ;PS_2.c: 566: {
  8628                           ;PS_2.c: 567: CapsCount=0;
  8629  0502  0023               	movlb	3	; select bank3
  8630  0503  01AC               	clrf	_CapsCount^(0+384)
  8631  0504                     l6884:	
  8632                           ;PS_2.c: 568: while(CapsCount<10)
  8633                           
  8634  0504  300A               	movlw	10
  8635  0505  022C               	subwf	_CapsCount^(0+384),w
  8636  0506  1803               	btfsc	3,0
  8637  0507  2D6B               	goto	l6912
  8638                           
  8639                           ;PS_2.c: 569: {
  8640                           ;PS_2.c: 570: if(!Send_PS2(0xED))
  8641  0508  30ED               	movlw	237
  8642  0509  318C  24A9  3181   	fcall	_Send_PS2
  8643  050C  3800               	iorlw	0
  8644  050D  1D03               	skipz
  8645  050E  2D1A               	goto	l6882
  8646                           
  8647                           ;PS_2.c: 571: {
  8648                           ;PS_2.c: 572: if(!Send_PS2(0x04))
  8649  050F  3004               	movlw	4
  8650  0510  318C  24A9  3181   	fcall	_Send_PS2
  8651  0513  3800               	iorlw	0
  8652  0514  1D03               	skipz
  8653  0515  2D1A               	goto	l6882
  8654  0516                     l6880:	
  8655                           
  8656                           ;PS_2.c: 573: {
  8657                           ;PS_2.c: 574: Caps_Lock =1;
  8658  0516  0023               	movlb	3	; select bank3
  8659  0517  01AD               	clrf	_Caps_Lock^(0+384)
  8660  0518  0AAD               	incf	_Caps_Lock^(0+384),f
  8661                           
  8662                           ;PS_2.c: 575: break;
  8663  0519  2D6B               	goto	l6912
  8664  051A                     l6882:	
  8665                           
  8666                           ;PS_2.c: 576: }
  8667                           ;PS_2.c: 577: }
  8668                           ;PS_2.c: 578: CapsCount++;
  8669  051A  3001               	movlw	1
  8670  051B  0023               	movlb	3	; select bank3
  8671  051C  00AF               	movwf	??_PS_2_Update^(0+384)
  8672  051D  082F               	movf	??_PS_2_Update^(0+384),w
  8673  051E  07AC               	addwf	_CapsCount^(0+384),f
  8674  051F  2D04               	goto	l6884
  8675  0520                     l6886:	
  8676                           ;PS_2.c: 579: }
  8677                           ;PS_2.c: 580: }
  8678                           ;PS_2.c: 581: }
  8679                           ;PS_2.c: 582: }
  8680                           ;PS_2.c: 584: }
  8681                           
  8682                           
  8683                           ;PS_2.c: 585: else
  8684                           ;PS_2.c: 586: {
  8685                           ;PS_2.c: 587: if(Shift_Key ==1)
  8686  0520  0020               	movlb	0	; select bank0
  8687  0521  086A               	movf	_Shift_Key,w
  8688  0522  3A01               	xorlw	1
  8689  0523  1D03               	skipz
  8690  0524  2D43               	goto	l6898
  8691                           
  8692                           ;PS_2.c: 588: {
  8693                           ;PS_2.c: 590: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8694  0525  0023               	movlb	3	; select bank3
  8695  0526  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8696  0527  3199  219D  3181   	fcall	_Decode_Scan_Code_Shift
  8697  052A  0023               	movlb	3	; select bank3
  8698  052B  00AF               	movwf	??_PS_2_Update^(0+384)
  8699  052C  082F               	movf	??_PS_2_Update^(0+384),w
  8700  052D  0025               	movlb	5	; select bank5
  8701  052E  00E0               	movwf	PS_2_Update@temp^(0+640)
  8702                           
  8703                           ;PS_2.c: 591: if(Caps_Lock)
  8704  052F  0023               	movlb	3	; select bank3
  8705  0530  082D               	movf	_Caps_Lock^(0+384),w
  8706  0531  1903               	btfsc	3,2
  8707  0532  2D5D               	goto	l6908
  8708                           
  8709                           ;PS_2.c: 592: {
  8710                           ;PS_2.c: 594: if(temp >= 'A' && temp <= 'Z')
  8711  0533  3041               	movlw	65
  8712  0534  0025               	movlb	5	; select bank5
  8713  0535  0260               	subwf	PS_2_Update@temp^(0+640),w
  8714  0536  1C03               	skipc
  8715  0537  2D5C               	goto	l834
  8716  0538  305B               	movlw	91
  8717  0539  0260               	subwf	PS_2_Update@temp^(0+640),w
  8718  053A  1803               	skipnc
  8719  053B  2D5C               	goto	l834
  8720                           
  8721                           ;PS_2.c: 595: {
  8722                           ;PS_2.c: 596: temp += 32;
  8723  053C  3020               	movlw	32
  8724  053D  0023               	movlb	3	; select bank3
  8725  053E  00AF               	movwf	??_PS_2_Update^(0+384)
  8726  053F  082F               	movf	??_PS_2_Update^(0+384),w
  8727  0540  0025               	movlb	5	; select bank5
  8728  0541  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8729  0542  2D5C               	goto	l834
  8730  0543                     l6898:	
  8731                           ;PS_2.c: 597: }
  8732                           ;PS_2.c: 598: }
  8733                           ;PS_2.c: 599: }
  8734                           
  8735                           
  8736                           ;PS_2.c: 600: else
  8737                           ;PS_2.c: 601: {
  8738                           ;PS_2.c: 602: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8739  0543  0023               	movlb	3	; select bank3
  8740  0544  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8741  0545  3199  2177  3181   	fcall	_Decode_Scan_Code
  8742  0548  0023               	movlb	3	; select bank3
  8743  0549  00AF               	movwf	??_PS_2_Update^(0+384)
  8744  054A  082F               	movf	??_PS_2_Update^(0+384),w
  8745  054B  0025               	movlb	5	; select bank5
  8746  054C  00E0               	movwf	PS_2_Update@temp^(0+640)
  8747                           
  8748                           ;PS_2.c: 603: if(Caps_Lock)
  8749  054D  0023               	movlb	3	; select bank3
  8750  054E  082D               	movf	_Caps_Lock^(0+384),w
  8751  054F  1903               	btfsc	3,2
  8752  0550  2D5D               	goto	l6908
  8753                           
  8754                           ;PS_2.c: 604: {
  8755                           ;PS_2.c: 606: if(temp >= 'a' && temp <= 'z')
  8756  0551  3061               	movlw	97
  8757  0552  0025               	movlb	5	; select bank5
  8758  0553  0260               	subwf	PS_2_Update@temp^(0+640),w
  8759  0554  1C03               	skipc
  8760  0555  2D5C               	goto	l834
  8761  0556  307B               	movlw	123
  8762  0557  0260               	subwf	PS_2_Update@temp^(0+640),w
  8763  0558  1803               	skipnc
  8764  0559  2D5C               	goto	l834
  8765                           
  8766                           ;PS_2.c: 607: {
  8767                           ;PS_2.c: 608: temp -= 32;
  8768  055A  3020               	movlw	32
  8769  055B  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8770  055C                     l834:	
  8771  055C  0023               	movlb	3	; select bank3
  8772  055D                     l6908:	
  8773                           
  8774                           ;PS_2.c: 609: }
  8775                           ;PS_2.c: 610: }
  8776                           ;PS_2.c: 611: }
  8777                           ;PS_2.c: 612: if(!temp)
  8778  055D  0025               	movlb	5	; select bank5
  8779  055E  08E0               	movf	PS_2_Update@temp^(0+640),f
  8780  055F  1D03               	skipz
  8781  0560  2D6B               	goto	l6912
  8782                           
  8783                           ;PS_2.c: 613: {
  8784                           ;PS_2.c: 615: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8785  0561  0023               	movlb	3	; select bank3
  8786  0562  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8787  0563  3199  212F  3181   	fcall	_Decode_Scan_Code_Function
  8788  0566  0023               	movlb	3	; select bank3
  8789  0567  00AF               	movwf	??_PS_2_Update^(0+384)
  8790  0568  082F               	movf	??_PS_2_Update^(0+384),w
  8791  0569  0025               	movlb	5	; select bank5
  8792  056A  00E0               	movwf	PS_2_Update@temp^(0+640)
  8793  056B                     l6912:	
  8794                           
  8795                           ;PS_2.c: 616: }
  8796                           ;PS_2.c: 617: }
  8797                           ;PS_2.c: 618: }
  8798                           ;PS_2.c: 619: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8799  056B  0025               	movlb	5	; select bank5
  8800  056C  01DE               	clrf	_PS_2_Update$856^(0+640)
  8801  056D  0ADE               	incf	_PS_2_Update$856^(0+640),f
  8802  056E  0022               	movlb	2	; select bank2
  8803  056F  08E7               	movf	_LALT^(0+256),f
  8804  0570  1D03               	skipz
  8805  0571  2D77               	goto	l6920
  8806  0572  08EA               	movf	_RALT^(0+256),f
  8807  0573  1D03               	skipz
  8808  0574  2D77               	goto	l6920
  8809  0575  0025               	movlb	5	; select bank5
  8810  0576  01DE               	clrf	_PS_2_Update$856^(0+640)
  8811  0577                     l6920:	
  8812  0577  0025               	movlb	5	; select bank5
  8813  0578  01DF               	clrf	_PS_2_Update$857^(0+640)
  8814  0579  0ADF               	incf	_PS_2_Update$857^(0+640),f
  8815  057A  0022               	movlb	2	; select bank2
  8816  057B  08EB               	movf	_RControl^(0+256),f
  8817  057C  1D03               	skipz
  8818  057D  2D83               	goto	l6928
  8819  057E  08E8               	movf	_LControl^(0+256),f
  8820  057F  1D03               	skipz
  8821  0580  2D83               	goto	l6928
  8822  0581  0025               	movlb	5	; select bank5
  8823  0582  01DF               	clrf	_PS_2_Update$857^(0+640)
  8824  0583                     l6928:	
  8825  0583  0022               	movlb	2	; select bank2
  8826  0584  0866               	movf	_Delete^(0+256),w
  8827  0585  0023               	movlb	3	; select bank3
  8828  0586  00AF               	movwf	??_PS_2_Update^(0+384)
  8829  0587  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8830  0588  0025               	movlb	5	; select bank5
  8831  0589  085F               	movf	_PS_2_Update$857^(0+640),w
  8832  058A  075E               	addwf	_PS_2_Update$856^(0+640),w
  8833  058B  0023               	movlb	3	; select bank3
  8834  058C  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8835  058D  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8836  058E  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8837  058F  082F               	movf	??_PS_2_Update^(0+384),w
  8838  0590  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8839  0591  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8840  0592  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8841  0593  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8842  0594  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8843  0595  3003               	movlw	3
  8844  0596  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8845  0597  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8846  0598  1D03               	skipz
  8847  0599  2E15               	goto	l6968
  8848                           
  8849                           ;PS_2.c: 620: {
  8850                           ;PS_2.c: 622: UARTstringWAIT("\r\n");
  8851  059A  303D               	movlw	low ((STR_11+17)| (0+32768))
  8852  059B  0020               	movlb	0	; select bank0
  8853  059C  00B4               	movwf	UARTstringWAIT@data
  8854  059D  308C               	movlw	high ((STR_11+17)| (0+32768))
  8855  059E  00B5               	movwf	UARTstringWAIT@data+1
  8856  059F  319A  22F0  3181   	fcall	_UARTstringWAIT
  8857                           
  8858                           ;PS_2.c: 623: delayUS(10000);
  8859  05A2  3000               	movlw	0
  8860  05A3  0020               	movlb	0	; select bank0
  8861  05A4  00A8               	movwf	delayUS@US+3
  8862  05A5  3000               	movlw	0
  8863  05A6  00A7               	movwf	delayUS@US+2
  8864  05A7  3027               	movlw	39
  8865  05A8  00A6               	movwf	delayUS@US+1
  8866  05A9  3010               	movlw	16
  8867  05AA  00A5               	movwf	delayUS@US
  8868  05AB  319B  2323  3181   	fcall	_delayUS
  8869                           
  8870                           ;PS_2.c: 624: if(!BAUDMODE)
  8871  05AE  0022               	movlb	2	; select bank2
  8872  05AF  08E3               	movf	_BAUDMODE^(0+256),f
  8873  05B0  1D03               	skipz
  8874  05B1  2DDC               	goto	l6948
  8875                           
  8876                           ;PS_2.c: 625: {
  8877                           ;PS_2.c: 626: BaudTyped =0;
  8878  05B2  3000               	movlw	0
  8879  05B3  0023               	movlb	3	; select bank3
  8880  05B4  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8881  05B5  3000               	movlw	0
  8882  05B6  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8883  05B7  3000               	movlw	0
  8884  05B8  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8885  05B9  3000               	movlw	0
  8886  05BA  00A0               	movwf	_BaudTyped^(0+384)
  8887                           
  8888                           ;PS_2.c: 627: ParityTyped =0;
  8889  05BB  0020               	movlb	0	; select bank0
  8890  05BC  01E9               	clrf	_ParityTyped
  8891                           
  8892                           ;PS_2.c: 628: BAUDMODE = 1;
  8893  05BD  0022               	movlb	2	; select bank2
  8894  05BE  01E3               	clrf	_BAUDMODE^(0+256)
  8895  05BF  0AE3               	incf	_BAUDMODE^(0+256),f
  8896                           
  8897                           ;PS_2.c: 629: UARTstringWAIT("Enter Baud rate\r\n");
  8898  05C0  3066               	movlw	low (STR_26| (0+32768))
  8899  05C1  0020               	movlb	0	; select bank0
  8900  05C2  00B4               	movwf	UARTstringWAIT@data
  8901  05C3  308C               	movlw	high (STR_26| (0+32768))
  8902  05C4  00B5               	movwf	UARTstringWAIT@data+1
  8903  05C5  319A  22F0  3181   	fcall	_UARTstringWAIT
  8904                           
  8905                           ;PS_2.c: 630: delayUS(10000);
  8906  05C8  3000               	movlw	0
  8907  05C9  0020               	movlb	0	; select bank0
  8908  05CA  00A8               	movwf	delayUS@US+3
  8909  05CB  3000               	movlw	0
  8910  05CC  00A7               	movwf	delayUS@US+2
  8911  05CD  3027               	movlw	39
  8912  05CE  00A6               	movwf	delayUS@US+1
  8913  05CF  3010               	movlw	16
  8914  05D0  00A5               	movwf	delayUS@US
  8915  05D1  319B  2323  3181   	fcall	_delayUS
  8916                           
  8917                           ;PS_2.c: 631: UARTchar('>' , 0, 0);
  8918  05D4  0020               	movlb	0	; select bank0
  8919  05D5  01AD               	clrf	UARTchar@NinethBit_override
  8920  05D6  01AE               	clrf	UARTchar@NinethBit_override_data
  8921  05D7  303E               	movlw	62
  8922  05D8  319C  2463  3181   	fcall	_UARTchar
  8923                           
  8924                           ;PS_2.c: 633: }
  8925  05DB  2E0F               	goto	l6958
  8926  05DC                     l6948:	
  8927                           
  8928                           ;PS_2.c: 634: else
  8929                           ;PS_2.c: 635: {
  8930                           ;PS_2.c: 636: BaudTyped = 9600;
  8931  05DC  3000               	movlw	0
  8932  05DD  0023               	movlb	3	; select bank3
  8933  05DE  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8934  05DF  3000               	movlw	0
  8935  05E0  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8936  05E1  3025               	movlw	37
  8937  05E2  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8938  05E3  3080               	movlw	128
  8939  05E4  00A0               	movwf	_BaudTyped^(0+384)
  8940                           
  8941                           ;PS_2.c: 637: UARTstringWAIT("Reset to 9600 with no parity bit\r\n");
  8942  05E5  30D6               	movlw	low (STR_27| (0+32768))
  8943  05E6  0020               	movlb	0	; select bank0
  8944  05E7  00B4               	movwf	UARTstringWAIT@data
  8945  05E8  308A               	movlw	high (STR_27| (0+32768))
  8946  05E9  00B5               	movwf	UARTstringWAIT@data+1
  8947  05EA  319A  22F0  3181   	fcall	_UARTstringWAIT
  8948                           
  8949                           ;PS_2.c: 638: delayUS(10000);
  8950  05ED  3000               	movlw	0
  8951  05EE  0020               	movlb	0	; select bank0
  8952  05EF  00A8               	movwf	delayUS@US+3
  8953  05F0  3000               	movlw	0
  8954  05F1  00A7               	movwf	delayUS@US+2
  8955  05F2  3027               	movlw	39
  8956  05F3  00A6               	movwf	delayUS@US+1
  8957  05F4  3010               	movlw	16
  8958  05F5  00A5               	movwf	delayUS@US
  8959  05F6  319B  2323  3181   	fcall	_delayUS
  8960                           
  8961                           ;PS_2.c: 639: SetBaud(BaudTyped, 0);
  8962  05F9  0023               	movlb	3	; select bank3
  8963  05FA  0823               	movf	(_BaudTyped+3)^(0+384),w
  8964  05FB  0020               	movlb	0	; select bank0
  8965  05FC  00D7               	movwf	SetBaud@Baud+3
  8966  05FD  0023               	movlb	3	; select bank3
  8967  05FE  0822               	movf	(_BaudTyped+2)^(0+384),w
  8968  05FF  0020               	movlb	0	; select bank0
  8969  0600  00D6               	movwf	SetBaud@Baud+2
  8970  0601  0023               	movlb	3	; select bank3
  8971  0602  0821               	movf	(_BaudTyped+1)^(0+384),w
  8972  0603  0020               	movlb	0	; select bank0
  8973  0604  00D5               	movwf	SetBaud@Baud+1
  8974  0605  0023               	movlb	3	; select bank3
  8975  0606  0820               	movf	_BaudTyped^(0+384),w
  8976  0607  0020               	movlb	0	; select bank0
  8977  0608  00D4               	movwf	SetBaud@Baud
  8978  0609  01D8               	clrf	SetBaud@Parity
  8979  060A  3196  2693  3181   	fcall	_SetBaud
  8980                           
  8981                           ;PS_2.c: 640: BAUDMODE = 0;
  8982  060D  0022               	movlb	2	; select bank2
  8983  060E  01E3               	clrf	_BAUDMODE^(0+256)
  8984  060F                     l6958:	
  8985                           
  8986                           ;PS_2.c: 641: }
  8987                           ;PS_2.c: 642: RControl =0;
  8988  060F  0022               	movlb	2	; select bank2
  8989  0610  01EB               	clrf	_RControl^(0+256)
  8990                           
  8991                           ;PS_2.c: 643: LControl =0;
  8992  0611  01E8               	clrf	_LControl^(0+256)
  8993                           
  8994                           ;PS_2.c: 644: LALT =0;
  8995  0612  01E7               	clrf	_LALT^(0+256)
  8996                           
  8997                           ;PS_2.c: 645: RALT =0;
  8998  0613  01EA               	clrf	_RALT^(0+256)
  8999                           
  9000                           ;PS_2.c: 646: Delete =0;
  9001  0614  01E6               	clrf	_Delete^(0+256)
  9002  0615                     l6968:	
  9003                           
  9004                           ;PS_2.c: 647: }
  9005                           ;PS_2.c: 648: if(temp)
  9006  0615  0025               	movlb	5	; select bank5
  9007  0616  0860               	movf	PS_2_Update@temp^(0+640),w
  9008  0617  1903               	btfsc	3,2
  9009  0618  2FC5               	goto	l7062
  9010                           
  9011                           ;PS_2.c: 649: {
  9012                           ;PS_2.c: 651: if(temp == 0x01)
  9013  0619  0860               	movf	PS_2_Update@temp^(0+640),w
  9014  061A  3A01               	xorlw	1
  9015  061B  1D03               	skipz
  9016  061C  2E21               	goto	l6974
  9017                           
  9018                           ;PS_2.c: 652: {
  9019                           ;PS_2.c: 654: UART_send_break();
  9020  061D  3198  20AB  3181   	fcall	_UART_send_break
  9021  0620  2FC4               	goto	l846
  9022  0621                     l6974:	
  9023                           ;PS_2.c: 655: }
  9024                           
  9025                           
  9026                           ;PS_2.c: 656: else
  9027                           ;PS_2.c: 657: {
  9028                           ;PS_2.c: 658: if(!BAUDMODE)
  9029  0621  0022               	movlb	2	; select bank2
  9030  0622  08E3               	movf	_BAUDMODE^(0+256),f
  9031  0623  1D03               	skipz
  9032  0624  2E52               	goto	l6986
  9033                           
  9034                           ;PS_2.c: 659: {
  9035                           ;PS_2.c: 660: UARTchar(temp, 0, 0);
  9036  0625  0020               	movlb	0	; select bank0
  9037  0626  01AD               	clrf	UARTchar@NinethBit_override
  9038  0627  01AE               	clrf	UARTchar@NinethBit_override_data
  9039  0628  0025               	movlb	5	; select bank5
  9040  0629  0860               	movf	PS_2_Update@temp^(0+640),w
  9041  062A  319C  2463  3181   	fcall	_UARTchar
  9042                           
  9043                           ;PS_2.c: 661: if(temp == '\r')
  9044  062D  0025               	movlb	5	; select bank5
  9045  062E  0860               	movf	PS_2_Update@temp^(0+640),w
  9046  062F  3A0D               	xorlw	13
  9047  0630  1D03               	skipz
  9048  0631  2FC5               	goto	l7062
  9049                           
  9050                           ;PS_2.c: 662: {
  9051                           ;PS_2.c: 663: delayUS(5000);
  9052  0632  3000               	movlw	0
  9053  0633  0020               	movlb	0	; select bank0
  9054  0634  00A8               	movwf	delayUS@US+3
  9055  0635  3000               	movlw	0
  9056  0636  00A7               	movwf	delayUS@US+2
  9057  0637  3013               	movlw	19
  9058  0638  00A6               	movwf	delayUS@US+1
  9059  0639  3088               	movlw	136
  9060  063A  00A5               	movwf	delayUS@US
  9061  063B  319B  2323  3181   	fcall	_delayUS
  9062                           
  9063                           ;PS_2.c: 664: UARTchar('\n', 0, 0);
  9064  063E  0020               	movlb	0	; select bank0
  9065  063F  01AD               	clrf	UARTchar@NinethBit_override
  9066  0640  01AE               	clrf	UARTchar@NinethBit_override_data
  9067  0641  300A               	movlw	10
  9068  0642  319C  2463  3181   	fcall	_UARTchar
  9069                           
  9070                           ;PS_2.c: 665: delayUS(10000);
  9071  0645  3000               	movlw	0
  9072  0646  0020               	movlb	0	; select bank0
  9073  0647  00A8               	movwf	delayUS@US+3
  9074  0648  3000               	movlw	0
  9075  0649  00A7               	movwf	delayUS@US+2
  9076  064A  3027               	movlw	39
  9077  064B  00A6               	movwf	delayUS@US+1
  9078  064C  3010               	movlw	16
  9079  064D  00A5               	movwf	delayUS@US
  9080  064E  319B  2323  3181   	fcall	_delayUS
  9081  0651  2FC4               	goto	l846
  9082  0652                     l6986:	
  9083                           ;PS_2.c: 666: }
  9084                           ;PS_2.c: 667: }
  9085                           
  9086                           
  9087                           ;PS_2.c: 668: else
  9088                           ;PS_2.c: 669: {
  9089                           ;PS_2.c: 670: if(ISNUMBER(temp))
  9090  0652  0025               	movlb	5	; select bank5
  9091  0653  0860               	movf	PS_2_Update@temp^(0+640),w
  9092  0654  3199  2111  3181   	fcall	_ISNUMBER
  9093  0657  3A00               	xorlw	0
  9094  0658  1903               	skipnz
  9095  0659  2EA9               	goto	l6994
  9096                           
  9097                           ;PS_2.c: 671: {
  9098                           ;PS_2.c: 672: BaudTyped*=10;
  9099  065A  3000               	movlw	0
  9100  065B  0020               	movlb	0	; select bank0
  9101  065C  00A8               	movwf	___lmul@multiplier+3
  9102  065D  3000               	movlw	0
  9103  065E  00A7               	movwf	___lmul@multiplier+2
  9104  065F  3000               	movlw	0
  9105  0660  00A6               	movwf	___lmul@multiplier+1
  9106  0661  300A               	movlw	10
  9107  0662  00A5               	movwf	___lmul@multiplier
  9108  0663  0023               	movlb	3	; select bank3
  9109  0664  0823               	movf	(_BaudTyped+3)^(0+384),w
  9110  0665  0020               	movlb	0	; select bank0
  9111  0666  00AC               	movwf	___lmul@multiplicand+3
  9112  0667  0023               	movlb	3	; select bank3
  9113  0668  0822               	movf	(_BaudTyped+2)^(0+384),w
  9114  0669  0020               	movlb	0	; select bank0
  9115  066A  00AB               	movwf	___lmul@multiplicand+2
  9116  066B  0023               	movlb	3	; select bank3
  9117  066C  0821               	movf	(_BaudTyped+1)^(0+384),w
  9118  066D  0020               	movlb	0	; select bank0
  9119  066E  00AA               	movwf	___lmul@multiplicand+1
  9120  066F  0023               	movlb	3	; select bank3
  9121  0670  0820               	movf	_BaudTyped^(0+384),w
  9122  0671  0020               	movlb	0	; select bank0
  9123  0672  00A9               	movwf	___lmul@multiplicand
  9124  0673  319A  222C  3181   	fcall	___lmul
  9125  0676  0020               	movlb	0	; select bank0
  9126  0677  0828               	movf	?___lmul+3,w
  9127  0678  0023               	movlb	3	; select bank3
  9128  0679  00A3               	movwf	(_BaudTyped+3)^(0+384)
  9129  067A  0020               	movlb	0	; select bank0
  9130  067B  0827               	movf	?___lmul+2,w
  9131  067C  0023               	movlb	3	; select bank3
  9132  067D  00A2               	movwf	(_BaudTyped+2)^(0+384)
  9133  067E  0020               	movlb	0	; select bank0
  9134  067F  0826               	movf	?___lmul+1,w
  9135  0680  0023               	movlb	3	; select bank3
  9136  0681  00A1               	movwf	(_BaudTyped+1)^(0+384)
  9137  0682  0020               	movlb	0	; select bank0
  9138  0683  0825               	movf	?___lmul,w
  9139  0684  0023               	movlb	3	; select bank3
  9140  0685  00A0               	movwf	_BaudTyped^(0+384)
  9141                           
  9142                           ;PS_2.c: 673: BaudTyped += temp - 48;
  9143  0686  0025               	movlb	5	; select bank5
  9144  0687  0860               	movf	PS_2_Update@temp^(0+640),w
  9145  0688  3ED0               	addlw	208
  9146  0689  0023               	movlb	3	; select bank3
  9147  068A  00AF               	movwf	??_PS_2_Update^(0+384)
  9148  068B  30FF               	movlw	255
  9149  068C  1803               	skipnc
  9150  068D  3000               	movlw	0
  9151  068E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9152  068F  082F               	movf	??_PS_2_Update^(0+384),w
  9153  0690  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9154  0691  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9155  0692  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9156  0693  3000               	movlw	0
  9157  0694  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9158  0695  30FF               	movlw	255
  9159  0696  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9160  0697  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9161  0698  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9162  0699  07A0               	addwf	_BaudTyped^(0+384),f
  9163  069A  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9164  069B  3DA1               	addwfc	(_BaudTyped+1)^(0+384),f
  9165  069C  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9166  069D  3DA2               	addwfc	(_BaudTyped+2)^(0+384),f
  9167  069E  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9168  069F  3DA3               	addwfc	(_BaudTyped+3)^(0+384),f
  9169                           
  9170                           ;PS_2.c: 674: UARTchar(temp, 0, 0);
  9171  06A0  0020               	movlb	0	; select bank0
  9172  06A1  01AD               	clrf	UARTchar@NinethBit_override
  9173  06A2  01AE               	clrf	UARTchar@NinethBit_override_data
  9174  06A3  0025               	movlb	5	; select bank5
  9175  06A4  0860               	movf	PS_2_Update@temp^(0+640),w
  9176  06A5  319C  2463  3181   	fcall	_UARTchar
  9177  06A8  2FC4               	goto	l846
  9178  06A9                     l6994:	
  9179                           ;PS_2.c: 675: }
  9180                           
  9181                           
  9182                           ;PS_2.c: 676: else if(temp == 'o' || temp == 'O')
  9183  06A9  0025               	movlb	5	; select bank5
  9184  06AA  0860               	movf	PS_2_Update@temp^(0+640),w
  9185  06AB  3A6F               	xorlw	111
  9186  06AC  1903               	skipnz
  9187  06AD  2EB2               	goto	l854
  9188  06AE  0860               	movf	PS_2_Update@temp^(0+640),w
  9189  06AF  3A4F               	xorlw	79
  9190  06B0  1D03               	skipz
  9191  06B1  2EBD               	goto	l7000
  9192  06B2                     l854:	
  9193                           
  9194                           ;PS_2.c: 677: {
  9195                           ;PS_2.c: 678: ParityTyped = 1;
  9196  06B2  0020               	movlb	0	; select bank0
  9197  06B3  01E9               	clrf	_ParityTyped
  9198  06B4  0AE9               	incf	_ParityTyped,f
  9199                           
  9200                           ;PS_2.c: 679: UARTchar(temp, 0, 0);
  9201  06B5  01AD               	clrf	UARTchar@NinethBit_override
  9202  06B6  01AE               	clrf	UARTchar@NinethBit_override_data
  9203  06B7  0025               	movlb	5	; select bank5
  9204  06B8  0860               	movf	PS_2_Update@temp^(0+640),w
  9205  06B9  319C  2463  3181   	fcall	_UARTchar
  9206  06BC  2FC4               	goto	l846
  9207  06BD                     l7000:	
  9208                           ;PS_2.c: 680: }
  9209                           
  9210                           
  9211                           ;PS_2.c: 681: else if(temp == 'e' || temp == 'E')
  9212  06BD  0025               	movlb	5	; select bank5
  9213  06BE  0860               	movf	PS_2_Update@temp^(0+640),w
  9214  06BF  3A65               	xorlw	101
  9215  06C0  1903               	skipnz
  9216  06C1  2EC6               	goto	l7004
  9217  06C2  0860               	movf	PS_2_Update@temp^(0+640),w
  9218  06C3  3A45               	xorlw	69
  9219  06C4  1D03               	skipz
  9220  06C5  2ED4               	goto	l7008
  9221  06C6                     l7004:	
  9222                           
  9223                           ;PS_2.c: 682: {
  9224                           ;PS_2.c: 683: ParityTyped = 2;
  9225  06C6  3002               	movlw	2
  9226  06C7  0023               	movlb	3	; select bank3
  9227  06C8  00AF               	movwf	??_PS_2_Update^(0+384)
  9228  06C9  082F               	movf	??_PS_2_Update^(0+384),w
  9229  06CA  0020               	movlb	0	; select bank0
  9230  06CB  00E9               	movwf	_ParityTyped
  9231                           
  9232                           ;PS_2.c: 684: UARTchar(temp, 0, 0);
  9233  06CC  01AD               	clrf	UARTchar@NinethBit_override
  9234  06CD  01AE               	clrf	UARTchar@NinethBit_override_data
  9235  06CE  0025               	movlb	5	; select bank5
  9236  06CF  0860               	movf	PS_2_Update@temp^(0+640),w
  9237  06D0  319C  2463  3181   	fcall	_UARTchar
  9238  06D3  2FC4               	goto	l846
  9239  06D4                     l7008:	
  9240                           ;PS_2.c: 685: }
  9241                           
  9242                           
  9243                           ;PS_2.c: 686: else if(temp == 'm' || temp == 'M')
  9244  06D4  0025               	movlb	5	; select bank5
  9245  06D5  0860               	movf	PS_2_Update@temp^(0+640),w
  9246  06D6  3A6D               	xorlw	109
  9247  06D7  1903               	skipnz
  9248  06D8  2EDD               	goto	l7012
  9249  06D9  0860               	movf	PS_2_Update@temp^(0+640),w
  9250  06DA  3A4D               	xorlw	77
  9251  06DB  1D03               	skipz
  9252  06DC  2EEB               	goto	l7016
  9253  06DD                     l7012:	
  9254                           
  9255                           ;PS_2.c: 687: {
  9256                           ;PS_2.c: 688: ParityTyped = 3;
  9257  06DD  3003               	movlw	3
  9258  06DE  0023               	movlb	3	; select bank3
  9259  06DF  00AF               	movwf	??_PS_2_Update^(0+384)
  9260  06E0  082F               	movf	??_PS_2_Update^(0+384),w
  9261  06E1  0020               	movlb	0	; select bank0
  9262  06E2  00E9               	movwf	_ParityTyped
  9263                           
  9264                           ;PS_2.c: 689: UARTchar(temp, 0, 0);
  9265  06E3  01AD               	clrf	UARTchar@NinethBit_override
  9266  06E4  01AE               	clrf	UARTchar@NinethBit_override_data
  9267  06E5  0025               	movlb	5	; select bank5
  9268  06E6  0860               	movf	PS_2_Update@temp^(0+640),w
  9269  06E7  319C  2463  3181   	fcall	_UARTchar
  9270  06EA  2FC4               	goto	l846
  9271  06EB                     l7016:	
  9272                           ;PS_2.c: 690: }
  9273                           
  9274                           
  9275                           ;PS_2.c: 691: else if(temp == 's' || temp == 'S')
  9276  06EB  0025               	movlb	5	; select bank5
  9277  06EC  0860               	movf	PS_2_Update@temp^(0+640),w
  9278  06ED  3A73               	xorlw	115
  9279  06EE  1903               	skipnz
  9280  06EF  2EF4               	goto	l7020
  9281  06F0  0860               	movf	PS_2_Update@temp^(0+640),w
  9282  06F1  3A53               	xorlw	83
  9283  06F2  1D03               	skipz
  9284  06F3  2F02               	goto	l7024
  9285  06F4                     l7020:	
  9286                           
  9287                           ;PS_2.c: 692: {
  9288                           ;PS_2.c: 693: ParityTyped = 4;
  9289  06F4  3004               	movlw	4
  9290  06F5  0023               	movlb	3	; select bank3
  9291  06F6  00AF               	movwf	??_PS_2_Update^(0+384)
  9292  06F7  082F               	movf	??_PS_2_Update^(0+384),w
  9293  06F8  0020               	movlb	0	; select bank0
  9294  06F9  00E9               	movwf	_ParityTyped
  9295                           
  9296                           ;PS_2.c: 694: UARTchar(temp, 0, 0);
  9297  06FA  01AD               	clrf	UARTchar@NinethBit_override
  9298  06FB  01AE               	clrf	UARTchar@NinethBit_override_data
  9299  06FC  0025               	movlb	5	; select bank5
  9300  06FD  0860               	movf	PS_2_Update@temp^(0+640),w
  9301  06FE  319C  2463  3181   	fcall	_UARTchar
  9302  0701  2FC4               	goto	l846
  9303  0702                     l7024:	
  9304                           ;PS_2.c: 695: }
  9305                           
  9306                           
  9307                           ;PS_2.c: 696: else if(temp == '\r')
  9308  0702  0025               	movlb	5	; select bank5
  9309  0703  0860               	movf	PS_2_Update@temp^(0+640),w
  9310  0704  3A0D               	xorlw	13
  9311  0705  1D03               	skipz
  9312  0706  2FC5               	goto	l7062
  9313                           
  9314                           ;PS_2.c: 697: {
  9315                           ;PS_2.c: 698: UARTstringWAIT("\r\n");
  9316  0707  303D               	movlw	low ((STR_11+17)| (0+32768))
  9317  0708  0020               	movlb	0	; select bank0
  9318  0709  00B4               	movwf	UARTstringWAIT@data
  9319  070A  308C               	movlw	high ((STR_11+17)| (0+32768))
  9320  070B  00B5               	movwf	UARTstringWAIT@data+1
  9321  070C  319A  22F0  3181   	fcall	_UARTstringWAIT
  9322                           
  9323                           ;PS_2.c: 699: delayUS(10000);
  9324  070F  3000               	movlw	0
  9325  0710  0020               	movlb	0	; select bank0
  9326  0711  00A8               	movwf	delayUS@US+3
  9327  0712  3000               	movlw	0
  9328  0713  00A7               	movwf	delayUS@US+2
  9329  0714  3027               	movlw	39
  9330  0715  00A6               	movwf	delayUS@US+1
  9331  0716  3010               	movlw	16
  9332  0717  00A5               	movwf	delayUS@US
  9333  0718  319B  2323  3181   	fcall	_delayUS
  9334                           
  9335                           ;PS_2.c: 700: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9336  071B  3000               	movlw	0
  9337  071C  0023               	movlb	3	; select bank3
  9338  071D  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9339  071E  1D03               	skipz
  9340  071F  2F2A               	goto	u9795
  9341  0720  3000               	movlw	0
  9342  0721  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9343  0722  1D03               	skipz
  9344  0723  2F2A               	goto	u9795
  9345  0724  3009               	movlw	9
  9346  0725  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9347  0726  1D03               	skipz
  9348  0727  2F2A               	goto	u9795
  9349  0728  3060               	movlw	96
  9350  0729  0220               	subwf	_BaudTyped^(0+384),w
  9351  072A                     u9795:	
  9352  072A  1C03               	skipc
  9353  072B  2FAE               	goto	l7056
  9354  072C  3000               	movlw	0
  9355  072D  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9356  072E  1D03               	skipz
  9357  072F  2F3A               	goto	u9805
  9358  0730  3001               	movlw	1
  9359  0731  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9360  0732  1D03               	skipz
  9361  0733  2F3A               	goto	u9805
  9362  0734  30C2               	movlw	194
  9363  0735  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9364  0736  1D03               	skipz
  9365  0737  2F3A               	goto	u9805
  9366  0738  3001               	movlw	1
  9367  0739  0220               	subwf	_BaudTyped^(0+384),w
  9368  073A                     u9805:	
  9369  073A  1803               	skipnc
  9370  073B  2FAE               	goto	l7056
  9371                           
  9372                           ;PS_2.c: 701: {
  9373                           ;PS_2.c: 702: if(ParityTyped)
  9374  073C  0020               	movlb	0	; select bank0
  9375  073D  0869               	movf	_ParityTyped,w
  9376  073E  1903               	btfsc	3,2
  9377  073F  2F71               	goto	l7050
  9378                           
  9379                           ;PS_2.c: 703: {
  9380                           ;PS_2.c: 704: switch (ParityTyped)
  9381  0740  2F64               	goto	l7048
  9382  0741                     l7038:	
  9383                           ;PS_2.c: 705: {
  9384                           ;PS_2.c: 706: case 1:
  9385                           
  9386                           
  9387                           ;PS_2.c: 707: sprintf(buf,"Baud will be set to %lu with Odd parity bit\r\n",BaudTyped);
  9388  0741  30A0               	movlw	low PS_2_Update@buf
  9389  0742  00BD               	movwf	sprintf@sp
  9390  0743  3002               	movlw	high PS_2_Update@buf
  9391  0744  00BE               	movwf	sprintf@sp+1
  9392  0745  302A               	movlw	low (STR_29| (0+32768))
  9393  0746  00BF               	movwf	sprintf@f
  9394  0747  308A               	movlw	high (STR_29| (0+32768))
  9395  0748  2F78               	goto	L14
  9396  0749                     l7040:	
  9397                           ;PS_2.c: 709: case 2:
  9398                           
  9399                           ;PS_2.c: 708: break;
  9400                           
  9401                           
  9402                           ;PS_2.c: 710: sprintf(buf,"Baud will be set to %lu with Even parity bit\r\n",BaudTyped);
  9403  0749  30A0               	movlw	low PS_2_Update@buf
  9404  074A  0020               	movlb	0	; select bank0
  9405  074B  00BD               	movwf	sprintf@sp
  9406  074C  3002               	movlw	high PS_2_Update@buf
  9407  074D  00BE               	movwf	sprintf@sp+1
  9408  074E  30FB               	movlw	low (STR_30| (0+32768))
  9409  074F  00BF               	movwf	sprintf@f
  9410  0750  3089               	movlw	high (STR_30| (0+32768))
  9411  0751  2F78               	goto	L14
  9412  0752                     l7042:	
  9413                           ;PS_2.c: 712: case 3:
  9414                           
  9415                           ;PS_2.c: 711: break;
  9416                           
  9417                           
  9418                           ;PS_2.c: 713: sprintf(buf,"Baud will be set to %lu with Mark bit\r\n",BaudTyped);
  9419  0752  30A0               	movlw	low PS_2_Update@buf
  9420  0753  0020               	movlb	0	; select bank0
  9421  0754  00BD               	movwf	sprintf@sp
  9422  0755  3002               	movlw	high PS_2_Update@buf
  9423  0756  00BE               	movwf	sprintf@sp+1
  9424  0757  30AE               	movlw	low (STR_31| (0+32768))
  9425  0758  00BF               	movwf	sprintf@f
  9426  0759  308A               	movlw	high (STR_31| (0+32768))
  9427  075A  2F78               	goto	L14
  9428  075B                     l7044:	
  9429                           ;PS_2.c: 715: default:
  9430                           
  9431                           ;PS_2.c: 714: break;
  9432                           
  9433                           
  9434                           ;PS_2.c: 716: sprintf(buf,"Baud will be set to %lu with Space bit\r\n",BaudTyped);
  9435  075B  30A0               	movlw	low PS_2_Update@buf
  9436  075C  0020               	movlb	0	; select bank0
  9437  075D  00BD               	movwf	sprintf@sp
  9438  075E  3002               	movlw	high PS_2_Update@buf
  9439  075F  00BE               	movwf	sprintf@sp+1
  9440  0760  3085               	movlw	low (STR_32| (0+32768))
  9441  0761  00BF               	movwf	sprintf@f
  9442  0762  308A               	movlw	high (STR_32| (0+32768))
  9443  0763  2F78               	goto	L14
  9444  0764                     l7048:	
  9445                           ;PS_2.c: 718: }
  9446                           
  9447                           ;PS_2.c: 717: break;
  9448                           
  9449  0764  0020               	movlb	0	; select bank0
  9450  0765  0869               	movf	_ParityTyped,w
  9451                           
  9452                           ; Switch size 1, requested type "space"
  9453                           ; Number of cases is 3, Range of values is 1 to 3
  9454                           ; switch strategies available:
  9455                           ; Name         Instructions Cycles
  9456                           ; simple_byte           10     6 (average)
  9457                           ; direct_byte           15     9 (fixed)
  9458                           ; jumptable            263     9 (fixed)
  9459                           ;	Chosen strategy is simple_byte
  9460  0766  3A01               	xorlw	1	; case 1
  9461  0767  1903               	skipnz
  9462  0768  2F41               	goto	l7038
  9463  0769  3A03               	xorlw	3	; case 2
  9464  076A  1903               	skipnz
  9465  076B  2F49               	goto	l7040
  9466  076C  3A01               	xorlw	1	; case 3
  9467  076D  1903               	skipnz
  9468  076E  2F52               	goto	l7042
  9469  076F  2F5B               	goto	l7044
  9470                           
  9471                           ;PS_2.c: 719: }
  9472  0770  2F8C               	goto	l7052
  9473  0771                     l7050:	
  9474                           
  9475                           ;PS_2.c: 720: else
  9476                           ;PS_2.c: 721: {
  9477                           ;PS_2.c: 722: sprintf(buf,"Baud will be set to %lu with no parity bit\r\n",BaudTyped);
  9478  0771  30A0               	movlw	low PS_2_Update@buf
  9479  0772  00BD               	movwf	sprintf@sp
  9480  0773  3002               	movlw	high PS_2_Update@buf
  9481  0774  00BE               	movwf	sprintf@sp+1
  9482  0775  3058               	movlw	low (STR_33| (0+32768))
  9483  0776  00BF               	movwf	sprintf@f
  9484  0777  308A               	movlw	high (STR_33| (0+32768))
  9485  0778                     L14:	
  9486  0778  00C0               	movwf	sprintf@f+1
  9487  0779  0023               	movlb	3	; select bank3
  9488  077A  0823               	movf	(_BaudTyped+3)^(0+384),w
  9489  077B  0020               	movlb	0	; select bank0
  9490  077C  00C4               	movwf	?_sprintf+7
  9491  077D  0023               	movlb	3	; select bank3
  9492  077E  0822               	movf	(_BaudTyped+2)^(0+384),w
  9493  077F  0020               	movlb	0	; select bank0
  9494  0780  00C3               	movwf	?_sprintf+6
  9495  0781  0023               	movlb	3	; select bank3
  9496  0782  0821               	movf	(_BaudTyped+1)^(0+384),w
  9497  0783  0020               	movlb	0	; select bank0
  9498  0784  00C2               	movwf	?_sprintf+5
  9499  0785  0023               	movlb	3	; select bank3
  9500  0786  0820               	movf	_BaudTyped^(0+384),w
  9501  0787  0020               	movlb	0	; select bank0
  9502  0788  00C1               	movwf	?_sprintf+4
  9503  0789  3194  248F  3181   	fcall	_sprintf
  9504  078C                     l7052:	
  9505                           
  9506                           ;PS_2.c: 723: }
  9507                           ;PS_2.c: 724: UARTstringWAIT(buf);
  9508  078C  30A0               	movlw	low PS_2_Update@buf
  9509  078D  0020               	movlb	0	; select bank0
  9510  078E  00B4               	movwf	UARTstringWAIT@data
  9511  078F  3002               	movlw	high PS_2_Update@buf
  9512  0790  00B5               	movwf	UARTstringWAIT@data+1
  9513  0791  319A  22F0  3181   	fcall	_UARTstringWAIT
  9514                           
  9515                           ;PS_2.c: 725: SetBaud(BaudTyped, ParityTyped);
  9516  0794  0023               	movlb	3	; select bank3
  9517  0795  0823               	movf	(_BaudTyped+3)^(0+384),w
  9518  0796  0020               	movlb	0	; select bank0
  9519  0797  00D7               	movwf	SetBaud@Baud+3
  9520  0798  0023               	movlb	3	; select bank3
  9521  0799  0822               	movf	(_BaudTyped+2)^(0+384),w
  9522  079A  0020               	movlb	0	; select bank0
  9523  079B  00D6               	movwf	SetBaud@Baud+2
  9524  079C  0023               	movlb	3	; select bank3
  9525  079D  0821               	movf	(_BaudTyped+1)^(0+384),w
  9526  079E  0020               	movlb	0	; select bank0
  9527  079F  00D5               	movwf	SetBaud@Baud+1
  9528  07A0  0023               	movlb	3	; select bank3
  9529  07A1  0820               	movf	_BaudTyped^(0+384),w
  9530  07A2  0020               	movlb	0	; select bank0
  9531  07A3  00D4               	movwf	SetBaud@Baud
  9532  07A4  0869               	movf	_ParityTyped,w
  9533  07A5  0023               	movlb	3	; select bank3
  9534  07A6  00AF               	movwf	??_PS_2_Update^(0+384)
  9535  07A7  082F               	movf	??_PS_2_Update^(0+384),w
  9536  07A8  0020               	movlb	0	; select bank0
  9537  07A9  00D8               	movwf	SetBaud@Parity
  9538  07AA  3196  2693  3181   	fcall	_SetBaud
  9539                           
  9540                           ;PS_2.c: 726: }
  9541  07AD  2FC2               	goto	l7060
  9542  07AE                     l7056:	
  9543                           
  9544                           ;PS_2.c: 727: else
  9545                           ;PS_2.c: 728: {
  9546                           ;PS_2.c: 729: UARTstringWAIT("Baud Out of Range\r\n");
  9547  07AE  3018               	movlw	low (STR_34| (0+32768))
  9548  07AF  0020               	movlb	0	; select bank0
  9549  07B0  00B4               	movwf	UARTstringWAIT@data
  9550  07B1  308C               	movlw	high (STR_34| (0+32768))
  9551  07B2  00B5               	movwf	UARTstringWAIT@data+1
  9552  07B3  319A  22F0  3181   	fcall	_UARTstringWAIT
  9553                           
  9554                           ;PS_2.c: 730: delayUS(10000);
  9555  07B6  3000               	movlw	0
  9556  07B7  0020               	movlb	0	; select bank0
  9557  07B8  00A8               	movwf	delayUS@US+3
  9558  07B9  3000               	movlw	0
  9559  07BA  00A7               	movwf	delayUS@US+2
  9560  07BB  3027               	movlw	39
  9561  07BC  00A6               	movwf	delayUS@US+1
  9562  07BD  3010               	movlw	16
  9563  07BE  00A5               	movwf	delayUS@US
  9564  07BF  319B  2323  3181   	fcall	_delayUS
  9565  07C2                     l7060:	
  9566                           
  9567                           ;PS_2.c: 731: }
  9568                           ;PS_2.c: 732: BAUDMODE=0;
  9569  07C2  0022               	movlb	2	; select bank2
  9570  07C3  01E3               	clrf	_BAUDMODE^(0+256)
  9571  07C4                     l846:	
  9572  07C4  0025               	movlb	5	; select bank5
  9573  07C5                     l7062:	
  9574                           
  9575                           ;PS_2.c: 733: }
  9576                           ;PS_2.c: 734: }
  9577                           ;PS_2.c: 735: }
  9578                           ;PS_2.c: 736: }
  9579                           ;PS_2.c: 737: PS_2_Read_Data_First =0;
  9580  07C5  0023               	movlb	3	; select bank3
  9581  07C6  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  9582  07C7  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9583                           
  9584                           ;PS_2.c: 738: PS_2_Read_Data_Second =0;
  9585  07C8  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  9586  07C9  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9587                           
  9588                           ;PS_2.c: 739: PS_2_Read_Data_Third =0;
  9589  07CA  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  9590  07CB  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9591                           
  9592                           ;PS_2.c: 740: PS_2_Read_Data_Forth =0;
  9593  07CC  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9594  07CD  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9595                           
  9596                           ;PS_2.c: 741: PS_2_Read_Data_FirstTEMP =0;
  9597  07CE  0024               	movlb	4	; select bank4
  9598  07CF  01B1               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9599  07D0  01B2               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9600                           
  9601                           ;PS_2.c: 742: PS_2_Read_Data_SecondTEMP =0;
  9602  07D1  01B5               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9603  07D2  01B6               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9604                           
  9605                           ;PS_2.c: 743: PS_2_Read_Data_ThirdTEMP =0;
  9606  07D3  01B7               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9607  07D4  01B8               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9608                           
  9609                           ;PS_2.c: 744: PS_2_Read_Data_ForthTEMP =0;
  9610  07D5  01B3               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9611  07D6  01B4               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9612                           
  9613                           ;PS_2.c: 745: Caps_Lock_Key_old = Caps_Lock_Key;
  9614  07D7  0022               	movlb	2	; select bank2
  9615  07D8  0864               	movf	_Caps_Lock_Key^(0+256),w
  9616  07D9  0023               	movlb	3	; select bank3
  9617  07DA  00AF               	movwf	??_PS_2_Update^(0+384)
  9618  07DB  082F               	movf	??_PS_2_Update^(0+384),w
  9619  07DC  0022               	movlb	2	; select bank2
  9620  07DD  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9621                           
  9622                           ;PS_2.c: 746: Right_Shift_Key_old = Right_Shift_Key;
  9623  07DE  0023               	movlb	3	; select bank3
  9624  07DF  082E               	movf	_Right_Shift_Key^(0+384),w
  9625  07E0  00AF               	movwf	??_PS_2_Update^(0+384)
  9626  07E1  082F               	movf	??_PS_2_Update^(0+384),w
  9627  07E2  0022               	movlb	2	; select bank2
  9628  07E3  00EC               	movwf	_Right_Shift_Key_old^(0+256)
  9629                           
  9630                           ;PS_2.c: 747: Left_Shift_Key_old = Left_Shift_Key;
  9631  07E4  0020               	movlb	0	; select bank0
  9632  07E5  0866               	movf	_Left_Shift_Key,w
  9633  07E6  0023               	movlb	3	; select bank3
  9634  07E7  00AF               	movwf	??_PS_2_Update^(0+384)
  9635  07E8  082F               	movf	??_PS_2_Update^(0+384),w
  9636  07E9  0022               	movlb	2	; select bank2
  9637  07EA  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9638                           
  9639                           ;PS_2.c: 748: LATC &= ~0b00010000;
  9640  07EB  30EF               	movlw	239
  9641  07EC  0023               	movlb	3	; select bank3
  9642  07ED  00AF               	movwf	??_PS_2_Update^(0+384)
  9643  07EE  082F               	movf	??_PS_2_Update^(0+384),w
  9644  07EF  0022               	movlb	2	; select bank2
  9645  07F0  058E               	andwf	14,f	;volatile
  9646                           
  9647                           ;PS_2.c: 749: PIE1bits.RCIE = 1;
  9648  07F1  0021               	movlb	1	; select bank1
  9649  07F2  1691               	bsf	17,5	;volatile
  9650                           
  9651                           ;PS_2.c: 750: PS_2_ENABLE_INTERRUPT(0b00100000);
  9652  07F3  3020               	movlw	32
  9653  07F4  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
  9654  07F6  0020               	movlb	0	; select bank0
  9655  07F7  0008               	return
  9656  07F8                     __end_of_PS_2_Update:	
  9657                           
  9658                           	psect	text13
  9659  1A2C                     __ptext13:	
  9660 ;; *************** function ___lmul *****************
  9661 ;; Defined at:
  9662 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9665 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  product         4   13[BANK0 ] unsigned long 
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  4    5[BANK0 ] unsigned long 
  9670 ;; Registers used:
  9671 ;;		wreg, status,2, status,0
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9677 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;Total ram usage:       12 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    3
  9684 ;; This function calls:
  9685 ;;		Nothing
  9686 ;; This function is called by:
  9687 ;;		_PS_2_Update
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function ___lmul
  9693  1A2C                     ___lmul:	
  9694                           
  9695                           ;incstack = 0
  9696                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9697  1A2C  3000               	movlw	0
  9698  1A2D  0020               	movlb	0	; select bank0
  9699  1A2E  00B0               	movwf	___lmul@product+3
  9700  1A2F  3000               	movlw	0
  9701  1A30  00AF               	movwf	___lmul@product+2
  9702  1A31  3000               	movlw	0
  9703  1A32  00AE               	movwf	___lmul@product+1
  9704  1A33  3000               	movlw	0
  9705  1A34  00AD               	movwf	___lmul@product
  9706  1A35                     l6512:	
  9707  1A35  1C25               	btfss	___lmul@multiplier,0
  9708  1A36  2A3F               	goto	l6516
  9709  1A37  0829               	movf	___lmul@multiplicand,w
  9710  1A38  07AD               	addwf	___lmul@product,f
  9711  1A39  082A               	movf	___lmul@multiplicand+1,w
  9712  1A3A  3DAE               	addwfc	___lmul@product+1,f
  9713  1A3B  082B               	movf	___lmul@multiplicand+2,w
  9714  1A3C  3DAF               	addwfc	___lmul@product+2,f
  9715  1A3D  082C               	movf	___lmul@multiplicand+3,w
  9716  1A3E  3DB0               	addwfc	___lmul@product+3,f
  9717  1A3F                     l6516:	
  9718  1A3F  3001               	movlw	1
  9719  1A40                     u8425:	
  9720  1A40  35A9               	lslf	___lmul@multiplicand,f
  9721  1A41  0DAA               	rlf	___lmul@multiplicand+1,f
  9722  1A42  0DAB               	rlf	___lmul@multiplicand+2,f
  9723  1A43  0DAC               	rlf	___lmul@multiplicand+3,f
  9724  1A44  0B89               	decfsz	9,f
  9725  1A45  2A40               	goto	u8425
  9726  1A46  3001               	movlw	1
  9727  1A47                     u8435:	
  9728  1A47  36A8               	lsrf	___lmul@multiplier+3,f
  9729  1A48  0CA7               	rrf	___lmul@multiplier+2,f
  9730  1A49  0CA6               	rrf	___lmul@multiplier+1,f
  9731  1A4A  0CA5               	rrf	___lmul@multiplier,f
  9732  1A4B  0B89               	decfsz	9,f
  9733  1A4C  2A47               	goto	u8435
  9734  1A4D  0828               	movf	___lmul@multiplier+3,w
  9735  1A4E  0427               	iorwf	___lmul@multiplier+2,w
  9736  1A4F  0426               	iorwf	___lmul@multiplier+1,w
  9737  1A50  0425               	iorwf	___lmul@multiplier,w
  9738  1A51  1D03               	skipz
  9739  1A52  2A35               	goto	l6512
  9740  1A53  0830               	movf	___lmul@product+3,w
  9741  1A54  00A8               	movwf	?___lmul+3
  9742  1A55  082F               	movf	___lmul@product+2,w
  9743  1A56  00A7               	movwf	?___lmul+2
  9744  1A57  082E               	movf	___lmul@product+1,w
  9745  1A58  00A6               	movwf	?___lmul+1
  9746  1A59  082D               	movf	___lmul@product,w
  9747  1A5A  00A5               	movwf	?___lmul
  9748  1A5B  0008               	return
  9749  1A5C                     __end_of___lmul:	
  9750                           
  9751                           	psect	text14
  9752  18AB                     __ptext14:	
  9753 ;; *************** function _UART_send_break *****************
  9754 ;; Defined at:
  9755 ;;		line 248 in file "UART.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;		None
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;		None
  9760 ;; Return value:  Size  Location     Type
  9761 ;;		None               void
  9762 ;; Registers used:
  9763 ;;		wreg
  9764 ;; Tracked objects:
  9765 ;;		On entry : 0/0
  9766 ;;		On exit  : 0/0
  9767 ;;		Unchanged: 0/0
  9768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;Total ram usage:        0 bytes
  9774 ;; Hardware stack levels used:    1
  9775 ;; Hardware stack levels required when called:    3
  9776 ;; This function calls:
  9777 ;;		Nothing
  9778 ;; This function is called by:
  9779 ;;		_PS_2_Update
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783                           
  9784                           ;psect for function _UART_send_break
  9785  18AB                     _UART_send_break:	
  9786                           
  9787                           ;UART.c: 250: TX1STA |= 0b00001000;
  9788                           
  9789                           ;incstack = 0
  9790                           ; Regs used in _UART_send_break: [wreg]
  9791  18AB  0023               	movlb	3	; select bank3
  9792  18AC  159E               	bsf	30,3	;volatile
  9793                           
  9794                           ;UART.c: 251: TXREG = 'd';
  9795  18AD  3064               	movlw	100
  9796  18AE  009A               	movwf	26	;volatile
  9797  18AF  0008               	return
  9798  18B0                     __end_of_UART_send_break:	
  9799                           
  9800                           	psect	text15
  9801  1693                     __ptext15:	
  9802 ;; *************** function _SetBaud *****************
  9803 ;; Defined at:
  9804 ;;		line 286 in file "UART.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  Baud            4   52[BANK0 ] unsigned long 
  9807 ;;  Parity          1   56[BANK0 ] unsigned char 
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9810 ;;  temp            4   58[BANK2 ] unsigned long 
  9811 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9812 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9813 ;;  i               1   62[BANK2 ] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;		None               void
  9816 ;; Registers used:
  9817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9823 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;Total ram usage:       76 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    7
  9830 ;; This function calls:
  9831 ;;		_InitUART
  9832 ;;		_ReadBaud
  9833 ;;		_UARTstringWAIT
  9834 ;;		_WriteBaud
  9835 ;;		_delayUS
  9836 ;;		_sprintf
  9837 ;; This function is called by:
  9838 ;;		_PS_2_Update
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _SetBaud
  9844  1693                     _SetBaud:	
  9845                           
  9846                           ;UART.c: 288: unsigned char buf[50];
  9847                           ;UART.c: 289: unsigned long Baudtemp=0;
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9851  1693  3000               	movlw	0
  9852  1694  0022               	movlb	2	; select bank2
  9853  1695  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9854  1696  3000               	movlw	0
  9855  1697  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9856  1698  3000               	movlw	0
  9857  1699  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9858  169A  3000               	movlw	0
  9859  169B  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9860                           
  9861                           ;UART.c: 290: unsigned long Paritytemp=0;
  9862  169C  3000               	movlw	0
  9863  169D  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9864  169E  3000               	movlw	0
  9865  169F  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9866  16A0  3000               	movlw	0
  9867  16A1  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9868  16A2  3000               	movlw	0
  9869  16A3  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9870                           
  9871                           ;UART.c: 291: unsigned long temp;
  9872                           ;UART.c: 292: unsigned char i =0;
  9873  16A4  01DE               	clrf	SetBaud@i^(0+256)
  9874                           
  9875                           ;UART.c: 294: WriteBaud((0x1800 >> 5), Baud, Parity);
  9876  16A5  30C0               	movlw	192
  9877  16A6  0020               	movlb	0	; select bank0
  9878  16A7  00B6               	movwf	WriteBaud@row
  9879  16A8  3000               	movlw	0
  9880  16A9  00B7               	movwf	WriteBaud@row+1
  9881  16AA  0857               	movf	SetBaud@Baud+3,w
  9882  16AB  00BB               	movwf	WriteBaud@Baud+3
  9883  16AC  0856               	movf	SetBaud@Baud+2,w
  9884  16AD  00BA               	movwf	WriteBaud@Baud+2
  9885  16AE  0855               	movf	SetBaud@Baud+1,w
  9886  16AF  00B9               	movwf	WriteBaud@Baud+1
  9887  16B0  0854               	movf	SetBaud@Baud,w
  9888  16B1  00B8               	movwf	WriteBaud@Baud
  9889  16B2  0858               	movf	SetBaud@Parity,w
  9890  16B3  00D9               	movwf	??_SetBaud
  9891  16B4  0859               	movf	??_SetBaud,w
  9892  16B5  00BC               	movwf	WriteBaud@Parity
  9893  16B6  319D  25FF  3196   	fcall	_WriteBaud
  9894                           
  9895                           ;UART.c: 295: temp = ReadBaud((0x1800 >> 5), 0);
  9896  16B9  30C0               	movlw	192
  9897  16BA  0020               	movlb	0	; select bank0
  9898  16BB  00B7               	movwf	ReadBaud@row
  9899  16BC  3000               	movlw	0
  9900  16BD  00B8               	movwf	ReadBaud@row+1
  9901  16BE  01B9               	clrf	ReadBaud@column
  9902  16BF  319E  265D  3196   	fcall	_ReadBaud
  9903  16C2  0020               	movlb	0	; select bank0
  9904  16C3  083A               	movf	?_ReadBaud+3,w
  9905  16C4  0022               	movlb	2	; select bank2
  9906  16C5  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9907  16C6  0020               	movlb	0	; select bank0
  9908  16C7  0839               	movf	?_ReadBaud+2,w
  9909  16C8  0022               	movlb	2	; select bank2
  9910  16C9  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9911  16CA  0020               	movlb	0	; select bank0
  9912  16CB  0838               	movf	?_ReadBaud+1,w
  9913  16CC  0022               	movlb	2	; select bank2
  9914  16CD  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9915  16CE  0020               	movlb	0	; select bank0
  9916  16CF  0837               	movf	?_ReadBaud,w
  9917  16D0  0022               	movlb	2	; select bank2
  9918  16D1  00DA               	movwf	SetBaud@temp^(0+256)
  9919                           
  9920                           ;UART.c: 296: Baudtemp = temp & 0x000FFFFF;
  9921  16D2  30FF               	movlw	255
  9922  16D3  055A               	andwf	SetBaud@temp^(0+256),w
  9923  16D4  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9924  16D5  30FF               	movlw	255
  9925  16D6  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9926  16D7  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9927  16D8  300F               	movlw	15
  9928  16D9  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9929  16DA  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9930  16DB  3000               	movlw	0
  9931  16DC  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9932  16DD  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9933                           
  9934                           ;UART.c: 297: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9935  16DE  085A               	movf	SetBaud@temp^(0+256),w
  9936  16DF  0020               	movlb	0	; select bank0
  9937  16E0  00D9               	movwf	??_SetBaud
  9938  16E1  0022               	movlb	2	; select bank2
  9939  16E2  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9940  16E3  0020               	movlb	0	; select bank0
  9941  16E4  00DA               	movwf	??_SetBaud+1
  9942  16E5  0022               	movlb	2	; select bank2
  9943  16E6  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9944  16E7  0020               	movlb	0	; select bank0
  9945  16E8  00DB               	movwf	??_SetBaud+2
  9946  16E9  0022               	movlb	2	; select bank2
  9947  16EA  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9948  16EB  0020               	movlb	0	; select bank0
  9949  16EC  00DC               	movwf	??_SetBaud+3
  9950  16ED  3014               	movlw	20
  9951  16EE                     u8095:	
  9952  16EE  36DC               	lsrf	??_SetBaud+3,f
  9953  16EF  0CDB               	rrf	??_SetBaud+2,f
  9954  16F0  0CDA               	rrf	??_SetBaud+1,f
  9955  16F1  0CD9               	rrf	??_SetBaud,f
  9956  16F2  0B89               	decfsz	9,f
  9957  16F3  2EEE               	goto	u8095
  9958  16F4  0859               	movf	??_SetBaud,w
  9959  16F5  390F               	andlw	15
  9960  16F6  00DD               	movwf	??_SetBaud+4
  9961  16F7  01DE               	clrf	??_SetBaud+5
  9962  16F8  01DF               	clrf	??_SetBaud+6
  9963  16F9  01E0               	clrf	??_SetBaud+7
  9964  16FA  0860               	movf	??_SetBaud+7,w
  9965  16FB  0022               	movlb	2	; select bank2
  9966  16FC  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9967  16FD  0020               	movlb	0	; select bank0
  9968  16FE  085F               	movf	??_SetBaud+6,w
  9969  16FF  0022               	movlb	2	; select bank2
  9970  1700  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9971  1701  0020               	movlb	0	; select bank0
  9972  1702  085E               	movf	??_SetBaud+5,w
  9973  1703  0022               	movlb	2	; select bank2
  9974  1704  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9975  1705  0020               	movlb	0	; select bank0
  9976  1706  085D               	movf	??_SetBaud+4,w
  9977  1707  0022               	movlb	2	; select bank2
  9978  1708  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9979                           
  9980                           ;UART.c: 299: InitUART(Baud, Parity);
  9981  1709  0020               	movlb	0	; select bank0
  9982  170A  0857               	movf	SetBaud@Baud+3,w
  9983  170B  00B6               	movwf	InitUART@Baud+3
  9984  170C  0856               	movf	SetBaud@Baud+2,w
  9985  170D  00B5               	movwf	InitUART@Baud+2
  9986  170E  0855               	movf	SetBaud@Baud+1,w
  9987  170F  00B4               	movwf	InitUART@Baud+1
  9988  1710  0854               	movf	SetBaud@Baud,w
  9989  1711  00B3               	movwf	InitUART@Baud
  9990  1712  0858               	movf	SetBaud@Parity,w
  9991  1713  00D9               	movwf	??_SetBaud
  9992  1714  0859               	movf	??_SetBaud,w
  9993  1715  00B7               	movwf	InitUART@parity
  9994  1716  3191  21BC  3196   	fcall	_InitUART
  9995                           
  9996                           ;UART.c: 300: UARTstringWAIT("\r\n");
  9997  1719  303D               	movlw	low ((STR_11+17)| (0+32768))
  9998  171A  0020               	movlb	0	; select bank0
  9999  171B  00B4               	movwf	UARTstringWAIT@data
 10000  171C  308C               	movlw	high ((STR_11+17)| (0+32768))
 10001  171D  00B5               	movwf	UARTstringWAIT@data+1
 10002  171E  319A  22F0  3196   	fcall	_UARTstringWAIT
 10003                           
 10004                           ;UART.c: 301: delayUS(10000);
 10005  1721  3000               	movlw	0
 10006  1722  0020               	movlb	0	; select bank0
 10007  1723  00A8               	movwf	delayUS@US+3
 10008  1724  3000               	movlw	0
 10009  1725  00A7               	movwf	delayUS@US+2
 10010  1726  3027               	movlw	39
 10011  1727  00A6               	movwf	delayUS@US+1
 10012  1728  3010               	movlw	16
 10013  1729  00A5               	movwf	delayUS@US
 10014  172A  319B  2323  3196   	fcall	_delayUS
 10015                           
 10016                           ;UART.c: 302: if((Baud != Baudtemp) || (Parity != Paritytemp))
 10017  172D  0022               	movlb	2	; select bank2
 10018  172E  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 10019  172F  0020               	movlb	0	; select bank0
 10020  1730  0657               	xorwf	SetBaud@Baud+3,w
 10021  1731  1D03               	skipz
 10022  1732  2F43               	goto	u8105
 10023  1733  0022               	movlb	2	; select bank2
 10024  1734  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 10025  1735  0020               	movlb	0	; select bank0
 10026  1736  0656               	xorwf	SetBaud@Baud+2,w
 10027  1737  1D03               	skipz
 10028  1738  2F43               	goto	u8105
 10029  1739  0022               	movlb	2	; select bank2
 10030  173A  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 10031  173B  0020               	movlb	0	; select bank0
 10032  173C  0655               	xorwf	SetBaud@Baud+1,w
 10033  173D  1D03               	skipz
 10034  173E  2F43               	goto	u8105
 10035  173F  0022               	movlb	2	; select bank2
 10036  1740  0852               	movf	SetBaud@Baudtemp^(0+256),w
 10037  1741  0020               	movlb	0	; select bank0
 10038  1742  0654               	xorwf	SetBaud@Baud,w
 10039  1743                     u8105:	
 10040  1743  1D03               	skipz
 10041  1744  2F62               	goto	l6272
 10042  1745  0858               	movf	SetBaud@Parity,w
 10043  1746  00D9               	movwf	??_SetBaud
 10044  1747  01DA               	clrf	??_SetBaud+1
 10045  1748  01DB               	clrf	??_SetBaud+2
 10046  1749  01DC               	clrf	??_SetBaud+3
 10047  174A  0022               	movlb	2	; select bank2
 10048  174B  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 10049  174C  0020               	movlb	0	; select bank0
 10050  174D  065C               	xorwf	??_SetBaud+3,w
 10051  174E  1D03               	skipz
 10052  174F  2F60               	goto	u8115
 10053  1750  0022               	movlb	2	; select bank2
 10054  1751  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 10055  1752  0020               	movlb	0	; select bank0
 10056  1753  065B               	xorwf	??_SetBaud+2,w
 10057  1754  1D03               	skipz
 10058  1755  2F60               	goto	u8115
 10059  1756  0022               	movlb	2	; select bank2
 10060  1757  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10061  1758  0020               	movlb	0	; select bank0
 10062  1759  065A               	xorwf	??_SetBaud+1,w
 10063  175A  1D03               	skipz
 10064  175B  2F60               	goto	u8115
 10065  175C  0022               	movlb	2	; select bank2
 10066  175D  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10067  175E  0020               	movlb	0	; select bank0
 10068  175F  0659               	xorwf	??_SetBaud,w
 10069  1760                     u8115:	
 10070  1760  1903               	skipnz
 10071  1761  2F75               	goto	l6276
 10072  1762                     l6272:	
 10073                           
 10074                           ;UART.c: 303: {
 10075                           ;UART.c: 304: UARTstringWAIT("Program Fail\r\n");
 10076  1762  3089               	movlw	low (STR_19| (0+32768))
 10077  1763  00B4               	movwf	UARTstringWAIT@data
 10078  1764  308C               	movlw	high (STR_19| (0+32768))
 10079  1765  00B5               	movwf	UARTstringWAIT@data+1
 10080  1766  319A  22F0  3196   	fcall	_UARTstringWAIT
 10081                           
 10082                           ;UART.c: 305: delayUS(10000);
 10083  1769  3000               	movlw	0
 10084  176A  0020               	movlb	0	; select bank0
 10085  176B  00A8               	movwf	delayUS@US+3
 10086  176C  3000               	movlw	0
 10087  176D  00A7               	movwf	delayUS@US+2
 10088  176E  3027               	movlw	39
 10089  176F  00A6               	movwf	delayUS@US+1
 10090  1770  3010               	movlw	16
 10091  1771  00A5               	movwf	delayUS@US
 10092  1772  319B  2323  3196   	fcall	_delayUS
 10093  1775                     l6276:	
 10094                           
 10095                           ;UART.c: 306: }
 10096                           ;UART.c: 309: for(i =0;i<10;i++)
 10097  1775  0022               	movlb	2	; select bank2
 10098  1776  01DE               	clrf	SetBaud@i^(0+256)
 10099  1777  300A               	movlw	10
 10100  1778  025E               	subwf	SetBaud@i^(0+256),w
 10101  1779  1803               	btfsc	3,0
 10102  177A  2FA4               	goto	l6290
 10103  177B                     l529:	
 10104                           
 10105                           ;UART.c: 310: {
 10106                           ;UART.c: 311: LATC |= 0b00010000;
 10107  177B  160E               	bsf	14,4	;volatile
 10108                           
 10109                           ;UART.c: 312: delayUS(10000);
 10110  177C  3000               	movlw	0
 10111  177D  0020               	movlb	0	; select bank0
 10112  177E  00A8               	movwf	delayUS@US+3
 10113  177F  3000               	movlw	0
 10114  1780  00A7               	movwf	delayUS@US+2
 10115  1781  3027               	movlw	39
 10116  1782  00A6               	movwf	delayUS@US+1
 10117  1783  3010               	movlw	16
 10118  1784  00A5               	movwf	delayUS@US
 10119  1785  319B  2323  3196   	fcall	_delayUS
 10120                           
 10121                           ;UART.c: 313: LATC &= ~0b00010000;
 10122  1788  30EF               	movlw	239
 10123  1789  0020               	movlb	0	; select bank0
 10124  178A  00D9               	movwf	??_SetBaud
 10125  178B  0859               	movf	??_SetBaud,w
 10126  178C  0022               	movlb	2	; select bank2
 10127  178D  058E               	andwf	14,f	;volatile
 10128                           
 10129                           ;UART.c: 314: delayUS(10000);
 10130  178E  3000               	movlw	0
 10131  178F  0020               	movlb	0	; select bank0
 10132  1790  00A8               	movwf	delayUS@US+3
 10133  1791  3000               	movlw	0
 10134  1792  00A7               	movwf	delayUS@US+2
 10135  1793  3027               	movlw	39
 10136  1794  00A6               	movwf	delayUS@US+1
 10137  1795  3010               	movlw	16
 10138  1796  00A5               	movwf	delayUS@US
 10139  1797  319B  2323  3196   	fcall	_delayUS
 10140  179A  3001               	movlw	1
 10141  179B  0020               	movlb	0	; select bank0
 10142  179C  00D9               	movwf	??_SetBaud
 10143  179D  0859               	movf	??_SetBaud,w
 10144  179E  0022               	movlb	2	; select bank2
 10145  179F  07DE               	addwf	SetBaud@i^(0+256),f
 10146  17A0  300A               	movlw	10
 10147  17A1  025E               	subwf	SetBaud@i^(0+256),w
 10148  17A2  1C03               	skipc
 10149  17A3  2F7B               	goto	l529
 10150  17A4                     l6290:	
 10151                           
 10152                           ;UART.c: 315: }
 10153                           ;UART.c: 317: if(Parity)
 10154  17A4  0020               	movlb	0	; select bank0
 10155  17A5  0858               	movf	SetBaud@Parity,w
 10156  17A6  1903               	btfsc	3,2
 10157  17A7  2FD9               	goto	l6306
 10158                           
 10159                           ;UART.c: 318: {
 10160                           ;UART.c: 319: switch (Parity)
 10161  17A8  2FCC               	goto	l6304
 10162  17A9                     l6294:	
 10163                           ;UART.c: 320: {
 10164                           ;UART.c: 321: case 1:
 10165                           
 10166                           
 10167                           ;UART.c: 322: sprintf(buf,"Baud is %lu with Odd parity bit\r\n",Baud);
 10168  17A9  3020               	movlw	low SetBaud@buf
 10169  17AA  00BD               	movwf	sprintf@sp
 10170  17AB  3001               	movlw	high SetBaud@buf
 10171  17AC  00BE               	movwf	sprintf@sp+1
 10172  17AD  303F               	movlw	low (STR_13| (0+32768))
 10173  17AE  00BF               	movwf	sprintf@f
 10174  17AF  308B               	movlw	high (STR_13| (0+32768))
 10175  17B0  2FE0               	goto	L15
 10176  17B1                     l6296:	
 10177                           ;UART.c: 324: case 2:
 10178                           
 10179                           ;UART.c: 323: break;
 10180                           
 10181                           
 10182                           ;UART.c: 325: sprintf(buf,"Baud is %lu with Even parity bit\r\n",Baud);
 10183  17B1  3020               	movlw	low SetBaud@buf
 10184  17B2  0020               	movlb	0	; select bank0
 10185  17B3  00BD               	movwf	sprintf@sp
 10186  17B4  3001               	movlw	high SetBaud@buf
 10187  17B5  00BE               	movwf	sprintf@sp+1
 10188  17B6  30F9               	movlw	low (STR_14| (0+32768))
 10189  17B7  00BF               	movwf	sprintf@f
 10190  17B8  308A               	movlw	high (STR_14| (0+32768))
 10191  17B9  2FE0               	goto	L15
 10192  17BA                     l6298:	
 10193                           ;UART.c: 327: case 3:
 10194                           
 10195                           ;UART.c: 326: break;
 10196                           
 10197                           
 10198                           ;UART.c: 328: sprintf(buf,"Baud is %lu with Mark bit\r\n",Baud);
 10199  17BA  3020               	movlw	low SetBaud@buf
 10200  17BB  0020               	movlb	0	; select bank0
 10201  17BC  00BD               	movwf	sprintf@sp
 10202  17BD  3001               	movlw	high SetBaud@buf
 10203  17BE  00BE               	movwf	sprintf@sp+1
 10204  17BF  309F               	movlw	low (STR_15| (0+32768))
 10205  17C0  00BF               	movwf	sprintf@f
 10206  17C1  308B               	movlw	high (STR_15| (0+32768))
 10207  17C2  2FE0               	goto	L15
 10208  17C3                     l6300:	
 10209                           ;UART.c: 330: default:
 10210                           
 10211                           ;UART.c: 329: break;
 10212                           
 10213                           
 10214                           ;UART.c: 331: sprintf(buf,"Baud is %lu with Space bit\r\n",Baud);
 10215  17C3  3020               	movlw	low SetBaud@buf
 10216  17C4  0020               	movlb	0	; select bank0
 10217  17C5  00BD               	movwf	sprintf@sp
 10218  17C6  3001               	movlw	high SetBaud@buf
 10219  17C7  00BE               	movwf	sprintf@sp+1
 10220  17C8  3082               	movlw	low (STR_16| (0+32768))
 10221  17C9  00BF               	movwf	sprintf@f
 10222  17CA  308B               	movlw	high (STR_16| (0+32768))
 10223  17CB  2FE0               	goto	L15
 10224  17CC                     l6304:	
 10225                           ;UART.c: 333: }
 10226                           
 10227                           ;UART.c: 332: break;
 10228                           
 10229  17CC  0020               	movlb	0	; select bank0
 10230  17CD  0858               	movf	SetBaud@Parity,w
 10231                           
 10232                           ; Switch size 1, requested type "space"
 10233                           ; Number of cases is 3, Range of values is 1 to 3
 10234                           ; switch strategies available:
 10235                           ; Name         Instructions Cycles
 10236                           ; simple_byte           10     6 (average)
 10237                           ; direct_byte           15     9 (fixed)
 10238                           ; jumptable            263     9 (fixed)
 10239                           ;	Chosen strategy is simple_byte
 10240  17CE  3A01               	xorlw	1	; case 1
 10241  17CF  1903               	skipnz
 10242  17D0  2FA9               	goto	l6294
 10243  17D1  3A03               	xorlw	3	; case 2
 10244  17D2  1903               	skipnz
 10245  17D3  2FB1               	goto	l6296
 10246  17D4  3A01               	xorlw	1	; case 3
 10247  17D5  1903               	skipnz
 10248  17D6  2FBA               	goto	l6298
 10249  17D7  2FC3               	goto	l6300
 10250                           
 10251                           ;UART.c: 334: }
 10252  17D8  2FEC               	goto	l6308
 10253  17D9                     l6306:	
 10254                           
 10255                           ;UART.c: 335: else
 10256                           ;UART.c: 336: {
 10257                           ;UART.c: 337: sprintf(buf,"Baud is %lu with no parity bit\r\n",Baud);
 10258  17D9  3020               	movlw	low SetBaud@buf
 10259  17DA  00BD               	movwf	sprintf@sp
 10260  17DB  3001               	movlw	high SetBaud@buf
 10261  17DC  00BE               	movwf	sprintf@sp+1
 10262  17DD  3061               	movlw	low (STR_17| (0+32768))
 10263  17DE  00BF               	movwf	sprintf@f
 10264  17DF  308B               	movlw	high (STR_17| (0+32768))
 10265  17E0                     L15:	
 10266  17E0  00C0               	movwf	sprintf@f+1
 10267  17E1  0857               	movf	SetBaud@Baud+3,w
 10268  17E2  00C4               	movwf	?_sprintf+7
 10269  17E3  0856               	movf	SetBaud@Baud+2,w
 10270  17E4  00C3               	movwf	?_sprintf+6
 10271  17E5  0855               	movf	SetBaud@Baud+1,w
 10272  17E6  00C2               	movwf	?_sprintf+5
 10273  17E7  0854               	movf	SetBaud@Baud,w
 10274  17E8  00C1               	movwf	?_sprintf+4
 10275  17E9  3194  248F  3196   	fcall	_sprintf
 10276  17EC                     l6308:	
 10277                           
 10278                           ;UART.c: 338: }
 10279                           ;UART.c: 339: UARTstringWAIT(buf);
 10280  17EC  3020               	movlw	low SetBaud@buf
 10281  17ED  0020               	movlb	0	; select bank0
 10282  17EE  00B4               	movwf	UARTstringWAIT@data
 10283  17EF  3001               	movlw	high SetBaud@buf
 10284  17F0  00B5               	movwf	UARTstringWAIT@data+1
 10285  17F1  319A  22F0  3196   	fcall	_UARTstringWAIT
 10286                           
 10287                           ;UART.c: 340: delayUS(10000);
 10288  17F4  3000               	movlw	0
 10289  17F5  0020               	movlb	0	; select bank0
 10290  17F6  00A8               	movwf	delayUS@US+3
 10291  17F7  3000               	movlw	0
 10292  17F8  00A7               	movwf	delayUS@US+2
 10293  17F9  3027               	movlw	39
 10294  17FA  00A6               	movwf	delayUS@US+1
 10295  17FB  3010               	movlw	16
 10296  17FC  00A5               	movwf	delayUS@US
 10297  17FD  319B  2323         	fcall	_delayUS
 10298  17FF  0008               	return
 10299  1800                     __end_of_SetBaud:	
 10300                           
 10301                           	psect	text16
 10302  1DFF                     __ptext16:	
 10303 ;; *************** function _WriteBaud *****************
 10304 ;; Defined at:
 10305 ;;		line 127 in file "FLASH.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  row             2   22[BANK0 ] unsigned int 
 10308 ;;  Baud            4   24[BANK0 ] unsigned long 
 10309 ;;  Parity          1   28[BANK0 ] unsigned char 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  temp            4   37[BANK0 ] unsigned long 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;		None               void
 10314 ;; Registers used:
 10315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10321 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;Total ram usage:       19 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    6
 10328 ;; This function calls:
 10329 ;;		_WriteFlash_Sequential
 10330 ;; This function is called by:
 10331 ;;		_SetBaud
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _WriteBaud
 10337  1DFF                     _WriteBaud:	
 10338                           
 10339                           ;FLASH.c: 129: unsigned long temp;
 10340                           ;FLASH.c: 130: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10344  1DFF  0020               	movlb	0	; select bank0
 10345  1E00  083C               	movf	WriteBaud@Parity,w
 10346  1E01  3907               	andlw	7
 10347  1E02  00BD               	movwf	??_WriteBaud
 10348  1E03  01BE               	clrf	??_WriteBaud+1
 10349  1E04  01BF               	clrf	??_WriteBaud+2
 10350  1E05  01C0               	clrf	??_WriteBaud+3
 10351  1E06  3014               	movlw	20
 10352  1E07                     u7965:	
 10353  1E07  35BD               	lslf	??_WriteBaud,f
 10354  1E08  0DBE               	rlf	??_WriteBaud+1,f
 10355  1E09  0DBF               	rlf	??_WriteBaud+2,f
 10356  1E0A  0DC0               	rlf	??_WriteBaud+3,f
 10357  1E0B  0B89               	decfsz	9,f
 10358  1E0C  2E07               	goto	u7965
 10359  1E0D  30FF               	movlw	255
 10360  1E0E  0538               	andwf	WriteBaud@Baud,w
 10361  1E0F  00C1               	movwf	??_WriteBaud+4
 10362  1E10  30FF               	movlw	255
 10363  1E11  0539               	andwf	WriteBaud@Baud+1,w
 10364  1E12  00C2               	movwf	??_WriteBaud+5
 10365  1E13  300F               	movlw	15
 10366  1E14  053A               	andwf	WriteBaud@Baud+2,w
 10367  1E15  00C3               	movwf	??_WriteBaud+6
 10368  1E16  3000               	movlw	0
 10369  1E17  053B               	andwf	WriteBaud@Baud+3,w
 10370  1E18  00C4               	movwf	??_WriteBaud+7
 10371  1E19  0841               	movf	??_WriteBaud+4,w
 10372  1E1A  07BD               	addwf	??_WriteBaud,f
 10373  1E1B  0842               	movf	??_WriteBaud+5,w
 10374  1E1C  3DBE               	addwfc	??_WriteBaud+1,f
 10375  1E1D  0843               	movf	??_WriteBaud+6,w
 10376  1E1E  3DBF               	addwfc	??_WriteBaud+2,f
 10377  1E1F  0844               	movf	??_WriteBaud+7,w
 10378  1E20  3DC0               	addwfc	??_WriteBaud+3,f
 10379  1E21  0840               	movf	??_WriteBaud+3,w
 10380  1E22  00C8               	movwf	WriteBaud@temp+3
 10381  1E23  083F               	movf	??_WriteBaud+2,w
 10382  1E24  00C7               	movwf	WriteBaud@temp+2
 10383  1E25  083E               	movf	??_WriteBaud+1,w
 10384  1E26  00C6               	movwf	WriteBaud@temp+1
 10385  1E27  083D               	movf	??_WriteBaud,w
 10386  1E28  00C5               	movwf	WriteBaud@temp
 10387                           
 10388                           ;FLASH.c: 131: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10389  1E29  30FF               	movlw	255
 10390  1E2A  0545               	andwf	WriteBaud@temp,w
 10391  1E2B  0024               	movlb	4	; select bank4
 10392  1E2C  00AF               	movwf	(_MEM^(0+512)+2)
 10393  1E2D  303F               	movlw	63
 10394  1E2E  0020               	movlb	0	; select bank0
 10395  1E2F  0546               	andwf	WriteBaud@temp+1,w
 10396  1E30  0024               	movlb	4	; select bank4
 10397  1E31  00B0               	movwf	((_MEM+1)^(0+512)+2)
 10398                           
 10399                           ;FLASH.c: 132: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10400  1E32  0020               	movlb	0	; select bank0
 10401  1E33  0845               	movf	WriteBaud@temp,w
 10402  1E34  00BD               	movwf	??_WriteBaud
 10403  1E35  0846               	movf	WriteBaud@temp+1,w
 10404  1E36  00BE               	movwf	??_WriteBaud+1
 10405  1E37  0847               	movf	WriteBaud@temp+2,w
 10406  1E38  00BF               	movwf	??_WriteBaud+2
 10407  1E39  0848               	movf	WriteBaud@temp+3,w
 10408  1E3A  00C0               	movwf	??_WriteBaud+3
 10409  1E3B  300E               	movlw	14
 10410  1E3C                     u7975:	
 10411  1E3C  36C0               	lsrf	??_WriteBaud+3,f
 10412  1E3D  0CBF               	rrf	??_WriteBaud+2,f
 10413  1E3E  0CBE               	rrf	??_WriteBaud+1,f
 10414  1E3F  0CBD               	rrf	??_WriteBaud,f
 10415  1E40  0B89               	decfsz	9,f
 10416  1E41  2E3C               	goto	u7975
 10417  1E42  30FF               	movlw	255
 10418  1E43  053D               	andwf	??_WriteBaud,w
 10419  1E44  0024               	movlb	4	; select bank4
 10420  1E45  00AD               	movwf	_MEM^(0+512)
 10421  1E46  303F               	movlw	63
 10422  1E47  0020               	movlb	0	; select bank0
 10423  1E48  053E               	andwf	??_WriteBaud+1,w
 10424  1E49  0024               	movlb	4	; select bank4
 10425  1E4A  00AE               	movwf	(_MEM+1)^(0+512)
 10426                           
 10427                           ;FLASH.c: 133: WriteFlash_Sequential(row, MEM, 2);
 10428  1E4B  0020               	movlb	0	; select bank0
 10429  1E4C  0837               	movf	WriteBaud@row+1,w
 10430  1E4D  01B0               	clrf	WriteFlash_Sequential@row+1
 10431  1E4E  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10432  1E4F  0836               	movf	WriteBaud@row,w
 10433  1E50  01AF               	clrf	WriteFlash_Sequential@row
 10434  1E51  07AF               	addwf	WriteFlash_Sequential@row,f
 10435  1E52  302D               	movlw	_MEM& (0+255)
 10436  1E53  00BD               	movwf	??_WriteBaud
 10437  1E54  083D               	movf	??_WriteBaud,w
 10438  1E55  00B1               	movwf	WriteFlash_Sequential@buffer
 10439  1E56  3002               	movlw	2
 10440  1E57  00BE               	movwf	??_WriteBaud+1
 10441  1E58  083E               	movf	??_WriteBaud+1,w
 10442  1E59  00B2               	movwf	WriteFlash_Sequential@amount
 10443  1E5A  3192  22AA         	fcall	_WriteFlash_Sequential
 10444  1E5C  0008               	return
 10445  1E5D                     __end_of_WriteBaud:	
 10446                           
 10447                           	psect	text17
 10448  12AA                     __ptext17:	
 10449 ;; *************** function _WriteFlash_Sequential *****************
 10450 ;; Defined at:
 10451 ;;		line 73 in file "FLASH.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;  row             2   15[BANK0 ] unsigned int 
 10454 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10455 ;;		 -> MEM(4), 
 10456 ;;  amount          1   18[BANK0 ] unsigned char 
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10459 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10460 ;;  temp            2   67[BANK1 ] unsigned int 
 10461 ;;  i               1   70[BANK1 ] unsigned char 
 10462 ;;  spaces          1   69[BANK1 ] unsigned char 
 10463 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10464 ;;  tempL           1   65[BANK1 ] unsigned char 
 10465 ;;  tempH           1   64[BANK1 ] unsigned char 
 10466 ;; Return value:  Size  Location     Type
 10467 ;;		None               void
 10468 ;; Registers used:
 10469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:       78 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    5
 10482 ;; This function calls:
 10483 ;;		_BlockErase
 10484 ;;		_ReadFlash_2Byte
 10485 ;;		_UNLOCK
 10486 ;;		_delayUS
 10487 ;; This function is called by:
 10488 ;;		_WriteBaud
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           
 10493                           ;psect for function _WriteFlash_Sequential
 10494  12AA                     _WriteFlash_Sequential:	
 10495                           
 10496                           ;FLASH.c: 75: unsigned char spaces = 32;
 10497                           
 10498                           ;incstack = 0
 10499                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10500  12AA  3020               	movlw	32
 10501  12AB  0020               	movlb	0	; select bank0
 10502  12AC  00B3               	movwf	??_WriteFlash_Sequential
 10503  12AD  0833               	movf	??_WriteFlash_Sequential,w
 10504  12AE  0021               	movlb	1	; select bank1
 10505  12AF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10506                           
 10507                           ;FLASH.c: 76: unsigned char tempH;
 10508                           ;FLASH.c: 77: unsigned char tempL;
 10509                           ;FLASH.c: 78: unsigned char i;
 10510                           ;FLASH.c: 79: unsigned int temp;
 10511                           ;FLASH.c: 80: unsigned char amountTemp =0;
 10512  12B0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10513                           
 10514                           ;FLASH.c: 81: unsigned char TempBufH[32];
 10515                           ;FLASH.c: 82: unsigned char TempBufL[32];
 10516                           ;FLASH.c: 84: for(i=0;i<spaces;i++)
 10517  12B1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10518  12B2                     l5934:	
 10519  12B2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10520  12B3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10521  12B4  1803               	btfsc	3,0
 10522  12B5  2B23               	goto	l5936
 10523                           
 10524                           ;FLASH.c: 85: {
 10525                           ;FLASH.c: 86: amountTemp++;
 10526  12B6  3001               	movlw	1
 10527  12B7  0020               	movlb	0	; select bank0
 10528  12B8  00B3               	movwf	??_WriteFlash_Sequential
 10529  12B9  0833               	movf	??_WriteFlash_Sequential,w
 10530  12BA  0021               	movlb	1	; select bank1
 10531  12BB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10532                           
 10533                           ;FLASH.c: 87: if(amountTemp <= amount)
 10534  12BC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10535  12BD  0020               	movlb	0	; select bank0
 10536  12BE  0232               	subwf	WriteFlash_Sequential@amount,w
 10537  12BF  1C03               	skipc
 10538  12C0  2ADF               	goto	l5922
 10539                           
 10540                           ;FLASH.c: 88: {
 10541                           ;FLASH.c: 89: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10542  12C1  0831               	movf	WriteFlash_Sequential@buffer,w
 10543  12C2  0086               	movwf	6
 10544  12C3  3002               	movlw	2	; select bank4/5
 10545  12C4  0087               	movwf	7
 10546  12C5  3F40               	moviw [0]fsr1
 10547  12C6  00B3               	movwf	??_WriteFlash_Sequential
 10548  12C7  3F41               	moviw [1]fsr1
 10549  12C8  00B4               	movwf	??_WriteFlash_Sequential+1
 10550  12C9  0834               	movf	??_WriteFlash_Sequential+1,w
 10551  12CA  393F               	andlw	63
 10552  12CB  00B5               	movwf	??_WriteFlash_Sequential+2
 10553  12CC  0835               	movf	??_WriteFlash_Sequential+2,w
 10554  12CD  0021               	movlb	1	; select bank1
 10555  12CE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10556                           
 10557                           ;FLASH.c: 90: tempL = (unsigned char)(*buffer & 0x00FF);
 10558  12CF  0020               	movlb	0	; select bank0
 10559  12D0  0831               	movf	WriteFlash_Sequential@buffer,w
 10560  12D1  0086               	movwf	6
 10561  12D2  3002               	movlw	2	; select bank4/5
 10562  12D3  0087               	movwf	7
 10563  12D4  0801               	movf	1,w
 10564  12D5  00B3               	movwf	??_WriteFlash_Sequential
 10565  12D6  0833               	movf	??_WriteFlash_Sequential,w
 10566  12D7  0021               	movlb	1	; select bank1
 10567  12D8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10568                           
 10569                           ;FLASH.c: 91: buffer++;
 10570  12D9  3002               	movlw	2
 10571  12DA  0020               	movlb	0	; select bank0
 10572  12DB  00B3               	movwf	??_WriteFlash_Sequential
 10573  12DC  0833               	movf	??_WriteFlash_Sequential,w
 10574  12DD  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10575                           
 10576                           ;FLASH.c: 92: }
 10577  12DE  2B05               	goto	l5928
 10578  12DF                     l5922:	
 10579                           
 10580                           ;FLASH.c: 93: else
 10581                           ;FLASH.c: 94: {
 10582                           ;FLASH.c: 96: temp = ReadFlash_2Byte(row, i);
 10583  12DF  0830               	movf	WriteFlash_Sequential@row+1,w
 10584  12E0  01A6               	clrf	ReadFlash_2Byte@row+1
 10585  12E1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10586  12E2  082F               	movf	WriteFlash_Sequential@row,w
 10587  12E3  01A5               	clrf	ReadFlash_2Byte@row
 10588  12E4  07A5               	addwf	ReadFlash_2Byte@row,f
 10589  12E5  0021               	movlb	1	; select bank1
 10590  12E6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10591  12E7  0020               	movlb	0	; select bank0
 10592  12E8  00B3               	movwf	??_WriteFlash_Sequential
 10593  12E9  0833               	movf	??_WriteFlash_Sequential,w
 10594  12EA  00A7               	movwf	ReadFlash_2Byte@column
 10595  12EB  319A  22BE  3192   	fcall	_ReadFlash_2Byte
 10596  12EE  0020               	movlb	0	; select bank0
 10597  12EF  0826               	movf	?_ReadFlash_2Byte+1,w
 10598  12F0  0021               	movlb	1	; select bank1
 10599  12F1  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10600  12F2  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10601  12F3  0020               	movlb	0	; select bank0
 10602  12F4  0825               	movf	?_ReadFlash_2Byte,w
 10603  12F5  0021               	movlb	1	; select bank1
 10604  12F6  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10605  12F7  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10606                           
 10607                           ;FLASH.c: 97: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10608  12F8  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10609  12F9  393F               	andlw	63
 10610  12FA  0020               	movlb	0	; select bank0
 10611  12FB  00B3               	movwf	??_WriteFlash_Sequential
 10612  12FC  0833               	movf	??_WriteFlash_Sequential,w
 10613  12FD  0021               	movlb	1	; select bank1
 10614  12FE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10615                           
 10616                           ;FLASH.c: 98: tempL = (unsigned char)(temp & 0x00FF);
 10617  12FF  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10618  1300  0020               	movlb	0	; select bank0
 10619  1301  00B3               	movwf	??_WriteFlash_Sequential
 10620  1302  0833               	movf	??_WriteFlash_Sequential,w
 10621  1303  0021               	movlb	1	; select bank1
 10622  1304  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10623  1305                     l5928:	
 10624                           
 10625                           ;FLASH.c: 99: }
 10626                           ;FLASH.c: 100: TempBufH[i] = tempH;
 10627  1305  0021               	movlb	1	; select bank1
 10628  1306  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10629  1307  0020               	movlb	0	; select bank0
 10630  1308  00B3               	movwf	??_WriteFlash_Sequential
 10631  1309  0021               	movlb	1	; select bank1
 10632  130A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10633  130B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10634  130C  0086               	movwf	6
 10635  130D  0187               	clrf	7
 10636  130E  0020               	movlb	0	; select bank0
 10637  130F  0833               	movf	??_WriteFlash_Sequential,w
 10638  1310  0081               	movwf	1
 10639                           
 10640                           ;FLASH.c: 101: TempBufL[i] = tempL;
 10641  1311  0021               	movlb	1	; select bank1
 10642  1312  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10643  1313  0020               	movlb	0	; select bank0
 10644  1314  00B3               	movwf	??_WriteFlash_Sequential
 10645  1315  0021               	movlb	1	; select bank1
 10646  1316  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10647  1317  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10648  1318  0086               	movwf	6
 10649  1319  0187               	clrf	7
 10650  131A  0020               	movlb	0	; select bank0
 10651  131B  0833               	movf	??_WriteFlash_Sequential,w
 10652  131C  0081               	movwf	1
 10653  131D  3001               	movlw	1
 10654  131E  00B3               	movwf	??_WriteFlash_Sequential
 10655  131F  0833               	movf	??_WriteFlash_Sequential,w
 10656  1320  0021               	movlb	1	; select bank1
 10657  1321  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10658  1322  2AB2               	goto	l5934
 10659  1323                     l5936:	
 10660                           
 10661                           ;FLASH.c: 102: }
 10662                           ;FLASH.c: 103: BlockErase(row);
 10663  1323  0020               	movlb	0	; select bank0
 10664  1324  0830               	movf	WriteFlash_Sequential@row+1,w
 10665  1325  01A6               	clrf	BlockErase@row+1
 10666  1326  07A6               	addwf	BlockErase@row+1,f
 10667  1327  082F               	movf	WriteFlash_Sequential@row,w
 10668  1328  01A5               	clrf	BlockErase@row
 10669  1329  07A5               	addwf	BlockErase@row,f
 10670  132A  319A  228D  3192   	fcall	_BlockErase
 10671                           
 10672                           ;FLASH.c: 104: delayUS(1000);
 10673  132D  3000               	movlw	0
 10674  132E  0020               	movlb	0	; select bank0
 10675  132F  00A8               	movwf	delayUS@US+3
 10676  1330  3000               	movlw	0
 10677  1331  00A7               	movwf	delayUS@US+2
 10678  1332  3003               	movlw	3
 10679  1333  00A6               	movwf	delayUS@US+1
 10680  1334  30E8               	movlw	232
 10681  1335  00A5               	movwf	delayUS@US
 10682  1336  319B  2323  3192   	fcall	_delayUS
 10683                           
 10684                           ;FLASH.c: 105: INTCON &= ~0x80;
 10685  1339  307F               	movlw	127
 10686  133A  0020               	movlb	0	; select bank0
 10687  133B  00B3               	movwf	??_WriteFlash_Sequential
 10688  133C  0833               	movf	??_WriteFlash_Sequential,w
 10689  133D  058B               	andwf	11,f	;volatile
 10690                           
 10691                           ;FLASH.c: 106: PMCON1 |= 0b00000100;
 10692  133E  0023               	movlb	3	; select bank3
 10693  133F  1515               	bsf	21,2	;volatile
 10694                           
 10695                           ;FLASH.c: 107: PMCON1 &= ~0b01000000;
 10696  1340  30BF               	movlw	191
 10697  1341  0020               	movlb	0	; select bank0
 10698  1342  00B3               	movwf	??_WriteFlash_Sequential
 10699  1343  0833               	movf	??_WriteFlash_Sequential,w
 10700  1344  0023               	movlb	3	; select bank3
 10701  1345  0595               	andwf	21,f	;volatile
 10702                           
 10703                           ;FLASH.c: 108: PMCON1 &= ~0b00100000;
 10704  1346  30DF               	movlw	223
 10705  1347  0020               	movlb	0	; select bank0
 10706  1348  00B3               	movwf	??_WriteFlash_Sequential
 10707  1349  0833               	movf	??_WriteFlash_Sequential,w
 10708  134A  0023               	movlb	3	; select bank3
 10709  134B  0595               	andwf	21,f	;volatile
 10710                           
 10711                           ;FLASH.c: 109: PMCON1 &= ~0b00010000;
 10712  134C  30EF               	movlw	239
 10713  134D  0020               	movlb	0	; select bank0
 10714  134E  00B3               	movwf	??_WriteFlash_Sequential
 10715  134F  0833               	movf	??_WriteFlash_Sequential,w
 10716  1350  0023               	movlb	3	; select bank3
 10717  1351  0595               	andwf	21,f	;volatile
 10718                           
 10719                           ;FLASH.c: 110: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10720  1352  0020               	movlb	0	; select bank0
 10721  1353  0830               	movf	WriteFlash_Sequential@row+1,w
 10722  1354  00B4               	movwf	??_WriteFlash_Sequential+1
 10723  1355  082F               	movf	WriteFlash_Sequential@row,w
 10724  1356  00B3               	movwf	??_WriteFlash_Sequential
 10725  1357  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10726  1358  0CB3               	rrf	??_WriteFlash_Sequential,f
 10727  1359  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10728  135A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10729  135B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10730  135C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10731  135D  0833               	movf	??_WriteFlash_Sequential,w
 10732  135E  397F               	andlw	127
 10733  135F  0023               	movlb	3	; select bank3
 10734  1360  0092               	movwf	18	;volatile
 10735                           
 10736                           ;FLASH.c: 111: PMADRL = (unsigned char)((row & 0x007) << 5);
 10737  1361  0020               	movlb	0	; select bank0
 10738  1362  082F               	movf	WriteFlash_Sequential@row,w
 10739  1363  3907               	andlw	7
 10740  1364  00B3               	movwf	??_WriteFlash_Sequential
 10741  1365  3004               	movlw	4
 10742  1366                     u7635:	
 10743  1366  35B3               	lslf	??_WriteFlash_Sequential,f
 10744  1367  3EFF               	addlw	-1
 10745  1368  1D03               	skipz
 10746  1369  2B66               	goto	u7635
 10747  136A  3533               	lslf	??_WriteFlash_Sequential,w
 10748  136B  0023               	movlb	3	; select bank3
 10749  136C  0091               	movwf	17	;volatile
 10750                           
 10751                           ;FLASH.c: 113: for(i=0;i<spaces;i++)
 10752  136D  0021               	movlb	1	; select bank1
 10753  136E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10754  136F                     l5966:	
 10755  136F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10756  1370  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10757  1371  1803               	btfsc	3,0
 10758  1372  2B94               	goto	l5968
 10759                           
 10760                           ;FLASH.c: 114: {
 10761                           ;FLASH.c: 115: PMDATH = TempBufH[i];
 10762  1373  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10763  1374  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10764  1375  0086               	movwf	6
 10765  1376  0187               	clrf	7
 10766  1377  0801               	movf	1,w
 10767  1378  0023               	movlb	3	; select bank3
 10768  1379  0094               	movwf	20	;volatile
 10769                           
 10770                           ;FLASH.c: 116: PMDATL = TempBufL[i];
 10771  137A  0021               	movlb	1	; select bank1
 10772  137B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10773  137C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10774  137D  0086               	movwf	6
 10775  137E  0187               	clrf	7
 10776  137F  0801               	movf	1,w
 10777  1380  0023               	movlb	3	; select bank3
 10778  1381  0093               	movwf	19	;volatile
 10779                           
 10780                           ;FLASH.c: 117: __nop();
 10781  1382  0000               	nop
 10782                           
 10783                           ;FLASH.c: 118: __nop();
 10784  1383  0000               	nop
 10785                           
 10786                           ;FLASH.c: 119: UNLOCK();
 10787  1384  3198  20E0  3192   	fcall	_UNLOCK
 10788                           
 10789                           ;FLASH.c: 120: PMADRL++;
 10790  1387  3001               	movlw	1
 10791  1388  0020               	movlb	0	; select bank0
 10792  1389  00B3               	movwf	??_WriteFlash_Sequential
 10793  138A  0833               	movf	??_WriteFlash_Sequential,w
 10794  138B  0023               	movlb	3	; select bank3
 10795  138C  0791               	addwf	17,f	;volatile
 10796  138D  3001               	movlw	1
 10797  138E  0020               	movlb	0	; select bank0
 10798  138F  00B3               	movwf	??_WriteFlash_Sequential
 10799  1390  0833               	movf	??_WriteFlash_Sequential,w
 10800  1391  0021               	movlb	1	; select bank1
 10801  1392  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10802  1393  2B6F               	goto	l5966
 10803  1394                     l5968:	
 10804                           
 10805                           ;FLASH.c: 122: }
 10806                           ;FLASH.c: 123: PMCON1 &= ~0b00000100;
 10807  1394  30FB               	movlw	251
 10808  1395  0020               	movlb	0	; select bank0
 10809  1396  00B3               	movwf	??_WriteFlash_Sequential
 10810  1397  0833               	movf	??_WriteFlash_Sequential,w
 10811  1398  0023               	movlb	3	; select bank3
 10812  1399  0595               	andwf	21,f	;volatile
 10813                           
 10814                           ;FLASH.c: 124: INTCON |= 0x80;
 10815  139A  178B               	bsf	11,7	;volatile
 10816  139B  0008               	return
 10817  139C                     __end_of_WriteFlash_Sequential:	
 10818                           
 10819                           	psect	text18
 10820  1A8D                     __ptext18:	
 10821 ;; *************** function _BlockErase *****************
 10822 ;; Defined at:
 10823 ;;		line 61 in file "FLASH.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  row             2    5[BANK0 ] unsigned int 
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;		None
 10828 ;; Return value:  Size  Location     Type
 10829 ;;		None               void
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0, pclath, cstack
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;Total ram usage:        4 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    4
 10844 ;; This function calls:
 10845 ;;		_UNLOCK
 10846 ;; This function is called by:
 10847 ;;		_WriteFlash_Sequential
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function _BlockErase
 10853  1A8D                     _BlockErase:	
 10854                           
 10855                           ;FLASH.c: 63: INTCON &= ~0x80;
 10856                           
 10857                           ;incstack = 0
 10858                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10859  1A8D  307F               	movlw	127
 10860  1A8E  0020               	movlb	0	; select bank0
 10861  1A8F  00A7               	movwf	??_BlockErase
 10862  1A90  0827               	movf	??_BlockErase,w
 10863  1A91  058B               	andwf	11,f	;volatile
 10864                           
 10865                           ;FLASH.c: 64: PMCON1 &= ~0b01000000;
 10866  1A92  30BF               	movlw	191
 10867  1A93  00A7               	movwf	??_BlockErase
 10868  1A94  0827               	movf	??_BlockErase,w
 10869  1A95  0023               	movlb	3	; select bank3
 10870  1A96  0595               	andwf	21,f	;volatile
 10871                           
 10872                           ;FLASH.c: 65: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10873  1A97  0020               	movlb	0	; select bank0
 10874  1A98  0826               	movf	BlockErase@row+1,w
 10875  1A99  00A8               	movwf	??_BlockErase+1
 10876  1A9A  0825               	movf	BlockErase@row,w
 10877  1A9B  00A7               	movwf	??_BlockErase
 10878  1A9C  36A8               	lsrf	??_BlockErase+1,f
 10879  1A9D  0CA7               	rrf	??_BlockErase,f
 10880  1A9E  36A8               	lsrf	??_BlockErase+1,f
 10881  1A9F  0CA7               	rrf	??_BlockErase,f
 10882  1AA0  36A8               	lsrf	??_BlockErase+1,f
 10883  1AA1  0CA7               	rrf	??_BlockErase,f
 10884  1AA2  0827               	movf	??_BlockErase,w
 10885  1AA3  397F               	andlw	127
 10886  1AA4  0023               	movlb	3	; select bank3
 10887  1AA5  0092               	movwf	18	;volatile
 10888                           
 10889                           ;FLASH.c: 66: PMADRL = (unsigned char)((row & 0x007) << 5);
 10890  1AA6  0020               	movlb	0	; select bank0
 10891  1AA7  0825               	movf	BlockErase@row,w
 10892  1AA8  3907               	andlw	7
 10893  1AA9  00A7               	movwf	??_BlockErase
 10894  1AAA  3004               	movlw	4
 10895  1AAB                     u7485:	
 10896  1AAB  35A7               	lslf	??_BlockErase,f
 10897  1AAC  3EFF               	addlw	-1
 10898  1AAD  1D03               	skipz
 10899  1AAE  2AAB               	goto	u7485
 10900  1AAF  3527               	lslf	??_BlockErase,w
 10901  1AB0  0023               	movlb	3	; select bank3
 10902  1AB1  0091               	movwf	17	;volatile
 10903                           
 10904                           ;FLASH.c: 67: PMCON1 |= 0b00010000;
 10905  1AB2  1615               	bsf	21,4	;volatile
 10906                           
 10907                           ;FLASH.c: 68: PMCON1 |= 0b00000100;
 10908  1AB3  1515               	bsf	21,2	;volatile
 10909                           
 10910                           ;FLASH.c: 69: UNLOCK();
 10911  1AB4  3198  20E0         	fcall	_UNLOCK
 10912                           
 10913                           ;FLASH.c: 70: PMCON1 &= ~0b00000100;
 10914  1AB6  30FB               	movlw	251
 10915  1AB7  0020               	movlb	0	; select bank0
 10916  1AB8  00A7               	movwf	??_BlockErase
 10917  1AB9  0827               	movf	??_BlockErase,w
 10918  1ABA  0023               	movlb	3	; select bank3
 10919  1ABB  0595               	andwf	21,f	;volatile
 10920                           
 10921                           ;FLASH.c: 71: INTCON |= 0x80;
 10922  1ABC  178B               	bsf	11,7	;volatile
 10923  1ABD  0008               	return
 10924  1ABE                     __end_of_BlockErase:	
 10925                           
 10926                           	psect	text19
 10927  18E0                     __ptext19:	
 10928 ;; *************** function _UNLOCK *****************
 10929 ;; Defined at:
 10930 ;;		line 51 in file "FLASH.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;		None               void
 10937 ;; Registers used:
 10938 ;;		wreg
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        0 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    3
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_BlockErase
 10955 ;;		_WriteFlash_Sequential
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _UNLOCK
 10961  18E0                     _UNLOCK:	
 10962                           
 10963                           ;FLASH.c: 53: PMCON2 = 0x55;
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _UNLOCK: [wreg]
 10967  18E0  3055               	movlw	85
 10968  18E1  0023               	movlb	3	; select bank3
 10969  18E2  0096               	movwf	22	;volatile
 10970                           
 10971                           ;FLASH.c: 54: PMCON2 = 0xAA;
 10972  18E3  30AA               	movlw	170
 10973  18E4  0096               	movwf	22	;volatile
 10974                           
 10975                           ;FLASH.c: 55: PMCON1 |= 0b00000010;
 10976  18E5  1495               	bsf	21,1	;volatile
 10977  18E6                     l1001:	
 10978                           ;FLASH.c: 56: while(PMCON1 & 0b00000010);
 10979                           
 10980  18E6  1895               	btfsc	21,1	;volatile
 10981  18E7  28E6               	goto	l1001
 10982                           
 10983                           ;FLASH.c: 57: __nop();
 10984  18E8  0000               	nop
 10985                           
 10986                           ;FLASH.c: 58: __nop();
 10987  18E9  0000               	nop
 10988  18EA  0008               	return
 10989  18EB                     __end_of_UNLOCK:	
 10990                           
 10991                           	psect	text20
 10992  1D55                     __ptext20:	
 10993 ;; *************** function _Reverse_Byte *****************
 10994 ;; Defined at:
 10995 ;;		line 314 in file "MISC.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;  This            1    wreg     unsigned char 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  This            1    8[BANK0 ] unsigned char 
 11000 ;;  temp            1    7[BANK0 ] unsigned char 
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  1    wreg      unsigned char 
 11003 ;; Registers used:
 11004 ;;		wreg, status,2, status,0
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;Total ram usage:        4 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    3
 11017 ;; This function calls:
 11018 ;;		Nothing
 11019 ;; This function is called by:
 11020 ;;		_PS_2_Update
 11021 ;; This function uses a non-reentrant model
 11022 ;;
 11023                           
 11024                           
 11025                           ;psect for function _Reverse_Byte
 11026  1D55                     _Reverse_Byte:	
 11027                           
 11028                           ;incstack = 0
 11029                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 11030                           ;Reverse_Byte@This stored from wreg
 11031  1D55  0020               	movlb	0	; select bank0
 11032  1D56  00A8               	movwf	Reverse_Byte@This
 11033                           
 11034                           ;MISC.c: 316: unsigned char temp=0;
 11035  1D57  01A7               	clrf	Reverse_Byte@temp
 11036                           
 11037                           ;MISC.c: 318: temp += (This & 0x01) << 7;
 11038  1D58  0828               	movf	Reverse_Byte@This,w
 11039  1D59  3901               	andlw	1
 11040  1D5A  00A5               	movwf	??_Reverse_Byte
 11041  1D5B  3006               	movlw	6
 11042  1D5C                     u8015:	
 11043  1D5C  35A5               	lslf	??_Reverse_Byte,f
 11044  1D5D  3EFF               	addlw	-1
 11045  1D5E  1D03               	skipz
 11046  1D5F  2D5C               	goto	u8015
 11047  1D60  3525               	lslf	??_Reverse_Byte,w
 11048  1D61  00A6               	movwf	??_Reverse_Byte+1
 11049  1D62  0826               	movf	??_Reverse_Byte+1,w
 11050  1D63  07A7               	addwf	Reverse_Byte@temp,f
 11051                           
 11052                           ;MISC.c: 319: temp += (This & 0x02) << 5;
 11053  1D64  0828               	movf	Reverse_Byte@This,w
 11054  1D65  3902               	andlw	2
 11055  1D66  00A5               	movwf	??_Reverse_Byte
 11056  1D67  3004               	movlw	4
 11057  1D68                     u8025:	
 11058  1D68  35A5               	lslf	??_Reverse_Byte,f
 11059  1D69  3EFF               	addlw	-1
 11060  1D6A  1D03               	skipz
 11061  1D6B  2D68               	goto	u8025
 11062  1D6C  3525               	lslf	??_Reverse_Byte,w
 11063  1D6D  00A6               	movwf	??_Reverse_Byte+1
 11064  1D6E  0826               	movf	??_Reverse_Byte+1,w
 11065  1D6F  07A7               	addwf	Reverse_Byte@temp,f
 11066                           
 11067                           ;MISC.c: 320: temp += (This & 0x04) << 3;
 11068  1D70  0828               	movf	Reverse_Byte@This,w
 11069  1D71  3904               	andlw	4
 11070  1D72  00A5               	movwf	??_Reverse_Byte
 11071  1D73  3002               	movlw	2
 11072  1D74                     u8035:	
 11073  1D74  35A5               	lslf	??_Reverse_Byte,f
 11074  1D75  3EFF               	addlw	-1
 11075  1D76  1D03               	skipz
 11076  1D77  2D74               	goto	u8035
 11077  1D78  3525               	lslf	??_Reverse_Byte,w
 11078  1D79  00A6               	movwf	??_Reverse_Byte+1
 11079  1D7A  0826               	movf	??_Reverse_Byte+1,w
 11080  1D7B  07A7               	addwf	Reverse_Byte@temp,f
 11081                           
 11082                           ;MISC.c: 321: temp += (This & 0x08) << 1;
 11083  1D7C  0828               	movf	Reverse_Byte@This,w
 11084  1D7D  3908               	andlw	8
 11085  1D7E  0709               	addwf	9,w
 11086  1D7F  00A5               	movwf	??_Reverse_Byte
 11087  1D80  0825               	movf	??_Reverse_Byte,w
 11088  1D81  07A7               	addwf	Reverse_Byte@temp,f
 11089                           
 11090                           ;MISC.c: 322: temp += (This & 0x10) >> 1;
 11091  1D82  3628               	lsrf	Reverse_Byte@This,w
 11092  1D83  3908               	andlw	8
 11093  1D84  00A5               	movwf	??_Reverse_Byte
 11094  1D85  0825               	movf	??_Reverse_Byte,w
 11095  1D86  07A7               	addwf	Reverse_Byte@temp,f
 11096                           
 11097                           ;MISC.c: 323: temp += (This & 0x20) >> 3;
 11098  1D87  0828               	movf	Reverse_Byte@This,w
 11099  1D88  00A5               	movwf	??_Reverse_Byte
 11100  1D89  3003               	movlw	3
 11101  1D8A                     u8045:	
 11102  1D8A  36A5               	lsrf	??_Reverse_Byte,f
 11103  1D8B  0B89               	decfsz	9,f
 11104  1D8C  2D8A               	goto	u8045
 11105  1D8D  0825               	movf	??_Reverse_Byte,w
 11106  1D8E  3904               	andlw	4
 11107  1D8F  00A6               	movwf	??_Reverse_Byte+1
 11108  1D90  0826               	movf	??_Reverse_Byte+1,w
 11109  1D91  07A7               	addwf	Reverse_Byte@temp,f
 11110                           
 11111                           ;MISC.c: 324: temp += (This & 0x40) >> 5;
 11112  1D92  0828               	movf	Reverse_Byte@This,w
 11113  1D93  00A5               	movwf	??_Reverse_Byte
 11114  1D94  3005               	movlw	5
 11115  1D95                     u8055:	
 11116  1D95  36A5               	lsrf	??_Reverse_Byte,f
 11117  1D96  0B89               	decfsz	9,f
 11118  1D97  2D95               	goto	u8055
 11119  1D98  0825               	movf	??_Reverse_Byte,w
 11120  1D99  3902               	andlw	2
 11121  1D9A  00A6               	movwf	??_Reverse_Byte+1
 11122  1D9B  0826               	movf	??_Reverse_Byte+1,w
 11123  1D9C  07A7               	addwf	Reverse_Byte@temp,f
 11124                           
 11125                           ;MISC.c: 325: temp += (This & 0x80) >> 7;
 11126  1D9D  0828               	movf	Reverse_Byte@This,w
 11127  1D9E  00A5               	movwf	??_Reverse_Byte
 11128  1D9F  3007               	movlw	7
 11129  1DA0                     u8065:	
 11130  1DA0  36A5               	lsrf	??_Reverse_Byte,f
 11131  1DA1  0B89               	decfsz	9,f
 11132  1DA2  2DA0               	goto	u8065
 11133  1DA3  0825               	movf	??_Reverse_Byte,w
 11134  1DA4  3901               	andlw	1
 11135  1DA5  00A6               	movwf	??_Reverse_Byte+1
 11136  1DA6  0826               	movf	??_Reverse_Byte+1,w
 11137  1DA7  07A7               	addwf	Reverse_Byte@temp,f
 11138                           
 11139                           ;MISC.c: 327: return temp;
 11140  1DA8  0827               	movf	Reverse_Byte@temp,w
 11141  1DA9  0008               	return
 11142  1DAA                     __end_of_Reverse_Byte:	
 11143                           
 11144                           	psect	text21
 11145  1911                     __ptext21:	
 11146 ;; *************** function _ISNUMBER *****************
 11147 ;; Defined at:
 11148 ;;		line 330 in file "MISC.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  ascii           1    wreg     unsigned char 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  ascii           1    5[BANK0 ] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      unsigned char 
 11155 ;; Registers used:
 11156 ;;		wreg
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;Total ram usage:        1 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    3
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_PS_2_Update
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           
 11177                           ;psect for function _ISNUMBER
 11178  1911                     _ISNUMBER:	
 11179                           
 11180                           ;incstack = 0
 11181                           ; Regs used in _ISNUMBER: [wreg]
 11182                           ;ISNUMBER@ascii stored from wreg
 11183  1911  0020               	movlb	0	; select bank0
 11184  1912  00A5               	movwf	ISNUMBER@ascii
 11185                           
 11186                           ;MISC.c: 332: if(ascii >= '0' && ascii <='9')
 11187  1913  3030               	movlw	48
 11188  1914  0225               	subwf	ISNUMBER@ascii,w
 11189  1915  1C03               	skipc
 11190  1916  291D               	goto	l6246
 11191  1917  303A               	movlw	58
 11192  1918  0225               	subwf	ISNUMBER@ascii,w
 11193  1919  1803               	skipnc
 11194  191A  291D               	goto	l6246
 11195                           
 11196                           ;MISC.c: 333: {
 11197                           ;MISC.c: 334: return 1;
 11198  191B  3001               	movlw	1
 11199                           
 11200                           ;MISC.c: 335: }
 11201  191C  0008               	return
 11202  191D                     l6246:	
 11203                           
 11204                           ;MISC.c: 336: else
 11205                           ;MISC.c: 337: {
 11206                           ;MISC.c: 338: return 0;
 11207  191D  3000               	movlw	0
 11208  191E  0008               	return
 11209  191F                     __end_of_ISNUMBER:	
 11210                           
 11211                           	psect	text22
 11212  199D                     __ptext22:	
 11213 ;; *************** function _Decode_Scan_Code_Shift *****************
 11214 ;; Defined at:
 11215 ;;		line 769 in file "PS_2.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;  Code            1    wreg     unsigned char 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  Code            1    5[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      unsigned char 
 11222 ;; Registers used:
 11223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        1 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    3
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_PS_2_Update
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _Decode_Scan_Code_Shift
 11245  199D                     _Decode_Scan_Code_Shift:	
 11246                           
 11247                           ;incstack = 0
 11248                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11249                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11250  199D  0020               	movlb	0	; select bank0
 11251  199E  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11252                           
 11253                           ;PS_2.c: 771: Code -= 13;
 11254  199F  300D               	movlw	13
 11255  19A0  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11256                           
 11257                           ;PS_2.c: 772: if(Code <=112)
 11258  19A1  3071               	movlw	113
 11259  19A2  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11260  19A3  1803               	skipnc
 11261  19A4  29AE               	goto	l6320
 11262                           
 11263                           ;PS_2.c: 773: {
 11264                           ;PS_2.c: 774: return ScanCodeSHIFT[Code];
 11265  19A5  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11266  19A6  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11267  19A7  0084               	movwf	4
 11268  19A8  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11269  19A9  1803               	skipnc
 11270  19AA  3E01               	addlw	1
 11271  19AB  0085               	movwf	5
 11272  19AC  0800               	movf	0,w	;code access
 11273                           
 11274                           ;PS_2.c: 775: }
 11275  19AD  0008               	return
 11276  19AE                     l6320:	
 11277                           
 11278                           ;PS_2.c: 776: else
 11279                           ;PS_2.c: 777: {
 11280                           ;PS_2.c: 778: return 0;
 11281  19AE  3000               	movlw	0
 11282  19AF  0008               	return
 11283  19B0                     __end_of_Decode_Scan_Code_Shift:	
 11284                           
 11285                           	psect	text23
 11286  198A                     __ptext23:	
 11287 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11288 ;; Defined at:
 11289 ;;		line 784 in file "PS_2.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;  Code            1    wreg     unsigned char 
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;  Code            1    5[BANK0 ] unsigned char 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      unsigned char 
 11296 ;; Registers used:
 11297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;Total ram usage:        1 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    3
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_PS_2_Update
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           
 11318                           ;psect for function _Decode_Scan_Code_FunctionE0
 11319  198A                     _Decode_Scan_Code_FunctionE0:	
 11320                           
 11321                           ;incstack = 0
 11322                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11323                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11324  198A  0020               	movlb	0	; select bank0
 11325  198B  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11326                           
 11327                           ;PS_2.c: 786: Code -= 17;
 11328  198C  3011               	movlw	17
 11329  198D  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11330                           
 11331                           ;PS_2.c: 787: if(Code <=108)
 11332  198E  306D               	movlw	109
 11333  198F  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11334  1990  1803               	skipnc
 11335  1991  299B               	goto	l6482
 11336                           
 11337                           ;PS_2.c: 788: {
 11338                           ;PS_2.c: 789: return ScanCodeFunctionE0[Code];
 11339  1992  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11340  1993  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11341  1994  0084               	movwf	4
 11342  1995  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11343  1996  1803               	skipnc
 11344  1997  3E01               	addlw	1
 11345  1998  0085               	movwf	5
 11346  1999  0800               	movf	0,w	;code access
 11347                           
 11348                           ;PS_2.c: 790: }
 11349  199A  0008               	return
 11350  199B                     l6482:	
 11351                           
 11352                           ;PS_2.c: 791: else
 11353                           ;PS_2.c: 792: {
 11354                           ;PS_2.c: 793: return 0;
 11355  199B  3000               	movlw	0
 11356  199C  0008               	return
 11357  199D                     __end_of_Decode_Scan_Code_FunctionE0:	
 11358                           
 11359                           	psect	text24
 11360  192F                     __ptext24:	
 11361 ;; *************** function _Decode_Scan_Code_Function *****************
 11362 ;; Defined at:
 11363 ;;		line 799 in file "PS_2.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  Code            1    wreg     unsigned char 
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;  Code            1    5[BANK0 ] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      unsigned char 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr0l, fsr0h, pclath
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;Total ram usage:        1 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    3
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_PS_2_Update
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           
 11392                           ;psect for function _Decode_Scan_Code_Function
 11393  192F                     _Decode_Scan_Code_Function:	
 11394                           
 11395                           ;incstack = 0
 11396                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11397                           ;Decode_Scan_Code_Function@Code stored from wreg
 11398  192F  0020               	movlb	0	; select bank0
 11399  1930  00A5               	movwf	Decode_Scan_Code_Function@Code
 11400                           
 11401                           ;PS_2.c: 801: if(Code <=131)
 11402  1931  3084               	movlw	132
 11403  1932  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11404  1933  1803               	skipnc
 11405  1934  293E               	goto	l6506
 11406                           
 11407                           ;PS_2.c: 802: {
 11408                           ;PS_2.c: 803: return ScanCodeFunctionNoE0[Code];
 11409  1935  0825               	movf	Decode_Scan_Code_Function@Code,w
 11410  1936  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11411  1937  0084               	movwf	4
 11412  1938  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11413  1939  1803               	skipnc
 11414  193A  3E01               	addlw	1
 11415  193B  0085               	movwf	5
 11416  193C  0800               	movf	0,w	;code access
 11417                           
 11418                           ;PS_2.c: 804: }
 11419  193D  0008               	return
 11420  193E                     l6506:	
 11421                           
 11422                           ;PS_2.c: 805: else
 11423                           ;PS_2.c: 806: {
 11424                           ;PS_2.c: 807: return 0;
 11425  193E  3000               	movlw	0
 11426  193F  0008               	return
 11427  1940                     __end_of_Decode_Scan_Code_Function:	
 11428                           
 11429                           	psect	text25
 11430  1977                     __ptext25:	
 11431 ;; *************** function _Decode_Scan_Code *****************
 11432 ;; Defined at:
 11433 ;;		line 755 in file "PS_2.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  Code            1    wreg     unsigned char 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  Code            1    5[BANK0 ] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      unsigned char 
 11440 ;; Registers used:
 11441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;Total ram usage:        1 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    3
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_PS_2_Update
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           
 11462                           ;psect for function _Decode_Scan_Code
 11463  1977                     _Decode_Scan_Code:	
 11464                           
 11465                           ;incstack = 0
 11466                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11467                           ;Decode_Scan_Code@Code stored from wreg
 11468  1977  0020               	movlb	0	; select bank0
 11469  1978  00A5               	movwf	Decode_Scan_Code@Code
 11470                           
 11471                           ;PS_2.c: 757: Code -= 13;
 11472  1979  300D               	movlw	13
 11473  197A  02A5               	subwf	Decode_Scan_Code@Code,f
 11474                           
 11475                           ;PS_2.c: 758: if(Code <=112)
 11476  197B  3071               	movlw	113
 11477  197C  0225               	subwf	Decode_Scan_Code@Code,w
 11478  197D  1803               	skipnc
 11479  197E  2988               	goto	l6494
 11480                           
 11481                           ;PS_2.c: 759: {
 11482                           ;PS_2.c: 760: return ScanCode[Code];
 11483  197F  0825               	movf	Decode_Scan_Code@Code,w
 11484  1980  3E84               	addlw	low (_ScanCode| (0+32768))
 11485  1981  0084               	movwf	4
 11486  1982  3088               	movlw	high (_ScanCode| (0+32768))
 11487  1983  1803               	skipnc
 11488  1984  3E01               	addlw	1
 11489  1985  0085               	movwf	5
 11490  1986  0800               	movf	0,w	;code access
 11491                           
 11492                           ;PS_2.c: 761: }
 11493  1987  0008               	return
 11494  1988                     l6494:	
 11495                           
 11496                           ;PS_2.c: 762: else
 11497                           ;PS_2.c: 763: {
 11498                           ;PS_2.c: 764: return 0;
 11499  1988  3000               	movlw	0
 11500  1989  0008               	return
 11501  198A                     __end_of_Decode_Scan_Code:	
 11502                           
 11503                           	psect	text26
 11504  1583                     __ptext26:	
 11505 ;; *************** function _Init_System *****************
 11506 ;; Defined at:
 11507 ;;		line 78 in file "user.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11512 ;;  Baud            4   65[BANK1 ] unsigned long 
 11513 ;;  temp            4   60[BANK1 ] unsigned long 
 11514 ;;  Parity          1   64[BANK1 ] unsigned char 
 11515 ;; Return value:  Size  Location     Type
 11516 ;;		None               void
 11517 ;; Registers used:
 11518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11519 ;; Tracked objects:
 11520 ;;		On entry : 0/0
 11521 ;;		On exit  : 0/0
 11522 ;;		Unchanged: 0/0
 11523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;Total ram usage:       74 bytes
 11529 ;; Hardware stack levels used:    1
 11530 ;; Hardware stack levels required when called:    6
 11531 ;; This function calls:
 11532 ;;		_InitUART
 11533 ;;		_ReadBaud
 11534 ;;		_UARTstringWAIT
 11535 ;;		_delayUS
 11536 ;;		_sprintf
 11537 ;; This function is called by:
 11538 ;;		_main
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function _Init_System
 11544  1583                     _Init_System:	
 11545                           
 11546                           ;user.c: 80: unsigned long temp =0;
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11550  1583  3000               	movlw	0
 11551  1584  0021               	movlb	1	; select bank1
 11552  1585  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11553  1586  3000               	movlw	0
 11554  1587  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11555  1588  3000               	movlw	0
 11556  1589  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11557  158A  3000               	movlw	0
 11558  158B  00DC               	movwf	Init_System@temp^(0+128)
 11559                           
 11560                           ;user.c: 81: unsigned long Baud =0;
 11561  158C  3000               	movlw	0
 11562  158D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11563  158E  3000               	movlw	0
 11564  158F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11565  1590  3000               	movlw	0
 11566  1591  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11567  1592  3000               	movlw	0
 11568  1593  00E1               	movwf	Init_System@Baud^(0+128)
 11569                           
 11570                           ;user.c: 82: unsigned char Parity =0;
 11571  1594  01E0               	clrf	Init_System@Parity^(0+128)
 11572                           
 11573                           ;user.c: 83: unsigned char buf[60];
 11574                           ;user.c: 85: temp = ReadBaud((0x1800 >> 5),0);
 11575  1595  30C0               	movlw	192
 11576  1596  0020               	movlb	0	; select bank0
 11577  1597  00B7               	movwf	ReadBaud@row
 11578  1598  3000               	movlw	0
 11579  1599  00B8               	movwf	ReadBaud@row+1
 11580  159A  01B9               	clrf	ReadBaud@column
 11581  159B  319E  265D  3195   	fcall	_ReadBaud
 11582  159E  0020               	movlb	0	; select bank0
 11583  159F  083A               	movf	?_ReadBaud+3,w
 11584  15A0  0021               	movlb	1	; select bank1
 11585  15A1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11586  15A2  0020               	movlb	0	; select bank0
 11587  15A3  0839               	movf	?_ReadBaud+2,w
 11588  15A4  0021               	movlb	1	; select bank1
 11589  15A5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11590  15A6  0020               	movlb	0	; select bank0
 11591  15A7  0838               	movf	?_ReadBaud+1,w
 11592  15A8  0021               	movlb	1	; select bank1
 11593  15A9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11594  15AA  0020               	movlb	0	; select bank0
 11595  15AB  0837               	movf	?_ReadBaud,w
 11596  15AC  0021               	movlb	1	; select bank1
 11597  15AD  00DC               	movwf	Init_System@temp^(0+128)
 11598                           
 11599                           ;user.c: 86: Baud = temp & 0x000FFFFF;
 11600  15AE  30FF               	movlw	255
 11601  15AF  055C               	andwf	Init_System@temp^(0+128),w
 11602  15B0  00E1               	movwf	Init_System@Baud^(0+128)
 11603  15B1  30FF               	movlw	255
 11604  15B2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11605  15B3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11606  15B4  300F               	movlw	15
 11607  15B5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11608  15B6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11609  15B7  3000               	movlw	0
 11610  15B8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11611  15B9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11612                           
 11613                           ;user.c: 87: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11614  15BA  085C               	movf	Init_System@temp^(0+128),w
 11615  15BB  0020               	movlb	0	; select bank0
 11616  15BC  00D4               	movwf	??_Init_System
 11617  15BD  0021               	movlb	1	; select bank1
 11618  15BE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11619  15BF  0020               	movlb	0	; select bank0
 11620  15C0  00D5               	movwf	??_Init_System+1
 11621  15C1  0021               	movlb	1	; select bank1
 11622  15C2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11623  15C3  0020               	movlb	0	; select bank0
 11624  15C4  00D6               	movwf	??_Init_System+2
 11625  15C5  0021               	movlb	1	; select bank1
 11626  15C6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11627  15C7  0020               	movlb	0	; select bank0
 11628  15C8  00D7               	movwf	??_Init_System+3
 11629  15C9  3014               	movlw	20
 11630  15CA                     u10055:	
 11631  15CA  36D7               	lsrf	??_Init_System+3,f
 11632  15CB  0CD6               	rrf	??_Init_System+2,f
 11633  15CC  0CD5               	rrf	??_Init_System+1,f
 11634  15CD  0CD4               	rrf	??_Init_System,f
 11635  15CE  0B89               	decfsz	9,f
 11636  15CF  2DCA               	goto	u10055
 11637  15D0  0854               	movf	??_Init_System,w
 11638  15D1  390F               	andlw	15
 11639  15D2  00D8               	movwf	??_Init_System+4
 11640  15D3  0858               	movf	??_Init_System+4,w
 11641  15D4  0021               	movlb	1	; select bank1
 11642  15D5  00E0               	movwf	Init_System@Parity^(0+128)
 11643                           
 11644                           ;user.c: 88: if(Baud <2400 || Baud > 115200)
 11645  15D6  3000               	movlw	0
 11646  15D7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11647  15D8  1D03               	skipz
 11648  15D9  2DE4               	goto	u10065
 11649  15DA  3000               	movlw	0
 11650  15DB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11651  15DC  1D03               	skipz
 11652  15DD  2DE4               	goto	u10065
 11653  15DE  3009               	movlw	9
 11654  15DF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11655  15E0  1D03               	skipz
 11656  15E1  2DE4               	goto	u10065
 11657  15E2  3060               	movlw	96
 11658  15E3  0261               	subwf	Init_System@Baud^(0+128),w
 11659  15E4                     u10065:	
 11660  15E4  1C03               	skipc
 11661  15E5  2DF6               	goto	l7220
 11662  15E6  3000               	movlw	0
 11663  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11664  15E8  1D03               	skipz
 11665  15E9  2DF4               	goto	u10075
 11666  15EA  3001               	movlw	1
 11667  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11668  15EC  1D03               	skipz
 11669  15ED  2DF4               	goto	u10075
 11670  15EE  30C2               	movlw	194
 11671  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11672  15F0  1D03               	skipz
 11673  15F1  2DF4               	goto	u10075
 11674  15F2  3001               	movlw	1
 11675  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11676  15F4                     u10075:	
 11677  15F4  1C03               	skipc
 11678  15F5  2DFF               	goto	l7224
 11679  15F6                     l7220:	
 11680                           
 11681                           ;user.c: 89: {
 11682                           ;user.c: 91: Baud = 9600;
 11683  15F6  3000               	movlw	0
 11684  15F7  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11685  15F8  3000               	movlw	0
 11686  15F9  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11687  15FA  3025               	movlw	37
 11688  15FB  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11689  15FC  3080               	movlw	128
 11690  15FD  00E1               	movwf	Init_System@Baud^(0+128)
 11691                           
 11692                           ;user.c: 92: Parity = 0;
 11693  15FE  01E0               	clrf	Init_System@Parity^(0+128)
 11694  15FF                     l7224:	
 11695                           
 11696                           ;user.c: 93: }
 11697                           ;user.c: 94: InitUART(Baud, Parity);
 11698  15FF  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11699  1600  0020               	movlb	0	; select bank0
 11700  1601  00B6               	movwf	InitUART@Baud+3
 11701  1602  0021               	movlb	1	; select bank1
 11702  1603  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11703  1604  0020               	movlb	0	; select bank0
 11704  1605  00B5               	movwf	InitUART@Baud+2
 11705  1606  0021               	movlb	1	; select bank1
 11706  1607  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11707  1608  0020               	movlb	0	; select bank0
 11708  1609  00B4               	movwf	InitUART@Baud+1
 11709  160A  0021               	movlb	1	; select bank1
 11710  160B  0861               	movf	Init_System@Baud^(0+128),w
 11711  160C  0020               	movlb	0	; select bank0
 11712  160D  00B3               	movwf	InitUART@Baud
 11713  160E  0021               	movlb	1	; select bank1
 11714  160F  0860               	movf	Init_System@Parity^(0+128),w
 11715  1610  0020               	movlb	0	; select bank0
 11716  1611  00D4               	movwf	??_Init_System
 11717  1612  0854               	movf	??_Init_System,w
 11718  1613  00B7               	movwf	InitUART@parity
 11719  1614  3191  21BC  3195   	fcall	_InitUART
 11720                           
 11721                           ;user.c: 95: UARTstringWAIT("\r\n");
 11722  1617  303D               	movlw	low ((STR_11+17)| (0+32768))
 11723  1618  0020               	movlb	0	; select bank0
 11724  1619  00B4               	movwf	UARTstringWAIT@data
 11725  161A  308C               	movlw	high ((STR_11+17)| (0+32768))
 11726  161B  00B5               	movwf	UARTstringWAIT@data+1
 11727  161C  319A  22F0  3195   	fcall	_UARTstringWAIT
 11728                           
 11729                           ;user.c: 96: delayUS(10000);
 11730  161F  3000               	movlw	0
 11731  1620  0020               	movlb	0	; select bank0
 11732  1621  00A8               	movwf	delayUS@US+3
 11733  1622  3000               	movlw	0
 11734  1623  00A7               	movwf	delayUS@US+2
 11735  1624  3027               	movlw	39
 11736  1625  00A6               	movwf	delayUS@US+1
 11737  1626  3010               	movlw	16
 11738  1627  00A5               	movwf	delayUS@US
 11739  1628  319B  2323  3195   	fcall	_delayUS
 11740                           
 11741                           ;user.c: 97: if(Parity)
 11742  162B  0021               	movlb	1	; select bank1
 11743  162C  0860               	movf	Init_System@Parity^(0+128),w
 11744  162D  1903               	btfsc	3,2
 11745  162E  2E61               	goto	l7246
 11746                           
 11747                           ;user.c: 98: {
 11748                           ;user.c: 99: switch (Parity)
 11749  162F  2E54               	goto	l7244
 11750  1630                     l7234:	
 11751                           ;user.c: 100: {
 11752                           ;user.c: 101: case 1:
 11753                           
 11754                           
 11755                           ;user.c: 102: sprintf(buf,"Baud is %lu with Odd parity bit\r\n",Baud);
 11756  1630  30A0               	movlw	low Init_System@buf
 11757  1631  0020               	movlb	0	; select bank0
 11758  1632  00BD               	movwf	sprintf@sp
 11759  1633  3000               	movlw	high Init_System@buf
 11760  1634  00BE               	movwf	sprintf@sp+1
 11761  1635  303F               	movlw	low (STR_13| (0+32768))
 11762  1636  00BF               	movwf	sprintf@f
 11763  1637  308B               	movlw	high (STR_13| (0+32768))
 11764  1638  2E69               	goto	L16
 11765  1639                     l7236:	
 11766                           ;user.c: 104: case 2:
 11767                           
 11768                           ;user.c: 103: break;
 11769                           
 11770                           
 11771                           ;user.c: 105: sprintf(buf,"Baud is %lu with Even parity bit\r\n",Baud);
 11772  1639  30A0               	movlw	low Init_System@buf
 11773  163A  0020               	movlb	0	; select bank0
 11774  163B  00BD               	movwf	sprintf@sp
 11775  163C  3000               	movlw	high Init_System@buf
 11776  163D  00BE               	movwf	sprintf@sp+1
 11777  163E  30F9               	movlw	low (STR_14| (0+32768))
 11778  163F  00BF               	movwf	sprintf@f
 11779  1640  308A               	movlw	high (STR_14| (0+32768))
 11780  1641  2E69               	goto	L16
 11781  1642                     l7238:	
 11782                           ;user.c: 107: case 3:
 11783                           
 11784                           ;user.c: 106: break;
 11785                           
 11786                           
 11787                           ;user.c: 108: sprintf(buf,"Baud is %lu with Mark bit\r\n",Baud);
 11788  1642  30A0               	movlw	low Init_System@buf
 11789  1643  0020               	movlb	0	; select bank0
 11790  1644  00BD               	movwf	sprintf@sp
 11791  1645  3000               	movlw	high Init_System@buf
 11792  1646  00BE               	movwf	sprintf@sp+1
 11793  1647  309F               	movlw	low (STR_15| (0+32768))
 11794  1648  00BF               	movwf	sprintf@f
 11795  1649  308B               	movlw	high (STR_15| (0+32768))
 11796  164A  2E69               	goto	L16
 11797  164B                     l7240:	
 11798                           ;user.c: 110: default:
 11799                           
 11800                           ;user.c: 109: break;
 11801                           
 11802                           
 11803                           ;user.c: 111: sprintf(buf,"Baud is %lu with Space bit\r\n",Baud);
 11804  164B  30A0               	movlw	low Init_System@buf
 11805  164C  0020               	movlb	0	; select bank0
 11806  164D  00BD               	movwf	sprintf@sp
 11807  164E  3000               	movlw	high Init_System@buf
 11808  164F  00BE               	movwf	sprintf@sp+1
 11809  1650  3082               	movlw	low (STR_16| (0+32768))
 11810  1651  00BF               	movwf	sprintf@f
 11811  1652  308B               	movlw	high (STR_16| (0+32768))
 11812  1653  2E69               	goto	L16
 11813  1654                     l7244:	
 11814                           ;user.c: 113: }
 11815                           
 11816                           ;user.c: 112: break;
 11817                           
 11818  1654  0021               	movlb	1	; select bank1
 11819  1655  0860               	movf	Init_System@Parity^(0+128),w
 11820                           
 11821                           ; Switch size 1, requested type "space"
 11822                           ; Number of cases is 3, Range of values is 1 to 3
 11823                           ; switch strategies available:
 11824                           ; Name         Instructions Cycles
 11825                           ; simple_byte           10     6 (average)
 11826                           ; direct_byte           15     9 (fixed)
 11827                           ; jumptable            263     9 (fixed)
 11828                           ;	Chosen strategy is simple_byte
 11829  1656  3A01               	xorlw	1	; case 1
 11830  1657  1903               	skipnz
 11831  1658  2E30               	goto	l7234
 11832  1659  3A03               	xorlw	3	; case 2
 11833  165A  1903               	skipnz
 11834  165B  2E39               	goto	l7236
 11835  165C  3A01               	xorlw	1	; case 3
 11836  165D  1903               	skipnz
 11837  165E  2E42               	goto	l7238
 11838  165F  2E4B               	goto	l7240
 11839                           
 11840                           ;user.c: 114: }
 11841  1660  2E7D               	goto	l7248
 11842  1661                     l7246:	
 11843                           
 11844                           ;user.c: 115: else
 11845                           ;user.c: 116: {
 11846                           ;user.c: 117: sprintf(buf,"Baud is %lu with no parity bit\r\n",Baud);
 11847  1661  30A0               	movlw	low Init_System@buf
 11848  1662  0020               	movlb	0	; select bank0
 11849  1663  00BD               	movwf	sprintf@sp
 11850  1664  3000               	movlw	high Init_System@buf
 11851  1665  00BE               	movwf	sprintf@sp+1
 11852  1666  3061               	movlw	low (STR_17| (0+32768))
 11853  1667  00BF               	movwf	sprintf@f
 11854  1668  308B               	movlw	high (STR_17| (0+32768))
 11855  1669                     L16:	
 11856  1669  00C0               	movwf	sprintf@f+1
 11857  166A  0021               	movlb	1	; select bank1
 11858  166B  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11859  166C  0020               	movlb	0	; select bank0
 11860  166D  00C4               	movwf	?_sprintf+7
 11861  166E  0021               	movlb	1	; select bank1
 11862  166F  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11863  1670  0020               	movlb	0	; select bank0
 11864  1671  00C3               	movwf	?_sprintf+6
 11865  1672  0021               	movlb	1	; select bank1
 11866  1673  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11867  1674  0020               	movlb	0	; select bank0
 11868  1675  00C2               	movwf	?_sprintf+5
 11869  1676  0021               	movlb	1	; select bank1
 11870  1677  0861               	movf	Init_System@Baud^(0+128),w
 11871  1678  0020               	movlb	0	; select bank0
 11872  1679  00C1               	movwf	?_sprintf+4
 11873  167A  3194  248F  3195   	fcall	_sprintf
 11874  167D                     l7248:	
 11875                           
 11876                           ;user.c: 118: }
 11877                           ;user.c: 119: UARTstringWAIT(buf);
 11878  167D  30A0               	movlw	low Init_System@buf
 11879  167E  0020               	movlb	0	; select bank0
 11880  167F  00B4               	movwf	UARTstringWAIT@data
 11881  1680  3000               	movlw	high Init_System@buf
 11882  1681  00B5               	movwf	UARTstringWAIT@data+1
 11883  1682  319A  22F0  3195   	fcall	_UARTstringWAIT
 11884                           
 11885                           ;user.c: 120: delayUS(10000);
 11886  1685  3000               	movlw	0
 11887  1686  0020               	movlb	0	; select bank0
 11888  1687  00A8               	movwf	delayUS@US+3
 11889  1688  3000               	movlw	0
 11890  1689  00A7               	movwf	delayUS@US+2
 11891  168A  3027               	movlw	39
 11892  168B  00A6               	movwf	delayUS@US+1
 11893  168C  3010               	movlw	16
 11894  168D  00A5               	movwf	delayUS@US
 11895  168E  319B  2323         	fcall	_delayUS
 11896                           
 11897                           ;user.c: 122: INTCON |= 0x08;
 11898  1690  158B               	bsf	11,3	;volatile
 11899                           
 11900                           ;user.c: 123: INTCONbits.GIE = 1;
 11901  1691  178B               	bsf	11,7	;volatile
 11902  1692  0008               	return
 11903  1693                     __end_of_Init_System:	
 11904                           
 11905                           	psect	text27
 11906  148F                     __ptext27:	
 11907 ;; *************** function _sprintf *****************
 11908 ;; Defined at:
 11909 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11912 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11913 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11914 ;;		 -> STR_33(45), STR_32(41), STR_31(40), STR_30(47), 
 11915 ;;		 -> STR_29(46), STR_24(33), STR_23(29), STR_22(28), 
 11916 ;;		 -> STR_21(35), STR_20(34), STR_17(33), STR_16(29), 
 11917 ;;		 -> STR_15(28), STR_14(35), STR_13(34), 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  _val            4   46[BANK0 ] struct .
 11920 ;;  prec            2   44[BANK0 ] int 
 11921 ;;  c               1   51[BANK0 ] char 
 11922 ;;  ap              1   50[BANK0 ] PTR void [1]
 11923 ;;		 -> ?_sprintf(2), 
 11924 ;;  flag            1   43[BANK0 ] unsigned char 
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  2   29[BANK0 ] int 
 11927 ;; Registers used:
 11928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:       23 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    4
 11941 ;; This function calls:
 11942 ;;		___lldiv
 11943 ;;		___llmod
 11944 ;; This function is called by:
 11945 ;;		_Init_System
 11946 ;;		_SetBaud
 11947 ;;		_PS_2_Update
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           
 11952                           ;psect for function _sprintf
 11953  148F                     _sprintf:	
 11954                           
 11955                           ;doprnt.c: 494: va_list ap;
 11956                           ;doprnt.c: 499: signed char c;
 11957                           ;doprnt.c: 504: int prec;
 11958                           ;doprnt.c: 508: unsigned char flag;
 11959                           ;doprnt.c: 527: union {
 11960                           ;doprnt.c: 528: unsigned long _val;
 11961                           ;doprnt.c: 529: struct {
 11962                           ;doprnt.c: 530: const char * _cp;
 11963                           ;doprnt.c: 531: unsigned _len;
 11964                           ;doprnt.c: 532: } _str;
 11965                           ;doprnt.c: 533: } _val;
 11966                           ;doprnt.c: 542: *ap = __va_start();
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11970  148F  3041               	movlw	(?_sprintf+4)& (0+255)
 11971  1490  0020               	movlb	0	; select bank0
 11972  1491  00C5               	movwf	??_sprintf
 11973  1492  0845               	movf	??_sprintf,w
 11974  1493  00D2               	movwf	sprintf@ap
 11975  1494                     l6182:	
 11976                           ;doprnt.c: 545: while(c = *f++) {
 11977                           
 11978  1494  0840               	movf	sprintf@f+1,w
 11979  1495  00C6               	movwf	??_sprintf+1
 11980  1496  083F               	movf	sprintf@f,w
 11981  1497  00C5               	movwf	??_sprintf
 11982  1498  0ABF               	incf	sprintf@f,f
 11983  1499  1903               	skipnz
 11984  149A  0AC0               	incf	sprintf@f+1,f
 11985  149B  0845               	movf	??_sprintf,w
 11986  149C  0084               	movwf	4
 11987  149D  0846               	movf	??_sprintf+1,w
 11988  149E  0085               	movwf	5
 11989  149F  0800               	movf	0,w	;code access
 11990  14A0  00C7               	movwf	??_sprintf+2
 11991  14A1  0847               	movf	??_sprintf+2,w
 11992  14A2  00D3               	movwf	sprintf@c
 11993  14A3  08D3               	movf	sprintf@c,f
 11994  14A4  1903               	btfsc	3,2
 11995  14A5  2D7D               	goto	l6184
 11996                           
 11997                           ;doprnt.c: 547: if(c != '%')
 11998  14A6  0853               	movf	sprintf@c,w
 11999  14A7  3A25               	xorlw	37
 12000  14A8  1903               	skipnz
 12001  14A9  2CB5               	goto	l6142
 12002                           
 12003                           ;doprnt.c: 549: {
 12004                           ;doprnt.c: 550: ((*sp++ = (c)));
 12005  14AA  083D               	movf	sprintf@sp,w
 12006  14AB  0086               	movwf	6
 12007  14AC  083E               	movf	sprintf@sp+1,w
 12008  14AD  0087               	movwf	7
 12009  14AE  0853               	movf	sprintf@c,w
 12010  14AF  0081               	movwf	1
 12011  14B0  3001               	movlw	1
 12012  14B1  07BD               	addwf	sprintf@sp,f
 12013  14B2  3000               	movlw	0
 12014  14B3  3DBE               	addwfc	sprintf@sp+1,f
 12015                           
 12016                           ;doprnt.c: 551: continue;
 12017  14B4  2C94               	goto	l6182
 12018  14B5                     l6142:	
 12019                           
 12020                           ;doprnt.c: 552: }
 12021                           ;doprnt.c: 557: flag = 0;
 12022  14B5  01CB               	clrf	sprintf@flag
 12023                           
 12024                           ;doprnt.c: 644: switch(c = *f++) {
 12025                           
 12026                           ;doprnt.c: 642: loop:
 12027  14B6  2CBE               	goto	l6148
 12028  14B7                     l1094:	
 12029                           ;doprnt.c: 650: case 'l':
 12030                           
 12031                           ;doprnt.c: 647: goto alldone;
 12032                           
 12033                           ;doprnt.c: 646: case 0:
 12034                           
 12035                           
 12036                           ;doprnt.c: 652: flag |= 0x10;
 12037  14B7  164B               	bsf	sprintf@flag,4
 12038                           
 12039                           ;doprnt.c: 653: goto loop;
 12040  14B8  2CBE               	goto	l6148
 12041  14B9                     l6144:	
 12042                           ;doprnt.c: 826: case 'u':
 12043                           
 12044                           ;doprnt.c: 822: continue;
 12045                           
 12046                           ;doprnt.c: 811: default:
 12047                           
 12048                           
 12049                           ;doprnt.c: 827: flag |= 0xC0;
 12050  14B9  30C0               	movlw	192
 12051  14BA  00C5               	movwf	??_sprintf
 12052  14BB  0845               	movf	??_sprintf,w
 12053  14BC  04CB               	iorwf	sprintf@flag,f
 12054                           
 12055                           ;doprnt.c: 831: }
 12056                           
 12057                           ;doprnt.c: 828: break;
 12058  14BD  2CD5               	goto	l1097
 12059  14BE                     l6148:	
 12060  14BE  0840               	movf	sprintf@f+1,w
 12061  14BF  00C6               	movwf	??_sprintf+1
 12062  14C0  083F               	movf	sprintf@f,w
 12063  14C1  00C5               	movwf	??_sprintf
 12064  14C2  0ABF               	incf	sprintf@f,f
 12065  14C3  1903               	skipnz
 12066  14C4  0AC0               	incf	sprintf@f+1,f
 12067  14C5  0845               	movf	??_sprintf,w
 12068  14C6  0084               	movwf	4
 12069  14C7  0846               	movf	??_sprintf+1,w
 12070  14C8  0085               	movwf	5
 12071  14C9  0800               	movf	0,w	;code access
 12072  14CA  00D3               	movwf	sprintf@c
 12073                           
 12074                           ; Switch size 1, requested type "space"
 12075                           ; Number of cases is 3, Range of values is 0 to 117
 12076                           ; switch strategies available:
 12077                           ; Name         Instructions Cycles
 12078                           ; simple_byte           10     6 (average)
 12079                           ; direct_byte          242     6 (fixed)
 12080                           ; jumptable            260     6 (fixed)
 12081                           ;	Chosen strategy is simple_byte
 12082  14CB  3A00               	xorlw	0	; case 0
 12083  14CC  1903               	skipnz
 12084  14CD  2D7D               	goto	l6184
 12085  14CE  3A6C               	xorlw	108	; case 108
 12086  14CF  1903               	skipnz
 12087  14D0  2CB7               	goto	l1094
 12088  14D1  3A19               	xorlw	25	; case 117
 12089  14D2  1903               	skipnz
 12090  14D3  2CB9               	goto	l6144
 12091  14D4  2C94               	goto	l6182
 12092  14D5                     l1097:	
 12093                           
 12094                           ;doprnt.c: 1282: {
 12095                           ;doprnt.c: 1290: if(flag & 0x10)
 12096  14D5  1E4B               	btfss	sprintf@flag,4
 12097  14D6  2CE4               	goto	l6154
 12098                           
 12099                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12100  14D7  0852               	movf	sprintf@ap,w
 12101  14D8  0086               	movwf	6
 12102  14D9  0187               	clrf	7
 12103  14DA  3F40               	moviw [0]fsr1
 12104  14DB  00CE               	movwf	sprintf@_val
 12105  14DC  3F41               	moviw [1]fsr1
 12106  14DD  00CF               	movwf	sprintf@_val+1
 12107  14DE  3F42               	moviw [2]fsr1
 12108  14DF  00D0               	movwf	sprintf@_val+2
 12109  14E0  3F43               	moviw [3]fsr1
 12110  14E1  00D1               	movwf	sprintf@_val+3
 12111  14E2  3004               	movlw	4
 12112  14E3  2CF2               	goto	L17
 12113  14E4                     l6154:	
 12114                           
 12115                           ;doprnt.c: 1292: else
 12116                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12117  14E4  0852               	movf	sprintf@ap,w
 12118  14E5  0086               	movwf	6
 12119  14E6  0187               	clrf	7
 12120  14E7  3F40               	moviw [0]fsr1
 12121  14E8  00C5               	movwf	??_sprintf
 12122  14E9  3F41               	moviw [1]fsr1
 12123  14EA  00C6               	movwf	??_sprintf+1
 12124  14EB  0845               	movf	??_sprintf,w
 12125  14EC  00CE               	movwf	sprintf@_val
 12126  14ED  0846               	movf	??_sprintf+1,w
 12127  14EE  00CF               	movwf	sprintf@_val+1
 12128  14EF  01D0               	clrf	sprintf@_val+2
 12129  14F0  01D1               	clrf	sprintf@_val+3
 12130  14F1  3002               	movlw	2
 12131  14F2                     L17:	
 12132  14F2  00C5               	movwf	??_sprintf
 12133  14F3  0845               	movf	??_sprintf,w
 12134  14F4  07D2               	addwf	sprintf@ap,f
 12135                           
 12136                           ;doprnt.c: 1296: }
 12137                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12138  14F5  01D3               	clrf	sprintf@c
 12139  14F6  0AD3               	incf	sprintf@c,f
 12140  14F7  0853               	movf	sprintf@c,w
 12141  14F8  3A0A               	xorlw	10
 12142  14F9  1903               	btfsc	3,2
 12143  14FA  2D28               	goto	l6172
 12144  14FB                     l6164:	
 12145                           
 12146                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12147  14FB  0853               	movf	sprintf@c,w
 12148  14FC  00C5               	movwf	??_sprintf
 12149  14FD  01C6               	clrf	??_sprintf+1
 12150  14FE  35C5               	lslf	??_sprintf,f
 12151  14FF  0DC6               	rlf	??_sprintf+1,f
 12152  1500  35C5               	lslf	??_sprintf,f
 12153  1501  0DC6               	rlf	??_sprintf+1,f
 12154  1502  30D3               	movlw	low (_dpowers| (0+32768))
 12155  1503  0745               	addwf	??_sprintf,w
 12156  1504  0084               	movwf	4
 12157  1505  3089               	movlw	high (_dpowers| (0+32768))
 12158  1506  3D46               	addwfc	??_sprintf+1,w
 12159  1507  0085               	movwf	5
 12160  1508  3F00               	moviw [0]fsr0
 12161  1509  00C7               	movwf	??_sprintf+2
 12162  150A  3F01               	moviw [1]fsr0
 12163  150B  00C8               	movwf	??_sprintf+3
 12164  150C  3F02               	moviw [2]fsr0
 12165  150D  00C9               	movwf	??_sprintf+4
 12166  150E  3F03               	moviw [3]fsr0
 12167  150F  00CA               	movwf	??_sprintf+5
 12168  1510  084A               	movf	??_sprintf+5,w
 12169  1511  0251               	subwf	sprintf@_val+3,w
 12170  1512  1D03               	skipz
 12171  1513  2D1E               	goto	u7925
 12172  1514  0849               	movf	??_sprintf+4,w
 12173  1515  0250               	subwf	sprintf@_val+2,w
 12174  1516  1D03               	skipz
 12175  1517  2D1E               	goto	u7925
 12176  1518  0848               	movf	??_sprintf+3,w
 12177  1519  024F               	subwf	sprintf@_val+1,w
 12178  151A  1D03               	skipz
 12179  151B  2D1E               	goto	u7925
 12180  151C  0847               	movf	??_sprintf+2,w
 12181  151D  024E               	subwf	sprintf@_val,w
 12182  151E                     u7925:	
 12183  151E  1C03               	btfss	3,0
 12184  151F  2D28               	goto	l6172
 12185                           
 12186                           ;doprnt.c: 1316: break;
 12187  1520  3001               	movlw	1
 12188  1521  00C5               	movwf	??_sprintf
 12189  1522  0845               	movf	??_sprintf,w
 12190  1523  07D3               	addwf	sprintf@c,f
 12191  1524  0853               	movf	sprintf@c,w
 12192  1525  3A0A               	xorlw	10
 12193  1526  1D03               	skipz
 12194  1527  2CFB               	goto	l6164
 12195  1528                     l6172:	
 12196                           
 12197                           ;doprnt.c: 1431: {
 12198                           ;doprnt.c: 1478: }
 12199                           ;doprnt.c: 1481: prec = c;
 12200  1528  0853               	movf	sprintf@c,w
 12201  1529  00CC               	movwf	sprintf@prec
 12202  152A  01CD               	clrf	sprintf@prec+1
 12203  152B  1BCC               	btfsc	sprintf@prec,7
 12204  152C  03CD               	decf	sprintf@prec+1,f
 12205  152D                     l6180:	
 12206                           ;doprnt.c: 1483: while(prec--) {
 12207                           
 12208  152D  30FF               	movlw	255
 12209  152E  07CC               	addwf	sprintf@prec,f
 12210  152F  30FF               	movlw	255
 12211  1530  3DCD               	addwfc	sprintf@prec+1,f
 12212  1531  30FF               	movlw	255
 12213  1532  064D               	xorwf	sprintf@prec+1,w
 12214  1533  1D03               	skipz
 12215  1534  2D37               	goto	u7945
 12216  1535  30FF               	movlw	255
 12217  1536  064C               	xorwf	sprintf@prec,w
 12218  1537                     u7945:	
 12219  1537  1903               	btfsc	3,2
 12220  1538  2C94               	goto	l6182
 12221                           
 12222                           ;doprnt.c: 1487: {
 12223                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12224  1539  3000               	movlw	0
 12225  153A  00B6               	movwf	___llmod@divisor+3
 12226  153B  3000               	movlw	0
 12227  153C  00B5               	movwf	___llmod@divisor+2
 12228  153D  3000               	movlw	0
 12229  153E  00B4               	movwf	___llmod@divisor+1
 12230  153F  300A               	movlw	10
 12231  1540  00B3               	movwf	___llmod@divisor
 12232  1541  084D               	movf	sprintf@prec+1,w
 12233  1542  0085               	movwf	5
 12234  1543  084C               	movf	sprintf@prec,w
 12235  1544  0084               	movwf	4
 12236  1545  3584               	lslf	4,f
 12237  1546  0D85               	rlf	5,f
 12238  1547  3584               	lslf	4,f
 12239  1548  0D85               	rlf	5,f
 12240  1549  30D3               	movlw	low (_dpowers| (0+32768))
 12241  154A  0784               	addwf	4,f
 12242  154B  3089               	movlw	high (_dpowers| (0+32768))
 12243  154C  3D85               	addwfc	5,f
 12244  154D  3F00               	moviw [0]fsr0
 12245  154E  00A5               	movwf	___lldiv@divisor
 12246  154F  3F01               	moviw [1]fsr0
 12247  1550  00A6               	movwf	___lldiv@divisor+1
 12248  1551  3F02               	moviw [2]fsr0
 12249  1552  00A7               	movwf	___lldiv@divisor+2
 12250  1553  3F03               	moviw [3]fsr0
 12251  1554  00A8               	movwf	___lldiv@divisor+3
 12252  1555  0851               	movf	sprintf@_val+3,w
 12253  1556  00AC               	movwf	___lldiv@dividend+3
 12254  1557  0850               	movf	sprintf@_val+2,w
 12255  1558  00AB               	movwf	___lldiv@dividend+2
 12256  1559  084F               	movf	sprintf@_val+1,w
 12257  155A  00AA               	movwf	___lldiv@dividend+1
 12258  155B  084E               	movf	sprintf@_val,w
 12259  155C  00A9               	movwf	___lldiv@dividend
 12260  155D  319D  2502  3194   	fcall	___lldiv
 12261  1560  0020               	movlb	0	; select bank0
 12262  1561  0828               	movf	?___lldiv+3,w
 12263  1562  00BA               	movwf	___llmod@dividend+3
 12264  1563  0827               	movf	?___lldiv+2,w
 12265  1564  00B9               	movwf	___llmod@dividend+2
 12266  1565  0826               	movf	?___lldiv+1,w
 12267  1566  00B8               	movwf	___llmod@dividend+1
 12268  1567  0825               	movf	?___lldiv,w
 12269  1568  00B7               	movwf	___llmod@dividend
 12270  1569  319B  23D6  3194   	fcall	___llmod
 12271  156C  0020               	movlb	0	; select bank0
 12272  156D  0833               	movf	?___llmod,w
 12273  156E  3E30               	addlw	48
 12274  156F  00C5               	movwf	??_sprintf
 12275  1570  0845               	movf	??_sprintf,w
 12276  1571  00D3               	movwf	sprintf@c
 12277                           
 12278                           ;doprnt.c: 1532: }
 12279                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12280  1572  083D               	movf	sprintf@sp,w
 12281  1573  0086               	movwf	6
 12282  1574  083E               	movf	sprintf@sp+1,w
 12283  1575  0087               	movwf	7
 12284  1576  0853               	movf	sprintf@c,w
 12285  1577  0081               	movwf	1
 12286  1578  3001               	movlw	1
 12287  1579  07BD               	addwf	sprintf@sp,f
 12288  157A  3000               	movlw	0
 12289  157B  3DBE               	addwfc	sprintf@sp+1,f
 12290  157C  2D2D               	goto	l6180
 12291  157D                     l6184:	
 12292                           ;doprnt.c: 1534: }
 12293                           ;doprnt.c: 1542: }
 12294                           ;doprnt.c: 1544: alldone:
 12295                           
 12296                           
 12297                           ;doprnt.c: 1547: *sp = 0;
 12298  157D  083D               	movf	sprintf@sp,w
 12299  157E  0086               	movwf	6
 12300  157F  083E               	movf	sprintf@sp+1,w
 12301  1580  0087               	movwf	7
 12302  1581  0181               	clrf	1
 12303  1582  0008               	return
 12304  1583                     __end_of_sprintf:	
 12305                           ;doprnt.c: 1549: return 0;
 12306                           ;	Return value of _sprintf is never used
 12307                           
 12308                           
 12309                           	psect	text28
 12310  1BD6                     __ptext28:	
 12311 ;; *************** function ___llmod *****************
 12312 ;; Defined at:
 12313 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;  divisor         4   19[BANK0 ] unsigned long 
 12316 ;;  dividend        4   23[BANK0 ] unsigned long 
 12317 ;; Auto vars:     Size  Location     Type
 12318 ;;  counter         1   28[BANK0 ] unsigned char 
 12319 ;; Return value:  Size  Location     Type
 12320 ;;                  4   19[BANK0 ] unsigned long 
 12321 ;; Registers used:
 12322 ;;		wreg, status,2, status,0
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12328 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;Total ram usage:       10 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; Hardware stack levels required when called:    3
 12335 ;; This function calls:
 12336 ;;		Nothing
 12337 ;; This function is called by:
 12338 ;;		_sprintf
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           
 12343                           ;psect for function ___llmod
 12344  1BD6                     ___llmod:	
 12345                           
 12346                           ;incstack = 0
 12347                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12348  1BD6  0020               	movlb	0	; select bank0
 12349  1BD7  0836               	movf	___llmod@divisor+3,w
 12350  1BD8  0435               	iorwf	___llmod@divisor+2,w
 12351  1BD9  0434               	iorwf	___llmod@divisor+1,w
 12352  1BDA  0433               	iorwf	___llmod@divisor,w
 12353  1BDB  1903               	skipnz
 12354  1BDC  2C10               	goto	l6012
 12355  1BDD  01BC               	clrf	___llmod@counter
 12356  1BDE  0ABC               	incf	___llmod@counter,f
 12357  1BDF                     l6002:	
 12358  1BDF  1BB6               	btfsc	___llmod@divisor+3,7
 12359  1BE0  2BED               	goto	l6004
 12360  1BE1  3001               	movlw	1
 12361  1BE2                     u7735:	
 12362  1BE2  35B3               	lslf	___llmod@divisor,f
 12363  1BE3  0DB4               	rlf	___llmod@divisor+1,f
 12364  1BE4  0DB5               	rlf	___llmod@divisor+2,f
 12365  1BE5  0DB6               	rlf	___llmod@divisor+3,f
 12366  1BE6  0B89               	decfsz	9,f
 12367  1BE7  2BE2               	goto	u7735
 12368  1BE8  3001               	movlw	1
 12369  1BE9  00BB               	movwf	??___llmod
 12370  1BEA  083B               	movf	??___llmod,w
 12371  1BEB  07BC               	addwf	___llmod@counter,f
 12372  1BEC  2BDF               	goto	l6002
 12373  1BED                     l6004:	
 12374  1BED  0836               	movf	___llmod@divisor+3,w
 12375  1BEE  023A               	subwf	___llmod@dividend+3,w
 12376  1BEF  1D03               	skipz
 12377  1BF0  2BFB               	goto	u7755
 12378  1BF1  0835               	movf	___llmod@divisor+2,w
 12379  1BF2  0239               	subwf	___llmod@dividend+2,w
 12380  1BF3  1D03               	skipz
 12381  1BF4  2BFB               	goto	u7755
 12382  1BF5  0834               	movf	___llmod@divisor+1,w
 12383  1BF6  0238               	subwf	___llmod@dividend+1,w
 12384  1BF7  1D03               	skipz
 12385  1BF8  2BFB               	goto	u7755
 12386  1BF9  0833               	movf	___llmod@divisor,w
 12387  1BFA  0237               	subwf	___llmod@dividend,w
 12388  1BFB                     u7755:	
 12389  1BFB  1C03               	skipc
 12390  1BFC  2C05               	goto	l6008
 12391  1BFD  0833               	movf	___llmod@divisor,w
 12392  1BFE  02B7               	subwf	___llmod@dividend,f
 12393  1BFF  0834               	movf	___llmod@divisor+1,w
 12394  1C00  3BB8               	subwfb	___llmod@dividend+1,f
 12395  1C01  0835               	movf	___llmod@divisor+2,w
 12396  1C02  3BB9               	subwfb	___llmod@dividend+2,f
 12397  1C03  0836               	movf	___llmod@divisor+3,w
 12398  1C04  3BBA               	subwfb	___llmod@dividend+3,f
 12399  1C05                     l6008:	
 12400  1C05  3001               	movlw	1
 12401  1C06                     u7765:	
 12402  1C06  36B6               	lsrf	___llmod@divisor+3,f
 12403  1C07  0CB5               	rrf	___llmod@divisor+2,f
 12404  1C08  0CB4               	rrf	___llmod@divisor+1,f
 12405  1C09  0CB3               	rrf	___llmod@divisor,f
 12406  1C0A  0B89               	decfsz	9,f
 12407  1C0B  2C06               	goto	u7765
 12408  1C0C  3001               	movlw	1
 12409  1C0D  02BC               	subwf	___llmod@counter,f
 12410  1C0E  1D03               	btfss	3,2
 12411  1C0F  2BED               	goto	l6004
 12412  1C10                     l6012:	
 12413  1C10  083A               	movf	___llmod@dividend+3,w
 12414  1C11  00B6               	movwf	?___llmod+3
 12415  1C12  0839               	movf	___llmod@dividend+2,w
 12416  1C13  00B5               	movwf	?___llmod+2
 12417  1C14  0838               	movf	___llmod@dividend+1,w
 12418  1C15  00B4               	movwf	?___llmod+1
 12419  1C16  0837               	movf	___llmod@dividend,w
 12420  1C17  00B3               	movwf	?___llmod
 12421  1C18  0008               	return
 12422  1C19                     __end_of___llmod:	
 12423                           
 12424                           	psect	text29
 12425  1AF0                     __ptext29:	
 12426 ;; *************** function _UARTstringWAIT *****************
 12427 ;; Defined at:
 12428 ;;		line 273 in file "UART.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12431 ;;		 -> STR_34(20), PS_2_Update@buf(60), STR_28(3), STR_27(35), 
 12432 ;;		 -> STR_26(18), STR_25(3), SetBaud@buf(50), STR_19(15), 
 12433 ;;		 -> STR_18(3), Init_System@buf(60), STR_12(3), STR_11(20), 
 12434 ;;		 -> STR_10(19), STR_9(17), STR_8(22), STR_7(21), 
 12435 ;;		 -> STR_6(24), STR_5(35), STR_4(3), Version(9), 
 12436 ;;		 -> STR_3(19), STR_2(26), STR_1(3), 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;		None
 12439 ;; Return value:  Size  Location     Type
 12440 ;;		None               void
 12441 ;; Registers used:
 12442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;Total ram usage:        4 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    5
 12455 ;; This function calls:
 12456 ;;		_UARTchar
 12457 ;;		_delayUS
 12458 ;; This function is called by:
 12459 ;;		_main
 12460 ;;		_Init_System
 12461 ;;		_SetBaud
 12462 ;;		_PS_2_Update
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _UARTstringWAIT
 12468  1AF0                     _UARTstringWAIT:	
 12469  1AF0                     l517:	
 12470                           ;incstack = 0
 12471                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12472                           ;UART.c: 275: do
 12473                           
 12474                           
 12475                           ;UART.c: 276: {
 12476                           ;UART.c: 277: delayUS(5000);
 12477  1AF0  3000               	movlw	0
 12478  1AF1  0020               	movlb	0	; select bank0
 12479  1AF2  00A8               	movwf	delayUS@US+3
 12480  1AF3  3000               	movlw	0
 12481  1AF4  00A7               	movwf	delayUS@US+2
 12482  1AF5  3013               	movlw	19
 12483  1AF6  00A6               	movwf	delayUS@US+1
 12484  1AF7  3088               	movlw	136
 12485  1AF8  00A5               	movwf	delayUS@US
 12486  1AF9  319B  2323  319A   	fcall	_delayUS
 12487                           
 12488                           ;UART.c: 278: if(*data != 0)
 12489  1AFC  0020               	movlb	0	; select bank0
 12490  1AFD  0834               	movf	UARTstringWAIT@data,w
 12491  1AFE  0084               	movwf	4
 12492  1AFF  0835               	movf	UARTstringWAIT@data+1,w
 12493  1B00  0085               	movwf	5
 12494  1B01  0800               	movf	0,w	;code access
 12495  1B02  3A00               	xorlw	0
 12496  1B03  1903               	skipnz
 12497  1B04  2B12               	goto	l6046
 12498                           
 12499                           ;UART.c: 279: {
 12500                           ;UART.c: 280: UARTchar(*data, 0, 0);
 12501  1B05  01AD               	clrf	UARTchar@NinethBit_override
 12502  1B06  01AE               	clrf	UARTchar@NinethBit_override_data
 12503  1B07  0834               	movf	UARTstringWAIT@data,w
 12504  1B08  0084               	movwf	4
 12505  1B09  0835               	movf	UARTstringWAIT@data+1,w
 12506  1B0A  0085               	movwf	5
 12507  1B0B  0800               	movf	0,w	;code access
 12508  1B0C  319C  2463  319A   	fcall	_UARTchar
 12509  1B0F                     l519:	
 12510                           ;UART.c: 281: while((!TX1STAbits.TRMT));
 12511                           
 12512  1B0F  0023               	movlb	3	; select bank3
 12513  1B10  1C9E               	btfss	30,1	;volatile
 12514  1B11  2B0F               	goto	l519
 12515  1B12                     l6046:	
 12516                           
 12517                           ;UART.c: 282: }
 12518                           ;UART.c: 283: } while( *data++);
 12519  1B12  0020               	movlb	0	; select bank0
 12520  1B13  0835               	movf	UARTstringWAIT@data+1,w
 12521  1B14  00B7               	movwf	??_UARTstringWAIT+1
 12522  1B15  0834               	movf	UARTstringWAIT@data,w
 12523  1B16  00B6               	movwf	??_UARTstringWAIT
 12524  1B17  0AB4               	incf	UARTstringWAIT@data,f
 12525  1B18  1903               	skipnz
 12526  1B19  0AB5               	incf	UARTstringWAIT@data+1,f
 12527  1B1A  0836               	movf	??_UARTstringWAIT,w
 12528  1B1B  0084               	movwf	4
 12529  1B1C  0837               	movf	??_UARTstringWAIT+1,w
 12530  1B1D  0085               	movwf	5
 12531  1B1E  0800               	movf	0,w	;code access
 12532  1B1F  3800               	iorlw	0
 12533  1B20  1903               	btfsc	3,2
 12534  1B21  0008               	return
 12535  1B22  2AF0               	goto	l517
 12536  1B23                     __end_of_UARTstringWAIT:	
 12537                           
 12538                           	psect	text30
 12539  1C63                     __ptext30:	
 12540 ;; *************** function _UARTchar *****************
 12541 ;; Defined at:
 12542 ;;		line 189 in file "UART.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;  data            1    wreg     unsigned char 
 12545 ;;  NinethBit_ov    1   13[BANK0 ] unsigned char 
 12546 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  data            1   19[BANK0 ] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;		None               void
 12551 ;; Registers used:
 12552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12558 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;Total ram usage:        7 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    4
 12565 ;; This function calls:
 12566 ;;		_CheckSum_byte
 12567 ;; This function is called by:
 12568 ;;		_UARTstringWAIT
 12569 ;;		_PS_2_Update
 12570 ;;		_UARTstring
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           
 12575                           ;psect for function _UARTchar
 12576  1C63                     _UARTchar:	
 12577                           
 12578                           ;incstack = 0
 12579                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12580                           ;UARTchar@data stored from wreg
 12581  1C63  0020               	movlb	0	; select bank0
 12582  1C64  00B3               	movwf	UARTchar@data
 12583                           
 12584                           ;UART.c: 192: if(TXSTAbits.TX9)
 12585  1C65  0023               	movlb	3	; select bank3
 12586  1C66  1F1E               	btfss	30,6	;volatile
 12587  1C67  2CAC               	goto	l5848
 12588                           
 12589                           ;UART.c: 193: {
 12590                           ;UART.c: 195: if(!NinethBit_override)
 12591  1C68  0020               	movlb	0	; select bank0
 12592  1C69  08AD               	movf	UARTchar@NinethBit_override,f
 12593  1C6A  1903               	btfsc	3,2
 12594  1C6B  2C94               	goto	l5844
 12595  1C6C  2CA1               	goto	l5846
 12596  1C6D                     l5838:	
 12597                           ;UART.c: 199: {
 12598                           ;UART.c: 200: case 1:
 12599                           
 12600                           ;UART.c: 196: {
 12601                           ;UART.c: 198: switch (PARITY)
 12602                           
 12603                           
 12604                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12605  1C6D  0833               	movf	UARTchar@data,w
 12606  1C6E  00AF               	movwf	??_UARTchar
 12607  1C6F  01B0               	clrf	??_UARTchar+1
 12608  1C70  082F               	movf	??_UARTchar,w
 12609  1C71  00A5               	movwf	CheckSum_byte@This
 12610  1C72  0830               	movf	??_UARTchar+1,w
 12611  1C73  00A6               	movwf	CheckSum_byte@This+1
 12612  1C74  3003               	movlw	3
 12613  1C75  2C7F               	goto	L20
 12614  1C76                     l5840:	
 12615                           ;UART.c: 203: case 2:
 12616                           
 12617                           ;UART.c: 202: break;
 12618                           
 12619                           
 12620                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12621  1C76  0020               	movlb	0	; select bank0
 12622  1C77  0833               	movf	UARTchar@data,w
 12623  1C78  00AF               	movwf	??_UARTchar
 12624  1C79  01B0               	clrf	??_UARTchar+1
 12625  1C7A  082F               	movf	??_UARTchar,w
 12626  1C7B  00A5               	movwf	CheckSum_byte@This
 12627  1C7C  0830               	movf	??_UARTchar+1,w
 12628  1C7D  00A6               	movwf	CheckSum_byte@This+1
 12629  1C7E  3002               	movlw	2
 12630  1C7F                     L20:	
 12631  1C7F  00B1               	movwf	??_UARTchar+2
 12632  1C80  0831               	movf	??_UARTchar+2,w
 12633  1C81  00A7               	movwf	CheckSum_byte@Odd_Even
 12634  1C82  319A  225C  319C   	fcall	_CheckSum_byte
 12635  1C85  0020               	movlb	0	; select bank0
 12636  1C86  00B2               	movwf	??_UARTchar+3
 12637  1C87  0023               	movlb	3	; select bank3
 12638  1C88  081E               	movf	30,w	;volatile
 12639  1C89  0020               	movlb	0	; select bank0
 12640  1C8A  0632               	xorwf	??_UARTchar+3,w
 12641  1C8B  39FE               	andlw	-2
 12642  1C8C  0632               	xorwf	??_UARTchar+3,w
 12643  1C8D  2CAA               	goto	L19
 12644  1C8E                     l491:	
 12645                           ;UART.c: 206: case 3:
 12646                           
 12647                           ;UART.c: 205: break;
 12648                           
 12649                           
 12650                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 12651  1C8E  0023               	movlb	3	; select bank3
 12652  1C8F  141E               	bsf	30,0	;volatile
 12653                           
 12654                           ;UART.c: 208: break;
 12655  1C90  2CAC               	goto	l5848
 12656  1C91                     l492:	
 12657                           ;UART.c: 209: default:
 12658                           
 12659                           
 12660                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 12661  1C91  0023               	movlb	3	; select bank3
 12662  1C92  101E               	bcf	30,0	;volatile
 12663                           
 12664                           ;UART.c: 212: }
 12665                           
 12666                           ;UART.c: 211: break;
 12667  1C93  2CAC               	goto	l5848
 12668  1C94                     l5844:	
 12669  1C94  0020               	movlb	0	; select bank0
 12670  1C95  0867               	movf	_PARITY,w
 12671                           
 12672                           ; Switch size 1, requested type "space"
 12673                           ; Number of cases is 3, Range of values is 1 to 3
 12674                           ; switch strategies available:
 12675                           ; Name         Instructions Cycles
 12676                           ; simple_byte           10     6 (average)
 12677                           ; direct_byte           15     9 (fixed)
 12678                           ; jumptable            263     9 (fixed)
 12679                           ;	Chosen strategy is simple_byte
 12680  1C96  3A01               	xorlw	1	; case 1
 12681  1C97  1903               	skipnz
 12682  1C98  2C6D               	goto	l5838
 12683  1C99  3A03               	xorlw	3	; case 2
 12684  1C9A  1903               	skipnz
 12685  1C9B  2C76               	goto	l5840
 12686  1C9C  3A01               	xorlw	1	; case 3
 12687  1C9D  1903               	skipnz
 12688  1C9E  2C8E               	goto	l491
 12689  1C9F  2C91               	goto	l492
 12690                           
 12691                           ;UART.c: 213: }
 12692  1CA0  2CAC               	goto	l5848
 12693  1CA1                     l5846:	
 12694                           
 12695                           ;UART.c: 214: else
 12696                           ;UART.c: 215: {
 12697                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12698  1CA1  3001               	movlw	1
 12699  1CA2  052E               	andwf	UARTchar@NinethBit_override_data,w
 12700  1CA3  00AF               	movwf	??_UARTchar
 12701  1CA4  0023               	movlb	3	; select bank3
 12702  1CA5  081E               	movf	30,w	;volatile
 12703  1CA6  0020               	movlb	0	; select bank0
 12704  1CA7  062F               	xorwf	??_UARTchar,w
 12705  1CA8  39FE               	andlw	-2
 12706  1CA9  062F               	xorwf	??_UARTchar,w
 12707  1CAA                     L19:	
 12708  1CAA  0023               	movlb	3	; select bank3
 12709  1CAB  009E               	movwf	30	;volatile
 12710  1CAC                     l5848:	
 12711                           
 12712                           ;UART.c: 217: }
 12713                           ;UART.c: 218: }
 12714                           ;UART.c: 219: TXREG = data;
 12715  1CAC  0020               	movlb	0	; select bank0
 12716  1CAD  0833               	movf	UARTchar@data,w
 12717  1CAE  0023               	movlb	3	; select bank3
 12718  1CAF  009A               	movwf	26	;volatile
 12719  1CB0  0008               	return
 12720  1CB1                     __end_of_UARTchar:	
 12721                           
 12722                           	psect	text31
 12723  1E5D                     __ptext31:	
 12724 ;; *************** function _ReadBaud *****************
 12725 ;; Defined at:
 12726 ;;		line 135 in file "FLASH.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  row             2   23[BANK0 ] unsigned int 
 12729 ;;  column          1   25[BANK0 ] unsigned char 
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;  temp            4   35[BANK0 ] unsigned long 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  4   23[BANK0 ] unsigned long 
 12734 ;; Registers used:
 12735 ;;		wreg, status,2, status,0, pclath, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;Total ram usage:       16 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    5
 12748 ;; This function calls:
 12749 ;;		_ReadFlash_4Byte
 12750 ;; This function is called by:
 12751 ;;		_Init_System
 12752 ;;		_SetBaud
 12753 ;; This function uses a non-reentrant model
 12754 ;;
 12755                           
 12756                           
 12757                           ;psect for function _ReadBaud
 12758  1E5D                     _ReadBaud:	
 12759                           
 12760                           ;FLASH.c: 137: unsigned long temp;
 12761                           ;FLASH.c: 138: temp =(ReadFlash_4Byte(row, column));
 12762                           
 12763                           ;incstack = 0
 12764                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12765  1E5D  0020               	movlb	0	; select bank0
 12766  1E5E  0838               	movf	ReadBaud@row+1,w
 12767  1E5F  01AB               	clrf	ReadFlash_4Byte@row+1
 12768  1E60  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12769  1E61  0837               	movf	ReadBaud@row,w
 12770  1E62  01AA               	clrf	ReadFlash_4Byte@row
 12771  1E63  07AA               	addwf	ReadFlash_4Byte@row,f
 12772  1E64  0839               	movf	ReadBaud@column,w
 12773  1E65  00BB               	movwf	??_ReadBaud
 12774  1E66  083B               	movf	??_ReadBaud,w
 12775  1E67  00AC               	movwf	ReadFlash_4Byte@column
 12776  1E68  319C  24B1  319E   	fcall	_ReadFlash_4Byte
 12777  1E6B  0020               	movlb	0	; select bank0
 12778  1E6C  082D               	movf	?_ReadFlash_4Byte+3,w
 12779  1E6D  00C6               	movwf	ReadBaud@temp+3
 12780  1E6E  082C               	movf	?_ReadFlash_4Byte+2,w
 12781  1E6F  00C5               	movwf	ReadBaud@temp+2
 12782  1E70  082B               	movf	?_ReadFlash_4Byte+1,w
 12783  1E71  00C4               	movwf	ReadBaud@temp+1
 12784  1E72  082A               	movf	?_ReadFlash_4Byte,w
 12785  1E73  00C3               	movwf	ReadBaud@temp
 12786                           
 12787                           ;FLASH.c: 139: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12788  1E74  30FF               	movlw	255
 12789  1E75  0543               	andwf	ReadBaud@temp,w
 12790  1E76  0024               	movlb	4	; select bank4
 12791  1E77  00AF               	movwf	(_MEM^(0+512)+2)
 12792  1E78  303F               	movlw	63
 12793  1E79  0020               	movlb	0	; select bank0
 12794  1E7A  0544               	andwf	ReadBaud@temp+1,w
 12795  1E7B  0024               	movlb	4	; select bank4
 12796  1E7C  00B0               	movwf	((_MEM+1)^(0+512)+2)
 12797                           
 12798                           ;FLASH.c: 140: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12799  1E7D  0020               	movlb	0	; select bank0
 12800  1E7E  0843               	movf	ReadBaud@temp,w
 12801  1E7F  00BB               	movwf	??_ReadBaud
 12802  1E80  0844               	movf	ReadBaud@temp+1,w
 12803  1E81  00BC               	movwf	??_ReadBaud+1
 12804  1E82  0845               	movf	ReadBaud@temp+2,w
 12805  1E83  00BD               	movwf	??_ReadBaud+2
 12806  1E84  0846               	movf	ReadBaud@temp+3,w
 12807  1E85  00BE               	movwf	??_ReadBaud+3
 12808  1E86  300E               	movlw	14
 12809  1E87                     u7855:	
 12810  1E87  36BE               	lsrf	??_ReadBaud+3,f
 12811  1E88  0CBD               	rrf	??_ReadBaud+2,f
 12812  1E89  0CBC               	rrf	??_ReadBaud+1,f
 12813  1E8A  0CBB               	rrf	??_ReadBaud,f
 12814  1E8B  0B89               	decfsz	9,f
 12815  1E8C  2E87               	goto	u7855
 12816  1E8D  30FF               	movlw	255
 12817  1E8E  053B               	andwf	??_ReadBaud,w
 12818  1E8F  0024               	movlb	4	; select bank4
 12819  1E90  00AD               	movwf	_MEM^(0+512)
 12820  1E91  303F               	movlw	63
 12821  1E92  0020               	movlb	0	; select bank0
 12822  1E93  053C               	andwf	??_ReadBaud+1,w
 12823  1E94  0024               	movlb	4	; select bank4
 12824  1E95  00AE               	movwf	(_MEM+1)^(0+512)
 12825                           
 12826                           ;FLASH.c: 141: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12827  1E96  082F               	movf	(_MEM^(0+512)+2),w
 12828  1E97  0020               	movlb	0	; select bank0
 12829  1E98  00BB               	movwf	??_ReadBaud
 12830  1E99  0024               	movlb	4	; select bank4
 12831  1E9A  0830               	movf	((_MEM+1)^(0+512)+2),w
 12832  1E9B  0020               	movlb	0	; select bank0
 12833  1E9C  00BC               	movwf	??_ReadBaud+1
 12834  1E9D  01BD               	clrf	??_ReadBaud+2
 12835  1E9E  01BE               	clrf	??_ReadBaud+3
 12836  1E9F  0024               	movlb	4	; select bank4
 12837  1EA0  082D               	movf	_MEM^(0+512),w
 12838  1EA1  0020               	movlb	0	; select bank0
 12839  1EA2  00BF               	movwf	??_ReadBaud+4
 12840  1EA3  0024               	movlb	4	; select bank4
 12841  1EA4  082E               	movf	(_MEM+1)^(0+512),w
 12842  1EA5  0020               	movlb	0	; select bank0
 12843  1EA6  00C0               	movwf	??_ReadBaud+5
 12844  1EA7  01C1               	clrf	??_ReadBaud+6
 12845  1EA8  01C2               	clrf	??_ReadBaud+7
 12846  1EA9  300C               	movlw	12
 12847  1EAA                     u7865:	
 12848  1EAA  35BF               	lslf	??_ReadBaud+4,f
 12849  1EAB  0DC0               	rlf	??_ReadBaud+5,f
 12850  1EAC  0DC1               	rlf	??_ReadBaud+6,f
 12851  1EAD  0DC2               	rlf	??_ReadBaud+7,f
 12852  1EAE  0B89               	decfsz	9,f
 12853  1EAF  2EAA               	goto	u7865
 12854  1EB0  083F               	movf	??_ReadBaud+4,w
 12855  1EB1  07BB               	addwf	??_ReadBaud,f
 12856  1EB2  0840               	movf	??_ReadBaud+5,w
 12857  1EB3  3DBC               	addwfc	??_ReadBaud+1,f
 12858  1EB4  0841               	movf	??_ReadBaud+6,w
 12859  1EB5  3DBD               	addwfc	??_ReadBaud+2,f
 12860  1EB6  0842               	movf	??_ReadBaud+7,w
 12861  1EB7  3DBE               	addwfc	??_ReadBaud+3,f
 12862  1EB8  083E               	movf	??_ReadBaud+3,w
 12863  1EB9  00BA               	movwf	?_ReadBaud+3
 12864  1EBA  083D               	movf	??_ReadBaud+2,w
 12865  1EBB  00B9               	movwf	?_ReadBaud+2
 12866  1EBC  083C               	movf	??_ReadBaud+1,w
 12867  1EBD  00B8               	movwf	?_ReadBaud+1
 12868  1EBE  083B               	movf	??_ReadBaud,w
 12869  1EBF  00B7               	movwf	?_ReadBaud
 12870  1EC0  0008               	return
 12871  1EC1                     __end_of_ReadBaud:	
 12872                           
 12873                           	psect	text32
 12874  1CB1                     __ptext32:	
 12875 ;; *************** function _ReadFlash_4Byte *****************
 12876 ;; Defined at:
 12877 ;;		line 43 in file "FLASH.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;  row             2   10[BANK0 ] unsigned int 
 12880 ;;  column          1   12[BANK0 ] unsigned char 
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;  temp            4   19[BANK0 ] unsigned long 
 12883 ;; Return value:  Size  Location     Type
 12884 ;;                  4   10[BANK0 ] unsigned long 
 12885 ;; Registers used:
 12886 ;;		wreg, status,2, status,0, pclath, cstack
 12887 ;; Tracked objects:
 12888 ;;		On entry : 0/0
 12889 ;;		On exit  : 0/0
 12890 ;;		Unchanged: 0/0
 12891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;Total ram usage:       13 bytes
 12897 ;; Hardware stack levels used:    1
 12898 ;; Hardware stack levels required when called:    4
 12899 ;; This function calls:
 12900 ;;		_ReadFlash_2Byte
 12901 ;; This function is called by:
 12902 ;;		_ReadBaud
 12903 ;; This function uses a non-reentrant model
 12904 ;;
 12905                           
 12906                           
 12907                           ;psect for function _ReadFlash_4Byte
 12908  1CB1                     _ReadFlash_4Byte:	
 12909                           
 12910                           ;FLASH.c: 45: unsigned long temp =0;
 12911                           
 12912                           ;incstack = 0
 12913                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12914  1CB1  3000               	movlw	0
 12915  1CB2  0020               	movlb	0	; select bank0
 12916  1CB3  00B6               	movwf	ReadFlash_4Byte@temp+3
 12917  1CB4  3000               	movlw	0
 12918  1CB5  00B5               	movwf	ReadFlash_4Byte@temp+2
 12919  1CB6  3000               	movlw	0
 12920  1CB7  00B4               	movwf	ReadFlash_4Byte@temp+1
 12921  1CB8  3000               	movlw	0
 12922  1CB9  00B3               	movwf	ReadFlash_4Byte@temp
 12923                           
 12924                           ;FLASH.c: 46: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12925  1CBA  082B               	movf	ReadFlash_4Byte@row+1,w
 12926  1CBB  01A6               	clrf	ReadFlash_2Byte@row+1
 12927  1CBC  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12928  1CBD  082A               	movf	ReadFlash_4Byte@row,w
 12929  1CBE  01A5               	clrf	ReadFlash_2Byte@row
 12930  1CBF  07A5               	addwf	ReadFlash_2Byte@row,f
 12931  1CC0  082C               	movf	ReadFlash_4Byte@column,w
 12932  1CC1  00AE               	movwf	??_ReadFlash_4Byte
 12933  1CC2  082E               	movf	??_ReadFlash_4Byte,w
 12934  1CC3  00A7               	movwf	ReadFlash_2Byte@column
 12935  1CC4  319A  22BE  319C   	fcall	_ReadFlash_2Byte
 12936  1CC7  0020               	movlb	0	; select bank0
 12937  1CC8  0825               	movf	?_ReadFlash_2Byte,w
 12938  1CC9  00AF               	movwf	??_ReadFlash_4Byte+1
 12939  1CCA  0826               	movf	?_ReadFlash_2Byte+1,w
 12940  1CCB  00B0               	movwf	??_ReadFlash_4Byte+2
 12941  1CCC  01B1               	clrf	??_ReadFlash_4Byte+3
 12942  1CCD  01B2               	clrf	??_ReadFlash_4Byte+4
 12943  1CCE  3010               	movlw	16
 12944  1CCF                     u7605:	
 12945  1CCF  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12946  1CD0  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12947  1CD1  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12948  1CD2  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12949  1CD3  0B89               	decfsz	9,f
 12950  1CD4  2CCF               	goto	u7605
 12951  1CD5  0832               	movf	??_ReadFlash_4Byte+4,w
 12952  1CD6  00B6               	movwf	ReadFlash_4Byte@temp+3
 12953  1CD7  0831               	movf	??_ReadFlash_4Byte+3,w
 12954  1CD8  00B5               	movwf	ReadFlash_4Byte@temp+2
 12955  1CD9  0830               	movf	??_ReadFlash_4Byte+2,w
 12956  1CDA  00B4               	movwf	ReadFlash_4Byte@temp+1
 12957  1CDB  082F               	movf	??_ReadFlash_4Byte+1,w
 12958  1CDC  00B3               	movwf	ReadFlash_4Byte@temp
 12959                           
 12960                           ;FLASH.c: 47: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12961  1CDD  082B               	movf	ReadFlash_4Byte@row+1,w
 12962  1CDE  01A6               	clrf	ReadFlash_2Byte@row+1
 12963  1CDF  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12964  1CE0  082A               	movf	ReadFlash_4Byte@row,w
 12965  1CE1  01A5               	clrf	ReadFlash_2Byte@row
 12966  1CE2  07A5               	addwf	ReadFlash_2Byte@row,f
 12967  1CE3  082C               	movf	ReadFlash_4Byte@column,w
 12968  1CE4  3E01               	addlw	1
 12969  1CE5  00AE               	movwf	??_ReadFlash_4Byte
 12970  1CE6  082E               	movf	??_ReadFlash_4Byte,w
 12971  1CE7  00A7               	movwf	ReadFlash_2Byte@column
 12972  1CE8  319A  22BE         	fcall	_ReadFlash_2Byte
 12973  1CEA  0020               	movlb	0	; select bank0
 12974  1CEB  0825               	movf	?_ReadFlash_2Byte,w
 12975  1CEC  00AF               	movwf	??_ReadFlash_4Byte+1
 12976  1CED  0826               	movf	?_ReadFlash_2Byte+1,w
 12977  1CEE  00B0               	movwf	??_ReadFlash_4Byte+2
 12978  1CEF  01B1               	clrf	??_ReadFlash_4Byte+3
 12979  1CF0  01B2               	clrf	??_ReadFlash_4Byte+4
 12980  1CF1  082F               	movf	??_ReadFlash_4Byte+1,w
 12981  1CF2  04B3               	iorwf	ReadFlash_4Byte@temp,f
 12982  1CF3  0830               	movf	??_ReadFlash_4Byte+2,w
 12983  1CF4  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 12984  1CF5  0831               	movf	??_ReadFlash_4Byte+3,w
 12985  1CF6  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 12986  1CF7  0832               	movf	??_ReadFlash_4Byte+4,w
 12987  1CF8  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 12988                           
 12989                           ;FLASH.c: 48: return temp;
 12990  1CF9  0836               	movf	ReadFlash_4Byte@temp+3,w
 12991  1CFA  00AD               	movwf	?_ReadFlash_4Byte+3
 12992  1CFB  0835               	movf	ReadFlash_4Byte@temp+2,w
 12993  1CFC  00AC               	movwf	?_ReadFlash_4Byte+2
 12994  1CFD  0834               	movf	ReadFlash_4Byte@temp+1,w
 12995  1CFE  00AB               	movwf	?_ReadFlash_4Byte+1
 12996  1CFF  0833               	movf	ReadFlash_4Byte@temp,w
 12997  1D00  00AA               	movwf	?_ReadFlash_4Byte
 12998  1D01  0008               	return
 12999  1D02                     __end_of_ReadFlash_4Byte:	
 13000                           
 13001                           	psect	text33
 13002  1ABE                     __ptext33:	
 13003 ;; *************** function _ReadFlash_2Byte *****************
 13004 ;; Defined at:
 13005 ;;		line 31 in file "FLASH.c"
 13006 ;; Parameters:    Size  Location     Type
 13007 ;;  row             2    5[BANK0 ] unsigned int 
 13008 ;;  column          1    7[BANK0 ] unsigned char 
 13009 ;; Auto vars:     Size  Location     Type
 13010 ;;		None
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  2    5[BANK0 ] unsigned int 
 13013 ;; Registers used:
 13014 ;;		wreg, status,2, status,0
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13020 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;Total ram usage:        5 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    3
 13027 ;; This function calls:
 13028 ;;		Nothing
 13029 ;; This function is called by:
 13030 ;;		_ReadFlash_4Byte
 13031 ;;		_WriteFlash_Sequential
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           
 13036                           ;psect for function _ReadFlash_2Byte
 13037  1ABE                     _ReadFlash_2Byte:	
 13038                           
 13039                           ;FLASH.c: 33: PMCON1 &= ~0b01000000;
 13040                           
 13041                           ;incstack = 0
 13042                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 13043  1ABE  30BF               	movlw	191
 13044  1ABF  0020               	movlb	0	; select bank0
 13045  1AC0  00A8               	movwf	??_ReadFlash_2Byte
 13046  1AC1  0828               	movf	??_ReadFlash_2Byte,w
 13047  1AC2  0023               	movlb	3	; select bank3
 13048  1AC3  0595               	andwf	21,f	;volatile
 13049                           
 13050                           ;FLASH.c: 34: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 13051  1AC4  0020               	movlb	0	; select bank0
 13052  1AC5  0826               	movf	ReadFlash_2Byte@row+1,w
 13053  1AC6  00A9               	movwf	??_ReadFlash_2Byte+1
 13054  1AC7  0825               	movf	ReadFlash_2Byte@row,w
 13055  1AC8  00A8               	movwf	??_ReadFlash_2Byte
 13056  1AC9  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13057  1ACA  0CA8               	rrf	??_ReadFlash_2Byte,f
 13058  1ACB  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13059  1ACC  0CA8               	rrf	??_ReadFlash_2Byte,f
 13060  1ACD  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13061  1ACE  0CA8               	rrf	??_ReadFlash_2Byte,f
 13062  1ACF  0828               	movf	??_ReadFlash_2Byte,w
 13063  1AD0  397F               	andlw	127
 13064  1AD1  0023               	movlb	3	; select bank3
 13065  1AD2  0092               	movwf	18	;volatile
 13066                           
 13067                           ;FLASH.c: 35: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 13068  1AD3  0020               	movlb	0	; select bank0
 13069  1AD4  0825               	movf	ReadFlash_2Byte@row,w
 13070  1AD5  3907               	andlw	7
 13071  1AD6  00A8               	movwf	??_ReadFlash_2Byte
 13072  1AD7  3004               	movlw	4
 13073  1AD8                     u7465:	
 13074  1AD8  35A8               	lslf	??_ReadFlash_2Byte,f
 13075  1AD9  3EFF               	addlw	-1
 13076  1ADA  1D03               	skipz
 13077  1ADB  2AD8               	goto	u7465
 13078  1ADC  3528               	lslf	??_ReadFlash_2Byte,w
 13079  1ADD  0727               	addwf	ReadFlash_2Byte@column,w
 13080  1ADE  0023               	movlb	3	; select bank3
 13081  1ADF  0091               	movwf	17	;volatile
 13082                           
 13083                           ;FLASH.c: 36: PMCON1 |= 0b00000001;
 13084  1AE0  1415               	bsf	21,0	;volatile
 13085  1AE1                     l992:	
 13086                           ;FLASH.c: 37: while(PMCON1 & 0b00000001);
 13087                           
 13088  1AE1  1815               	btfsc	21,0	;volatile
 13089  1AE2  2AE1               	goto	l992
 13090                           
 13091                           ;FLASH.c: 38: __nop();
 13092  1AE3  0000               	nop
 13093                           
 13094                           ;FLASH.c: 39: __nop();
 13095  1AE4  0000               	nop
 13096                           
 13097                           ;FLASH.c: 40: return (PMDATL | (PMDATH << 8));
 13098  1AE5  0023               	movlb	3	; select bank3
 13099  1AE6  0814               	movf	20,w	;volatile
 13100  1AE7  0020               	movlb	0	; select bank0
 13101  1AE8  01A6               	clrf	?_ReadFlash_2Byte+1
 13102  1AE9  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13103  1AEA  0023               	movlb	3	; select bank3
 13104  1AEB  0813               	movf	19,w	;volatile
 13105  1AEC  0020               	movlb	0	; select bank0
 13106  1AED  01A5               	clrf	?_ReadFlash_2Byte
 13107  1AEE  07A5               	addwf	?_ReadFlash_2Byte,f
 13108  1AEF  0008               	return
 13109  1AF0                     __end_of_ReadFlash_2Byte:	
 13110                           
 13111                           	psect	text34
 13112  11BC                     __ptext34:	
 13113 ;; *************** function _InitUART *****************
 13114 ;; Defined at:
 13115 ;;		line 52 in file "UART.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;  Baud            4   19[BANK0 ] unsigned long 
 13118 ;;  parity          1   23[BANK0 ] unsigned char 
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;  temp            4   36[BANK0 ] unsigned long 
 13121 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13122 ;;  config          1   35[BANK0 ] unsigned char 
 13123 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;		None               void
 13126 ;; Registers used:
 13127 ;;		wreg, status,2, status,0, pclath, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13133 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;Total ram usage:       21 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    4
 13140 ;; This function calls:
 13141 ;;		_CloseUSART
 13142 ;;		_OpenUSART
 13143 ;;		_ReadUSART
 13144 ;;		___lldiv
 13145 ;;		_baudUSART
 13146 ;; This function is called by:
 13147 ;;		_Init_System
 13148 ;;		_SetBaud
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function _InitUART
 13154  11BC                     _InitUART:	
 13155                           
 13156                           ;UART.c: 54: unsigned long temp;
 13157                           ;UART.c: 55: unsigned char config;
 13158                           ;UART.c: 56: unsigned int spbrg;
 13159                           ;UART.c: 57: unsigned char baudconfig;
 13160                           ;UART.c: 67: LATC |= 0b00000100;
 13161                           
 13162                           ;incstack = 0
 13163                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13164  11BC  0022               	movlb	2	; select bank2
 13165  11BD  150E               	bsf	14,2	;volatile
 13166                           
 13167                           ;UART.c: 68: PPSLOCK =0;
 13168  11BE  003C               	movlb	28	; select bank28
 13169  11BF  018F               	clrf	15	;volatile
 13170                           
 13171                           ;UART.c: 69: RC2PPS = 0b00000000;
 13172  11C0  003D               	movlb	29	; select bank29
 13173  11C1  01A2               	clrf	34	;volatile
 13174                           
 13175                           ;UART.c: 70: PPSLOCK =1;
 13176  11C2  3001               	movlw	1
 13177  11C3  003C               	movlb	28	; select bank28
 13178  11C4  008F               	movwf	15	;volatile
 13179                           
 13180                           ;UART.c: 72: CloseUSART();
 13181  11C5  3199  2103  3191   	fcall	_CloseUSART
 13182                           
 13183                           ;UART.c: 73: config =0;
 13184  11C8  0020               	movlb	0	; select bank0
 13185  11C9  01C3               	clrf	InitUART@config
 13186                           
 13187                           ;UART.c: 74: baudconfig =0;
 13188  11CA  01C2               	clrf	InitUART@baudconfig
 13189                           
 13190                           ;UART.c: 77: config |= 0b01000000;
 13191  11CB  1743               	bsf	InitUART@config,6
 13192                           
 13193                           ;UART.c: 79: config |= 0b00001000;
 13194  11CC  15C3               	bsf	InitUART@config,3
 13195                           
 13196                           ;UART.c: 80: config |= 0b00010000;
 13197  11CD  1643               	bsf	InitUART@config,4
 13198                           
 13199                           ;UART.c: 81: PARITY = parity;
 13200  11CE  0837               	movf	InitUART@parity,w
 13201  11CF  00B8               	movwf	??_InitUART
 13202  11D0  0838               	movf	??_InitUART,w
 13203  11D1  00E7               	movwf	_PARITY
 13204                           
 13205                           ;UART.c: 82: BAUD = Baud;
 13206  11D2  0836               	movf	InitUART@Baud+3,w
 13207  11D3  0024               	movlb	4	; select bank4
 13208  11D4  00A3               	movwf	(_BAUD+3)^(0+512)
 13209  11D5  0020               	movlb	0	; select bank0
 13210  11D6  0835               	movf	InitUART@Baud+2,w
 13211  11D7  0024               	movlb	4	; select bank4
 13212  11D8  00A2               	movwf	(_BAUD+2)^(0+512)
 13213  11D9  0020               	movlb	0	; select bank0
 13214  11DA  0834               	movf	InitUART@Baud+1,w
 13215  11DB  0024               	movlb	4	; select bank4
 13216  11DC  00A1               	movwf	(_BAUD+1)^(0+512)
 13217  11DD  0020               	movlb	0	; select bank0
 13218  11DE  0833               	movf	InitUART@Baud,w
 13219  11DF  0024               	movlb	4	; select bank4
 13220  11E0  00A0               	movwf	_BAUD^(0+512)
 13221                           
 13222                           ;UART.c: 83: if(parity)
 13223  11E1  0020               	movlb	0	; select bank0
 13224  11E2  0837               	movf	InitUART@parity,w
 13225  11E3  1903               	btfsc	3,2
 13226  11E4  29E7               	goto	l6094
 13227                           
 13228                           ;UART.c: 84: {
 13229                           ;UART.c: 85: config |= 0b00000010;
 13230  11E5  14C3               	bsf	InitUART@config,1
 13231                           
 13232                           ;UART.c: 86: }
 13233  11E6  29EB               	goto	l6096
 13234  11E7                     l6094:	
 13235                           
 13236                           ;UART.c: 87: else
 13237                           ;UART.c: 88: {
 13238                           ;UART.c: 89: config &= ~0b00000010;
 13239  11E7  30FD               	movlw	253
 13240  11E8  00B8               	movwf	??_InitUART
 13241  11E9  0838               	movf	??_InitUART,w
 13242  11EA  05C3               	andwf	InitUART@config,f
 13243  11EB                     l6096:	
 13244                           
 13245                           ;UART.c: 90: }
 13246                           ;UART.c: 91: baudconfig |= 0b00001000;
 13247  11EB  15C2               	bsf	InitUART@baudconfig,3
 13248                           
 13249                           ;UART.c: 93: temp = (32000000L / Baud) - 1;
 13250  11EC  0836               	movf	InitUART@Baud+3,w
 13251  11ED  00A8               	movwf	___lldiv@divisor+3
 13252  11EE  0835               	movf	InitUART@Baud+2,w
 13253  11EF  00A7               	movwf	___lldiv@divisor+2
 13254  11F0  0834               	movf	InitUART@Baud+1,w
 13255  11F1  00A6               	movwf	___lldiv@divisor+1
 13256  11F2  0833               	movf	InitUART@Baud,w
 13257  11F3  00A5               	movwf	___lldiv@divisor
 13258  11F4  3001               	movlw	1
 13259  11F5  00AC               	movwf	___lldiv@dividend+3
 13260  11F6  30E8               	movlw	232
 13261  11F7  00AB               	movwf	___lldiv@dividend+2
 13262  11F8  3048               	movlw	72
 13263  11F9  00AA               	movwf	___lldiv@dividend+1
 13264  11FA  3000               	movlw	0
 13265  11FB  00A9               	movwf	___lldiv@dividend
 13266  11FC  319D  2502  3191   	fcall	___lldiv
 13267  11FF  30FF               	movlw	255
 13268  1200  0020               	movlb	0	; select bank0
 13269  1201  0725               	addwf	?___lldiv,w
 13270  1202  00C4               	movwf	InitUART@temp
 13271  1203  30FF               	movlw	255
 13272  1204  3D26               	addwfc	?___lldiv+1,w
 13273  1205  00C5               	movwf	InitUART@temp+1
 13274  1206  30FF               	movlw	255
 13275  1207  3D27               	addwfc	?___lldiv+2,w
 13276  1208  00C6               	movwf	InitUART@temp+2
 13277  1209  30FF               	movlw	255
 13278  120A  3D28               	addwfc	?___lldiv+3,w
 13279  120B  00C7               	movwf	InitUART@temp+3
 13280                           
 13281                           ;UART.c: 94: temp = (temp >> 2) - 1;
 13282  120C  30FF               	movlw	255
 13283  120D  00B8               	movwf	??_InitUART
 13284  120E  30FF               	movlw	255
 13285  120F  00B9               	movwf	??_InitUART+1
 13286  1210  30FF               	movlw	255
 13287  1211  00BA               	movwf	??_InitUART+2
 13288  1212  30FF               	movlw	255
 13289  1213  00BB               	movwf	??_InitUART+3
 13290  1214  0844               	movf	InitUART@temp,w
 13291  1215  00BC               	movwf	??_InitUART+4
 13292  1216  0845               	movf	InitUART@temp+1,w
 13293  1217  00BD               	movwf	??_InitUART+5
 13294  1218  0846               	movf	InitUART@temp+2,w
 13295  1219  00BE               	movwf	??_InitUART+6
 13296  121A  0847               	movf	InitUART@temp+3,w
 13297  121B  00BF               	movwf	??_InitUART+7
 13298  121C  3002               	movlw	2
 13299  121D                     u7885:	
 13300  121D  36BF               	lsrf	??_InitUART+7,f
 13301  121E  0CBE               	rrf	??_InitUART+6,f
 13302  121F  0CBD               	rrf	??_InitUART+5,f
 13303  1220  0CBC               	rrf	??_InitUART+4,f
 13304  1221  0B89               	decfsz	9,f
 13305  1222  2A1D               	goto	u7885
 13306  1223  083C               	movf	??_InitUART+4,w
 13307  1224  07B8               	addwf	??_InitUART,f
 13308  1225  083D               	movf	??_InitUART+5,w
 13309  1226  3DB9               	addwfc	??_InitUART+1,f
 13310  1227  083E               	movf	??_InitUART+6,w
 13311  1228  3DBA               	addwfc	??_InitUART+2,f
 13312  1229  083F               	movf	??_InitUART+7,w
 13313  122A  3DBB               	addwfc	??_InitUART+3,f
 13314  122B  083B               	movf	??_InitUART+3,w
 13315  122C  00C7               	movwf	InitUART@temp+3
 13316  122D  083A               	movf	??_InitUART+2,w
 13317  122E  00C6               	movwf	InitUART@temp+2
 13318  122F  0839               	movf	??_InitUART+1,w
 13319  1230  00C5               	movwf	InitUART@temp+1
 13320  1231  0838               	movf	??_InitUART,w
 13321  1232  00C4               	movwf	InitUART@temp
 13322                           
 13323                           ;UART.c: 95: spbrg = (unsigned int)temp;
 13324  1233  0845               	movf	InitUART@temp+1,w
 13325  1234  01C1               	clrf	InitUART@spbrg+1
 13326  1235  07C1               	addwf	InitUART@spbrg+1,f
 13327  1236  0844               	movf	InitUART@temp,w
 13328  1237  01C0               	clrf	InitUART@spbrg
 13329  1238  07C0               	addwf	InitUART@spbrg,f
 13330                           
 13331                           ;UART.c: 97: RCSTAbits.CREN = 0;
 13332  1239  0023               	movlb	3	; select bank3
 13333  123A  121D               	bcf	29,4	;volatile
 13334                           
 13335                           ;UART.c: 98: OpenUSART(config, spbrg);
 13336  123B  0020               	movlb	0	; select bank0
 13337  123C  0841               	movf	InitUART@spbrg+1,w
 13338  123D  01A6               	clrf	OpenUSART@spbrg+1
 13339  123E  07A6               	addwf	OpenUSART@spbrg+1,f
 13340  123F  0840               	movf	InitUART@spbrg,w
 13341  1240  01A5               	clrf	OpenUSART@spbrg
 13342  1241  07A5               	addwf	OpenUSART@spbrg,f
 13343  1242  0843               	movf	InitUART@config,w
 13344  1243  319B  2358  3191   	fcall	_OpenUSART
 13345                           
 13346                           ;UART.c: 99: baudUSART(baudconfig);
 13347  1246  0020               	movlb	0	; select bank0
 13348  1247  0842               	movf	InitUART@baudconfig,w
 13349  1248  3198  20B6  3191   	fcall	_baudUSART
 13350                           
 13351                           ;UART.c: 100: temp = ReadUSART();
 13352  124B  3198  20EB  3191   	fcall	_ReadUSART
 13353  124E  0020               	movlb	0	; select bank0
 13354  124F  00B8               	movwf	??_InitUART
 13355  1250  01B9               	clrf	??_InitUART+1
 13356  1251  01BA               	clrf	??_InitUART+2
 13357  1252  01BB               	clrf	??_InitUART+3
 13358  1253  083B               	movf	??_InitUART+3,w
 13359  1254  00C7               	movwf	InitUART@temp+3
 13360  1255  083A               	movf	??_InitUART+2,w
 13361  1256  00C6               	movwf	InitUART@temp+2
 13362  1257  0839               	movf	??_InitUART+1,w
 13363  1258  00C5               	movwf	InitUART@temp+1
 13364  1259  0838               	movf	??_InitUART,w
 13365  125A  00C4               	movwf	InitUART@temp
 13366                           
 13367                           ;UART.c: 101: temp = ReadUSART();
 13368  125B  3198  20EB  3191   	fcall	_ReadUSART
 13369  125E  0020               	movlb	0	; select bank0
 13370  125F  00B8               	movwf	??_InitUART
 13371  1260  01B9               	clrf	??_InitUART+1
 13372  1261  01BA               	clrf	??_InitUART+2
 13373  1262  01BB               	clrf	??_InitUART+3
 13374  1263  083B               	movf	??_InitUART+3,w
 13375  1264  00C7               	movwf	InitUART@temp+3
 13376  1265  083A               	movf	??_InitUART+2,w
 13377  1266  00C6               	movwf	InitUART@temp+2
 13378  1267  0839               	movf	??_InitUART+1,w
 13379  1268  00C5               	movwf	InitUART@temp+1
 13380  1269  0838               	movf	??_InitUART,w
 13381  126A  00C4               	movwf	InitUART@temp
 13382                           
 13383                           ;UART.c: 102: temp = ReadUSART();
 13384  126B  3198  20EB  3191   	fcall	_ReadUSART
 13385  126E  0020               	movlb	0	; select bank0
 13386  126F  00B8               	movwf	??_InitUART
 13387  1270  01B9               	clrf	??_InitUART+1
 13388  1271  01BA               	clrf	??_InitUART+2
 13389  1272  01BB               	clrf	??_InitUART+3
 13390  1273  083B               	movf	??_InitUART+3,w
 13391  1274  00C7               	movwf	InitUART@temp+3
 13392  1275  083A               	movf	??_InitUART+2,w
 13393  1276  00C6               	movwf	InitUART@temp+2
 13394  1277  0839               	movf	??_InitUART+1,w
 13395  1278  00C5               	movwf	InitUART@temp+1
 13396  1279  0838               	movf	??_InitUART,w
 13397  127A  00C4               	movwf	InitUART@temp
 13398                           
 13399                           ;UART.c: 103: temp = ReadUSART();
 13400  127B  3198  20EB  3191   	fcall	_ReadUSART
 13401  127E  0020               	movlb	0	; select bank0
 13402  127F  00B8               	movwf	??_InitUART
 13403  1280  01B9               	clrf	??_InitUART+1
 13404  1281  01BA               	clrf	??_InitUART+2
 13405  1282  01BB               	clrf	??_InitUART+3
 13406  1283  083B               	movf	??_InitUART+3,w
 13407  1284  00C7               	movwf	InitUART@temp+3
 13408  1285  083A               	movf	??_InitUART+2,w
 13409  1286  00C6               	movwf	InitUART@temp+2
 13410  1287  0839               	movf	??_InitUART+1,w
 13411  1288  00C5               	movwf	InitUART@temp+1
 13412  1289  0838               	movf	??_InitUART,w
 13413  128A  00C4               	movwf	InitUART@temp
 13414                           
 13415                           ;UART.c: 104: temp = ReadUSART();
 13416  128B  3198  20EB         	fcall	_ReadUSART
 13417  128D  0020               	movlb	0	; select bank0
 13418  128E  00B8               	movwf	??_InitUART
 13419  128F  01B9               	clrf	??_InitUART+1
 13420  1290  01BA               	clrf	??_InitUART+2
 13421  1291  01BB               	clrf	??_InitUART+3
 13422  1292  083B               	movf	??_InitUART+3,w
 13423  1293  00C7               	movwf	InitUART@temp+3
 13424  1294  083A               	movf	??_InitUART+2,w
 13425  1295  00C6               	movwf	InitUART@temp+2
 13426  1296  0839               	movf	??_InitUART+1,w
 13427  1297  00C5               	movwf	InitUART@temp+1
 13428  1298  0838               	movf	??_InitUART,w
 13429  1299  00C4               	movwf	InitUART@temp
 13430                           
 13431                           ;UART.c: 106: PPSLOCK =0;
 13432  129A  003C               	movlb	28	; select bank28
 13433  129B  018F               	clrf	15	;volatile
 13434                           
 13435                           ;UART.c: 107: RC2PPS = 0b00010100;
 13436  129C  3014               	movlw	20
 13437  129D  003D               	movlb	29	; select bank29
 13438  129E  00A2               	movwf	34	;volatile
 13439                           
 13440                           ;UART.c: 108: CKPPS = 0b00010010;
 13441  129F  3012               	movlw	18
 13442  12A0  003C               	movlb	28	; select bank28
 13443  12A1  00A5               	movwf	37	;volatile
 13444                           
 13445                           ;UART.c: 109: RXPPS = 0b00010101;
 13446  12A2  3015               	movlw	21
 13447  12A3  00A4               	movwf	36	;volatile
 13448                           
 13449                           ;UART.c: 110: PPSLOCK =1;
 13450  12A4  3001               	movlw	1
 13451  12A5  008F               	movwf	15	;volatile
 13452                           
 13453                           ;UART.c: 112: PIR1bits.RCIF = 0;
 13454  12A6  0020               	movlb	0	; select bank0
 13455  12A7  1291               	bcf	17,5	;volatile
 13456                           
 13457                           ;UART.c: 113: INTCONbits.PEIE = 1;
 13458  12A8  170B               	bsf	11,6	;volatile
 13459  12A9  0008               	return
 13460  12AA                     __end_of_InitUART:	
 13461                           
 13462                           	psect	text35
 13463  18B6                     __ptext35:	
 13464 ;; *************** function _baudUSART *****************
 13465 ;; Defined at:
 13466 ;;		line 116 in file "UART.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  baudconfig      1    wreg     unsigned char 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;		None               void
 13473 ;; Registers used:
 13474 ;;		wreg, status,2
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;Total ram usage:        1 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    3
 13487 ;; This function calls:
 13488 ;;		Nothing
 13489 ;; This function is called by:
 13490 ;;		_InitUART
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           
 13495                           ;psect for function _baudUSART
 13496  18B6                     _baudUSART:	
 13497                           
 13498                           ;incstack = 0
 13499                           ; Regs used in _baudUSART: [wreg+status,2]
 13500                           ;baudUSART@baudconfig stored from wreg
 13501  18B6  0020               	movlb	0	; select bank0
 13502  18B7  00A5               	movwf	baudUSART@baudconfig
 13503                           
 13504                           ;UART.c: 118: BAUD1CON =0;
 13505  18B8  0023               	movlb	3	; select bank3
 13506  18B9  019F               	clrf	31	;volatile
 13507                           
 13508                           ;UART.c: 119: BAUD1CON = baudconfig;
 13509  18BA  0020               	movlb	0	; select bank0
 13510  18BB  0825               	movf	baudUSART@baudconfig,w
 13511  18BC  0023               	movlb	3	; select bank3
 13512  18BD  009F               	movwf	31	;volatile
 13513  18BE  0008               	return
 13514  18BF                     __end_of_baudUSART:	
 13515                           
 13516                           	psect	text36
 13517  1D02                     __ptext36:	
 13518 ;; *************** function ___lldiv *****************
 13519 ;; Defined at:
 13520 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;  divisor         4    5[BANK0 ] unsigned long 
 13523 ;;  dividend        4    9[BANK0 ] unsigned long 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  quotient        4   14[BANK0 ] unsigned long 
 13526 ;;  counter         1   18[BANK0 ] unsigned char 
 13527 ;; Return value:  Size  Location     Type
 13528 ;;                  4    5[BANK0 ] unsigned long 
 13529 ;; Registers used:
 13530 ;;		wreg, status,2, status,0
 13531 ;; Tracked objects:
 13532 ;;		On entry : 0/0
 13533 ;;		On exit  : 0/0
 13534 ;;		Unchanged: 0/0
 13535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13536 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;Total ram usage:       14 bytes
 13541 ;; Hardware stack levels used:    1
 13542 ;; Hardware stack levels required when called:    3
 13543 ;; This function calls:
 13544 ;;		Nothing
 13545 ;; This function is called by:
 13546 ;;		_InitUART
 13547 ;;		_sprintf
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           
 13552                           ;psect for function ___lldiv
 13553  1D02                     ___lldiv:	
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13557  1D02  3000               	movlw	0
 13558  1D03  0020               	movlb	0	; select bank0
 13559  1D04  00B1               	movwf	___lldiv@quotient+3
 13560  1D05  3000               	movlw	0
 13561  1D06  00B0               	movwf	___lldiv@quotient+2
 13562  1D07  3000               	movlw	0
 13563  1D08  00AF               	movwf	___lldiv@quotient+1
 13564  1D09  3000               	movlw	0
 13565  1D0A  00AE               	movwf	___lldiv@quotient
 13566  1D0B  0828               	movf	___lldiv@divisor+3,w
 13567  1D0C  0427               	iorwf	___lldiv@divisor+2,w
 13568  1D0D  0426               	iorwf	___lldiv@divisor+1,w
 13569  1D0E  0425               	iorwf	___lldiv@divisor,w
 13570  1D0F  1903               	skipnz
 13571  1D10  2D4C               	goto	l5992
 13572  1D11  01B2               	clrf	___lldiv@counter
 13573  1D12  0AB2               	incf	___lldiv@counter,f
 13574  1D13                     l5978:	
 13575  1D13  1BA8               	btfsc	___lldiv@divisor+3,7
 13576  1D14  2D21               	goto	l5980
 13577  1D15  3001               	movlw	1
 13578  1D16                     u7665:	
 13579  1D16  35A5               	lslf	___lldiv@divisor,f
 13580  1D17  0DA6               	rlf	___lldiv@divisor+1,f
 13581  1D18  0DA7               	rlf	___lldiv@divisor+2,f
 13582  1D19  0DA8               	rlf	___lldiv@divisor+3,f
 13583  1D1A  0B89               	decfsz	9,f
 13584  1D1B  2D16               	goto	u7665
 13585  1D1C  3001               	movlw	1
 13586  1D1D  00AD               	movwf	??___lldiv
 13587  1D1E  082D               	movf	??___lldiv,w
 13588  1D1F  07B2               	addwf	___lldiv@counter,f
 13589  1D20  2D13               	goto	l5978
 13590  1D21                     l5980:	
 13591  1D21  3001               	movlw	1
 13592  1D22                     u7685:	
 13593  1D22  35AE               	lslf	___lldiv@quotient,f
 13594  1D23  0DAF               	rlf	___lldiv@quotient+1,f
 13595  1D24  0DB0               	rlf	___lldiv@quotient+2,f
 13596  1D25  0DB1               	rlf	___lldiv@quotient+3,f
 13597  1D26  0B89               	decfsz	9,f
 13598  1D27  2D22               	goto	u7685
 13599  1D28  0828               	movf	___lldiv@divisor+3,w
 13600  1D29  022C               	subwf	___lldiv@dividend+3,w
 13601  1D2A  1D03               	skipz
 13602  1D2B  2D36               	goto	u7695
 13603  1D2C  0827               	movf	___lldiv@divisor+2,w
 13604  1D2D  022B               	subwf	___lldiv@dividend+2,w
 13605  1D2E  1D03               	skipz
 13606  1D2F  2D36               	goto	u7695
 13607  1D30  0826               	movf	___lldiv@divisor+1,w
 13608  1D31  022A               	subwf	___lldiv@dividend+1,w
 13609  1D32  1D03               	skipz
 13610  1D33  2D36               	goto	u7695
 13611  1D34  0825               	movf	___lldiv@divisor,w
 13612  1D35  0229               	subwf	___lldiv@dividend,w
 13613  1D36                     u7695:	
 13614  1D36  1C03               	skipc
 13615  1D37  2D41               	goto	l5988
 13616  1D38  0825               	movf	___lldiv@divisor,w
 13617  1D39  02A9               	subwf	___lldiv@dividend,f
 13618  1D3A  0826               	movf	___lldiv@divisor+1,w
 13619  1D3B  3BAA               	subwfb	___lldiv@dividend+1,f
 13620  1D3C  0827               	movf	___lldiv@divisor+2,w
 13621  1D3D  3BAB               	subwfb	___lldiv@dividend+2,f
 13622  1D3E  0828               	movf	___lldiv@divisor+3,w
 13623  1D3F  3BAC               	subwfb	___lldiv@dividend+3,f
 13624  1D40  142E               	bsf	___lldiv@quotient,0
 13625  1D41                     l5988:	
 13626  1D41  3001               	movlw	1
 13627  1D42                     u7705:	
 13628  1D42  36A8               	lsrf	___lldiv@divisor+3,f
 13629  1D43  0CA7               	rrf	___lldiv@divisor+2,f
 13630  1D44  0CA6               	rrf	___lldiv@divisor+1,f
 13631  1D45  0CA5               	rrf	___lldiv@divisor,f
 13632  1D46  0B89               	decfsz	9,f
 13633  1D47  2D42               	goto	u7705
 13634  1D48  3001               	movlw	1
 13635  1D49  02B2               	subwf	___lldiv@counter,f
 13636  1D4A  1D03               	btfss	3,2
 13637  1D4B  2D21               	goto	l5980
 13638  1D4C                     l5992:	
 13639  1D4C  0831               	movf	___lldiv@quotient+3,w
 13640  1D4D  00A8               	movwf	?___lldiv+3
 13641  1D4E  0830               	movf	___lldiv@quotient+2,w
 13642  1D4F  00A7               	movwf	?___lldiv+2
 13643  1D50  082F               	movf	___lldiv@quotient+1,w
 13644  1D51  00A6               	movwf	?___lldiv+1
 13645  1D52  082E               	movf	___lldiv@quotient,w
 13646  1D53  00A5               	movwf	?___lldiv
 13647  1D54  0008               	return
 13648  1D55                     __end_of___lldiv:	
 13649                           
 13650                           	psect	text37
 13651  18EB                     __ptext37:	
 13652 ;; *************** function _ReadUSART *****************
 13653 ;; Defined at:
 13654 ;;		line 234 in file "UART.c"
 13655 ;; Parameters:    Size  Location     Type
 13656 ;;		None
 13657 ;; Auto vars:     Size  Location     Type
 13658 ;;  data            1    6[BANK0 ] unsigned char 
 13659 ;; Return value:  Size  Location     Type
 13660 ;;                  1    wreg      unsigned char 
 13661 ;; Registers used:
 13662 ;;		wreg
 13663 ;; Tracked objects:
 13664 ;;		On entry : 0/0
 13665 ;;		On exit  : 0/0
 13666 ;;		Unchanged: 0/0
 13667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;Total ram usage:        2 bytes
 13673 ;; Hardware stack levels used:    1
 13674 ;; Hardware stack levels required when called:    3
 13675 ;; This function calls:
 13676 ;;		Nothing
 13677 ;; This function is called by:
 13678 ;;		_InitUART
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           
 13683                           ;psect for function _ReadUSART
 13684  18EB                     _ReadUSART:	
 13685                           
 13686                           ;UART.c: 236: char data;
 13687                           ;UART.c: 238: if(RCSTAbits.FERR)
 13688                           
 13689                           ;incstack = 0
 13690                           ; Regs used in _ReadUSART: [wreg]
 13691  18EB  0023               	movlb	3	; select bank3
 13692  18EC  191D               	btfsc	29,2	;volatile
 13693                           
 13694                           ;UART.c: 240: if(RCSTAbits.OERR)
 13695  18ED  1C9D               	btfss	29,1	;volatile
 13696  18EE  28F0               	goto	l5828
 13697                           
 13698                           ;UART.c: 241: RCSTAbits.CREN = 0;
 13699  18EF  121D               	bcf	29,4	;volatile
 13700  18F0                     l5828:	
 13701                           
 13702                           ;UART.c: 243: data = RCREG;
 13703  18F0  0819               	movf	25,w	;volatile
 13704  18F1  0020               	movlb	0	; select bank0
 13705  18F2  00A5               	movwf	??_ReadUSART
 13706  18F3  0825               	movf	??_ReadUSART,w
 13707  18F4  00A6               	movwf	ReadUSART@data
 13708                           
 13709                           ;UART.c: 245: return (data);
 13710  18F5  0826               	movf	ReadUSART@data,w
 13711  18F6  0008               	return
 13712  18F7                     __end_of_ReadUSART:	
 13713                           
 13714                           	psect	text38
 13715  1B58                     __ptext38:	
 13716 ;; *************** function _OpenUSART *****************
 13717 ;; Defined at:
 13718 ;;		line 122 in file "UART.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  config          1    wreg     unsigned char 
 13721 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;  config          1    7[BANK0 ] unsigned char 
 13724 ;; Return value:  Size  Location     Type
 13725 ;;		None               void
 13726 ;; Registers used:
 13727 ;;		wreg, status,2
 13728 ;; Tracked objects:
 13729 ;;		On entry : 0/0
 13730 ;;		On exit  : 0/0
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:        3 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:    3
 13740 ;; This function calls:
 13741 ;;		Nothing
 13742 ;; This function is called by:
 13743 ;;		_InitUART
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _OpenUSART
 13749  1B58                     _OpenUSART:	
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _OpenUSART: [wreg+status,2]
 13753                           ;OpenUSART@config stored from wreg
 13754  1B58  0020               	movlb	0	; select bank0
 13755  1B59  00A7               	movwf	OpenUSART@config
 13756                           
 13757                           ;UART.c: 124: TX1STA = 0;
 13758  1B5A  0023               	movlb	3	; select bank3
 13759  1B5B  019E               	clrf	30	;volatile
 13760                           
 13761                           ;UART.c: 125: RC1STA = 0;
 13762  1B5C  019D               	clrf	29	;volatile
 13763                           
 13764                           ;UART.c: 127: if(config&0x01)
 13765  1B5D  0020               	movlb	0	; select bank0
 13766  1B5E  1C27               	btfss	OpenUSART@config,0
 13767  1B5F  2B62               	goto	l5860
 13768                           
 13769                           ;UART.c: 128: {
 13770                           ;UART.c: 129: TX1STAbits.SYNC = 1;
 13771  1B60  0023               	movlb	3	; select bank3
 13772  1B61  161E               	bsf	30,4	;volatile
 13773  1B62                     l5860:	
 13774                           
 13775                           ;UART.c: 130: }
 13776                           ;UART.c: 132: if(config&0x02)
 13777  1B62  0020               	movlb	0	; select bank0
 13778  1B63  1CA7               	btfss	OpenUSART@config,1
 13779  1B64  2B68               	goto	l5864
 13780                           
 13781                           ;UART.c: 133: {
 13782                           ;UART.c: 134: TX1STAbits.TX9 = 1;
 13783  1B65  0023               	movlb	3	; select bank3
 13784  1B66  171E               	bsf	30,6	;volatile
 13785                           
 13786                           ;UART.c: 135: RC1STAbits.RX9 = 1;
 13787  1B67  171D               	bsf	29,6	;volatile
 13788  1B68                     l5864:	
 13789                           
 13790                           ;UART.c: 136: }
 13791                           ;UART.c: 138: if(config&0x04)
 13792  1B68  0020               	movlb	0	; select bank0
 13793  1B69  1D27               	btfss	OpenUSART@config,2
 13794  1B6A  2B6D               	goto	l5868
 13795                           
 13796                           ;UART.c: 139: {
 13797                           ;UART.c: 140: TX1STAbits.CSRC = 1;
 13798  1B6B  0023               	movlb	3	; select bank3
 13799  1B6C  179E               	bsf	30,7	;volatile
 13800  1B6D                     l5868:	
 13801                           
 13802                           ;UART.c: 141: }
 13803                           ;UART.c: 143: if(config&0x08)
 13804  1B6D  0020               	movlb	0	; select bank0
 13805  1B6E  1DA7               	btfss	OpenUSART@config,3
 13806  1B6F  2B73               	goto	l474
 13807                           
 13808                           ;UART.c: 144: {
 13809                           ;UART.c: 145: RC1STAbits.CREN = 1;
 13810  1B70  0023               	movlb	3	; select bank3
 13811  1B71  161D               	bsf	29,4	;volatile
 13812                           
 13813                           ;UART.c: 146: }
 13814  1B72  2B75               	goto	l5872
 13815  1B73                     l474:	
 13816                           
 13817                           ;UART.c: 147: else
 13818                           ;UART.c: 148: {
 13819                           ;UART.c: 149: RC1STAbits.SREN = 1;
 13820  1B73  0023               	movlb	3	; select bank3
 13821  1B74  169D               	bsf	29,5	;volatile
 13822  1B75                     l5872:	
 13823                           
 13824                           ;UART.c: 150: }
 13825                           ;UART.c: 152: if(config&0x10)
 13826  1B75  0020               	movlb	0	; select bank0
 13827  1B76  1E27               	btfss	OpenUSART@config,4
 13828  1B77  2B7A               	goto	l5878
 13829                           
 13830                           ;UART.c: 153: {
 13831                           ;UART.c: 154: TX1STAbits.BRGH = 1;
 13832  1B78  0023               	movlb	3	; select bank3
 13833  1B79  151E               	bsf	30,2	;volatile
 13834  1B7A                     l5878:	
 13835                           ;UART.c: 158: {
 13836                           
 13837                           
 13838                           ;UART.c: 160: }
 13839                           ;UART.c: 162: if(config&0x40)
 13840  1B7A  0020               	movlb	0	; select bank0
 13841  1B7B  1F27               	btfss	OpenUSART@config,6
 13842  1B7C  2B81               	goto	l478
 13843                           
 13844                           ;UART.c: 163: {
 13845                           ;UART.c: 164: PIR1bits.RCIF = 0;
 13846  1B7D  1291               	bcf	17,5	;volatile
 13847                           
 13848                           ;UART.c: 165: PIE1bits.RCIE = 1;
 13849  1B7E  0021               	movlb	1	; select bank1
 13850  1B7F  1691               	bsf	17,5	;volatile
 13851                           
 13852                           ;UART.c: 166: }
 13853  1B80  2B83               	goto	l5882
 13854  1B81                     l478:	
 13855                           
 13856                           ;UART.c: 167: else
 13857                           ;UART.c: 168: {
 13858                           ;UART.c: 169: PIE1bits.RCIE = 0;
 13859  1B81  0021               	movlb	1	; select bank1
 13860  1B82  1291               	bcf	17,5	;volatile
 13861  1B83                     l5882:	
 13862                           
 13863                           ;UART.c: 170: }
 13864                           ;UART.c: 172: if(config&0x80)
 13865  1B83  0020               	movlb	0	; select bank0
 13866  1B84  1FA7               	btfss	OpenUSART@config,7
 13867  1B85  2B8A               	goto	l480
 13868                           
 13869                           ;UART.c: 173: {
 13870                           ;UART.c: 174: PIR1bits.TXIF = 0;
 13871  1B86  1211               	bcf	17,4	;volatile
 13872                           
 13873                           ;UART.c: 175: PIE1bits.TXIE = 1;
 13874  1B87  0021               	movlb	1	; select bank1
 13875  1B88  1611               	bsf	17,4	;volatile
 13876                           
 13877                           ;UART.c: 176: }
 13878  1B89  2B8C               	goto	l5886
 13879  1B8A                     l480:	
 13880                           
 13881                           ;UART.c: 177: else
 13882                           ;UART.c: 178: {
 13883                           ;UART.c: 179: PIE1bits.TXIE = 0;
 13884  1B8A  0021               	movlb	1	; select bank1
 13885  1B8B  1211               	bcf	17,4	;volatile
 13886  1B8C                     l5886:	
 13887                           
 13888                           ;UART.c: 180: }
 13889                           ;UART.c: 182: SPBRG = spbrg;
 13890  1B8C  0020               	movlb	0	; select bank0
 13891  1B8D  0825               	movf	OpenUSART@spbrg,w
 13892  1B8E  0023               	movlb	3	; select bank3
 13893  1B8F  009B               	movwf	27	;volatile
 13894                           
 13895                           ;UART.c: 183: SPBRGH = spbrg >> 8;
 13896  1B90  0020               	movlb	0	; select bank0
 13897  1B91  0826               	movf	OpenUSART@spbrg+1,w
 13898  1B92  0023               	movlb	3	; select bank3
 13899  1B93  009C               	movwf	28	;volatile
 13900                           
 13901                           ;UART.c: 185: TX1STAbits.TXEN = 1;
 13902  1B94  169E               	bsf	30,5	;volatile
 13903                           
 13904                           ;UART.c: 186: RC1STAbits.SPEN = 1;
 13905  1B95  179D               	bsf	29,7	;volatile
 13906  1B96  0008               	return
 13907  1B97                     __end_of_OpenUSART:	
 13908                           
 13909                           	psect	text39
 13910  1903                     __ptext39:	
 13911 ;; *************** function _CloseUSART *****************
 13912 ;; Defined at:
 13913 ;;		line 45 in file "UART.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;		None
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;		None
 13918 ;; Return value:  Size  Location     Type
 13919 ;;		None               void
 13920 ;; Registers used:
 13921 ;;		wreg, status,2, status,0
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 0/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;Total ram usage:        1 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    3
 13934 ;; This function calls:
 13935 ;;		Nothing
 13936 ;; This function is called by:
 13937 ;;		_InitUART
 13938 ;; This function uses a non-reentrant model
 13939 ;;
 13940                           
 13941                           
 13942                           ;psect for function _CloseUSART
 13943  1903                     _CloseUSART:	
 13944                           
 13945                           ;UART.c: 47: RCSTA&=0b01001111;
 13946                           
 13947                           ;incstack = 0
 13948                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13949  1903  304F               	movlw	79
 13950  1904  0020               	movlb	0	; select bank0
 13951  1905  00A5               	movwf	??_CloseUSART
 13952  1906  0825               	movf	??_CloseUSART,w
 13953  1907  0023               	movlb	3	; select bank3
 13954  1908  059D               	andwf	29,f	;volatile
 13955                           
 13956                           ;UART.c: 48: TX1STAbits.TXEN=0;
 13957  1909  129E               	bcf	30,5	;volatile
 13958                           
 13959                           ;UART.c: 49: PIE1&=0b11001111;
 13960  190A  30CF               	movlw	207
 13961  190B  0020               	movlb	0	; select bank0
 13962  190C  00A5               	movwf	??_CloseUSART
 13963  190D  0825               	movf	??_CloseUSART,w
 13964  190E  0021               	movlb	1	; select bank1
 13965  190F  0591               	andwf	17,f	;volatile
 13966  1910  0008               	return
 13967  1911                     __end_of_CloseUSART:	
 13968                           
 13969                           	psect	text40
 13970  139C                     __ptext40:	
 13971 ;; *************** function _Init_PS_2_Send *****************
 13972 ;; Defined at:
 13973 ;;		line 968 in file "PS_2.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;		None
 13976 ;; Auto vars:     Size  Location     Type
 13977 ;;		None
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      unsigned char 
 13980 ;; Registers used:
 13981 ;;		wreg, status,2, status,0, pclath, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;Total ram usage:        0 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:    5
 13994 ;; This function calls:
 13995 ;;		_PS_2_DISABLE_INTERRUPT
 13996 ;;		_PS_2_ENABLE_INTERRUPT
 13997 ;;		_Send_PS2
 13998 ;;		_delayUS
 13999 ;; This function is called by:
 14000 ;;		_main
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           
 14005                           ;psect for function _Init_PS_2_Send
 14006  139C                     _Init_PS_2_Send:	
 14007                           
 14008                           ;PS_2.c: 970: PS_2_DISABLE_INTERRUPT(0b00100000);
 14009                           
 14010                           ;incstack = 0
 14011                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 14012  139C  3020               	movlw	32
 14013  139D  3199  21DD  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 14014                           
 14015                           ;PS_2.c: 973: if(Send_PS2(0xED))
 14016  13A0  30ED               	movlw	237
 14017  13A1  318C  24A9  3193   	fcall	_Send_PS2
 14018  13A4  3A00               	xorlw	0
 14019  13A5  1903               	skipnz
 14020  13A6  2BA9               	goto	l7302
 14021                           
 14022                           ;PS_2.c: 974: {
 14023                           ;PS_2.c: 975: return 0;
 14024  13A7  3000               	movlw	0
 14025  13A8  0008               	return
 14026  13A9                     l7302:	
 14027                           
 14028                           ;PS_2.c: 976: }
 14029                           ;PS_2.c: 977: delayUS(100);
 14030  13A9  3000               	movlw	0
 14031  13AA  0020               	movlb	0	; select bank0
 14032  13AB  00A8               	movwf	delayUS@US+3
 14033  13AC  3000               	movlw	0
 14034  13AD  00A7               	movwf	delayUS@US+2
 14035  13AE  3000               	movlw	0
 14036  13AF  00A6               	movwf	delayUS@US+1
 14037  13B0  3064               	movlw	100
 14038  13B1  00A5               	movwf	delayUS@US
 14039  13B2  319B  2323  3193   	fcall	_delayUS
 14040                           
 14041                           ;PS_2.c: 978: if(Send_PS2(0x01))
 14042  13B5  3001               	movlw	1
 14043  13B6  318C  24A9  3193   	fcall	_Send_PS2
 14044  13B9  3A00               	xorlw	0
 14045  13BA  1903               	skipnz
 14046  13BB  2BBE               	goto	l7308
 14047                           
 14048                           ;PS_2.c: 979: {
 14049                           ;PS_2.c: 980: return 0;
 14050  13BC  3000               	movlw	0
 14051  13BD  0008               	return
 14052  13BE                     l7308:	
 14053                           
 14054                           ;PS_2.c: 981: }
 14055                           ;PS_2.c: 982: delayUS(5000);
 14056  13BE  3000               	movlw	0
 14057  13BF  0020               	movlb	0	; select bank0
 14058  13C0  00A8               	movwf	delayUS@US+3
 14059  13C1  3000               	movlw	0
 14060  13C2  00A7               	movwf	delayUS@US+2
 14061  13C3  3013               	movlw	19
 14062  13C4  00A6               	movwf	delayUS@US+1
 14063  13C5  3088               	movlw	136
 14064  13C6  00A5               	movwf	delayUS@US
 14065  13C7  319B  2323  3193   	fcall	_delayUS
 14066                           
 14067                           ;PS_2.c: 985: if(Send_PS2(0xED))
 14068  13CA  30ED               	movlw	237
 14069  13CB  318C  24A9  3193   	fcall	_Send_PS2
 14070  13CE  3A00               	xorlw	0
 14071  13CF  1903               	skipnz
 14072  13D0  2BD3               	goto	l7314
 14073                           
 14074                           ;PS_2.c: 986: {
 14075                           ;PS_2.c: 987: return 0;
 14076  13D1  3000               	movlw	0
 14077  13D2  0008               	return
 14078  13D3                     l7314:	
 14079                           
 14080                           ;PS_2.c: 988: }
 14081                           ;PS_2.c: 989: delayUS(100);
 14082  13D3  3000               	movlw	0
 14083  13D4  0020               	movlb	0	; select bank0
 14084  13D5  00A8               	movwf	delayUS@US+3
 14085  13D6  3000               	movlw	0
 14086  13D7  00A7               	movwf	delayUS@US+2
 14087  13D8  3000               	movlw	0
 14088  13D9  00A6               	movwf	delayUS@US+1
 14089  13DA  3064               	movlw	100
 14090  13DB  00A5               	movwf	delayUS@US
 14091  13DC  319B  2323  3193   	fcall	_delayUS
 14092                           
 14093                           ;PS_2.c: 990: if(Send_PS2(0x04))
 14094  13DF  3004               	movlw	4
 14095  13E0  318C  24A9  3193   	fcall	_Send_PS2
 14096  13E3  3A00               	xorlw	0
 14097  13E4  1903               	skipnz
 14098  13E5  2BE8               	goto	l7320
 14099                           
 14100                           ;PS_2.c: 991: {
 14101                           ;PS_2.c: 992: return 0;
 14102  13E6  3000               	movlw	0
 14103  13E7  0008               	return
 14104  13E8                     l7320:	
 14105                           
 14106                           ;PS_2.c: 993: }
 14107                           ;PS_2.c: 994: delayUS(5000);
 14108  13E8  3000               	movlw	0
 14109  13E9  0020               	movlb	0	; select bank0
 14110  13EA  00A8               	movwf	delayUS@US+3
 14111  13EB  3000               	movlw	0
 14112  13EC  00A7               	movwf	delayUS@US+2
 14113  13ED  3013               	movlw	19
 14114  13EE  00A6               	movwf	delayUS@US+1
 14115  13EF  3088               	movlw	136
 14116  13F0  00A5               	movwf	delayUS@US
 14117  13F1  319B  2323  3193   	fcall	_delayUS
 14118                           
 14119                           ;PS_2.c: 997: if(Send_PS2(0xED))
 14120  13F4  30ED               	movlw	237
 14121  13F5  318C  24A9  3193   	fcall	_Send_PS2
 14122  13F8  3A00               	xorlw	0
 14123  13F9  1903               	skipnz
 14124  13FA  2BFD               	goto	l7326
 14125                           
 14126                           ;PS_2.c: 998: {
 14127                           ;PS_2.c: 999: return 0;
 14128  13FB  3000               	movlw	0
 14129  13FC  0008               	return
 14130  13FD                     l7326:	
 14131                           
 14132                           ;PS_2.c: 1000: }
 14133                           ;PS_2.c: 1001: delayUS(1000);
 14134  13FD  3000               	movlw	0
 14135  13FE  0020               	movlb	0	; select bank0
 14136  13FF  00A8               	movwf	delayUS@US+3
 14137  1400  3000               	movlw	0
 14138  1401  00A7               	movwf	delayUS@US+2
 14139  1402  3003               	movlw	3
 14140  1403  00A6               	movwf	delayUS@US+1
 14141  1404  30E8               	movlw	232
 14142  1405  00A5               	movwf	delayUS@US
 14143  1406  319B  2323  3193   	fcall	_delayUS
 14144                           
 14145                           ;PS_2.c: 1002: if(Send_PS2(0x02))
 14146  1409  3002               	movlw	2
 14147  140A  318C  24A9  3193   	fcall	_Send_PS2
 14148  140D  3A00               	xorlw	0
 14149  140E  1903               	skipnz
 14150  140F  2C12               	goto	l7332
 14151                           
 14152                           ;PS_2.c: 1003: {
 14153                           ;PS_2.c: 1004: return 0;
 14154  1410  3000               	movlw	0
 14155  1411  0008               	return
 14156  1412                     l7332:	
 14157                           
 14158                           ;PS_2.c: 1005: }
 14159                           ;PS_2.c: 1006: delayUS(5000);
 14160  1412  3000               	movlw	0
 14161  1413  0020               	movlb	0	; select bank0
 14162  1414  00A8               	movwf	delayUS@US+3
 14163  1415  3000               	movlw	0
 14164  1416  00A7               	movwf	delayUS@US+2
 14165  1417  3013               	movlw	19
 14166  1418  00A6               	movwf	delayUS@US+1
 14167  1419  3088               	movlw	136
 14168  141A  00A5               	movwf	delayUS@US
 14169  141B  319B  2323  3193   	fcall	_delayUS
 14170                           
 14171                           ;PS_2.c: 1009: if(Send_PS2(0xED))
 14172  141E  30ED               	movlw	237
 14173  141F  318C  24A9  3193   	fcall	_Send_PS2
 14174  1422  3A00               	xorlw	0
 14175  1423  1903               	skipnz
 14176  1424  2C27               	goto	l7338
 14177                           
 14178                           ;PS_2.c: 1010: {
 14179                           ;PS_2.c: 1011: return 0;
 14180  1425  3000               	movlw	0
 14181  1426  0008               	return
 14182  1427                     l7338:	
 14183                           
 14184                           ;PS_2.c: 1012: }
 14185                           ;PS_2.c: 1013: delayUS(100);
 14186  1427  3000               	movlw	0
 14187  1428  0020               	movlb	0	; select bank0
 14188  1429  00A8               	movwf	delayUS@US+3
 14189  142A  3000               	movlw	0
 14190  142B  00A7               	movwf	delayUS@US+2
 14191  142C  3000               	movlw	0
 14192  142D  00A6               	movwf	delayUS@US+1
 14193  142E  3064               	movlw	100
 14194  142F  00A5               	movwf	delayUS@US
 14195  1430  319B  2323  3193   	fcall	_delayUS
 14196                           
 14197                           ;PS_2.c: 1014: if(Send_PS2(0x00))
 14198  1433  3000               	movlw	0
 14199  1434  318C  24A9  3193   	fcall	_Send_PS2
 14200  1437  3A00               	xorlw	0
 14201  1438  1903               	skipnz
 14202  1439  2C3C               	goto	l7344
 14203                           
 14204                           ;PS_2.c: 1015: {
 14205                           ;PS_2.c: 1016: return 0;
 14206  143A  3000               	movlw	0
 14207  143B  0008               	return
 14208  143C                     l7344:	
 14209                           
 14210                           ;PS_2.c: 1017: }
 14211                           ;PS_2.c: 1020: if(Send_PS2(0xf4))
 14212  143C  30F4               	movlw	244
 14213  143D  318C  24A9  3193   	fcall	_Send_PS2
 14214  1440  3A00               	xorlw	0
 14215  1441  1903               	skipnz
 14216  1442  2C45               	goto	l7350
 14217                           
 14218                           ;PS_2.c: 1021: {
 14219                           ;PS_2.c: 1022: return 0;
 14220  1443  3000               	movlw	0
 14221  1444  0008               	return
 14222  1445                     l7350:	
 14223                           
 14224                           ;PS_2.c: 1023: }
 14225                           ;PS_2.c: 1026: if(Send_PS2(0xf4))
 14226  1445  30F4               	movlw	244
 14227  1446  318C  24A9  3193   	fcall	_Send_PS2
 14228  1449  3A00               	xorlw	0
 14229  144A  1903               	skipnz
 14230  144B  2C4E               	goto	l7356
 14231                           
 14232                           ;PS_2.c: 1027: {
 14233                           ;PS_2.c: 1028: return 0;
 14234  144C  3000               	movlw	0
 14235  144D  0008               	return
 14236  144E                     l7356:	
 14237                           
 14238                           ;PS_2.c: 1029: }
 14239                           ;PS_2.c: 1032: if(Send_PS2(0xf0))
 14240  144E  30F0               	movlw	240
 14241  144F  318C  24A9  3193   	fcall	_Send_PS2
 14242  1452  3A00               	xorlw	0
 14243  1453  1903               	skipnz
 14244  1454  2C57               	goto	l7362
 14245                           
 14246                           ;PS_2.c: 1033: {
 14247                           ;PS_2.c: 1034: return 0;
 14248  1455  3000               	movlw	0
 14249  1456  0008               	return
 14250  1457                     l7362:	
 14251                           
 14252                           ;PS_2.c: 1035: }
 14253                           ;PS_2.c: 1036: delayUS(100);
 14254  1457  3000               	movlw	0
 14255  1458  0020               	movlb	0	; select bank0
 14256  1459  00A8               	movwf	delayUS@US+3
 14257  145A  3000               	movlw	0
 14258  145B  00A7               	movwf	delayUS@US+2
 14259  145C  3000               	movlw	0
 14260  145D  00A6               	movwf	delayUS@US+1
 14261  145E  3064               	movlw	100
 14262  145F  00A5               	movwf	delayUS@US
 14263  1460  319B  2323  3193   	fcall	_delayUS
 14264                           
 14265                           ;PS_2.c: 1037: if(Send_PS2(0x02))
 14266  1463  3002               	movlw	2
 14267  1464  318C  24A9  3193   	fcall	_Send_PS2
 14268  1467  3A00               	xorlw	0
 14269  1468  1903               	skipnz
 14270  1469  2C6C               	goto	l7368
 14271                           
 14272                           ;PS_2.c: 1038: {
 14273                           ;PS_2.c: 1039: return 0;
 14274  146A  3000               	movlw	0
 14275  146B  0008               	return
 14276  146C                     l7368:	
 14277                           
 14278                           ;PS_2.c: 1040: }
 14279                           ;PS_2.c: 1043: if(Send_PS2(0xf3))
 14280  146C  30F3               	movlw	243
 14281  146D  318C  24A9  3193   	fcall	_Send_PS2
 14282  1470  3A00               	xorlw	0
 14283  1471  1903               	skipnz
 14284  1472  2C75               	goto	l7374
 14285                           
 14286                           ;PS_2.c: 1044: {
 14287                           ;PS_2.c: 1045: return 0;
 14288  1473  3000               	movlw	0
 14289  1474  0008               	return
 14290  1475                     l7374:	
 14291                           
 14292                           ;PS_2.c: 1046: }
 14293                           ;PS_2.c: 1047: delayUS(100);
 14294  1475  3000               	movlw	0
 14295  1476  0020               	movlb	0	; select bank0
 14296  1477  00A8               	movwf	delayUS@US+3
 14297  1478  3000               	movlw	0
 14298  1479  00A7               	movwf	delayUS@US+2
 14299  147A  3000               	movlw	0
 14300  147B  00A6               	movwf	delayUS@US+1
 14301  147C  3064               	movlw	100
 14302  147D  00A5               	movwf	delayUS@US
 14303  147E  319B  2323  3193   	fcall	_delayUS
 14304                           
 14305                           ;PS_2.c: 1048: if(Send_PS2(0x2F))
 14306  1481  302F               	movlw	47
 14307  1482  318C  24A9  3193   	fcall	_Send_PS2
 14308  1485  3A00               	xorlw	0
 14309  1486  1903               	skipnz
 14310  1487  2C8A               	goto	l7380
 14311                           
 14312                           ;PS_2.c: 1049: {
 14313                           ;PS_2.c: 1050: return 0;
 14314  1488  3000               	movlw	0
 14315  1489  0008               	return
 14316  148A                     l7380:	
 14317                           
 14318                           ;PS_2.c: 1051: }
 14319                           ;PS_2.c: 1053: PS_2_ENABLE_INTERRUPT(0b00100000);
 14320  148A  3020               	movlw	32
 14321  148B  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
 14322                           
 14323                           ;PS_2.c: 1054: return 1;
 14324  148D  3001               	movlw	1
 14325  148E  0008               	return
 14326  148F                     __end_of_Init_PS_2_Send:	
 14327                           
 14328                           	psect	text41
 14329  0CA9                     __ptext41:	
 14330 ;; *************** function _Send_PS2 *****************
 14331 ;; Defined at:
 14332 ;;		line 812 in file "PS_2.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  command         1    wreg     unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  command         1   20[BANK0 ] unsigned char 
 14337 ;;  timeout         2   22[BANK0 ] unsigned int 
 14338 ;;  i               1   21[BANK0 ] unsigned char 
 14339 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14340 ;; Return value:  Size  Location     Type
 14341 ;;                  1    wreg      unsigned char 
 14342 ;; Registers used:
 14343 ;;		wreg, status,2, status,0, pclath, cstack
 14344 ;; Tracked objects:
 14345 ;;		On entry : 0/0
 14346 ;;		On exit  : 0/0
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;Total ram usage:        9 bytes
 14354 ;; Hardware stack levels used:    1
 14355 ;; Hardware stack levels required when called:    4
 14356 ;; This function calls:
 14357 ;;		_CheckSum_byte
 14358 ;;		_Clock_TRIS
 14359 ;;		_Data_TRIS
 14360 ;;		_PS_2_ENABLE_INTERRUPT
 14361 ;;		_READ_PS_2_PIN
 14362 ;;		_delayUS
 14363 ;; This function is called by:
 14364 ;;		_PS_2_Update
 14365 ;;		_Init_PS_2_Send
 14366 ;;		_Keyboard_Connected
 14367 ;; This function uses a non-reentrant model
 14368 ;;
 14369                           
 14370                           
 14371                           ;psect for function _Send_PS2
 14372  0CA9                     _Send_PS2:	
 14373                           
 14374                           ;incstack = 0
 14375                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14376                           ;Send_PS2@command stored from wreg
 14377  0CA9  0020               	movlb	0	; select bank0
 14378  0CAA  00B4               	movwf	Send_PS2@command
 14379                           
 14380                           ;PS_2.c: 814: unsigned char i=0;
 14381  0CAB  01B5               	clrf	Send_PS2@i
 14382                           
 14383                           ;PS_2.c: 815: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14384  0CAC  0834               	movf	Send_PS2@command,w
 14385  0CAD  00AF               	movwf	??_Send_PS2
 14386  0CAE  01B0               	clrf	??_Send_PS2+1
 14387  0CAF  082F               	movf	??_Send_PS2,w
 14388  0CB0  00A5               	movwf	CheckSum_byte@This
 14389  0CB1  0830               	movf	??_Send_PS2+1,w
 14390  0CB2  00A6               	movwf	CheckSum_byte@This+1
 14391  0CB3  3003               	movlw	3
 14392  0CB4  00B1               	movwf	??_Send_PS2+2
 14393  0CB5  0831               	movf	??_Send_PS2+2,w
 14394  0CB6  00A7               	movwf	CheckSum_byte@Odd_Even
 14395  0CB7  319A  225C  318C   	fcall	_CheckSum_byte
 14396  0CBA  0020               	movlb	0	; select bank0
 14397  0CBB  00B2               	movwf	??_Send_PS2+3
 14398  0CBC  0832               	movf	??_Send_PS2+3,w
 14399  0CBD  00B3               	movwf	Send_PS2@oddparity
 14400                           
 14401                           ;PS_2.c: 816: unsigned int timeout =0;
 14402  0CBE  01B6               	clrf	Send_PS2@timeout
 14403  0CBF  01B7               	clrf	Send_PS2@timeout+1
 14404                           
 14405                           ;PS_2.c: 818: Clock_TRIS(0);
 14406  0CC0  3000               	movlw	0
 14407  0CC1  3198  20CA  318C   	fcall	_Clock_TRIS
 14408                           
 14409                           ;PS_2.c: 819: Data_TRIS(0);
 14410  0CC4  3000               	movlw	0
 14411  0CC5  3198  20D5  318C   	fcall	_Data_TRIS
 14412                           
 14413                           ;PS_2.c: 820: LATA &= ~0b00100000;
 14414  0CC8  30DF               	movlw	223
 14415  0CC9  0020               	movlb	0	; select bank0
 14416  0CCA  00AF               	movwf	??_Send_PS2
 14417  0CCB  082F               	movf	??_Send_PS2,w
 14418  0CCC  0022               	movlb	2	; select bank2
 14419  0CCD  058C               	andwf	12,f	;volatile
 14420                           
 14421                           ;PS_2.c: 821: delayUS(300);
 14422  0CCE  3000               	movlw	0
 14423  0CCF  0020               	movlb	0	; select bank0
 14424  0CD0  00A8               	movwf	delayUS@US+3
 14425  0CD1  3000               	movlw	0
 14426  0CD2  00A7               	movwf	delayUS@US+2
 14427  0CD3  3001               	movlw	1
 14428  0CD4  00A6               	movwf	delayUS@US+1
 14429  0CD5  302C               	movlw	44
 14430  0CD6  00A5               	movwf	delayUS@US
 14431  0CD7  319B  2323  318C   	fcall	_delayUS
 14432                           
 14433                           ;PS_2.c: 822: LATA &= ~0b00010000;
 14434  0CDA  30EF               	movlw	239
 14435  0CDB  0020               	movlb	0	; select bank0
 14436  0CDC  00AF               	movwf	??_Send_PS2
 14437  0CDD  082F               	movf	??_Send_PS2,w
 14438  0CDE  0022               	movlb	2	; select bank2
 14439  0CDF  058C               	andwf	12,f	;volatile
 14440                           
 14441                           ;PS_2.c: 823: delayUS(20);
 14442  0CE0  3000               	movlw	0
 14443  0CE1  0020               	movlb	0	; select bank0
 14444  0CE2  00A8               	movwf	delayUS@US+3
 14445  0CE3  3000               	movlw	0
 14446  0CE4  00A7               	movwf	delayUS@US+2
 14447  0CE5  3000               	movlw	0
 14448  0CE6  00A6               	movwf	delayUS@US+1
 14449  0CE7  3014               	movlw	20
 14450  0CE8  00A5               	movwf	delayUS@US
 14451  0CE9  319B  2323  318C   	fcall	_delayUS
 14452                           
 14453                           ;PS_2.c: 824: Clock_TRIS(1);
 14454  0CEC  3001               	movlw	1
 14455  0CED  3198  20CA  318C   	fcall	_Clock_TRIS
 14456                           
 14457                           ;PS_2.c: 825: timeout=0;
 14458  0CF0  0020               	movlb	0	; select bank0
 14459  0CF1  01B6               	clrf	Send_PS2@timeout
 14460  0CF2  01B7               	clrf	Send_PS2@timeout+1
 14461  0CF3                     l6348:	
 14462                           ;PS_2.c: 826: while(READ_PS_2_PIN(0b00100000))
 14463                           
 14464  0CF3  3020               	movlw	32
 14465  0CF4  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14466  0CF7  3800               	iorlw	0
 14467  0CF8  1903               	btfsc	3,2
 14468  0CF9  2D10               	goto	l6350
 14469                           
 14470                           ;PS_2.c: 827: {
 14471                           ;PS_2.c: 828: __nop();
 14472  0CFA  0000               	nop
 14473                           
 14474                           ;PS_2.c: 829: timeout++;
 14475  0CFB  3001               	movlw	1
 14476  0CFC  0020               	movlb	0	; select bank0
 14477  0CFD  07B6               	addwf	Send_PS2@timeout,f
 14478  0CFE  3000               	movlw	0
 14479  0CFF  3DB7               	addwfc	Send_PS2@timeout+1,f
 14480                           
 14481                           ;PS_2.c: 830: if(timeout > 15000)
 14482  0D00  303A               	movlw	58
 14483  0D01  0237               	subwf	Send_PS2@timeout+1,w
 14484  0D02  3099               	movlw	153
 14485  0D03  1903               	skipnz
 14486  0D04  0236               	subwf	Send_PS2@timeout,w
 14487  0D05  1C03               	skipc
 14488  0D06  2CF3               	goto	l6348
 14489                           
 14490                           ;PS_2.c: 831: {
 14491                           ;PS_2.c: 832: Clock_TRIS(1);
 14492  0D07  3001               	movlw	1
 14493  0D08  3198  20CA  318C   	fcall	_Clock_TRIS
 14494                           
 14495                           ;PS_2.c: 833: Data_TRIS(1);
 14496  0D0B  3001               	movlw	1
 14497  0D0C  3198  20D5         	fcall	_Data_TRIS
 14498                           
 14499                           ;PS_2.c: 834: return 1;
 14500  0D0E  3001               	movlw	1
 14501  0D0F  0008               	return
 14502  0D10                     l6350:	
 14503                           
 14504                           ;PS_2.c: 835: }
 14505                           ;PS_2.c: 836: }
 14506                           ;PS_2.c: 837: for(i=0;i<8;i++)
 14507  0D10  0020               	movlb	0	; select bank0
 14508  0D11  01B5               	clrf	Send_PS2@i
 14509  0D12  3008               	movlw	8
 14510  0D13  0235               	subwf	Send_PS2@i,w
 14511  0D14  1803               	btfsc	3,0
 14512  0D15  2D6C               	goto	l908
 14513  0D16                     l907:	
 14514                           
 14515                           ;PS_2.c: 838: {
 14516                           ;PS_2.c: 839: if(command & 0x1)
 14517  0D16  1C34               	btfss	Send_PS2@command,0
 14518  0D17  2D1B               	goto	l6358
 14519                           
 14520                           ;PS_2.c: 840: {
 14521                           ;PS_2.c: 841: LATA |= 0b00010000;
 14522  0D18  0022               	movlb	2	; select bank2
 14523  0D19  160C               	bsf	12,4	;volatile
 14524                           
 14525                           ;PS_2.c: 842: }
 14526  0D1A  2D21               	goto	l6360
 14527  0D1B                     l6358:	
 14528                           
 14529                           ;PS_2.c: 843: else
 14530                           ;PS_2.c: 844: {
 14531                           ;PS_2.c: 845: LATA &= ~0b00010000;
 14532  0D1B  30EF               	movlw	239
 14533  0D1C  0020               	movlb	0	; select bank0
 14534  0D1D  00AF               	movwf	??_Send_PS2
 14535  0D1E  082F               	movf	??_Send_PS2,w
 14536  0D1F  0022               	movlb	2	; select bank2
 14537  0D20  058C               	andwf	12,f	;volatile
 14538  0D21                     l6360:	
 14539                           
 14540                           ;PS_2.c: 846: }
 14541                           ;PS_2.c: 847: command >> = 1;
 14542  0D21  1003               	clrc
 14543  0D22  0020               	movlb	0	; select bank0
 14544  0D23  0CB4               	rrf	Send_PS2@command,f
 14545                           
 14546                           ;PS_2.c: 848: timeout=0;
 14547  0D24  01B6               	clrf	Send_PS2@timeout
 14548  0D25  01B7               	clrf	Send_PS2@timeout+1
 14549  0D26                     l6372:	
 14550                           ;PS_2.c: 849: while(!READ_PS_2_PIN(0b00100000))
 14551                           
 14552  0D26  3020               	movlw	32
 14553  0D27  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14554  0D2A  3A00               	xorlw	0
 14555  0D2B  1D03               	btfss	3,2
 14556  0D2C  2D43               	goto	l6374
 14557                           
 14558                           ;PS_2.c: 850: {
 14559                           ;PS_2.c: 851: __nop();
 14560  0D2D  0000               	nop
 14561                           
 14562                           ;PS_2.c: 852: timeout++;
 14563  0D2E  3001               	movlw	1
 14564  0D2F  0020               	movlb	0	; select bank0
 14565  0D30  07B6               	addwf	Send_PS2@timeout,f
 14566  0D31  3000               	movlw	0
 14567  0D32  3DB7               	addwfc	Send_PS2@timeout+1,f
 14568                           
 14569                           ;PS_2.c: 853: if(timeout > 15000)
 14570  0D33  303A               	movlw	58
 14571  0D34  0237               	subwf	Send_PS2@timeout+1,w
 14572  0D35  3099               	movlw	153
 14573  0D36  1903               	skipnz
 14574  0D37  0236               	subwf	Send_PS2@timeout,w
 14575  0D38  1C03               	skipc
 14576  0D39  2D26               	goto	l6372
 14577                           
 14578                           ;PS_2.c: 854: {
 14579                           ;PS_2.c: 855: Clock_TRIS(1);
 14580  0D3A  3001               	movlw	1
 14581  0D3B  3198  20CA  318C   	fcall	_Clock_TRIS
 14582                           
 14583                           ;PS_2.c: 856: Data_TRIS(1);
 14584  0D3E  3001               	movlw	1
 14585  0D3F  3198  20D5         	fcall	_Data_TRIS
 14586                           
 14587                           ;PS_2.c: 857: return 1;
 14588  0D41  3001               	movlw	1
 14589  0D42  0008               	return
 14590  0D43                     l6374:	
 14591                           
 14592                           ;PS_2.c: 858: }
 14593                           ;PS_2.c: 859: }
 14594                           ;PS_2.c: 860: timeout=0;
 14595  0D43  0020               	movlb	0	; select bank0
 14596  0D44  01B6               	clrf	Send_PS2@timeout
 14597  0D45  01B7               	clrf	Send_PS2@timeout+1
 14598  0D46                     l6384:	
 14599                           ;PS_2.c: 861: while(READ_PS_2_PIN(0b00100000))
 14600                           
 14601  0D46  3020               	movlw	32
 14602  0D47  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14603  0D4A  3800               	iorlw	0
 14604  0D4B  1903               	btfsc	3,2
 14605  0D4C  2D63               	goto	l6386
 14606                           
 14607                           ;PS_2.c: 862: {
 14608                           ;PS_2.c: 863: __nop();
 14609  0D4D  0000               	nop
 14610                           
 14611                           ;PS_2.c: 864: timeout++;
 14612  0D4E  3001               	movlw	1
 14613  0D4F  0020               	movlb	0	; select bank0
 14614  0D50  07B6               	addwf	Send_PS2@timeout,f
 14615  0D51  3000               	movlw	0
 14616  0D52  3DB7               	addwfc	Send_PS2@timeout+1,f
 14617                           
 14618                           ;PS_2.c: 865: if(timeout > 15000)
 14619  0D53  303A               	movlw	58
 14620  0D54  0237               	subwf	Send_PS2@timeout+1,w
 14621  0D55  3099               	movlw	153
 14622  0D56  1903               	skipnz
 14623  0D57  0236               	subwf	Send_PS2@timeout,w
 14624  0D58  1C03               	skipc
 14625  0D59  2D46               	goto	l6384
 14626                           
 14627                           ;PS_2.c: 866: {
 14628                           ;PS_2.c: 867: Clock_TRIS(1);
 14629  0D5A  3001               	movlw	1
 14630  0D5B  3198  20CA  318C   	fcall	_Clock_TRIS
 14631                           
 14632                           ;PS_2.c: 868: Data_TRIS(1);
 14633  0D5E  3001               	movlw	1
 14634  0D5F  3198  20D5         	fcall	_Data_TRIS
 14635                           
 14636                           ;PS_2.c: 869: return 1;
 14637  0D61  3001               	movlw	1
 14638  0D62  0008               	return
 14639  0D63                     l6386:	
 14640  0D63  3001               	movlw	1
 14641  0D64  0020               	movlb	0	; select bank0
 14642  0D65  00AF               	movwf	??_Send_PS2
 14643  0D66  082F               	movf	??_Send_PS2,w
 14644  0D67  07B5               	addwf	Send_PS2@i,f
 14645  0D68  3008               	movlw	8
 14646  0D69  0235               	subwf	Send_PS2@i,w
 14647  0D6A  1C03               	skipc
 14648  0D6B  2D16               	goto	l907
 14649  0D6C                     l908:	
 14650                           
 14651                           ;PS_2.c: 870: }
 14652                           ;PS_2.c: 871: }
 14653                           ;PS_2.c: 872: }
 14654                           ;PS_2.c: 874: if(oddparity & 0x1)
 14655  0D6C  1C33               	btfss	Send_PS2@oddparity,0
 14656  0D6D  2D71               	goto	l6392
 14657                           
 14658                           ;PS_2.c: 875: {
 14659                           ;PS_2.c: 876: LATA |= 0b00010000;
 14660  0D6E  0022               	movlb	2	; select bank2
 14661  0D6F  160C               	bsf	12,4	;volatile
 14662                           
 14663                           ;PS_2.c: 877: }
 14664  0D70  2D77               	goto	l6394
 14665  0D71                     l6392:	
 14666                           
 14667                           ;PS_2.c: 878: else
 14668                           ;PS_2.c: 879: {
 14669                           ;PS_2.c: 880: LATA &= ~0b00010000;
 14670  0D71  30EF               	movlw	239
 14671  0D72  0020               	movlb	0	; select bank0
 14672  0D73  00AF               	movwf	??_Send_PS2
 14673  0D74  082F               	movf	??_Send_PS2,w
 14674  0D75  0022               	movlb	2	; select bank2
 14675  0D76  058C               	andwf	12,f	;volatile
 14676  0D77                     l6394:	
 14677                           
 14678                           ;PS_2.c: 881: }
 14679                           ;PS_2.c: 882: timeout=0;
 14680  0D77  0020               	movlb	0	; select bank0
 14681  0D78  01B6               	clrf	Send_PS2@timeout
 14682  0D79  01B7               	clrf	Send_PS2@timeout+1
 14683  0D7A                     l6404:	
 14684                           ;PS_2.c: 883: while(!READ_PS_2_PIN(0b00100000))
 14685                           
 14686  0D7A  3020               	movlw	32
 14687  0D7B  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14688  0D7E  3A00               	xorlw	0
 14689  0D7F  1D03               	btfss	3,2
 14690  0D80  2D97               	goto	l6406
 14691                           
 14692                           ;PS_2.c: 884: {
 14693                           ;PS_2.c: 885: __nop();
 14694  0D81  0000               	nop
 14695                           
 14696                           ;PS_2.c: 886: timeout++;
 14697  0D82  3001               	movlw	1
 14698  0D83  0020               	movlb	0	; select bank0
 14699  0D84  07B6               	addwf	Send_PS2@timeout,f
 14700  0D85  3000               	movlw	0
 14701  0D86  3DB7               	addwfc	Send_PS2@timeout+1,f
 14702                           
 14703                           ;PS_2.c: 887: if(timeout > 15000)
 14704  0D87  303A               	movlw	58
 14705  0D88  0237               	subwf	Send_PS2@timeout+1,w
 14706  0D89  3099               	movlw	153
 14707  0D8A  1903               	skipnz
 14708  0D8B  0236               	subwf	Send_PS2@timeout,w
 14709  0D8C  1C03               	skipc
 14710  0D8D  2D7A               	goto	l6404
 14711                           
 14712                           ;PS_2.c: 888: {
 14713                           ;PS_2.c: 889: Clock_TRIS(1);
 14714  0D8E  3001               	movlw	1
 14715  0D8F  3198  20CA  318C   	fcall	_Clock_TRIS
 14716                           
 14717                           ;PS_2.c: 890: Data_TRIS(1);
 14718  0D92  3001               	movlw	1
 14719  0D93  3198  20D5         	fcall	_Data_TRIS
 14720                           
 14721                           ;PS_2.c: 891: return 1;
 14722  0D95  3001               	movlw	1
 14723  0D96  0008               	return
 14724  0D97                     l6406:	
 14725                           
 14726                           ;PS_2.c: 892: }
 14727                           ;PS_2.c: 893: }
 14728                           ;PS_2.c: 894: timeout=0;
 14729  0D97  0020               	movlb	0	; select bank0
 14730  0D98  01B6               	clrf	Send_PS2@timeout
 14731  0D99  01B7               	clrf	Send_PS2@timeout+1
 14732  0D9A                     l6416:	
 14733                           ;PS_2.c: 895: while(READ_PS_2_PIN(0b00100000))
 14734                           
 14735  0D9A  3020               	movlw	32
 14736  0D9B  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14737  0D9E  3800               	iorlw	0
 14738  0D9F  1903               	btfsc	3,2
 14739  0DA0  2DB7               	goto	l6418
 14740                           
 14741                           ;PS_2.c: 896: {
 14742                           ;PS_2.c: 897: __nop();
 14743  0DA1  0000               	nop
 14744                           
 14745                           ;PS_2.c: 898: timeout++;
 14746  0DA2  3001               	movlw	1
 14747  0DA3  0020               	movlb	0	; select bank0
 14748  0DA4  07B6               	addwf	Send_PS2@timeout,f
 14749  0DA5  3000               	movlw	0
 14750  0DA6  3DB7               	addwfc	Send_PS2@timeout+1,f
 14751                           
 14752                           ;PS_2.c: 899: if(timeout > 15000)
 14753  0DA7  303A               	movlw	58
 14754  0DA8  0237               	subwf	Send_PS2@timeout+1,w
 14755  0DA9  3099               	movlw	153
 14756  0DAA  1903               	skipnz
 14757  0DAB  0236               	subwf	Send_PS2@timeout,w
 14758  0DAC  1C03               	skipc
 14759  0DAD  2D9A               	goto	l6416
 14760                           
 14761                           ;PS_2.c: 900: {
 14762                           ;PS_2.c: 901: Clock_TRIS(1);
 14763  0DAE  3001               	movlw	1
 14764  0DAF  3198  20CA  318C   	fcall	_Clock_TRIS
 14765                           
 14766                           ;PS_2.c: 902: Data_TRIS(1);
 14767  0DB2  3001               	movlw	1
 14768  0DB3  3198  20D5         	fcall	_Data_TRIS
 14769                           
 14770                           ;PS_2.c: 903: return 1;
 14771  0DB5  3001               	movlw	1
 14772  0DB6  0008               	return
 14773  0DB7                     l6418:	
 14774                           
 14775                           ;PS_2.c: 904: }
 14776                           ;PS_2.c: 905: }
 14777                           ;PS_2.c: 907: Data_TRIS(1);
 14778  0DB7  3001               	movlw	1
 14779  0DB8  3198  20D5  318C   	fcall	_Data_TRIS
 14780                           
 14781                           ;PS_2.c: 909: timeout=0;
 14782  0DBB  0020               	movlb	0	; select bank0
 14783  0DBC  01B6               	clrf	Send_PS2@timeout
 14784  0DBD  01B7               	clrf	Send_PS2@timeout+1
 14785  0DBE                     l6430:	
 14786                           ;PS_2.c: 910: while(READ_PS_2_PIN(0b00010000))
 14787                           
 14788  0DBE  3010               	movlw	16
 14789  0DBF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14790  0DC2  3800               	iorlw	0
 14791  0DC3  1903               	btfsc	3,2
 14792  0DC4  2DDB               	goto	l6432
 14793                           
 14794                           ;PS_2.c: 911: {
 14795                           ;PS_2.c: 912: __nop();
 14796  0DC5  0000               	nop
 14797                           
 14798                           ;PS_2.c: 913: timeout++;
 14799  0DC6  3001               	movlw	1
 14800  0DC7  0020               	movlb	0	; select bank0
 14801  0DC8  07B6               	addwf	Send_PS2@timeout,f
 14802  0DC9  3000               	movlw	0
 14803  0DCA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14804                           
 14805                           ;PS_2.c: 914: if(timeout > 15000)
 14806  0DCB  303A               	movlw	58
 14807  0DCC  0237               	subwf	Send_PS2@timeout+1,w
 14808  0DCD  3099               	movlw	153
 14809  0DCE  1903               	skipnz
 14810  0DCF  0236               	subwf	Send_PS2@timeout,w
 14811  0DD0  1C03               	skipc
 14812  0DD1  2DBE               	goto	l6430
 14813                           
 14814                           ;PS_2.c: 915: {
 14815                           ;PS_2.c: 916: Clock_TRIS(1);
 14816  0DD2  3001               	movlw	1
 14817  0DD3  3198  20CA  318C   	fcall	_Clock_TRIS
 14818                           
 14819                           ;PS_2.c: 917: Data_TRIS(1);
 14820  0DD6  3001               	movlw	1
 14821  0DD7  3198  20D5         	fcall	_Data_TRIS
 14822                           
 14823                           ;PS_2.c: 918: return 1;
 14824  0DD9  3001               	movlw	1
 14825  0DDA  0008               	return
 14826  0DDB                     l6432:	
 14827                           
 14828                           ;PS_2.c: 919: }
 14829                           ;PS_2.c: 920: }
 14830                           ;PS_2.c: 921: timeout=0;
 14831  0DDB  0020               	movlb	0	; select bank0
 14832  0DDC  01B6               	clrf	Send_PS2@timeout
 14833  0DDD  01B7               	clrf	Send_PS2@timeout+1
 14834  0DDE                     l6442:	
 14835                           ;PS_2.c: 922: while(READ_PS_2_PIN(0b00100000))
 14836                           
 14837  0DDE  3020               	movlw	32
 14838  0DDF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14839  0DE2  3800               	iorlw	0
 14840  0DE3  1903               	btfsc	3,2
 14841  0DE4  2DFB               	goto	l6444
 14842                           
 14843                           ;PS_2.c: 923: {
 14844                           ;PS_2.c: 924: __nop();
 14845  0DE5  0000               	nop
 14846                           
 14847                           ;PS_2.c: 925: timeout++;
 14848  0DE6  3001               	movlw	1
 14849  0DE7  0020               	movlb	0	; select bank0
 14850  0DE8  07B6               	addwf	Send_PS2@timeout,f
 14851  0DE9  3000               	movlw	0
 14852  0DEA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14853                           
 14854                           ;PS_2.c: 926: if(timeout > 15000)
 14855  0DEB  303A               	movlw	58
 14856  0DEC  0237               	subwf	Send_PS2@timeout+1,w
 14857  0DED  3099               	movlw	153
 14858  0DEE  1903               	skipnz
 14859  0DEF  0236               	subwf	Send_PS2@timeout,w
 14860  0DF0  1C03               	skipc
 14861  0DF1  2DDE               	goto	l6442
 14862                           
 14863                           ;PS_2.c: 927: {
 14864                           ;PS_2.c: 928: Clock_TRIS(1);
 14865  0DF2  3001               	movlw	1
 14866  0DF3  3198  20CA  318C   	fcall	_Clock_TRIS
 14867                           
 14868                           ;PS_2.c: 929: Data_TRIS(1);
 14869  0DF6  3001               	movlw	1
 14870  0DF7  3198  20D5         	fcall	_Data_TRIS
 14871                           
 14872                           ;PS_2.c: 930: return 1;
 14873  0DF9  3001               	movlw	1
 14874  0DFA  0008               	return
 14875  0DFB                     l6444:	
 14876                           
 14877                           ;PS_2.c: 931: }
 14878                           ;PS_2.c: 932: }
 14879                           ;PS_2.c: 933: timeout=0;
 14880  0DFB  0020               	movlb	0	; select bank0
 14881  0DFC  01B6               	clrf	Send_PS2@timeout
 14882  0DFD  01B7               	clrf	Send_PS2@timeout+1
 14883  0DFE                     l6454:	
 14884                           ;PS_2.c: 934: while(!READ_PS_2_PIN(0b00010000))
 14885                           
 14886  0DFE  3010               	movlw	16
 14887  0DFF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14888  0E02  3A00               	xorlw	0
 14889  0E03  1D03               	btfss	3,2
 14890  0E04  2E1B               	goto	l6456
 14891                           
 14892                           ;PS_2.c: 935: {
 14893                           ;PS_2.c: 936: __nop();
 14894  0E05  0000               	nop
 14895                           
 14896                           ;PS_2.c: 937: timeout++;
 14897  0E06  3001               	movlw	1
 14898  0E07  0020               	movlb	0	; select bank0
 14899  0E08  07B6               	addwf	Send_PS2@timeout,f
 14900  0E09  3000               	movlw	0
 14901  0E0A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14902                           
 14903                           ;PS_2.c: 938: if(timeout > 15000)
 14904  0E0B  303A               	movlw	58
 14905  0E0C  0237               	subwf	Send_PS2@timeout+1,w
 14906  0E0D  3099               	movlw	153
 14907  0E0E  1903               	skipnz
 14908  0E0F  0236               	subwf	Send_PS2@timeout,w
 14909  0E10  1C03               	skipc
 14910  0E11  2DFE               	goto	l6454
 14911                           
 14912                           ;PS_2.c: 939: {
 14913                           ;PS_2.c: 940: Clock_TRIS(1);
 14914  0E12  3001               	movlw	1
 14915  0E13  3198  20CA  318C   	fcall	_Clock_TRIS
 14916                           
 14917                           ;PS_2.c: 941: Data_TRIS(1);
 14918  0E16  3001               	movlw	1
 14919  0E17  3198  20D5         	fcall	_Data_TRIS
 14920                           
 14921                           ;PS_2.c: 942: return 1;
 14922  0E19  3001               	movlw	1
 14923  0E1A  0008               	return
 14924  0E1B                     l6456:	
 14925                           
 14926                           ;PS_2.c: 943: }
 14927                           ;PS_2.c: 944: }
 14928                           ;PS_2.c: 945: timeout=0;
 14929  0E1B  0020               	movlb	0	; select bank0
 14930  0E1C  01B6               	clrf	Send_PS2@timeout
 14931  0E1D  01B7               	clrf	Send_PS2@timeout+1
 14932  0E1E                     l6466:	
 14933                           ;PS_2.c: 946: while(!READ_PS_2_PIN(0b00100000))
 14934                           
 14935  0E1E  3020               	movlw	32
 14936  0E1F  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14937  0E22  3A00               	xorlw	0
 14938  0E23  1D03               	btfss	3,2
 14939  0E24  2E3B               	goto	l6468
 14940                           
 14941                           ;PS_2.c: 947: {
 14942                           ;PS_2.c: 948: __nop();
 14943  0E25  0000               	nop
 14944                           
 14945                           ;PS_2.c: 949: timeout++;
 14946  0E26  3001               	movlw	1
 14947  0E27  0020               	movlb	0	; select bank0
 14948  0E28  07B6               	addwf	Send_PS2@timeout,f
 14949  0E29  3000               	movlw	0
 14950  0E2A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14951                           
 14952                           ;PS_2.c: 950: if(timeout > 15000)
 14953  0E2B  303A               	movlw	58
 14954  0E2C  0237               	subwf	Send_PS2@timeout+1,w
 14955  0E2D  3099               	movlw	153
 14956  0E2E  1903               	skipnz
 14957  0E2F  0236               	subwf	Send_PS2@timeout,w
 14958  0E30  1C03               	skipc
 14959  0E31  2E1E               	goto	l6466
 14960                           
 14961                           ;PS_2.c: 951: {
 14962                           ;PS_2.c: 952: Clock_TRIS(1);
 14963  0E32  3001               	movlw	1
 14964  0E33  3198  20CA  318C   	fcall	_Clock_TRIS
 14965                           
 14966                           ;PS_2.c: 953: Data_TRIS(1);
 14967  0E36  3001               	movlw	1
 14968  0E37  3198  20D5         	fcall	_Data_TRIS
 14969                           
 14970                           ;PS_2.c: 954: return 1;
 14971  0E39  3001               	movlw	1
 14972  0E3A  0008               	return
 14973  0E3B                     l6468:	
 14974                           
 14975                           ;PS_2.c: 955: }
 14976                           ;PS_2.c: 956: }
 14977                           ;PS_2.c: 959: Clock_TRIS(1);
 14978  0E3B  3001               	movlw	1
 14979  0E3C  3198  20CA  318C   	fcall	_Clock_TRIS
 14980                           
 14981                           ;PS_2.c: 960: Data_TRIS(1);
 14982  0E3F  3001               	movlw	1
 14983  0E40  3198  20D5  318C   	fcall	_Data_TRIS
 14984                           
 14985                           ;PS_2.c: 961: PS_2_ENABLE_INTERRUPT(0b00100000);
 14986  0E43  3020               	movlw	32
 14987  0E44  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
 14988                           
 14989                           ;PS_2.c: 962: return 0;
 14990  0E46  3000               	movlw	0
 14991  0E47  0008               	return
 14992  0E48                     __end_of_Send_PS2:	
 14993                           
 14994                           	psect	text42
 14995  1B23                     __ptext42:	
 14996 ;; *************** function _delayUS *****************
 14997 ;; Defined at:
 14998 ;;		line 41 in file "MISC.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;  US              4    5[BANK0 ] long 
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;  i               4   10[BANK0 ] long 
 15003 ;;  j               1   14[BANK0 ] unsigned char 
 15004 ;; Return value:  Size  Location     Type
 15005 ;;		None               void
 15006 ;; Registers used:
 15007 ;;		wreg, status,2, status,0
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;Total ram usage:       10 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    3
 15020 ;; This function calls:
 15021 ;;		Nothing
 15022 ;; This function is called by:
 15023 ;;		_main
 15024 ;;		_Init_System
 15025 ;;		_UARTstringWAIT
 15026 ;;		_SetBaud
 15027 ;;		_PS_2_Update
 15028 ;;		_Send_PS2
 15029 ;;		_Init_PS_2_Send
 15030 ;;		_Keyboard_Connected
 15031 ;;		_WriteFlash_Sequential
 15032 ;;		_InternalADC_Read
 15033 ;;		_UART_send_break_timed
 15034 ;; This function uses a non-reentrant model
 15035 ;;
 15036                           
 15037                           
 15038                           ;psect for function _delayUS
 15039  1B23                     _delayUS:	
 15040                           
 15041                           ;MISC.c: 43: long i;
 15042                           ;MISC.c: 44: unsigned char j;
 15043                           ;MISC.c: 45: for(i=0;i<US;i+=6)
 15044                           
 15045                           ;incstack = 0
 15046                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 15047  1B23  3000               	movlw	0
 15048  1B24  0020               	movlb	0	; select bank0
 15049  1B25  00AD               	movwf	delayUS@i+3
 15050  1B26  3000               	movlw	0
 15051  1B27  00AC               	movwf	delayUS@i+2
 15052  1B28  3000               	movlw	0
 15053  1B29  00AB               	movwf	delayUS@i+1
 15054  1B2A  3000               	movlw	0
 15055  1B2B  00AA               	movwf	delayUS@i
 15056  1B2C                     l264:	
 15057  1B2C  082D               	movf	delayUS@i+3,w
 15058  1B2D  3A80               	xorlw	128
 15059  1B2E  00A9               	movwf	??_delayUS
 15060  1B2F  0828               	movf	delayUS@US+3,w
 15061  1B30  3A80               	xorlw	128
 15062  1B31  0229               	subwf	??_delayUS,w
 15063  1B32  1D03               	skipz
 15064  1B33  2B3E               	goto	u7383
 15065  1B34  0827               	movf	delayUS@US+2,w
 15066  1B35  022C               	subwf	delayUS@i+2,w
 15067  1B36  1D03               	skipz
 15068  1B37  2B3E               	goto	u7383
 15069  1B38  0826               	movf	delayUS@US+1,w
 15070  1B39  022B               	subwf	delayUS@i+1,w
 15071  1B3A  1D03               	skipz
 15072  1B3B  2B3E               	goto	u7383
 15073  1B3C  0825               	movf	delayUS@US,w
 15074  1B3D  022A               	subwf	delayUS@i,w
 15075  1B3E                     u7383:	
 15076  1B3E  1803               	btfsc	3,0
 15077  1B3F  0008               	return
 15078                           
 15079                           ;MISC.c: 46: {
 15080                           ;MISC.c: 47: for(j=0;j<32;j++)
 15081  1B40  01AE               	clrf	delayUS@j
 15082  1B41  3020               	movlw	32
 15083  1B42  022E               	subwf	delayUS@j,w
 15084  1B43  1803               	btfsc	3,0
 15085  1B44  2B4F               	goto	l5764
 15086  1B45                     l266:	
 15087                           
 15088                           ;MISC.c: 48: {
 15089                           ;MISC.c: 49: __nop();
 15090  1B45  0000               	nop
 15091  1B46  3001               	movlw	1
 15092  1B47  0020               	movlb	0	; select bank0
 15093  1B48  00A9               	movwf	??_delayUS
 15094  1B49  0829               	movf	??_delayUS,w
 15095  1B4A  07AE               	addwf	delayUS@j,f
 15096  1B4B  3020               	movlw	32
 15097  1B4C  022E               	subwf	delayUS@j,w
 15098  1B4D  1C03               	skipc
 15099  1B4E  2B45               	goto	l266
 15100  1B4F                     l5764:	
 15101  1B4F  3006               	movlw	6
 15102  1B50  07AA               	addwf	delayUS@i,f
 15103  1B51  3000               	movlw	0
 15104  1B52  3DAB               	addwfc	delayUS@i+1,f
 15105  1B53  3000               	movlw	0
 15106  1B54  3DAC               	addwfc	delayUS@i+2,f
 15107  1B55  3000               	movlw	0
 15108  1B56  3DAD               	addwfc	delayUS@i+3,f
 15109  1B57  2B2C               	goto	l264
 15110  1B58                     __end_of_delayUS:	
 15111                           
 15112                           	psect	text43
 15113  1952                     __ptext43:	
 15114 ;; *************** function _READ_PS_2_PIN *****************
 15115 ;; Defined at:
 15116 ;;		line 182 in file "PS_2.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  DATA_CLK        1    wreg     unsigned char 
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15121 ;; Return value:  Size  Location     Type
 15122 ;;                  1    wreg      unsigned char 
 15123 ;; Registers used:
 15124 ;;		wreg
 15125 ;; Tracked objects:
 15126 ;;		On entry : 0/0
 15127 ;;		On exit  : 0/0
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;Total ram usage:        1 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; Hardware stack levels required when called:    3
 15137 ;; This function calls:
 15138 ;;		Nothing
 15139 ;; This function is called by:
 15140 ;;		_Send_PS2
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _READ_PS_2_PIN
 15146  1952                     _READ_PS_2_PIN:	
 15147                           
 15148                           ;incstack = 0
 15149                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15150                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15151  1952  0020               	movlb	0	; select bank0
 15152  1953  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15153                           
 15154                           ;PS_2.c: 184: if(DATA_CLK == 0b00100000)
 15155  1954  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15156  1955  3A20               	xorlw	32
 15157  1956  1D03               	skipz
 15158  1957  295E               	goto	l694
 15159                           
 15160                           ;PS_2.c: 185: {
 15161                           ;PS_2.c: 187: if((PORTA & 0b00100000) == 0b00100000)
 15162  1958  1E8C               	btfss	12,5	;volatile
 15163  1959  295C               	goto	l6026
 15164                           
 15165                           ;PS_2.c: 188: {
 15166                           ;PS_2.c: 189: return (1);
 15167  195A  3001               	movlw	1
 15168                           
 15169                           ;PS_2.c: 190: }
 15170  195B  0008               	return
 15171  195C                     l6026:	
 15172                           
 15173                           ;PS_2.c: 191: else
 15174                           ;PS_2.c: 192: {
 15175                           ;PS_2.c: 193: return 0;
 15176  195C  3000               	movlw	0
 15177                           
 15178                           ;PS_2.c: 194: }
 15179                           ;PS_2.c: 195: }
 15180  195D  0008               	return
 15181  195E                     l694:	
 15182                           
 15183                           ;PS_2.c: 196: else
 15184                           ;PS_2.c: 197: {
 15185                           ;PS_2.c: 199: if((PORTA & 0b00010000) == 0b00010000)
 15186  195E  1E0C               	btfss	12,4	;volatile
 15187  195F  2962               	goto	l6036
 15188                           
 15189                           ;PS_2.c: 200: {
 15190                           ;PS_2.c: 201: return (1);
 15191  1960  3001               	movlw	1
 15192                           
 15193                           ;PS_2.c: 202: }
 15194  1961  0008               	return
 15195  1962                     l6036:	
 15196                           
 15197                           ;PS_2.c: 203: else
 15198                           ;PS_2.c: 204: {
 15199                           ;PS_2.c: 205: return 0;
 15200  1962  3000               	movlw	0
 15201  1963  0008               	return
 15202  1964                     __end_of_READ_PS_2_PIN:	
 15203                           
 15204                           	psect	text44
 15205  19B0                     __ptext44:	
 15206 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15207 ;; Defined at:
 15208 ;;		line 161 in file "PS_2.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;  DATA_CLK        1    wreg     unsigned char 
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15213 ;; Return value:  Size  Location     Type
 15214 ;;		None               void
 15215 ;; Registers used:
 15216 ;;		wreg, status,2, status,0
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;Total ram usage:        2 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    3
 15229 ;; This function calls:
 15230 ;;		Nothing
 15231 ;; This function is called by:
 15232 ;;		_main
 15233 ;;		_PS_2_Update
 15234 ;;		_Send_PS2
 15235 ;;		_Init_PS_2_Send
 15236 ;;		_Keyboard_Connected
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           
 15241                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15242  19B0                     _PS_2_ENABLE_INTERRUPT:	
 15243                           
 15244                           ;incstack = 0
 15245                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15246                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15247  19B0  0020               	movlb	0	; select bank0
 15248  19B1  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15249                           
 15250                           ;PS_2.c: 163: if(DATA_CLK == 0b00100000)
 15251  19B2  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15252  19B3  3A20               	xorlw	32
 15253  19B4  1D03               	skipz
 15254  19B5  29BD               	goto	l6054
 15255                           
 15256                           ;PS_2.c: 164: {
 15257                           ;PS_2.c: 167: IOCAF &= ~0b00100000;
 15258  19B6  30DF               	movlw	223
 15259  19B7  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15260  19B8  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15261  19B9  0027               	movlb	7	; select bank7
 15262  19BA  0593               	andwf	19,f	;volatile
 15263                           
 15264                           ;PS_2.c: 168: IOCAN |= 0b00100000;
 15265  19BB  1692               	bsf	18,5	;volatile
 15266                           
 15267                           ;PS_2.c: 170: }
 15268  19BC  0008               	return
 15269  19BD                     l6054:	
 15270                           
 15271                           ;PS_2.c: 171: else
 15272                           ;PS_2.c: 172: {
 15273                           ;PS_2.c: 175: IOCAF &= ~0b00010000;
 15274  19BD  30EF               	movlw	239
 15275  19BE  0020               	movlb	0	; select bank0
 15276  19BF  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15277  19C0  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15278  19C1  0027               	movlb	7	; select bank7
 15279  19C2  0593               	andwf	19,f	;volatile
 15280                           
 15281                           ;PS_2.c: 176: IOCAN |= 0b00010000;
 15282  19C3  1612               	bsf	18,4	;volatile
 15283  19C4  0008               	return
 15284  19C5                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15285                           
 15286                           	psect	text45
 15287  18D5                     __ptext45:	
 15288 ;; *************** function _Data_TRIS *****************
 15289 ;; Defined at:
 15290 ;;		line 110 in file "PS_2.c"
 15291 ;; Parameters:    Size  Location     Type
 15292 ;;  direction       1    wreg     unsigned char 
 15293 ;; Auto vars:     Size  Location     Type
 15294 ;;  direction       1    5[BANK0 ] unsigned char 
 15295 ;; Return value:  Size  Location     Type
 15296 ;;		None               void
 15297 ;; Registers used:
 15298 ;;		wreg, status,2, status,0
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;Total ram usage:        1 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; Hardware stack levels required when called:    3
 15311 ;; This function calls:
 15312 ;;		Nothing
 15313 ;; This function is called by:
 15314 ;;		_PS_2_INIT
 15315 ;;		_Send_PS2
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           
 15320                           ;psect for function _Data_TRIS
 15321  18D5                     _Data_TRIS:	
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15325                           ;Data_TRIS@direction stored from wreg
 15326  18D5  0020               	movlb	0	; select bank0
 15327  18D6  00A5               	movwf	Data_TRIS@direction
 15328                           
 15329                           ;PS_2.c: 112: if(direction == 0)
 15330  18D7  08A5               	movf	Data_TRIS@direction,f
 15331  18D8  1D03               	skipz
 15332  18D9  28DD               	goto	l674
 15333                           
 15334                           ;PS_2.c: 113: {
 15335                           ;PS_2.c: 114: TRISAbits.TRISA4 = 0;
 15336  18DA  0021               	movlb	1	; select bank1
 15337  18DB  120C               	bcf	12,4	;volatile
 15338                           
 15339                           ;PS_2.c: 115: }
 15340  18DC  0008               	return
 15341  18DD                     l674:	
 15342                           
 15343                           ;PS_2.c: 116: else
 15344                           ;PS_2.c: 117: {
 15345                           ;PS_2.c: 118: TRISAbits.TRISA4 = 1;
 15346  18DD  0021               	movlb	1	; select bank1
 15347  18DE  160C               	bsf	12,4	;volatile
 15348  18DF  0008               	return
 15349  18E0                     __end_of_Data_TRIS:	
 15350                           
 15351                           	psect	text46
 15352  18CA                     __ptext46:	
 15353 ;; *************** function _Clock_TRIS *****************
 15354 ;; Defined at:
 15355 ;;		line 97 in file "PS_2.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  direction       1    wreg     unsigned char 
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;  direction       1    5[BANK0 ] unsigned char 
 15360 ;; Return value:  Size  Location     Type
 15361 ;;		None               void
 15362 ;; Registers used:
 15363 ;;		wreg, status,2, status,0
 15364 ;; Tracked objects:
 15365 ;;		On entry : 0/0
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;Total ram usage:        1 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    3
 15376 ;; This function calls:
 15377 ;;		Nothing
 15378 ;; This function is called by:
 15379 ;;		_PS_2_INIT
 15380 ;;		_Send_PS2
 15381 ;; This function uses a non-reentrant model
 15382 ;;
 15383                           
 15384                           
 15385                           ;psect for function _Clock_TRIS
 15386  18CA                     _Clock_TRIS:	
 15387                           
 15388                           ;incstack = 0
 15389                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15390                           ;Clock_TRIS@direction stored from wreg
 15391  18CA  0020               	movlb	0	; select bank0
 15392  18CB  00A5               	movwf	Clock_TRIS@direction
 15393                           
 15394                           ;PS_2.c: 99: if(direction == 0)
 15395  18CC  08A5               	movf	Clock_TRIS@direction,f
 15396  18CD  1D03               	skipz
 15397  18CE  28D2               	goto	l669
 15398                           
 15399                           ;PS_2.c: 100: {
 15400                           ;PS_2.c: 101: TRISAbits.TRISA5 = 0;
 15401  18CF  0021               	movlb	1	; select bank1
 15402  18D0  128C               	bcf	12,5	;volatile
 15403                           
 15404                           ;PS_2.c: 102: }
 15405  18D1  0008               	return
 15406  18D2                     l669:	
 15407                           
 15408                           ;PS_2.c: 103: else
 15409                           ;PS_2.c: 104: {
 15410                           ;PS_2.c: 105: TRISAbits.TRISA5 = 1;
 15411  18D2  0021               	movlb	1	; select bank1
 15412  18D3  168C               	bsf	12,5	;volatile
 15413  18D4  0008               	return
 15414  18D5                     __end_of_Clock_TRIS:	
 15415                           
 15416                           	psect	text47
 15417  1A5C                     __ptext47:	
 15418 ;; *************** function _CheckSum_byte *****************
 15419 ;; Defined at:
 15420 ;;		line 282 in file "MISC.c"
 15421 ;; Parameters:    Size  Location     Type
 15422 ;;  This            2    5[BANK0 ] unsigned int 
 15423 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15426 ;;  i               1   12[BANK0 ] unsigned char 
 15427 ;;  Parity          1   11[BANK0 ] unsigned char 
 15428 ;; Return value:  Size  Location     Type
 15429 ;;                  1    wreg      unsigned char 
 15430 ;; Registers used:
 15431 ;;		wreg, status,2, status,0
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        8 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    3
 15444 ;; This function calls:
 15445 ;;		Nothing
 15446 ;; This function is called by:
 15447 ;;		_UARTchar
 15448 ;;		_PS_2_Update
 15449 ;;		_Send_PS2
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           
 15454                           ;psect for function _CheckSum_byte
 15455  1A5C                     _CheckSum_byte:	
 15456                           
 15457                           ;MISC.c: 284: char i = 0;
 15458                           
 15459                           ;incstack = 0
 15460                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15461  1A5C  0020               	movlb	0	; select bank0
 15462  1A5D  01AC               	clrf	CheckSum_byte@i
 15463                           
 15464                           ;MISC.c: 285: unsigned char Parity = 0;
 15465  1A5E  01AB               	clrf	CheckSum_byte@Parity
 15466                           
 15467                           ;MISC.c: 286: unsigned int ThisTemp = This;
 15468  1A5F  0826               	movf	CheckSum_byte@This+1,w
 15469  1A60  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15470  1A61  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15471  1A62  0825               	movf	CheckSum_byte@This,w
 15472  1A63  01A9               	clrf	CheckSum_byte@ThisTemp
 15473  1A64  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15474                           
 15475                           ;MISC.c: 288: for (i =0; i<8; i++)
 15476  1A65  01AC               	clrf	CheckSum_byte@i
 15477  1A66  3008               	movlw	8
 15478  1A67  022C               	subwf	CheckSum_byte@i,w
 15479  1A68  1803               	btfsc	3,0
 15480  1A69  2A7D               	goto	l5780
 15481  1A6A                     l378:	
 15482                           
 15483                           ;MISC.c: 289: {
 15484                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 15485  1A6A  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15486  1A6B  2A70               	goto	l380
 15487                           
 15488                           ;MISC.c: 291: {
 15489                           ;MISC.c: 292: Parity++;
 15490  1A6C  3001               	movlw	1
 15491  1A6D  00A8               	movwf	??_CheckSum_byte
 15492  1A6E  0828               	movf	??_CheckSum_byte,w
 15493  1A6F  07AB               	addwf	CheckSum_byte@Parity,f
 15494  1A70                     l380:	
 15495                           
 15496                           ;MISC.c: 293: }
 15497                           ;MISC.c: 294: ThisTemp >>= 1;
 15498  1A70  3001               	movlw	1
 15499  1A71                     u7415:	
 15500  1A71  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15501  1A72  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15502  1A73  0B89               	decfsz	9,f
 15503  1A74  2A71               	goto	u7415
 15504  1A75  3001               	movlw	1
 15505  1A76  00A8               	movwf	??_CheckSum_byte
 15506  1A77  0828               	movf	??_CheckSum_byte,w
 15507  1A78  07AC               	addwf	CheckSum_byte@i,f
 15508  1A79  3008               	movlw	8
 15509  1A7A  022C               	subwf	CheckSum_byte@i,w
 15510  1A7B  1C03               	skipc
 15511  1A7C  2A6A               	goto	l378
 15512  1A7D                     l5780:	
 15513                           
 15514                           ;MISC.c: 295: }
 15515                           ;MISC.c: 296: if(Odd_Even == 3)
 15516  1A7D  0827               	movf	CheckSum_byte@Odd_Even,w
 15517  1A7E  3A03               	xorlw	3
 15518  1A7F  1D03               	skipz
 15519  1A80  2A87               	goto	l381
 15520                           
 15521                           ;MISC.c: 297: {
 15522                           ;MISC.c: 298: if(Parity % 2 == 0)
 15523  1A81  182B               	btfsc	CheckSum_byte@Parity,0
 15524  1A82  2A85               	goto	l5788
 15525                           
 15526                           ;MISC.c: 299: {
 15527                           ;MISC.c: 300: return 1;
 15528  1A83  3001               	movlw	1
 15529  1A84  0008               	return
 15530  1A85                     l5788:	
 15531                           
 15532                           ;MISC.c: 301: }
 15533                           ;MISC.c: 302: return 0;
 15534  1A85  3000               	movlw	0
 15535                           
 15536                           ;MISC.c: 303: }
 15537  1A86  0008               	return
 15538  1A87                     l381:	
 15539                           
 15540                           ;MISC.c: 304: else
 15541                           ;MISC.c: 305: {
 15542                           ;MISC.c: 306: if(Parity % 2 == 1)
 15543  1A87  1C2B               	btfss	CheckSum_byte@Parity,0
 15544  1A88  2A8B               	goto	l5798
 15545                           
 15546                           ;MISC.c: 307: {
 15547                           ;MISC.c: 308: return 1;
 15548  1A89  3001               	movlw	1
 15549  1A8A  0008               	return
 15550  1A8B                     l5798:	
 15551                           
 15552                           ;MISC.c: 309: }
 15553                           ;MISC.c: 310: return 0;
 15554  1A8B  3000               	movlw	0
 15555  1A8C  0008               	return
 15556  1A8D                     __end_of_CheckSum_byte:	
 15557                           
 15558                           	psect	text48
 15559  19DD                     __ptext48:	
 15560 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15561 ;; Defined at:
 15562 ;;		line 142 in file "PS_2.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;  DATA_CLK        1    wreg     unsigned char 
 15565 ;; Auto vars:     Size  Location     Type
 15566 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15567 ;; Return value:  Size  Location     Type
 15568 ;;		None               void
 15569 ;; Registers used:
 15570 ;;		wreg, status,2, status,0
 15571 ;; Tracked objects:
 15572 ;;		On entry : 0/0
 15573 ;;		On exit  : 0/0
 15574 ;;		Unchanged: 0/0
 15575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;Total ram usage:        2 bytes
 15581 ;; Hardware stack levels used:    1
 15582 ;; Hardware stack levels required when called:    3
 15583 ;; This function calls:
 15584 ;;		Nothing
 15585 ;; This function is called by:
 15586 ;;		_main
 15587 ;;		_PS_2_Update
 15588 ;;		_Init_PS_2_Send
 15589 ;;		_Keyboard_Connected
 15590 ;; This function uses a non-reentrant model
 15591 ;;
 15592                           
 15593                           
 15594                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15595  19DD                     _PS_2_DISABLE_INTERRUPT:	
 15596                           
 15597                           ;incstack = 0
 15598                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15599                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15600  19DD  0020               	movlb	0	; select bank0
 15601  19DE  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15602                           
 15603                           ;PS_2.c: 144: if(DATA_CLK == 0b00100000)
 15604  19DF  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15605  19E0  3A20               	xorlw	32
 15606  19E1  1D03               	skipz
 15607  19E2  29EF               	goto	l6212
 15608                           
 15609                           ;PS_2.c: 145: {
 15610                           ;PS_2.c: 148: IOCAN &= ~0b00100000;
 15611  19E3  30DF               	movlw	223
 15612  19E4  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15613  19E5  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15614  19E6  0027               	movlb	7	; select bank7
 15615  19E7  0592               	andwf	18,f	;volatile
 15616                           
 15617                           ;PS_2.c: 149: IOCAF &= ~0b00100000;
 15618  19E8  30DF               	movlw	223
 15619  19E9  0020               	movlb	0	; select bank0
 15620  19EA  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15621  19EB  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15622  19EC  0027               	movlb	7	; select bank7
 15623  19ED  0593               	andwf	19,f	;volatile
 15624                           
 15625                           ;PS_2.c: 150: }
 15626  19EE  0008               	return
 15627  19EF                     l6212:	
 15628                           
 15629                           ;PS_2.c: 151: else
 15630                           ;PS_2.c: 152: {
 15631                           ;PS_2.c: 155: IOCAN &= ~0b00010000;
 15632  19EF  30EF               	movlw	239
 15633  19F0  0020               	movlb	0	; select bank0
 15634  19F1  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15635  19F2  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15636  19F3  0027               	movlb	7	; select bank7
 15637  19F4  0592               	andwf	18,f	;volatile
 15638                           
 15639                           ;PS_2.c: 156: IOCAF &= ~0b00010000;
 15640  19F5  30EF               	movlw	239
 15641  19F6  0020               	movlb	0	; select bank0
 15642  19F7  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15643  19F8  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15644  19F9  0027               	movlb	7	; select bank7
 15645  19FA  0593               	andwf	19,f	;volatile
 15646  19FB  0008               	return
 15647  19FC                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15648                           
 15649                           	psect	text49
 15650  1006                     __ptext49:	
 15651 ;; *************** function _InitApp *****************
 15652 ;; Defined at:
 15653 ;;		line 51 in file "user.c"
 15654 ;; Parameters:    Size  Location     Type
 15655 ;;		None
 15656 ;; Auto vars:     Size  Location     Type
 15657 ;;		None
 15658 ;; Return value:  Size  Location     Type
 15659 ;;		None               void
 15660 ;; Registers used:
 15661 ;;		wreg, status,2
 15662 ;; Tracked objects:
 15663 ;;		On entry : 0/0
 15664 ;;		On exit  : 0/0
 15665 ;;		Unchanged: 0/0
 15666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;Total ram usage:        0 bytes
 15672 ;; Hardware stack levels used:    1
 15673 ;; Hardware stack levels required when called:    3
 15674 ;; This function calls:
 15675 ;;		Nothing
 15676 ;; This function is called by:
 15677 ;;		_main
 15678 ;; This function uses a non-reentrant model
 15679 ;;
 15680                           
 15681                           
 15682                           ;psect for function _InitApp
 15683  1006                     _InitApp:	
 15684                           
 15685                           ;user.c: 53: LATC =0;
 15686                           
 15687                           ;incstack = 0
 15688                           ; Regs used in _InitApp: [wreg+status,2]
 15689  1006  0022               	movlb	2	; select bank2
 15690  1007  018E               	clrf	14	;volatile
 15691                           
 15692                           ;user.c: 54: LATA =0;
 15693  1008  018C               	clrf	12	;volatile
 15694                           
 15695                           ;user.c: 55: TRISCbits.TRISC2 = 0;
 15696  1009  0021               	movlb	1	; select bank1
 15697  100A  110E               	bcf	14,2	;volatile
 15698                           
 15699                           ;user.c: 56: TRISCbits.TRISC1 = 0;
 15700  100B  108E               	bcf	14,1	;volatile
 15701                           
 15702                           ;user.c: 57: TRISCbits.TRISC3 = 0;
 15703  100C  118E               	bcf	14,3	;volatile
 15704                           
 15705                           ;user.c: 58: TRISCbits.TRISC4 = 0;
 15706  100D  120E               	bcf	14,4	;volatile
 15707                           
 15708                           ;user.c: 59: TRISAbits.TRISA2 = 1;
 15709  100E  150C               	bsf	12,2	;volatile
 15710                           
 15711                           ;user.c: 60: TRISCbits.TRISC0 = 0;
 15712  100F  100E               	bcf	14,0	;volatile
 15713                           
 15714                           ;user.c: 63: LATC |= 0b00000010;
 15715  1010  0022               	movlb	2	; select bank2
 15716  1011  148E               	bsf	14,1	;volatile
 15717                           
 15718                           ;user.c: 64: PPSLOCK =0;
 15719  1012  003C               	movlb	28	; select bank28
 15720  1013  018F               	clrf	15	;volatile
 15721                           
 15722                           ;user.c: 65: RC2PPS = 0b00010100;
 15723  1014  3014               	movlw	20
 15724  1015  003D               	movlb	29	; select bank29
 15725  1016  00A2               	movwf	34	;volatile
 15726                           
 15727                           ;user.c: 66: CKPPS = 0b00010010;
 15728  1017  3012               	movlw	18
 15729  1018  003C               	movlb	28	; select bank28
 15730  1019  00A5               	movwf	37	;volatile
 15731                           
 15732                           ;user.c: 67: RXPPS = 0b00010101;
 15733  101A  3015               	movlw	21
 15734  101B  00A4               	movwf	36	;volatile
 15735                           
 15736                           ;user.c: 68: PPSLOCK =1;
 15737  101C  3001               	movlw	1
 15738  101D  008F               	movwf	15	;volatile
 15739                           
 15740                           ;user.c: 70: ANSELA &= ~0xFF;
 15741  101E  0023               	movlb	3	; select bank3
 15742  101F  018C               	clrf	12	;volatile
 15743                           
 15744                           ;user.c: 71: ANSELA |= 0b00000100;
 15745  1020  150C               	bsf	12,2	;volatile
 15746                           
 15747                           ;user.c: 72: ANSELC &= ~0xFF;
 15748  1021  018E               	clrf	14	;volatile
 15749                           
 15750                           ;user.c: 73: OPTION_REGbits.nWPUEN = 0;
 15751  1022  0021               	movlb	1	; select bank1
 15752  1023  1395               	bcf	21,7	;volatile
 15753                           
 15754                           ;user.c: 74: WPUC = 0b00100000;
 15755  1024  3020               	movlw	32
 15756  1025  0024               	movlb	4	; select bank4
 15757  1026  008E               	movwf	14	;volatile
 15758                           
 15759                           ;user.c: 75: WPUA = 0;
 15760  1027  018C               	clrf	12	;volatile
 15761  1028  0008               	return
 15762  1029                     __end_of_InitApp:	
 15763                           
 15764                           	psect	text50
 15765  1940                     __ptext50:	
 15766 ;; *************** function _ConfigureOscillator *****************
 15767 ;; Defined at:
 15768 ;;		line 18 in file "system.c"
 15769 ;; Parameters:    Size  Location     Type
 15770 ;;		None
 15771 ;; Auto vars:     Size  Location     Type
 15772 ;;		None
 15773 ;; Return value:  Size  Location     Type
 15774 ;;		None               void
 15775 ;; Registers used:
 15776 ;;		wreg, status,2, status,0
 15777 ;; Tracked objects:
 15778 ;;		On entry : 0/0
 15779 ;;		On exit  : 0/0
 15780 ;;		Unchanged: 0/0
 15781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;Total ram usage:        1 bytes
 15787 ;; Hardware stack levels used:    1
 15788 ;; Hardware stack levels required when called:    3
 15789 ;; This function calls:
 15790 ;;		Nothing
 15791 ;; This function is called by:
 15792 ;;		_main
 15793 ;; This function uses a non-reentrant model
 15794 ;;
 15795                           
 15796                           
 15797                           ;psect for function _ConfigureOscillator
 15798  1940                     _ConfigureOscillator:	
 15799                           
 15800                           ;system.c: 26: OSCCON= 0b11110000;
 15801                           
 15802                           ;incstack = 0
 15803                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15804  1940  30F0               	movlw	240
 15805  1941  0021               	movlb	1	; select bank1
 15806  1942  0099               	movwf	25	;volatile
 15807  1943                     l5240:	
 15808                           ;system.c: 27: while(!(OSCSTAT & HFIOFS));
 15809                           
 15810  1943  3000               	movlw	0
 15811  1944  181A               	btfsc	26,0	;volatile
 15812  1945  3001               	movlw	1
 15813  1946  051A               	andwf	26,w	;volatile
 15814  1947  1903               	btfsc	3,2
 15815  1948  2943               	goto	l5240
 15816  1949                     l5242:	
 15817                           ;system.c: 28: while(!(OSCSTAT & = 0b01000000));
 15818                           
 15819  1949  3040               	movlw	64
 15820  194A  0020               	movlb	0	; select bank0
 15821  194B  00A5               	movwf	??_ConfigureOscillator
 15822  194C  0825               	movf	??_ConfigureOscillator,w
 15823  194D  0021               	movlb	1	; select bank1
 15824  194E  059A               	andwf	26,f	;volatile
 15825  194F  1D03               	btfss	3,2
 15826  1950  0008               	return
 15827  1951  2949               	goto	l5242
 15828  1952                     __end_of_ConfigureOscillator:	
 15829                           
 15830                           	psect	intentry
 15831  0004                     __pintentry:	
 15832 ;; *************** function _isr *****************
 15833 ;; Defined at:
 15834 ;;		line 52 in file "interrupts.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;		None
 15837 ;; Auto vars:     Size  Location     Type
 15838 ;;  rx              1    4[BANK0 ] unsigned char 
 15839 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15840 ;; Return value:  Size  Location     Type
 15841 ;;		None               void
 15842 ;; Registers used:
 15843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15844 ;; Tracked objects:
 15845 ;;		On entry : 0/0
 15846 ;;		On exit  : 0/0
 15847 ;;		Unchanged: 0/0
 15848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;Total ram usage:        4 bytes
 15854 ;; Hardware stack levels used:    1
 15855 ;; Hardware stack levels required when called:    2
 15856 ;; This function calls:
 15857 ;;		i1_READ_PS_2_PIN
 15858 ;;		i1_ReadUSART
 15859 ;;		i1_UART_send_break
 15860 ;;		i1_UARTchar
 15861 ;; This function is called by:
 15862 ;;		Interrupt level 1
 15863 ;; This function uses a non-reentrant model
 15864 ;;
 15865                           
 15866  0004                     _isr:	
 15867                           
 15868                           ;incstack = 0
 15869                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15870  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15871  0005  3180               	pagesel	$
 15872  0006  0020               	movlb	0	; select bank0
 15873  0007  087F               	movf	127,w
 15874  0008  00A2               	movwf	??_isr+1
 15875                           
 15876                           ;interrupts.c: 54: unsigned char rx;
 15877                           ;interrupts.c: 55: unsigned char Rx_fault =0;
 15878  0009  01A3               	clrf	isr@Rx_fault
 15879                           
 15880                           ;interrupts.c: 57: if(IOCAF & 0b00100000)
 15881  000A  0027               	movlb	7	; select bank7
 15882  000B  1E93               	btfss	19,5	;volatile
 15883  000C  287C               	goto	i1l61
 15884                           
 15885                           ;interrupts.c: 58: {
 15886                           ;interrupts.c: 60: LATC |= 0b00010000;
 15887  000D  0022               	movlb	2	; select bank2
 15888  000E  160E               	bsf	14,4	;volatile
 15889                           
 15890                           ;interrupts.c: 61: if(PS_2_bits <44)
 15891  000F  302C               	movlw	44
 15892  0010  0020               	movlb	0	; select bank0
 15893  0011  0268               	subwf	_PS_2_bits,w
 15894  0012  1803               	skipnc
 15895  0013  287A               	goto	i1l5592
 15896                           
 15897                           ;interrupts.c: 62: {
 15898                           ;interrupts.c: 63: if(PS_2_bits <11 )
 15899  0014  300B               	movlw	11
 15900  0015  0268               	subwf	_PS_2_bits,w
 15901  0016  1803               	skipnc
 15902  0017  2830               	goto	i1l5566
 15903                           
 15904                           ;interrupts.c: 64: {
 15905                           ;interrupts.c: 65: PS_2_Read_Data_FirstTEMP <<= 1;
 15906  0018  3001               	movlw	1
 15907  0019  0024               	movlb	4	; select bank4
 15908  001A                     u703_25:	
 15909  001A  35B1               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15910  001B  0DB2               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15911  001C  0B89               	decfsz	9,f
 15912  001D  281A               	goto	u703_25
 15913                           
 15914                           ;interrupts.c: 66: if(READ_PS_2_PIN(0b00010000))
 15915  001E  3010               	movlw	16
 15916  001F  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 15917  0022  3A00               	xorlw	0
 15918  0023  1903               	skipnz
 15919  0024  282A               	goto	i1l5562
 15920                           
 15921                           ;interrupts.c: 67: {
 15922                           ;interrupts.c: 68: PS_2_Read_Data_FirstTEMP++;
 15923  0025  3001               	movlw	1
 15924  0026  0024               	movlb	4	; select bank4
 15925  0027  07B1               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15926  0028  3000               	movlw	0
 15927  0029  3DB2               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15928  002A                     i1l5562:	
 15929                           
 15930                           ;interrupts.c: 69: }
 15931                           ;interrupts.c: 70: PS_2_Read_Data_SecondTEMP = 0;
 15932  002A  0024               	movlb	4	; select bank4
 15933  002B  01B5               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15934  002C  01B6               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15935                           
 15936                           ;interrupts.c: 71: PS_2_Read_Data_ThirdTEMP = 0;
 15937  002D  01B7               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15938  002E  01B8               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15939                           
 15940                           ;interrupts.c: 72: }
 15941  002F  2872               	goto	i1l5588
 15942  0030                     i1l5566:	
 15943                           
 15944                           ;interrupts.c: 73: else if(PS_2_bits <22 )
 15945  0030  3016               	movlw	22
 15946  0031  0020               	movlb	0	; select bank0
 15947  0032  0268               	subwf	_PS_2_bits,w
 15948  0033  1803               	skipnc
 15949  0034  2848               	goto	i1l5574
 15950                           
 15951                           ;interrupts.c: 74: {
 15952                           ;interrupts.c: 75: PS_2_Read_Data_SecondTEMP <<= 1;
 15953  0035  3001               	movlw	1
 15954  0036  0024               	movlb	4	; select bank4
 15955  0037                     u706_25:	
 15956  0037  35B5               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15957  0038  0DB6               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15958  0039  0B89               	decfsz	9,f
 15959  003A  2837               	goto	u706_25
 15960                           
 15961                           ;interrupts.c: 76: if(READ_PS_2_PIN(0b00010000))
 15962  003B  3010               	movlw	16
 15963  003C  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 15964  003F  3A00               	xorlw	0
 15965  0040  1903               	skipnz
 15966  0041  2872               	goto	i1l5588
 15967                           
 15968                           ;interrupts.c: 77: {
 15969                           ;interrupts.c: 78: PS_2_Read_Data_SecondTEMP++;
 15970  0042  3001               	movlw	1
 15971  0043  0024               	movlb	4	; select bank4
 15972  0044  07B5               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15973  0045  3000               	movlw	0
 15974  0046  3DB6               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15975                           
 15976                           ;interrupts.c: 79: }
 15977                           ;interrupts.c: 80: }
 15978  0047  2872               	goto	i1l5588
 15979  0048                     i1l5574:	
 15980                           
 15981                           ;interrupts.c: 81: else if(PS_2_bits <33 )
 15982  0048  3021               	movlw	33
 15983  0049  0020               	movlb	0	; select bank0
 15984  004A  0268               	subwf	_PS_2_bits,w
 15985  004B  1803               	skipnc
 15986  004C  2860               	goto	i1l5582
 15987                           
 15988                           ;interrupts.c: 82: {
 15989                           ;interrupts.c: 83: PS_2_Read_Data_ThirdTEMP <<= 1;
 15990  004D  3001               	movlw	1
 15991  004E  0024               	movlb	4	; select bank4
 15992  004F                     u709_25:	
 15993  004F  35B7               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15994  0050  0DB8               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15995  0051  0B89               	decfsz	9,f
 15996  0052  284F               	goto	u709_25
 15997                           
 15998                           ;interrupts.c: 84: if(READ_PS_2_PIN(0b00010000))
 15999  0053  3010               	movlw	16
 16000  0054  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 16001  0057  3A00               	xorlw	0
 16002  0058  1903               	skipnz
 16003  0059  2872               	goto	i1l5588
 16004                           
 16005                           ;interrupts.c: 85: {
 16006                           ;interrupts.c: 86: PS_2_Read_Data_ThirdTEMP++;
 16007  005A  3001               	movlw	1
 16008  005B  0024               	movlb	4	; select bank4
 16009  005C  07B7               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16010  005D  3000               	movlw	0
 16011  005E  3DB8               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16012                           
 16013                           ;interrupts.c: 87: }
 16014                           ;interrupts.c: 88: }
 16015  005F  2872               	goto	i1l5588
 16016  0060                     i1l5582:	
 16017                           
 16018                           ;interrupts.c: 89: else
 16019                           ;interrupts.c: 90: {
 16020                           ;interrupts.c: 91: PS_2_Read_Data_ForthTEMP <<= 1;
 16021  0060  3001               	movlw	1
 16022  0061  0024               	movlb	4	; select bank4
 16023  0062                     u711_25:	
 16024  0062  35B3               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16025  0063  0DB4               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16026  0064  0B89               	decfsz	9,f
 16027  0065  2862               	goto	u711_25
 16028                           
 16029                           ;interrupts.c: 92: if(READ_PS_2_PIN(0b00010000))
 16030  0066  3010               	movlw	16
 16031  0067  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 16032  006A  3A00               	xorlw	0
 16033  006B  1903               	skipnz
 16034  006C  2872               	goto	i1l5588
 16035                           
 16036                           ;interrupts.c: 93: {
 16037                           ;interrupts.c: 94: PS_2_Read_Data_ForthTEMP++;
 16038  006D  3001               	movlw	1
 16039  006E  0024               	movlb	4	; select bank4
 16040  006F  07B3               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16041  0070  3000               	movlw	0
 16042  0071  3DB4               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16043  0072                     i1l5588:	
 16044                           
 16045                           ;interrupts.c: 95: }
 16046                           ;interrupts.c: 96: }
 16047                           ;interrupts.c: 97: PS_2_bits++;
 16048  0072  3001               	movlw	1
 16049  0073  0020               	movlb	0	; select bank0
 16050  0074  00A1               	movwf	??_isr
 16051  0075  0821               	movf	??_isr,w
 16052  0076  07E8               	addwf	_PS_2_bits,f
 16053                           
 16054                           ;interrupts.c: 98: Read_Timer = 0;
 16055  0077  0022               	movlb	2	; select bank2
 16056  0078  01ED               	clrf	_Read_Timer^(0+256)
 16057  0079  01EE               	clrf	(_Read_Timer+1)^(0+256)
 16058  007A                     i1l5592:	
 16059                           
 16060                           ;interrupts.c: 99: }
 16061                           ;interrupts.c: 100: IOCAF &= ~0b00100000;
 16062  007A  30DF               	movlw	223
 16063  007B  287F               	goto	L21
 16064  007C                     i1l61:	
 16065                           ;interrupts.c: 101: }
 16066                           
 16067                           
 16068                           ;interrupts.c: 102: else if (IOCAF & 0b00010000)
 16069  007C  1E13               	btfss	19,4	;volatile
 16070  007D  2885               	goto	i1l74
 16071                           
 16072                           ;interrupts.c: 103: {
 16073                           ;interrupts.c: 104: IOCAF &= ~0b00010000;
 16074  007E  30EF               	movlw	239
 16075  007F                     L21:	
 16076  007F  0020               	movlb	0	; select bank0
 16077  0080  00A1               	movwf	??_isr
 16078  0081  0821               	movf	??_isr,w
 16079  0082  0027               	movlb	7	; select bank7
 16080  0083  0593               	andwf	19,f	;volatile
 16081                           
 16082                           ;interrupts.c: 105: }
 16083  0084  28D4               	goto	i1l87
 16084  0085                     i1l74:	
 16085                           
 16086                           ;interrupts.c: 106: else if (PIR1bits.RCIF)
 16087  0085  0020               	movlb	0	; select bank0
 16088  0086  1E91               	btfss	17,5	;volatile
 16089  0087  28B6               	goto	i1l76
 16090                           
 16091                           ;interrupts.c: 107: {
 16092                           ;interrupts.c: 109: LATC |= 0b00001000;
 16093  0088  0022               	movlb	2	; select bank2
 16094  0089  158E               	bsf	14,3	;volatile
 16095                           
 16096                           ;interrupts.c: 110: SinLEDtimer = 0;
 16097  008A  0024               	movlb	4	; select bank4
 16098  008B  01B9               	clrf	_SinLEDtimer^(0+512)
 16099  008C  01BA               	clrf	(_SinLEDtimer+1)^(0+512)
 16100                           
 16101                           ;interrupts.c: 111: Rx_fault = 0;
 16102  008D  0020               	movlb	0	; select bank0
 16103  008E  01A3               	clrf	isr@Rx_fault
 16104                           
 16105                           ;interrupts.c: 112: if(RC1STAbits.FERR)
 16106  008F  0023               	movlb	3	; select bank3
 16107  0090  1D1D               	btfss	29,2	;volatile
 16108  0091  2895               	goto	i1l5604
 16109                           
 16110                           ;interrupts.c: 113: {
 16111                           ;interrupts.c: 114: Rx_fault =1;
 16112  0092  0020               	movlb	0	; select bank0
 16113  0093  01A3               	clrf	isr@Rx_fault
 16114  0094  0AA3               	incf	isr@Rx_fault,f
 16115  0095                     i1l5604:	
 16116                           
 16117                           ;interrupts.c: 115: }
 16118                           ;interrupts.c: 116: rx = ReadUSART();
 16119  0095  3198  20BF  3180   	fcall	i1_ReadUSART
 16120  0098  0020               	movlb	0	; select bank0
 16121  0099  00A1               	movwf	??_isr
 16122  009A  0821               	movf	??_isr,w
 16123  009B  00A4               	movwf	isr@rx
 16124                           
 16125                           ;interrupts.c: 117: if(Rx_fault == 1)
 16126  009C  0823               	movf	isr@Rx_fault,w
 16127  009D  3A01               	xorlw	1
 16128  009E  1D03               	skipz
 16129  009F  28A7               	goto	i1l5612
 16130                           
 16131                           ;interrupts.c: 118: {
 16132                           ;interrupts.c: 119: if(rx == 0)
 16133  00A0  08A4               	movf	isr@rx,f
 16134  00A1  1D03               	skipz
 16135  00A2  28B3               	goto	i1l5614
 16136                           
 16137                           ;interrupts.c: 120: {
 16138                           ;interrupts.c: 121: UART_send_break();
 16139  00A3  3198  20A6  3180   	fcall	i1_UART_send_break
 16140                           
 16141                           ;interrupts.c: 122: }
 16142                           ;interrupts.c: 123: }
 16143  00A6  28B3               	goto	i1l5614
 16144  00A7                     i1l5612:	
 16145                           
 16146                           ;interrupts.c: 124: else
 16147                           ;interrupts.c: 125: {
 16148                           ;interrupts.c: 126: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16149  00A7  01F8               	clrf	i1UARTchar@NinethBit_override
 16150  00A8  0AF8               	incf	i1UARTchar@NinethBit_override,f
 16151  00A9  3000               	movlw	0
 16152  00AA  0023               	movlb	3	; select bank3
 16153  00AB  181D               	btfsc	29,0	;volatile
 16154  00AC  3001               	movlw	1
 16155  00AD  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16156  00AE  0020               	movlb	0	; select bank0
 16157  00AF  0824               	movf	isr@rx,w
 16158  00B0  319C  2419  3180   	fcall	i1_UARTchar
 16159  00B3                     i1l5614:	
 16160                           
 16161                           ;interrupts.c: 127: }
 16162                           ;interrupts.c: 128: PIR1bits.RCIF = 0;
 16163  00B3  0020               	movlb	0	; select bank0
 16164  00B4  1291               	bcf	17,5	;volatile
 16165                           
 16166                           ;interrupts.c: 129: }
 16167  00B5  28D4               	goto	i1l87
 16168  00B6                     i1l76:	
 16169                           
 16170                           ;interrupts.c: 130: else if(PIR1bits.TMR2IF)
 16171  00B6  1C91               	btfss	17,1	;volatile
 16172  00B7  28D4               	goto	i1l87
 16173                           
 16174                           ;interrupts.c: 131: {
 16175                           ;interrupts.c: 133: PIE1bits.TMR2IE = 0;
 16176  00B8  0021               	movlb	1	; select bank1
 16177  00B9  1091               	bcf	17,1	;volatile
 16178                           
 16179                           ;interrupts.c: 134: blinkdelay++;LATC ^= 0b00000010;
 16180  00BA  3001               	movlw	1
 16181  00BB  0020               	movlb	0	; select bank0
 16182  00BC  00A1               	movwf	??_isr
 16183  00BD  0821               	movf	??_isr,w
 16184  00BE  0021               	movlb	1	; select bank1
 16185  00BF  07EA               	addwf	_blinkdelay^(0+128),f
 16186  00C0  3002               	movlw	2
 16187  00C1  0020               	movlb	0	; select bank0
 16188  00C2  00A1               	movwf	??_isr
 16189  00C3  0821               	movf	??_isr,w
 16190  00C4  0022               	movlb	2	; select bank2
 16191  00C5  068E               	xorwf	14,f	;volatile
 16192                           
 16193                           ;interrupts.c: 135: if(blinkdelay > 4)
 16194  00C6  3005               	movlw	5
 16195  00C7  0021               	movlb	1	; select bank1
 16196  00C8  026A               	subwf	_blinkdelay^(0+128),w
 16197  00C9  1C03               	skipc
 16198  00CA  28D2               	goto	i1l5628
 16199                           
 16200                           ;interrupts.c: 136: {
 16201                           ;interrupts.c: 137: if(Alarm)
 16202  00CB  0868               	movf	_Alarm^(0+128),w
 16203  00CC  1D03               	skipz
 16204                           
 16205                           ;interrupts.c: 138: {
 16206                           ;interrupts.c: 140: }
 16207  00CD  28D0               	goto	i1l5626
 16208                           
 16209                           ;interrupts.c: 141: else
 16210                           ;interrupts.c: 142: {
 16211                           ;interrupts.c: 143: LATC |= 0b00000010;
 16212  00CE  0022               	movlb	2	; select bank2
 16213  00CF  148E               	bsf	14,1	;volatile
 16214  00D0                     i1l5626:	
 16215                           
 16216                           ;interrupts.c: 144: }
 16217                           ;interrupts.c: 145: blinkdelay =0;
 16218  00D0  0021               	movlb	1	; select bank1
 16219  00D1  01EA               	clrf	_blinkdelay^(0+128)
 16220  00D2                     i1l5628:	
 16221                           
 16222                           ;interrupts.c: 146: }
 16223                           ;interrupts.c: 147: PIR1bits.TMR2IF =0;
 16224  00D2  0020               	movlb	0	; select bank0
 16225  00D3  1091               	bcf	17,1	;volatile
 16226  00D4                     i1l87:	
 16227                           ;interrupts.c: 150: else
 16228                           ;interrupts.c: 151: {
 16229                           
 16230                           ;interrupts.c: 149: }
 16231                           
 16232  00D4  0020               	movlb	0	; select bank0
 16233  00D5  0822               	movf	??_isr+1,w
 16234  00D6  00FF               	movwf	127
 16235  00D7  107E               	bcf	126,0	;clear compiler interrupt flag
 16236  00D8  0009               	retfie
 16237  00D9                     __end_of_isr:	
 16238                           
 16239                           	psect	text52
 16240  1C19                     __ptext52:	
 16241 ;; *************** function i1_UARTchar *****************
 16242 ;; Defined at:
 16243 ;;		line 189 in file "UART.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  data            1    wreg     unsigned char 
 16246 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 16247 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;  data            1    0[BANK0 ] unsigned char 
 16250 ;; Return value:  Size  Location     Type
 16251 ;;		None               void
 16252 ;; Registers used:
 16253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;Total ram usage:        7 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    1
 16266 ;; This function calls:
 16267 ;;		i1_CheckSum_byte
 16268 ;; This function is called by:
 16269 ;;		_isr
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           
 16274                           ;psect for function i1_UARTchar
 16275  1C19                     i1_UARTchar:	
 16276                           
 16277                           ;incstack = 0
 16278                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16279                           ;i1UARTchar@data stored from wreg
 16280  1C19  0020               	movlb	0	; select bank0
 16281  1C1A  00A0               	movwf	i1UARTchar@data
 16282                           
 16283                           ;UART.c: 192: if(TXSTAbits.TX9)
 16284  1C1B  0023               	movlb	3	; select bank3
 16285  1C1C  1F1E               	btfss	30,6	;volatile
 16286  1C1D  2C5E               	goto	i1l5506
 16287                           
 16288                           ;UART.c: 193: {
 16289                           ;UART.c: 195: if(!NinethBit_override)
 16290  1C1E  08F8               	movf	i1UARTchar@NinethBit_override,f
 16291  1C1F  1903               	btfsc	3,2
 16292  1C20  2C48               	goto	i1l5502
 16293  1C21  2C55               	goto	i1l5504
 16294  1C22                     i1l5496:	
 16295                           ;UART.c: 199: {
 16296                           ;UART.c: 200: case 1:
 16297                           
 16298                           ;UART.c: 196: {
 16299                           ;UART.c: 198: switch (PARITY)
 16300                           
 16301                           
 16302                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16303  1C22  0020               	movlb	0	; select bank0
 16304  1C23  0820               	movf	i1UARTchar@data,w
 16305  1C24  00FA               	movwf	??i1_UARTchar
 16306  1C25  01FB               	clrf	??i1_UARTchar+1
 16307  1C26  087A               	movf	??i1_UARTchar,w
 16308  1C27  00F0               	movwf	i1CheckSum_byte@This
 16309  1C28  087B               	movf	??i1_UARTchar+1,w
 16310  1C29  00F1               	movwf	i1CheckSum_byte@This+1
 16311  1C2A  3003               	movlw	3
 16312  1C2B  2C35               	goto	L24
 16313  1C2C                     i1l5498:	
 16314                           ;UART.c: 203: case 2:
 16315                           
 16316                           ;UART.c: 202: break;
 16317                           
 16318                           
 16319                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16320  1C2C  0020               	movlb	0	; select bank0
 16321  1C2D  0820               	movf	i1UARTchar@data,w
 16322  1C2E  00FA               	movwf	??i1_UARTchar
 16323  1C2F  01FB               	clrf	??i1_UARTchar+1
 16324  1C30  087A               	movf	??i1_UARTchar,w
 16325  1C31  00F0               	movwf	i1CheckSum_byte@This
 16326  1C32  087B               	movf	??i1_UARTchar+1,w
 16327  1C33  00F1               	movwf	i1CheckSum_byte@This+1
 16328  1C34  3002               	movlw	2
 16329  1C35                     L24:	
 16330  1C35  00FC               	movwf	??i1_UARTchar+2
 16331  1C36  087C               	movf	??i1_UARTchar+2,w
 16332  1C37  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16333  1C38  3199  21FC  319C   	fcall	i1_CheckSum_byte
 16334  1C3B  00FD               	movwf	??i1_UARTchar+3
 16335  1C3C  0023               	movlb	3	; select bank3
 16336  1C3D  081E               	movf	30,w	;volatile
 16337  1C3E  067D               	xorwf	??i1_UARTchar+3,w
 16338  1C3F  39FE               	andlw	-2
 16339  1C40  067D               	xorwf	??i1_UARTchar+3,w
 16340  1C41  2C5D               	goto	L23
 16341  1C42                     i1l491:	
 16342                           ;UART.c: 206: case 3:
 16343                           
 16344                           ;UART.c: 205: break;
 16345                           
 16346                           
 16347                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 16348  1C42  0023               	movlb	3	; select bank3
 16349  1C43  141E               	bsf	30,0	;volatile
 16350                           
 16351                           ;UART.c: 208: break;
 16352  1C44  2C5E               	goto	i1l5506
 16353  1C45                     i1l492:	
 16354                           ;UART.c: 209: default:
 16355                           
 16356                           
 16357                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 16358  1C45  0023               	movlb	3	; select bank3
 16359  1C46  101E               	bcf	30,0	;volatile
 16360                           
 16361                           ;UART.c: 212: }
 16362                           
 16363                           ;UART.c: 211: break;
 16364  1C47  2C5E               	goto	i1l5506
 16365  1C48                     i1l5502:	
 16366  1C48  0020               	movlb	0	; select bank0
 16367  1C49  0867               	movf	_PARITY,w
 16368                           
 16369                           ; Switch size 1, requested type "space"
 16370                           ; Number of cases is 3, Range of values is 1 to 3
 16371                           ; switch strategies available:
 16372                           ; Name         Instructions Cycles
 16373                           ; simple_byte           10     6 (average)
 16374                           ; direct_byte           15     9 (fixed)
 16375                           ; jumptable            263     9 (fixed)
 16376                           ;	Chosen strategy is simple_byte
 16377  1C4A  3A01               	xorlw	1	; case 1
 16378  1C4B  1903               	skipnz
 16379  1C4C  2C22               	goto	i1l5496
 16380  1C4D  3A03               	xorlw	3	; case 2
 16381  1C4E  1903               	skipnz
 16382  1C4F  2C2C               	goto	i1l5498
 16383  1C50  3A01               	xorlw	1	; case 3
 16384  1C51  1903               	skipnz
 16385  1C52  2C42               	goto	i1l491
 16386  1C53  2C45               	goto	i1l492
 16387                           
 16388                           ;UART.c: 213: }
 16389  1C54  2C5E               	goto	i1l5506
 16390  1C55                     i1l5504:	
 16391                           
 16392                           ;UART.c: 214: else
 16393                           ;UART.c: 215: {
 16394                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16395  1C55  3001               	movlw	1
 16396  1C56  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16397  1C57  00FA               	movwf	??i1_UARTchar
 16398  1C58  0023               	movlb	3	; select bank3
 16399  1C59  081E               	movf	30,w	;volatile
 16400  1C5A  067A               	xorwf	??i1_UARTchar,w
 16401  1C5B  39FE               	andlw	-2
 16402  1C5C  067A               	xorwf	??i1_UARTchar,w
 16403  1C5D                     L23:	
 16404  1C5D  009E               	movwf	30	;volatile
 16405  1C5E                     i1l5506:	
 16406                           
 16407                           ;UART.c: 217: }
 16408                           ;UART.c: 218: }
 16409                           ;UART.c: 219: TXREG = data;
 16410  1C5E  0020               	movlb	0	; select bank0
 16411  1C5F  0820               	movf	i1UARTchar@data,w
 16412  1C60  0023               	movlb	3	; select bank3
 16413  1C61  009A               	movwf	26	;volatile
 16414  1C62  0008               	return
 16415  1C63                     __end_ofi1_UARTchar:	
 16416                           
 16417                           	psect	text53
 16418  19FC                     __ptext53:	
 16419 ;; *************** function i1_CheckSum_byte *****************
 16420 ;; Defined at:
 16421 ;;		line 282 in file "MISC.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;  This            2    0[COMMON] unsigned int 
 16424 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16427 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16428 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16429 ;; Return value:  Size  Location     Type
 16430 ;;                  1    wreg      unsigned char 
 16431 ;; Registers used:
 16432 ;;		wreg, status,2, status,0
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16438 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;Total ram usage:        8 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; This function calls:
 16445 ;;		Nothing
 16446 ;; This function is called by:
 16447 ;;		i1_UARTchar
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function i1_CheckSum_byte
 16453  19FC                     i1_CheckSum_byte:	
 16454                           
 16455                           ;MISC.c: 284: char i = 0;
 16456                           
 16457                           ;incstack = 0
 16458                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16459  19FC  01F7               	clrf	i1CheckSum_byte@i
 16460                           
 16461                           ;MISC.c: 285: unsigned char Parity = 0;
 16462  19FD  01F6               	clrf	i1CheckSum_byte@Parity
 16463                           
 16464                           ;MISC.c: 286: unsigned int ThisTemp = This;
 16465  19FE  0871               	movf	i1CheckSum_byte@This+1,w
 16466  19FF  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16467  1A00  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16468  1A01  0870               	movf	i1CheckSum_byte@This,w
 16469  1A02  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16470  1A03  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16471                           
 16472                           ;MISC.c: 288: for (i =0; i<8; i++)
 16473  1A04  01F7               	clrf	i1CheckSum_byte@i
 16474  1A05  3008               	movlw	8
 16475  1A06  0277               	subwf	i1CheckSum_byte@i,w
 16476  1A07  1803               	btfsc	3,0
 16477  1A08  2A1C               	goto	i1l5216
 16478  1A09                     i1l378:	
 16479                           
 16480                           ;MISC.c: 289: {
 16481                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 16482  1A09  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16483  1A0A  2A0F               	goto	i1l380
 16484                           
 16485                           ;MISC.c: 291: {
 16486                           ;MISC.c: 292: Parity++;
 16487  1A0B  3001               	movlw	1
 16488  1A0C  00F3               	movwf	??i1_CheckSum_byte
 16489  1A0D  0873               	movf	??i1_CheckSum_byte,w
 16490  1A0E  07F6               	addwf	i1CheckSum_byte@Parity,f
 16491  1A0F                     i1l380:	
 16492                           
 16493                           ;MISC.c: 293: }
 16494                           ;MISC.c: 294: ThisTemp >>= 1;
 16495  1A0F  3001               	movlw	1
 16496  1A10                     u661_25:	
 16497  1A10  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16498  1A11  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16499  1A12  0B89               	decfsz	9,f
 16500  1A13  2A10               	goto	u661_25
 16501  1A14  3001               	movlw	1
 16502  1A15  00F3               	movwf	??i1_CheckSum_byte
 16503  1A16  0873               	movf	??i1_CheckSum_byte,w
 16504  1A17  07F7               	addwf	i1CheckSum_byte@i,f
 16505  1A18  3008               	movlw	8
 16506  1A19  0277               	subwf	i1CheckSum_byte@i,w
 16507  1A1A  1C03               	skipc
 16508  1A1B  2A09               	goto	i1l378
 16509  1A1C                     i1l5216:	
 16510                           
 16511                           ;MISC.c: 295: }
 16512                           ;MISC.c: 296: if(Odd_Even == 3)
 16513  1A1C  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16514  1A1D  3A03               	xorlw	3
 16515  1A1E  1D03               	skipz
 16516  1A1F  2A26               	goto	i1l381
 16517                           
 16518                           ;MISC.c: 297: {
 16519                           ;MISC.c: 298: if(Parity % 2 == 0)
 16520  1A20  1876               	btfsc	i1CheckSum_byte@Parity,0
 16521  1A21  2A24               	goto	i1l5224
 16522                           
 16523                           ;MISC.c: 299: {
 16524                           ;MISC.c: 300: return 1;
 16525  1A22  3001               	movlw	1
 16526  1A23  0008               	return
 16527  1A24                     i1l5224:	
 16528                           
 16529                           ;MISC.c: 301: }
 16530                           ;MISC.c: 302: return 0;
 16531  1A24  3000               	movlw	0
 16532                           
 16533                           ;MISC.c: 303: }
 16534  1A25  0008               	return
 16535  1A26                     i1l381:	
 16536                           
 16537                           ;MISC.c: 304: else
 16538                           ;MISC.c: 305: {
 16539                           ;MISC.c: 306: if(Parity % 2 == 1)
 16540  1A26  1C76               	btfss	i1CheckSum_byte@Parity,0
 16541  1A27  2A2A               	goto	i1l5234
 16542                           
 16543                           ;MISC.c: 307: {
 16544                           ;MISC.c: 308: return 1;
 16545  1A28  3001               	movlw	1
 16546  1A29  0008               	return
 16547  1A2A                     i1l5234:	
 16548                           
 16549                           ;MISC.c: 309: }
 16550                           ;MISC.c: 310: return 0;
 16551  1A2A  3000               	movlw	0
 16552  1A2B  0008               	return
 16553  1A2C                     __end_ofi1_CheckSum_byte:	
 16554                           
 16555                           	psect	text54
 16556  18A6                     __ptext54:	
 16557 ;; *************** function i1_UART_send_break *****************
 16558 ;; Defined at:
 16559 ;;		line 248 in file "UART.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;		None
 16562 ;; Auto vars:     Size  Location     Type
 16563 ;;		None
 16564 ;; Return value:  Size  Location     Type
 16565 ;;		None               void
 16566 ;; Registers used:
 16567 ;;		wreg
 16568 ;; Tracked objects:
 16569 ;;		On entry : 0/0
 16570 ;;		On exit  : 0/0
 16571 ;;		Unchanged: 0/0
 16572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;Total ram usage:        0 bytes
 16578 ;; Hardware stack levels used:    1
 16579 ;; This function calls:
 16580 ;;		Nothing
 16581 ;; This function is called by:
 16582 ;;		_isr
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function i1_UART_send_break
 16588  18A6                     i1_UART_send_break:	
 16589                           
 16590                           ;UART.c: 250: TX1STA |= 0b00001000;
 16591                           
 16592                           ;incstack = 0
 16593                           ; Regs used in i1_UART_send_break: [wreg]
 16594  18A6  0023               	movlb	3	; select bank3
 16595  18A7  159E               	bsf	30,3	;volatile
 16596                           
 16597                           ;UART.c: 251: TXREG = 'd';
 16598  18A8  3064               	movlw	100
 16599  18A9  009A               	movwf	26	;volatile
 16600  18AA  0008               	return
 16601  18AB                     __end_ofi1_UART_send_break:	
 16602                           
 16603                           	psect	text55
 16604  18BF                     __ptext55:	
 16605 ;; *************** function i1_ReadUSART *****************
 16606 ;; Defined at:
 16607 ;;		line 234 in file "UART.c"
 16608 ;; Parameters:    Size  Location     Type
 16609 ;;		None
 16610 ;; Auto vars:     Size  Location     Type
 16611 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;                  1    wreg      unsigned char 
 16614 ;; Registers used:
 16615 ;;		wreg
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;Total ram usage:        2 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; This function calls:
 16628 ;;		Nothing
 16629 ;; This function is called by:
 16630 ;;		_isr
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           
 16635                           ;psect for function i1_ReadUSART
 16636  18BF                     i1_ReadUSART:	
 16637                           
 16638                           ;UART.c: 236: char data;
 16639                           ;UART.c: 238: if(RCSTAbits.FERR)
 16640                           
 16641                           ;incstack = 0
 16642                           ; Regs used in i1_ReadUSART: [wreg]
 16643  18BF  0023               	movlb	3	; select bank3
 16644  18C0  191D               	btfsc	29,2	;volatile
 16645                           
 16646                           ;UART.c: 240: if(RCSTAbits.OERR)
 16647  18C1  1C9D               	btfss	29,1	;volatile
 16648  18C2  28C4               	goto	i1l5514
 16649                           
 16650                           ;UART.c: 241: RCSTAbits.CREN = 0;
 16651  18C3  121D               	bcf	29,4	;volatile
 16652  18C4                     i1l5514:	
 16653                           
 16654                           ;UART.c: 243: data = RCREG;
 16655  18C4  0819               	movf	25,w	;volatile
 16656  18C5  00F0               	movwf	??i1_ReadUSART
 16657  18C6  0870               	movf	??i1_ReadUSART,w
 16658  18C7  00F1               	movwf	i1ReadUSART@data
 16659                           
 16660                           ;UART.c: 245: return (data);
 16661  18C8  0871               	movf	i1ReadUSART@data,w
 16662  18C9  0008               	return
 16663  18CA                     __end_ofi1_ReadUSART:	
 16664                           
 16665                           	psect	text56
 16666  1964                     __ptext56:	
 16667 ;; *************** function i1_READ_PS_2_PIN *****************
 16668 ;; Defined at:
 16669 ;;		line 182 in file "PS_2.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;  DATA_CLK        1    wreg     unsigned char 
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;                  1    wreg      unsigned char 
 16676 ;; Registers used:
 16677 ;;		wreg
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        1 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; This function calls:
 16690 ;;		Nothing
 16691 ;; This function is called by:
 16692 ;;		_isr
 16693 ;; This function uses a non-reentrant model
 16694 ;;
 16695                           
 16696                           
 16697                           ;psect for function i1_READ_PS_2_PIN
 16698  1964                     i1_READ_PS_2_PIN:	
 16699                           
 16700                           ;incstack = 0
 16701                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16702                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16703  1964  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16704                           
 16705                           ;PS_2.c: 184: if(DATA_CLK == 0b00100000)
 16706  1965  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16707  1966  3A20               	xorlw	32
 16708  1967  1D03               	skipz
 16709  1968  2970               	goto	i1l694
 16710                           
 16711                           ;PS_2.c: 185: {
 16712                           ;PS_2.c: 187: if((PORTA & 0b00100000) == 0b00100000)
 16713  1969  0020               	movlb	0	; select bank0
 16714  196A  1E8C               	btfss	12,5	;volatile
 16715  196B  296E               	goto	i1l5532
 16716                           
 16717                           ;PS_2.c: 188: {
 16718                           ;PS_2.c: 189: return (1);
 16719  196C  3001               	movlw	1
 16720                           
 16721                           ;PS_2.c: 190: }
 16722  196D  0008               	return
 16723  196E                     i1l5532:	
 16724                           
 16725                           ;PS_2.c: 191: else
 16726                           ;PS_2.c: 192: {
 16727                           ;PS_2.c: 193: return 0;
 16728  196E  3000               	movlw	0
 16729                           
 16730                           ;PS_2.c: 194: }
 16731                           ;PS_2.c: 195: }
 16732  196F  0008               	return
 16733  1970                     i1l694:	
 16734                           
 16735                           ;PS_2.c: 196: else
 16736                           ;PS_2.c: 197: {
 16737                           ;PS_2.c: 199: if((PORTA & 0b00010000) == 0b00010000)
 16738  1970  0020               	movlb	0	; select bank0
 16739  1971  1E0C               	btfss	12,4	;volatile
 16740  1972  2975               	goto	i1l5542
 16741                           
 16742                           ;PS_2.c: 200: {
 16743                           ;PS_2.c: 201: return (1);
 16744  1973  3001               	movlw	1
 16745                           
 16746                           ;PS_2.c: 202: }
 16747  1974  0008               	return
 16748  1975                     i1l5542:	
 16749                           
 16750                           ;PS_2.c: 203: else
 16751                           ;PS_2.c: 204: {
 16752                           ;PS_2.c: 205: return 0;
 16753  1975  3000               	movlw	0
 16754  1976  0008               	return
 16755  1977                     __end_ofi1_READ_PS_2_PIN:	
 16756  007E                     btemp	set	126	;btemp
 16757  007E                     pic14e$flags	set	126
 16758  007E                     wtemp	set	126
 16759  007E                     wtemp0	set	126
 16760  0080                     wtemp1	set	128
 16761  0082                     wtemp2	set	130
 16762  0084                     wtemp3	set	132
 16763  0086                     wtemp4	set	134
 16764  0088                     wtemp5	set	136
 16765  007F                     wtemp6	set	127
 16766  007E                     ttemp	set	126
 16767  007E                     ttemp0	set	126
 16768  0081                     ttemp1	set	129
 16769  0084                     ttemp2	set	132
 16770  0087                     ttemp3	set	135
 16771  007F                     ttemp4	set	127
 16772  007E                     ltemp	set	126
 16773  007E                     ltemp0	set	126
 16774  0082                     ltemp1	set	130
 16775  0086                     ltemp2	set	134
 16776  0080                     ltemp3	set	128


Data Sizes:
    Strings     669
    Constant    507
    Data        19
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      29
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_33(CODE[45]), STR_32(CODE[41]), STR_31(CODE[40]), STR_30(CODE[47]), 
		 -> STR_29(CODE[46]), STR_24(CODE[33]), STR_23(CODE[29]), STR_22(CODE[28]), 
		 -> STR_21(CODE[35]), STR_20(CODE[34]), STR_17(CODE[33]), STR_16(CODE[29]), 
		 -> STR_15(CODE[28]), STR_14(CODE[35]), STR_13(CODE[34]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1078$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[20]), PS_2_Update@buf(BANK5[60]), STR_28(CODE[3]), STR_27(CODE[35]), 
		 -> STR_26(CODE[18]), STR_25(CODE[3]), SetBaud@buf(BANK2[50]), STR_19(CODE[15]), 
		 -> STR_18(CODE[3]), Init_System@buf(BANK1[60]), STR_12(CODE[3]), STR_11(CODE[20]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[22]), STR_7(CODE[21]), 
		 -> STR_6(CODE[24]), STR_5(CODE[35]), STR_4(CODE[3]), Version(BANK4[9]), 
		 -> STR_3(CODE[19]), STR_2(CODE[26]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  155729
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11524
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3016
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   57306
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   49257
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   23495
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5131
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4742
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17870
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    3357
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    7944
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3095
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    7978
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    4931
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2985
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     542
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                  i1_UART_send_break
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     427
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1D      13       36.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jan 21 15:51:56 2015

              _PS_2_DISABLE_INTERRUPT 19DD                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0028                     ??_ReadFlash_4Byte 002E  
                                   _i 00EB                          ___fldiv@cntr 0045  
                        ___fldiv@sign 0047                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l170 0FE6                                   l158 0E5C  
                                 l264 1B2C                                   l266 1B45  
                                 l380 1A70                                   l381 1A87  
                                 l517 1AF0                                   l519 1B0F  
                                 l480 1B8A                                   l529 177B  
                                 l378 1A6A                                   l474 1B73  
                                 l491 1C8E                                   l492 1C91  
                                 l478 1B81                                   l674 18DD  
                                 l834 055C                                   l907 0D16  
                                 l908 0D6C                                   l764 03CE  
                                 l669 18D2                                   l694 195E  
                                 l846 07C4                                   l854 06B2  
                                 l679 192C                                   l992 1AE1  
                                 _MEM 022D                                   _PR2 001B  
                                 _isr 0004                          __CFG_BORV$LO 0000  
                                 wreg 0009                          ___flmul@cntr 005A  
                        ___flmul@sign 005B            __end_of_ScanCodeFunctionE0 09D3  
                       ___flpack@sign 002A                                  l1001 18E6  
                                l1056 1BA5                                  l1059 1BCA  
                                l1094 14B7                                  l1097 14D5  
                                l1275 1F77                                  l1269 1F5D  
                                l6002 1BDF                                  l6004 1BED  
                                l6012 1C10                                  l5240 1943  
                                l6008 1C05                                  l7000 06BD  
                                l5242 1949                                  l6026 195C  
                                l6212 19EF                                  l6036 1962  
                                l6300 17C3                                  l7020 06F4  
                                l7012 06DD                                  l7004 06C6  
                                l6054 19BD                                  l6046 1B12  
                                l6142 14B5                                  l6144 14B9  
                                l6320 19AE                                  l6304 17CC  
                                l7040 0749                                  l7024 0702  
                                l7016 06EB                                  l7008 06D4  
                                l7120 1044                                  l6154 14E4  
                                l6306 17D9                                  l7042 0752  
                                l7050 0771                                  l6404 0D7A  
                                l6180 152D                                  l6172 1528  
                                l6164 14FB                                  l6148 14BE  
                                l7220 15F6                                  l6308 17EC  
                                l7060 07C2                                  l7044 075B  
                                l7052 078C                                  l6430 0DBE  
                                l6406 0D97                                  l6350 0D10  
                                l7302 13A9                                  l6094 11E7  
                                l6182 1494                                  l6246 191D  
                                l7038 0741                                  l7062 07C5  
                                l7126 105E                                  l6432 0DDB  
                                l6416 0D9A                                  l6360 0D21  
                                l7320 13E8                                  l6096 11EB  
                                l6184 157D                                  l7240 164B  
                                l7224 15FF                                  l6272 1762  
                                l6512 1A35                                  l7048 0764  
                                l7056 07AE                                  l7144 10C3  
                                l6442 0DDE                                  l6418 0DB7  
                                l7314 13D3                                  l7234 1630  
                                l6506 193E                                  l6290 17A4  
                                l7138 10A3                                  l5474 1EEB  
                                l6444 0DFB                                  l6372 0D26  
                                l6348 0CF3                                  l7332 1412  
                                l7308 13BE                                  l7236 1639  
                                l7244 1654                                  l6276 1775  
                                l6516 1A3F                                  l6700 036E  
                                l6604 024A                                  l6532 1F3A  
                                l7180 116E                                  l7164 111F  
                                l6454 0DFE                                  l6374 0D43  
                                l6358 0D1B                                  l7350 1445  
                                l7326 13FD                                  l7238 1642  
                                l7246 1661                                  l6294 17A9  
                                l6710 0385                                  l6630 02CD  
                                l6606 0250                                  l6542 1F62  
                                l6534 1F45                                  l7158 1105  
                                l5478 1F14                                  l6456 0E1B  
                                l6392 0D71                                  l6384 0D46  
                                l7344 143C                                  l5840 1C76  
                                l7248 167D                                  l6296 17B1  
                                l6800 0445                                  l6712 0373  
                                l6616 02AA                                  l6560 0124  
                                l7280 1DC7                                  l6544 1F6B  
                                l6536 1F4A                                  l6528 1F31  
                                l7192 118E                                  l7176 1164  
                                l7424 0E86                                  l6466 0E1E  
                                l6394 0D77                                  l6386 0D63  
                                l7362 1457                                  l7338 1427  
                                l6482 199B                                  l5922 12DF  
                                l6298 17BA                                  l6810 045F  
                                l6802 045D                                  l6722 039E  
                                l6714 038B                                  l6730 03AC  
                                l6650 02FD                                  l6618 02B2  
                                l6562 0126                                  l7282 1DF3  
                                l5780 1A7D                                  l5764 1B4F  
                                l6468 0E3B                                  l7380 148A  
                                l7356 144E                                  l5860 1B62  
                                l5828 18F0                                  l5844 1C94  
                                l6812 0464                                  l6740 03C5  
                                l6724 038C                                  l6580 0190  
                                l7292 1DFD                                  l7188 1184  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 0015  
                                l7374 1475                                  l5838 1C6D  
                                l5846 1CA1                                  l6494 1988  
                                l5934 12B2                                  l6822 048D  
                                l6814 0479                                  l6750 03DA  
                                l6726 03A4                                  l6662 0319  
                                l6582 0192                                  l7470 0F83  
                                l7446 0EF8                                  l7368 146C  
                                l5872 1B75                                  l5864 1B68  
                                l5848 1CAC                                  l5936 1323  
                                l5928 1305                                  l6920 0577  
                                l6808 0476                                  l6912 056B  
                                l6736 03BB                                  l6592 01EC  
                                l7464 0F59                                  l7456 0F1D  
                                l7448 0EFE                                  l5882 1B83  
                                l6826 0499                                  l6818 0483  
                                l6690 0357                                  l6682 0344  
                                l6674 0333                                  l6658 0310  
                                l6666 0322                                  l6762 0406  
                                l6594 01F0                                  l7482 0FE8  
                                l5788 1A85                                  l5868 1B6D  
                                l5980 1D21                                  l6908 055D  
                                l6844 04C1                                  l6860 04E4  
                                l7476 0FD0                                  l7468 0F7F  
                                l5798 1A8B                                  l5886 1B8C  
                                l5878 1B7A                                  l5966 136F  
                                l6870 04FC                                  l6854 04DB  
                                l6846 04AF                                  l6782 0430  
                                l6774 041F                                  l6758 03E6  
                                l6678 033B                                  l6686 034C  
                                l7486 0FF7                                  l5992 1D4C  
                                l5968 1394                                  l6928 0583  
                                l6880 0516                                  l6872 04EA  
                                l6856 04DE                                  l6848 04C7  
                                l7488 0FFC                                  l5978 1D13  
                                l6882 051A                                  l6874 0502  
                                l6858 04C9                                  l6786 0439  
                                l6778 0427                                  _BAUD 0220  
                                l5988 1D41                                  l6948 05DC  
                                l6884 0504                                  l6974 0621  
                                l6958 060F                                  l6886 0520  
                                l6798 0457                                  l6968 0615  
                                l6994 06A9                                  l6986 0652  
                                l6898 0543                                  _ECHO 00E9  
                                STR_1 0C3D                                  STR_2 0BBB  
                                STR_3 0C53                                  STR_4 0C3D  
                                STR_5 0B1C                                  STR_6 0BD5  
                                STR_7 0C03                                  STR_8 0BED  
                                STR_9 0C78                                  _LATA 010C  
                                _LATC 010E                                  _LALT 0167  
       __end_of_PS_2_ENABLE_INTERRUPT 19C5                                  _PIE1 0091  
                                i1l61 007C                                  u8015 1D5C  
                                u8025 1D68                                  u8105 1743  
                                i1l74 0085                                  u8035 1D74  
                                u8115 1760                                  i1l76 00B6  
                                u8045 1D8A                                  i1l87 00D4  
                                u7415 1A71                                  u8055 1D95  
                                _RALT 016A                                  u8065 1DA0  
                                u7605 1CCF                                  u7383 1B3E  
                                u8095 16EE                                  u7705 1D42  
                                u7465 1AD8                                  u8425 1A40  
                                u7635 1366                                  u8435 1A47  
                                u8515 1F65                                  u7485 1AAB  
                                u8605 0174                                  u7735 1BE2  
                                u7665 1D16                                  u8625 01D0  
                                u8545 1F7F                                  u7755 1BFB  
                                u8475 1F3F                                  u7685 1D22  
                                u7765 1C06                                  u7925 151E  
                                u8645 022E                                  u7695 1D36  
                                u7855 1E87                                  u8495 1F57  
                                u7865 1EAA                                  u7945 1537  
                                u8665 028E                                  u7885 121D  
                                u7965 1E07                                  u9805 073A  
                                u7975 1E3C                                  u9905 10B8  
                                u9835 1BAB                                  u9915 10C4  
                                u9795 072A                                  u9875 106C  
                                u9955 112D                                  u9885 107F  
                                u9965 1140                                  u9895 10A4  
                                u9985 116F                                  u9995 1176  
                                _WPUA 020C                                  _WPUC 020E  
                        __CFG_WRT$OFF 0000                                  _main 0E48  
                  UARTstringWAIT@data 0034                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                 baudUSART@baudconfig 0025                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                                start 00D9                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0028             WriteFlash_Sequential@temp 00E3  
                    Reverse_Byte@temp 0027                         __CFG_MCLRE$ON 0000  
                          _BlockErase 1A8D                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                       __end_of_InitApp 1029  
                     __end_of_SetBaud 1800                            _Clock_TRIS 18CA  
                       ??_Init_System 0054                __size_of_READ_PS_2_PIN 0012  
                               ??_isr 0021                   _Right_Shift_Key_old 016C  
                      _Init_PS_2_Send 139C                     ??i1_READ_PS_2_PIN 0070  
     UARTchar@NinethBit_override_data 002E     i1UARTchar@NinethBit_override_data 0079  
               ??_INIT_PS_2_INTERRUPT 0025             _Decode_Scan_Code_Function 192F  
                         ReadBaud@row 0037       WriteFlash_Sequential@amountTemp 00E2  
                       ??_ReadVoltage 0060                            _CloseUSART 1903  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0030  
                     __end_of___fldiv 10EA                                 STR_10 0C40  
                               STR_11 0C2C                                 STR_12 0C3D  
                               STR_20 0B3F                                 STR_21 0AF9  
                               STR_13 0B3F                                 STR_22 0B9F  
                               STR_14 0AF9                                 STR_30 09FB  
                               STR_23 0B82                                 STR_15 0B9F  
                               STR_31 0AAE                                 STR_24 0B61  
                               STR_16 0B82                                 STR_32 0A85  
                               STR_25 0C3D                                 STR_17 0B61  
                               STR_33 0A58                         __CFG_WDTE$OFF 0000  
                               STR_18 0C3D                                 STR_26 0C66  
                               STR_34 0C18                                 STR_19 0C89  
                               STR_27 0AD6                                 STR_28 0C3D  
                               STR_29 0A2A                       __end_of___flmul 11BC  
                    __end_of_ISNUMBER 191F                       __end_of___lldiv 1D55  
                               u10025 118F                                 u10115 1DDE  
                               u10035 1196                                 u10055 15CA  
                               u10065 15E4                                 u10075 15F4  
                               _CKPPS 0E25                       __end_of___llmod 1C19  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l380 1A0F                                 i1l381 1A26  
                               i1l378 1A09                                 i1l491 1C42  
                               i1l492 1C45                                 i1l694 1970  
                               _RCREG 0199                                 _RCSTA 019D  
                               _SPBRG 019B                  _PS_2_Read_Data_First 01A4  
                               _PORTA 000C                  _PS_2_Read_Data_Forth 01A6  
                        InitUART@Baud 0033                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 1940  
                               _Alarm 00E8                  _PS_2_Read_Data_Third 01AA  
                     __end_of_delayUS 1B58                      _InternalADC_Read 1B97  
                 ___lmul@multiplicand 0029                        __CFG_FCMEN$OFF 0000  
          __end_of_Keyboard_Connected 1DFF                          InitUART@temp 0044  
               _WriteFlash_Sequential 12AA                 ReadFlash_2Byte@column 0027  
                    __end_of_UARTchar 1CB1                            SetBaud@buf 0120  
                     __end_of_dpowers 09FB                    __size_of_PS_2_INIT 000C  
                               main@i 00E7                                 isr@rx 0024  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 0033                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 1583                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 19B0                         _ScanCodeSHIFT 08F5  
                     _UART_send_break 18AB                       __initialization 00DB  
              __end_of_Init_PS_2_Send 148F                    __size_of_Data_TRIS 000B  
                        __end_of_main 1000                      __end_of_InitUART 12AA  
                          _Read_Timer 016D                      ??_UARTstringWAIT 0036  
                         isr@Rx_fault 0023                      __end_of_ReadBaud 1EC1  
          __end_of_DisableInternalADC 07FF                      __end_of_ScanCode 08F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 0E48  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 1693  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 2000  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                   __size_ofi1_UARTchar 004A  
                    ___llmod@dividend 0037                                _ADRESH 009C  
                              _ADRESL 009B                      __end_of___flpack 1F92  
                       _READ_PS_2_PIN 1952                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l5224 1A24  
                              i1l5216 1A1C                                i1l5234 1A2A  
                              i1l5502 1C48                                i1l5504 1C55  
                              i1l5514 18C4                                i1l5506 1C5E  
                              i1l5532 196E                                i1l5612 00A7  
                              i1l5604 0095                                i1l5542 1975  
                              i1l5614 00B3                                i1l5626 00D0  
                              i1l5562 002A                                i1l5628 00D2  
                              i1l5582 0060                                i1l5574 0048  
                              i1l5566 0030                                i1l5496 1C22  
                              i1l5592 007A                                i1l5498 1C2C  
                              i1l5588 0072                                _INTCON 000B  
                              _FVRCON 0117                                _PARITY 0067  
                              _PMADRH 0192                                _PMADRL 0191  
                    __end_of___lwtofl 19DD                                _PMDATH 0194  
                              _PMDATL 0193                                _PMCON1 0195  
                              _PMCON2 0196                    __size_of_ReadUSART 000C  
                              u711_25 0062                                u703_25 001A  
                              _OSCCON 0099                                u706_25 0037  
                              u661_25 1A10                                u709_25 004F  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 18E0                 _PS_2_Read_Data_Second 01A8  
                           ??_InitApp 0025                 ??_ConfigureOscillator 0025  
                              _Delete 0166                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 0059                           ?_BlockErase 0025  
                       InitUART@spbrg 0040                           SetBaud@Baud 0054  
                  __size_of_OpenUSART 003F                       ?_Init_PS_2_Send 0070  
                              ___flge 1EC1                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A2C                             ??___fldiv 003C  
                      __CFG_STVREN$ON 0000                             ??___flmul 0050  
                           ??___lldiv 002D                           ?_Clock_TRIS 0070  
                           ??___llmod 003B                           SetBaud@temp 015A  
                   __end_of_PS_2_INIT 1903                    ??_Decode_Scan_Code 0025  
                        ?i1_ReadUSART 0070                             ??_delayUS 0029  
__size_of_Decode_Scan_Code_FunctionE0 0013                           ?_CloseUSART 0070  
              ?_WriteFlash_Sequential 002F                       SetBaud@Baudtemp 0152  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18E0  
                           ??_sprintf 0045               i1READ_PS_2_PIN@DATA_CLK 0070  
                          ___flge@ff1 0025                            ___flge@ff2 0029  
                        ?_PS_2_Update 0070               __end_of_UART_send_break 18B0  
                     _ReadFlash_2Byte 1ABE                       _ReadFlash_4Byte 1CB1  
                          ___fldiv@f1 0038                            ___fldiv@f2 0034  
                          ___fldiv@f3 0041               __end_of__initialization 0111  
                  __size_of_WriteBaud 005E                            ___flmul@f1 0048  
                          ___flmul@f2 004C                        PS_2_Update@buf 02A0  
             ?_PS_2_DISABLE_INTERRUPT 0070                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                        __pcstackCOMMON 0070  
                        __pidataBANK2 0002                          __pidataBANK4 0C98  
                           ?_UARTchar 002D                    InitUART@baudconfig 0042  
                         _Init_System 1583                     __end_of_ReadUSART 18F7  
                          ___lwtofl@c 002F                           _ReadVoltage 1F92  
                     ReadVoltage@temp 00A4                          WriteBaud@row 0036  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 0033  
                       ReadUSART@data 0026                           _SinLEDtimer 0239  
  __size_of_Decode_Scan_Code_Function 0011                     __end_of_OpenUSART 1B97  
                 __size_of_BlockErase 0031                       WriteBaud@Parity 003C  
                   Send_PS2@oddparity 0033                            __pbssBANK0 0066  
                          __pbssBANK1 00E8                            __pbssBANK2 015F  
                          __pbssBANK3 01A0                            __pbssBANK4 0231  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 0033  
                           ?_ReadBaud 0037        __end_of_PS_2_DISABLE_INTERRUPT 19FC  
                  ReadVoltage@voltage 00A0                               ?_UNLOCK 0070  
                     i1_READ_PS_2_PIN 1964                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0025  
                _ScanCodeFunctionNoE0 0800              __end_of_InternalADC_Read 1BD6  
                  _ScanCodeFunctionE0 0966                         _CheckSum_byte 1A5C  
                          __pmaintext 0E48                          ??i1_UARTchar 007A  
                         _ParityTyped 0069                         BlockErase@row 0025  
                             ?___flge 0025                               ?___lmul 0025  
                 i1CheckSum_byte@This 0070                         _Caps_Lock_Key 0164  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 002F                            _blinkdelay 00EA  
                           ?___flpack 0025                        ___lmul@product 002D  
               i1CheckSum_byte@Parity 0076                             ?___lwtofl 002F  
                   __end_of_WriteBaud 1E5D                       ??_READ_PS_2_PIN 0025  
                   __end_of_baudUSART 18BF               __end_of_ReadFlash_2Byte 1AF0  
             __end_of_ReadFlash_4Byte 1D02                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0025                               _PPSLOCK 0E0F  
                  __end_ofi1_UARTchar 1C63                            ??_InitUART 0038  
                          ??_ReadBaud 003B                 READ_PS_2_PIN@DATA_CLK 0025  
                    ?_UART_send_break 0070                 _PS_2_ENABLE_INTERRUPT 19B0  
                     __size_of_UNLOCK 000B                               _InitApp 1006  
                          ??_Send_PS2 002F                    _Keyboard_Connected 1DAA  
                             _SetBaud 1693                        InitUART@config 0043  
                      ?_CheckSum_byte 0025           __end_of_INIT_PS_2_INTERRUPT 192F  
                      InitUART@parity 0037               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0025                               _Version 0224  
                     __size_of___flge 0066                               ___fldiv 1029  
                     __size_of___lmul 0030                               ___flmul 10EA  
                 ?_Keyboard_Connected 0070                               ___lldiv 1D02  
                             ___llmod 1BD6                            ??___flpack 002B  
                             _delayUS 1B23                               __ptext1 1EC1  
                             __ptext2 1F92                               __ptext3 19C5  
                             __ptext4 10EA                               __ptext5 1029  
                             __ptext6 1F27                               __ptext7 1B97  
                             __ptext8 07F8                               __ptext9 18F7  
                          ??___lwtofl 0033                  __size_ofi1_ReadUSART 000B  
                             _dpowers 09D3                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00D5  
         WriteFlash_Sequential@amount 0032           WriteFlash_Sequential@buffer 0031  
                  _DisableInternalADC 07F8           WriteFlash_Sequential@spaces 00E5  
             __end_ofi1_READ_PS_2_PIN 1977                  ??_Keyboard_Connected 0061  
                             _sprintf 148F                               clrloop0 1001  
                   _Caps_Lock_Key_old 0165                  end_of_initialization 0111  
                     i1ReadUSART@data 0071                               init_ram 18B0  
                 ?_DisableInternalADC 0070                               initloop 18B1  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 06E3                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 0231  
                     i1_CheckSum_byte 19FC               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0233                             _PS_2_INIT 18F7  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 0068  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1ABE           __end_of_ConfigureOscillator 1952  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18D5  
                         ___flmul@exp 0055                             _BaudTyped 01A0  
                           _Data_TRIS 18D5                       PS_2_Update@temp 02E0  
                           _CapsCount 01AC                             _Caps_Lock 01AD  
            _PS_2_Read_Data_ThirdTEMP 0237                       ??_CheckSum_byte 0028  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 18EB                    __end_of_CloseUSART 1911  
       ??_Decode_Scan_Code_FunctionE0 0025                     __size_of_ISNUMBER 000E  
                      __end_of___flge 1F27                 CheckSum_byte@Odd_Even 0027  
                        ?_Init_System 0070                        __end_of___lmul 1A5C  
                   __size_of_UARTchar 004E                          ?_ReadVoltage 005C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0035  
         INIT_PS_2_INTERRUPT@DATA_CLK 0025                   start_initialization 00DB  
                           _ReadUSART 18EB               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0029                           __end_of_isr 00D9  
                       WriteBaud@Baud 0038                  __end_of_Reverse_Byte 1DAA  
                    ?i1_READ_PS_2_PIN 0070              ??_Decode_Scan_Code_Shift 0025  
                       WriteBaud@temp 0045                             _OpenUSART 1B58  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0025  
                     ___llmod@divisor 0033                     __size_of_InitUART 00EE  
                     ___llmod@counter 003C                     __size_of_ReadBaud 0064  
                           _Shift_Key 006A               __end_ofi1_CheckSum_byte 1A2C  
                   ?_InternalADC_Read 002F                     __size_of_Send_PS2 019F  
                            ??___flge 002D                              ??___lmul 002D  
           _PS_2_Read_Data_SecondTEMP 0235                    ??_InternalADC_Read 0031  
                         __pdataBANK2 016D                           __pdataBANK4 0220  
                   __size_of___flpack 006B                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtofl 0018  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01AF  
                       __pcstackBANK5 02A0                             _WriteBaud 1DFF  
                 __end_of__stringdata 0C98                    ReadFlash_2Byte@row 0025  
                           _baudUSART 18B6                    ReadFlash_4Byte@row 002A  
                          ?_OpenUSART 0025                           sprintf@_val 004E  
                         sprintf@flag 004B                           sprintf@prec 004C  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0966  
     Decode_Scan_Code_FunctionE0@Code 0025                              ?_SetBaud 0054  
                      ReadBaud@column 0039                              ?___fldiv 0034  
                            ?___flmul 0048                              ?___lldiv 0025  
                            ?___llmod 0033                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 00A0         WriteFlash_Sequential@TempBufL 00C0  
                            ?_delayUS 0025                WriteFlash_Sequential@i 00E6  
          Decode_Scan_Code_Shift@Code 0025                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0026                              _BAUDMODE 0163  
                    _Decode_Scan_Code 1977                            ?_WriteBaud 0036  
               __end_of_READ_PS_2_PIN 1964                              ?_sprintf 003D  
          UARTchar@NinethBit_override 002D                       _PS_2_Update$854 02DC  
                     _PS_2_Update$855 02DD                       _PS_2_Update$856 02DE  
                     _PS_2_Update$857 02DF                            ?_baudUSART 0070  
                           delayUS@US 0025       __size_of_Decode_Scan_Code_Shift 0013  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0025  
          WriteFlash_Sequential@tempH 00E0            WriteFlash_Sequential@tempL 00E1  
                   i1_UART_send_break 18A6                             clear_ram0 1000  
                            _PIE1bits 0091                              _ISNUMBER 1911  
                  ?i1_UART_send_break 0070                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 002F                              _UARTchar 1C63  
                       ??i1_ReadUSART 0070                   ??i1_UART_send_break 0070  
                            _LControl 0168          __size_of_INIT_PS_2_INTERRUPT 0010  
                         __stringdata 09FB                  __size_of_Init_System 0110  
      __size_of_WriteFlash_Sequential 00F2         __end_of_WriteFlash_Sequential 139C  
               __size_of_Reverse_Byte 0055                        _UARTstringWAIT 1AF0  
                         ??_ReadUSART 0025                  __size_of_ReadVoltage 006E  
                            _RControl 016B              ??_PS_2_DISABLE_INTERRUPT 0025  
             ??_PS_2_ENABLE_INTERRUPT 0025                     ___lmul@multiplier 0025  
         __size_of_Keyboard_Connected 0055                              SetBaud@i 015E  
                       ??_PS_2_Update 01AF                              _InitUART 11BC  
           __end_ofi1_UART_send_break 18AB                              _ReadBaud 1E5D  
                         ??_OpenUSART 0027                              _ScanCode 0884  
                     OpenUSART@config 0027     __end_of_Decode_Scan_Code_Function 1940  
                            _Send_PS2 0CA9                      __size_of_InitApp 0023  
                    __size_of_SetBaud 016D                          _Reverse_Byte 1D55  
                    __size_of___fldiv 00C1                      __size_of___flmul 00D2  
              _Decode_Scan_Code_Shift 199D                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                              ___flpack 1F27  
                       SetBaud@Parity 0058                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1B23  
                            ___lwtofl 19C5                       Send_PS2@command 0034  
                 __end_ofi1_ReadUSART 18CA                           ??_WriteBaud 003D  
                     Send_PS2@timeout 0036                         ISNUMBER@ascii 0025  
                            __ptext10 191F                              __ptext11 1DAA  
                            __ptext20 1D55                              __ptext12 0115  
                            __ptext21 1911                              __ptext13 1A2C  
                            __ptext30 1C63                              __ptext22 199D  
                            __ptext14 18AB                              __ptext31 1E5D  
                            __ptext23 198A                              __ptext15 1693  
                            __ptext40 139C                              __ptext32 1CB1  
                            __ptext24 192F                              __ptext16 1DFF  
                            __ptext41 0CA9                              __ptext33 1ABE  
                            __ptext25 1977                              __ptext17 12AA  
                            __ptext50 1940                              __ptext42 1B23  
                            __ptext34 11BC                              __ptext26 1583  
                            __ptext18 1A8D                              __ptext43 1952  
                            __ptext35 18B6                              __ptext27 148F  
                            __ptext19 18E0                              __ptext52 1C19  
                            __ptext44 19B0                              __ptext36 1D02  
                            __ptext28 1BD6                              __ptext53 19FC  
                            __ptext45 18D5                              __ptext37 18EB  
                            __ptext29 1AF0                              __ptext54 18A6  
                            __ptext46 18CA                              __ptext38 1B58  
                            __ptext55 18BF                              __ptext47 1A5C  
                            __ptext39 1903                              __ptext56 1964  
                            __ptext48 19DD                              __ptext49 1006  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0026                           ??_baudUSART 0025  
                    __size_of_sprintf 00F4                   Keyboard_Connected@i 0061  
                       __size_of_main 01B8              __size_of_ReadFlash_2Byte 0032  
            __size_of_ReadFlash_4Byte 0051                              delayUS@i 002A  
                            delayUS@j 002E                          _pwrLEDtoggle 023B  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1A8D  
                 __end_of_PS_2_Update 07F8                            _RC1STAbits 019D  
                      CheckSum_byte@i 002C                        _Left_Shift_Key 0066  
             __size_of_Init_PS_2_Send 00F3                     ??_UART_send_break 0025  
               ___flmul@f3_as_product 0056                       ?_UARTstringWAIT 0034  
                 CheckSum_byte@Parity 002B                            _INTCONbits 000B  
           __size_of_InternalADC_Read 003F                        OpenUSART@spbrg 0025  
                        UARTchar@data 0033          i1UARTchar@NinethBit_override 0078  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 001F  
                            intlevel1 0000                             sprintf@ap 0052  
                           sprintf@sp 003D            __size_ofi1_UART_send_break 0005  
                    ___lldiv@dividend 0029   __end_of_Decode_Scan_Code_FunctionE0 199D  
         _Decode_Scan_Code_FunctionE0 198A                     __CFG_CLKOUTEN$OFF 0000  
                      _BatteryVoltage 015F              __size_ofi1_READ_PS_2_PIN 0013  
            __end_of_Decode_Scan_Code 198A                            i1_UARTchar 1C19  
                     _Right_Shift_Key 01AE                           i1_ReadUSART 18BF  
                            sprintf@c 0053                              sprintf@f 003F  
                    ___lldiv@quotient 002E                  Decode_Scan_Code@Code 0025  
                   Init_System@Parity 00E0                    _Left_Shift_Key_old 0169  
                          _TX1STAbits 019E                     CheckSum_byte@This 0025  
                      i1UARTchar@data 0020                           _PS_2_Update 0115  
                 _INIT_PS_2_INTERRUPT 191F           ??_Decode_Scan_Code_Function 0025  
                     Init_System@Baud 00E1                       Init_System@temp 00DC  
                      Init_System@buf 00A0        PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
