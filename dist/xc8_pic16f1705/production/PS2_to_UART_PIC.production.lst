

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jan 21 15:58:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011C                     	;# 
   136  018C                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019F                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  028C                     	;# 
   191  028E                     	;# 
   192  0291                     	;# 
   193  0291                     	;# 
   194  0292                     	;# 
   195  0293                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029A                     	;# 
   202  029E                     	;# 
   203  030C                     	;# 
   204  030E                     	;# 
   205  038C                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0397                     	;# 
   211  0398                     	;# 
   212  0399                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  041C                     	;# 
   217  041D                     	;# 
   218  041E                     	;# 
   219  0511                     	;# 
   220  0515                     	;# 
   221  0617                     	;# 
   222  0618                     	;# 
   223  0619                     	;# 
   224  0619                     	;# 
   225  061A                     	;# 
   226  061B                     	;# 
   227  061C                     	;# 
   228  061C                     	;# 
   229  0691                     	;# 
   230  0692                     	;# 
   231  0693                     	;# 
   232  0694                     	;# 
   233  0695                     	;# 
   234  0696                     	;# 
   235  0697                     	;# 
   236  0698                     	;# 
   237  0699                     	;# 
   238  069A                     	;# 
   239  069B                     	;# 
   240  069C                     	;# 
   241  069D                     	;# 
   242  069E                     	;# 
   243  069F                     	;# 
   244  0E0F                     	;# 
   245  0E10                     	;# 
   246  0E11                     	;# 
   247  0E12                     	;# 
   248  0E13                     	;# 
   249  0E14                     	;# 
   250  0E15                     	;# 
   251  0E17                     	;# 
   252  0E20                     	;# 
   253  0E21                     	;# 
   254  0E22                     	;# 
   255  0E24                     	;# 
   256  0E25                     	;# 
   257  0E28                     	;# 
   258  0E29                     	;# 
   259  0E2A                     	;# 
   260  0E2B                     	;# 
   261  0E90                     	;# 
   262  0E91                     	;# 
   263  0E92                     	;# 
   264  0E94                     	;# 
   265  0E95                     	;# 
   266  0EA0                     	;# 
   267  0EA1                     	;# 
   268  0EA2                     	;# 
   269  0EA3                     	;# 
   270  0EA4                     	;# 
   271  0EA5                     	;# 
   272  0F0F                     	;# 
   273  0F10                     	;# 
   274  0F11                     	;# 
   275  0F12                     	;# 
   276  0F13                     	;# 
   277  0F14                     	;# 
   278  0F15                     	;# 
   279  0F16                     	;# 
   280  0F17                     	;# 
   281  0F18                     	;# 
   282  0F19                     	;# 
   283  0F1A                     	;# 
   284  0F1B                     	;# 
   285  0F1C                     	;# 
   286  0F1D                     	;# 
   287  0F1E                     	;# 
   288  0F1F                     	;# 
   289  0F20                     	;# 
   290  0F21                     	;# 
   291  0F22                     	;# 
   292  0F23                     	;# 
   293  0F24                     	;# 
   294  0F25                     	;# 
   295  0F26                     	;# 
   296  0F27                     	;# 
   297  0F28                     	;# 
   298  0F29                     	;# 
   299  0F2A                     	;# 
   300  0F2B                     	;# 
   301  0F2C                     	;# 
   302  0F2D                     	;# 
   303  0F9E                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  010C                     	;# 
   359  010E                     	;# 
   360  0111                     	;# 
   361  0112                     	;# 
   362  0113                     	;# 
   363  0114                     	;# 
   364  0115                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  0118                     	;# 
   368  0119                     	;# 
   369  011C                     	;# 
   370  018C                     	;# 
   371  018E                     	;# 
   372  0191                     	;# 
   373  0191                     	;# 
   374  0192                     	;# 
   375  0193                     	;# 
   376  0193                     	;# 
   377  0194                     	;# 
   378  0195                     	;# 
   379  0196                     	;# 
   380  0197                     	;# 
   381  0199                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019F                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  028C                     	;# 
   425  028E                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0293                     	;# 
   431  0298                     	;# 
   432  0298                     	;# 
   433  0299                     	;# 
   434  029A                     	;# 
   435  029A                     	;# 
   436  029E                     	;# 
   437  030C                     	;# 
   438  030E                     	;# 
   439  038C                     	;# 
   440  038E                     	;# 
   441  0391                     	;# 
   442  0392                     	;# 
   443  0393                     	;# 
   444  0397                     	;# 
   445  0398                     	;# 
   446  0399                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0511                     	;# 
   454  0515                     	;# 
   455  0617                     	;# 
   456  0618                     	;# 
   457  0619                     	;# 
   458  0619                     	;# 
   459  061A                     	;# 
   460  061B                     	;# 
   461  061C                     	;# 
   462  061C                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0696                     	;# 
   469  0697                     	;# 
   470  0698                     	;# 
   471  0699                     	;# 
   472  069A                     	;# 
   473  069B                     	;# 
   474  069C                     	;# 
   475  069D                     	;# 
   476  069E                     	;# 
   477  069F                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E17                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E28                     	;# 
   492  0E29                     	;# 
   493  0E2A                     	;# 
   494  0E2B                     	;# 
   495  0E90                     	;# 
   496  0E91                     	;# 
   497  0E92                     	;# 
   498  0E94                     	;# 
   499  0E95                     	;# 
   500  0EA0                     	;# 
   501  0EA1                     	;# 
   502  0EA2                     	;# 
   503  0EA3                     	;# 
   504  0EA4                     	;# 
   505  0EA5                     	;# 
   506  0F0F                     	;# 
   507  0F10                     	;# 
   508  0F11                     	;# 
   509  0F12                     	;# 
   510  0F13                     	;# 
   511  0F14                     	;# 
   512  0F15                     	;# 
   513  0F16                     	;# 
   514  0F17                     	;# 
   515  0F18                     	;# 
   516  0F19                     	;# 
   517  0F1A                     	;# 
   518  0F1B                     	;# 
   519  0F1C                     	;# 
   520  0F1D                     	;# 
   521  0F1E                     	;# 
   522  0F1F                     	;# 
   523  0F20                     	;# 
   524  0F21                     	;# 
   525  0F22                     	;# 
   526  0F23                     	;# 
   527  0F24                     	;# 
   528  0F25                     	;# 
   529  0F26                     	;# 
   530  0F27                     	;# 
   531  0F28                     	;# 
   532  0F29                     	;# 
   533  0F2A                     	;# 
   534  0F2B                     	;# 
   535  0F2C                     	;# 
   536  0F2D                     	;# 
   537  0F9E                     	;# 
   538  0FE4                     	;# 
   539  0FE5                     	;# 
   540  0FE6                     	;# 
   541  0FE7                     	;# 
   542  0FE8                     	;# 
   543  0FE9                     	;# 
   544  0FEA                     	;# 
   545  0FEB                     	;# 
   546  0FED                     	;# 
   547  0FEE                     	;# 
   548  0FEF                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000E                     	;# 
   563  0011                     	;# 
   564  0012                     	;# 
   565  0013                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  008C                     	;# 
   576  008E                     	;# 
   577  0091                     	;# 
   578  0092                     	;# 
   579  0093                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0098                     	;# 
   584  0099                     	;# 
   585  009A                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  009F                     	;# 
   592  010C                     	;# 
   593  010E                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  011C                     	;# 
   604  018C                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  028C                     	;# 
   659  028E                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029A                     	;# 
   670  029E                     	;# 
   671  030C                     	;# 
   672  030E                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  0397                     	;# 
   679  0398                     	;# 
   680  0399                     	;# 
   681  0415                     	;# 
   682  0416                     	;# 
   683  0417                     	;# 
   684  041C                     	;# 
   685  041D                     	;# 
   686  041E                     	;# 
   687  0511                     	;# 
   688  0515                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0696                     	;# 
   703  0697                     	;# 
   704  0698                     	;# 
   705  0699                     	;# 
   706  069A                     	;# 
   707  069B                     	;# 
   708  069C                     	;# 
   709  069D                     	;# 
   710  069E                     	;# 
   711  069F                     	;# 
   712  0E0F                     	;# 
   713  0E10                     	;# 
   714  0E11                     	;# 
   715  0E12                     	;# 
   716  0E13                     	;# 
   717  0E14                     	;# 
   718  0E15                     	;# 
   719  0E17                     	;# 
   720  0E20                     	;# 
   721  0E21                     	;# 
   722  0E22                     	;# 
   723  0E24                     	;# 
   724  0E25                     	;# 
   725  0E28                     	;# 
   726  0E29                     	;# 
   727  0E2A                     	;# 
   728  0E2B                     	;# 
   729  0E90                     	;# 
   730  0E91                     	;# 
   731  0E92                     	;# 
   732  0E94                     	;# 
   733  0E95                     	;# 
   734  0EA0                     	;# 
   735  0EA1                     	;# 
   736  0EA2                     	;# 
   737  0EA3                     	;# 
   738  0EA4                     	;# 
   739  0EA5                     	;# 
   740  0F0F                     	;# 
   741  0F10                     	;# 
   742  0F11                     	;# 
   743  0F12                     	;# 
   744  0F13                     	;# 
   745  0F14                     	;# 
   746  0F15                     	;# 
   747  0F16                     	;# 
   748  0F17                     	;# 
   749  0F18                     	;# 
   750  0F19                     	;# 
   751  0F1A                     	;# 
   752  0F1B                     	;# 
   753  0F1C                     	;# 
   754  0F1D                     	;# 
   755  0F1E                     	;# 
   756  0F1F                     	;# 
   757  0F20                     	;# 
   758  0F21                     	;# 
   759  0F22                     	;# 
   760  0F23                     	;# 
   761  0F24                     	;# 
   762  0F25                     	;# 
   763  0F26                     	;# 
   764  0F27                     	;# 
   765  0F28                     	;# 
   766  0F29                     	;# 
   767  0F2A                     	;# 
   768  0F2B                     	;# 
   769  0F2C                     	;# 
   770  0F2D                     	;# 
   771  0F9E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008E                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010E                     	;# 
   828  0111                     	;# 
   829  0112                     	;# 
   830  0113                     	;# 
   831  0114                     	;# 
   832  0115                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  0118                     	;# 
   836  0119                     	;# 
   837  011C                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  028C                     	;# 
   893  028E                     	;# 
   894  0291                     	;# 
   895  0291                     	;# 
   896  0292                     	;# 
   897  0293                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  029A                     	;# 
   904  029E                     	;# 
   905  030C                     	;# 
   906  030E                     	;# 
   907  038C                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0397                     	;# 
   913  0398                     	;# 
   914  0399                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  041C                     	;# 
   919  041D                     	;# 
   920  041E                     	;# 
   921  0511                     	;# 
   922  0515                     	;# 
   923  0617                     	;# 
   924  0618                     	;# 
   925  0619                     	;# 
   926  0619                     	;# 
   927  061A                     	;# 
   928  061B                     	;# 
   929  061C                     	;# 
   930  061C                     	;# 
   931  0691                     	;# 
   932  0692                     	;# 
   933  0693                     	;# 
   934  0694                     	;# 
   935  0695                     	;# 
   936  0696                     	;# 
   937  0697                     	;# 
   938  0698                     	;# 
   939  0699                     	;# 
   940  069A                     	;# 
   941  069B                     	;# 
   942  069C                     	;# 
   943  069D                     	;# 
   944  069E                     	;# 
   945  069F                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E17                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E24                     	;# 
   958  0E25                     	;# 
   959  0E28                     	;# 
   960  0E29                     	;# 
   961  0E2A                     	;# 
   962  0E2B                     	;# 
   963  0E90                     	;# 
   964  0E91                     	;# 
   965  0E92                     	;# 
   966  0E94                     	;# 
   967  0E95                     	;# 
   968  0EA0                     	;# 
   969  0EA1                     	;# 
   970  0EA2                     	;# 
   971  0EA3                     	;# 
   972  0EA4                     	;# 
   973  0EA5                     	;# 
   974  0F0F                     	;# 
   975  0F10                     	;# 
   976  0F11                     	;# 
   977  0F12                     	;# 
   978  0F13                     	;# 
   979  0F14                     	;# 
   980  0F15                     	;# 
   981  0F16                     	;# 
   982  0F17                     	;# 
   983  0F18                     	;# 
   984  0F19                     	;# 
   985  0F1A                     	;# 
   986  0F1B                     	;# 
   987  0F1C                     	;# 
   988  0F1D                     	;# 
   989  0F1E                     	;# 
   990  0F1F                     	;# 
   991  0F20                     	;# 
   992  0F21                     	;# 
   993  0F22                     	;# 
   994  0F23                     	;# 
   995  0F24                     	;# 
   996  0F25                     	;# 
   997  0F26                     	;# 
   998  0F27                     	;# 
   999  0F28                     	;# 
  1000  0F29                     	;# 
  1001  0F2A                     	;# 
  1002  0F2B                     	;# 
  1003  0F2C                     	;# 
  1004  0F2D                     	;# 
  1005  0F9E                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000E                     	;# 
  1031  0011                     	;# 
  1032  0012                     	;# 
  1033  0013                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001B                     	;# 
  1042  001C                     	;# 
  1043  008C                     	;# 
  1044  008E                     	;# 
  1045  0091                     	;# 
  1046  0092                     	;# 
  1047  0093                     	;# 
  1048  0095                     	;# 
  1049  0096                     	;# 
  1050  0097                     	;# 
  1051  0098                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  009F                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011C                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0197                     	;# 
  1083  0199                     	;# 
  1084  0199                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019A                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019C                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019D                     	;# 
  1099  019D                     	;# 
  1100  019E                     	;# 
  1101  019E                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  028C                     	;# 
  1127  028E                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  029A                     	;# 
  1138  029E                     	;# 
  1139  030C                     	;# 
  1140  030E                     	;# 
  1141  038C                     	;# 
  1142  038E                     	;# 
  1143  0391                     	;# 
  1144  0392                     	;# 
  1145  0393                     	;# 
  1146  0397                     	;# 
  1147  0398                     	;# 
  1148  0399                     	;# 
  1149  0415                     	;# 
  1150  0416                     	;# 
  1151  0417                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  0511                     	;# 
  1156  0515                     	;# 
  1157  0617                     	;# 
  1158  0618                     	;# 
  1159  0619                     	;# 
  1160  0619                     	;# 
  1161  061A                     	;# 
  1162  061B                     	;# 
  1163  061C                     	;# 
  1164  061C                     	;# 
  1165  0691                     	;# 
  1166  0692                     	;# 
  1167  0693                     	;# 
  1168  0694                     	;# 
  1169  0695                     	;# 
  1170  0696                     	;# 
  1171  0697                     	;# 
  1172  0698                     	;# 
  1173  0699                     	;# 
  1174  069A                     	;# 
  1175  069B                     	;# 
  1176  069C                     	;# 
  1177  069D                     	;# 
  1178  069E                     	;# 
  1179  069F                     	;# 
  1180  0E0F                     	;# 
  1181  0E10                     	;# 
  1182  0E11                     	;# 
  1183  0E12                     	;# 
  1184  0E13                     	;# 
  1185  0E14                     	;# 
  1186  0E15                     	;# 
  1187  0E17                     	;# 
  1188  0E20                     	;# 
  1189  0E21                     	;# 
  1190  0E22                     	;# 
  1191  0E24                     	;# 
  1192  0E25                     	;# 
  1193  0E28                     	;# 
  1194  0E29                     	;# 
  1195  0E2A                     	;# 
  1196  0E2B                     	;# 
  1197  0E90                     	;# 
  1198  0E91                     	;# 
  1199  0E92                     	;# 
  1200  0E94                     	;# 
  1201  0E95                     	;# 
  1202  0EA0                     	;# 
  1203  0EA1                     	;# 
  1204  0EA2                     	;# 
  1205  0EA3                     	;# 
  1206  0EA4                     	;# 
  1207  0EA5                     	;# 
  1208  0F0F                     	;# 
  1209  0F10                     	;# 
  1210  0F11                     	;# 
  1211  0F12                     	;# 
  1212  0F13                     	;# 
  1213  0F14                     	;# 
  1214  0F15                     	;# 
  1215  0F16                     	;# 
  1216  0F17                     	;# 
  1217  0F18                     	;# 
  1218  0F19                     	;# 
  1219  0F1A                     	;# 
  1220  0F1B                     	;# 
  1221  0F1C                     	;# 
  1222  0F1D                     	;# 
  1223  0F1E                     	;# 
  1224  0F1F                     	;# 
  1225  0F20                     	;# 
  1226  0F21                     	;# 
  1227  0F22                     	;# 
  1228  0F23                     	;# 
  1229  0F24                     	;# 
  1230  0F25                     	;# 
  1231  0F26                     	;# 
  1232  0F27                     	;# 
  1233  0F28                     	;# 
  1234  0F29                     	;# 
  1235  0F2A                     	;# 
  1236  0F2B                     	;# 
  1237  0F2C                     	;# 
  1238  0F2D                     	;# 
  1239  0F9E                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000E                     	;# 
  1265  0011                     	;# 
  1266  0012                     	;# 
  1267  0013                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008E                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0093                     	;# 
  1282  0095                     	;# 
  1283  0096                     	;# 
  1284  0097                     	;# 
  1285  0098                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  009F                     	;# 
  1294  010C                     	;# 
  1295  010E                     	;# 
  1296  0111                     	;# 
  1297  0112                     	;# 
  1298  0113                     	;# 
  1299  0114                     	;# 
  1300  0115                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  0118                     	;# 
  1304  0119                     	;# 
  1305  011C                     	;# 
  1306  018C                     	;# 
  1307  018E                     	;# 
  1308  0191                     	;# 
  1309  0191                     	;# 
  1310  0192                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0199                     	;# 
  1318  0199                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019A                     	;# 
  1322  019A                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019D                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019E                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  019F                     	;# 
  1339  019F                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  020C                     	;# 
  1343  020E                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  028C                     	;# 
  1361  028E                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  029A                     	;# 
  1372  029E                     	;# 
  1373  030C                     	;# 
  1374  030E                     	;# 
  1375  038C                     	;# 
  1376  038E                     	;# 
  1377  0391                     	;# 
  1378  0392                     	;# 
  1379  0393                     	;# 
  1380  0397                     	;# 
  1381  0398                     	;# 
  1382  0399                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  0511                     	;# 
  1390  0515                     	;# 
  1391  0617                     	;# 
  1392  0618                     	;# 
  1393  0619                     	;# 
  1394  0619                     	;# 
  1395  061A                     	;# 
  1396  061B                     	;# 
  1397  061C                     	;# 
  1398  061C                     	;# 
  1399  0691                     	;# 
  1400  0692                     	;# 
  1401  0693                     	;# 
  1402  0694                     	;# 
  1403  0695                     	;# 
  1404  0696                     	;# 
  1405  0697                     	;# 
  1406  0698                     	;# 
  1407  0699                     	;# 
  1408  069A                     	;# 
  1409  069B                     	;# 
  1410  069C                     	;# 
  1411  069D                     	;# 
  1412  069E                     	;# 
  1413  069F                     	;# 
  1414  0E0F                     	;# 
  1415  0E10                     	;# 
  1416  0E11                     	;# 
  1417  0E12                     	;# 
  1418  0E13                     	;# 
  1419  0E14                     	;# 
  1420  0E15                     	;# 
  1421  0E17                     	;# 
  1422  0E20                     	;# 
  1423  0E21                     	;# 
  1424  0E22                     	;# 
  1425  0E24                     	;# 
  1426  0E25                     	;# 
  1427  0E28                     	;# 
  1428  0E29                     	;# 
  1429  0E2A                     	;# 
  1430  0E2B                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0EA0                     	;# 
  1437  0EA1                     	;# 
  1438  0EA2                     	;# 
  1439  0EA3                     	;# 
  1440  0EA4                     	;# 
  1441  0EA5                     	;# 
  1442  0F0F                     	;# 
  1443  0F10                     	;# 
  1444  0F11                     	;# 
  1445  0F12                     	;# 
  1446  0F13                     	;# 
  1447  0F14                     	;# 
  1448  0F15                     	;# 
  1449  0F16                     	;# 
  1450  0F17                     	;# 
  1451  0F18                     	;# 
  1452  0F19                     	;# 
  1453  0F1A                     	;# 
  1454  0F1B                     	;# 
  1455  0F1C                     	;# 
  1456  0F1D                     	;# 
  1457  0F1E                     	;# 
  1458  0F1F                     	;# 
  1459  0F20                     	;# 
  1460  0F21                     	;# 
  1461  0F22                     	;# 
  1462  0F23                     	;# 
  1463  0F24                     	;# 
  1464  0F25                     	;# 
  1465  0F26                     	;# 
  1466  0F27                     	;# 
  1467  0F28                     	;# 
  1468  0F29                     	;# 
  1469  0F2A                     	;# 
  1470  0F2B                     	;# 
  1471  0F2C                     	;# 
  1472  0F2D                     	;# 
  1473  0F9E                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0098                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011C                     	;# 
  1540  018C                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  028C                     	;# 
  1595  028E                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0293                     	;# 
  1601  0298                     	;# 
  1602  0298                     	;# 
  1603  0299                     	;# 
  1604  029A                     	;# 
  1605  029A                     	;# 
  1606  029E                     	;# 
  1607  030C                     	;# 
  1608  030E                     	;# 
  1609  038C                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  0511                     	;# 
  1624  0515                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  069A                     	;# 
  1643  069B                     	;# 
  1644  069C                     	;# 
  1645  069D                     	;# 
  1646  069E                     	;# 
  1647  069F                     	;# 
  1648  0E0F                     	;# 
  1649  0E10                     	;# 
  1650  0E11                     	;# 
  1651  0E12                     	;# 
  1652  0E13                     	;# 
  1653  0E14                     	;# 
  1654  0E15                     	;# 
  1655  0E17                     	;# 
  1656  0E20                     	;# 
  1657  0E21                     	;# 
  1658  0E22                     	;# 
  1659  0E24                     	;# 
  1660  0E25                     	;# 
  1661  0E28                     	;# 
  1662  0E29                     	;# 
  1663  0E2A                     	;# 
  1664  0E2B                     	;# 
  1665  0E90                     	;# 
  1666  0E91                     	;# 
  1667  0E92                     	;# 
  1668  0E94                     	;# 
  1669  0E95                     	;# 
  1670  0EA0                     	;# 
  1671  0EA1                     	;# 
  1672  0EA2                     	;# 
  1673  0EA3                     	;# 
  1674  0EA4                     	;# 
  1675  0EA5                     	;# 
  1676  0F0F                     	;# 
  1677  0F10                     	;# 
  1678  0F11                     	;# 
  1679  0F12                     	;# 
  1680  0F13                     	;# 
  1681  0F14                     	;# 
  1682  0F15                     	;# 
  1683  0F16                     	;# 
  1684  0F17                     	;# 
  1685  0F18                     	;# 
  1686  0F19                     	;# 
  1687  0F1A                     	;# 
  1688  0F1B                     	;# 
  1689  0F1C                     	;# 
  1690  0F1D                     	;# 
  1691  0F1E                     	;# 
  1692  0F1F                     	;# 
  1693  0F20                     	;# 
  1694  0F21                     	;# 
  1695  0F22                     	;# 
  1696  0F23                     	;# 
  1697  0F24                     	;# 
  1698  0F25                     	;# 
  1699  0F26                     	;# 
  1700  0F27                     	;# 
  1701  0F28                     	;# 
  1702  0F29                     	;# 
  1703  0F2A                     	;# 
  1704  0F2B                     	;# 
  1705  0F2C                     	;# 
  1706  0F2D                     	;# 
  1707  0F9E                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000E                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0013                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008E                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0093                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0098                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  009F                     	;# 
  1762  010C                     	;# 
  1763  010E                     	;# 
  1764  0111                     	;# 
  1765  0112                     	;# 
  1766  0113                     	;# 
  1767  0114                     	;# 
  1768  0115                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  0118                     	;# 
  1772  0119                     	;# 
  1773  011C                     	;# 
  1774  018C                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  0199                     	;# 
  1787  0199                     	;# 
  1788  019A                     	;# 
  1789  019A                     	;# 
  1790  019A                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019D                     	;# 
  1800  019D                     	;# 
  1801  019D                     	;# 
  1802  019E                     	;# 
  1803  019E                     	;# 
  1804  019E                     	;# 
  1805  019F                     	;# 
  1806  019F                     	;# 
  1807  019F                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  020C                     	;# 
  1811  020E                     	;# 
  1812  0211                     	;# 
  1813  0211                     	;# 
  1814  0212                     	;# 
  1815  0212                     	;# 
  1816  0213                     	;# 
  1817  0213                     	;# 
  1818  0214                     	;# 
  1819  0214                     	;# 
  1820  0215                     	;# 
  1821  0215                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0216                     	;# 
  1825  0216                     	;# 
  1826  0217                     	;# 
  1827  0217                     	;# 
  1828  028C                     	;# 
  1829  028E                     	;# 
  1830  0291                     	;# 
  1831  0291                     	;# 
  1832  0292                     	;# 
  1833  0293                     	;# 
  1834  0293                     	;# 
  1835  0298                     	;# 
  1836  0298                     	;# 
  1837  0299                     	;# 
  1838  029A                     	;# 
  1839  029A                     	;# 
  1840  029E                     	;# 
  1841  030C                     	;# 
  1842  030E                     	;# 
  1843  038C                     	;# 
  1844  038E                     	;# 
  1845  0391                     	;# 
  1846  0392                     	;# 
  1847  0393                     	;# 
  1848  0397                     	;# 
  1849  0398                     	;# 
  1850  0399                     	;# 
  1851  0415                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  041C                     	;# 
  1855  041D                     	;# 
  1856  041E                     	;# 
  1857  0511                     	;# 
  1858  0515                     	;# 
  1859  0617                     	;# 
  1860  0618                     	;# 
  1861  0619                     	;# 
  1862  0619                     	;# 
  1863  061A                     	;# 
  1864  061B                     	;# 
  1865  061C                     	;# 
  1866  061C                     	;# 
  1867  0691                     	;# 
  1868  0692                     	;# 
  1869  0693                     	;# 
  1870  0694                     	;# 
  1871  0695                     	;# 
  1872  0696                     	;# 
  1873  0697                     	;# 
  1874  0698                     	;# 
  1875  0699                     	;# 
  1876  069A                     	;# 
  1877  069B                     	;# 
  1878  069C                     	;# 
  1879  069D                     	;# 
  1880  069E                     	;# 
  1881  069F                     	;# 
  1882  0E0F                     	;# 
  1883  0E10                     	;# 
  1884  0E11                     	;# 
  1885  0E12                     	;# 
  1886  0E13                     	;# 
  1887  0E14                     	;# 
  1888  0E15                     	;# 
  1889  0E17                     	;# 
  1890  0E20                     	;# 
  1891  0E21                     	;# 
  1892  0E22                     	;# 
  1893  0E24                     	;# 
  1894  0E25                     	;# 
  1895  0E28                     	;# 
  1896  0E29                     	;# 
  1897  0E2A                     	;# 
  1898  0E2B                     	;# 
  1899  0E90                     	;# 
  1900  0E91                     	;# 
  1901  0E92                     	;# 
  1902  0E94                     	;# 
  1903  0E95                     	;# 
  1904  0EA0                     	;# 
  1905  0EA1                     	;# 
  1906  0EA2                     	;# 
  1907  0EA3                     	;# 
  1908  0EA4                     	;# 
  1909  0EA5                     	;# 
  1910  0F0F                     	;# 
  1911  0F10                     	;# 
  1912  0F11                     	;# 
  1913  0F12                     	;# 
  1914  0F13                     	;# 
  1915  0F14                     	;# 
  1916  0F15                     	;# 
  1917  0F16                     	;# 
  1918  0F17                     	;# 
  1919  0F18                     	;# 
  1920  0F19                     	;# 
  1921  0F1A                     	;# 
  1922  0F1B                     	;# 
  1923  0F1C                     	;# 
  1924  0F1D                     	;# 
  1925  0F1E                     	;# 
  1926  0F1F                     	;# 
  1927  0F20                     	;# 
  1928  0F21                     	;# 
  1929  0F22                     	;# 
  1930  0F23                     	;# 
  1931  0F24                     	;# 
  1932  0F25                     	;# 
  1933  0F26                     	;# 
  1934  0F27                     	;# 
  1935  0F28                     	;# 
  1936  0F29                     	;# 
  1937  0F2A                     	;# 
  1938  0F2B                     	;# 
  1939  0F2C                     	;# 
  1940  0F2D                     	;# 
  1941  0F9E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000E                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  008C                     	;# 
  1980  008E                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0093                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0098                     	;# 
  1988  0099                     	;# 
  1989  009A                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  009F                     	;# 
  1996  010C                     	;# 
  1997  010E                     	;# 
  1998  0111                     	;# 
  1999  0112                     	;# 
  2000  0113                     	;# 
  2001  0114                     	;# 
  2002  0115                     	;# 
  2003  0116                     	;# 
  2004  0117                     	;# 
  2005  0118                     	;# 
  2006  0119                     	;# 
  2007  011C                     	;# 
  2008  018C                     	;# 
  2009  018E                     	;# 
  2010  0191                     	;# 
  2011  0191                     	;# 
  2012  0192                     	;# 
  2013  0193                     	;# 
  2014  0193                     	;# 
  2015  0194                     	;# 
  2016  0195                     	;# 
  2017  0196                     	;# 
  2018  0197                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  020C                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028E                     	;# 
  2064  0291                     	;# 
  2065  0291                     	;# 
  2066  0292                     	;# 
  2067  0293                     	;# 
  2068  0293                     	;# 
  2069  0298                     	;# 
  2070  0298                     	;# 
  2071  0299                     	;# 
  2072  029A                     	;# 
  2073  029A                     	;# 
  2074  029E                     	;# 
  2075  030C                     	;# 
  2076  030E                     	;# 
  2077  038C                     	;# 
  2078  038E                     	;# 
  2079  0391                     	;# 
  2080  0392                     	;# 
  2081  0393                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  041C                     	;# 
  2089  041D                     	;# 
  2090  041E                     	;# 
  2091  0511                     	;# 
  2092  0515                     	;# 
  2093  0617                     	;# 
  2094  0618                     	;# 
  2095  0619                     	;# 
  2096  0619                     	;# 
  2097  061A                     	;# 
  2098  061B                     	;# 
  2099  061C                     	;# 
  2100  061C                     	;# 
  2101  0691                     	;# 
  2102  0692                     	;# 
  2103  0693                     	;# 
  2104  0694                     	;# 
  2105  0695                     	;# 
  2106  0696                     	;# 
  2107  0697                     	;# 
  2108  0698                     	;# 
  2109  0699                     	;# 
  2110  069A                     	;# 
  2111  069B                     	;# 
  2112  069C                     	;# 
  2113  069D                     	;# 
  2114  069E                     	;# 
  2115  069F                     	;# 
  2116  0E0F                     	;# 
  2117  0E10                     	;# 
  2118  0E11                     	;# 
  2119  0E12                     	;# 
  2120  0E13                     	;# 
  2121  0E14                     	;# 
  2122  0E15                     	;# 
  2123  0E17                     	;# 
  2124  0E20                     	;# 
  2125  0E21                     	;# 
  2126  0E22                     	;# 
  2127  0E24                     	;# 
  2128  0E25                     	;# 
  2129  0E28                     	;# 
  2130  0E29                     	;# 
  2131  0E2A                     	;# 
  2132  0E2B                     	;# 
  2133  0E90                     	;# 
  2134  0E91                     	;# 
  2135  0E92                     	;# 
  2136  0E94                     	;# 
  2137  0E95                     	;# 
  2138  0EA0                     	;# 
  2139  0EA1                     	;# 
  2140  0EA2                     	;# 
  2141  0EA3                     	;# 
  2142  0EA4                     	;# 
  2143  0EA5                     	;# 
  2144  0F0F                     	;# 
  2145  0F10                     	;# 
  2146  0F11                     	;# 
  2147  0F12                     	;# 
  2148  0F13                     	;# 
  2149  0F14                     	;# 
  2150  0F15                     	;# 
  2151  0F16                     	;# 
  2152  0F17                     	;# 
  2153  0F18                     	;# 
  2154  0F19                     	;# 
  2155  0F1A                     	;# 
  2156  0F1B                     	;# 
  2157  0F1C                     	;# 
  2158  0F1D                     	;# 
  2159  0F1E                     	;# 
  2160  0F1F                     	;# 
  2161  0F20                     	;# 
  2162  0F21                     	;# 
  2163  0F22                     	;# 
  2164  0F23                     	;# 
  2165  0F24                     	;# 
  2166  0F25                     	;# 
  2167  0F26                     	;# 
  2168  0F27                     	;# 
  2169  0F28                     	;# 
  2170  0F29                     	;# 
  2171  0F2A                     	;# 
  2172  0F2B                     	;# 
  2173  0F2C                     	;# 
  2174  0F2D                     	;# 
  2175  0F9E                     	;# 
  2176  0FE4                     	;# 
  2177  0FE5                     	;# 
  2178  0FE6                     	;# 
  2179  0FE7                     	;# 
  2180  0FE8                     	;# 
  2181  0FE9                     	;# 
  2182  0FEA                     	;# 
  2183  0FEB                     	;# 
  2184  0FED                     	;# 
  2185  0FEE                     	;# 
  2186  0FEF                     	;# 
  2187  0000                     	;# 
  2188  0001                     	;# 
  2189  0002                     	;# 
  2190  0003                     	;# 
  2191  0004                     	;# 
  2192  0005                     	;# 
  2193  0006                     	;# 
  2194  0007                     	;# 
  2195  0008                     	;# 
  2196  0009                     	;# 
  2197  000A                     	;# 
  2198  000B                     	;# 
  2199  000C                     	;# 
  2200  000E                     	;# 
  2201  0011                     	;# 
  2202  0012                     	;# 
  2203  0013                     	;# 
  2204  0015                     	;# 
  2205  0016                     	;# 
  2206  0016                     	;# 
  2207  0017                     	;# 
  2208  0018                     	;# 
  2209  0019                     	;# 
  2210  001A                     	;# 
  2211  001B                     	;# 
  2212  001C                     	;# 
  2213  008C                     	;# 
  2214  008E                     	;# 
  2215  0091                     	;# 
  2216  0092                     	;# 
  2217  0093                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009B                     	;# 
  2226  009C                     	;# 
  2227  009D                     	;# 
  2228  009E                     	;# 
  2229  009F                     	;# 
  2230  010C                     	;# 
  2231  010E                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0115                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0118                     	;# 
  2240  0119                     	;# 
  2241  011C                     	;# 
  2242  018C                     	;# 
  2243  018E                     	;# 
  2244  0191                     	;# 
  2245  0191                     	;# 
  2246  0192                     	;# 
  2247  0193                     	;# 
  2248  0193                     	;# 
  2249  0194                     	;# 
  2250  0195                     	;# 
  2251  0196                     	;# 
  2252  0197                     	;# 
  2253  0199                     	;# 
  2254  0199                     	;# 
  2255  0199                     	;# 
  2256  019A                     	;# 
  2257  019A                     	;# 
  2258  019A                     	;# 
  2259  019B                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019C                     	;# 
  2265  019C                     	;# 
  2266  019C                     	;# 
  2267  019D                     	;# 
  2268  019D                     	;# 
  2269  019D                     	;# 
  2270  019E                     	;# 
  2271  019E                     	;# 
  2272  019E                     	;# 
  2273  019F                     	;# 
  2274  019F                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  020C                     	;# 
  2279  020E                     	;# 
  2280  0211                     	;# 
  2281  0211                     	;# 
  2282  0212                     	;# 
  2283  0212                     	;# 
  2284  0213                     	;# 
  2285  0213                     	;# 
  2286  0214                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  028C                     	;# 
  2297  028E                     	;# 
  2298  0291                     	;# 
  2299  0291                     	;# 
  2300  0292                     	;# 
  2301  0293                     	;# 
  2302  0293                     	;# 
  2303  0298                     	;# 
  2304  0298                     	;# 
  2305  0299                     	;# 
  2306  029A                     	;# 
  2307  029A                     	;# 
  2308  029E                     	;# 
  2309  030C                     	;# 
  2310  030E                     	;# 
  2311  038C                     	;# 
  2312  038E                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  0393                     	;# 
  2316  0397                     	;# 
  2317  0398                     	;# 
  2318  0399                     	;# 
  2319  0415                     	;# 
  2320  0416                     	;# 
  2321  0417                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  0511                     	;# 
  2326  0515                     	;# 
  2327  0617                     	;# 
  2328  0618                     	;# 
  2329  0619                     	;# 
  2330  0619                     	;# 
  2331  061A                     	;# 
  2332  061B                     	;# 
  2333  061C                     	;# 
  2334  061C                     	;# 
  2335  0691                     	;# 
  2336  0692                     	;# 
  2337  0693                     	;# 
  2338  0694                     	;# 
  2339  0695                     	;# 
  2340  0696                     	;# 
  2341  0697                     	;# 
  2342  0698                     	;# 
  2343  0699                     	;# 
  2344  069A                     	;# 
  2345  069B                     	;# 
  2346  069C                     	;# 
  2347  069D                     	;# 
  2348  069E                     	;# 
  2349  069F                     	;# 
  2350  0E0F                     	;# 
  2351  0E10                     	;# 
  2352  0E11                     	;# 
  2353  0E12                     	;# 
  2354  0E13                     	;# 
  2355  0E14                     	;# 
  2356  0E15                     	;# 
  2357  0E17                     	;# 
  2358  0E20                     	;# 
  2359  0E21                     	;# 
  2360  0E22                     	;# 
  2361  0E24                     	;# 
  2362  0E25                     	;# 
  2363  0E28                     	;# 
  2364  0E29                     	;# 
  2365  0E2A                     	;# 
  2366  0E2B                     	;# 
  2367  0E90                     	;# 
  2368  0E91                     	;# 
  2369  0E92                     	;# 
  2370  0E94                     	;# 
  2371  0E95                     	;# 
  2372  0EA0                     	;# 
  2373  0EA1                     	;# 
  2374  0EA2                     	;# 
  2375  0EA3                     	;# 
  2376  0EA4                     	;# 
  2377  0EA5                     	;# 
  2378  0F0F                     	;# 
  2379  0F10                     	;# 
  2380  0F11                     	;# 
  2381  0F12                     	;# 
  2382  0F13                     	;# 
  2383  0F14                     	;# 
  2384  0F15                     	;# 
  2385  0F16                     	;# 
  2386  0F17                     	;# 
  2387  0F18                     	;# 
  2388  0F19                     	;# 
  2389  0F1A                     	;# 
  2390  0F1B                     	;# 
  2391  0F1C                     	;# 
  2392  0F1D                     	;# 
  2393  0F1E                     	;# 
  2394  0F1F                     	;# 
  2395  0F20                     	;# 
  2396  0F21                     	;# 
  2397  0F22                     	;# 
  2398  0F23                     	;# 
  2399  0F24                     	;# 
  2400  0F25                     	;# 
  2401  0F26                     	;# 
  2402  0F27                     	;# 
  2403  0F28                     	;# 
  2404  0F29                     	;# 
  2405  0F2A                     	;# 
  2406  0F2B                     	;# 
  2407  0F2C                     	;# 
  2408  0F2D                     	;# 
  2409  0F9E                     	;# 
  2410  0FE4                     	;# 
  2411  0FE5                     	;# 
  2412  0FE6                     	;# 
  2413  0FE7                     	;# 
  2414  0FE8                     	;# 
  2415  0FE9                     	;# 
  2416  0FEA                     	;# 
  2417  0FEB                     	;# 
  2418  0FED                     	;# 
  2419  0FEE                     	;# 
  2420  0FEF                     	;# 
  2421  0000                     	;# 
  2422  0001                     	;# 
  2423  0002                     	;# 
  2424  0003                     	;# 
  2425  0004                     	;# 
  2426  0005                     	;# 
  2427  0006                     	;# 
  2428  0007                     	;# 
  2429  0008                     	;# 
  2430  0009                     	;# 
  2431  000A                     	;# 
  2432  000B                     	;# 
  2433  000C                     	;# 
  2434  000E                     	;# 
  2435  0011                     	;# 
  2436  0012                     	;# 
  2437  0013                     	;# 
  2438  0015                     	;# 
  2439  0016                     	;# 
  2440  0016                     	;# 
  2441  0017                     	;# 
  2442  0018                     	;# 
  2443  0019                     	;# 
  2444  001A                     	;# 
  2445  001B                     	;# 
  2446  001C                     	;# 
  2447  008C                     	;# 
  2448  008E                     	;# 
  2449  0091                     	;# 
  2450  0092                     	;# 
  2451  0093                     	;# 
  2452  0095                     	;# 
  2453  0096                     	;# 
  2454  0097                     	;# 
  2455  0098                     	;# 
  2456  0099                     	;# 
  2457  009A                     	;# 
  2458  009B                     	;# 
  2459  009B                     	;# 
  2460  009C                     	;# 
  2461  009D                     	;# 
  2462  009E                     	;# 
  2463  009F                     	;# 
  2464  010C                     	;# 
  2465  010E                     	;# 
  2466  0111                     	;# 
  2467  0112                     	;# 
  2468  0113                     	;# 
  2469  0114                     	;# 
  2470  0115                     	;# 
  2471  0116                     	;# 
  2472  0117                     	;# 
  2473  0118                     	;# 
  2474  0119                     	;# 
  2475  011C                     	;# 
  2476  018C                     	;# 
  2477  018E                     	;# 
  2478  0191                     	;# 
  2479  0191                     	;# 
  2480  0192                     	;# 
  2481  0193                     	;# 
  2482  0193                     	;# 
  2483  0194                     	;# 
  2484  0195                     	;# 
  2485  0196                     	;# 
  2486  0197                     	;# 
  2487  0199                     	;# 
  2488  0199                     	;# 
  2489  0199                     	;# 
  2490  019A                     	;# 
  2491  019A                     	;# 
  2492  019A                     	;# 
  2493  019B                     	;# 
  2494  019B                     	;# 
  2495  019B                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019C                     	;# 
  2499  019C                     	;# 
  2500  019C                     	;# 
  2501  019D                     	;# 
  2502  019D                     	;# 
  2503  019D                     	;# 
  2504  019E                     	;# 
  2505  019E                     	;# 
  2506  019E                     	;# 
  2507  019F                     	;# 
  2508  019F                     	;# 
  2509  019F                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  020C                     	;# 
  2513  020E                     	;# 
  2514  0211                     	;# 
  2515  0211                     	;# 
  2516  0212                     	;# 
  2517  0212                     	;# 
  2518  0213                     	;# 
  2519  0213                     	;# 
  2520  0214                     	;# 
  2521  0214                     	;# 
  2522  0215                     	;# 
  2523  0215                     	;# 
  2524  0215                     	;# 
  2525  0215                     	;# 
  2526  0216                     	;# 
  2527  0216                     	;# 
  2528  0217                     	;# 
  2529  0217                     	;# 
  2530  028C                     	;# 
  2531  028E                     	;# 
  2532  0291                     	;# 
  2533  0291                     	;# 
  2534  0292                     	;# 
  2535  0293                     	;# 
  2536  0293                     	;# 
  2537  0298                     	;# 
  2538  0298                     	;# 
  2539  0299                     	;# 
  2540  029A                     	;# 
  2541  029A                     	;# 
  2542  029E                     	;# 
  2543  030C                     	;# 
  2544  030E                     	;# 
  2545  038C                     	;# 
  2546  038E                     	;# 
  2547  0391                     	;# 
  2548  0392                     	;# 
  2549  0393                     	;# 
  2550  0397                     	;# 
  2551  0398                     	;# 
  2552  0399                     	;# 
  2553  0415                     	;# 
  2554  0416                     	;# 
  2555  0417                     	;# 
  2556  041C                     	;# 
  2557  041D                     	;# 
  2558  041E                     	;# 
  2559  0511                     	;# 
  2560  0515                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  0691                     	;# 
  2570  0692                     	;# 
  2571  0693                     	;# 
  2572  0694                     	;# 
  2573  0695                     	;# 
  2574  0696                     	;# 
  2575  0697                     	;# 
  2576  0698                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  069B                     	;# 
  2580  069C                     	;# 
  2581  069D                     	;# 
  2582  069E                     	;# 
  2583  069F                     	;# 
  2584  0E0F                     	;# 
  2585  0E10                     	;# 
  2586  0E11                     	;# 
  2587  0E12                     	;# 
  2588  0E13                     	;# 
  2589  0E14                     	;# 
  2590  0E15                     	;# 
  2591  0E17                     	;# 
  2592  0E20                     	;# 
  2593  0E21                     	;# 
  2594  0E22                     	;# 
  2595  0E24                     	;# 
  2596  0E25                     	;# 
  2597  0E28                     	;# 
  2598  0E29                     	;# 
  2599  0E2A                     	;# 
  2600  0E2B                     	;# 
  2601  0E90                     	;# 
  2602  0E91                     	;# 
  2603  0E92                     	;# 
  2604  0E94                     	;# 
  2605  0E95                     	;# 
  2606  0EA0                     	;# 
  2607  0EA1                     	;# 
  2608  0EA2                     	;# 
  2609  0EA3                     	;# 
  2610  0EA4                     	;# 
  2611  0EA5                     	;# 
  2612  0F0F                     	;# 
  2613  0F10                     	;# 
  2614  0F11                     	;# 
  2615  0F12                     	;# 
  2616  0F13                     	;# 
  2617  0F14                     	;# 
  2618  0F15                     	;# 
  2619  0F16                     	;# 
  2620  0F17                     	;# 
  2621  0F18                     	;# 
  2622  0F19                     	;# 
  2623  0F1A                     	;# 
  2624  0F1B                     	;# 
  2625  0F1C                     	;# 
  2626  0F1D                     	;# 
  2627  0F1E                     	;# 
  2628  0F1F                     	;# 
  2629  0F20                     	;# 
  2630  0F21                     	;# 
  2631  0F22                     	;# 
  2632  0F23                     	;# 
  2633  0F24                     	;# 
  2634  0F25                     	;# 
  2635  0F26                     	;# 
  2636  0F27                     	;# 
  2637  0F28                     	;# 
  2638  0F29                     	;# 
  2639  0F2A                     	;# 
  2640  0F2B                     	;# 
  2641  0F2C                     	;# 
  2642  0F2D                     	;# 
  2643  0F9E                     	;# 
  2644  0FE4                     	;# 
  2645  0FE5                     	;# 
  2646  0FE6                     	;# 
  2647  0FE7                     	;# 
  2648  0FE8                     	;# 
  2649  0FE9                     	;# 
  2650  0FEA                     	;# 
  2651  0FEB                     	;# 
  2652  0FED                     	;# 
  2653  0FEE                     	;# 
  2654  0FEF                     	;# 
  2655                           
  2656                           	psect	idataBANK2
  2657  0002                     __pidataBANK2:	
  2658                           
  2659                           ;initializer for _Read_Timer
  2660  0002  3414               	retlw	20
  2661  0003  3400               	retlw	0
  2662                           
  2663                           	psect	idataBANK4
  2664  1908                     __pidataBANK4:	
  2665                           
  2666                           ;initializer for _BAUD
  2667  1908  3480               	retlw	128
  2668  1909  3425               	retlw	37
  2669  190A  3400               	retlw	0
  2670  190B  3400               	retlw	0
  2671                           
  2672                           ;initializer for _MEM
  2673  190C  3400               	retlw	0
  2674  190D  3400               	retlw	0
  2675  190E  3480               	retlw	128
  2676  190F  3425               	retlw	37
  2677                           
  2678                           ;initializer for _Version
  2679  1910  3431               	retlw	49
  2680  1911  342E               	retlw	46
  2681  1912  3432               	retlw	50
  2682  1913  3400               	retlw	0
  2683                           
  2684                           	psect	stringtext
  2685  0800                     __pstringtext:	
  2686  0800                     _ScanCodeFunctionNoE0:	
  2687  0800  3400               	retlw	0
  2688  0801  3411               	retlw	17
  2689  0802  3400               	retlw	0
  2690  0803  340C               	retlw	12
  2691  0804  340A               	retlw	10
  2692  0805  3406               	retlw	6
  2693  0806  3407               	retlw	7
  2694  0807  3414               	retlw	20
  2695  0808  3400               	retlw	0
  2696  0809  3412               	retlw	18
  2697  080A  3410               	retlw	16
  2698  080B  340E               	retlw	14
  2699  080C  340B               	retlw	11
  2700  080D  3400               	retlw	0
  2701  080E  3400               	retlw	0
  2702  080F  3400               	retlw	0
  2703  0810  3400               	retlw	0
  2704  0811  341C               	retlw	28
  2705  0812  3400               	retlw	0
  2706  0813  3400               	retlw	0
  2707  0814  341A               	retlw	26
  2708  0815  3400               	retlw	0
  2709  0816  3400               	retlw	0
  2710  0817  3400               	retlw	0
  2711  0818  3400               	retlw	0
  2712  0819  3400               	retlw	0
  2713  081A  3400               	retlw	0
  2714  081B  3400               	retlw	0
  2715  081C  3400               	retlw	0
  2716  081D  3400               	retlw	0
  2717  081E  3400               	retlw	0
  2718  081F  3400               	retlw	0
  2719  0820  3400               	retlw	0
  2720  0821  3400               	retlw	0
  2721  0822  3400               	retlw	0
  2722  0823  3400               	retlw	0
  2723  0824  3400               	retlw	0
  2724  0825  3400               	retlw	0
  2725  0826  3400               	retlw	0
  2726  0827  3400               	retlw	0
  2727  0828  3400               	retlw	0
  2728  0829  3400               	retlw	0
  2729  082A  3400               	retlw	0
  2730  082B  3400               	retlw	0
  2731  082C  3400               	retlw	0
  2732  082D  3400               	retlw	0
  2733  082E  3400               	retlw	0
  2734  082F  3400               	retlw	0
  2735  0830  3400               	retlw	0
  2736  0831  3400               	retlw	0
  2737  0832  3400               	retlw	0
  2738  0833  3400               	retlw	0
  2739  0834  3400               	retlw	0
  2740  0835  3400               	retlw	0
  2741  0836  3400               	retlw	0
  2742  0837  3400               	retlw	0
  2743  0838  3400               	retlw	0
  2744  0839  3400               	retlw	0
  2745  083A  3400               	retlw	0
  2746  083B  3400               	retlw	0
  2747  083C  3400               	retlw	0
  2748  083D  3400               	retlw	0
  2749  083E  3400               	retlw	0
  2750  083F  3400               	retlw	0
  2751  0840  3400               	retlw	0
  2752  0841  3400               	retlw	0
  2753  0842  3400               	retlw	0
  2754  0843  3400               	retlw	0
  2755  0844  3400               	retlw	0
  2756  0845  3400               	retlw	0
  2757  0846  3400               	retlw	0
  2758  0847  3400               	retlw	0
  2759  0848  3400               	retlw	0
  2760  0849  3400               	retlw	0
  2761  084A  3400               	retlw	0
  2762  084B  3400               	retlw	0
  2763  084C  3400               	retlw	0
  2764  084D  3400               	retlw	0
  2765  084E  3400               	retlw	0
  2766  084F  3400               	retlw	0
  2767  0850  3400               	retlw	0
  2768  0851  3400               	retlw	0
  2769  0852  3400               	retlw	0
  2770  0853  3400               	retlw	0
  2771  0854  3400               	retlw	0
  2772  0855  3400               	retlw	0
  2773  0856  3400               	retlw	0
  2774  0857  3400               	retlw	0
  2775  0858  3400               	retlw	0
  2776  0859  3400               	retlw	0
  2777  085A  3400               	retlw	0
  2778  085B  3400               	retlw	0
  2779  085C  3400               	retlw	0
  2780  085D  3400               	retlw	0
  2781  085E  3400               	retlw	0
  2782  085F  3400               	retlw	0
  2783  0860  3400               	retlw	0
  2784  0861  3400               	retlw	0
  2785  0862  3400               	retlw	0
  2786  0863  3400               	retlw	0
  2787  0864  3400               	retlw	0
  2788  0865  3400               	retlw	0
  2789  0866  3400               	retlw	0
  2790  0867  3400               	retlw	0
  2791  0868  3400               	retlw	0
  2792  0869  3400               	retlw	0
  2793  086A  3400               	retlw	0
  2794  086B  3400               	retlw	0
  2795  086C  3400               	retlw	0
  2796  086D  3400               	retlw	0
  2797  086E  3400               	retlw	0
  2798  086F  3400               	retlw	0
  2799  0870  3400               	retlw	0
  2800  0871  3400               	retlw	0
  2801  0872  3400               	retlw	0
  2802  0873  3400               	retlw	0
  2803  0874  3400               	retlw	0
  2804  0875  3400               	retlw	0
  2805  0876  3400               	retlw	0
  2806  0877  3400               	retlw	0
  2807  0878  3413               	retlw	19
  2808  0879  3400               	retlw	0
  2809  087A  3400               	retlw	0
  2810  087B  3400               	retlw	0
  2811  087C  3400               	retlw	0
  2812  087D  3400               	retlw	0
  2813  087E  3400               	retlw	0
  2814  087F  3400               	retlw	0
  2815  0880  3400               	retlw	0
  2816  0881  3400               	retlw	0
  2817  0882  3400               	retlw	0
  2818  0883  340F               	retlw	15
  2819  0884                     __end_of_ScanCodeFunctionNoE0:	
  2820  0884                     _ScanCode:	
  2821  0884  3409               	retlw	9
  2822  0885  3460               	retlw	96
  2823  0886  3400               	retlw	0
  2824  0887  3400               	retlw	0
  2825  0888  3400               	retlw	0
  2826  0889  3400               	retlw	0
  2827  088A  3400               	retlw	0
  2828  088B  3400               	retlw	0
  2829  088C  3471               	retlw	113
  2830  088D  3431               	retlw	49
  2831  088E  3400               	retlw	0
  2832  088F  3400               	retlw	0
  2833  0890  3400               	retlw	0
  2834  0891  347A               	retlw	122
  2835  0892  3473               	retlw	115
  2836  0893  3461               	retlw	97
  2837  0894  3477               	retlw	119
  2838  0895  3432               	retlw	50
  2839  0896  3400               	retlw	0
  2840  0897  3400               	retlw	0
  2841  0898  3463               	retlw	99
  2842  0899  3478               	retlw	120
  2843  089A  3464               	retlw	100
  2844  089B  3465               	retlw	101
  2845  089C  3434               	retlw	52
  2846  089D  3433               	retlw	51
  2847  089E  3400               	retlw	0
  2848  089F  3400               	retlw	0
  2849  08A0  3420               	retlw	32
  2850  08A1  3476               	retlw	118
  2851  08A2  3466               	retlw	102
  2852  08A3  3474               	retlw	116
  2853  08A4  3472               	retlw	114
  2854  08A5  3435               	retlw	53
  2855  08A6  3400               	retlw	0
  2856  08A7  3400               	retlw	0
  2857  08A8  346E               	retlw	110
  2858  08A9  3462               	retlw	98
  2859  08AA  3468               	retlw	104
  2860  08AB  3467               	retlw	103
  2861  08AC  3479               	retlw	121
  2862  08AD  3436               	retlw	54
  2863  08AE  3400               	retlw	0
  2864  08AF  3400               	retlw	0
  2865  08B0  3400               	retlw	0
  2866  08B1  346D               	retlw	109
  2867  08B2  346A               	retlw	106
  2868  08B3  3475               	retlw	117
  2869  08B4  3437               	retlw	55
  2870  08B5  3438               	retlw	56
  2871  08B6  3400               	retlw	0
  2872  08B7  3400               	retlw	0
  2873  08B8  342C               	retlw	44
  2874  08B9  346B               	retlw	107
  2875  08BA  3469               	retlw	105
  2876  08BB  346F               	retlw	111
  2877  08BC  3430               	retlw	48
  2878  08BD  3439               	retlw	57
  2879  08BE  3400               	retlw	0
  2880  08BF  3400               	retlw	0
  2881  08C0  342E               	retlw	46
  2882  08C1  342F               	retlw	47
  2883  08C2  346C               	retlw	108
  2884  08C3  343B               	retlw	59
  2885  08C4  3470               	retlw	112
  2886  08C5  342D               	retlw	45
  2887  08C6  3400               	retlw	0
  2888  08C7  3400               	retlw	0
  2889  08C8  3400               	retlw	0
  2890  08C9  3427               	retlw	39
  2891  08CA  3400               	retlw	0
  2892  08CB  345B               	retlw	91
  2893  08CC  343D               	retlw	61
  2894  08CD  3400               	retlw	0
  2895  08CE  3400               	retlw	0
  2896  08CF  3400               	retlw	0
  2897  08D0  3400               	retlw	0
  2898  08D1  340D               	retlw	13
  2899  08D2  345D               	retlw	93
  2900  08D3  3400               	retlw	0
  2901  08D4  345C               	retlw	92
  2902  08D5  3400               	retlw	0
  2903  08D6  3400               	retlw	0
  2904  08D7  3400               	retlw	0
  2905  08D8  3400               	retlw	0
  2906  08D9  3400               	retlw	0
  2907  08DA  3400               	retlw	0
  2908  08DB  3400               	retlw	0
  2909  08DC  3400               	retlw	0
  2910  08DD  3408               	retlw	8
  2911  08DE  3400               	retlw	0
  2912  08DF  3400               	retlw	0
  2913  08E0  3431               	retlw	49
  2914  08E1  3400               	retlw	0
  2915  08E2  3434               	retlw	52
  2916  08E3  3437               	retlw	55
  2917  08E4  3400               	retlw	0
  2918  08E5  3400               	retlw	0
  2919  08E6  3400               	retlw	0
  2920  08E7  3430               	retlw	48
  2921  08E8  342E               	retlw	46
  2922  08E9  3432               	retlw	50
  2923  08EA  3435               	retlw	53
  2924  08EB  3436               	retlw	54
  2925  08EC  3438               	retlw	56
  2926  08ED  341B               	retlw	27
  2927  08EE  3400               	retlw	0
  2928  08EF  3400               	retlw	0
  2929  08F0  342B               	retlw	43
  2930  08F1  3433               	retlw	51
  2931  08F2  342D               	retlw	45
  2932  08F3  342A               	retlw	42
  2933  08F4  3439               	retlw	57
  2934  08F5                     __end_of_ScanCode:	
  2935  08F5                     _ScanCodeSHIFT:	
  2936  08F5  3409               	retlw	9
  2937  08F6  347E               	retlw	126
  2938  08F7  3400               	retlw	0
  2939  08F8  3400               	retlw	0
  2940  08F9  3400               	retlw	0
  2941  08FA  3400               	retlw	0
  2942  08FB  3400               	retlw	0
  2943  08FC  3400               	retlw	0
  2944  08FD  3451               	retlw	81
  2945  08FE  3421               	retlw	33
  2946  08FF  3400               	retlw	0
  2947  0900  3400               	retlw	0
  2948  0901  3400               	retlw	0
  2949  0902  345A               	retlw	90
  2950  0903  3453               	retlw	83
  2951  0904  3441               	retlw	65
  2952  0905  3457               	retlw	87
  2953  0906  3440               	retlw	64
  2954  0907  3400               	retlw	0
  2955  0908  3400               	retlw	0
  2956  0909  3443               	retlw	67
  2957  090A  3458               	retlw	88
  2958  090B  3444               	retlw	68
  2959  090C  3445               	retlw	69
  2960  090D  3424               	retlw	36
  2961  090E  3423               	retlw	35
  2962  090F  3400               	retlw	0
  2963  0910  3400               	retlw	0
  2964  0911  3420               	retlw	32
  2965  0912  3456               	retlw	86
  2966  0913  3446               	retlw	70
  2967  0914  3454               	retlw	84
  2968  0915  3452               	retlw	82
  2969  0916  3425               	retlw	37
  2970  0917  3400               	retlw	0
  2971  0918  3400               	retlw	0
  2972  0919  344E               	retlw	78
  2973  091A  3442               	retlw	66
  2974  091B  3448               	retlw	72
  2975  091C  3447               	retlw	71
  2976  091D  3459               	retlw	89
  2977  091E  345E               	retlw	94
  2978  091F  3400               	retlw	0
  2979  0920  3400               	retlw	0
  2980  0921  3400               	retlw	0
  2981  0922  344D               	retlw	77
  2982  0923  344A               	retlw	74
  2983  0924  3455               	retlw	85
  2984  0925  3426               	retlw	38
  2985  0926  342A               	retlw	42
  2986  0927  3400               	retlw	0
  2987  0928  3400               	retlw	0
  2988  0929  343C               	retlw	60
  2989  092A  344B               	retlw	75
  2990  092B  3449               	retlw	73
  2991  092C  344F               	retlw	79
  2992  092D  3429               	retlw	41
  2993  092E  3428               	retlw	40
  2994  092F  3400               	retlw	0
  2995  0930  3400               	retlw	0
  2996  0931  343E               	retlw	62
  2997  0932  343F               	retlw	63
  2998  0933  344C               	retlw	76
  2999  0934  343A               	retlw	58
  3000  0935  3450               	retlw	80
  3001  0936  345F               	retlw	95
  3002  0937  3400               	retlw	0
  3003  0938  3400               	retlw	0
  3004  0939  3400               	retlw	0
  3005  093A  3422               	retlw	34
  3006  093B  3400               	retlw	0
  3007  093C  347B               	retlw	123
  3008  093D  342B               	retlw	43
  3009  093E  3400               	retlw	0
  3010  093F  3400               	retlw	0
  3011  0940  3400               	retlw	0
  3012  0941  3400               	retlw	0
  3013  0942  340D               	retlw	13
  3014  0943  347D               	retlw	125
  3015  0944  3400               	retlw	0
  3016  0945  347C               	retlw	124
  3017  0946  3400               	retlw	0
  3018  0947  3400               	retlw	0
  3019  0948  3400               	retlw	0
  3020  0949  3400               	retlw	0
  3021  094A  3400               	retlw	0
  3022  094B  3400               	retlw	0
  3023  094C  3400               	retlw	0
  3024  094D  3400               	retlw	0
  3025  094E  3408               	retlw	8
  3026  094F  3400               	retlw	0
  3027  0950  3400               	retlw	0
  3028  0951  3431               	retlw	49
  3029  0952  3400               	retlw	0
  3030  0953  3434               	retlw	52
  3031  0954  3437               	retlw	55
  3032  0955  3400               	retlw	0
  3033  0956  3400               	retlw	0
  3034  0957  3400               	retlw	0
  3035  0958  3430               	retlw	48
  3036  0959  342E               	retlw	46
  3037  095A  3432               	retlw	50
  3038  095B  3435               	retlw	53
  3039  095C  3436               	retlw	54
  3040  095D  3438               	retlw	56
  3041  095E  341B               	retlw	27
  3042  095F  3400               	retlw	0
  3043  0960  3400               	retlw	0
  3044  0961  342B               	retlw	43
  3045  0962  3433               	retlw	51
  3046  0963  342D               	retlw	45
  3047  0964  342A               	retlw	42
  3048  0965  3439               	retlw	57
  3049  0966                     __end_of_ScanCodeSHIFT:	
  3050  0966                     _ScanCodeFunctionE0:	
  3051  0966  341E               	retlw	30
  3052  0967  3400               	retlw	0
  3053  0968  3400               	retlw	0
  3054  0969  341F               	retlw	31
  3055  096A  3400               	retlw	0
  3056  096B  3400               	retlw	0
  3057  096C  3400               	retlw	0
  3058  096D  3400               	retlw	0
  3059  096E  3400               	retlw	0
  3060  096F  3400               	retlw	0
  3061  0970  3400               	retlw	0
  3062  0971  3400               	retlw	0
  3063  0972  3400               	retlw	0
  3064  0973  3400               	retlw	0
  3065  0974  3419               	retlw	25
  3066  0975  3400               	retlw	0
  3067  0976  3400               	retlw	0
  3068  0977  3400               	retlw	0
  3069  0978  3400               	retlw	0
  3070  0979  3400               	retlw	0
  3071  097A  3400               	retlw	0
  3072  097B  3400               	retlw	0
  3073  097C  341D               	retlw	29
  3074  097D  3400               	retlw	0
  3075  097E  3400               	retlw	0
  3076  097F  3400               	retlw	0
  3077  0980  3400               	retlw	0
  3078  0981  3400               	retlw	0
  3079  0982  3400               	retlw	0
  3080  0983  3400               	retlw	0
  3081  0984  3400               	retlw	0
  3082  0985  3400               	retlw	0
  3083  0986  3400               	retlw	0
  3084  0987  3400               	retlw	0
  3085  0988  3400               	retlw	0
  3086  0989  3400               	retlw	0
  3087  098A  3400               	retlw	0
  3088  098B  3400               	retlw	0
  3089  098C  3400               	retlw	0
  3090  098D  3400               	retlw	0
  3091  098E  3400               	retlw	0
  3092  098F  3400               	retlw	0
  3093  0990  3400               	retlw	0
  3094  0991  3400               	retlw	0
  3095  0992  3400               	retlw	0
  3096  0993  3400               	retlw	0
  3097  0994  3400               	retlw	0
  3098  0995  3400               	retlw	0
  3099  0996  3400               	retlw	0
  3100  0997  3400               	retlw	0
  3101  0998  3400               	retlw	0
  3102  0999  3400               	retlw	0
  3103  099A  3400               	retlw	0
  3104  099B  3400               	retlw	0
  3105  099C  3400               	retlw	0
  3106  099D  3400               	retlw	0
  3107  099E  3400               	retlw	0
  3108  099F  342F               	retlw	47
  3109  09A0  3400               	retlw	0
  3110  09A1  3400               	retlw	0
  3111  09A2  3400               	retlw	0
  3112  09A3  3400               	retlw	0
  3113  09A4  3400               	retlw	0
  3114  09A5  3400               	retlw	0
  3115  09A6  3400               	retlw	0
  3116  09A7  3400               	retlw	0
  3117  09A8  3400               	retlw	0
  3118  09A9  3400               	retlw	0
  3119  09AA  3400               	retlw	0
  3120  09AB  3400               	retlw	0
  3121  09AC  3400               	retlw	0
  3122  09AD  3400               	retlw	0
  3123  09AE  3400               	retlw	0
  3124  09AF  340D               	retlw	13
  3125  09B0  3400               	retlw	0
  3126  09B1  3400               	retlw	0
  3127  09B2  3400               	retlw	0
  3128  09B3  3400               	retlw	0
  3129  09B4  3400               	retlw	0
  3130  09B5  3400               	retlw	0
  3131  09B6  3400               	retlw	0
  3132  09B7  3400               	retlw	0
  3133  09B8  3400               	retlw	0
  3134  09B9  3400               	retlw	0
  3135  09BA  3400               	retlw	0
  3136  09BB  3400               	retlw	0
  3137  09BC  3400               	retlw	0
  3138  09BD  3400               	retlw	0
  3139  09BE  3401               	retlw	1
  3140  09BF  3400               	retlw	0
  3141  09C0  3403               	retlw	3
  3142  09C1  3416               	retlw	22
  3143  09C2  3400               	retlw	0
  3144  09C3  3400               	retlw	0
  3145  09C4  3400               	retlw	0
  3146  09C5  3415               	retlw	21
  3147  09C6  347F               	retlw	127
  3148  09C7  3404               	retlw	4
  3149  09C8  3400               	retlw	0
  3150  09C9  3405               	retlw	5
  3151  09CA  3402               	retlw	2
  3152  09CB  3400               	retlw	0
  3153  09CC  3400               	retlw	0
  3154  09CD  3400               	retlw	0
  3155  09CE  3400               	retlw	0
  3156  09CF  3418               	retlw	24
  3157  09D0  3400               	retlw	0
  3158  09D1  3400               	retlw	0
  3159  09D2  3417               	retlw	23
  3160  09D3                     __end_of_ScanCodeFunctionE0:	
  3161  09D3                     _dpowers:	
  3162  09D3  3401               	retlw	1
  3163  09D4  3400               	retlw	0
  3164  09D5  3400               	retlw	0
  3165  09D6  3400               	retlw	0
  3166  09D7  340A               	retlw	10
  3167  09D8  3400               	retlw	0
  3168  09D9  3400               	retlw	0
  3169  09DA  3400               	retlw	0
  3170  09DB  3464               	retlw	100
  3171  09DC  3400               	retlw	0
  3172  09DD  3400               	retlw	0
  3173  09DE  3400               	retlw	0
  3174  09DF  34E8               	retlw	232
  3175  09E0  3403               	retlw	3
  3176  09E1  3400               	retlw	0
  3177  09E2  3400               	retlw	0
  3178  09E3  3410               	retlw	16
  3179  09E4  3427               	retlw	39
  3180  09E5  3400               	retlw	0
  3181  09E6  3400               	retlw	0
  3182  09E7  34A0               	retlw	160
  3183  09E8  3486               	retlw	134
  3184  09E9  3401               	retlw	1
  3185  09EA  3400               	retlw	0
  3186  09EB  3440               	retlw	64
  3187  09EC  3442               	retlw	66
  3188  09ED  340F               	retlw	15
  3189  09EE  3400               	retlw	0
  3190  09EF  3480               	retlw	128
  3191  09F0  3496               	retlw	150
  3192  09F1  3498               	retlw	152
  3193  09F2  3400               	retlw	0
  3194  09F3  3400               	retlw	0
  3195  09F4  34E1               	retlw	225
  3196  09F5  34F5               	retlw	245
  3197  09F6  3405               	retlw	5
  3198  09F7  3400               	retlw	0
  3199  09F8  34CA               	retlw	202
  3200  09F9  349A               	retlw	154
  3201  09FA  343B               	retlw	59
  3202  09FB                     __end_of_dpowers:	
  3203  000B                     _INTCON	set	11
  3204  000B                     _INTCONbits	set	11
  3205  0011                     _PIR1bits	set	17
  3206  000C                     _PORTA	set	12
  3207  001B                     _PR2	set	27
  3208  001C                     _T2CON	set	28
  3209  001C                     _T2CONbits	set	28
  3210  009D                     _ADCON0	set	157
  3211  009E                     _ADCON1	set	158
  3212  009C                     _ADRESH	set	156
  3213  009B                     _ADRESL	set	155
  3214  0095                     _OPTION_REGbits	set	149
  3215  0099                     _OSCCON	set	153
  3216  009A                     _OSCSTAT	set	154
  3217  0091                     _PIE1	set	145
  3218  0091                     _PIE1bits	set	145
  3219  008C                     _TRISAbits	set	140
  3220  008E                     _TRISCbits	set	142
  3221  04D0                     _HFIOFS	set	1232
  3222  0117                     _FVRCON	set	279
  3223  010C                     _LATA	set	268
  3224  010E                     _LATC	set	270
  3225  018C                     _ANSELA	set	396
  3226  018E                     _ANSELC	set	398
  3227  019F                     _BAUD1CON	set	415
  3228  0192                     _PMADRH	set	402
  3229  0191                     _PMADRL	set	401
  3230  0195                     _PMCON1	set	405
  3231  0196                     _PMCON2	set	406
  3232  0194                     _PMDATH	set	404
  3233  0193                     _PMDATL	set	403
  3234  019D                     _RC1STA	set	413
  3235  019D                     _RC1STAbits	set	413
  3236  0199                     _RCREG	set	409
  3237  019D                     _RCSTA	set	413
  3238  019D                     _RCSTAbits	set	413
  3239  019B                     _SPBRG	set	411
  3240  019C                     _SPBRGH	set	412
  3241  019E                     _TX1STA	set	414
  3242  019E                     _TX1STAbits	set	414
  3243  019A                     _TXREG	set	410
  3244  019E                     _TXSTAbits	set	414
  3245  020C                     _WPUA	set	524
  3246  020E                     _WPUC	set	526
  3247  029A                     _CCP2CONbits	set	666
  3248  0393                     _IOCAF	set	915
  3249  0392                     _IOCAN	set	914
  3250  0391                     _IOCAP	set	913
  3251  0E25                     _CKPPS	set	3621
  3252  0E0F                     _PPSLOCK	set	3599
  3253  0E24                     _RXPPS	set	3620
  3254  0EA2                     _RC2PPS	set	3746
  3255  09FB                     __stringdata:	
  3256  09FB                     STR_30:	
  3257  09FB  3442               	retlw	66	;'B'
  3258  09FC  3461               	retlw	97	;'a'
  3259  09FD  3475               	retlw	117	;'u'
  3260  09FE  3464               	retlw	100	;'d'
  3261  09FF  3420               	retlw	32	;' '
  3262  0A00  3477               	retlw	119	;'w'
  3263  0A01  3469               	retlw	105	;'i'
  3264  0A02  346C               	retlw	108	;'l'
  3265  0A03  346C               	retlw	108	;'l'
  3266  0A04  3420               	retlw	32	;' '
  3267  0A05  3462               	retlw	98	;'b'
  3268  0A06  3465               	retlw	101	;'e'
  3269  0A07  3420               	retlw	32	;' '
  3270  0A08  3473               	retlw	115	;'s'
  3271  0A09  3465               	retlw	101	;'e'
  3272  0A0A  3474               	retlw	116	;'t'
  3273  0A0B  3420               	retlw	32	;' '
  3274  0A0C  3474               	retlw	116	;'t'
  3275  0A0D  346F               	retlw	111	;'o'
  3276  0A0E  3420               	retlw	32	;' '
  3277  0A0F  3425               	retlw	37	;'%'
  3278  0A10  346C               	retlw	108	;'l'
  3279  0A11  3475               	retlw	117	;'u'
  3280  0A12  3420               	retlw	32	;' '
  3281  0A13  3477               	retlw	119	;'w'
  3282  0A14  3469               	retlw	105	;'i'
  3283  0A15  3474               	retlw	116	;'t'
  3284  0A16  3468               	retlw	104	;'h'
  3285  0A17  3420               	retlw	32	;' '
  3286  0A18  3445               	retlw	69	;'E'
  3287  0A19  3476               	retlw	118	;'v'
  3288  0A1A  3465               	retlw	101	;'e'
  3289  0A1B  346E               	retlw	110	;'n'
  3290  0A1C  3420               	retlw	32	;' '
  3291  0A1D  3470               	retlw	112	;'p'
  3292  0A1E  3461               	retlw	97	;'a'
  3293  0A1F  3472               	retlw	114	;'r'
  3294  0A20  3469               	retlw	105	;'i'
  3295  0A21  3474               	retlw	116	;'t'
  3296  0A22  3479               	retlw	121	;'y'
  3297  0A23  3420               	retlw	32	;' '
  3298  0A24  3462               	retlw	98	;'b'
  3299  0A25  3469               	retlw	105	;'i'
  3300  0A26  3474               	retlw	116	;'t'
  3301  0A27  340D               	retlw	13
  3302  0A28  340A               	retlw	10
  3303  0A29  3400               	retlw	0
  3304  0A2A                     STR_29:	
  3305  0A2A  3442               	retlw	66	;'B'
  3306  0A2B  3461               	retlw	97	;'a'
  3307  0A2C  3475               	retlw	117	;'u'
  3308  0A2D  3464               	retlw	100	;'d'
  3309  0A2E  3420               	retlw	32	;' '
  3310  0A2F  3477               	retlw	119	;'w'
  3311  0A30  3469               	retlw	105	;'i'
  3312  0A31  346C               	retlw	108	;'l'
  3313  0A32  346C               	retlw	108	;'l'
  3314  0A33  3420               	retlw	32	;' '
  3315  0A34  3462               	retlw	98	;'b'
  3316  0A35  3465               	retlw	101	;'e'
  3317  0A36  3420               	retlw	32	;' '
  3318  0A37  3473               	retlw	115	;'s'
  3319  0A38  3465               	retlw	101	;'e'
  3320  0A39  3474               	retlw	116	;'t'
  3321  0A3A  3420               	retlw	32	;' '
  3322  0A3B  3474               	retlw	116	;'t'
  3323  0A3C  346F               	retlw	111	;'o'
  3324  0A3D  3420               	retlw	32	;' '
  3325  0A3E  3425               	retlw	37	;'%'
  3326  0A3F  346C               	retlw	108	;'l'
  3327  0A40  3475               	retlw	117	;'u'
  3328  0A41  3420               	retlw	32	;' '
  3329  0A42  3477               	retlw	119	;'w'
  3330  0A43  3469               	retlw	105	;'i'
  3331  0A44  3474               	retlw	116	;'t'
  3332  0A45  3468               	retlw	104	;'h'
  3333  0A46  3420               	retlw	32	;' '
  3334  0A47  344F               	retlw	79	;'O'
  3335  0A48  3464               	retlw	100	;'d'
  3336  0A49  3464               	retlw	100	;'d'
  3337  0A4A  3420               	retlw	32	;' '
  3338  0A4B  3470               	retlw	112	;'p'
  3339  0A4C  3461               	retlw	97	;'a'
  3340  0A4D  3472               	retlw	114	;'r'
  3341  0A4E  3469               	retlw	105	;'i'
  3342  0A4F  3474               	retlw	116	;'t'
  3343  0A50  3479               	retlw	121	;'y'
  3344  0A51  3420               	retlw	32	;' '
  3345  0A52  3462               	retlw	98	;'b'
  3346  0A53  3469               	retlw	105	;'i'
  3347  0A54  3474               	retlw	116	;'t'
  3348  0A55  340D               	retlw	13
  3349  0A56  340A               	retlw	10
  3350  0A57  3400               	retlw	0
  3351  0A58                     STR_33:	
  3352  0A58  3442               	retlw	66	;'B'
  3353  0A59  3461               	retlw	97	;'a'
  3354  0A5A  3475               	retlw	117	;'u'
  3355  0A5B  3464               	retlw	100	;'d'
  3356  0A5C  3420               	retlw	32	;' '
  3357  0A5D  3477               	retlw	119	;'w'
  3358  0A5E  3469               	retlw	105	;'i'
  3359  0A5F  346C               	retlw	108	;'l'
  3360  0A60  346C               	retlw	108	;'l'
  3361  0A61  3420               	retlw	32	;' '
  3362  0A62  3462               	retlw	98	;'b'
  3363  0A63  3465               	retlw	101	;'e'
  3364  0A64  3420               	retlw	32	;' '
  3365  0A65  3473               	retlw	115	;'s'
  3366  0A66  3465               	retlw	101	;'e'
  3367  0A67  3474               	retlw	116	;'t'
  3368  0A68  3420               	retlw	32	;' '
  3369  0A69  3474               	retlw	116	;'t'
  3370  0A6A  346F               	retlw	111	;'o'
  3371  0A6B  3420               	retlw	32	;' '
  3372  0A6C  3425               	retlw	37	;'%'
  3373  0A6D  346C               	retlw	108	;'l'
  3374  0A6E  3475               	retlw	117	;'u'
  3375  0A6F  3420               	retlw	32	;' '
  3376  0A70  3477               	retlw	119	;'w'
  3377  0A71  3469               	retlw	105	;'i'
  3378  0A72  3474               	retlw	116	;'t'
  3379  0A73  3468               	retlw	104	;'h'
  3380  0A74  3420               	retlw	32	;' '
  3381  0A75  346E               	retlw	110	;'n'
  3382  0A76  346F               	retlw	111	;'o'
  3383  0A77  3420               	retlw	32	;' '
  3384  0A78  3470               	retlw	112	;'p'
  3385  0A79  3461               	retlw	97	;'a'
  3386  0A7A  3472               	retlw	114	;'r'
  3387  0A7B  3469               	retlw	105	;'i'
  3388  0A7C  3474               	retlw	116	;'t'
  3389  0A7D  3479               	retlw	121	;'y'
  3390  0A7E  3420               	retlw	32	;' '
  3391  0A7F  3462               	retlw	98	;'b'
  3392  0A80  3469               	retlw	105	;'i'
  3393  0A81  3474               	retlw	116	;'t'
  3394  0A82  340D               	retlw	13
  3395  0A83  340A               	retlw	10
  3396  0A84  3400               	retlw	0
  3397  0A85                     STR_32:	
  3398  0A85  3442               	retlw	66	;'B'
  3399  0A86  3461               	retlw	97	;'a'
  3400  0A87  3475               	retlw	117	;'u'
  3401  0A88  3464               	retlw	100	;'d'
  3402  0A89  3420               	retlw	32	;' '
  3403  0A8A  3477               	retlw	119	;'w'
  3404  0A8B  3469               	retlw	105	;'i'
  3405  0A8C  346C               	retlw	108	;'l'
  3406  0A8D  346C               	retlw	108	;'l'
  3407  0A8E  3420               	retlw	32	;' '
  3408  0A8F  3462               	retlw	98	;'b'
  3409  0A90  3465               	retlw	101	;'e'
  3410  0A91  3420               	retlw	32	;' '
  3411  0A92  3473               	retlw	115	;'s'
  3412  0A93  3465               	retlw	101	;'e'
  3413  0A94  3474               	retlw	116	;'t'
  3414  0A95  3420               	retlw	32	;' '
  3415  0A96  3474               	retlw	116	;'t'
  3416  0A97  346F               	retlw	111	;'o'
  3417  0A98  3420               	retlw	32	;' '
  3418  0A99  3425               	retlw	37	;'%'
  3419  0A9A  346C               	retlw	108	;'l'
  3420  0A9B  3475               	retlw	117	;'u'
  3421  0A9C  3420               	retlw	32	;' '
  3422  0A9D  3477               	retlw	119	;'w'
  3423  0A9E  3469               	retlw	105	;'i'
  3424  0A9F  3474               	retlw	116	;'t'
  3425  0AA0  3468               	retlw	104	;'h'
  3426  0AA1  3420               	retlw	32	;' '
  3427  0AA2  3453               	retlw	83	;'S'
  3428  0AA3  3470               	retlw	112	;'p'
  3429  0AA4  3461               	retlw	97	;'a'
  3430  0AA5  3463               	retlw	99	;'c'
  3431  0AA6  3465               	retlw	101	;'e'
  3432  0AA7  3420               	retlw	32	;' '
  3433  0AA8  3462               	retlw	98	;'b'
  3434  0AA9  3469               	retlw	105	;'i'
  3435  0AAA  3474               	retlw	116	;'t'
  3436  0AAB  340D               	retlw	13
  3437  0AAC  340A               	retlw	10
  3438  0AAD  3400               	retlw	0
  3439  0AAE                     STR_31:	
  3440  0AAE  3442               	retlw	66	;'B'
  3441  0AAF  3461               	retlw	97	;'a'
  3442  0AB0  3475               	retlw	117	;'u'
  3443  0AB1  3464               	retlw	100	;'d'
  3444  0AB2  3420               	retlw	32	;' '
  3445  0AB3  3477               	retlw	119	;'w'
  3446  0AB4  3469               	retlw	105	;'i'
  3447  0AB5  346C               	retlw	108	;'l'
  3448  0AB6  346C               	retlw	108	;'l'
  3449  0AB7  3420               	retlw	32	;' '
  3450  0AB8  3462               	retlw	98	;'b'
  3451  0AB9  3465               	retlw	101	;'e'
  3452  0ABA  3420               	retlw	32	;' '
  3453  0ABB  3473               	retlw	115	;'s'
  3454  0ABC  3465               	retlw	101	;'e'
  3455  0ABD  3474               	retlw	116	;'t'
  3456  0ABE  3420               	retlw	32	;' '
  3457  0ABF  3474               	retlw	116	;'t'
  3458  0AC0  346F               	retlw	111	;'o'
  3459  0AC1  3420               	retlw	32	;' '
  3460  0AC2  3425               	retlw	37	;'%'
  3461  0AC3  346C               	retlw	108	;'l'
  3462  0AC4  3475               	retlw	117	;'u'
  3463  0AC5  3420               	retlw	32	;' '
  3464  0AC6  3477               	retlw	119	;'w'
  3465  0AC7  3469               	retlw	105	;'i'
  3466  0AC8  3474               	retlw	116	;'t'
  3467  0AC9  3468               	retlw	104	;'h'
  3468  0ACA  3420               	retlw	32	;' '
  3469  0ACB  344D               	retlw	77	;'M'
  3470  0ACC  3461               	retlw	97	;'a'
  3471  0ACD  3472               	retlw	114	;'r'
  3472  0ACE  346B               	retlw	107	;'k'
  3473  0ACF  3420               	retlw	32	;' '
  3474  0AD0  3462               	retlw	98	;'b'
  3475  0AD1  3469               	retlw	105	;'i'
  3476  0AD2  3474               	retlw	116	;'t'
  3477  0AD3  340D               	retlw	13
  3478  0AD4  340A               	retlw	10
  3479  0AD5  3400               	retlw	0
  3480  0AD6                     STR_27:	
  3481  0AD6  3452               	retlw	82	;'R'
  3482  0AD7  3465               	retlw	101	;'e'
  3483  0AD8  3473               	retlw	115	;'s'
  3484  0AD9  3465               	retlw	101	;'e'
  3485  0ADA  3474               	retlw	116	;'t'
  3486  0ADB  3420               	retlw	32	;' '
  3487  0ADC  3474               	retlw	116	;'t'
  3488  0ADD  346F               	retlw	111	;'o'
  3489  0ADE  3420               	retlw	32	;' '
  3490  0ADF  3439               	retlw	57	;'9'
  3491  0AE0  3436               	retlw	54	;'6'
  3492  0AE1  3430               	retlw	48	;'0'
  3493  0AE2  3430               	retlw	48	;'0'
  3494  0AE3  3420               	retlw	32	;' '
  3495  0AE4  3477               	retlw	119	;'w'
  3496  0AE5  3469               	retlw	105	;'i'
  3497  0AE6  3474               	retlw	116	;'t'
  3498  0AE7  3468               	retlw	104	;'h'
  3499  0AE8  3420               	retlw	32	;' '
  3500  0AE9  346E               	retlw	110	;'n'
  3501  0AEA  346F               	retlw	111	;'o'
  3502  0AEB  3420               	retlw	32	;' '
  3503  0AEC  3470               	retlw	112	;'p'
  3504  0AED  3461               	retlw	97	;'a'
  3505  0AEE  3472               	retlw	114	;'r'
  3506  0AEF  3469               	retlw	105	;'i'
  3507  0AF0  3474               	retlw	116	;'t'
  3508  0AF1  3479               	retlw	121	;'y'
  3509  0AF2  3420               	retlw	32	;' '
  3510  0AF3  3462               	retlw	98	;'b'
  3511  0AF4  3469               	retlw	105	;'i'
  3512  0AF5  3474               	retlw	116	;'t'
  3513  0AF6  340D               	retlw	13
  3514  0AF7  340A               	retlw	10
  3515  0AF8  3400               	retlw	0
  3516  0AF9                     STR_14:	
  3517  0AF9  3442               	retlw	66	;'B'
  3518  0AFA  3461               	retlw	97	;'a'
  3519  0AFB  3475               	retlw	117	;'u'
  3520  0AFC  3464               	retlw	100	;'d'
  3521  0AFD  3420               	retlw	32	;' '
  3522  0AFE  3469               	retlw	105	;'i'
  3523  0AFF  3473               	retlw	115	;'s'
  3524  0B00  3420               	retlw	32	;' '
  3525  0B01  3425               	retlw	37	;'%'
  3526  0B02  346C               	retlw	108	;'l'
  3527  0B03  3475               	retlw	117	;'u'
  3528  0B04  3420               	retlw	32	;' '
  3529  0B05  3477               	retlw	119	;'w'
  3530  0B06  3469               	retlw	105	;'i'
  3531  0B07  3474               	retlw	116	;'t'
  3532  0B08  3468               	retlw	104	;'h'
  3533  0B09  3420               	retlw	32	;' '
  3534  0B0A  3445               	retlw	69	;'E'
  3535  0B0B  3476               	retlw	118	;'v'
  3536  0B0C  3465               	retlw	101	;'e'
  3537  0B0D  346E               	retlw	110	;'n'
  3538  0B0E  3420               	retlw	32	;' '
  3539  0B0F  3470               	retlw	112	;'p'
  3540  0B10  3461               	retlw	97	;'a'
  3541  0B11  3472               	retlw	114	;'r'
  3542  0B12  3469               	retlw	105	;'i'
  3543  0B13  3474               	retlw	116	;'t'
  3544  0B14  3479               	retlw	121	;'y'
  3545  0B15  3420               	retlw	32	;' '
  3546  0B16  3462               	retlw	98	;'b'
  3547  0B17  3469               	retlw	105	;'i'
  3548  0B18  3474               	retlw	116	;'t'
  3549  0B19  340D               	retlw	13
  3550  0B1A  340A               	retlw	10
  3551  0B1B  3400               	retlw	0
  3552  0B1C                     STR_5:	
  3553  0B1C  3454               	retlw	84	;'T'
  3554  0B1D  346F               	retlw	111	;'o'
  3555  0B1E  3420               	retlw	32	;' '
  3556  0B1F  3443               	retlw	67	;'C'
  3557  0B20  3468               	retlw	104	;'h'
  3558  0B21  3461               	retlw	97	;'a'
  3559  0B22  346E               	retlw	110	;'n'
  3560  0B23  3467               	retlw	103	;'g'
  3561  0B24  3465               	retlw	101	;'e'
  3562  0B25  3420               	retlw	32	;' '
  3563  0B26  3442               	retlw	66	;'B'
  3564  0B27  3441               	retlw	65	;'A'
  3565  0B28  3455               	retlw	85	;'U'
  3566  0B29  3444               	retlw	68	;'D'
  3567  0B2A  3420               	retlw	32	;' '
  3568  0B2B  3468               	retlw	104	;'h'
  3569  0B2C  3469               	retlw	105	;'i'
  3570  0B2D  3474               	retlw	116	;'t'
  3571  0B2E  3420               	retlw	32	;' '
  3572  0B2F  3422               	retlw	34	;'"'
  3573  0B30  3443               	retlw	67	;'C'
  3574  0B31  344E               	retlw	78	;'N'
  3575  0B32  3454               	retlw	84	;'T'
  3576  0B33  342B               	retlw	43	;'+'
  3577  0B34  3441               	retlw	65	;'A'
  3578  0B35  344C               	retlw	76	;'L'
  3579  0B36  3454               	retlw	84	;'T'
  3580  0B37  342B               	retlw	43	;'+'
  3581  0B38  3444               	retlw	68	;'D'
  3582  0B39  3445               	retlw	69	;'E'
  3583  0B3A  344C               	retlw	76	;'L'
  3584  0B3B  3422               	retlw	34	;'"'
  3585  0B3C  340D               	retlw	13
  3586  0B3D  340A               	retlw	10
  3587  0B3E  3400               	retlw	0
  3588  0B3F                     STR_13:	
  3589  0B3F  3442               	retlw	66	;'B'
  3590  0B40  3461               	retlw	97	;'a'
  3591  0B41  3475               	retlw	117	;'u'
  3592  0B42  3464               	retlw	100	;'d'
  3593  0B43  3420               	retlw	32	;' '
  3594  0B44  3469               	retlw	105	;'i'
  3595  0B45  3473               	retlw	115	;'s'
  3596  0B46  3420               	retlw	32	;' '
  3597  0B47  3425               	retlw	37	;'%'
  3598  0B48  346C               	retlw	108	;'l'
  3599  0B49  3475               	retlw	117	;'u'
  3600  0B4A  3420               	retlw	32	;' '
  3601  0B4B  3477               	retlw	119	;'w'
  3602  0B4C  3469               	retlw	105	;'i'
  3603  0B4D  3474               	retlw	116	;'t'
  3604  0B4E  3468               	retlw	104	;'h'
  3605  0B4F  3420               	retlw	32	;' '
  3606  0B50  344F               	retlw	79	;'O'
  3607  0B51  3464               	retlw	100	;'d'
  3608  0B52  3464               	retlw	100	;'d'
  3609  0B53  3420               	retlw	32	;' '
  3610  0B54  3470               	retlw	112	;'p'
  3611  0B55  3461               	retlw	97	;'a'
  3612  0B56  3472               	retlw	114	;'r'
  3613  0B57  3469               	retlw	105	;'i'
  3614  0B58  3474               	retlw	116	;'t'
  3615  0B59  3479               	retlw	121	;'y'
  3616  0B5A  3420               	retlw	32	;' '
  3617  0B5B  3462               	retlw	98	;'b'
  3618  0B5C  3469               	retlw	105	;'i'
  3619  0B5D  3474               	retlw	116	;'t'
  3620  0B5E  340D               	retlw	13
  3621  0B5F  340A               	retlw	10
  3622  0B60  3400               	retlw	0
  3623  0B61                     STR_17:	
  3624  0B61  3442               	retlw	66	;'B'
  3625  0B62  3461               	retlw	97	;'a'
  3626  0B63  3475               	retlw	117	;'u'
  3627  0B64  3464               	retlw	100	;'d'
  3628  0B65  3420               	retlw	32	;' '
  3629  0B66  3469               	retlw	105	;'i'
  3630  0B67  3473               	retlw	115	;'s'
  3631  0B68  3420               	retlw	32	;' '
  3632  0B69  3425               	retlw	37	;'%'
  3633  0B6A  346C               	retlw	108	;'l'
  3634  0B6B  3475               	retlw	117	;'u'
  3635  0B6C  3420               	retlw	32	;' '
  3636  0B6D  3477               	retlw	119	;'w'
  3637  0B6E  3469               	retlw	105	;'i'
  3638  0B6F  3474               	retlw	116	;'t'
  3639  0B70  3468               	retlw	104	;'h'
  3640  0B71  3420               	retlw	32	;' '
  3641  0B72  346E               	retlw	110	;'n'
  3642  0B73  346F               	retlw	111	;'o'
  3643  0B74  3420               	retlw	32	;' '
  3644  0B75  3470               	retlw	112	;'p'
  3645  0B76  3461               	retlw	97	;'a'
  3646  0B77  3472               	retlw	114	;'r'
  3647  0B78  3469               	retlw	105	;'i'
  3648  0B79  3474               	retlw	116	;'t'
  3649  0B7A  3479               	retlw	121	;'y'
  3650  0B7B  3420               	retlw	32	;' '
  3651  0B7C  3462               	retlw	98	;'b'
  3652  0B7D  3469               	retlw	105	;'i'
  3653  0B7E  3474               	retlw	116	;'t'
  3654  0B7F  340D               	retlw	13
  3655  0B80  340A               	retlw	10
  3656  0B81  3400               	retlw	0
  3657  0B82                     STR_16:	
  3658  0B82  3442               	retlw	66	;'B'
  3659  0B83  3461               	retlw	97	;'a'
  3660  0B84  3475               	retlw	117	;'u'
  3661  0B85  3464               	retlw	100	;'d'
  3662  0B86  3420               	retlw	32	;' '
  3663  0B87  3469               	retlw	105	;'i'
  3664  0B88  3473               	retlw	115	;'s'
  3665  0B89  3420               	retlw	32	;' '
  3666  0B8A  3425               	retlw	37	;'%'
  3667  0B8B  346C               	retlw	108	;'l'
  3668  0B8C  3475               	retlw	117	;'u'
  3669  0B8D  3420               	retlw	32	;' '
  3670  0B8E  3477               	retlw	119	;'w'
  3671  0B8F  3469               	retlw	105	;'i'
  3672  0B90  3474               	retlw	116	;'t'
  3673  0B91  3468               	retlw	104	;'h'
  3674  0B92  3420               	retlw	32	;' '
  3675  0B93  3453               	retlw	83	;'S'
  3676  0B94  3470               	retlw	112	;'p'
  3677  0B95  3461               	retlw	97	;'a'
  3678  0B96  3463               	retlw	99	;'c'
  3679  0B97  3465               	retlw	101	;'e'
  3680  0B98  3420               	retlw	32	;' '
  3681  0B99  3462               	retlw	98	;'b'
  3682  0B9A  3469               	retlw	105	;'i'
  3683  0B9B  3474               	retlw	116	;'t'
  3684  0B9C  340D               	retlw	13
  3685  0B9D  340A               	retlw	10
  3686  0B9E  3400               	retlw	0
  3687  0B9F                     STR_15:	
  3688  0B9F  3442               	retlw	66	;'B'
  3689  0BA0  3461               	retlw	97	;'a'
  3690  0BA1  3475               	retlw	117	;'u'
  3691  0BA2  3464               	retlw	100	;'d'
  3692  0BA3  3420               	retlw	32	;' '
  3693  0BA4  3469               	retlw	105	;'i'
  3694  0BA5  3473               	retlw	115	;'s'
  3695  0BA6  3420               	retlw	32	;' '
  3696  0BA7  3425               	retlw	37	;'%'
  3697  0BA8  346C               	retlw	108	;'l'
  3698  0BA9  3475               	retlw	117	;'u'
  3699  0BAA  3420               	retlw	32	;' '
  3700  0BAB  3477               	retlw	119	;'w'
  3701  0BAC  3469               	retlw	105	;'i'
  3702  0BAD  3474               	retlw	116	;'t'
  3703  0BAE  3468               	retlw	104	;'h'
  3704  0BAF  3420               	retlw	32	;' '
  3705  0BB0  344D               	retlw	77	;'M'
  3706  0BB1  3461               	retlw	97	;'a'
  3707  0BB2  3472               	retlw	114	;'r'
  3708  0BB3  346B               	retlw	107	;'k'
  3709  0BB4  3420               	retlw	32	;' '
  3710  0BB5  3462               	retlw	98	;'b'
  3711  0BB6  3469               	retlw	105	;'i'
  3712  0BB7  3474               	retlw	116	;'t'
  3713  0BB8  340D               	retlw	13
  3714  0BB9  340A               	retlw	10
  3715  0BBA  3400               	retlw	0
  3716  0BBB                     STR_2:	
  3717  0BBB  3450               	retlw	80	;'P'
  3718  0BBC  3453               	retlw	83	;'S'
  3719  0BBD  342F               	retlw	47	;'/'
  3720  0BBE  3432               	retlw	50	;'2'
  3721  0BBF  3420               	retlw	32	;' '
  3722  0BC0  344B               	retlw	75	;'K'
  3723  0BC1  3465               	retlw	101	;'e'
  3724  0BC2  3479               	retlw	121	;'y'
  3725  0BC3  3462               	retlw	98	;'b'
  3726  0BC4  346F               	retlw	111	;'o'
  3727  0BC5  3461               	retlw	97	;'a'
  3728  0BC6  3472               	retlw	114	;'r'
  3729  0BC7  3464               	retlw	100	;'d'
  3730  0BC8  3420               	retlw	32	;' '
  3731  0BC9  3474               	retlw	116	;'t'
  3732  0BCA  346F               	retlw	111	;'o'
  3733  0BCB  3420               	retlw	32	;' '
  3734  0BCC  3452               	retlw	82	;'R'
  3735  0BCD  3453               	retlw	83	;'S'
  3736  0BCE  342D               	retlw	45	;'-'
  3737  0BCF  3432               	retlw	50	;'2'
  3738  0BD0  3433               	retlw	51	;'3'
  3739  0BD1  3432               	retlw	50	;'2'
  3740  0BD2  340D               	retlw	13
  3741  0BD3  340A               	retlw	10
  3742  0BD4  3400               	retlw	0
  3743  0BD5                     STR_6:	
  3744  0BD5  344E               	retlw	78	;'N'
  3745  0BD6  346F               	retlw	111	;'o'
  3746  0BD7  3420               	retlw	32	;' '
  3747  0BD8  344B               	retlw	75	;'K'
  3748  0BD9  3465               	retlw	101	;'e'
  3749  0BDA  3479               	retlw	121	;'y'
  3750  0BDB  3462               	retlw	98	;'b'
  3751  0BDC  346F               	retlw	111	;'o'
  3752  0BDD  3461               	retlw	97	;'a'
  3753  0BDE  3472               	retlw	114	;'r'
  3754  0BDF  3464               	retlw	100	;'d'
  3755  0BE0  3420               	retlw	32	;' '
  3756  0BE1  3463               	retlw	99	;'c'
  3757  0BE2  346F               	retlw	111	;'o'
  3758  0BE3  346E               	retlw	110	;'n'
  3759  0BE4  346E               	retlw	110	;'n'
  3760  0BE5  3465               	retlw	101	;'e'
  3761  0BE6  3463               	retlw	99	;'c'
  3762  0BE7  3474               	retlw	116	;'t'
  3763  0BE8  3465               	retlw	101	;'e'
  3764  0BE9  3464               	retlw	100	;'d'
  3765  0BEA  340D               	retlw	13
  3766  0BEB  340A               	retlw	10
  3767  0BEC  3400               	retlw	0
  3768  0BED                     STR_8:	
  3769  0BED  3449               	retlw	73	;'I'
  3770  0BEE  346E               	retlw	110	;'n'
  3771  0BEF  3469               	retlw	105	;'i'
  3772  0BF0  3474               	retlw	116	;'t'
  3773  0BF1  3469               	retlw	105	;'i'
  3774  0BF2  3461               	retlw	97	;'a'
  3775  0BF3  346C               	retlw	108	;'l'
  3776  0BF4  3469               	retlw	105	;'i'
  3777  0BF5  347A               	retlw	122	;'z'
  3778  0BF6  3461               	retlw	97	;'a'
  3779  0BF7  3474               	retlw	116	;'t'
  3780  0BF8  3469               	retlw	105	;'i'
  3781  0BF9  346F               	retlw	111	;'o'
  3782  0BFA  346E               	retlw	110	;'n'
  3783  0BFB  3420               	retlw	32	;' '
  3784  0BFC  3446               	retlw	70	;'F'
  3785  0BFD  3461               	retlw	97	;'a'
  3786  0BFE  3469               	retlw	105	;'i'
  3787  0BFF  346C               	retlw	108	;'l'
  3788  0C00  340D               	retlw	13
  3789  0C01  340A               	retlw	10
  3790  0C02  3400               	retlw	0
  3791  0C03                     STR_7:	
  3792  0C03  344B               	retlw	75	;'K'
  3793  0C04  3465               	retlw	101	;'e'
  3794  0C05  3479               	retlw	121	;'y'
  3795  0C06  3462               	retlw	98	;'b'
  3796  0C07  346F               	retlw	111	;'o'
  3797  0C08  3461               	retlw	97	;'a'
  3798  0C09  3472               	retlw	114	;'r'
  3799  0C0A  3464               	retlw	100	;'d'
  3800  0C0B  3420               	retlw	32	;' '
  3801  0C0C  3443               	retlw	67	;'C'
  3802  0C0D  346F               	retlw	111	;'o'
  3803  0C0E  346E               	retlw	110	;'n'
  3804  0C0F  346E               	retlw	110	;'n'
  3805  0C10  3465               	retlw	101	;'e'
  3806  0C11  3463               	retlw	99	;'c'
  3807  0C12  3474               	retlw	116	;'t'
  3808  0C13  3465               	retlw	101	;'e'
  3809  0C14  3464               	retlw	100	;'d'
  3810  0C15  340D               	retlw	13
  3811  0C16  340A               	retlw	10
  3812  0C17  3400               	retlw	0
  3813  0C18                     STR_34:	
  3814  0C18  3442               	retlw	66	;'B'
  3815  0C19  3461               	retlw	97	;'a'
  3816  0C1A  3475               	retlw	117	;'u'
  3817  0C1B  3464               	retlw	100	;'d'
  3818  0C1C  3420               	retlw	32	;' '
  3819  0C1D  344F               	retlw	79	;'O'
  3820  0C1E  3475               	retlw	117	;'u'
  3821  0C1F  3474               	retlw	116	;'t'
  3822  0C20  3420               	retlw	32	;' '
  3823  0C21  346F               	retlw	111	;'o'
  3824  0C22  3466               	retlw	102	;'f'
  3825  0C23  3420               	retlw	32	;' '
  3826  0C24  3452               	retlw	82	;'R'
  3827  0C25  3461               	retlw	97	;'a'
  3828  0C26  346E               	retlw	110	;'n'
  3829  0C27  3467               	retlw	103	;'g'
  3830  0C28  3465               	retlw	101	;'e'
  3831  0C29  340D               	retlw	13
  3832  0C2A  340A               	retlw	10
  3833  0C2B  3400               	retlw	0
  3834  0C2C                     STR_11:	
  3835  0C2C  3456               	retlw	86	;'V'
  3836  0C2D  346F               	retlw	111	;'o'
  3837  0C2E  346C               	retlw	108	;'l'
  3838  0C2F  3474               	retlw	116	;'t'
  3839  0C30  3461               	retlw	97	;'a'
  3840  0C31  3467               	retlw	103	;'g'
  3841  0C32  3465               	retlw	101	;'e'
  3842  0C33  3420               	retlw	32	;' '
  3843  0C34  3474               	retlw	116	;'t'
  3844  0C35  346F               	retlw	111	;'o'
  3845  0C36  346F               	retlw	111	;'o'
  3846  0C37  3420               	retlw	32	;' '
  3847  0C38  3448               	retlw	72	;'H'
  3848  0C39  3469               	retlw	105	;'i'
  3849  0C3A  3467               	retlw	103	;'g'
  3850  0C3B  3468               	retlw	104	;'h'
  3851  0C3C  3421               	retlw	33	;'!'
  3852  0C3D  340D               	retlw	13
  3853  0C3E  340A               	retlw	10
  3854  0C3F  3400               	retlw	0
  3855  0C40                     STR_10:	
  3856  0C40  3456               	retlw	86	;'V'
  3857  0C41  346F               	retlw	111	;'o'
  3858  0C42  346C               	retlw	108	;'l'
  3859  0C43  3474               	retlw	116	;'t'
  3860  0C44  3461               	retlw	97	;'a'
  3861  0C45  3467               	retlw	103	;'g'
  3862  0C46  3465               	retlw	101	;'e'
  3863  0C47  3420               	retlw	32	;' '
  3864  0C48  3474               	retlw	116	;'t'
  3865  0C49  346F               	retlw	111	;'o'
  3866  0C4A  346F               	retlw	111	;'o'
  3867  0C4B  3420               	retlw	32	;' '
  3868  0C4C  344C               	retlw	76	;'L'
  3869  0C4D  346F               	retlw	111	;'o'
  3870  0C4E  3477               	retlw	119	;'w'
  3871  0C4F  3421               	retlw	33	;'!'
  3872  0C50  340D               	retlw	13
  3873  0C51  340A               	retlw	10
  3874  0C52  3400               	retlw	0
  3875  0C53                     STR_3:	
  3876  0C53  3446               	retlw	70	;'F'
  3877  0C54  3469               	retlw	105	;'i'
  3878  0C55  3472               	retlw	114	;'r'
  3879  0C56  346D               	retlw	109	;'m'
  3880  0C57  3477               	retlw	119	;'w'
  3881  0C58  3461               	retlw	97	;'a'
  3882  0C59  3472               	retlw	114	;'r'
  3883  0C5A  3465               	retlw	101	;'e'
  3884  0C5B  3420               	retlw	32	;' '
  3885  0C5C  3456               	retlw	86	;'V'
  3886  0C5D  3465               	retlw	101	;'e'
  3887  0C5E  3472               	retlw	114	;'r'
  3888  0C5F  3473               	retlw	115	;'s'
  3889  0C60  3469               	retlw	105	;'i'
  3890  0C61  346F               	retlw	111	;'o'
  3891  0C62  346E               	retlw	110	;'n'
  3892  0C63  343A               	retlw	58	;':'
  3893  0C64  3420               	retlw	32	;' '
  3894  0C65  3400               	retlw	0
  3895  0C66                     STR_26:	
  3896  0C66  3445               	retlw	69	;'E'
  3897  0C67  346E               	retlw	110	;'n'
  3898  0C68  3474               	retlw	116	;'t'
  3899  0C69  3465               	retlw	101	;'e'
  3900  0C6A  3472               	retlw	114	;'r'
  3901  0C6B  3420               	retlw	32	;' '
  3902  0C6C  3442               	retlw	66	;'B'
  3903  0C6D  3461               	retlw	97	;'a'
  3904  0C6E  3475               	retlw	117	;'u'
  3905  0C6F  3464               	retlw	100	;'d'
  3906  0C70  3420               	retlw	32	;' '
  3907  0C71  3472               	retlw	114	;'r'
  3908  0C72  3461               	retlw	97	;'a'
  3909  0C73  3474               	retlw	116	;'t'
  3910  0C74  3465               	retlw	101	;'e'
  3911  0C75  340D               	retlw	13
  3912  0C76  340A               	retlw	10
  3913  0C77  3400               	retlw	0
  3914  0C78                     STR_9:	
  3915  0C78  344B               	retlw	75	;'K'
  3916  0C79  3465               	retlw	101	;'e'
  3917  0C7A  3479               	retlw	121	;'y'
  3918  0C7B  3462               	retlw	98	;'b'
  3919  0C7C  346F               	retlw	111	;'o'
  3920  0C7D  3461               	retlw	97	;'a'
  3921  0C7E  3472               	retlw	114	;'r'
  3922  0C7F  3464               	retlw	100	;'d'
  3923  0C80  3420               	retlw	32	;' '
  3924  0C81  3450               	retlw	80	;'P'
  3925  0C82  3461               	retlw	97	;'a'
  3926  0C83  3473               	retlw	115	;'s'
  3927  0C84  3473               	retlw	115	;'s'
  3928  0C85  3421               	retlw	33	;'!'
  3929  0C86  340D               	retlw	13
  3930  0C87  340A               	retlw	10
  3931  0C88  3400               	retlw	0
  3932  0C89                     STR_19:	
  3933  0C89  3450               	retlw	80	;'P'
  3934  0C8A  3472               	retlw	114	;'r'
  3935  0C8B  346F               	retlw	111	;'o'
  3936  0C8C  3467               	retlw	103	;'g'
  3937  0C8D  3472               	retlw	114	;'r'
  3938  0C8E  3461               	retlw	97	;'a'
  3939  0C8F  346D               	retlw	109	;'m'
  3940  0C90  3420               	retlw	32	;' '
  3941  0C91  3446               	retlw	70	;'F'
  3942  0C92  3461               	retlw	97	;'a'
  3943  0C93  3469               	retlw	105	;'i'
  3944  0C94  346C               	retlw	108	;'l'
  3945  0C95  340D               	retlw	13
  3946  0C96  340A               	retlw	10
  3947  0C97  3400               	retlw	0
  3948  0C98                     __end_of__stringdata:	
  3949                           
  3950                           ; #config settings
  3951  0000                     
  3952                           	psect	cinit
  3953  00DB                     start_initialization:	
  3954  00DB                     __initialization:	
  3955                           
  3956                           ; Clear objects allocated to BANK0
  3957  00DB  01E6               	clrf	__pbssBANK0& (0+127)
  3958  00DC  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3959  00DD  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3960  00DE  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3961  00DF  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3962                           
  3963                           ; Clear objects allocated to BANK1
  3964  00E0  0021               	movlb	1	; select bank1
  3965  00E1  01E8               	clrf	__pbssBANK1& (0+127)
  3966  00E2  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3967  00E3  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3968  00E4  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  3969                           
  3970                           ; Clear objects allocated to BANK2
  3971  00E5  305F               	movlw	low __pbssBANK2
  3972  00E6  0084               	movwf	4
  3973  00E7  3001               	movlw	high __pbssBANK2
  3974  00E8  0085               	movwf	5
  3975  00E9  300E               	movlw	14
  3976  00EA  3190  2000  3180   	fcall	clear_ram0
  3977                           
  3978                           ; Clear objects allocated to BANK3
  3979  00ED  30A0               	movlw	low __pbssBANK3
  3980  00EE  0084               	movwf	4
  3981  00EF  3001               	movlw	high __pbssBANK3
  3982  00F0  0085               	movwf	5
  3983  00F1  300F               	movlw	15
  3984  00F2  3190  2000  3180   	fcall	clear_ram0
  3985                           
  3986                           ; Clear objects allocated to BANK4
  3987  00F5  3020               	movlw	low __pbssBANK4
  3988  00F6  0084               	movwf	4
  3989  00F7  3002               	movlw	high __pbssBANK4
  3990  00F8  0085               	movwf	5
  3991  00F9  300C               	movlw	12
  3992  00FA  3190  2000  3180   	fcall	clear_ram0
  3993                           
  3994                           ; Initialize objects allocated to BANK2
  3995  00FD  0022               	movlb	2	; select bank2
  3996  00FE  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  3997  0101  00ED               	movwf	__pdataBANK2& (0+127)
  3998  0102  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  3999  0105  00EE               	movwf	(__pdataBANK2+1)& (0+127)
  4000                           
  4001                           ; Initialize objects allocated to BANK4
  4002  0106  3008               	movlw	low __pidataBANK4
  4003  0107  0084               	movwf	4
  4004  0108  3099               	movlw	(high __pidataBANK4)| (0+128)
  4005  0109  0085               	movwf	5
  4006  010A  302C               	movlw	low __pdataBANK4
  4007  010B  0086               	movwf	6
  4008  010C  3002               	movlw	high __pdataBANK4
  4009  010D  0087               	movwf	7
  4010  010E  300C               	movlw	12
  4011  010F  3198  20B5         	fcall	init_ram
  4012  0111                     end_of_initialization:	
  4013                           ;End of C runtime variable initialization code
  4014                           
  4015  0111                     __end_of__initialization:	
  4016  0111  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  4017  0112  0020               	movlb	0
  4018  0113  318E  2E48         	ljmp	_main	;jump to C main() function
  4019                           
  4020                           	psect	bssBANK0
  4021  0066                     __pbssBANK0:	
  4022  0066                     _Left_Shift_Key:	
  4023  0066                     	ds	1
  4024  0067                     _PARITY:	
  4025  0067                     	ds	1
  4026  0068                     _PS_2_bits:	
  4027  0068                     	ds	1
  4028  0069                     _ParityTyped:	
  4029  0069                     	ds	1
  4030  006A                     _Shift_Key:	
  4031  006A                     	ds	1
  4032                           
  4033                           	psect	bssBANK1
  4034  00E8                     __pbssBANK1:	
  4035  00E8                     _Alarm:	
  4036  00E8                     	ds	1
  4037  00E9                     _ECHO:	
  4038  00E9                     	ds	1
  4039  00EA                     _blinkdelay:	
  4040  00EA                     	ds	1
  4041  00EB                     _i:	
  4042  00EB                     	ds	1
  4043                           
  4044                           	psect	bssBANK2
  4045  015F                     __pbssBANK2:	
  4046  015F                     _BatteryVoltage:	
  4047  015F                     	ds	4
  4048  0163                     _BAUDMODE:	
  4049  0163                     	ds	1
  4050  0164                     _Caps_Lock_Key:	
  4051  0164                     	ds	1
  4052  0165                     _Caps_Lock_Key_old:	
  4053  0165                     	ds	1
  4054  0166                     _Delete:	
  4055  0166                     	ds	1
  4056  0167                     _LALT:	
  4057  0167                     	ds	1
  4058  0168                     _LControl:	
  4059  0168                     	ds	1
  4060  0169                     _Left_Shift_Key_old:	
  4061  0169                     	ds	1
  4062  016A                     _RALT:	
  4063  016A                     	ds	1
  4064  016B                     _RControl:	
  4065  016B                     	ds	1
  4066  016C                     _Right_Shift_Key_old:	
  4067  016C                     	ds	1
  4068                           
  4069                           	psect	dataBANK2
  4070  016D                     __pdataBANK2:	
  4071  016D                     _Read_Timer:	
  4072  016D                     	ds	2
  4073                           
  4074                           	psect	bssBANK3
  4075  01A0                     __pbssBANK3:	
  4076  01A0                     _BaudTyped:	
  4077  01A0                     	ds	4
  4078  01A4                     _PS_2_Read_Data_First:	
  4079  01A4                     	ds	2
  4080  01A6                     _PS_2_Read_Data_Forth:	
  4081  01A6                     	ds	2
  4082  01A8                     _PS_2_Read_Data_Second:	
  4083  01A8                     	ds	2
  4084  01AA                     _PS_2_Read_Data_Third:	
  4085  01AA                     	ds	2
  4086  01AC                     _CapsCount:	
  4087  01AC                     	ds	1
  4088  01AD                     _Caps_Lock:	
  4089  01AD                     	ds	1
  4090  01AE                     _Right_Shift_Key:	
  4091  01AE                     	ds	1
  4092                           
  4093                           	psect	bssBANK4
  4094  0220                     __pbssBANK4:	
  4095  0220                     _PS_2_Read_Data_FirstTEMP:	
  4096  0220                     	ds	2
  4097  0222                     _PS_2_Read_Data_ForthTEMP:	
  4098  0222                     	ds	2
  4099  0224                     _PS_2_Read_Data_SecondTEMP:	
  4100  0224                     	ds	2
  4101  0226                     _PS_2_Read_Data_ThirdTEMP:	
  4102  0226                     	ds	2
  4103  0228                     _SinLEDtimer:	
  4104  0228                     	ds	2
  4105  022A                     _pwrLEDtoggle:	
  4106  022A                     	ds	2
  4107                           
  4108                           	psect	dataBANK4
  4109  022C                     __pdataBANK4:	
  4110  022C                     _BAUD:	
  4111  022C                     	ds	4
  4112  0230                     _MEM:	
  4113  0230                     	ds	4
  4114  0234                     _Version:	
  4115  0234                     	ds	4
  4116                           
  4117                           	psect	clrtext
  4118  1000                     clear_ram0:	
  4119                           ;	Called with FSR0 containing the base address, and
  4120                           ;	WREG with the size to clear
  4121                           
  4122  1000  0064               	clrwdt	;clear the watchdog before getting into this loop
  4123  1001                     clrloop0:	
  4124  1001  0180               	clrf	0	;clear RAM location pointed to by FSR
  4125  1002  3101               	addfsr 0,1
  4126  1003  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4127  1004  2801               	goto	clrloop0	;have we reached the end yet?
  4128  1005  3400               	retlw	0	;all done for this memory range, return
  4129                           
  4130                           	psect	inittext
  4131  18B5                     init_ram:	
  4132  18B5  00FE               	movwf	126
  4133  18B6                     initloop:	
  4134  18B6  0012               	moviw fsr0++
  4135  18B7  001E               	movwi fsr1++
  4136  18B8  0BFE               	decfsz	126,f
  4137  18B9  28B6               	goto	initloop
  4138  18BA  3400               	retlw	0
  4139                           
  4140                           	psect	cstackBANK5
  4141  02A0                     __pcstackBANK5:	
  4142  02A0                     PS_2_Update@buf:	
  4143                           
  4144                           ; 60 bytes @ 0x0
  4145  02A0                     	ds	60
  4146  02DC                     _PS_2_Update$854:	
  4147                           
  4148                           ; 1 bytes @ 0x3C
  4149  02DC                     	ds	1
  4150  02DD                     _PS_2_Update$855:	
  4151                           
  4152                           ; 1 bytes @ 0x3D
  4153  02DD                     	ds	1
  4154  02DE                     _PS_2_Update$856:	
  4155                           
  4156                           ; 1 bytes @ 0x3E
  4157  02DE                     	ds	1
  4158  02DF                     _PS_2_Update$857:	
  4159                           
  4160                           ; 1 bytes @ 0x3F
  4161  02DF                     	ds	1
  4162  02E0                     PS_2_Update@temp:	
  4163                           
  4164                           ; 1 bytes @ 0x40
  4165  02E0                     	ds	1
  4166                           
  4167                           	psect	cstackBANK3
  4168  01AF                     __pcstackBANK3:	
  4169  01AF                     ??_PS_2_Update:	
  4170                           
  4171                           ; 0 bytes @ 0x0
  4172  01AF                     	ds	9
  4173                           
  4174                           	psect	cstackBANK2
  4175  0120                     __pcstackBANK2:	
  4176  0120                     SetBaud@buf:	
  4177                           
  4178                           ; 50 bytes @ 0x0
  4179  0120                     	ds	50
  4180  0152                     SetBaud@Baudtemp:	
  4181                           
  4182                           ; 4 bytes @ 0x32
  4183  0152                     	ds	4
  4184  0156                     SetBaud@Paritytemp:	
  4185                           
  4186                           ; 4 bytes @ 0x36
  4187  0156                     	ds	4
  4188  015A                     SetBaud@temp:	
  4189                           
  4190                           ; 4 bytes @ 0x3A
  4191  015A                     	ds	4
  4192  015E                     SetBaud@i:	
  4193                           
  4194                           ; 1 bytes @ 0x3E
  4195  015E                     	ds	1
  4196                           
  4197                           	psect	cstackBANK1
  4198  00A0                     __pcstackBANK1:	
  4199  00A0                     ReadVoltage@voltage:	
  4200  00A0                     WriteFlash_Sequential@TempBufH:	
  4201                           ; 4 bytes @ 0x0
  4202                           
  4203  00A0                     Init_System@buf:	
  4204                           ; 32 bytes @ 0x0
  4205                           
  4206                           
  4207                           ; 60 bytes @ 0x0
  4208  00A0                     	ds	4
  4209  00A4                     ReadVoltage@temp:	
  4210                           
  4211                           ; 2 bytes @ 0x4
  4212  00A4                     	ds	28
  4213  00C0                     WriteFlash_Sequential@TempBufL:	
  4214                           
  4215                           ; 32 bytes @ 0x20
  4216  00C0                     	ds	28
  4217  00DC                     Init_System@temp:	
  4218                           
  4219                           ; 4 bytes @ 0x3C
  4220  00DC                     	ds	4
  4221  00E0                     Init_System@Parity:	
  4222  00E0                     WriteFlash_Sequential@tempH:	
  4223                           ; 1 bytes @ 0x40
  4224                           
  4225                           
  4226                           ; 1 bytes @ 0x40
  4227  00E0                     	ds	1
  4228  00E1                     WriteFlash_Sequential@tempL:	
  4229  00E1                     Init_System@Baud:	
  4230                           ; 1 bytes @ 0x41
  4231                           
  4232                           
  4233                           ; 4 bytes @ 0x41
  4234  00E1                     	ds	1
  4235  00E2                     WriteFlash_Sequential@amountTemp:	
  4236                           
  4237                           ; 1 bytes @ 0x42
  4238  00E2                     	ds	1
  4239  00E3                     WriteFlash_Sequential@temp:	
  4240                           
  4241                           ; 2 bytes @ 0x43
  4242  00E3                     	ds	2
  4243  00E5                     WriteFlash_Sequential@spaces:	
  4244                           
  4245                           ; 1 bytes @ 0x45
  4246  00E5                     	ds	1
  4247  00E6                     WriteFlash_Sequential@i:	
  4248                           
  4249                           ; 1 bytes @ 0x46
  4250  00E6                     	ds	1
  4251  00E7                     main@i:	
  4252                           
  4253                           ; 1 bytes @ 0x47
  4254  00E7                     	ds	1
  4255                           
  4256                           	psect	cstackCOMMON
  4257  0070                     __pcstackCOMMON:	
  4258  0070                     ?_UART_send_break:	
  4259  0070                     ?_ConfigureOscillator:	
  4260                           ; 0 bytes @ 0x0
  4261                           
  4262  0070                     ?_InitApp:	
  4263                           ; 0 bytes @ 0x0
  4264                           
  4265  0070                     ?_Init_System:	
  4266                           ; 0 bytes @ 0x0
  4267                           
  4268  0070                     ?_PS_2_INIT:	
  4269                           ; 0 bytes @ 0x0
  4270                           
  4271  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4272                           ; 0 bytes @ 0x0
  4273                           
  4274  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4275                           ; 0 bytes @ 0x0
  4276                           
  4277  0070                     ?_PS_2_Update:	
  4278                           ; 0 bytes @ 0x0
  4279                           
  4280  0070                     ?_baudUSART:	
  4281                           ; 0 bytes @ 0x0
  4282                           
  4283  0070                     ?_Clock_TRIS:	
  4284                           ; 0 bytes @ 0x0
  4285                           
  4286  0070                     ?_Data_TRIS:	
  4287                           ; 0 bytes @ 0x0
  4288                           
  4289  0070                     ?_INIT_PS_2_INTERRUPT:	
  4290                           ; 0 bytes @ 0x0
  4291                           
  4292  0070                     ?_DisableInternalADC:	
  4293                           ; 0 bytes @ 0x0
  4294                           
  4295  0070                     ?_isr:	
  4296                           ; 0 bytes @ 0x0
  4297                           
  4298  0070                     ?_main:	
  4299                           ; 0 bytes @ 0x0
  4300                           
  4301  0070                     ?_CloseUSART:	
  4302                           ; 0 bytes @ 0x0
  4303                           
  4304  0070                     ?_UNLOCK:	
  4305                           ; 0 bytes @ 0x0
  4306                           
  4307  0070                     ??i1_ReadUSART:	
  4308                           ; 0 bytes @ 0x0
  4309                           
  4310  0070                     ?i1_UART_send_break:	
  4311                           ; 0 bytes @ 0x0
  4312                           
  4313  0070                     ??i1_UART_send_break:	
  4314                           ; 0 bytes @ 0x0
  4315                           
  4316  0070                     ??i1_READ_PS_2_PIN:	
  4317                           ; 0 bytes @ 0x0
  4318                           
  4319  0070                     ?_READ_PS_2_PIN:	
  4320                           ; 0 bytes @ 0x0
  4321                           
  4322  0070                     ?_ReadUSART:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?_Keyboard_Connected:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?_Init_PS_2_Send:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?_Decode_Scan_Code_Shift:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?_Send_PS2:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340  0070                     ?_Decode_Scan_Code:	
  4341                           ; 1 bytes @ 0x0
  4342                           
  4343  0070                     ?_Decode_Scan_Code_Function:	
  4344                           ; 1 bytes @ 0x0
  4345                           
  4346  0070                     ?_Reverse_Byte:	
  4347                           ; 1 bytes @ 0x0
  4348                           
  4349  0070                     ?_ISNUMBER:	
  4350                           ; 1 bytes @ 0x0
  4351                           
  4352  0070                     ?i1_CheckSum_byte:	
  4353                           ; 1 bytes @ 0x0
  4354                           
  4355  0070                     ?i1_ReadUSART:	
  4356                           ; 1 bytes @ 0x0
  4357                           
  4358  0070                     ?i1_READ_PS_2_PIN:	
  4359                           ; 1 bytes @ 0x0
  4360                           
  4361  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4362                           ; 1 bytes @ 0x0
  4363                           
  4364  0070                     i1CheckSum_byte@This:	
  4365                           ; 1 bytes @ 0x0
  4366                           
  4367                           
  4368                           ; 2 bytes @ 0x0
  4369  0070                     	ds	1
  4370  0071                     i1ReadUSART@data:	
  4371                           
  4372                           ; 1 bytes @ 0x1
  4373  0071                     	ds	1
  4374  0072                     i1CheckSum_byte@Odd_Even:	
  4375                           
  4376                           ; 1 bytes @ 0x2
  4377  0072                     	ds	1
  4378  0073                     ??i1_CheckSum_byte:	
  4379                           
  4380                           ; 0 bytes @ 0x3
  4381  0073                     	ds	1
  4382  0074                     i1CheckSum_byte@ThisTemp:	
  4383                           
  4384                           ; 2 bytes @ 0x4
  4385  0074                     	ds	2
  4386  0076                     i1CheckSum_byte@Parity:	
  4387                           
  4388                           ; 1 bytes @ 0x6
  4389  0076                     	ds	1
  4390  0077                     i1CheckSum_byte@i:	
  4391                           
  4392                           ; 1 bytes @ 0x7
  4393  0077                     	ds	1
  4394  0078                     ?i1_UARTchar:	
  4395  0078                     i1UARTchar@NinethBit_override:	
  4396                           ; 0 bytes @ 0x8
  4397                           
  4398                           
  4399                           ; 1 bytes @ 0x8
  4400  0078                     	ds	1
  4401  0079                     i1UARTchar@NinethBit_override_data:	
  4402                           
  4403                           ; 1 bytes @ 0x9
  4404  0079                     	ds	1
  4405  007A                     ??i1_UARTchar:	
  4406                           
  4407                           ; 0 bytes @ 0xA
  4408  007A                     	ds	4
  4409                           
  4410                           	psect	cstackBANK0
  4411  0020                     __pcstackBANK0:	
  4412  0020                     i1UARTchar@data:	
  4413                           
  4414                           ; 1 bytes @ 0x0
  4415  0020                     	ds	1
  4416  0021                     ??_isr:	
  4417                           
  4418                           ; 0 bytes @ 0x1
  4419  0021                     	ds	2
  4420  0023                     isr@Rx_fault:	
  4421                           
  4422                           ; 1 bytes @ 0x3
  4423  0023                     	ds	1
  4424  0024                     isr@rx:	
  4425                           
  4426                           ; 1 bytes @ 0x4
  4427  0024                     	ds	1
  4428  0025                     ??_READ_PS_2_PIN:	
  4429  0025                     ??_ReadUSART:	
  4430                           ; 0 bytes @ 0x5
  4431                           
  4432  0025                     ??_UART_send_break:	
  4433                           ; 0 bytes @ 0x5
  4434                           
  4435  0025                     ??_ConfigureOscillator:	
  4436                           ; 0 bytes @ 0x5
  4437                           
  4438  0025                     ??_InitApp:	
  4439                           ; 0 bytes @ 0x5
  4440                           
  4441  0025                     ?_delayUS:	
  4442                           ; 0 bytes @ 0x5
  4443                           
  4444  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4445                           ; 0 bytes @ 0x5
  4446                           
  4447  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4448                           ; 0 bytes @ 0x5
  4449                           
  4450  0025                     ?_OpenUSART:	
  4451                           ; 0 bytes @ 0x5
  4452                           
  4453  0025                     ??_baudUSART:	
  4454                           ; 0 bytes @ 0x5
  4455                           
  4456  0025                     ??_Clock_TRIS:	
  4457                           ; 0 bytes @ 0x5
  4458                           
  4459  0025                     ??_Data_TRIS:	
  4460                           ; 0 bytes @ 0x5
  4461                           
  4462  0025                     ??_INIT_PS_2_INTERRUPT:	
  4463                           ; 0 bytes @ 0x5
  4464                           
  4465  0025                     ??_Decode_Scan_Code_Shift:	
  4466                           ; 0 bytes @ 0x5
  4467                           
  4468  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4469                           ; 0 bytes @ 0x5
  4470                           
  4471  0025                     ??_Decode_Scan_Code:	
  4472                           ; 0 bytes @ 0x5
  4473                           
  4474  0025                     ??_Decode_Scan_Code_Function:	
  4475                           ; 0 bytes @ 0x5
  4476                           
  4477  0025                     ??_DisableInternalADC:	
  4478                           ; 0 bytes @ 0x5
  4479                           
  4480  0025                     ??_Reverse_Byte:	
  4481                           ; 0 bytes @ 0x5
  4482                           
  4483  0025                     ??_ISNUMBER:	
  4484                           ; 0 bytes @ 0x5
  4485                           
  4486  0025                     ??_CloseUSART:	
  4487                           ; 0 bytes @ 0x5
  4488                           
  4489  0025                     ??_UNLOCK:	
  4490                           ; 0 bytes @ 0x5
  4491                           
  4492  0025                     ?_BlockErase:	
  4493                           ; 0 bytes @ 0x5
  4494                           
  4495  0025                     ?___flge:	
  4496                           ; 0 bytes @ 0x5
  4497                           
  4498  0025                     ?_CheckSum_byte:	
  4499                           ; 1 bit 
  4500                           
  4501  0025                     ?_ReadFlash_2Byte:	
  4502                           ; 1 bytes @ 0x5
  4503                           
  4504  0025                     ?___flpack:	
  4505                           ; 2 bytes @ 0x5
  4506                           
  4507  0025                     ?___lmul:	
  4508                           ; 4 bytes @ 0x5
  4509                           
  4510  0025                     ?___lldiv:	
  4511                           ; 4 bytes @ 0x5
  4512                           
  4513  0025                     ISNUMBER@ascii:	
  4514                           ; 4 bytes @ 0x5
  4515                           
  4516  0025                     baudUSART@baudconfig:	
  4517                           ; 1 bytes @ 0x5
  4518                           
  4519  0025                     Clock_TRIS@direction:	
  4520                           ; 1 bytes @ 0x5
  4521                           
  4522  0025                     Data_TRIS@direction:	
  4523                           ; 1 bytes @ 0x5
  4524                           
  4525  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4526                           ; 1 bytes @ 0x5
  4527                           
  4528  0025                     READ_PS_2_PIN@DATA_CLK:	
  4529                           ; 1 bytes @ 0x5
  4530                           
  4531  0025                     Decode_Scan_Code@Code:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0025                     Decode_Scan_Code_Shift@Code:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0025                     Decode_Scan_Code_Function@Code:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0025                     CheckSum_byte@This:	
  4544                           ; 1 bytes @ 0x5
  4545                           
  4546  0025                     OpenUSART@spbrg:	
  4547                           ; 2 bytes @ 0x5
  4548                           
  4549  0025                     ReadFlash_2Byte@row:	
  4550                           ; 2 bytes @ 0x5
  4551                           
  4552  0025                     BlockErase@row:	
  4553                           ; 2 bytes @ 0x5
  4554                           
  4555  0025                     delayUS@US:	
  4556                           ; 2 bytes @ 0x5
  4557                           
  4558  0025                     ___lmul@multiplier:	
  4559                           ; 4 bytes @ 0x5
  4560                           
  4561  0025                     ___flpack@arg:	
  4562                           ; 4 bytes @ 0x5
  4563                           
  4564  0025                     ___flge@ff1:	
  4565                           ; 4 bytes @ 0x5
  4566                           
  4567  0025                     ___lldiv@divisor:	
  4568                           ; 4 bytes @ 0x5
  4569                           
  4570                           
  4571                           ; 4 bytes @ 0x5
  4572  0025                     	ds	1
  4573  0026                     ??_PS_2_INIT:	
  4574  0026                     ReadUSART@data:	
  4575                           ; 0 bytes @ 0x6
  4576                           
  4577  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4578                           ; 1 bytes @ 0x6
  4579                           
  4580  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4581                           ; 1 bytes @ 0x6
  4582                           
  4583                           
  4584                           ; 1 bytes @ 0x6
  4585  0026                     	ds	1
  4586  0027                     ??_OpenUSART:	
  4587  0027                     ??_BlockErase:	
  4588                           ; 0 bytes @ 0x7
  4589                           
  4590  0027                     CheckSum_byte@Odd_Even:	
  4591                           ; 0 bytes @ 0x7
  4592                           
  4593  0027                     Reverse_Byte@temp:	
  4594                           ; 1 bytes @ 0x7
  4595                           
  4596  0027                     OpenUSART@config:	
  4597                           ; 1 bytes @ 0x7
  4598                           
  4599  0027                     ReadFlash_2Byte@column:	
  4600                           ; 1 bytes @ 0x7
  4601                           
  4602                           
  4603                           ; 1 bytes @ 0x7
  4604  0027                     	ds	1
  4605  0028                     ??_CheckSum_byte:	
  4606  0028                     ??_ReadFlash_2Byte:	
  4607                           ; 0 bytes @ 0x8
  4608                           
  4609  0028                     Reverse_Byte@This:	
  4610                           ; 0 bytes @ 0x8
  4611                           
  4612                           
  4613                           ; 1 bytes @ 0x8
  4614  0028                     	ds	1
  4615  0029                     ??_delayUS:	
  4616  0029                     ___flpack@exp:	
  4617                           ; 0 bytes @ 0x9
  4618                           
  4619  0029                     CheckSum_byte@ThisTemp:	
  4620                           ; 1 bytes @ 0x9
  4621                           
  4622  0029                     ___lmul@multiplicand:	
  4623                           ; 2 bytes @ 0x9
  4624                           
  4625  0029                     ___flge@ff2:	
  4626                           ; 4 bytes @ 0x9
  4627                           
  4628  0029                     ___lldiv@dividend:	
  4629                           ; 4 bytes @ 0x9
  4630                           
  4631                           
  4632                           ; 4 bytes @ 0x9
  4633  0029                     	ds	1
  4634  002A                     ?_ReadFlash_4Byte:	
  4635  002A                     ___flpack@sign:	
  4636                           ; 4 bytes @ 0xA
  4637                           
  4638  002A                     ReadFlash_4Byte@row:	
  4639                           ; 1 bytes @ 0xA
  4640                           
  4641  002A                     delayUS@i:	
  4642                           ; 2 bytes @ 0xA
  4643                           
  4644                           
  4645                           ; 4 bytes @ 0xA
  4646  002A                     	ds	1
  4647  002B                     ??___flpack:	
  4648  002B                     CheckSum_byte@Parity:	
  4649                           ; 0 bytes @ 0xB
  4650                           
  4651                           
  4652                           ; 1 bytes @ 0xB
  4653  002B                     	ds	1
  4654  002C                     CheckSum_byte@i:	
  4655  002C                     ReadFlash_4Byte@column:	
  4656                           ; 1 bytes @ 0xC
  4657                           
  4658                           
  4659                           ; 1 bytes @ 0xC
  4660  002C                     	ds	1
  4661  002D                     ?_UARTchar:	
  4662  002D                     ??___lmul:	
  4663                           ; 0 bytes @ 0xD
  4664                           
  4665  002D                     ??___flge:	
  4666                           ; 0 bytes @ 0xD
  4667                           
  4668  002D                     ??___lldiv:	
  4669                           ; 0 bytes @ 0xD
  4670                           
  4671  002D                     UARTchar@NinethBit_override:	
  4672                           ; 0 bytes @ 0xD
  4673                           
  4674  002D                     ___lmul@product:	
  4675                           ; 1 bytes @ 0xD
  4676                           
  4677                           
  4678                           ; 4 bytes @ 0xD
  4679  002D                     	ds	1
  4680  002E                     ??_ReadFlash_4Byte:	
  4681  002E                     delayUS@j:	
  4682                           ; 0 bytes @ 0xE
  4683                           
  4684  002E                     UARTchar@NinethBit_override_data:	
  4685                           ; 1 bytes @ 0xE
  4686                           
  4687  002E                     ___lldiv@quotient:	
  4688                           ; 1 bytes @ 0xE
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0xE
  4692  002E                     	ds	1
  4693  002F                     ??_UARTchar:	
  4694  002F                     ??_Send_PS2:	
  4695                           ; 0 bytes @ 0xF
  4696                           
  4697  002F                     ?_WriteFlash_Sequential:	
  4698                           ; 0 bytes @ 0xF
  4699                           
  4700  002F                     ?_InternalADC_Read:	
  4701                           ; 0 bytes @ 0xF
  4702                           
  4703  002F                     ?___lwtofl:	
  4704                           ; 2 bytes @ 0xF
  4705                           
  4706  002F                     WriteFlash_Sequential@row:	
  4707                           ; 4 bytes @ 0xF
  4708                           
  4709  002F                     ___lwtofl@c:	
  4710                           ; 2 bytes @ 0xF
  4711                           
  4712                           
  4713                           ; 2 bytes @ 0xF
  4714  002F                     	ds	2
  4715  0031                     ??_InternalADC_Read:	
  4716  0031                     WriteFlash_Sequential@buffer:	
  4717                           ; 0 bytes @ 0x11
  4718                           
  4719                           
  4720                           ; 1 bytes @ 0x11
  4721  0031                     	ds	1
  4722  0032                     WriteFlash_Sequential@amount:	
  4723  0032                     ___lldiv@counter:	
  4724                           ; 1 bytes @ 0x12
  4725                           
  4726                           
  4727                           ; 1 bytes @ 0x12
  4728  0032                     	ds	1
  4729  0033                     ?_InitUART:	
  4730  0033                     ??_WriteFlash_Sequential:	
  4731                           ; 0 bytes @ 0x13
  4732                           
  4733  0033                     ??___lwtofl:	
  4734                           ; 0 bytes @ 0x13
  4735                           
  4736  0033                     ?___llmod:	
  4737                           ; 0 bytes @ 0x13
  4738                           
  4739  0033                     UARTchar@data:	
  4740                           ; 4 bytes @ 0x13
  4741                           
  4742  0033                     Send_PS2@oddparity:	
  4743                           ; 1 bytes @ 0x13
  4744                           
  4745  0033                     InternalADC_Read@channel:	
  4746                           ; 1 bytes @ 0x13
  4747                           
  4748  0033                     InitUART@Baud:	
  4749                           ; 1 bytes @ 0x13
  4750                           
  4751  0033                     ReadFlash_4Byte@temp:	
  4752                           ; 4 bytes @ 0x13
  4753                           
  4754  0033                     ___llmod@divisor:	
  4755                           ; 4 bytes @ 0x13
  4756                           
  4757                           
  4758                           ; 4 bytes @ 0x13
  4759  0033                     	ds	1
  4760  0034                     ?_UARTstringWAIT:	
  4761  0034                     ?___fldiv:	
  4762                           ; 0 bytes @ 0x14
  4763                           
  4764  0034                     Send_PS2@command:	
  4765                           ; 4 bytes @ 0x14
  4766                           
  4767  0034                     UARTstringWAIT@data:	
  4768                           ; 1 bytes @ 0x14
  4769                           
  4770  0034                     ___fldiv@f2:	
  4771                           ; 2 bytes @ 0x14
  4772                           
  4773                           
  4774                           ; 4 bytes @ 0x14
  4775  0034                     	ds	1
  4776  0035                     Send_PS2@i:	
  4777                           
  4778                           ; 1 bytes @ 0x15
  4779  0035                     	ds	1
  4780  0036                     ??_UARTstringWAIT:	
  4781  0036                     ?_WriteBaud:	
  4782                           ; 0 bytes @ 0x16
  4783                           
  4784  0036                     Send_PS2@timeout:	
  4785                           ; 0 bytes @ 0x16
  4786                           
  4787  0036                     WriteBaud@row:	
  4788                           ; 2 bytes @ 0x16
  4789                           
  4790                           
  4791                           ; 2 bytes @ 0x16
  4792  0036                     	ds	1
  4793  0037                     ?_ReadBaud:	
  4794  0037                     InitUART@parity:	
  4795                           ; 4 bytes @ 0x17
  4796                           
  4797  0037                     ReadBaud@row:	
  4798                           ; 1 bytes @ 0x17
  4799                           
  4800  0037                     ___llmod@dividend:	
  4801                           ; 2 bytes @ 0x17
  4802                           
  4803                           
  4804                           ; 4 bytes @ 0x17
  4805  0037                     	ds	1
  4806  0038                     ??_Init_PS_2_Send:	
  4807  0038                     ??_InitUART:	
  4808                           ; 0 bytes @ 0x18
  4809                           
  4810  0038                     WriteBaud@Baud:	
  4811                           ; 0 bytes @ 0x18
  4812                           
  4813  0038                     ___fldiv@f1:	
  4814                           ; 4 bytes @ 0x18
  4815                           
  4816                           
  4817                           ; 4 bytes @ 0x18
  4818  0038                     	ds	1
  4819  0039                     ReadBaud@column:	
  4820                           
  4821                           ; 1 bytes @ 0x19
  4822  0039                     	ds	2
  4823  003B                     ??_ReadBaud:	
  4824  003B                     ??___llmod:	
  4825                           ; 0 bytes @ 0x1B
  4826                           
  4827                           
  4828                           ; 0 bytes @ 0x1B
  4829  003B                     	ds	1
  4830  003C                     ??___fldiv:	
  4831  003C                     WriteBaud@Parity:	
  4832                           ; 0 bytes @ 0x1C
  4833                           
  4834  003C                     ___llmod@counter:	
  4835                           ; 1 bytes @ 0x1C
  4836                           
  4837                           
  4838                           ; 1 bytes @ 0x1C
  4839  003C                     	ds	1
  4840  003D                     ??_WriteBaud:	
  4841  003D                     ?_sprintf:	
  4842                           ; 0 bytes @ 0x1D
  4843                           
  4844  003D                     sprintf@sp:	
  4845                           ; 2 bytes @ 0x1D
  4846                           
  4847                           
  4848                           ; 2 bytes @ 0x1D
  4849  003D                     	ds	2
  4850  003F                     sprintf@f:	
  4851                           
  4852                           ; 2 bytes @ 0x1F
  4853  003F                     	ds	1
  4854  0040                     InitUART@spbrg:	
  4855                           
  4856                           ; 2 bytes @ 0x20
  4857  0040                     	ds	1
  4858  0041                     ___fldiv@f3:	
  4859                           
  4860                           ; 4 bytes @ 0x21
  4861  0041                     	ds	1
  4862  0042                     InitUART@baudconfig:	
  4863                           
  4864                           ; 1 bytes @ 0x22
  4865  0042                     	ds	1
  4866  0043                     InitUART@config:	
  4867  0043                     ReadBaud@temp:	
  4868                           ; 1 bytes @ 0x23
  4869                           
  4870                           
  4871                           ; 4 bytes @ 0x23
  4872  0043                     	ds	1
  4873  0044                     InitUART@temp:	
  4874                           
  4875                           ; 4 bytes @ 0x24
  4876  0044                     	ds	1
  4877  0045                     ??_sprintf:	
  4878  0045                     ___fldiv@cntr:	
  4879                           ; 0 bytes @ 0x25
  4880                           
  4881  0045                     WriteBaud@temp:	
  4882                           ; 1 bytes @ 0x25
  4883                           
  4884                           
  4885                           ; 4 bytes @ 0x25
  4886  0045                     	ds	1
  4887  0046                     ___fldiv@exp:	
  4888                           
  4889                           ; 1 bytes @ 0x26
  4890  0046                     	ds	1
  4891  0047                     ___fldiv@sign:	
  4892                           
  4893                           ; 1 bytes @ 0x27
  4894  0047                     	ds	1
  4895  0048                     ?___flmul:	
  4896  0048                     ___flmul@f1:	
  4897                           ; 4 bytes @ 0x28
  4898                           
  4899                           
  4900                           ; 4 bytes @ 0x28
  4901  0048                     	ds	3
  4902  004B                     sprintf@flag:	
  4903                           
  4904                           ; 1 bytes @ 0x2B
  4905  004B                     	ds	1
  4906  004C                     sprintf@prec:	
  4907  004C                     ___flmul@f2:	
  4908                           ; 2 bytes @ 0x2C
  4909                           
  4910                           
  4911                           ; 4 bytes @ 0x2C
  4912  004C                     	ds	2
  4913  004E                     sprintf@_val:	
  4914                           
  4915                           ; 4 bytes @ 0x2E
  4916  004E                     	ds	2
  4917  0050                     ??___flmul:	
  4918                           
  4919                           ; 0 bytes @ 0x30
  4920  0050                     	ds	2
  4921  0052                     sprintf@ap:	
  4922                           
  4923                           ; 1 bytes @ 0x32
  4924  0052                     	ds	1
  4925  0053                     sprintf@c:	
  4926                           
  4927                           ; 1 bytes @ 0x33
  4928  0053                     	ds	1
  4929  0054                     ??_Init_System:	
  4930  0054                     ?_SetBaud:	
  4931                           ; 0 bytes @ 0x34
  4932                           
  4933  0054                     SetBaud@Baud:	
  4934                           ; 0 bytes @ 0x34
  4935                           
  4936                           
  4937                           ; 4 bytes @ 0x34
  4938  0054                     	ds	1
  4939  0055                     ___flmul@exp:	
  4940                           
  4941                           ; 1 bytes @ 0x35
  4942  0055                     	ds	1
  4943  0056                     ___flmul@f3_as_product:	
  4944                           
  4945                           ; 4 bytes @ 0x36
  4946  0056                     	ds	2
  4947  0058                     SetBaud@Parity:	
  4948                           
  4949                           ; 1 bytes @ 0x38
  4950  0058                     	ds	1
  4951  0059                     ??_SetBaud:	
  4952                           
  4953                           ; 0 bytes @ 0x39
  4954  0059                     	ds	1
  4955  005A                     ___flmul@cntr:	
  4956                           
  4957                           ; 1 bytes @ 0x3A
  4958  005A                     	ds	1
  4959  005B                     ___flmul@sign:	
  4960                           
  4961                           ; 1 bytes @ 0x3B
  4962  005B                     	ds	1
  4963  005C                     ?_ReadVoltage:	
  4964                           
  4965                           ; 4 bytes @ 0x3C
  4966  005C                     	ds	4
  4967  0060                     ??_ReadVoltage:	
  4968                           
  4969                           ; 0 bytes @ 0x40
  4970  0060                     	ds	1
  4971  0061                     ??_Keyboard_Connected:	
  4972  0061                     Keyboard_Connected@i:	
  4973                           ; 0 bytes @ 0x41
  4974                           
  4975                           
  4976                           ; 4 bytes @ 0x41
  4977  0061                     	ds	4
  4978  0065                     ??_main:	
  4979                           
  4980                           ; 0 bytes @ 0x45
  4981  0065                     	ds	1
  4982                           
  4983                           	psect	maintext
  4984  0E48                     __pmaintext:	
  4985 ;;
  4986 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4987 ;;
  4988 ;; *************** function _main *****************
  4989 ;; Defined at:
  4990 ;;		line 69 in file "main.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  i               1   71[BANK1 ] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 17F/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;Total ram usage:        2 bytes
  5009 ;; Hardware stack levels required when called:   10
  5010 ;; This function calls:
  5011 ;;		_ConfigureOscillator
  5012 ;;		_InitApp
  5013 ;;		_Init_PS_2_Send
  5014 ;;		_Init_System
  5015 ;;		_Keyboard_Connected
  5016 ;;		_PS_2_DISABLE_INTERRUPT
  5017 ;;		_PS_2_ENABLE_INTERRUPT
  5018 ;;		_PS_2_INIT
  5019 ;;		_PS_2_Update
  5020 ;;		_ReadVoltage
  5021 ;;		_UARTstringWAIT
  5022 ;;		___flge
  5023 ;;		_delayUS
  5024 ;; This function is called by:
  5025 ;;		Startup code after reset
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           
  5030                           ;psect for function _main
  5031  0E48                     _main:	
  5032                           
  5033                           ;main.c: 71: unsigned char i=0;
  5034                           
  5035                           ;incstack = 0
  5036                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5037  0E48  0021               	movlb	1	; select bank1
  5038  0E49  01E7               	clrf	main@i^(0+128)
  5039                           
  5040                           ;main.c: 73: ConfigureOscillator();
  5041  0E4A  3199  2140  318E   	fcall	_ConfigureOscillator
  5042                           
  5043                           ;main.c: 74: InitApp();
  5044  0E4D  3190  2006  318E   	fcall	_InitApp
  5045                           
  5046                           ;main.c: 75: Init_System();
  5047  0E50  3195  2583  318E   	fcall	_Init_System
  5048                           
  5049                           ;main.c: 76: PS_2_INIT();
  5050  0E53  3198  20FC  318E   	fcall	_PS_2_INIT
  5051                           
  5052                           ;main.c: 79: for(i =0;i<10;i++)
  5053  0E56  0021               	movlb	1	; select bank1
  5054  0E57  01E7               	clrf	main@i^(0+128)
  5055  0E58  300A               	movlw	10
  5056  0E59  0267               	subwf	main@i^(0+128),w
  5057  0E5A  1803               	btfsc	3,0
  5058  0E5B  2E86               	goto	l7424
  5059  0E5C                     l158:	
  5060                           
  5061                           ;main.c: 80: {
  5062                           ;main.c: 81: LATC |= 0b00010000;
  5063  0E5C  0022               	movlb	2	; select bank2
  5064  0E5D  160E               	bsf	14,4	;volatile
  5065                           
  5066                           ;main.c: 82: delayUS(10000);
  5067  0E5E  3000               	movlw	0
  5068  0E5F  0020               	movlb	0	; select bank0
  5069  0E60  00A8               	movwf	delayUS@US+3
  5070  0E61  3000               	movlw	0
  5071  0E62  00A7               	movwf	delayUS@US+2
  5072  0E63  3027               	movlw	39
  5073  0E64  00A6               	movwf	delayUS@US+1
  5074  0E65  3010               	movlw	16
  5075  0E66  00A5               	movwf	delayUS@US
  5076  0E67  319B  2323  318E   	fcall	_delayUS
  5077                           
  5078                           ;main.c: 83: LATC &= ~0b00010000;
  5079  0E6A  30EF               	movlw	239
  5080  0E6B  0020               	movlb	0	; select bank0
  5081  0E6C  00E5               	movwf	??_main
  5082  0E6D  0865               	movf	??_main,w
  5083  0E6E  0022               	movlb	2	; select bank2
  5084  0E6F  058E               	andwf	14,f	;volatile
  5085                           
  5086                           ;main.c: 84: delayUS(10000);
  5087  0E70  3000               	movlw	0
  5088  0E71  0020               	movlb	0	; select bank0
  5089  0E72  00A8               	movwf	delayUS@US+3
  5090  0E73  3000               	movlw	0
  5091  0E74  00A7               	movwf	delayUS@US+2
  5092  0E75  3027               	movlw	39
  5093  0E76  00A6               	movwf	delayUS@US+1
  5094  0E77  3010               	movlw	16
  5095  0E78  00A5               	movwf	delayUS@US
  5096  0E79  319B  2323  318E   	fcall	_delayUS
  5097  0E7C  3001               	movlw	1
  5098  0E7D  0020               	movlb	0	; select bank0
  5099  0E7E  00E5               	movwf	??_main
  5100  0E7F  0865               	movf	??_main,w
  5101  0E80  0021               	movlb	1	; select bank1
  5102  0E81  07E7               	addwf	main@i^(0+128),f
  5103  0E82  300A               	movlw	10
  5104  0E83  0267               	subwf	main@i^(0+128),w
  5105  0E84  1C03               	skipc
  5106  0E85  2E5C               	goto	l158
  5107  0E86                     l7424:	
  5108                           
  5109                           ;main.c: 85: }
  5110                           ;main.c: 87: PS_2_DISABLE_INTERRUPT(0b00100000);
  5111  0E86  3020               	movlw	32
  5112  0E87  3199  21DD  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  5113                           
  5114                           ;main.c: 89: UARTstringWAIT("\r\n");
  5115  0E8A  303D               	movlw	low ((STR_11+17)| (0+32768))
  5116  0E8B  0020               	movlb	0	; select bank0
  5117  0E8C  00B4               	movwf	UARTstringWAIT@data
  5118  0E8D  308C               	movlw	high ((STR_11+17)| (0+32768))
  5119  0E8E  00B5               	movwf	UARTstringWAIT@data+1
  5120  0E8F  319A  22F0  318E   	fcall	_UARTstringWAIT
  5121                           
  5122                           ;main.c: 90: delayUS(10000);
  5123  0E92  3000               	movlw	0
  5124  0E93  0020               	movlb	0	; select bank0
  5125  0E94  00A8               	movwf	delayUS@US+3
  5126  0E95  3000               	movlw	0
  5127  0E96  00A7               	movwf	delayUS@US+2
  5128  0E97  3027               	movlw	39
  5129  0E98  00A6               	movwf	delayUS@US+1
  5130  0E99  3010               	movlw	16
  5131  0E9A  00A5               	movwf	delayUS@US
  5132  0E9B  319B  2323  318E   	fcall	_delayUS
  5133                           
  5134                           ;main.c: 91: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  5135  0E9E  30BB               	movlw	low (STR_2| (0+32768))
  5136  0E9F  0020               	movlb	0	; select bank0
  5137  0EA0  00B4               	movwf	UARTstringWAIT@data
  5138  0EA1  308B               	movlw	high (STR_2| (0+32768))
  5139  0EA2  00B5               	movwf	UARTstringWAIT@data+1
  5140  0EA3  319A  22F0  318E   	fcall	_UARTstringWAIT
  5141                           
  5142                           ;main.c: 92: delayUS(5000);
  5143  0EA6  3000               	movlw	0
  5144  0EA7  0020               	movlb	0	; select bank0
  5145  0EA8  00A8               	movwf	delayUS@US+3
  5146  0EA9  3000               	movlw	0
  5147  0EAA  00A7               	movwf	delayUS@US+2
  5148  0EAB  3013               	movlw	19
  5149  0EAC  00A6               	movwf	delayUS@US+1
  5150  0EAD  3088               	movlw	136
  5151  0EAE  00A5               	movwf	delayUS@US
  5152  0EAF  319B  2323  318E   	fcall	_delayUS
  5153                           
  5154                           ;main.c: 93: UARTstringWAIT("Firmware Version: ");
  5155  0EB2  3053               	movlw	low (STR_3| (0+32768))
  5156  0EB3  0020               	movlb	0	; select bank0
  5157  0EB4  00B4               	movwf	UARTstringWAIT@data
  5158  0EB5  308C               	movlw	high (STR_3| (0+32768))
  5159  0EB6  00B5               	movwf	UARTstringWAIT@data+1
  5160  0EB7  319A  22F0  318E   	fcall	_UARTstringWAIT
  5161                           
  5162                           ;main.c: 94: UARTstringWAIT(Version);
  5163  0EBA  3034               	movlw	low _Version
  5164  0EBB  0020               	movlb	0	; select bank0
  5165  0EBC  00B4               	movwf	UARTstringWAIT@data
  5166  0EBD  3002               	movlw	high _Version
  5167  0EBE  00B5               	movwf	UARTstringWAIT@data+1
  5168  0EBF  319A  22F0  318E   	fcall	_UARTstringWAIT
  5169                           
  5170                           ;main.c: 95: UARTstringWAIT("\r\n");
  5171  0EC2  303D               	movlw	low ((STR_11+17)| (0+32768))
  5172  0EC3  0020               	movlb	0	; select bank0
  5173  0EC4  00B4               	movwf	UARTstringWAIT@data
  5174  0EC5  308C               	movlw	high ((STR_11+17)| (0+32768))
  5175  0EC6  00B5               	movwf	UARTstringWAIT@data+1
  5176  0EC7  319A  22F0  318E   	fcall	_UARTstringWAIT
  5177                           
  5178                           ;main.c: 96: delayUS(5000);
  5179  0ECA  3000               	movlw	0
  5180  0ECB  0020               	movlb	0	; select bank0
  5181  0ECC  00A8               	movwf	delayUS@US+3
  5182  0ECD  3000               	movlw	0
  5183  0ECE  00A7               	movwf	delayUS@US+2
  5184  0ECF  3013               	movlw	19
  5185  0ED0  00A6               	movwf	delayUS@US+1
  5186  0ED1  3088               	movlw	136
  5187  0ED2  00A5               	movwf	delayUS@US
  5188  0ED3  319B  2323  318E   	fcall	_delayUS
  5189                           
  5190                           ;main.c: 97: UARTstringWAIT("To Change BAUD hit \"CNT+ALT+DEL\"\r\n");
  5191  0ED6  301C               	movlw	low (STR_5| (0+32768))
  5192  0ED7  0020               	movlb	0	; select bank0
  5193  0ED8  00B4               	movwf	UARTstringWAIT@data
  5194  0ED9  308B               	movlw	high (STR_5| (0+32768))
  5195  0EDA  00B5               	movwf	UARTstringWAIT@data+1
  5196  0EDB  319A  22F0  318E   	fcall	_UARTstringWAIT
  5197                           
  5198                           ;main.c: 98: delayUS(10000);
  5199  0EDE  3000               	movlw	0
  5200  0EDF  0020               	movlb	0	; select bank0
  5201  0EE0  00A8               	movwf	delayUS@US+3
  5202  0EE1  3000               	movlw	0
  5203  0EE2  00A7               	movwf	delayUS@US+2
  5204  0EE3  3027               	movlw	39
  5205  0EE4  00A6               	movwf	delayUS@US+1
  5206  0EE5  3010               	movlw	16
  5207  0EE6  00A5               	movwf	delayUS@US
  5208  0EE7  319B  2323  318E   	fcall	_delayUS
  5209                           
  5210                           ;main.c: 100: if(!Keyboard_Connected())
  5211  0EEA  319D  25AA  318E   	fcall	_Keyboard_Connected
  5212  0EED  3800               	iorlw	0
  5213  0EEE  1D03               	skipz
  5214  0EEF  2EFE               	goto	l7448
  5215                           
  5216                           ;main.c: 101: {
  5217                           ;main.c: 102: UARTstringWAIT("No Keyboard connected\r\n");
  5218  0EF0  30D5               	movlw	low (STR_6| (0+32768))
  5219  0EF1  0020               	movlb	0	; select bank0
  5220  0EF2  00B4               	movwf	UARTstringWAIT@data
  5221  0EF3  308B               	movlw	high (STR_6| (0+32768))
  5222  0EF4  00B5               	movwf	UARTstringWAIT@data+1
  5223  0EF5  319A  22F0  318E   	fcall	_UARTstringWAIT
  5224  0EF8                     l7446:	
  5225                           ;main.c: 104: while(!Keyboard_Connected());
  5226                           
  5227  0EF8  319D  25AA  318E   	fcall	_Keyboard_Connected
  5228  0EFB  3A00               	xorlw	0
  5229  0EFC  1903               	skipnz
  5230  0EFD  2EF8               	goto	l7446
  5231  0EFE                     l7448:	
  5232                           
  5233                           ;main.c: 105: }
  5234                           ;main.c: 106: UARTstringWAIT("Keyboard Connected\r\n");
  5235  0EFE  3003               	movlw	low (STR_7| (0+32768))
  5236  0EFF  0020               	movlb	0	; select bank0
  5237  0F00  00B4               	movwf	UARTstringWAIT@data
  5238  0F01  308C               	movlw	high (STR_7| (0+32768))
  5239  0F02  00B5               	movwf	UARTstringWAIT@data+1
  5240  0F03  319A  22F0  318E   	fcall	_UARTstringWAIT
  5241                           
  5242                           ;main.c: 107: if(!Init_PS_2_Send())
  5243  0F06  3193  239C  318E   	fcall	_Init_PS_2_Send
  5244  0F09  3800               	iorlw	0
  5245  0F0A  1D03               	skipz
  5246  0F0B  2F1D               	goto	l7456
  5247                           
  5248                           ;main.c: 108: {
  5249                           ;main.c: 109: delayUS(10000);
  5250  0F0C  3000               	movlw	0
  5251  0F0D  0020               	movlb	0	; select bank0
  5252  0F0E  00A8               	movwf	delayUS@US+3
  5253  0F0F  3000               	movlw	0
  5254  0F10  00A7               	movwf	delayUS@US+2
  5255  0F11  3027               	movlw	39
  5256  0F12  00A6               	movwf	delayUS@US+1
  5257  0F13  3010               	movlw	16
  5258  0F14  00A5               	movwf	delayUS@US
  5259  0F15  319B  2323  318E   	fcall	_delayUS
  5260                           
  5261                           ;main.c: 110: UARTstringWAIT("Initialization Fail\r\n");
  5262  0F18  30ED               	movlw	low (STR_8| (0+32768))
  5263  0F19  0020               	movlb	0	; select bank0
  5264  0F1A  00B4               	movwf	UARTstringWAIT@data
  5265  0F1B  308B               	movlw	high (STR_8| (0+32768))
  5266  0F1C  2F21               	goto	L1
  5267  0F1D                     l7456:	
  5268                           ;main.c: 111: }
  5269                           
  5270                           
  5271                           ;main.c: 112: else
  5272                           ;main.c: 113: {
  5273                           ;main.c: 114: UARTstringWAIT("Keyboard Pass!\r\n");
  5274  0F1D  3078               	movlw	low (STR_9| (0+32768))
  5275  0F1E  0020               	movlb	0	; select bank0
  5276  0F1F  00B4               	movwf	UARTstringWAIT@data
  5277  0F20  308C               	movlw	high (STR_9| (0+32768))
  5278  0F21                     L1:	
  5279  0F21  00B5               	movwf	UARTstringWAIT@data+1
  5280  0F22  319A  22F0  318E   	fcall	_UARTstringWAIT
  5281                           
  5282                           ;main.c: 115: }
  5283                           ;main.c: 116: BatteryVoltage = ReadVoltage();
  5284  0F25  319F  2792  318E   	fcall	_ReadVoltage
  5285  0F28  0020               	movlb	0	; select bank0
  5286  0F29  085F               	movf	?_ReadVoltage+3,w
  5287  0F2A  0022               	movlb	2	; select bank2
  5288  0F2B  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5289  0F2C  0020               	movlb	0	; select bank0
  5290  0F2D  085E               	movf	?_ReadVoltage+2,w
  5291  0F2E  0022               	movlb	2	; select bank2
  5292  0F2F  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5293  0F30  0020               	movlb	0	; select bank0
  5294  0F31  085D               	movf	?_ReadVoltage+1,w
  5295  0F32  0022               	movlb	2	; select bank2
  5296  0F33  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5297  0F34  0020               	movlb	0	; select bank0
  5298  0F35  085C               	movf	?_ReadVoltage,w
  5299  0F36  0022               	movlb	2	; select bank2
  5300  0F37  00DF               	movwf	_BatteryVoltage^(0+256)
  5301                           
  5302                           ;main.c: 117: if(BatteryVoltage < 4.65 )
  5303  0F38  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5304  0F39  0020               	movlb	0	; select bank0
  5305  0F3A  00A8               	movwf	___flge@ff1+3
  5306  0F3B  0022               	movlb	2	; select bank2
  5307  0F3C  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5308  0F3D  0020               	movlb	0	; select bank0
  5309  0F3E  00A7               	movwf	___flge@ff1+2
  5310  0F3F  0022               	movlb	2	; select bank2
  5311  0F40  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5312  0F41  0020               	movlb	0	; select bank0
  5313  0F42  00A6               	movwf	___flge@ff1+1
  5314  0F43  0022               	movlb	2	; select bank2
  5315  0F44  085F               	movf	_BatteryVoltage^(0+256),w
  5316  0F45  0020               	movlb	0	; select bank0
  5317  0F46  00A5               	movwf	___flge@ff1
  5318  0F47  3040               	movlw	64
  5319  0F48  00AC               	movwf	___flge@ff2+3
  5320  0F49  3094               	movlw	148
  5321  0F4A  00AB               	movwf	___flge@ff2+2
  5322  0F4B  30CC               	movlw	204
  5323  0F4C  00AA               	movwf	___flge@ff2+1
  5324  0F4D  30CD               	movlw	205
  5325  0F4E  00A9               	movwf	___flge@ff2
  5326  0F4F  319E  26C1  318E   	fcall	___flge
  5327  0F52  1803               	btfsc	3,0
  5328  0F53  2F59               	goto	l7464
  5329                           
  5330                           ;main.c: 118: {
  5331                           ;main.c: 119: UARTstringWAIT("Voltage too Low!\r\n");
  5332  0F54  3040               	movlw	low (STR_10| (0+32768))
  5333  0F55  0020               	movlb	0	; select bank0
  5334  0F56  00B4               	movwf	UARTstringWAIT@data
  5335  0F57  308C               	movlw	high (STR_10| (0+32768))
  5336  0F58  2F7B               	goto	L2
  5337  0F59                     l7464:	
  5338                           ;main.c: 120: }
  5339                           
  5340                           
  5341                           ;main.c: 121: else if (BatteryVoltage > 5.35)
  5342  0F59  3040               	movlw	64
  5343  0F5A  0020               	movlb	0	; select bank0
  5344  0F5B  00A8               	movwf	___flge@ff1+3
  5345  0F5C  30AB               	movlw	171
  5346  0F5D  00A7               	movwf	___flge@ff1+2
  5347  0F5E  3033               	movlw	51
  5348  0F5F  00A6               	movwf	___flge@ff1+1
  5349  0F60  3033               	movlw	51
  5350  0F61  00A5               	movwf	___flge@ff1
  5351  0F62  0022               	movlb	2	; select bank2
  5352  0F63  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5353  0F64  0020               	movlb	0	; select bank0
  5354  0F65  00AC               	movwf	___flge@ff2+3
  5355  0F66  0022               	movlb	2	; select bank2
  5356  0F67  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5357  0F68  0020               	movlb	0	; select bank0
  5358  0F69  00AB               	movwf	___flge@ff2+2
  5359  0F6A  0022               	movlb	2	; select bank2
  5360  0F6B  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5361  0F6C  0020               	movlb	0	; select bank0
  5362  0F6D  00AA               	movwf	___flge@ff2+1
  5363  0F6E  0022               	movlb	2	; select bank2
  5364  0F6F  085F               	movf	_BatteryVoltage^(0+256),w
  5365  0F70  0020               	movlb	0	; select bank0
  5366  0F71  00A9               	movwf	___flge@ff2
  5367  0F72  319E  26C1  318E   	fcall	___flge
  5368  0F75  1803               	btfsc	3,0
  5369  0F76  2F7F               	goto	l7468
  5370                           
  5371                           ;main.c: 122: {
  5372                           ;main.c: 123: UARTstringWAIT("Voltage too High!\r\n");
  5373  0F77  302C               	movlw	low (STR_11| (0+32768))
  5374  0F78  0020               	movlb	0	; select bank0
  5375  0F79  00B4               	movwf	UARTstringWAIT@data
  5376  0F7A  308C               	movlw	high (STR_11| (0+32768))
  5377  0F7B                     L2:	
  5378  0F7B  00B5               	movwf	UARTstringWAIT@data+1
  5379  0F7C  319A  22F0  318E   	fcall	_UARTstringWAIT
  5380  0F7F                     l7468:	
  5381                           
  5382                           ;main.c: 124: }
  5383                           ;main.c: 125: PS_2_ENABLE_INTERRUPT(0b00100000);
  5384  0F7F  3020               	movlw	32
  5385  0F80  3199  21B0  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5386  0F83                     l7470:	
  5387                           ;main.c: 127: while(1)
  5388                           
  5389                           
  5390                           ;main.c: 128: {
  5391                           ;main.c: 129: BatteryVoltage = ReadVoltage();
  5392  0F83  319F  2792  318E   	fcall	_ReadVoltage
  5393  0F86  0020               	movlb	0	; select bank0
  5394  0F87  085F               	movf	?_ReadVoltage+3,w
  5395  0F88  0022               	movlb	2	; select bank2
  5396  0F89  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5397  0F8A  0020               	movlb	0	; select bank0
  5398  0F8B  085E               	movf	?_ReadVoltage+2,w
  5399  0F8C  0022               	movlb	2	; select bank2
  5400  0F8D  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5401  0F8E  0020               	movlb	0	; select bank0
  5402  0F8F  085D               	movf	?_ReadVoltage+1,w
  5403  0F90  0022               	movlb	2	; select bank2
  5404  0F91  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5405  0F92  0020               	movlb	0	; select bank0
  5406  0F93  085C               	movf	?_ReadVoltage,w
  5407  0F94  0022               	movlb	2	; select bank2
  5408  0F95  00DF               	movwf	_BatteryVoltage^(0+256)
  5409                           
  5410                           ;main.c: 130: if(BatteryVoltage < 4.65 || BatteryVoltage > 5.35)
  5411  0F96  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5412  0F97  0020               	movlb	0	; select bank0
  5413  0F98  00A8               	movwf	___flge@ff1+3
  5414  0F99  0022               	movlb	2	; select bank2
  5415  0F9A  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5416  0F9B  0020               	movlb	0	; select bank0
  5417  0F9C  00A7               	movwf	___flge@ff1+2
  5418  0F9D  0022               	movlb	2	; select bank2
  5419  0F9E  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5420  0F9F  0020               	movlb	0	; select bank0
  5421  0FA0  00A6               	movwf	___flge@ff1+1
  5422  0FA1  0022               	movlb	2	; select bank2
  5423  0FA2  085F               	movf	_BatteryVoltage^(0+256),w
  5424  0FA3  0020               	movlb	0	; select bank0
  5425  0FA4  00A5               	movwf	___flge@ff1
  5426  0FA5  3040               	movlw	64
  5427  0FA6  00AC               	movwf	___flge@ff2+3
  5428  0FA7  3094               	movlw	148
  5429  0FA8  00AB               	movwf	___flge@ff2+2
  5430  0FA9  30CC               	movlw	204
  5431  0FAA  00AA               	movwf	___flge@ff2+1
  5432  0FAB  30CD               	movlw	205
  5433  0FAC  00A9               	movwf	___flge@ff2
  5434  0FAD  319E  26C1  318E   	fcall	___flge
  5435  0FB0  1C03               	btfss	3,0
  5436  0FB1  2FD0               	goto	l7476
  5437  0FB2  3040               	movlw	64
  5438  0FB3  0020               	movlb	0	; select bank0
  5439  0FB4  00A8               	movwf	___flge@ff1+3
  5440  0FB5  30AB               	movlw	171
  5441  0FB6  00A7               	movwf	___flge@ff1+2
  5442  0FB7  3033               	movlw	51
  5443  0FB8  00A6               	movwf	___flge@ff1+1
  5444  0FB9  3033               	movlw	51
  5445  0FBA  00A5               	movwf	___flge@ff1
  5446  0FBB  0022               	movlb	2	; select bank2
  5447  0FBC  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5448  0FBD  0020               	movlb	0	; select bank0
  5449  0FBE  00AC               	movwf	___flge@ff2+3
  5450  0FBF  0022               	movlb	2	; select bank2
  5451  0FC0  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5452  0FC1  0020               	movlb	0	; select bank0
  5453  0FC2  00AB               	movwf	___flge@ff2+2
  5454  0FC3  0022               	movlb	2	; select bank2
  5455  0FC4  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5456  0FC5  0020               	movlb	0	; select bank0
  5457  0FC6  00AA               	movwf	___flge@ff2+1
  5458  0FC7  0022               	movlb	2	; select bank2
  5459  0FC8  085F               	movf	_BatteryVoltage^(0+256),w
  5460  0FC9  0020               	movlb	0	; select bank0
  5461  0FCA  00A9               	movwf	___flge@ff2
  5462  0FCB  319E  26C1  318E   	fcall	___flge
  5463  0FCE  1803               	btfsc	3,0
  5464  0FCF  2FE6               	goto	l170
  5465  0FD0                     l7476:	
  5466                           
  5467                           ;main.c: 131: {
  5468                           ;main.c: 132: pwrLEDtoggle++;
  5469  0FD0  3001               	movlw	1
  5470  0FD1  0024               	movlb	4	; select bank4
  5471  0FD2  07AA               	addwf	_pwrLEDtoggle^(0+512),f
  5472  0FD3  3000               	movlw	0
  5473  0FD4  3DAB               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5474                           
  5475                           ;main.c: 133: if(pwrLEDtoggle > 1000)
  5476  0FD5  3003               	movlw	3
  5477  0FD6  022B               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5478  0FD7  30E9               	movlw	233
  5479  0FD8  1903               	skipnz
  5480  0FD9  022A               	subwf	_pwrLEDtoggle^(0+512),w
  5481  0FDA  1C03               	skipc
  5482  0FDB  2FE8               	goto	l7482
  5483                           
  5484                           ;main.c: 134: {
  5485                           ;main.c: 135: LATC ^= 0b00000010;
  5486  0FDC  3002               	movlw	2
  5487  0FDD  0020               	movlb	0	; select bank0
  5488  0FDE  00E5               	movwf	??_main
  5489  0FDF  0865               	movf	??_main,w
  5490  0FE0  0022               	movlb	2	; select bank2
  5491  0FE1  068E               	xorwf	14,f	;volatile
  5492                           
  5493                           ;main.c: 136: pwrLEDtoggle = 0;
  5494  0FE2  0024               	movlb	4	; select bank4
  5495  0FE3  01AA               	clrf	_pwrLEDtoggle^(0+512)
  5496  0FE4  01AB               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5497                           
  5498                           ;main.c: 137: }
  5499                           ;main.c: 138: }
  5500  0FE5  2FE8               	goto	l7482
  5501  0FE6                     l170:	
  5502                           
  5503                           ;main.c: 139: else
  5504                           ;main.c: 140: {
  5505                           ;main.c: 141: LATC |= 0b00000010;
  5506  0FE6  0022               	movlb	2	; select bank2
  5507  0FE7  148E               	bsf	14,1	;volatile
  5508  0FE8                     l7482:	
  5509                           
  5510                           ;main.c: 142: }
  5511                           ;main.c: 143: if(SinLEDtimer >= 100)
  5512  0FE8  3000               	movlw	0
  5513  0FE9  0024               	movlb	4	; select bank4
  5514  0FEA  0229               	subwf	(_SinLEDtimer+1)^(0+512),w
  5515  0FEB  3064               	movlw	100
  5516  0FEC  1903               	skipnz
  5517  0FED  0228               	subwf	_SinLEDtimer^(0+512),w
  5518  0FEE  1C03               	skipc
  5519  0FEF  2FF7               	goto	l7486
  5520                           
  5521                           ;main.c: 144: {
  5522                           ;main.c: 145: LATC &= ~0b00001000;
  5523  0FF0  30F7               	movlw	247
  5524  0FF1  0020               	movlb	0	; select bank0
  5525  0FF2  00E5               	movwf	??_main
  5526  0FF3  0865               	movf	??_main,w
  5527  0FF4  0022               	movlb	2	; select bank2
  5528  0FF5  058E               	andwf	14,f	;volatile
  5529                           
  5530                           ;main.c: 146: }
  5531  0FF6  2FFC               	goto	l7488
  5532  0FF7                     l7486:	
  5533                           
  5534                           ;main.c: 147: else
  5535                           ;main.c: 148: {
  5536                           ;main.c: 149: SinLEDtimer++;
  5537  0FF7  3001               	movlw	1
  5538  0FF8  0024               	movlb	4	; select bank4
  5539  0FF9  07A8               	addwf	_SinLEDtimer^(0+512),f
  5540  0FFA  3000               	movlw	0
  5541  0FFB  3DA9               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5542  0FFC                     l7488:	
  5543                           
  5544                           ;main.c: 150: }
  5545                           ;main.c: 151: PS_2_Update();
  5546  0FFC  3181  2115  318E   	fcall	_PS_2_Update
  5547  0FFF  2F83               	goto	l7470
  5548  1000                     __end_of_main:	
  5549                           
  5550                           	psect	text1
  5551  1EC1                     __ptext1:	
  5552 ;; *************** function ___flge *****************
  5553 ;; Defined at:
  5554 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  ff1             4    5[BANK0 ] unsigned char 
  5557 ;;  ff2             4    9[BANK0 ] unsigned char 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;		None               void
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5569 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;Total ram usage:       16 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    3
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_main
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function ___flge
  5585  1EC1                     ___flge:	
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5589  1EC1  0020               	movlb	0	; select bank0
  5590  1EC2  1FA8               	btfss	___flge@ff1+3,7
  5591  1EC3  2EEB               	goto	l5474
  5592  1EC4  3000               	movlw	0
  5593  1EC5  00AD               	movwf	??___flge
  5594  1EC6  3000               	movlw	0
  5595  1EC7  00AE               	movwf	??___flge+1
  5596  1EC8  3000               	movlw	0
  5597  1EC9  00AF               	movwf	??___flge+2
  5598  1ECA  3080               	movlw	128
  5599  1ECB  00B0               	movwf	??___flge+3
  5600  1ECC  0925               	comf	___flge@ff1,w
  5601  1ECD  00B1               	movwf	??___flge+4
  5602  1ECE  0926               	comf	___flge@ff1+1,w
  5603  1ECF  00B2               	movwf	??___flge+5
  5604  1ED0  0927               	comf	___flge@ff1+2,w
  5605  1ED1  00B3               	movwf	??___flge+6
  5606  1ED2  0928               	comf	___flge@ff1+3,w
  5607  1ED3  00B4               	movwf	??___flge+7
  5608  1ED4  0AB1               	incf	??___flge+4,f
  5609  1ED5  1903               	skipnz
  5610  1ED6  0AB2               	incf	??___flge+5,f
  5611  1ED7  1903               	skipnz
  5612  1ED8  0AB3               	incf	??___flge+6,f
  5613  1ED9  1903               	skipnz
  5614  1EDA  0AB4               	incf	??___flge+7,f
  5615  1EDB  0831               	movf	??___flge+4,w
  5616  1EDC  07AD               	addwf	??___flge,f
  5617  1EDD  0832               	movf	??___flge+5,w
  5618  1EDE  3DAE               	addwfc	??___flge+1,f
  5619  1EDF  0833               	movf	??___flge+6,w
  5620  1EE0  3DAF               	addwfc	??___flge+2,f
  5621  1EE1  0834               	movf	??___flge+7,w
  5622  1EE2  3DB0               	addwfc	??___flge+3,f
  5623  1EE3  0830               	movf	??___flge+3,w
  5624  1EE4  00A8               	movwf	___flge@ff1+3
  5625  1EE5  082F               	movf	??___flge+2,w
  5626  1EE6  00A7               	movwf	___flge@ff1+2
  5627  1EE7  082E               	movf	??___flge+1,w
  5628  1EE8  00A6               	movwf	___flge@ff1+1
  5629  1EE9  082D               	movf	??___flge,w
  5630  1EEA  00A5               	movwf	___flge@ff1
  5631  1EEB                     l5474:	
  5632  1EEB  1FAC               	btfss	___flge@ff2+3,7
  5633  1EEC  2F14               	goto	l5478
  5634  1EED  3000               	movlw	0
  5635  1EEE  00AD               	movwf	??___flge
  5636  1EEF  3000               	movlw	0
  5637  1EF0  00AE               	movwf	??___flge+1
  5638  1EF1  3000               	movlw	0
  5639  1EF2  00AF               	movwf	??___flge+2
  5640  1EF3  3080               	movlw	128
  5641  1EF4  00B0               	movwf	??___flge+3
  5642  1EF5  0929               	comf	___flge@ff2,w
  5643  1EF6  00B1               	movwf	??___flge+4
  5644  1EF7  092A               	comf	___flge@ff2+1,w
  5645  1EF8  00B2               	movwf	??___flge+5
  5646  1EF9  092B               	comf	___flge@ff2+2,w
  5647  1EFA  00B3               	movwf	??___flge+6
  5648  1EFB  092C               	comf	___flge@ff2+3,w
  5649  1EFC  00B4               	movwf	??___flge+7
  5650  1EFD  0AB1               	incf	??___flge+4,f
  5651  1EFE  1903               	skipnz
  5652  1EFF  0AB2               	incf	??___flge+5,f
  5653  1F00  1903               	skipnz
  5654  1F01  0AB3               	incf	??___flge+6,f
  5655  1F02  1903               	skipnz
  5656  1F03  0AB4               	incf	??___flge+7,f
  5657  1F04  0831               	movf	??___flge+4,w
  5658  1F05  07AD               	addwf	??___flge,f
  5659  1F06  0832               	movf	??___flge+5,w
  5660  1F07  3DAE               	addwfc	??___flge+1,f
  5661  1F08  0833               	movf	??___flge+6,w
  5662  1F09  3DAF               	addwfc	??___flge+2,f
  5663  1F0A  0834               	movf	??___flge+7,w
  5664  1F0B  3DB0               	addwfc	??___flge+3,f
  5665  1F0C  0830               	movf	??___flge+3,w
  5666  1F0D  00AC               	movwf	___flge@ff2+3
  5667  1F0E  082F               	movf	??___flge+2,w
  5668  1F0F  00AB               	movwf	___flge@ff2+2
  5669  1F10  082E               	movf	??___flge+1,w
  5670  1F11  00AA               	movwf	___flge@ff2+1
  5671  1F12  082D               	movf	??___flge,w
  5672  1F13  00A9               	movwf	___flge@ff2
  5673  1F14                     l5478:	
  5674  1F14  3080               	movlw	128
  5675  1F15  06A8               	xorwf	___flge@ff1+3,f
  5676  1F16  3080               	movlw	128
  5677  1F17  06AC               	xorwf	___flge@ff2+3,f
  5678  1F18  082C               	movf	___flge@ff2+3,w
  5679  1F19  0228               	subwf	___flge@ff1+3,w
  5680  1F1A  1D03               	skipz
  5681  1F1B  0008               	return
  5682  1F1C  082B               	movf	___flge@ff2+2,w
  5683  1F1D  0227               	subwf	___flge@ff1+2,w
  5684  1F1E  1D03               	skipz
  5685  1F1F  0008               	return
  5686  1F20  082A               	movf	___flge@ff2+1,w
  5687  1F21  0226               	subwf	___flge@ff1+1,w
  5688  1F22  1D03               	skipz
  5689  1F23  0008               	return
  5690  1F24  0829               	movf	___flge@ff2,w
  5691  1F25  0225               	subwf	___flge@ff1,w
  5692  1F26  0008               	return
  5693  1F27                     __end_of___flge:	
  5694                           
  5695                           	psect	text2
  5696  1F92                     __ptext2:	
  5697 ;; *************** function _ReadVoltage *****************
  5698 ;; Defined at:
  5699 ;;		line 27 in file "ADC.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  voltage         4    0[BANK1 ] unsigned char 
  5704 ;;  temp            2    4[BANK1 ] unsigned int 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  4   60[BANK0 ] unsigned int 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0, pclath, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;Total ram usage:       11 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    5
  5721 ;; This function calls:
  5722 ;;		_DisableInternalADC
  5723 ;;		_InternalADC_Read
  5724 ;;		___fldiv
  5725 ;;		___flmul
  5726 ;;		___lwtofl
  5727 ;; This function is called by:
  5728 ;;		_main
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _ReadVoltage
  5734  1F92                     _ReadVoltage:	
  5735                           
  5736                           ;ADC.c: 29: unsigned int temp;
  5737                           ;ADC.c: 30: double voltage;
  5738                           ;ADC.c: 31: LATC &= ~0b00000001;
  5739                           
  5740                           ;incstack = 0
  5741                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5742  1F92  30FE               	movlw	254
  5743  1F93  0020               	movlb	0	; select bank0
  5744  1F94  00E0               	movwf	??_ReadVoltage
  5745  1F95  0860               	movf	??_ReadVoltage,w
  5746  1F96  0022               	movlb	2	; select bank2
  5747  1F97  058E               	andwf	14,f	;volatile
  5748                           
  5749                           ;ADC.c: 32: temp = InternalADC_Read(2);
  5750  1F98  3002               	movlw	2
  5751  1F99  319B  2397  319F   	fcall	_InternalADC_Read
  5752  1F9C  0020               	movlb	0	; select bank0
  5753  1F9D  0830               	movf	?_InternalADC_Read+1,w
  5754  1F9E  0021               	movlb	1	; select bank1
  5755  1F9F  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5756  1FA0  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5757  1FA1  0020               	movlb	0	; select bank0
  5758  1FA2  082F               	movf	?_InternalADC_Read,w
  5759  1FA3  0021               	movlb	1	; select bank1
  5760  1FA4  01A4               	clrf	ReadVoltage@temp^(0+128)
  5761  1FA5  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5762                           
  5763                           ;ADC.c: 33: DisableInternalADC();
  5764  1FA6  3187  27F8  319F   	fcall	_DisableInternalADC
  5765                           
  5766                           ;ADC.c: 34: LATC |= 0b00000001;
  5767  1FA9  0022               	movlb	2	; select bank2
  5768  1FAA  140E               	bsf	14,0	;volatile
  5769                           
  5770                           ;ADC.c: 37: voltage = ((double)temp / 1000) * 5.7;
  5771  1FAB  3040               	movlw	64
  5772  1FAC  0020               	movlb	0	; select bank0
  5773  1FAD  00CB               	movwf	___flmul@f1+3
  5774  1FAE  30B6               	movlw	182
  5775  1FAF  00CA               	movwf	___flmul@f1+2
  5776  1FB0  3066               	movlw	102
  5777  1FB1  00C9               	movwf	___flmul@f1+1
  5778  1FB2  3066               	movlw	102
  5779  1FB3  00C8               	movwf	___flmul@f1
  5780  1FB4  3044               	movlw	68
  5781  1FB5  00B7               	movwf	___fldiv@f2+3
  5782  1FB6  307A               	movlw	122
  5783  1FB7  00B6               	movwf	___fldiv@f2+2
  5784  1FB8  3000               	movlw	0
  5785  1FB9  00B5               	movwf	___fldiv@f2+1
  5786  1FBA  3000               	movlw	0
  5787  1FBB  00B4               	movwf	___fldiv@f2
  5788  1FBC  0021               	movlb	1	; select bank1
  5789  1FBD  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5790  1FBE  0020               	movlb	0	; select bank0
  5791  1FBF  01B0               	clrf	___lwtofl@c+1
  5792  1FC0  07B0               	addwf	___lwtofl@c+1,f
  5793  1FC1  0021               	movlb	1	; select bank1
  5794  1FC2  0824               	movf	ReadVoltage@temp^(0+128),w
  5795  1FC3  0020               	movlb	0	; select bank0
  5796  1FC4  01AF               	clrf	___lwtofl@c
  5797  1FC5  07AF               	addwf	___lwtofl@c,f
  5798  1FC6  3199  21C5  319F   	fcall	___lwtofl
  5799  1FC9  0020               	movlb	0	; select bank0
  5800  1FCA  0832               	movf	?___lwtofl+3,w
  5801  1FCB  00BB               	movwf	___fldiv@f1+3
  5802  1FCC  0831               	movf	?___lwtofl+2,w
  5803  1FCD  00BA               	movwf	___fldiv@f1+2
  5804  1FCE  0830               	movf	?___lwtofl+1,w
  5805  1FCF  00B9               	movwf	___fldiv@f1+1
  5806  1FD0  082F               	movf	?___lwtofl,w
  5807  1FD1  00B8               	movwf	___fldiv@f1
  5808  1FD2  3190  2029  319F   	fcall	___fldiv
  5809  1FD5  0020               	movlb	0	; select bank0
  5810  1FD6  0837               	movf	?___fldiv+3,w
  5811  1FD7  00CF               	movwf	___flmul@f2+3
  5812  1FD8  0836               	movf	?___fldiv+2,w
  5813  1FD9  00CE               	movwf	___flmul@f2+2
  5814  1FDA  0835               	movf	?___fldiv+1,w
  5815  1FDB  00CD               	movwf	___flmul@f2+1
  5816  1FDC  0834               	movf	?___fldiv,w
  5817  1FDD  00CC               	movwf	___flmul@f2
  5818  1FDE  3190  20EA         	fcall	___flmul
  5819  1FE0  0020               	movlb	0	; select bank0
  5820  1FE1  084B               	movf	?___flmul+3,w
  5821  1FE2  0021               	movlb	1	; select bank1
  5822  1FE3  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5823  1FE4  0020               	movlb	0	; select bank0
  5824  1FE5  084A               	movf	?___flmul+2,w
  5825  1FE6  0021               	movlb	1	; select bank1
  5826  1FE7  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5827  1FE8  0020               	movlb	0	; select bank0
  5828  1FE9  0849               	movf	?___flmul+1,w
  5829  1FEA  0021               	movlb	1	; select bank1
  5830  1FEB  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5831  1FEC  0020               	movlb	0	; select bank0
  5832  1FED  0848               	movf	?___flmul,w
  5833  1FEE  0021               	movlb	1	; select bank1
  5834  1FEF  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5835                           
  5836                           ;ADC.c: 38: return voltage;
  5837  1FF0  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5838  1FF1  0020               	movlb	0	; select bank0
  5839  1FF2  00DF               	movwf	?_ReadVoltage+3
  5840  1FF3  0021               	movlb	1	; select bank1
  5841  1FF4  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5842  1FF5  0020               	movlb	0	; select bank0
  5843  1FF6  00DE               	movwf	?_ReadVoltage+2
  5844  1FF7  0021               	movlb	1	; select bank1
  5845  1FF8  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5846  1FF9  0020               	movlb	0	; select bank0
  5847  1FFA  00DD               	movwf	?_ReadVoltage+1
  5848  1FFB  0021               	movlb	1	; select bank1
  5849  1FFC  0820               	movf	ReadVoltage@voltage^(0+128),w
  5850  1FFD  0020               	movlb	0	; select bank0
  5851  1FFE  00DC               	movwf	?_ReadVoltage
  5852  1FFF  0008               	return
  5853  2000                     __end_of_ReadVoltage:	
  5854                           
  5855                           	psect	text3
  5856  19C5                     __ptext3:	
  5857 ;; *************** function ___lwtofl *****************
  5858 ;; Defined at:
  5859 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  c               2   15[BANK0 ] unsigned int 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  4   15[BANK0 ] unsigned int 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;Total ram usage:        5 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    4
  5880 ;; This function calls:
  5881 ;;		___flpack
  5882 ;; This function is called by:
  5883 ;;		_ReadVoltage
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function ___lwtofl
  5889  19C5                     ___lwtofl:	
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5893  19C5  0020               	movlb	0	; select bank0
  5894  19C6  082F               	movf	___lwtofl@c,w
  5895  19C7  00A5               	movwf	___flpack@arg
  5896  19C8  0830               	movf	___lwtofl@c+1,w
  5897  19C9  00A6               	movwf	___flpack@arg+1
  5898  19CA  01A7               	clrf	___flpack@arg+2
  5899  19CB  01A8               	clrf	___flpack@arg+3
  5900  19CC  3096               	movlw	150
  5901  19CD  00B3               	movwf	??___lwtofl
  5902  19CE  0833               	movf	??___lwtofl,w
  5903  19CF  00A9               	movwf	___flpack@exp
  5904  19D0  01AA               	clrf	___flpack@sign
  5905  19D1  319F  2727         	fcall	___flpack
  5906  19D3  0020               	movlb	0	; select bank0
  5907  19D4  0828               	movf	?___flpack+3,w
  5908  19D5  00B2               	movwf	?___lwtofl+3
  5909  19D6  0827               	movf	?___flpack+2,w
  5910  19D7  00B1               	movwf	?___lwtofl+2
  5911  19D8  0826               	movf	?___flpack+1,w
  5912  19D9  00B0               	movwf	?___lwtofl+1
  5913  19DA  0825               	movf	?___flpack,w
  5914  19DB  00AF               	movwf	?___lwtofl
  5915  19DC  0008               	return
  5916  19DD                     __end_of___lwtofl:	
  5917                           
  5918                           	psect	text4
  5919  10EA                     __ptext4:	
  5920 ;; *************** function ___flmul *****************
  5921 ;; Defined at:
  5922 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  f1              4   40[BANK0 ] unsigned int 
  5925 ;;  f2              4   44[BANK0 ] unsigned int 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5928 ;;  sign            1   59[BANK0 ] unsigned char 
  5929 ;;  cntr            1   58[BANK0 ] unsigned char 
  5930 ;;  exp             1   53[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  4   40[BANK0 ] unsigned char 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0, pclath, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5940 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;Total ram usage:       20 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    4
  5947 ;; This function calls:
  5948 ;;		___flpack
  5949 ;; This function is called by:
  5950 ;;		_ReadVoltage
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function ___flmul
  5956  10EA                     ___flmul:	
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5960  10EA  0020               	movlb	0	; select bank0
  5961  10EB  0848               	movf	___flmul@f1,w
  5962  10EC  00D0               	movwf	??___flmul
  5963  10ED  0849               	movf	___flmul@f1+1,w
  5964  10EE  00D1               	movwf	??___flmul+1
  5965  10EF  084A               	movf	___flmul@f1+2,w
  5966  10F0  00D2               	movwf	??___flmul+2
  5967  10F1  084B               	movf	___flmul@f1+3,w
  5968  10F2  00D3               	movwf	??___flmul+3
  5969  10F3  1003               	clrc
  5970  10F4  0D52               	rlf	??___flmul+2,w
  5971  10F5  0D53               	rlf	??___flmul+3,w
  5972  10F6  00D4               	movwf	??___flmul+4
  5973  10F7  0854               	movf	??___flmul+4,w
  5974  10F8  00D5               	movwf	___flmul@exp
  5975  10F9  08D5               	movf	___flmul@exp,f
  5976  10FA  1D03               	skipz
  5977  10FB  2905               	goto	l7158
  5978  10FC  3000               	movlw	0
  5979  10FD  00CB               	movwf	?___flmul+3
  5980  10FE  3000               	movlw	0
  5981  10FF  00CA               	movwf	?___flmul+2
  5982  1100  3000               	movlw	0
  5983  1101  00C9               	movwf	?___flmul+1
  5984  1102  3000               	movlw	0
  5985  1103  00C8               	movwf	?___flmul
  5986  1104  0008               	return
  5987  1105                     l7158:	
  5988  1105  084C               	movf	___flmul@f2,w
  5989  1106  00D0               	movwf	??___flmul
  5990  1107  084D               	movf	___flmul@f2+1,w
  5991  1108  00D1               	movwf	??___flmul+1
  5992  1109  084E               	movf	___flmul@f2+2,w
  5993  110A  00D2               	movwf	??___flmul+2
  5994  110B  084F               	movf	___flmul@f2+3,w
  5995  110C  00D3               	movwf	??___flmul+3
  5996  110D  1003               	clrc
  5997  110E  0D52               	rlf	??___flmul+2,w
  5998  110F  0D53               	rlf	??___flmul+3,w
  5999  1110  00D4               	movwf	??___flmul+4
  6000  1111  0854               	movf	??___flmul+4,w
  6001  1112  00DB               	movwf	___flmul@sign
  6002  1113  08DB               	movf	___flmul@sign,f
  6003  1114  1D03               	skipz
  6004  1115  291F               	goto	l7164
  6005  1116  3000               	movlw	0
  6006  1117  00CB               	movwf	?___flmul+3
  6007  1118  3000               	movlw	0
  6008  1119  00CA               	movwf	?___flmul+2
  6009  111A  3000               	movlw	0
  6010  111B  00C9               	movwf	?___flmul+1
  6011  111C  3000               	movlw	0
  6012  111D  00C8               	movwf	?___flmul
  6013  111E  0008               	return
  6014  111F                     l7164:	
  6015  111F  085B               	movf	___flmul@sign,w
  6016  1120  3E7B               	addlw	123
  6017  1121  00D0               	movwf	??___flmul
  6018  1122  0850               	movf	??___flmul,w
  6019  1123  07D5               	addwf	___flmul@exp,f
  6020  1124  0848               	movf	___flmul@f1,w
  6021  1125  00D0               	movwf	??___flmul
  6022  1126  0849               	movf	___flmul@f1+1,w
  6023  1127  00D1               	movwf	??___flmul+1
  6024  1128  084A               	movf	___flmul@f1+2,w
  6025  1129  00D2               	movwf	??___flmul+2
  6026  112A  084B               	movf	___flmul@f1+3,w
  6027  112B  00D3               	movwf	??___flmul+3
  6028  112C  3018               	movlw	24
  6029  112D                     u9955:	
  6030  112D  36D3               	lsrf	??___flmul+3,f
  6031  112E  0CD2               	rrf	??___flmul+2,f
  6032  112F  0CD1               	rrf	??___flmul+1,f
  6033  1130  0CD0               	rrf	??___flmul,f
  6034  1131  0B89               	decfsz	9,f
  6035  1132  292D               	goto	u9955
  6036  1133  0850               	movf	??___flmul,w
  6037  1134  00D4               	movwf	??___flmul+4
  6038  1135  0854               	movf	??___flmul+4,w
  6039  1136  00DB               	movwf	___flmul@sign
  6040  1137  084C               	movf	___flmul@f2,w
  6041  1138  00D0               	movwf	??___flmul
  6042  1139  084D               	movf	___flmul@f2+1,w
  6043  113A  00D1               	movwf	??___flmul+1
  6044  113B  084E               	movf	___flmul@f2+2,w
  6045  113C  00D2               	movwf	??___flmul+2
  6046  113D  084F               	movf	___flmul@f2+3,w
  6047  113E  00D3               	movwf	??___flmul+3
  6048  113F  3018               	movlw	24
  6049  1140                     u9965:	
  6050  1140  36D3               	lsrf	??___flmul+3,f
  6051  1141  0CD2               	rrf	??___flmul+2,f
  6052  1142  0CD1               	rrf	??___flmul+1,f
  6053  1143  0CD0               	rrf	??___flmul,f
  6054  1144  0B89               	decfsz	9,f
  6055  1145  2940               	goto	u9965
  6056  1146  0850               	movf	??___flmul,w
  6057  1147  00D4               	movwf	??___flmul+4
  6058  1148  0854               	movf	??___flmul+4,w
  6059  1149  06DB               	xorwf	___flmul@sign,f
  6060  114A  3080               	movlw	128
  6061  114B  00D0               	movwf	??___flmul
  6062  114C  0850               	movf	??___flmul,w
  6063  114D  05DB               	andwf	___flmul@sign,f
  6064  114E  17CA               	bsf	___flmul@f1+2,7
  6065  114F  17CE               	bsf	___flmul@f2+2,7
  6066  1150  30FF               	movlw	255
  6067  1151  05CC               	andwf	___flmul@f2,f
  6068  1152  30FF               	movlw	255
  6069  1153  05CD               	andwf	___flmul@f2+1,f
  6070  1154  30FF               	movlw	255
  6071  1155  05CE               	andwf	___flmul@f2+2,f
  6072  1156  3000               	movlw	0
  6073  1157  05CF               	andwf	___flmul@f2+3,f
  6074  1158  3000               	movlw	0
  6075  1159  00D9               	movwf	___flmul@f3_as_product+3
  6076  115A  3000               	movlw	0
  6077  115B  00D8               	movwf	___flmul@f3_as_product+2
  6078  115C  3000               	movlw	0
  6079  115D  00D7               	movwf	___flmul@f3_as_product+1
  6080  115E  3000               	movlw	0
  6081  115F  00D6               	movwf	___flmul@f3_as_product
  6082  1160  3007               	movlw	7
  6083  1161  00D0               	movwf	??___flmul
  6084  1162  0850               	movf	??___flmul,w
  6085  1163  00DA               	movwf	___flmul@cntr
  6086  1164                     l7176:	
  6087  1164  1C48               	btfss	___flmul@f1,0
  6088  1165  296E               	goto	l7180
  6089  1166  084C               	movf	___flmul@f2,w
  6090  1167  07D6               	addwf	___flmul@f3_as_product,f
  6091  1168  084D               	movf	___flmul@f2+1,w
  6092  1169  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6093  116A  084E               	movf	___flmul@f2+2,w
  6094  116B  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6095  116C  084F               	movf	___flmul@f2+3,w
  6096  116D  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6097  116E                     l7180:	
  6098  116E  3001               	movlw	1
  6099  116F                     u9985:	
  6100  116F  36CB               	lsrf	___flmul@f1+3,f
  6101  1170  0CCA               	rrf	___flmul@f1+2,f
  6102  1171  0CC9               	rrf	___flmul@f1+1,f
  6103  1172  0CC8               	rrf	___flmul@f1,f
  6104  1173  0B89               	decfsz	9,f
  6105  1174  296F               	goto	u9985
  6106  1175  3001               	movlw	1
  6107  1176                     u9995:	
  6108  1176  35CC               	lslf	___flmul@f2,f
  6109  1177  0DCD               	rlf	___flmul@f2+1,f
  6110  1178  0DCE               	rlf	___flmul@f2+2,f
  6111  1179  0DCF               	rlf	___flmul@f2+3,f
  6112  117A  0B89               	decfsz	9,f
  6113  117B  2976               	goto	u9995
  6114  117C  3001               	movlw	1
  6115  117D  02DA               	subwf	___flmul@cntr,f
  6116  117E  1D03               	btfss	3,2
  6117  117F  2964               	goto	l7176
  6118  1180  3011               	movlw	17
  6119  1181  00D0               	movwf	??___flmul
  6120  1182  0850               	movf	??___flmul,w
  6121  1183  00DA               	movwf	___flmul@cntr
  6122  1184                     l7188:	
  6123  1184  1C48               	btfss	___flmul@f1,0
  6124  1185  298E               	goto	l7192
  6125  1186  084C               	movf	___flmul@f2,w
  6126  1187  07D6               	addwf	___flmul@f3_as_product,f
  6127  1188  084D               	movf	___flmul@f2+1,w
  6128  1189  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6129  118A  084E               	movf	___flmul@f2+2,w
  6130  118B  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6131  118C  084F               	movf	___flmul@f2+3,w
  6132  118D  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6133  118E                     l7192:	
  6134  118E  3001               	movlw	1
  6135  118F                     u10025:	
  6136  118F  36CB               	lsrf	___flmul@f1+3,f
  6137  1190  0CCA               	rrf	___flmul@f1+2,f
  6138  1191  0CC9               	rrf	___flmul@f1+1,f
  6139  1192  0CC8               	rrf	___flmul@f1,f
  6140  1193  0B89               	decfsz	9,f
  6141  1194  298F               	goto	u10025
  6142  1195  3001               	movlw	1
  6143  1196                     u10035:	
  6144  1196  36D9               	lsrf	___flmul@f3_as_product+3,f
  6145  1197  0CD8               	rrf	___flmul@f3_as_product+2,f
  6146  1198  0CD7               	rrf	___flmul@f3_as_product+1,f
  6147  1199  0CD6               	rrf	___flmul@f3_as_product,f
  6148  119A  0B89               	decfsz	9,f
  6149  119B  2996               	goto	u10035
  6150  119C  3001               	movlw	1
  6151  119D  02DA               	subwf	___flmul@cntr,f
  6152  119E  1D03               	btfss	3,2
  6153  119F  2984               	goto	l7188
  6154  11A0  0859               	movf	___flmul@f3_as_product+3,w
  6155  11A1  00A8               	movwf	___flpack@arg+3
  6156  11A2  0858               	movf	___flmul@f3_as_product+2,w
  6157  11A3  00A7               	movwf	___flpack@arg+2
  6158  11A4  0857               	movf	___flmul@f3_as_product+1,w
  6159  11A5  00A6               	movwf	___flpack@arg+1
  6160  11A6  0856               	movf	___flmul@f3_as_product,w
  6161  11A7  00A5               	movwf	___flpack@arg
  6162  11A8  0855               	movf	___flmul@exp,w
  6163  11A9  00D0               	movwf	??___flmul
  6164  11AA  0850               	movf	??___flmul,w
  6165  11AB  00A9               	movwf	___flpack@exp
  6166  11AC  085B               	movf	___flmul@sign,w
  6167  11AD  00D1               	movwf	??___flmul+1
  6168  11AE  0851               	movf	??___flmul+1,w
  6169  11AF  00AA               	movwf	___flpack@sign
  6170  11B0  319F  2727         	fcall	___flpack
  6171  11B2  0020               	movlb	0	; select bank0
  6172  11B3  0828               	movf	?___flpack+3,w
  6173  11B4  00CB               	movwf	?___flmul+3
  6174  11B5  0827               	movf	?___flpack+2,w
  6175  11B6  00CA               	movwf	?___flmul+2
  6176  11B7  0826               	movf	?___flpack+1,w
  6177  11B8  00C9               	movwf	?___flmul+1
  6178  11B9  0825               	movf	?___flpack,w
  6179  11BA  00C8               	movwf	?___flmul
  6180  11BB  0008               	return
  6181  11BC                     __end_of___flmul:	
  6182                           
  6183                           	psect	text5
  6184  1029                     __ptext5:	
  6185 ;; *************** function ___fldiv *****************
  6186 ;; Defined at:
  6187 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  f2              4   20[BANK0 ] unsigned char 
  6190 ;;  f1              4   24[BANK0 ] unsigned char 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  f3              4   33[BANK0 ] unsigned char 
  6193 ;;  sign            1   39[BANK0 ] unsigned char 
  6194 ;;  exp             1   38[BANK0 ] unsigned char 
  6195 ;;  cntr            1   37[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  4   20[BANK0 ] unsigned char 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:       20 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    4
  6212 ;; This function calls:
  6213 ;;		___flpack
  6214 ;; This function is called by:
  6215 ;;		_ReadVoltage
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function ___fldiv
  6221  1029                     ___fldiv:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6225  1029  0020               	movlb	0	; select bank0
  6226  102A  0838               	movf	___fldiv@f1,w
  6227  102B  00BC               	movwf	??___fldiv
  6228  102C  0839               	movf	___fldiv@f1+1,w
  6229  102D  00BD               	movwf	??___fldiv+1
  6230  102E  083A               	movf	___fldiv@f1+2,w
  6231  102F  00BE               	movwf	??___fldiv+2
  6232  1030  083B               	movf	___fldiv@f1+3,w
  6233  1031  00BF               	movwf	??___fldiv+3
  6234  1032  1003               	clrc
  6235  1033  0D3E               	rlf	??___fldiv+2,w
  6236  1034  0D3F               	rlf	??___fldiv+3,w
  6237  1035  00C0               	movwf	??___fldiv+4
  6238  1036  0840               	movf	??___fldiv+4,w
  6239  1037  00C6               	movwf	___fldiv@exp
  6240  1038  08C6               	movf	___fldiv@exp,f
  6241  1039  1D03               	skipz
  6242  103A  2844               	goto	l7120
  6243  103B  3000               	movlw	0
  6244  103C  00B7               	movwf	?___fldiv+3
  6245  103D  3000               	movlw	0
  6246  103E  00B6               	movwf	?___fldiv+2
  6247  103F  3000               	movlw	0
  6248  1040  00B5               	movwf	?___fldiv+1
  6249  1041  3000               	movlw	0
  6250  1042  00B4               	movwf	?___fldiv
  6251  1043  0008               	return
  6252  1044                     l7120:	
  6253  1044  0834               	movf	___fldiv@f2,w
  6254  1045  00BC               	movwf	??___fldiv
  6255  1046  0835               	movf	___fldiv@f2+1,w
  6256  1047  00BD               	movwf	??___fldiv+1
  6257  1048  0836               	movf	___fldiv@f2+2,w
  6258  1049  00BE               	movwf	??___fldiv+2
  6259  104A  0837               	movf	___fldiv@f2+3,w
  6260  104B  00BF               	movwf	??___fldiv+3
  6261  104C  1003               	clrc
  6262  104D  0D3E               	rlf	??___fldiv+2,w
  6263  104E  0D3F               	rlf	??___fldiv+3,w
  6264  104F  00C0               	movwf	??___fldiv+4
  6265  1050  0840               	movf	??___fldiv+4,w
  6266  1051  00C7               	movwf	___fldiv@sign
  6267  1052  08C7               	movf	___fldiv@sign,f
  6268  1053  1D03               	skipz
  6269  1054  285E               	goto	l7126
  6270  1055  3000               	movlw	0
  6271  1056  00B7               	movwf	?___fldiv+3
  6272  1057  3000               	movlw	0
  6273  1058  00B6               	movwf	?___fldiv+2
  6274  1059  3000               	movlw	0
  6275  105A  00B5               	movwf	?___fldiv+1
  6276  105B  3000               	movlw	0
  6277  105C  00B4               	movwf	?___fldiv
  6278  105D  0008               	return
  6279  105E                     l7126:	
  6280  105E  3089               	movlw	137
  6281  105F  0747               	addwf	___fldiv@sign,w
  6282  1060  00BC               	movwf	??___fldiv
  6283  1061  083C               	movf	??___fldiv,w
  6284  1062  02C6               	subwf	___fldiv@exp,f
  6285  1063  0838               	movf	___fldiv@f1,w
  6286  1064  00BC               	movwf	??___fldiv
  6287  1065  0839               	movf	___fldiv@f1+1,w
  6288  1066  00BD               	movwf	??___fldiv+1
  6289  1067  083A               	movf	___fldiv@f1+2,w
  6290  1068  00BE               	movwf	??___fldiv+2
  6291  1069  083B               	movf	___fldiv@f1+3,w
  6292  106A  00BF               	movwf	??___fldiv+3
  6293  106B  3018               	movlw	24
  6294  106C                     u9875:	
  6295  106C  36BF               	lsrf	??___fldiv+3,f
  6296  106D  0CBE               	rrf	??___fldiv+2,f
  6297  106E  0CBD               	rrf	??___fldiv+1,f
  6298  106F  0CBC               	rrf	??___fldiv,f
  6299  1070  0B89               	decfsz	9,f
  6300  1071  286C               	goto	u9875
  6301  1072  083C               	movf	??___fldiv,w
  6302  1073  00C0               	movwf	??___fldiv+4
  6303  1074  0840               	movf	??___fldiv+4,w
  6304  1075  00C7               	movwf	___fldiv@sign
  6305  1076  0834               	movf	___fldiv@f2,w
  6306  1077  00BC               	movwf	??___fldiv
  6307  1078  0835               	movf	___fldiv@f2+1,w
  6308  1079  00BD               	movwf	??___fldiv+1
  6309  107A  0836               	movf	___fldiv@f2+2,w
  6310  107B  00BE               	movwf	??___fldiv+2
  6311  107C  0837               	movf	___fldiv@f2+3,w
  6312  107D  00BF               	movwf	??___fldiv+3
  6313  107E  3018               	movlw	24
  6314  107F                     u9885:	
  6315  107F  36BF               	lsrf	??___fldiv+3,f
  6316  1080  0CBE               	rrf	??___fldiv+2,f
  6317  1081  0CBD               	rrf	??___fldiv+1,f
  6318  1082  0CBC               	rrf	??___fldiv,f
  6319  1083  0B89               	decfsz	9,f
  6320  1084  287F               	goto	u9885
  6321  1085  083C               	movf	??___fldiv,w
  6322  1086  00C0               	movwf	??___fldiv+4
  6323  1087  0840               	movf	??___fldiv+4,w
  6324  1088  06C7               	xorwf	___fldiv@sign,f
  6325  1089  3080               	movlw	128
  6326  108A  00BC               	movwf	??___fldiv
  6327  108B  083C               	movf	??___fldiv,w
  6328  108C  05C7               	andwf	___fldiv@sign,f
  6329  108D  17BA               	bsf	___fldiv@f1+2,7
  6330  108E  30FF               	movlw	255
  6331  108F  05B8               	andwf	___fldiv@f1,f
  6332  1090  30FF               	movlw	255
  6333  1091  05B9               	andwf	___fldiv@f1+1,f
  6334  1092  30FF               	movlw	255
  6335  1093  05BA               	andwf	___fldiv@f1+2,f
  6336  1094  3000               	movlw	0
  6337  1095  05BB               	andwf	___fldiv@f1+3,f
  6338  1096  17B6               	bsf	___fldiv@f2+2,7
  6339  1097  30FF               	movlw	255
  6340  1098  05B4               	andwf	___fldiv@f2,f
  6341  1099  30FF               	movlw	255
  6342  109A  05B5               	andwf	___fldiv@f2+1,f
  6343  109B  30FF               	movlw	255
  6344  109C  05B6               	andwf	___fldiv@f2+2,f
  6345  109D  3000               	movlw	0
  6346  109E  05B7               	andwf	___fldiv@f2+3,f
  6347  109F  3020               	movlw	32
  6348  10A0  00BC               	movwf	??___fldiv
  6349  10A1  083C               	movf	??___fldiv,w
  6350  10A2  00C5               	movwf	___fldiv@cntr
  6351  10A3                     l7138:	
  6352  10A3  3001               	movlw	1
  6353  10A4                     u9895:	
  6354  10A4  35C1               	lslf	___fldiv@f3,f
  6355  10A5  0DC2               	rlf	___fldiv@f3+1,f
  6356  10A6  0DC3               	rlf	___fldiv@f3+2,f
  6357  10A7  0DC4               	rlf	___fldiv@f3+3,f
  6358  10A8  0B89               	decfsz	9,f
  6359  10A9  28A4               	goto	u9895
  6360  10AA  0837               	movf	___fldiv@f2+3,w
  6361  10AB  023B               	subwf	___fldiv@f1+3,w
  6362  10AC  1D03               	skipz
  6363  10AD  28B8               	goto	u9905
  6364  10AE  0836               	movf	___fldiv@f2+2,w
  6365  10AF  023A               	subwf	___fldiv@f1+2,w
  6366  10B0  1D03               	skipz
  6367  10B1  28B8               	goto	u9905
  6368  10B2  0835               	movf	___fldiv@f2+1,w
  6369  10B3  0239               	subwf	___fldiv@f1+1,w
  6370  10B4  1D03               	skipz
  6371  10B5  28B8               	goto	u9905
  6372  10B6  0834               	movf	___fldiv@f2,w
  6373  10B7  0238               	subwf	___fldiv@f1,w
  6374  10B8                     u9905:	
  6375  10B8  1C03               	skipc
  6376  10B9  28C3               	goto	l7144
  6377  10BA  0834               	movf	___fldiv@f2,w
  6378  10BB  02B8               	subwf	___fldiv@f1,f
  6379  10BC  0835               	movf	___fldiv@f2+1,w
  6380  10BD  3BB9               	subwfb	___fldiv@f1+1,f
  6381  10BE  0836               	movf	___fldiv@f2+2,w
  6382  10BF  3BBA               	subwfb	___fldiv@f1+2,f
  6383  10C0  0837               	movf	___fldiv@f2+3,w
  6384  10C1  3BBB               	subwfb	___fldiv@f1+3,f
  6385  10C2  1441               	bsf	___fldiv@f3,0
  6386  10C3                     l7144:	
  6387  10C3  3001               	movlw	1
  6388  10C4                     u9915:	
  6389  10C4  35B8               	lslf	___fldiv@f1,f
  6390  10C5  0DB9               	rlf	___fldiv@f1+1,f
  6391  10C6  0DBA               	rlf	___fldiv@f1+2,f
  6392  10C7  0DBB               	rlf	___fldiv@f1+3,f
  6393  10C8  0B89               	decfsz	9,f
  6394  10C9  28C4               	goto	u9915
  6395  10CA  3001               	movlw	1
  6396  10CB  02C5               	subwf	___fldiv@cntr,f
  6397  10CC  1D03               	btfss	3,2
  6398  10CD  28A3               	goto	l7138
  6399  10CE  0844               	movf	___fldiv@f3+3,w
  6400  10CF  00A8               	movwf	___flpack@arg+3
  6401  10D0  0843               	movf	___fldiv@f3+2,w
  6402  10D1  00A7               	movwf	___flpack@arg+2
  6403  10D2  0842               	movf	___fldiv@f3+1,w
  6404  10D3  00A6               	movwf	___flpack@arg+1
  6405  10D4  0841               	movf	___fldiv@f3,w
  6406  10D5  00A5               	movwf	___flpack@arg
  6407  10D6  0846               	movf	___fldiv@exp,w
  6408  10D7  00BC               	movwf	??___fldiv
  6409  10D8  083C               	movf	??___fldiv,w
  6410  10D9  00A9               	movwf	___flpack@exp
  6411  10DA  0847               	movf	___fldiv@sign,w
  6412  10DB  00BD               	movwf	??___fldiv+1
  6413  10DC  083D               	movf	??___fldiv+1,w
  6414  10DD  00AA               	movwf	___flpack@sign
  6415  10DE  319F  2727         	fcall	___flpack
  6416  10E0  0020               	movlb	0	; select bank0
  6417  10E1  0828               	movf	?___flpack+3,w
  6418  10E2  00B7               	movwf	?___fldiv+3
  6419  10E3  0827               	movf	?___flpack+2,w
  6420  10E4  00B6               	movwf	?___fldiv+2
  6421  10E5  0826               	movf	?___flpack+1,w
  6422  10E6  00B5               	movwf	?___fldiv+1
  6423  10E7  0825               	movf	?___flpack,w
  6424  10E8  00B4               	movwf	?___fldiv
  6425  10E9  0008               	return
  6426  10EA                     __end_of___fldiv:	
  6427                           
  6428                           	psect	text6
  6429  1F27                     __ptext6:	
  6430 ;; *************** function ___flpack *****************
  6431 ;; Defined at:
  6432 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;  arg             4    5[BANK0 ] unsigned long 
  6435 ;;  exp             1    9[BANK0 ] unsigned char 
  6436 ;;  sign            1   10[BANK0 ] unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  4    5[BANK0 ] unsigned char 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:       10 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    3
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		___fldiv
  6459 ;;		___flmul
  6460 ;;		___lwtofl
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function ___flpack
  6466  1F27                     ___flpack:	
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6470  1F27  0020               	movlb	0	; select bank0
  6471  1F28  0829               	movf	___flpack@exp,w
  6472  1F29  1903               	btfsc	3,2
  6473  1F2A  2F31               	goto	l6528
  6474  1F2B  0828               	movf	___flpack@arg+3,w
  6475  1F2C  0427               	iorwf	___flpack@arg+2,w
  6476  1F2D  0426               	iorwf	___flpack@arg+1,w
  6477  1F2E  0425               	iorwf	___flpack@arg,w
  6478  1F2F  1D03               	skipz
  6479  1F30  2F45               	goto	l6534
  6480  1F31                     l6528:	
  6481  1F31  3000               	movlw	0
  6482  1F32  00A8               	movwf	?___flpack+3
  6483  1F33  3000               	movlw	0
  6484  1F34  00A7               	movwf	?___flpack+2
  6485  1F35  3000               	movlw	0
  6486  1F36  00A6               	movwf	?___flpack+1
  6487  1F37  3000               	movlw	0
  6488  1F38  00A5               	movwf	?___flpack
  6489  1F39  0008               	return
  6490  1F3A                     l6532:	
  6491  1F3A  3001               	movlw	1
  6492  1F3B  00AB               	movwf	??___flpack
  6493  1F3C  082B               	movf	??___flpack,w
  6494  1F3D  07A9               	addwf	___flpack@exp,f
  6495  1F3E  3001               	movlw	1
  6496  1F3F                     u8475:	
  6497  1F3F  36A8               	lsrf	___flpack@arg+3,f
  6498  1F40  0CA7               	rrf	___flpack@arg+2,f
  6499  1F41  0CA6               	rrf	___flpack@arg+1,f
  6500  1F42  0CA5               	rrf	___flpack@arg,f
  6501  1F43  0B89               	decfsz	9,f
  6502  1F44  2F3F               	goto	u8475
  6503  1F45                     l6534:	
  6504  1F45  30FE               	movlw	254
  6505  1F46  0528               	andwf	___flpack@arg+3,w
  6506  1F47  1903               	btfsc	3,2
  6507  1F48  2F5D               	goto	l1269
  6508  1F49  2F3A               	goto	l6532
  6509  1F4A                     l6536:	
  6510  1F4A  3001               	movlw	1
  6511  1F4B  00AB               	movwf	??___flpack
  6512  1F4C  082B               	movf	??___flpack,w
  6513  1F4D  07A9               	addwf	___flpack@exp,f
  6514  1F4E  3001               	movlw	1
  6515  1F4F  07A5               	addwf	___flpack@arg,f
  6516  1F50  3000               	movlw	0
  6517  1F51  3DA6               	addwfc	___flpack@arg+1,f
  6518  1F52  3000               	movlw	0
  6519  1F53  3DA7               	addwfc	___flpack@arg+2,f
  6520  1F54  3000               	movlw	0
  6521  1F55  3DA8               	addwfc	___flpack@arg+3,f
  6522  1F56  3001               	movlw	1
  6523  1F57                     u8495:	
  6524  1F57  36A8               	lsrf	___flpack@arg+3,f
  6525  1F58  0CA7               	rrf	___flpack@arg+2,f
  6526  1F59  0CA6               	rrf	___flpack@arg+1,f
  6527  1F5A  0CA5               	rrf	___flpack@arg,f
  6528  1F5B  0B89               	decfsz	9,f
  6529  1F5C  2F57               	goto	u8495
  6530  1F5D                     l1269:	
  6531  1F5D  30FF               	movlw	255
  6532  1F5E  0528               	andwf	___flpack@arg+3,w
  6533  1F5F  1903               	btfsc	3,2
  6534  1F60  2F6B               	goto	l6544
  6535  1F61  2F4A               	goto	l6536
  6536  1F62                     l6542:	
  6537  1F62  3001               	movlw	1
  6538  1F63  02A9               	subwf	___flpack@exp,f
  6539  1F64  3001               	movlw	1
  6540  1F65                     u8515:	
  6541  1F65  35A5               	lslf	___flpack@arg,f
  6542  1F66  0DA6               	rlf	___flpack@arg+1,f
  6543  1F67  0DA7               	rlf	___flpack@arg+2,f
  6544  1F68  0DA8               	rlf	___flpack@arg+3,f
  6545  1F69  0B89               	decfsz	9,f
  6546  1F6A  2F65               	goto	u8515
  6547  1F6B                     l6544:	
  6548  1F6B  1FA7               	btfss	___flpack@arg+2,7
  6549  1F6C  2F62               	goto	l6542
  6550  1F6D  1829               	btfsc	___flpack@exp,0
  6551  1F6E  2F77               	goto	l1275
  6552  1F6F  30FF               	movlw	255
  6553  1F70  05A5               	andwf	___flpack@arg,f
  6554  1F71  30FF               	movlw	255
  6555  1F72  05A6               	andwf	___flpack@arg+1,f
  6556  1F73  307F               	movlw	127
  6557  1F74  05A7               	andwf	___flpack@arg+2,f
  6558  1F75  30FF               	movlw	255
  6559  1F76  05A8               	andwf	___flpack@arg+3,f
  6560  1F77                     l1275:	
  6561  1F77  1003               	clrc
  6562  1F78  0CA9               	rrf	___flpack@exp,f
  6563  1F79  0829               	movf	___flpack@exp,w
  6564  1F7A  00AB               	movwf	??___flpack
  6565  1F7B  01AC               	clrf	??___flpack+1
  6566  1F7C  01AD               	clrf	??___flpack+2
  6567  1F7D  01AE               	clrf	??___flpack+3
  6568  1F7E  3018               	movlw	24
  6569  1F7F                     u8545:	
  6570  1F7F  35AB               	lslf	??___flpack,f
  6571  1F80  0DAC               	rlf	??___flpack+1,f
  6572  1F81  0DAD               	rlf	??___flpack+2,f
  6573  1F82  0DAE               	rlf	??___flpack+3,f
  6574  1F83  0B89               	decfsz	9,f
  6575  1F84  2F7F               	goto	u8545
  6576  1F85  082B               	movf	??___flpack,w
  6577  1F86  04A5               	iorwf	___flpack@arg,f
  6578  1F87  082C               	movf	??___flpack+1,w
  6579  1F88  04A6               	iorwf	___flpack@arg+1,f
  6580  1F89  082D               	movf	??___flpack+2,w
  6581  1F8A  04A7               	iorwf	___flpack@arg+2,f
  6582  1F8B  082E               	movf	??___flpack+3,w
  6583  1F8C  04A8               	iorwf	___flpack@arg+3,f
  6584  1F8D  082A               	movf	___flpack@sign,w
  6585  1F8E  1903               	btfsc	3,2
  6586  1F8F  0008               	return
  6587  1F90  17A8               	bsf	___flpack@arg+3,7
  6588  1F91  0008               	return
  6589  1F92                     __end_of___flpack:	
  6590                           
  6591                           	psect	text7
  6592  1B97                     __ptext7:	
  6593 ;; *************** function _InternalADC_Read *****************
  6594 ;; Defined at:
  6595 ;;		line 41 in file "ADC.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  channel         1    wreg     unsigned char 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  channel         1   19[BANK0 ] unsigned char 
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  2   15[BANK0 ] unsigned int 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, pclath, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;Total ram usage:        5 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    4
  6616 ;; This function calls:
  6617 ;;		_delayUS
  6618 ;; This function is called by:
  6619 ;;		_ReadVoltage
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _InternalADC_Read
  6625  1B97                     _InternalADC_Read:	
  6626                           
  6627                           ;incstack = 0
  6628                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6629                           ;InternalADC_Read@channel stored from wreg
  6630  1B97  0020               	movlb	0	; select bank0
  6631  1B98  00B3               	movwf	InternalADC_Read@channel
  6632                           
  6633                           ;ADC.c: 43: ADCON0 =0;
  6634  1B99  0021               	movlb	1	; select bank1
  6635  1B9A  019D               	clrf	29	;volatile
  6636                           
  6637                           ;ADC.c: 44: ADCON1 =0;
  6638  1B9B  019E               	clrf	30	;volatile
  6639                           
  6640                           ;ADC.c: 45: ADCON1 |= 0b01010000;
  6641  1B9C  3050               	movlw	80
  6642  1B9D  0020               	movlb	0	; select bank0
  6643  1B9E  00B1               	movwf	??_InternalADC_Read
  6644  1B9F  0831               	movf	??_InternalADC_Read,w
  6645  1BA0  0021               	movlb	1	; select bank1
  6646  1BA1  049E               	iorwf	30,f	;volatile
  6647                           
  6648                           ;ADC.c: 46: FVRCON |= 0b10000000;
  6649  1BA2  0022               	movlb	2	; select bank2
  6650  1BA3  1797               	bsf	23,7	;volatile
  6651                           
  6652                           ;ADC.c: 47: FVRCON |= 0x01;
  6653  1BA4  1417               	bsf	23,0	;volatile
  6654  1BA5                     l1056:	
  6655                           ;ADC.c: 48: while(!(FVRCON & 0b01000000));
  6656                           
  6657  1BA5  1F17               	btfss	23,6	;volatile
  6658  1BA6  2BA5               	goto	l1056
  6659                           
  6660                           ;ADC.c: 49: ADCON0 |= (channel << 2);
  6661  1BA7  0020               	movlb	0	; select bank0
  6662  1BA8  0833               	movf	InternalADC_Read@channel,w
  6663  1BA9  00B1               	movwf	??_InternalADC_Read
  6664  1BAA  3001               	movlw	1
  6665  1BAB                     u9835:	
  6666  1BAB  35B1               	lslf	??_InternalADC_Read,f
  6667  1BAC  3EFF               	addlw	-1
  6668  1BAD  1D03               	skipz
  6669  1BAE  2BAB               	goto	u9835
  6670  1BAF  3531               	lslf	??_InternalADC_Read,w
  6671  1BB0  00B2               	movwf	??_InternalADC_Read+1
  6672  1BB1  0832               	movf	??_InternalADC_Read+1,w
  6673  1BB2  0021               	movlb	1	; select bank1
  6674  1BB3  049D               	iorwf	29,f	;volatile
  6675                           
  6676                           ;ADC.c: 50: ADCON1 |= 0b10000011;
  6677  1BB4  3083               	movlw	131
  6678  1BB5  0020               	movlb	0	; select bank0
  6679  1BB6  00B1               	movwf	??_InternalADC_Read
  6680  1BB7  0831               	movf	??_InternalADC_Read,w
  6681  1BB8  0021               	movlb	1	; select bank1
  6682  1BB9  049E               	iorwf	30,f	;volatile
  6683                           
  6684                           ;ADC.c: 51: ADCON0 |= 0b00000001;
  6685  1BBA  141D               	bsf	29,0	;volatile
  6686                           
  6687                           ;ADC.c: 52: (PIE1bits.ADIE=0);
  6688  1BBB  1311               	bcf	17,6	;volatile
  6689                           
  6690                           ;ADC.c: 53: delayUS(5);
  6691  1BBC  3000               	movlw	0
  6692  1BBD  0020               	movlb	0	; select bank0
  6693  1BBE  00A8               	movwf	delayUS@US+3
  6694  1BBF  3000               	movlw	0
  6695  1BC0  00A7               	movwf	delayUS@US+2
  6696  1BC1  3000               	movlw	0
  6697  1BC2  00A6               	movwf	delayUS@US+1
  6698  1BC3  3005               	movlw	5
  6699  1BC4  00A5               	movwf	delayUS@US
  6700  1BC5  319B  2323  319B   	fcall	_delayUS
  6701                           
  6702                           ;ADC.c: 54: ADCON0 |= 0b00000010;
  6703  1BC8  0021               	movlb	1	; select bank1
  6704  1BC9  149D               	bsf	29,1	;volatile
  6705  1BCA                     l1059:	
  6706                           ;ADC.c: 55: while(ADCON0 & 0b00000010);
  6707                           
  6708  1BCA  189D               	btfsc	29,1	;volatile
  6709  1BCB  2BCA               	goto	l1059
  6710                           
  6711                           ;ADC.c: 56: return ((ADRESH << 8) + ADRESL);
  6712  1BCC  081C               	movf	28,w	;volatile
  6713  1BCD  0020               	movlb	0	; select bank0
  6714  1BCE  01B0               	clrf	?_InternalADC_Read+1
  6715  1BCF  07B0               	addwf	?_InternalADC_Read+1,f
  6716  1BD0  0021               	movlb	1	; select bank1
  6717  1BD1  081B               	movf	27,w	;volatile
  6718  1BD2  0020               	movlb	0	; select bank0
  6719  1BD3  01AF               	clrf	?_InternalADC_Read
  6720  1BD4  07AF               	addwf	?_InternalADC_Read,f
  6721  1BD5  0008               	return
  6722  1BD6                     __end_of_InternalADC_Read:	
  6723                           
  6724                           	psect	text8
  6725  07F8                     __ptext8:	
  6726 ;; *************** function _DisableInternalADC *****************
  6727 ;; Defined at:
  6728 ;;		line 58 in file "ADC.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;		None               void
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;Total ram usage:        1 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    3
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_ReadVoltage
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _DisableInternalADC
  6758  07F8                     _DisableInternalADC:	
  6759                           
  6760                           ;ADC.c: 60: ADCON0 &= ~0b00000001;
  6761                           
  6762                           ;incstack = 0
  6763                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6764  07F8  30FE               	movlw	254
  6765  07F9  0020               	movlb	0	; select bank0
  6766  07FA  00A5               	movwf	??_DisableInternalADC
  6767  07FB  0825               	movf	??_DisableInternalADC,w
  6768  07FC  0021               	movlb	1	; select bank1
  6769  07FD  059D               	andwf	29,f	;volatile
  6770  07FE  0008               	return
  6771  07FF                     __end_of_DisableInternalADC:	
  6772                           
  6773                           	psect	text9
  6774  18FC                     __ptext9:	
  6775 ;; *************** function _PS_2_INIT *****************
  6776 ;; Defined at:
  6777 ;;		line 88 in file "PS_2.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0, pclath, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    4
  6798 ;; This function calls:
  6799 ;;		_Clock_TRIS
  6800 ;;		_Data_TRIS
  6801 ;;		_INIT_PS_2_INTERRUPT
  6802 ;; This function is called by:
  6803 ;;		_main
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           
  6808                           ;psect for function _PS_2_INIT
  6809  18FC                     _PS_2_INIT:	
  6810                           
  6811                           ;PS_2.c: 91: Clock_TRIS(1);
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6815  18FC  3001               	movlw	1
  6816  18FD  3198  20CF  3198   	fcall	_Clock_TRIS
  6817                           
  6818                           ;PS_2.c: 92: Data_TRIS(1);
  6819  1900  3001               	movlw	1
  6820  1901  3198  20DA  3198   	fcall	_Data_TRIS
  6821                           
  6822                           ;PS_2.c: 93: INIT_PS_2_INTERRUPT(0b00100000);
  6823  1904  3020               	movlw	32
  6824  1905  3199  2130         	fcall	_INIT_PS_2_INTERRUPT
  6825  1907  0008               	return
  6826  1908                     __end_of_PS_2_INIT:	
  6827                           
  6828                           	psect	text10
  6829  1930                     __ptext10:	
  6830 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6831 ;; Defined at:
  6832 ;;		line 123 in file "PS_2.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  DATA_CLK        1    wreg     unsigned char 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;		None               void
  6839 ;; Registers used:
  6840 ;;		wreg, status,2
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;Total ram usage:        1 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    3
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_PS_2_INIT
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function _INIT_PS_2_INTERRUPT
  6862  1930                     _INIT_PS_2_INTERRUPT:	
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6866                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6867  1930  0020               	movlb	0	; select bank0
  6868  1931  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6869                           
  6870                           ;PS_2.c: 125: IOCAP =0;
  6871  1932  0027               	movlb	7	; select bank7
  6872  1933  0191               	clrf	17	;volatile
  6873                           
  6874                           ;PS_2.c: 126: IOCAN =0;
  6875  1934  0192               	clrf	18	;volatile
  6876                           
  6877                           ;PS_2.c: 127: if(DATA_CLK == 0b00100000)
  6878  1935  0020               	movlb	0	; select bank0
  6879  1936  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6880  1937  3A20               	xorlw	32
  6881  1938  1D03               	skipz
  6882  1939  293D               	goto	l679
  6883                           
  6884                           ;PS_2.c: 128: {
  6885                           ;PS_2.c: 131: IOCAN |= 0b00100000;
  6886  193A  0027               	movlb	7	; select bank7
  6887  193B  1692               	bsf	18,5	;volatile
  6888                           
  6889                           ;PS_2.c: 132: }
  6890  193C  0008               	return
  6891  193D                     l679:	
  6892                           
  6893                           ;PS_2.c: 133: else
  6894                           ;PS_2.c: 134: {
  6895                           ;PS_2.c: 137: IOCAN |= 0b00010000;
  6896  193D  0027               	movlb	7	; select bank7
  6897  193E  1612               	bsf	18,4	;volatile
  6898  193F  0008               	return
  6899  1940                     __end_of_INIT_PS_2_INTERRUPT:	
  6900                           
  6901                           	psect	text11
  6902  1DAA                     __ptext11:	
  6903 ;; *************** function _Keyboard_Connected *****************
  6904 ;; Defined at:
  6905 ;;		line 1057 in file "PS_2.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  i               4   65[BANK0 ] unsigned long 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      unsigned char 
  6912 ;; Registers used:
  6913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;Total ram usage:        4 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    9
  6926 ;; This function calls:
  6927 ;;		_PS_2_DISABLE_INTERRUPT
  6928 ;;		_PS_2_ENABLE_INTERRUPT
  6929 ;;		_PS_2_Update
  6930 ;;		_Send_PS2
  6931 ;;		_delayUS
  6932 ;; This function is called by:
  6933 ;;		_main
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           
  6938                           ;psect for function _Keyboard_Connected
  6939  1DAA                     _Keyboard_Connected:	
  6940                           
  6941                           ;PS_2.c: 1059: unsigned long i=0;
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6945  1DAA  3000               	movlw	0
  6946  1DAB  0020               	movlb	0	; select bank0
  6947  1DAC  00E4               	movwf	Keyboard_Connected@i+3
  6948  1DAD  3000               	movlw	0
  6949  1DAE  00E3               	movwf	Keyboard_Connected@i+2
  6950  1DAF  3000               	movlw	0
  6951  1DB0  00E2               	movwf	Keyboard_Connected@i+1
  6952  1DB1  3000               	movlw	0
  6953  1DB2  00E1               	movwf	Keyboard_Connected@i
  6954                           
  6955                           ;PS_2.c: 1060: ECHO =0;
  6956  1DB3  0021               	movlb	1	; select bank1
  6957  1DB4  01E9               	clrf	_ECHO^(0+128)	;volatile
  6958                           
  6959                           ;PS_2.c: 1061: Send_PS2(0xEE);
  6960  1DB5  30EE               	movlw	238
  6961  1DB6  318C  24A9  319D   	fcall	_Send_PS2
  6962                           
  6963                           ;PS_2.c: 1062: PS_2_ENABLE_INTERRUPT(0b00100000);
  6964  1DB9  3020               	movlw	32
  6965  1DBA  3199  21B0  319D   	fcall	_PS_2_ENABLE_INTERRUPT
  6966                           
  6967                           ;PS_2.c: 1063: for(i=0;i<8000;i++)
  6968  1DBD  3000               	movlw	0
  6969  1DBE  0020               	movlb	0	; select bank0
  6970  1DBF  00E4               	movwf	Keyboard_Connected@i+3
  6971  1DC0  3000               	movlw	0
  6972  1DC1  00E3               	movwf	Keyboard_Connected@i+2
  6973  1DC2  3000               	movlw	0
  6974  1DC3  00E2               	movwf	Keyboard_Connected@i+1
  6975  1DC4  3000               	movlw	0
  6976  1DC5  00E1               	movwf	Keyboard_Connected@i
  6977  1DC6  2DD0               	goto	L4
  6978  1DC7                     l7280:	
  6979                           ;PS_2.c: 1068: {
  6980                           ;PS_2.c: 1069: break;
  6981                           
  6982  1DC7  3001               	movlw	1
  6983  1DC8  0020               	movlb	0	; select bank0
  6984  1DC9  07E1               	addwf	Keyboard_Connected@i,f
  6985  1DCA  3000               	movlw	0
  6986  1DCB  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6987  1DCC  3000               	movlw	0
  6988  1DCD  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6989  1DCE  3000               	movlw	0
  6990  1DCF  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6991  1DD0                     L4:	
  6992  1DD0  3000               	movlw	0
  6993  1DD1  0264               	subwf	Keyboard_Connected@i+3,w
  6994  1DD2  1D03               	skipz
  6995  1DD3  2DDE               	goto	u10115
  6996  1DD4  3000               	movlw	0
  6997  1DD5  0263               	subwf	Keyboard_Connected@i+2,w
  6998  1DD6  1D03               	skipz
  6999  1DD7  2DDE               	goto	u10115
  7000  1DD8  301F               	movlw	31
  7001  1DD9  0262               	subwf	Keyboard_Connected@i+1,w
  7002  1DDA  1D03               	skipz
  7003  1DDB  2DDE               	goto	u10115
  7004  1DDC  3040               	movlw	64
  7005  1DDD  0261               	subwf	Keyboard_Connected@i,w
  7006  1DDE                     u10115:	
  7007  1DDE  1803               	btfsc	3,0
  7008  1DDF  2DF3               	goto	l7282
  7009                           
  7010                           ;PS_2.c: 1064: {
  7011                           ;PS_2.c: 1065: PS_2_Update();
  7012  1DE0  3181  2115  319D   	fcall	_PS_2_Update
  7013                           
  7014                           ;PS_2.c: 1066: delayUS(10);
  7015  1DE3  3000               	movlw	0
  7016  1DE4  0020               	movlb	0	; select bank0
  7017  1DE5  00A8               	movwf	delayUS@US+3
  7018  1DE6  3000               	movlw	0
  7019  1DE7  00A7               	movwf	delayUS@US+2
  7020  1DE8  3000               	movlw	0
  7021  1DE9  00A6               	movwf	delayUS@US+1
  7022  1DEA  300A               	movlw	10
  7023  1DEB  00A5               	movwf	delayUS@US
  7024  1DEC  319B  2323  319D   	fcall	_delayUS
  7025                           
  7026                           ;PS_2.c: 1067: if(ECHO)
  7027  1DEF  0021               	movlb	1	; select bank1
  7028  1DF0  0869               	movf	_ECHO^(0+128),w	;volatile
  7029  1DF1  1903               	btfsc	3,2
  7030  1DF2  2DC7               	goto	l7280
  7031  1DF3                     l7282:	
  7032                           
  7033                           ;PS_2.c: 1070: }
  7034                           ;PS_2.c: 1071: }
  7035                           ;PS_2.c: 1072: PS_2_DISABLE_INTERRUPT(0b00100000);
  7036  1DF3  3020               	movlw	32
  7037  1DF4  3199  21DD  319D   	fcall	_PS_2_DISABLE_INTERRUPT
  7038                           
  7039                           ;PS_2.c: 1073: if(ECHO)
  7040  1DF7  0021               	movlb	1	; select bank1
  7041  1DF8  0869               	movf	_ECHO^(0+128),w	;volatile
  7042  1DF9  1903               	btfsc	3,2
  7043  1DFA  2DFD               	goto	l7292
  7044                           
  7045                           ;PS_2.c: 1074: {
  7046                           ;PS_2.c: 1075: return 1;
  7047  1DFB  3001               	movlw	1
  7048                           
  7049                           ;PS_2.c: 1076: }
  7050  1DFC  0008               	return
  7051  1DFD                     l7292:	
  7052                           
  7053                           ;PS_2.c: 1077: else
  7054                           ;PS_2.c: 1078: {
  7055                           ;PS_2.c: 1079: return 0;
  7056  1DFD  3000               	movlw	0
  7057  1DFE  0008               	return
  7058  1DFF                     __end_of_Keyboard_Connected:	
  7059                           
  7060                           	psect	text12
  7061  0115                     __ptext12:	
  7062 ;; *************** function _PS_2_Update *****************
  7063 ;; Defined at:
  7064 ;;		line 212 in file "PS_2.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  buf            60    0[BANK5 ] unsigned char [60]
  7069 ;;  temp            1   64[BANK5 ] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;		None               void
  7072 ;; Registers used:
  7073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  7081 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  7083 ;;Total ram usage:       74 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    8
  7086 ;; This function calls:
  7087 ;;		_CheckSum_byte
  7088 ;;		_Decode_Scan_Code
  7089 ;;		_Decode_Scan_Code_Function
  7090 ;;		_Decode_Scan_Code_FunctionE0
  7091 ;;		_Decode_Scan_Code_Shift
  7092 ;;		_ISNUMBER
  7093 ;;		_PS_2_DISABLE_INTERRUPT
  7094 ;;		_PS_2_ENABLE_INTERRUPT
  7095 ;;		_Reverse_Byte
  7096 ;;		_Send_PS2
  7097 ;;		_SetBaud
  7098 ;;		_UART_send_break
  7099 ;;		_UARTchar
  7100 ;;		_UARTstringWAIT
  7101 ;;		___lmul
  7102 ;;		_delayUS
  7103 ;;		_sprintf
  7104 ;; This function is called by:
  7105 ;;		_main
  7106 ;;		_Keyboard_Connected
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           
  7111                           ;psect for function _PS_2_Update
  7112  0115                     _PS_2_Update:	
  7113                           
  7114                           ;PS_2.c: 214: unsigned char temp =0;
  7115                           
  7116                           ;incstack = 0
  7117                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7118  0115  0025               	movlb	5	; select bank5
  7119  0116  01E0               	clrf	PS_2_Update@temp^(0+640)
  7120                           
  7121                           ;PS_2.c: 215: unsigned char buf[60];
  7122                           ;PS_2.c: 217: if(Read_Timer < 20)
  7123  0117  3000               	movlw	0
  7124  0118  0022               	movlb	2	; select bank2
  7125  0119  026E               	subwf	(_Read_Timer+1)^(0+256),w
  7126  011A  3014               	movlw	20
  7127  011B  1903               	skipnz
  7128  011C  026D               	subwf	_Read_Timer^(0+256),w
  7129  011D  1803               	skipnc
  7130  011E  2924               	goto	l6560
  7131                           
  7132                           ;PS_2.c: 218: {
  7133                           ;PS_2.c: 219: Read_Timer++;
  7134  011F  3001               	movlw	1
  7135  0120  07ED               	addwf	_Read_Timer^(0+256),f
  7136  0121  3000               	movlw	0
  7137  0122  3DEE               	addwfc	(_Read_Timer+1)^(0+256),f
  7138                           
  7139                           ;PS_2.c: 220: }
  7140  0123  2926               	goto	l6562
  7141  0124                     l6560:	
  7142                           
  7143                           ;PS_2.c: 221: else
  7144                           ;PS_2.c: 222: {
  7145                           ;PS_2.c: 223: PS_2_bits = 0;
  7146  0124  0020               	movlb	0	; select bank0
  7147  0125  01E8               	clrf	_PS_2_bits
  7148  0126                     l6562:	
  7149                           
  7150                           ;PS_2.c: 224: }
  7151                           ;PS_2.c: 226: if(Read_Timer == 20 && PS_2_bits != 0)
  7152  0126  3014               	movlw	20
  7153  0127  0022               	movlb	2	; select bank2
  7154  0128  066D               	xorwf	_Read_Timer^(0+256),w
  7155  0129  046E               	iorwf	(_Read_Timer+1)^(0+256),w
  7156  012A  1D03               	skipz
  7157  012B  0008               	return
  7158  012C  0020               	movlb	0	; select bank0
  7159  012D  0868               	movf	_PS_2_bits,w
  7160  012E  1903               	btfsc	3,2
  7161  012F  0008               	return
  7162                           
  7163                           ;PS_2.c: 227: {
  7164                           ;PS_2.c: 229: PS_2_DISABLE_INTERRUPT(0b00100000);
  7165  0130  3020               	movlw	32
  7166  0131  3199  21DD  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7167                           
  7168                           ;PS_2.c: 230: PIE1bits.RCIE = 0;
  7169  0134  0021               	movlb	1	; select bank1
  7170  0135  1291               	bcf	17,5	;volatile
  7171                           
  7172                           ;PS_2.c: 232: if(PS_2_bits >= 11)
  7173  0136  300B               	movlw	11
  7174  0137  0020               	movlb	0	; select bank0
  7175  0138  0268               	subwf	_PS_2_bits,w
  7176  0139  1C03               	skipc
  7177  013A  2992               	goto	l6582
  7178                           
  7179                           ;PS_2.c: 233: {
  7180                           ;PS_2.c: 236: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7181  013B  0024               	movlb	4	; select bank4
  7182  013C  0821               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7183  013D  0023               	movlb	3	; select bank3
  7184  013E  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7185  013F  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7186  0140  0024               	movlb	4	; select bank4
  7187  0141  0820               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7188  0142  0023               	movlb	3	; select bank3
  7189  0143  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7190  0144  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7191                           
  7192                           ;PS_2.c: 237: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7193  0145  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7194  0146  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7195  0147  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7196  0148  00AF               	movwf	??_PS_2_Update^(0+384)
  7197  0149  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7198  014A  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7199  014B  3001               	movlw	1
  7200  014C  052F               	andwf	??_PS_2_Update^(0+384),w
  7201  014D  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7202  014E  3000               	movlw	0
  7203  014F  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7204  0150  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7205  0151  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7206  0152  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7207  0153  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7208  0154  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7209  0155  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7210  0156  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7211  0157  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7212  0158  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7213  0159  30FF               	movlw	255
  7214  015A  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7215  015B  0020               	movlb	0	; select bank0
  7216  015C  00A5               	movwf	CheckSum_byte@This
  7217  015D  3000               	movlw	0
  7218  015E  0023               	movlb	3	; select bank3
  7219  015F  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7220  0160  0020               	movlb	0	; select bank0
  7221  0161  00A6               	movwf	CheckSum_byte@This+1
  7222  0162  3003               	movlw	3
  7223  0163  0023               	movlb	3	; select bank3
  7224  0164  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7225  0165  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7226  0166  0020               	movlb	0	; select bank0
  7227  0167  00A7               	movwf	CheckSum_byte@Odd_Even
  7228  0168  319A  225C  3181   	fcall	_CheckSum_byte
  7229  016B  0023               	movlb	3	; select bank3
  7230  016C  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7231  016D  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7232  016E  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7233  016F  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7234  0170  1D03               	skipz
  7235  0171  2974               	goto	u8605
  7236  0172  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7237  0173  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7238  0174                     u8605:	
  7239  0174  1D03               	skipz
  7240  0175  2990               	goto	l6580
  7241                           
  7242                           ;PS_2.c: 238: {
  7243                           ;PS_2.c: 240: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7244  0176  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7245  0177  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7246  0178  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7247  0179  00AF               	movwf	??_PS_2_Update^(0+384)
  7248  017A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7249  017B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7250  017C  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7251  017D  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7252  017E  30FF               	movlw	255
  7253  017F  052F               	andwf	??_PS_2_Update^(0+384),w
  7254  0180  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7255  0181  3000               	movlw	0
  7256  0182  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7257  0183  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7258                           
  7259                           ;PS_2.c: 241: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7260  0184  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7261  0185  319D  2555  3181   	fcall	_Reverse_Byte
  7262  0188  0023               	movlb	3	; select bank3
  7263  0189  00AF               	movwf	??_PS_2_Update^(0+384)
  7264  018A  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7265  018B  082F               	movf	??_PS_2_Update^(0+384),w
  7266  018C  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7267  018D  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7268  018E  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7269                           
  7270                           ;PS_2.c: 242: }
  7271  018F  2992               	goto	l6582
  7272  0190                     l6580:	
  7273                           
  7274                           ;PS_2.c: 243: else
  7275                           ;PS_2.c: 244: {
  7276                           ;PS_2.c: 246: PS_2_Read_Data_First =0;
  7277  0190  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7278  0191  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7279  0192                     l6582:	
  7280                           
  7281                           ;PS_2.c: 247: }
  7282                           ;PS_2.c: 248: }
  7283                           ;PS_2.c: 249: if(PS_2_bits >= (22))
  7284  0192  3016               	movlw	22
  7285  0193  0020               	movlb	0	; select bank0
  7286  0194  0268               	subwf	_PS_2_bits,w
  7287  0195  1C03               	skipc
  7288  0196  29F0               	goto	l6594
  7289                           
  7290                           ;PS_2.c: 250: {
  7291                           ;PS_2.c: 253: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7292  0197  0024               	movlb	4	; select bank4
  7293  0198  0825               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7294  0199  0023               	movlb	3	; select bank3
  7295  019A  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7296  019B  07A9               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7297  019C  0024               	movlb	4	; select bank4
  7298  019D  0824               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7299  019E  0023               	movlb	3	; select bank3
  7300  019F  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7301  01A0  07A8               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7302                           
  7303                           ;PS_2.c: 254: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7304  01A1  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7305  01A2  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7306  01A3  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7307  01A4  00AF               	movwf	??_PS_2_Update^(0+384)
  7308  01A5  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7309  01A6  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7310  01A7  3001               	movlw	1
  7311  01A8  052F               	andwf	??_PS_2_Update^(0+384),w
  7312  01A9  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7313  01AA  3000               	movlw	0
  7314  01AB  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7315  01AC  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7316  01AD  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7317  01AE  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7318  01AF  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7319  01B0  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7320  01B1  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7321  01B2  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7322  01B3  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7323  01B4  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7324  01B5  30FF               	movlw	255
  7325  01B6  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7326  01B7  0020               	movlb	0	; select bank0
  7327  01B8  00A5               	movwf	CheckSum_byte@This
  7328  01B9  3000               	movlw	0
  7329  01BA  0023               	movlb	3	; select bank3
  7330  01BB  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7331  01BC  0020               	movlb	0	; select bank0
  7332  01BD  00A6               	movwf	CheckSum_byte@This+1
  7333  01BE  3003               	movlw	3
  7334  01BF  0023               	movlb	3	; select bank3
  7335  01C0  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7336  01C1  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7337  01C2  0020               	movlb	0	; select bank0
  7338  01C3  00A7               	movwf	CheckSum_byte@Odd_Even
  7339  01C4  319A  225C  3181   	fcall	_CheckSum_byte
  7340  01C7  0023               	movlb	3	; select bank3
  7341  01C8  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7342  01C9  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7343  01CA  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7344  01CB  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7345  01CC  1D03               	skipz
  7346  01CD  29D0               	goto	u8625
  7347  01CE  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7348  01CF  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7349  01D0                     u8625:	
  7350  01D0  1D03               	skipz
  7351  01D1  29EC               	goto	l6592
  7352                           
  7353                           ;PS_2.c: 255: {
  7354                           ;PS_2.c: 257: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7355  01D2  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7356  01D3  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7357  01D4  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7358  01D5  00AF               	movwf	??_PS_2_Update^(0+384)
  7359  01D6  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7360  01D7  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7361  01D8  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7362  01D9  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7363  01DA  30FF               	movlw	255
  7364  01DB  052F               	andwf	??_PS_2_Update^(0+384),w
  7365  01DC  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7366  01DD  3000               	movlw	0
  7367  01DE  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7368  01DF  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7369                           
  7370                           ;PS_2.c: 258: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7371  01E0  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7372  01E1  319D  2555  3181   	fcall	_Reverse_Byte
  7373  01E4  0023               	movlb	3	; select bank3
  7374  01E5  00AF               	movwf	??_PS_2_Update^(0+384)
  7375  01E6  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7376  01E7  082F               	movf	??_PS_2_Update^(0+384),w
  7377  01E8  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7378  01E9  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7379  01EA  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7380                           
  7381                           ;PS_2.c: 259: }
  7382  01EB  29F0               	goto	l6594
  7383  01EC                     l6592:	
  7384                           
  7385                           ;PS_2.c: 260: else
  7386                           ;PS_2.c: 261: {
  7387                           ;PS_2.c: 263: PS_2_Read_Data_First =0;
  7388  01EC  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7389  01ED  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7390                           
  7391                           ;PS_2.c: 264: PS_2_Read_Data_Second =0;
  7392  01EE  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7393  01EF  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7394  01F0                     l6594:	
  7395                           
  7396                           ;PS_2.c: 265: }
  7397                           ;PS_2.c: 266: }
  7398                           ;PS_2.c: 267: if(PS_2_bits >= (33))
  7399  01F0  3021               	movlw	33
  7400  01F1  0020               	movlb	0	; select bank0
  7401  01F2  0268               	subwf	_PS_2_bits,w
  7402  01F3  1C03               	skipc
  7403  01F4  2A50               	goto	l6606
  7404                           
  7405                           ;PS_2.c: 268: {
  7406                           ;PS_2.c: 271: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7407  01F5  0024               	movlb	4	; select bank4
  7408  01F6  0827               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7409  01F7  0023               	movlb	3	; select bank3
  7410  01F8  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7411  01F9  07AB               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7412  01FA  0024               	movlb	4	; select bank4
  7413  01FB  0826               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7414  01FC  0023               	movlb	3	; select bank3
  7415  01FD  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7416  01FE  07AA               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7417                           
  7418                           ;PS_2.c: 272: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7419  01FF  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7420  0200  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7421  0201  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7422  0202  00AF               	movwf	??_PS_2_Update^(0+384)
  7423  0203  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7424  0204  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7425  0205  3001               	movlw	1
  7426  0206  052F               	andwf	??_PS_2_Update^(0+384),w
  7427  0207  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7428  0208  3000               	movlw	0
  7429  0209  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7430  020A  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7431  020B  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7432  020C  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7433  020D  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7434  020E  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7435  020F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7436  0210  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7437  0211  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7438  0212  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7439  0213  30FF               	movlw	255
  7440  0214  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7441  0215  0020               	movlb	0	; select bank0
  7442  0216  00A5               	movwf	CheckSum_byte@This
  7443  0217  3000               	movlw	0
  7444  0218  0023               	movlb	3	; select bank3
  7445  0219  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7446  021A  0020               	movlb	0	; select bank0
  7447  021B  00A6               	movwf	CheckSum_byte@This+1
  7448  021C  3003               	movlw	3
  7449  021D  0023               	movlb	3	; select bank3
  7450  021E  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7451  021F  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7452  0220  0020               	movlb	0	; select bank0
  7453  0221  00A7               	movwf	CheckSum_byte@Odd_Even
  7454  0222  319A  225C  3181   	fcall	_CheckSum_byte
  7455  0225  0023               	movlb	3	; select bank3
  7456  0226  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7457  0227  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7458  0228  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7459  0229  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7460  022A  1D03               	skipz
  7461  022B  2A2E               	goto	u8645
  7462  022C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7463  022D  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7464  022E                     u8645:	
  7465  022E  1D03               	skipz
  7466  022F  2A4A               	goto	l6604
  7467                           
  7468                           ;PS_2.c: 273: {
  7469                           ;PS_2.c: 275: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7470  0230  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7471  0231  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7472  0232  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7473  0233  00AF               	movwf	??_PS_2_Update^(0+384)
  7474  0234  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7475  0235  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7476  0236  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7477  0237  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7478  0238  30FF               	movlw	255
  7479  0239  052F               	andwf	??_PS_2_Update^(0+384),w
  7480  023A  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7481  023B  3000               	movlw	0
  7482  023C  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7483  023D  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7484                           
  7485                           ;PS_2.c: 276: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7486  023E  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7487  023F  319D  2555  3181   	fcall	_Reverse_Byte
  7488  0242  0023               	movlb	3	; select bank3
  7489  0243  00AF               	movwf	??_PS_2_Update^(0+384)
  7490  0244  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7491  0245  082F               	movf	??_PS_2_Update^(0+384),w
  7492  0246  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7493  0247  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7494  0248  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7495                           
  7496                           ;PS_2.c: 277: }
  7497  0249  2A50               	goto	l6606
  7498  024A                     l6604:	
  7499                           
  7500                           ;PS_2.c: 278: else
  7501                           ;PS_2.c: 279: {
  7502                           ;PS_2.c: 281: PS_2_Read_Data_First =0;
  7503  024A  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7504  024B  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7505                           
  7506                           ;PS_2.c: 282: PS_2_Read_Data_Second =0;
  7507  024C  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7508  024D  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7509                           
  7510                           ;PS_2.c: 283: PS_2_Read_Data_Third =0;
  7511  024E  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7512  024F  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7513  0250                     l6606:	
  7514                           
  7515                           ;PS_2.c: 284: }
  7516                           ;PS_2.c: 285: }
  7517                           ;PS_2.c: 286: if(PS_2_bits >= (44))
  7518  0250  302C               	movlw	44
  7519  0251  0020               	movlb	0	; select bank0
  7520  0252  0268               	subwf	_PS_2_bits,w
  7521  0253  1C03               	skipc
  7522  0254  2AB2               	goto	l6618
  7523                           
  7524                           ;PS_2.c: 287: {
  7525                           ;PS_2.c: 290: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7526  0255  0024               	movlb	4	; select bank4
  7527  0256  0823               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7528  0257  0023               	movlb	3	; select bank3
  7529  0258  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7530  0259  07A7               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7531  025A  0024               	movlb	4	; select bank4
  7532  025B  0822               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7533  025C  0023               	movlb	3	; select bank3
  7534  025D  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7535  025E  07A6               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7536                           
  7537                           ;PS_2.c: 291: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7538  025F  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7539  0260  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7540  0261  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7541  0262  00AF               	movwf	??_PS_2_Update^(0+384)
  7542  0263  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7543  0264  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7544  0265  3001               	movlw	1
  7545  0266  052F               	andwf	??_PS_2_Update^(0+384),w
  7546  0267  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7547  0268  3000               	movlw	0
  7548  0269  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7549  026A  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7550  026B  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7551  026C  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7552  026D  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7553  026E  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7554  026F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7555  0270  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7556  0271  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7557  0272  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7558  0273  30FF               	movlw	255
  7559  0274  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7560  0275  0020               	movlb	0	; select bank0
  7561  0276  00A5               	movwf	CheckSum_byte@This
  7562  0277  3000               	movlw	0
  7563  0278  0023               	movlb	3	; select bank3
  7564  0279  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7565  027A  0020               	movlb	0	; select bank0
  7566  027B  00A6               	movwf	CheckSum_byte@This+1
  7567  027C  3003               	movlw	3
  7568  027D  0023               	movlb	3	; select bank3
  7569  027E  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7570  027F  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7571  0280  0020               	movlb	0	; select bank0
  7572  0281  00A7               	movwf	CheckSum_byte@Odd_Even
  7573  0282  319A  225C  3181   	fcall	_CheckSum_byte
  7574  0285  0023               	movlb	3	; select bank3
  7575  0286  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7576  0287  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7577  0288  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7578  0289  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7579  028A  1D03               	skipz
  7580  028B  2A8E               	goto	u8665
  7581  028C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7582  028D  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7583  028E                     u8665:	
  7584  028E  1D03               	skipz
  7585  028F  2AAA               	goto	l6616
  7586                           
  7587                           ;PS_2.c: 292: {
  7588                           ;PS_2.c: 294: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7589  0290  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7590  0291  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7591  0292  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7592  0293  00AF               	movwf	??_PS_2_Update^(0+384)
  7593  0294  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7594  0295  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7595  0296  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7596  0297  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7597  0298  30FF               	movlw	255
  7598  0299  052F               	andwf	??_PS_2_Update^(0+384),w
  7599  029A  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7600  029B  3000               	movlw	0
  7601  029C  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7602  029D  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7603                           
  7604                           ;PS_2.c: 295: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7605  029E  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7606  029F  319D  2555  3181   	fcall	_Reverse_Byte
  7607  02A2  0023               	movlb	3	; select bank3
  7608  02A3  00AF               	movwf	??_PS_2_Update^(0+384)
  7609  02A4  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7610  02A5  082F               	movf	??_PS_2_Update^(0+384),w
  7611  02A6  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7612  02A7  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7613  02A8  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7614                           
  7615                           ;PS_2.c: 296: }
  7616  02A9  2AB2               	goto	l6618
  7617  02AA                     l6616:	
  7618                           
  7619                           ;PS_2.c: 297: else
  7620                           ;PS_2.c: 298: {
  7621                           ;PS_2.c: 300: PS_2_Read_Data_First =0;
  7622  02AA  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7623  02AB  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7624                           
  7625                           ;PS_2.c: 301: PS_2_Read_Data_Second =0;
  7626  02AC  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7627  02AD  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7628                           
  7629                           ;PS_2.c: 302: PS_2_Read_Data_Third =0;
  7630  02AE  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7631  02AF  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7632                           
  7633                           ;PS_2.c: 303: PS_2_Read_Data_Forth =0;
  7634  02B0  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7635  02B1  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7636  02B2                     l6618:	
  7637                           
  7638                           ;PS_2.c: 304: }
  7639                           ;PS_2.c: 305: }
  7640                           ;PS_2.c: 307: if(PS_2_Read_Data_Forth)
  7641  02B2  0023               	movlb	3	; select bank3
  7642  02B3  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7643  02B4  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7644  02B5  1903               	skipnz
  7645  02B6  2ACD               	goto	l6630
  7646                           
  7647                           ;PS_2.c: 308: {
  7648                           ;PS_2.c: 309: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7649                           ;PS_2.c: 310: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7650  02B7  30F0               	movlw	240
  7651  02B8  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7652  02B9  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7653  02BA  1903               	skipnz
  7654  02BB  2C06               	goto	l6762
  7655  02BC  30F0               	movlw	240
  7656  02BD  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7657  02BE  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7658  02BF  1903               	skipnz
  7659  02C0  2C06               	goto	l6762
  7660  02C1  30F0               	movlw	240
  7661  02C2  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7662  02C3  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7663  02C4  1903               	skipnz
  7664  02C5  2C06               	goto	l6762
  7665  02C6  30F0               	movlw	240
  7666  02C7  0626               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7667  02C8  0427               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7668  02C9  1903               	skipnz
  7669  02CA  2C06               	goto	l6762
  7670                           
  7671                           ;PS_2.c: 311: {
  7672                           ;PS_2.c: 313: __nop();
  7673  02CB  0000               	nop
  7674                           
  7675                           ;PS_2.c: 314: }
  7676                           ;PS_2.c: 315: }
  7677  02CC  2C06               	goto	l6762
  7678  02CD                     l6630:	
  7679                           
  7680                           ;PS_2.c: 316: else if(PS_2_Read_Data_Third)
  7681  02CD  0023               	movlb	3	; select bank3
  7682  02CE  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7683  02CF  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7684  02D0  1903               	skipnz
  7685  02D1  2B22               	goto	l6666
  7686                           
  7687                           ;PS_2.c: 317: {
  7688                           ;PS_2.c: 319: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7689                           ;PS_2.c: 320: PS_2_Read_Data_First != 0xE0 &&
  7690                           ;PS_2.c: 321: PS_2_Read_Data_Second != 0xE0 &&
  7691                           ;PS_2.c: 322: PS_2_Read_Data_Third != 0xE0)
  7692  02D2  30F0               	movlw	240
  7693  02D3  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7694  02D4  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7695  02D5  1D03               	skipz
  7696  02D6  2AFD               	goto	l6650
  7697  02D7  30F0               	movlw	240
  7698  02D8  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7699  02D9  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7700  02DA  1903               	skipnz
  7701  02DB  2AFD               	goto	l6650
  7702  02DC  30E0               	movlw	224
  7703  02DD  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7704  02DE  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7705  02DF  1903               	skipnz
  7706  02E0  2AFD               	goto	l6650
  7707  02E1  30E0               	movlw	224
  7708  02E2  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7709  02E3  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7710  02E4  1903               	skipnz
  7711  02E5  2AFD               	goto	l6650
  7712  02E6  30E0               	movlw	224
  7713  02E7  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7714  02E8  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7715  02E9  1903               	skipnz
  7716  02EA  2AFD               	goto	l6650
  7717                           
  7718                           ;PS_2.c: 323: {
  7719                           ;PS_2.c: 325: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7720  02EB  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7721  02EC  3199  219D  3181   	fcall	_Decode_Scan_Code_Shift
  7722  02EF  3A00               	xorlw	0
  7723  02F0  1903               	skipnz
  7724  02F1  2AFD               	goto	l6650
  7725                           
  7726                           ;PS_2.c: 326: {
  7727                           ;PS_2.c: 328: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7728  02F2  0023               	movlb	3	; select bank3
  7729  02F3  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7730  02F4  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7731  02F5  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7732  02F6  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7733  02F7  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7734  02F8  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7735                           
  7736                           ;PS_2.c: 329: PS_2_Read_Data_Second = 0;
  7737  02F9  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7738  02FA  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7739                           
  7740                           ;PS_2.c: 330: PS_2_Read_Data_Third = 0;
  7741  02FB  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7742  02FC  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7743  02FD                     l6650:	
  7744                           
  7745                           ;PS_2.c: 331: }
  7746                           ;PS_2.c: 332: }
  7747                           ;PS_2.c: 333: if(PS_2_Read_Data_First == 0xE0)
  7748  02FD  30E0               	movlw	224
  7749  02FE  0023               	movlb	3	; select bank3
  7750  02FF  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7751  0300  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7752  0301  1D03               	skipz
  7753  0302  2C06               	goto	l6762
  7754                           
  7755                           ;PS_2.c: 334: {
  7756                           ;PS_2.c: 335: if(PS_2_Read_Data_Second == 0xF0)
  7757  0303  30F0               	movlw	240
  7758  0304  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7759  0305  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7760  0306  1D03               	skipz
  7761  0307  2C06               	goto	l6762
  7762                           
  7763                           ;PS_2.c: 336: {
  7764                           ;PS_2.c: 337: if(PS_2_Read_Data_Third == 0x11 )
  7765  0308  3011               	movlw	17
  7766  0309  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7767  030A  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7768  030B  1D03               	skipz
  7769  030C  2B10               	goto	l6658
  7770                           
  7771                           ;PS_2.c: 338: {
  7772                           ;PS_2.c: 339: LALT = 0;
  7773  030D  0022               	movlb	2	; select bank2
  7774  030E  01E7               	clrf	_LALT^(0+256)
  7775                           
  7776                           ;PS_2.c: 340: }
  7777  030F  2C06               	goto	l6762
  7778  0310                     l6658:	
  7779                           
  7780                           ;PS_2.c: 341: else if(PS_2_Read_Data_Third == 0x14 )
  7781  0310  3014               	movlw	20
  7782  0311  0023               	movlb	3	; select bank3
  7783  0312  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7784  0313  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7785  0314  1D03               	skipz
  7786  0315  2B19               	goto	l6662
  7787                           
  7788                           ;PS_2.c: 342: {
  7789                           ;PS_2.c: 343: LControl = 0;
  7790  0316  0022               	movlb	2	; select bank2
  7791  0317  01E8               	clrf	_LControl^(0+256)
  7792                           
  7793                           ;PS_2.c: 344: }
  7794  0318  2C06               	goto	l6762
  7795  0319                     l6662:	
  7796                           
  7797                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x71 )
  7798  0319  3071               	movlw	113
  7799  031A  0023               	movlb	3	; select bank3
  7800  031B  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7801  031C  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7802  031D  1D03               	skipz
  7803  031E  2C06               	goto	l6762
  7804                           
  7805                           ;PS_2.c: 346: {
  7806                           ;PS_2.c: 347: Delete = 0;
  7807  031F  0022               	movlb	2	; select bank2
  7808  0320  01E6               	clrf	_Delete^(0+256)
  7809                           
  7810                           ;PS_2.c: 348: }
  7811                           ;PS_2.c: 349: }
  7812                           ;PS_2.c: 350: }
  7813                           ;PS_2.c: 351: }
  7814  0321  2C06               	goto	l6762
  7815  0322                     l6666:	
  7816                           
  7817                           ;PS_2.c: 352: else if(PS_2_Read_Data_Second)
  7818  0322  0023               	movlb	3	; select bank3
  7819  0323  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7820  0324  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7821  0325  1903               	skipnz
  7822  0326  2C06               	goto	l6762
  7823                           
  7824                           ;PS_2.c: 353: {
  7825                           ;PS_2.c: 355: if(PS_2_Read_Data_First == 0xF0)
  7826  0327  30F0               	movlw	240
  7827  0328  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7828  0329  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7829  032A  1D03               	skipz
  7830  032B  2BAC               	goto	l6730
  7831                           
  7832                           ;PS_2.c: 356: {
  7833                           ;PS_2.c: 358: if(PS_2_Read_Data_Second == 0x12)
  7834  032C  3012               	movlw	18
  7835  032D  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7836  032E  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7837  032F  1D03               	skipz
  7838  0330  2B33               	goto	l6674
  7839                           
  7840                           ;PS_2.c: 359: {
  7841                           ;PS_2.c: 360: Right_Shift_Key =0;
  7842  0331  01AE               	clrf	_Right_Shift_Key^(0+384)
  7843                           
  7844                           ;PS_2.c: 361: }
  7845  0332  2B4C               	goto	l6686
  7846  0333                     l6674:	
  7847                           
  7848                           ;PS_2.c: 362: else if(PS_2_Read_Data_Second == 0x59)
  7849  0333  3059               	movlw	89
  7850  0334  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7851  0335  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7852  0336  1D03               	skipz
  7853  0337  2B3B               	goto	l6678
  7854                           
  7855                           ;PS_2.c: 363: {
  7856                           ;PS_2.c: 364: Left_Shift_Key =0;
  7857  0338  0020               	movlb	0	; select bank0
  7858  0339  01E6               	clrf	_Left_Shift_Key
  7859                           
  7860                           ;PS_2.c: 365: }
  7861  033A  2B4C               	goto	l6686
  7862  033B                     l6678:	
  7863                           
  7864                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x14)
  7865  033B  3014               	movlw	20
  7866  033C  0023               	movlb	3	; select bank3
  7867  033D  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7868  033E  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7869  033F  1D03               	skipz
  7870  0340  2B44               	goto	l6682
  7871                           
  7872                           ;PS_2.c: 367: {
  7873                           ;PS_2.c: 368: RControl =0;
  7874  0341  0022               	movlb	2	; select bank2
  7875  0342  01EB               	clrf	_RControl^(0+256)
  7876                           
  7877                           ;PS_2.c: 369: }
  7878  0343  2B4C               	goto	l6686
  7879  0344                     l6682:	
  7880                           
  7881                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x11 )
  7882  0344  3011               	movlw	17
  7883  0345  0023               	movlb	3	; select bank3
  7884  0346  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7885  0347  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7886  0348  1D03               	skipz
  7887  0349  2B4C               	goto	l6686
  7888                           
  7889                           ;PS_2.c: 371: {
  7890                           ;PS_2.c: 372: RALT =0;
  7891  034A  0022               	movlb	2	; select bank2
  7892  034B  01EA               	clrf	_RALT^(0+256)
  7893  034C                     l6686:	
  7894                           
  7895                           ;PS_2.c: 373: }
  7896                           ;PS_2.c: 374: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7897  034C  3059               	movlw	89
  7898  034D  0023               	movlb	3	; select bank3
  7899  034E  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7900  034F  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7901  0350  1903               	skipnz
  7902  0351  2B57               	goto	l6690
  7903  0352  3012               	movlw	18
  7904  0353  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7905  0354  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7906  0355  1D03               	skipz
  7907  0356  2BA4               	goto	l6726
  7908  0357                     l6690:	
  7909                           
  7910                           ;PS_2.c: 375: {
  7911                           ;PS_2.c: 376: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7912  0357  08AE               	movf	_Right_Shift_Key^(0+384),f
  7913  0358  1D03               	skipz
  7914  0359  2C06               	goto	l6762
  7915  035A  0020               	movlb	0	; select bank0
  7916  035B  08E6               	movf	_Left_Shift_Key,f
  7917  035C  1D03               	skipz
  7918  035D  2C06               	goto	l6762
  7919                           
  7920                           ;PS_2.c: 377: {
  7921                           ;PS_2.c: 378: if(!Send_PS2(0xED))
  7922  035E  30ED               	movlw	237
  7923  035F  318C  24A9  3181   	fcall	_Send_PS2
  7924  0362  3800               	iorlw	0
  7925  0363  1D03               	skipz
  7926  0364  2B6E               	goto	l6700
  7927                           
  7928                           ;PS_2.c: 379: {
  7929                           ;PS_2.c: 380: if(!Send_PS2(0x00))
  7930  0365  3000               	movlw	0
  7931  0366  318C  24A9  3181   	fcall	_Send_PS2
  7932  0369  3800               	iorlw	0
  7933  036A  1D03               	skipz
  7934  036B  2B6E               	goto	l6700
  7935                           
  7936                           ;PS_2.c: 381: {
  7937                           ;PS_2.c: 382: Shift_Key = 0;
  7938  036C  0020               	movlb	0	; select bank0
  7939  036D  01EA               	clrf	_Shift_Key
  7940  036E                     l6700:	
  7941                           
  7942                           ;PS_2.c: 383: }
  7943                           ;PS_2.c: 384: }
  7944                           ;PS_2.c: 385: if(Caps_Lock)
  7945  036E  0023               	movlb	3	; select bank3
  7946  036F  082D               	movf	_Caps_Lock^(0+384),w
  7947  0370  1903               	btfsc	3,2
  7948  0371  2B8B               	goto	l6714
  7949                           
  7950                           ;PS_2.c: 386: {
  7951                           ;PS_2.c: 387: CapsCount=0;
  7952  0372  01AC               	clrf	_CapsCount^(0+384)
  7953  0373                     l6712:	
  7954                           ;PS_2.c: 388: while(CapsCount<10)
  7955                           
  7956  0373  300A               	movlw	10
  7957  0374  022C               	subwf	_CapsCount^(0+384),w
  7958  0375  1803               	btfsc	3,0
  7959  0376  2C06               	goto	l6762
  7960                           
  7961                           ;PS_2.c: 389: {
  7962                           ;PS_2.c: 390: if(!Send_PS2(0xED))
  7963  0377  30ED               	movlw	237
  7964  0378  318C  24A9  3181   	fcall	_Send_PS2
  7965  037B  3800               	iorlw	0
  7966  037C  1D03               	skipz
  7967  037D  2B85               	goto	l6710
  7968                           
  7969                           ;PS_2.c: 391: {
  7970                           ;PS_2.c: 392: if(!Send_PS2(0x04))
  7971  037E  3004               	movlw	4
  7972  037F  318C  24A9  3181   	fcall	_Send_PS2
  7973  0382  3800               	iorlw	0
  7974  0383  1903               	btfsc	3,2
  7975  0384  2C06               	goto	l6762
  7976  0385                     l6710:	
  7977                           ;PS_2.c: 393: {
  7978                           ;PS_2.c: 394: break;
  7979                           
  7980                           
  7981                           ;PS_2.c: 395: }
  7982                           ;PS_2.c: 396: }
  7983                           ;PS_2.c: 397: CapsCount++;
  7984  0385  3001               	movlw	1
  7985  0386  0023               	movlb	3	; select bank3
  7986  0387  00AF               	movwf	??_PS_2_Update^(0+384)
  7987  0388  082F               	movf	??_PS_2_Update^(0+384),w
  7988  0389  07AC               	addwf	_CapsCount^(0+384),f
  7989  038A  2B73               	goto	l6712
  7990  038B                     l6714:	
  7991                           ;PS_2.c: 398: }
  7992                           ;PS_2.c: 399: }
  7993                           
  7994                           
  7995                           ;PS_2.c: 400: else
  7996                           ;PS_2.c: 401: {
  7997                           ;PS_2.c: 402: CapsCount=0;
  7998  038B  01AC               	clrf	_CapsCount^(0+384)
  7999  038C                     l6724:	
  8000                           ;PS_2.c: 403: while(CapsCount<10)
  8001                           
  8002  038C  300A               	movlw	10
  8003  038D  022C               	subwf	_CapsCount^(0+384),w
  8004  038E  1803               	btfsc	3,0
  8005  038F  2C06               	goto	l6762
  8006                           
  8007                           ;PS_2.c: 404: {
  8008                           ;PS_2.c: 405: if(!Send_PS2(0xED))
  8009  0390  30ED               	movlw	237
  8010  0391  318C  24A9  3181   	fcall	_Send_PS2
  8011  0394  3800               	iorlw	0
  8012  0395  1D03               	skipz
  8013  0396  2B9E               	goto	l6722
  8014                           
  8015                           ;PS_2.c: 406: {
  8016                           ;PS_2.c: 407: if(!Send_PS2(0x00))
  8017  0397  3000               	movlw	0
  8018  0398  318C  24A9  3181   	fcall	_Send_PS2
  8019  039B  3800               	iorlw	0
  8020  039C  1903               	btfsc	3,2
  8021  039D  2C06               	goto	l6762
  8022  039E                     l6722:	
  8023                           ;PS_2.c: 408: {
  8024                           ;PS_2.c: 409: break;
  8025                           
  8026                           
  8027                           ;PS_2.c: 410: }
  8028                           ;PS_2.c: 411: }
  8029                           ;PS_2.c: 412: CapsCount++;
  8030  039E  3001               	movlw	1
  8031  039F  0023               	movlb	3	; select bank3
  8032  03A0  00AF               	movwf	??_PS_2_Update^(0+384)
  8033  03A1  082F               	movf	??_PS_2_Update^(0+384),w
  8034  03A2  07AC               	addwf	_CapsCount^(0+384),f
  8035  03A3  2B8C               	goto	l6724
  8036  03A4                     l6726:	
  8037                           ;PS_2.c: 413: }
  8038                           ;PS_2.c: 414: }
  8039                           ;PS_2.c: 415: }
  8040                           ;PS_2.c: 416: }
  8041                           
  8042                           
  8043                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x58)
  8044  03A4  3058               	movlw	88
  8045  03A5  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8046  03A6  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8047  03A7  1D03               	skipz
  8048  03A8  2C06               	goto	l6762
  8049                           
  8050                           ;PS_2.c: 418: {
  8051                           ;PS_2.c: 419: Caps_Lock_Key = 0;
  8052  03A9  0022               	movlb	2	; select bank2
  8053  03AA  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8054                           
  8055                           ;PS_2.c: 420: }
  8056                           ;PS_2.c: 421: }
  8057  03AB  2C06               	goto	l6762
  8058  03AC                     l6730:	
  8059                           
  8060                           ;PS_2.c: 422: else if(PS_2_Read_Data_First == 0xE0)
  8061  03AC  30E0               	movlw	224
  8062  03AD  0023               	movlb	3	; select bank3
  8063  03AE  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8064  03AF  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8065  03B0  1D03               	skipz
  8066  03B1  2C06               	goto	l6762
  8067                           
  8068                           ;PS_2.c: 423: {
  8069                           ;PS_2.c: 425: if(PS_2_Read_Data_Second == 0x11 )
  8070  03B2  3011               	movlw	17
  8071  03B3  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8072  03B4  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8073  03B5  1D03               	skipz
  8074  03B6  2BBB               	goto	l6736
  8075                           
  8076                           ;PS_2.c: 426: {
  8077                           ;PS_2.c: 427: LALT = 1;
  8078  03B7  0022               	movlb	2	; select bank2
  8079  03B8  01E7               	clrf	_LALT^(0+256)
  8080  03B9  0AE7               	incf	_LALT^(0+256),f
  8081                           
  8082                           ;PS_2.c: 428: }
  8083  03BA  2BCE               	goto	l764
  8084  03BB                     l6736:	
  8085                           
  8086                           ;PS_2.c: 429: else if(PS_2_Read_Data_Second == 0x14 )
  8087  03BB  3014               	movlw	20
  8088  03BC  0023               	movlb	3	; select bank3
  8089  03BD  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8090  03BE  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8091  03BF  1D03               	skipz
  8092  03C0  2BC5               	goto	l6740
  8093                           
  8094                           ;PS_2.c: 430: {
  8095                           ;PS_2.c: 431: LControl = 1;
  8096  03C1  0022               	movlb	2	; select bank2
  8097  03C2  01E8               	clrf	_LControl^(0+256)
  8098  03C3  0AE8               	incf	_LControl^(0+256),f
  8099                           
  8100                           ;PS_2.c: 432: }
  8101  03C4  2BCE               	goto	l764
  8102  03C5                     l6740:	
  8103                           
  8104                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x71 )
  8105  03C5  3071               	movlw	113
  8106  03C6  0023               	movlb	3	; select bank3
  8107  03C7  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8108  03C8  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8109  03C9  1D03               	skipz
  8110  03CA  2BCE               	goto	l764
  8111                           
  8112                           ;PS_2.c: 434: {
  8113                           ;PS_2.c: 435: Delete = 1;
  8114  03CB  0022               	movlb	2	; select bank2
  8115  03CC  01E6               	clrf	_Delete^(0+256)
  8116  03CD  0AE6               	incf	_Delete^(0+256),f
  8117  03CE                     l764:	
  8118                           
  8119                           ;PS_2.c: 436: }
  8120                           ;PS_2.c: 437: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8121  03CE  0025               	movlb	5	; select bank5
  8122  03CF  01DC               	clrf	_PS_2_Update$854^(0+640)
  8123  03D0  0ADC               	incf	_PS_2_Update$854^(0+640),f
  8124  03D1  0022               	movlb	2	; select bank2
  8125  03D2  08E7               	movf	_LALT^(0+256),f
  8126  03D3  1D03               	skipz
  8127  03D4  2BDA               	goto	l6750
  8128  03D5  08EA               	movf	_RALT^(0+256),f
  8129  03D6  1D03               	skipz
  8130  03D7  2BDA               	goto	l6750
  8131  03D8  0025               	movlb	5	; select bank5
  8132  03D9  01DC               	clrf	_PS_2_Update$854^(0+640)
  8133  03DA                     l6750:	
  8134  03DA  0025               	movlb	5	; select bank5
  8135  03DB  01DD               	clrf	_PS_2_Update$855^(0+640)
  8136  03DC  0ADD               	incf	_PS_2_Update$855^(0+640),f
  8137  03DD  0022               	movlb	2	; select bank2
  8138  03DE  08EB               	movf	_RControl^(0+256),f
  8139  03DF  1D03               	skipz
  8140  03E0  2BE6               	goto	l6758
  8141  03E1  08E8               	movf	_LControl^(0+256),f
  8142  03E2  1D03               	skipz
  8143  03E3  2BE6               	goto	l6758
  8144  03E4  0025               	movlb	5	; select bank5
  8145  03E5  01DD               	clrf	_PS_2_Update$855^(0+640)
  8146  03E6                     l6758:	
  8147  03E6  0022               	movlb	2	; select bank2
  8148  03E7  0866               	movf	_Delete^(0+256),w
  8149  03E8  0023               	movlb	3	; select bank3
  8150  03E9  00AF               	movwf	??_PS_2_Update^(0+384)
  8151  03EA  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8152  03EB  0025               	movlb	5	; select bank5
  8153  03EC  085D               	movf	_PS_2_Update$855^(0+640),w
  8154  03ED  075C               	addwf	_PS_2_Update$854^(0+640),w
  8155  03EE  0023               	movlb	3	; select bank3
  8156  03EF  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8157  03F0  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8158  03F1  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8159  03F2  082F               	movf	??_PS_2_Update^(0+384),w
  8160  03F3  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8161  03F4  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8162  03F5  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8163  03F6  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8164  03F7  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8165  03F8  3003               	movlw	3
  8166  03F9  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8167  03FA  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8168  03FB  1903               	skipnz
  8169  03FC  2C06               	goto	l6762
  8170                           
  8171                           ;PS_2.c: 438: {
  8172                           ;PS_2.c: 440: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8173  03FD  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  8174  03FE  3199  218A  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8175  0401  0023               	movlb	3	; select bank3
  8176  0402  00AF               	movwf	??_PS_2_Update^(0+384)
  8177  0403  082F               	movf	??_PS_2_Update^(0+384),w
  8178  0404  0025               	movlb	5	; select bank5
  8179  0405  00E0               	movwf	PS_2_Update@temp^(0+640)
  8180  0406                     l6762:	
  8181                           
  8182                           ;PS_2.c: 441: }
  8183                           ;PS_2.c: 442: }
  8184                           ;PS_2.c: 443: }
  8185                           ;PS_2.c: 444: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8186                           ;PS_2.c: 445: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8187  0406  0023               	movlb	3	; select bank3
  8188  0407  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8189  0408  0424               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8190  0409  1903               	skipnz
  8191  040A  2D6B               	goto	l6912
  8192  040B  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8193  040C  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8194  040D  1D03               	skipz
  8195  040E  2D6B               	goto	l6912
  8196  040F  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8197  0410  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8198  0411  1D03               	skipz
  8199  0412  2D6B               	goto	l6912
  8200  0413  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8201  0414  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8202  0415  1D03               	skipz
  8203  0416  2D6B               	goto	l6912
  8204                           
  8205                           ;PS_2.c: 446: {
  8206                           ;PS_2.c: 448: if(PS_2_Read_Data_First == 0x12)
  8207  0417  3012               	movlw	18
  8208  0418  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8209  0419  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8210  041A  1D03               	skipz
  8211  041B  2C1F               	goto	l6774
  8212                           
  8213                           ;PS_2.c: 449: {
  8214                           ;PS_2.c: 450: Right_Shift_Key = 1;
  8215  041C  01AE               	clrf	_Right_Shift_Key^(0+384)
  8216  041D  0AAE               	incf	_Right_Shift_Key^(0+384),f
  8217                           
  8218                           ;PS_2.c: 451: }
  8219  041E  2C27               	goto	l6778
  8220  041F                     l6774:	
  8221                           
  8222                           ;PS_2.c: 452: else if(PS_2_Read_Data_First == 0x59)
  8223  041F  3059               	movlw	89
  8224  0420  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8225  0421  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8226  0422  1D03               	skipz
  8227  0423  2C27               	goto	l6778
  8228                           
  8229                           ;PS_2.c: 453: {
  8230                           ;PS_2.c: 454: Left_Shift_Key = 1;
  8231  0424  0020               	movlb	0	; select bank0
  8232  0425  01E6               	clrf	_Left_Shift_Key
  8233  0426  0AE6               	incf	_Left_Shift_Key,f
  8234  0427                     l6778:	
  8235                           
  8236                           ;PS_2.c: 455: }
  8237                           ;PS_2.c: 456: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8238  0427  0023               	movlb	3	; select bank3
  8239  0428  082E               	movf	_Right_Shift_Key^(0+384),w
  8240  0429  3A01               	xorlw	1
  8241  042A  1D03               	skipz
  8242  042B  2C30               	goto	l6782
  8243  042C  0022               	movlb	2	; select bank2
  8244  042D  086C               	movf	_Right_Shift_Key_old^(0+256),w
  8245  042E  1903               	btfsc	3,2
  8246  042F  2C39               	goto	l6786
  8247  0430                     l6782:	
  8248  0430  0020               	movlb	0	; select bank0
  8249  0431  0866               	movf	_Left_Shift_Key,w
  8250  0432  3A01               	xorlw	1
  8251  0433  1D03               	skipz
  8252  0434  2C79               	goto	l6814
  8253  0435  0022               	movlb	2	; select bank2
  8254  0436  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8255  0437  1D03               	skipz
  8256  0438  2C79               	goto	l6814
  8257  0439                     l6786:	
  8258                           
  8259                           ;PS_2.c: 457: {
  8260                           ;PS_2.c: 459: if(!Send_PS2(0xED))
  8261  0439  30ED               	movlw	237
  8262  043A  318C  24A9  3181   	fcall	_Send_PS2
  8263  043D  3800               	iorlw	0
  8264  043E  1D03               	skipz
  8265  043F  2C79               	goto	l6814
  8266                           
  8267                           ;PS_2.c: 460: {
  8268                           ;PS_2.c: 461: if(Caps_Lock)
  8269  0440  0023               	movlb	3	; select bank3
  8270  0441  082D               	movf	_Caps_Lock^(0+384),w
  8271  0442  1903               	btfsc	3,2
  8272  0443  2C5D               	goto	l6802
  8273                           
  8274                           ;PS_2.c: 462: {
  8275                           ;PS_2.c: 463: CapsCount=0;
  8276  0444  01AC               	clrf	_CapsCount^(0+384)
  8277  0445                     l6800:	
  8278                           ;PS_2.c: 464: while(CapsCount<10)
  8279                           
  8280  0445  300A               	movlw	10
  8281  0446  022C               	subwf	_CapsCount^(0+384),w
  8282  0447  1803               	btfsc	3,0
  8283  0448  2C79               	goto	l6814
  8284                           
  8285                           ;PS_2.c: 465: {
  8286                           ;PS_2.c: 466: if(!Send_PS2(0xED))
  8287  0449  30ED               	movlw	237
  8288  044A  318C  24A9  3181   	fcall	_Send_PS2
  8289  044D  3800               	iorlw	0
  8290  044E  1D03               	skipz
  8291  044F  2C57               	goto	l6798
  8292                           
  8293                           ;PS_2.c: 467: {
  8294                           ;PS_2.c: 468: if(!Send_PS2(0x05))
  8295  0450  3005               	movlw	5
  8296  0451  318C  24A9  3181   	fcall	_Send_PS2
  8297  0454  3800               	iorlw	0
  8298  0455  1903               	btfsc	3,2
  8299  0456  2C76               	goto	l6808
  8300  0457                     l6798:	
  8301                           ;PS_2.c: 471: break;
  8302                           
  8303                           ;PS_2.c: 469: {
  8304                           ;PS_2.c: 470: Shift_Key = 1;
  8305                           
  8306                           
  8307                           ;PS_2.c: 472: }
  8308                           ;PS_2.c: 473: }
  8309                           ;PS_2.c: 474: CapsCount++;
  8310  0457  3001               	movlw	1
  8311  0458  0023               	movlb	3	; select bank3
  8312  0459  00AF               	movwf	??_PS_2_Update^(0+384)
  8313  045A  082F               	movf	??_PS_2_Update^(0+384),w
  8314  045B  07AC               	addwf	_CapsCount^(0+384),f
  8315  045C  2C45               	goto	l6800
  8316  045D                     l6802:	
  8317                           ;PS_2.c: 475: }
  8318                           ;PS_2.c: 476: }
  8319                           
  8320                           
  8321                           ;PS_2.c: 477: else
  8322                           ;PS_2.c: 478: {
  8323                           ;PS_2.c: 479: CapsCount=0;
  8324  045D  01AC               	clrf	_CapsCount^(0+384)
  8325                           
  8326                           ;PS_2.c: 480: while(CapsCount<10)
  8327  045E  2C64               	goto	l6812
  8328  045F                     l6810:	
  8329                           ;PS_2.c: 487: break;
  8330                           
  8331                           
  8332                           ;PS_2.c: 488: }
  8333                           ;PS_2.c: 489: }
  8334                           ;PS_2.c: 490: CapsCount++;
  8335  045F  3001               	movlw	1
  8336  0460  0023               	movlb	3	; select bank3
  8337  0461  00AF               	movwf	??_PS_2_Update^(0+384)
  8338  0462  082F               	movf	??_PS_2_Update^(0+384),w
  8339  0463  07AC               	addwf	_CapsCount^(0+384),f
  8340  0464                     l6812:	
  8341  0464  300A               	movlw	10
  8342  0465  022C               	subwf	_CapsCount^(0+384),w
  8343  0466  1803               	btfsc	3,0
  8344  0467  2C79               	goto	l6814
  8345                           
  8346                           ;PS_2.c: 481: {
  8347                           ;PS_2.c: 482: if(!Send_PS2(0xED))
  8348  0468  30ED               	movlw	237
  8349  0469  318C  24A9  3181   	fcall	_Send_PS2
  8350  046C  3800               	iorlw	0
  8351  046D  1D03               	skipz
  8352  046E  2C5F               	goto	l6810
  8353                           
  8354                           ;PS_2.c: 483: {
  8355                           ;PS_2.c: 484: if(!Send_PS2(0x01))
  8356  046F  3001               	movlw	1
  8357  0470  318C  24A9  3181   	fcall	_Send_PS2
  8358  0473  3800               	iorlw	0
  8359  0474  1D03               	skipz
  8360  0475  2C5F               	goto	l6810
  8361  0476                     l6808:	
  8362                           
  8363                           ;PS_2.c: 485: {
  8364                           ;PS_2.c: 486: Shift_Key = 1;
  8365  0476  0020               	movlb	0	; select bank0
  8366  0477  01EA               	clrf	_Shift_Key
  8367  0478  0AEA               	incf	_Shift_Key,f
  8368  0479                     l6814:	
  8369                           
  8370                           ;PS_2.c: 491: }
  8371                           ;PS_2.c: 492: }
  8372                           ;PS_2.c: 493: }
  8373                           ;PS_2.c: 494: }
  8374                           ;PS_2.c: 495: if(PS_2_Read_Data_First == 0x14 )
  8375  0479  3014               	movlw	20
  8376  047A  0023               	movlb	3	; select bank3
  8377  047B  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8378  047C  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8379  047D  1D03               	skipz
  8380  047E  2C83               	goto	l6818
  8381                           
  8382                           ;PS_2.c: 496: {
  8383                           ;PS_2.c: 497: RControl = 1;
  8384  047F  0022               	movlb	2	; select bank2
  8385  0480  01EB               	clrf	_RControl^(0+256)
  8386  0481  0AEB               	incf	_RControl^(0+256),f
  8387                           
  8388                           ;PS_2.c: 498: }
  8389  0482  2D6B               	goto	l6912
  8390  0483                     l6818:	
  8391                           
  8392                           ;PS_2.c: 499: else if(PS_2_Read_Data_First == 0x11 )
  8393  0483  3011               	movlw	17
  8394  0484  0023               	movlb	3	; select bank3
  8395  0485  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8396  0486  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8397  0487  1D03               	skipz
  8398  0488  2C8D               	goto	l6822
  8399                           
  8400                           ;PS_2.c: 500: {
  8401                           ;PS_2.c: 501: RALT = 1;
  8402  0489  0022               	movlb	2	; select bank2
  8403  048A  01EA               	clrf	_RALT^(0+256)
  8404  048B  0AEA               	incf	_RALT^(0+256),f
  8405                           
  8406                           ;PS_2.c: 502: }
  8407  048C  2D6B               	goto	l6912
  8408  048D                     l6822:	
  8409                           
  8410                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0xEE )
  8411  048D  30EE               	movlw	238
  8412  048E  0023               	movlb	3	; select bank3
  8413  048F  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8414  0490  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8415  0491  1D03               	skipz
  8416  0492  2C99               	goto	l6826
  8417                           
  8418                           ;PS_2.c: 504: {
  8419                           ;PS_2.c: 505: ECHO = 1;
  8420  0493  3001               	movlw	1
  8421  0494  00AF               	movwf	??_PS_2_Update^(0+384)
  8422  0495  082F               	movf	??_PS_2_Update^(0+384),w
  8423  0496  0021               	movlb	1	; select bank1
  8424  0497  00E9               	movwf	_ECHO^(0+128)	;volatile
  8425                           
  8426                           ;PS_2.c: 506: }
  8427  0498  2D6B               	goto	l6912
  8428  0499                     l6826:	
  8429                           
  8430                           ;PS_2.c: 507: else if(PS_2_Read_Data_First == 0x58)
  8431  0499  3058               	movlw	88
  8432  049A  0023               	movlb	3	; select bank3
  8433  049B  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8434  049C  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8435  049D  1D03               	skipz
  8436  049E  2D20               	goto	l6886
  8437                           
  8438                           ;PS_2.c: 508: {
  8439                           ;PS_2.c: 509: Caps_Lock_Key = 1;
  8440  049F  0022               	movlb	2	; select bank2
  8441  04A0  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8442  04A1  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8443                           
  8444                           ;PS_2.c: 510: if(Caps_Lock_Key_old == 0)
  8445  04A2  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8446  04A3  1D03               	skipz
  8447  04A4  2D6B               	goto	l6912
  8448                           
  8449                           ;PS_2.c: 511: {
  8450                           ;PS_2.c: 512: if(Caps_Lock)
  8451  04A5  0023               	movlb	3	; select bank3
  8452  04A6  082D               	movf	_Caps_Lock^(0+384),w
  8453  04A7  1903               	btfsc	3,2
  8454  04A8  2CE4               	goto	l6860
  8455                           
  8456                           ;PS_2.c: 513: {
  8457                           ;PS_2.c: 514: if(Shift_Key)
  8458  04A9  0020               	movlb	0	; select bank0
  8459  04AA  086A               	movf	_Shift_Key,w
  8460  04AB  1903               	btfsc	3,2
  8461  04AC  2CC7               	goto	l6848
  8462                           
  8463                           ;PS_2.c: 515: {
  8464                           ;PS_2.c: 516: CapsCount=0;
  8465  04AD  0023               	movlb	3	; select bank3
  8466  04AE  01AC               	clrf	_CapsCount^(0+384)
  8467  04AF                     l6846:	
  8468                           ;PS_2.c: 517: while(CapsCount<10)
  8469                           
  8470  04AF  300A               	movlw	10
  8471  04B0  022C               	subwf	_CapsCount^(0+384),w
  8472  04B1  1803               	btfsc	3,0
  8473  04B2  2D6B               	goto	l6912
  8474                           
  8475                           ;PS_2.c: 518: {
  8476                           ;PS_2.c: 519: if(!Send_PS2(0xED))
  8477  04B3  30ED               	movlw	237
  8478  04B4  318C  24A9  3181   	fcall	_Send_PS2
  8479  04B7  3800               	iorlw	0
  8480  04B8  1D03               	skipz
  8481  04B9  2CC1               	goto	l6844
  8482                           
  8483                           ;PS_2.c: 520: {
  8484                           ;PS_2.c: 521: if(!Send_PS2(0x01))
  8485  04BA  3001               	movlw	1
  8486  04BB  318C  24A9  3181   	fcall	_Send_PS2
  8487  04BE  3800               	iorlw	0
  8488  04BF  1903               	btfsc	3,2
  8489  04C0  2CDB               	goto	l6854
  8490  04C1                     l6844:	
  8491                           ;PS_2.c: 524: break;
  8492                           
  8493                           ;PS_2.c: 522: {
  8494                           ;PS_2.c: 523: Caps_Lock =0;
  8495                           
  8496                           
  8497                           ;PS_2.c: 525: }
  8498                           ;PS_2.c: 526: }
  8499                           ;PS_2.c: 527: CapsCount++;
  8500  04C1  3001               	movlw	1
  8501  04C2  0023               	movlb	3	; select bank3
  8502  04C3  00AF               	movwf	??_PS_2_Update^(0+384)
  8503  04C4  082F               	movf	??_PS_2_Update^(0+384),w
  8504  04C5  07AC               	addwf	_CapsCount^(0+384),f
  8505  04C6  2CAF               	goto	l6846
  8506  04C7                     l6848:	
  8507                           ;PS_2.c: 528: }
  8508                           ;PS_2.c: 529: }
  8509                           
  8510                           
  8511                           ;PS_2.c: 530: else
  8512                           ;PS_2.c: 531: {
  8513                           ;PS_2.c: 532: CapsCount=0;
  8514  04C7  0023               	movlb	3	; select bank3
  8515  04C8  01AC               	clrf	_CapsCount^(0+384)
  8516  04C9                     l6858:	
  8517                           ;PS_2.c: 533: while(CapsCount<10)
  8518                           
  8519  04C9  300A               	movlw	10
  8520  04CA  022C               	subwf	_CapsCount^(0+384),w
  8521  04CB  1803               	btfsc	3,0
  8522  04CC  2D6B               	goto	l6912
  8523                           
  8524                           ;PS_2.c: 534: {
  8525                           ;PS_2.c: 535: if(!Send_PS2(0xED))
  8526  04CD  30ED               	movlw	237
  8527  04CE  318C  24A9  3181   	fcall	_Send_PS2
  8528  04D1  3800               	iorlw	0
  8529  04D2  1D03               	skipz
  8530  04D3  2CDE               	goto	l6856
  8531                           
  8532                           ;PS_2.c: 536: {
  8533                           ;PS_2.c: 537: if(!Send_PS2(0x00))
  8534  04D4  3000               	movlw	0
  8535  04D5  318C  24A9  3181   	fcall	_Send_PS2
  8536  04D8  3800               	iorlw	0
  8537  04D9  1D03               	skipz
  8538  04DA  2CDE               	goto	l6856
  8539  04DB                     l6854:	
  8540                           
  8541                           ;PS_2.c: 538: {
  8542                           ;PS_2.c: 539: Caps_Lock =0;
  8543  04DB  0023               	movlb	3	; select bank3
  8544  04DC  01AD               	clrf	_Caps_Lock^(0+384)
  8545                           
  8546                           ;PS_2.c: 540: break;
  8547  04DD  2D6B               	goto	l6912
  8548  04DE                     l6856:	
  8549                           
  8550                           ;PS_2.c: 541: }
  8551                           ;PS_2.c: 542: }
  8552                           ;PS_2.c: 543: CapsCount++;
  8553  04DE  3001               	movlw	1
  8554  04DF  0023               	movlb	3	; select bank3
  8555  04E0  00AF               	movwf	??_PS_2_Update^(0+384)
  8556  04E1  082F               	movf	??_PS_2_Update^(0+384),w
  8557  04E2  07AC               	addwf	_CapsCount^(0+384),f
  8558  04E3  2CC9               	goto	l6858
  8559  04E4                     l6860:	
  8560                           ;PS_2.c: 544: }
  8561                           ;PS_2.c: 545: }
  8562                           ;PS_2.c: 546: }
  8563                           
  8564                           
  8565                           ;PS_2.c: 547: else
  8566                           ;PS_2.c: 548: {
  8567                           ;PS_2.c: 549: if(Shift_Key)
  8568  04E4  0020               	movlb	0	; select bank0
  8569  04E5  086A               	movf	_Shift_Key,w
  8570  04E6  1903               	btfsc	3,2
  8571  04E7  2D02               	goto	l6874
  8572                           
  8573                           ;PS_2.c: 550: {
  8574                           ;PS_2.c: 551: CapsCount=0;
  8575  04E8  0023               	movlb	3	; select bank3
  8576  04E9  01AC               	clrf	_CapsCount^(0+384)
  8577  04EA                     l6872:	
  8578                           ;PS_2.c: 552: while(CapsCount<10)
  8579                           
  8580  04EA  300A               	movlw	10
  8581  04EB  022C               	subwf	_CapsCount^(0+384),w
  8582  04EC  1803               	btfsc	3,0
  8583  04ED  2D6B               	goto	l6912
  8584                           
  8585                           ;PS_2.c: 553: {
  8586                           ;PS_2.c: 554: if(!Send_PS2(0xED))
  8587  04EE  30ED               	movlw	237
  8588  04EF  318C  24A9  3181   	fcall	_Send_PS2
  8589  04F2  3800               	iorlw	0
  8590  04F3  1D03               	skipz
  8591  04F4  2CFC               	goto	l6870
  8592                           
  8593                           ;PS_2.c: 555: {
  8594                           ;PS_2.c: 556: if(!Send_PS2(0x05))
  8595  04F5  3005               	movlw	5
  8596  04F6  318C  24A9  3181   	fcall	_Send_PS2
  8597  04F9  3800               	iorlw	0
  8598  04FA  1903               	btfsc	3,2
  8599  04FB  2D16               	goto	l6880
  8600  04FC                     l6870:	
  8601                           ;PS_2.c: 559: break;
  8602                           
  8603                           ;PS_2.c: 557: {
  8604                           ;PS_2.c: 558: Caps_Lock =1;
  8605                           
  8606                           
  8607                           ;PS_2.c: 560: }
  8608                           ;PS_2.c: 561: }
  8609                           ;PS_2.c: 562: CapsCount++;
  8610  04FC  3001               	movlw	1
  8611  04FD  0023               	movlb	3	; select bank3
  8612  04FE  00AF               	movwf	??_PS_2_Update^(0+384)
  8613  04FF  082F               	movf	??_PS_2_Update^(0+384),w
  8614  0500  07AC               	addwf	_CapsCount^(0+384),f
  8615  0501  2CEA               	goto	l6872
  8616  0502                     l6874:	
  8617                           ;PS_2.c: 563: }
  8618                           ;PS_2.c: 564: }
  8619                           
  8620                           
  8621                           ;PS_2.c: 565: else
  8622                           ;PS_2.c: 566: {
  8623                           ;PS_2.c: 567: CapsCount=0;
  8624  0502  0023               	movlb	3	; select bank3
  8625  0503  01AC               	clrf	_CapsCount^(0+384)
  8626  0504                     l6884:	
  8627                           ;PS_2.c: 568: while(CapsCount<10)
  8628                           
  8629  0504  300A               	movlw	10
  8630  0505  022C               	subwf	_CapsCount^(0+384),w
  8631  0506  1803               	btfsc	3,0
  8632  0507  2D6B               	goto	l6912
  8633                           
  8634                           ;PS_2.c: 569: {
  8635                           ;PS_2.c: 570: if(!Send_PS2(0xED))
  8636  0508  30ED               	movlw	237
  8637  0509  318C  24A9  3181   	fcall	_Send_PS2
  8638  050C  3800               	iorlw	0
  8639  050D  1D03               	skipz
  8640  050E  2D1A               	goto	l6882
  8641                           
  8642                           ;PS_2.c: 571: {
  8643                           ;PS_2.c: 572: if(!Send_PS2(0x04))
  8644  050F  3004               	movlw	4
  8645  0510  318C  24A9  3181   	fcall	_Send_PS2
  8646  0513  3800               	iorlw	0
  8647  0514  1D03               	skipz
  8648  0515  2D1A               	goto	l6882
  8649  0516                     l6880:	
  8650                           
  8651                           ;PS_2.c: 573: {
  8652                           ;PS_2.c: 574: Caps_Lock =1;
  8653  0516  0023               	movlb	3	; select bank3
  8654  0517  01AD               	clrf	_Caps_Lock^(0+384)
  8655  0518  0AAD               	incf	_Caps_Lock^(0+384),f
  8656                           
  8657                           ;PS_2.c: 575: break;
  8658  0519  2D6B               	goto	l6912
  8659  051A                     l6882:	
  8660                           
  8661                           ;PS_2.c: 576: }
  8662                           ;PS_2.c: 577: }
  8663                           ;PS_2.c: 578: CapsCount++;
  8664  051A  3001               	movlw	1
  8665  051B  0023               	movlb	3	; select bank3
  8666  051C  00AF               	movwf	??_PS_2_Update^(0+384)
  8667  051D  082F               	movf	??_PS_2_Update^(0+384),w
  8668  051E  07AC               	addwf	_CapsCount^(0+384),f
  8669  051F  2D04               	goto	l6884
  8670  0520                     l6886:	
  8671                           ;PS_2.c: 579: }
  8672                           ;PS_2.c: 580: }
  8673                           ;PS_2.c: 581: }
  8674                           ;PS_2.c: 582: }
  8675                           ;PS_2.c: 584: }
  8676                           
  8677                           
  8678                           ;PS_2.c: 585: else
  8679                           ;PS_2.c: 586: {
  8680                           ;PS_2.c: 587: if(Shift_Key ==1)
  8681  0520  0020               	movlb	0	; select bank0
  8682  0521  086A               	movf	_Shift_Key,w
  8683  0522  3A01               	xorlw	1
  8684  0523  1D03               	skipz
  8685  0524  2D43               	goto	l6898
  8686                           
  8687                           ;PS_2.c: 588: {
  8688                           ;PS_2.c: 590: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8689  0525  0023               	movlb	3	; select bank3
  8690  0526  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8691  0527  3199  219D  3181   	fcall	_Decode_Scan_Code_Shift
  8692  052A  0023               	movlb	3	; select bank3
  8693  052B  00AF               	movwf	??_PS_2_Update^(0+384)
  8694  052C  082F               	movf	??_PS_2_Update^(0+384),w
  8695  052D  0025               	movlb	5	; select bank5
  8696  052E  00E0               	movwf	PS_2_Update@temp^(0+640)
  8697                           
  8698                           ;PS_2.c: 591: if(Caps_Lock)
  8699  052F  0023               	movlb	3	; select bank3
  8700  0530  082D               	movf	_Caps_Lock^(0+384),w
  8701  0531  1903               	btfsc	3,2
  8702  0532  2D5D               	goto	l6908
  8703                           
  8704                           ;PS_2.c: 592: {
  8705                           ;PS_2.c: 594: if(temp >= 'A' && temp <= 'Z')
  8706  0533  3041               	movlw	65
  8707  0534  0025               	movlb	5	; select bank5
  8708  0535  0260               	subwf	PS_2_Update@temp^(0+640),w
  8709  0536  1C03               	skipc
  8710  0537  2D5C               	goto	l834
  8711  0538  305B               	movlw	91
  8712  0539  0260               	subwf	PS_2_Update@temp^(0+640),w
  8713  053A  1803               	skipnc
  8714  053B  2D5C               	goto	l834
  8715                           
  8716                           ;PS_2.c: 595: {
  8717                           ;PS_2.c: 596: temp += 32;
  8718  053C  3020               	movlw	32
  8719  053D  0023               	movlb	3	; select bank3
  8720  053E  00AF               	movwf	??_PS_2_Update^(0+384)
  8721  053F  082F               	movf	??_PS_2_Update^(0+384),w
  8722  0540  0025               	movlb	5	; select bank5
  8723  0541  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8724  0542  2D5C               	goto	l834
  8725  0543                     l6898:	
  8726                           ;PS_2.c: 597: }
  8727                           ;PS_2.c: 598: }
  8728                           ;PS_2.c: 599: }
  8729                           
  8730                           
  8731                           ;PS_2.c: 600: else
  8732                           ;PS_2.c: 601: {
  8733                           ;PS_2.c: 602: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8734  0543  0023               	movlb	3	; select bank3
  8735  0544  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8736  0545  3199  2177  3181   	fcall	_Decode_Scan_Code
  8737  0548  0023               	movlb	3	; select bank3
  8738  0549  00AF               	movwf	??_PS_2_Update^(0+384)
  8739  054A  082F               	movf	??_PS_2_Update^(0+384),w
  8740  054B  0025               	movlb	5	; select bank5
  8741  054C  00E0               	movwf	PS_2_Update@temp^(0+640)
  8742                           
  8743                           ;PS_2.c: 603: if(Caps_Lock)
  8744  054D  0023               	movlb	3	; select bank3
  8745  054E  082D               	movf	_Caps_Lock^(0+384),w
  8746  054F  1903               	btfsc	3,2
  8747  0550  2D5D               	goto	l6908
  8748                           
  8749                           ;PS_2.c: 604: {
  8750                           ;PS_2.c: 606: if(temp >= 'a' && temp <= 'z')
  8751  0551  3061               	movlw	97
  8752  0552  0025               	movlb	5	; select bank5
  8753  0553  0260               	subwf	PS_2_Update@temp^(0+640),w
  8754  0554  1C03               	skipc
  8755  0555  2D5C               	goto	l834
  8756  0556  307B               	movlw	123
  8757  0557  0260               	subwf	PS_2_Update@temp^(0+640),w
  8758  0558  1803               	skipnc
  8759  0559  2D5C               	goto	l834
  8760                           
  8761                           ;PS_2.c: 607: {
  8762                           ;PS_2.c: 608: temp -= 32;
  8763  055A  3020               	movlw	32
  8764  055B  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8765  055C                     l834:	
  8766  055C  0023               	movlb	3	; select bank3
  8767  055D                     l6908:	
  8768                           
  8769                           ;PS_2.c: 609: }
  8770                           ;PS_2.c: 610: }
  8771                           ;PS_2.c: 611: }
  8772                           ;PS_2.c: 612: if(!temp)
  8773  055D  0025               	movlb	5	; select bank5
  8774  055E  08E0               	movf	PS_2_Update@temp^(0+640),f
  8775  055F  1D03               	skipz
  8776  0560  2D6B               	goto	l6912
  8777                           
  8778                           ;PS_2.c: 613: {
  8779                           ;PS_2.c: 615: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8780  0561  0023               	movlb	3	; select bank3
  8781  0562  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8782  0563  318C  2498  3181   	fcall	_Decode_Scan_Code_Function
  8783  0566  0023               	movlb	3	; select bank3
  8784  0567  00AF               	movwf	??_PS_2_Update^(0+384)
  8785  0568  082F               	movf	??_PS_2_Update^(0+384),w
  8786  0569  0025               	movlb	5	; select bank5
  8787  056A  00E0               	movwf	PS_2_Update@temp^(0+640)
  8788  056B                     l6912:	
  8789                           
  8790                           ;PS_2.c: 616: }
  8791                           ;PS_2.c: 617: }
  8792                           ;PS_2.c: 618: }
  8793                           ;PS_2.c: 619: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8794  056B  0025               	movlb	5	; select bank5
  8795  056C  01DE               	clrf	_PS_2_Update$856^(0+640)
  8796  056D  0ADE               	incf	_PS_2_Update$856^(0+640),f
  8797  056E  0022               	movlb	2	; select bank2
  8798  056F  08E7               	movf	_LALT^(0+256),f
  8799  0570  1D03               	skipz
  8800  0571  2D77               	goto	l6920
  8801  0572  08EA               	movf	_RALT^(0+256),f
  8802  0573  1D03               	skipz
  8803  0574  2D77               	goto	l6920
  8804  0575  0025               	movlb	5	; select bank5
  8805  0576  01DE               	clrf	_PS_2_Update$856^(0+640)
  8806  0577                     l6920:	
  8807  0577  0025               	movlb	5	; select bank5
  8808  0578  01DF               	clrf	_PS_2_Update$857^(0+640)
  8809  0579  0ADF               	incf	_PS_2_Update$857^(0+640),f
  8810  057A  0022               	movlb	2	; select bank2
  8811  057B  08EB               	movf	_RControl^(0+256),f
  8812  057C  1D03               	skipz
  8813  057D  2D83               	goto	l6928
  8814  057E  08E8               	movf	_LControl^(0+256),f
  8815  057F  1D03               	skipz
  8816  0580  2D83               	goto	l6928
  8817  0581  0025               	movlb	5	; select bank5
  8818  0582  01DF               	clrf	_PS_2_Update$857^(0+640)
  8819  0583                     l6928:	
  8820  0583  0022               	movlb	2	; select bank2
  8821  0584  0866               	movf	_Delete^(0+256),w
  8822  0585  0023               	movlb	3	; select bank3
  8823  0586  00AF               	movwf	??_PS_2_Update^(0+384)
  8824  0587  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8825  0588  0025               	movlb	5	; select bank5
  8826  0589  085F               	movf	_PS_2_Update$857^(0+640),w
  8827  058A  075E               	addwf	_PS_2_Update$856^(0+640),w
  8828  058B  0023               	movlb	3	; select bank3
  8829  058C  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8830  058D  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8831  058E  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8832  058F  082F               	movf	??_PS_2_Update^(0+384),w
  8833  0590  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8834  0591  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8835  0592  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8836  0593  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8837  0594  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8838  0595  3003               	movlw	3
  8839  0596  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8840  0597  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8841  0598  1D03               	skipz
  8842  0599  2E15               	goto	l6968
  8843                           
  8844                           ;PS_2.c: 620: {
  8845                           ;PS_2.c: 622: UARTstringWAIT("\r\n");
  8846  059A  303D               	movlw	low ((STR_11+17)| (0+32768))
  8847  059B  0020               	movlb	0	; select bank0
  8848  059C  00B4               	movwf	UARTstringWAIT@data
  8849  059D  308C               	movlw	high ((STR_11+17)| (0+32768))
  8850  059E  00B5               	movwf	UARTstringWAIT@data+1
  8851  059F  319A  22F0  3181   	fcall	_UARTstringWAIT
  8852                           
  8853                           ;PS_2.c: 623: delayUS(10000);
  8854  05A2  3000               	movlw	0
  8855  05A3  0020               	movlb	0	; select bank0
  8856  05A4  00A8               	movwf	delayUS@US+3
  8857  05A5  3000               	movlw	0
  8858  05A6  00A7               	movwf	delayUS@US+2
  8859  05A7  3027               	movlw	39
  8860  05A8  00A6               	movwf	delayUS@US+1
  8861  05A9  3010               	movlw	16
  8862  05AA  00A5               	movwf	delayUS@US
  8863  05AB  319B  2323  3181   	fcall	_delayUS
  8864                           
  8865                           ;PS_2.c: 624: if(!BAUDMODE)
  8866  05AE  0022               	movlb	2	; select bank2
  8867  05AF  08E3               	movf	_BAUDMODE^(0+256),f
  8868  05B0  1D03               	skipz
  8869  05B1  2DDC               	goto	l6948
  8870                           
  8871                           ;PS_2.c: 625: {
  8872                           ;PS_2.c: 626: BaudTyped =0;
  8873  05B2  3000               	movlw	0
  8874  05B3  0023               	movlb	3	; select bank3
  8875  05B4  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8876  05B5  3000               	movlw	0
  8877  05B6  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8878  05B7  3000               	movlw	0
  8879  05B8  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8880  05B9  3000               	movlw	0
  8881  05BA  00A0               	movwf	_BaudTyped^(0+384)
  8882                           
  8883                           ;PS_2.c: 627: ParityTyped =0;
  8884  05BB  0020               	movlb	0	; select bank0
  8885  05BC  01E9               	clrf	_ParityTyped
  8886                           
  8887                           ;PS_2.c: 628: BAUDMODE = 1;
  8888  05BD  0022               	movlb	2	; select bank2
  8889  05BE  01E3               	clrf	_BAUDMODE^(0+256)
  8890  05BF  0AE3               	incf	_BAUDMODE^(0+256),f
  8891                           
  8892                           ;PS_2.c: 629: UARTstringWAIT("Enter Baud rate\r\n");
  8893  05C0  3066               	movlw	low (STR_26| (0+32768))
  8894  05C1  0020               	movlb	0	; select bank0
  8895  05C2  00B4               	movwf	UARTstringWAIT@data
  8896  05C3  308C               	movlw	high (STR_26| (0+32768))
  8897  05C4  00B5               	movwf	UARTstringWAIT@data+1
  8898  05C5  319A  22F0  3181   	fcall	_UARTstringWAIT
  8899                           
  8900                           ;PS_2.c: 630: delayUS(10000);
  8901  05C8  3000               	movlw	0
  8902  05C9  0020               	movlb	0	; select bank0
  8903  05CA  00A8               	movwf	delayUS@US+3
  8904  05CB  3000               	movlw	0
  8905  05CC  00A7               	movwf	delayUS@US+2
  8906  05CD  3027               	movlw	39
  8907  05CE  00A6               	movwf	delayUS@US+1
  8908  05CF  3010               	movlw	16
  8909  05D0  00A5               	movwf	delayUS@US
  8910  05D1  319B  2323  3181   	fcall	_delayUS
  8911                           
  8912                           ;PS_2.c: 631: UARTchar('>' , 0, 0);
  8913  05D4  0020               	movlb	0	; select bank0
  8914  05D5  01AD               	clrf	UARTchar@NinethBit_override
  8915  05D6  01AE               	clrf	UARTchar@NinethBit_override_data
  8916  05D7  303E               	movlw	62
  8917  05D8  319C  2463  3181   	fcall	_UARTchar
  8918                           
  8919                           ;PS_2.c: 633: }
  8920  05DB  2E0F               	goto	l6958
  8921  05DC                     l6948:	
  8922                           
  8923                           ;PS_2.c: 634: else
  8924                           ;PS_2.c: 635: {
  8925                           ;PS_2.c: 636: BaudTyped = 9600;
  8926  05DC  3000               	movlw	0
  8927  05DD  0023               	movlb	3	; select bank3
  8928  05DE  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8929  05DF  3000               	movlw	0
  8930  05E0  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8931  05E1  3025               	movlw	37
  8932  05E2  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8933  05E3  3080               	movlw	128
  8934  05E4  00A0               	movwf	_BaudTyped^(0+384)
  8935                           
  8936                           ;PS_2.c: 637: UARTstringWAIT("Reset to 9600 with no parity bit\r\n");
  8937  05E5  30D6               	movlw	low (STR_27| (0+32768))
  8938  05E6  0020               	movlb	0	; select bank0
  8939  05E7  00B4               	movwf	UARTstringWAIT@data
  8940  05E8  308A               	movlw	high (STR_27| (0+32768))
  8941  05E9  00B5               	movwf	UARTstringWAIT@data+1
  8942  05EA  319A  22F0  3181   	fcall	_UARTstringWAIT
  8943                           
  8944                           ;PS_2.c: 638: delayUS(10000);
  8945  05ED  3000               	movlw	0
  8946  05EE  0020               	movlb	0	; select bank0
  8947  05EF  00A8               	movwf	delayUS@US+3
  8948  05F0  3000               	movlw	0
  8949  05F1  00A7               	movwf	delayUS@US+2
  8950  05F2  3027               	movlw	39
  8951  05F3  00A6               	movwf	delayUS@US+1
  8952  05F4  3010               	movlw	16
  8953  05F5  00A5               	movwf	delayUS@US
  8954  05F6  319B  2323  3181   	fcall	_delayUS
  8955                           
  8956                           ;PS_2.c: 639: SetBaud(BaudTyped, 0);
  8957  05F9  0023               	movlb	3	; select bank3
  8958  05FA  0823               	movf	(_BaudTyped+3)^(0+384),w
  8959  05FB  0020               	movlb	0	; select bank0
  8960  05FC  00D7               	movwf	SetBaud@Baud+3
  8961  05FD  0023               	movlb	3	; select bank3
  8962  05FE  0822               	movf	(_BaudTyped+2)^(0+384),w
  8963  05FF  0020               	movlb	0	; select bank0
  8964  0600  00D6               	movwf	SetBaud@Baud+2
  8965  0601  0023               	movlb	3	; select bank3
  8966  0602  0821               	movf	(_BaudTyped+1)^(0+384),w
  8967  0603  0020               	movlb	0	; select bank0
  8968  0604  00D5               	movwf	SetBaud@Baud+1
  8969  0605  0023               	movlb	3	; select bank3
  8970  0606  0820               	movf	_BaudTyped^(0+384),w
  8971  0607  0020               	movlb	0	; select bank0
  8972  0608  00D4               	movwf	SetBaud@Baud
  8973  0609  01D8               	clrf	SetBaud@Parity
  8974  060A  3196  2693  3181   	fcall	_SetBaud
  8975                           
  8976                           ;PS_2.c: 640: BAUDMODE = 0;
  8977  060D  0022               	movlb	2	; select bank2
  8978  060E  01E3               	clrf	_BAUDMODE^(0+256)
  8979  060F                     l6958:	
  8980                           
  8981                           ;PS_2.c: 641: }
  8982                           ;PS_2.c: 642: RControl =0;
  8983  060F  0022               	movlb	2	; select bank2
  8984  0610  01EB               	clrf	_RControl^(0+256)
  8985                           
  8986                           ;PS_2.c: 643: LControl =0;
  8987  0611  01E8               	clrf	_LControl^(0+256)
  8988                           
  8989                           ;PS_2.c: 644: LALT =0;
  8990  0612  01E7               	clrf	_LALT^(0+256)
  8991                           
  8992                           ;PS_2.c: 645: RALT =0;
  8993  0613  01EA               	clrf	_RALT^(0+256)
  8994                           
  8995                           ;PS_2.c: 646: Delete =0;
  8996  0614  01E6               	clrf	_Delete^(0+256)
  8997  0615                     l6968:	
  8998                           
  8999                           ;PS_2.c: 647: }
  9000                           ;PS_2.c: 648: if(temp)
  9001  0615  0025               	movlb	5	; select bank5
  9002  0616  0860               	movf	PS_2_Update@temp^(0+640),w
  9003  0617  1903               	btfsc	3,2
  9004  0618  2FC5               	goto	l7062
  9005                           
  9006                           ;PS_2.c: 649: {
  9007                           ;PS_2.c: 651: if(temp == 0x01)
  9008  0619  0860               	movf	PS_2_Update@temp^(0+640),w
  9009  061A  3A01               	xorlw	1
  9010  061B  1D03               	skipz
  9011  061C  2E21               	goto	l6974
  9012                           
  9013                           ;PS_2.c: 652: {
  9014                           ;PS_2.c: 654: UART_send_break();
  9015  061D  3198  20B0  3181   	fcall	_UART_send_break
  9016  0620  2FC4               	goto	l846
  9017  0621                     l6974:	
  9018                           ;PS_2.c: 655: }
  9019                           
  9020                           
  9021                           ;PS_2.c: 656: else
  9022                           ;PS_2.c: 657: {
  9023                           ;PS_2.c: 658: if(!BAUDMODE)
  9024  0621  0022               	movlb	2	; select bank2
  9025  0622  08E3               	movf	_BAUDMODE^(0+256),f
  9026  0623  1D03               	skipz
  9027  0624  2E52               	goto	l6986
  9028                           
  9029                           ;PS_2.c: 659: {
  9030                           ;PS_2.c: 660: UARTchar(temp, 0, 0);
  9031  0625  0020               	movlb	0	; select bank0
  9032  0626  01AD               	clrf	UARTchar@NinethBit_override
  9033  0627  01AE               	clrf	UARTchar@NinethBit_override_data
  9034  0628  0025               	movlb	5	; select bank5
  9035  0629  0860               	movf	PS_2_Update@temp^(0+640),w
  9036  062A  319C  2463  3181   	fcall	_UARTchar
  9037                           
  9038                           ;PS_2.c: 661: if(temp == '\r')
  9039  062D  0025               	movlb	5	; select bank5
  9040  062E  0860               	movf	PS_2_Update@temp^(0+640),w
  9041  062F  3A0D               	xorlw	13
  9042  0630  1D03               	skipz
  9043  0631  2FC5               	goto	l7062
  9044                           
  9045                           ;PS_2.c: 662: {
  9046                           ;PS_2.c: 663: delayUS(5000);
  9047  0632  3000               	movlw	0
  9048  0633  0020               	movlb	0	; select bank0
  9049  0634  00A8               	movwf	delayUS@US+3
  9050  0635  3000               	movlw	0
  9051  0636  00A7               	movwf	delayUS@US+2
  9052  0637  3013               	movlw	19
  9053  0638  00A6               	movwf	delayUS@US+1
  9054  0639  3088               	movlw	136
  9055  063A  00A5               	movwf	delayUS@US
  9056  063B  319B  2323  3181   	fcall	_delayUS
  9057                           
  9058                           ;PS_2.c: 664: UARTchar('\n', 0, 0);
  9059  063E  0020               	movlb	0	; select bank0
  9060  063F  01AD               	clrf	UARTchar@NinethBit_override
  9061  0640  01AE               	clrf	UARTchar@NinethBit_override_data
  9062  0641  300A               	movlw	10
  9063  0642  319C  2463  3181   	fcall	_UARTchar
  9064                           
  9065                           ;PS_2.c: 665: delayUS(10000);
  9066  0645  3000               	movlw	0
  9067  0646  0020               	movlb	0	; select bank0
  9068  0647  00A8               	movwf	delayUS@US+3
  9069  0648  3000               	movlw	0
  9070  0649  00A7               	movwf	delayUS@US+2
  9071  064A  3027               	movlw	39
  9072  064B  00A6               	movwf	delayUS@US+1
  9073  064C  3010               	movlw	16
  9074  064D  00A5               	movwf	delayUS@US
  9075  064E  319B  2323  3181   	fcall	_delayUS
  9076  0651  2FC4               	goto	l846
  9077  0652                     l6986:	
  9078                           ;PS_2.c: 666: }
  9079                           ;PS_2.c: 667: }
  9080                           
  9081                           
  9082                           ;PS_2.c: 668: else
  9083                           ;PS_2.c: 669: {
  9084                           ;PS_2.c: 670: if(ISNUMBER(temp))
  9085  0652  0025               	movlb	5	; select bank5
  9086  0653  0860               	movf	PS_2_Update@temp^(0+640),w
  9087  0654  3199  2122  3181   	fcall	_ISNUMBER
  9088  0657  3A00               	xorlw	0
  9089  0658  1903               	skipnz
  9090  0659  2EA9               	goto	l6994
  9091                           
  9092                           ;PS_2.c: 671: {
  9093                           ;PS_2.c: 672: BaudTyped*=10;
  9094  065A  3000               	movlw	0
  9095  065B  0020               	movlb	0	; select bank0
  9096  065C  00A8               	movwf	___lmul@multiplier+3
  9097  065D  3000               	movlw	0
  9098  065E  00A7               	movwf	___lmul@multiplier+2
  9099  065F  3000               	movlw	0
  9100  0660  00A6               	movwf	___lmul@multiplier+1
  9101  0661  300A               	movlw	10
  9102  0662  00A5               	movwf	___lmul@multiplier
  9103  0663  0023               	movlb	3	; select bank3
  9104  0664  0823               	movf	(_BaudTyped+3)^(0+384),w
  9105  0665  0020               	movlb	0	; select bank0
  9106  0666  00AC               	movwf	___lmul@multiplicand+3
  9107  0667  0023               	movlb	3	; select bank3
  9108  0668  0822               	movf	(_BaudTyped+2)^(0+384),w
  9109  0669  0020               	movlb	0	; select bank0
  9110  066A  00AB               	movwf	___lmul@multiplicand+2
  9111  066B  0023               	movlb	3	; select bank3
  9112  066C  0821               	movf	(_BaudTyped+1)^(0+384),w
  9113  066D  0020               	movlb	0	; select bank0
  9114  066E  00AA               	movwf	___lmul@multiplicand+1
  9115  066F  0023               	movlb	3	; select bank3
  9116  0670  0820               	movf	_BaudTyped^(0+384),w
  9117  0671  0020               	movlb	0	; select bank0
  9118  0672  00A9               	movwf	___lmul@multiplicand
  9119  0673  319A  222C  3181   	fcall	___lmul
  9120  0676  0020               	movlb	0	; select bank0
  9121  0677  0828               	movf	?___lmul+3,w
  9122  0678  0023               	movlb	3	; select bank3
  9123  0679  00A3               	movwf	(_BaudTyped+3)^(0+384)
  9124  067A  0020               	movlb	0	; select bank0
  9125  067B  0827               	movf	?___lmul+2,w
  9126  067C  0023               	movlb	3	; select bank3
  9127  067D  00A2               	movwf	(_BaudTyped+2)^(0+384)
  9128  067E  0020               	movlb	0	; select bank0
  9129  067F  0826               	movf	?___lmul+1,w
  9130  0680  0023               	movlb	3	; select bank3
  9131  0681  00A1               	movwf	(_BaudTyped+1)^(0+384)
  9132  0682  0020               	movlb	0	; select bank0
  9133  0683  0825               	movf	?___lmul,w
  9134  0684  0023               	movlb	3	; select bank3
  9135  0685  00A0               	movwf	_BaudTyped^(0+384)
  9136                           
  9137                           ;PS_2.c: 673: BaudTyped += temp - 48;
  9138  0686  0025               	movlb	5	; select bank5
  9139  0687  0860               	movf	PS_2_Update@temp^(0+640),w
  9140  0688  3ED0               	addlw	208
  9141  0689  0023               	movlb	3	; select bank3
  9142  068A  00AF               	movwf	??_PS_2_Update^(0+384)
  9143  068B  30FF               	movlw	255
  9144  068C  1803               	skipnc
  9145  068D  3000               	movlw	0
  9146  068E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9147  068F  082F               	movf	??_PS_2_Update^(0+384),w
  9148  0690  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9149  0691  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9150  0692  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9151  0693  3000               	movlw	0
  9152  0694  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9153  0695  30FF               	movlw	255
  9154  0696  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9155  0697  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9156  0698  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9157  0699  07A0               	addwf	_BaudTyped^(0+384),f
  9158  069A  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9159  069B  3DA1               	addwfc	(_BaudTyped+1)^(0+384),f
  9160  069C  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9161  069D  3DA2               	addwfc	(_BaudTyped+2)^(0+384),f
  9162  069E  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9163  069F  3DA3               	addwfc	(_BaudTyped+3)^(0+384),f
  9164                           
  9165                           ;PS_2.c: 674: UARTchar(temp, 0, 0);
  9166  06A0  0020               	movlb	0	; select bank0
  9167  06A1  01AD               	clrf	UARTchar@NinethBit_override
  9168  06A2  01AE               	clrf	UARTchar@NinethBit_override_data
  9169  06A3  0025               	movlb	5	; select bank5
  9170  06A4  0860               	movf	PS_2_Update@temp^(0+640),w
  9171  06A5  319C  2463  3181   	fcall	_UARTchar
  9172  06A8  2FC4               	goto	l846
  9173  06A9                     l6994:	
  9174                           ;PS_2.c: 675: }
  9175                           
  9176                           
  9177                           ;PS_2.c: 676: else if(temp == 'o' || temp == 'O')
  9178  06A9  0025               	movlb	5	; select bank5
  9179  06AA  0860               	movf	PS_2_Update@temp^(0+640),w
  9180  06AB  3A6F               	xorlw	111
  9181  06AC  1903               	skipnz
  9182  06AD  2EB2               	goto	l854
  9183  06AE  0860               	movf	PS_2_Update@temp^(0+640),w
  9184  06AF  3A4F               	xorlw	79
  9185  06B0  1D03               	skipz
  9186  06B1  2EBD               	goto	l7000
  9187  06B2                     l854:	
  9188                           
  9189                           ;PS_2.c: 677: {
  9190                           ;PS_2.c: 678: ParityTyped = 1;
  9191  06B2  0020               	movlb	0	; select bank0
  9192  06B3  01E9               	clrf	_ParityTyped
  9193  06B4  0AE9               	incf	_ParityTyped,f
  9194                           
  9195                           ;PS_2.c: 679: UARTchar(temp, 0, 0);
  9196  06B5  01AD               	clrf	UARTchar@NinethBit_override
  9197  06B6  01AE               	clrf	UARTchar@NinethBit_override_data
  9198  06B7  0025               	movlb	5	; select bank5
  9199  06B8  0860               	movf	PS_2_Update@temp^(0+640),w
  9200  06B9  319C  2463  3181   	fcall	_UARTchar
  9201  06BC  2FC4               	goto	l846
  9202  06BD                     l7000:	
  9203                           ;PS_2.c: 680: }
  9204                           
  9205                           
  9206                           ;PS_2.c: 681: else if(temp == 'e' || temp == 'E')
  9207  06BD  0025               	movlb	5	; select bank5
  9208  06BE  0860               	movf	PS_2_Update@temp^(0+640),w
  9209  06BF  3A65               	xorlw	101
  9210  06C0  1903               	skipnz
  9211  06C1  2EC6               	goto	l7004
  9212  06C2  0860               	movf	PS_2_Update@temp^(0+640),w
  9213  06C3  3A45               	xorlw	69
  9214  06C4  1D03               	skipz
  9215  06C5  2ED4               	goto	l7008
  9216  06C6                     l7004:	
  9217                           
  9218                           ;PS_2.c: 682: {
  9219                           ;PS_2.c: 683: ParityTyped = 2;
  9220  06C6  3002               	movlw	2
  9221  06C7  0023               	movlb	3	; select bank3
  9222  06C8  00AF               	movwf	??_PS_2_Update^(0+384)
  9223  06C9  082F               	movf	??_PS_2_Update^(0+384),w
  9224  06CA  0020               	movlb	0	; select bank0
  9225  06CB  00E9               	movwf	_ParityTyped
  9226                           
  9227                           ;PS_2.c: 684: UARTchar(temp, 0, 0);
  9228  06CC  01AD               	clrf	UARTchar@NinethBit_override
  9229  06CD  01AE               	clrf	UARTchar@NinethBit_override_data
  9230  06CE  0025               	movlb	5	; select bank5
  9231  06CF  0860               	movf	PS_2_Update@temp^(0+640),w
  9232  06D0  319C  2463  3181   	fcall	_UARTchar
  9233  06D3  2FC4               	goto	l846
  9234  06D4                     l7008:	
  9235                           ;PS_2.c: 685: }
  9236                           
  9237                           
  9238                           ;PS_2.c: 686: else if(temp == 'm' || temp == 'M')
  9239  06D4  0025               	movlb	5	; select bank5
  9240  06D5  0860               	movf	PS_2_Update@temp^(0+640),w
  9241  06D6  3A6D               	xorlw	109
  9242  06D7  1903               	skipnz
  9243  06D8  2EDD               	goto	l7012
  9244  06D9  0860               	movf	PS_2_Update@temp^(0+640),w
  9245  06DA  3A4D               	xorlw	77
  9246  06DB  1D03               	skipz
  9247  06DC  2EEB               	goto	l7016
  9248  06DD                     l7012:	
  9249                           
  9250                           ;PS_2.c: 687: {
  9251                           ;PS_2.c: 688: ParityTyped = 3;
  9252  06DD  3003               	movlw	3
  9253  06DE  0023               	movlb	3	; select bank3
  9254  06DF  00AF               	movwf	??_PS_2_Update^(0+384)
  9255  06E0  082F               	movf	??_PS_2_Update^(0+384),w
  9256  06E1  0020               	movlb	0	; select bank0
  9257  06E2  00E9               	movwf	_ParityTyped
  9258                           
  9259                           ;PS_2.c: 689: UARTchar(temp, 0, 0);
  9260  06E3  01AD               	clrf	UARTchar@NinethBit_override
  9261  06E4  01AE               	clrf	UARTchar@NinethBit_override_data
  9262  06E5  0025               	movlb	5	; select bank5
  9263  06E6  0860               	movf	PS_2_Update@temp^(0+640),w
  9264  06E7  319C  2463  3181   	fcall	_UARTchar
  9265  06EA  2FC4               	goto	l846
  9266  06EB                     l7016:	
  9267                           ;PS_2.c: 690: }
  9268                           
  9269                           
  9270                           ;PS_2.c: 691: else if(temp == 's' || temp == 'S')
  9271  06EB  0025               	movlb	5	; select bank5
  9272  06EC  0860               	movf	PS_2_Update@temp^(0+640),w
  9273  06ED  3A73               	xorlw	115
  9274  06EE  1903               	skipnz
  9275  06EF  2EF4               	goto	l7020
  9276  06F0  0860               	movf	PS_2_Update@temp^(0+640),w
  9277  06F1  3A53               	xorlw	83
  9278  06F2  1D03               	skipz
  9279  06F3  2F02               	goto	l7024
  9280  06F4                     l7020:	
  9281                           
  9282                           ;PS_2.c: 692: {
  9283                           ;PS_2.c: 693: ParityTyped = 4;
  9284  06F4  3004               	movlw	4
  9285  06F5  0023               	movlb	3	; select bank3
  9286  06F6  00AF               	movwf	??_PS_2_Update^(0+384)
  9287  06F7  082F               	movf	??_PS_2_Update^(0+384),w
  9288  06F8  0020               	movlb	0	; select bank0
  9289  06F9  00E9               	movwf	_ParityTyped
  9290                           
  9291                           ;PS_2.c: 694: UARTchar(temp, 0, 0);
  9292  06FA  01AD               	clrf	UARTchar@NinethBit_override
  9293  06FB  01AE               	clrf	UARTchar@NinethBit_override_data
  9294  06FC  0025               	movlb	5	; select bank5
  9295  06FD  0860               	movf	PS_2_Update@temp^(0+640),w
  9296  06FE  319C  2463  3181   	fcall	_UARTchar
  9297  0701  2FC4               	goto	l846
  9298  0702                     l7024:	
  9299                           ;PS_2.c: 695: }
  9300                           
  9301                           
  9302                           ;PS_2.c: 696: else if(temp == '\r')
  9303  0702  0025               	movlb	5	; select bank5
  9304  0703  0860               	movf	PS_2_Update@temp^(0+640),w
  9305  0704  3A0D               	xorlw	13
  9306  0705  1D03               	skipz
  9307  0706  2FC5               	goto	l7062
  9308                           
  9309                           ;PS_2.c: 697: {
  9310                           ;PS_2.c: 698: UARTstringWAIT("\r\n");
  9311  0707  303D               	movlw	low ((STR_11+17)| (0+32768))
  9312  0708  0020               	movlb	0	; select bank0
  9313  0709  00B4               	movwf	UARTstringWAIT@data
  9314  070A  308C               	movlw	high ((STR_11+17)| (0+32768))
  9315  070B  00B5               	movwf	UARTstringWAIT@data+1
  9316  070C  319A  22F0  3181   	fcall	_UARTstringWAIT
  9317                           
  9318                           ;PS_2.c: 699: delayUS(10000);
  9319  070F  3000               	movlw	0
  9320  0710  0020               	movlb	0	; select bank0
  9321  0711  00A8               	movwf	delayUS@US+3
  9322  0712  3000               	movlw	0
  9323  0713  00A7               	movwf	delayUS@US+2
  9324  0714  3027               	movlw	39
  9325  0715  00A6               	movwf	delayUS@US+1
  9326  0716  3010               	movlw	16
  9327  0717  00A5               	movwf	delayUS@US
  9328  0718  319B  2323  3181   	fcall	_delayUS
  9329                           
  9330                           ;PS_2.c: 700: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9331  071B  3000               	movlw	0
  9332  071C  0023               	movlb	3	; select bank3
  9333  071D  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9334  071E  1D03               	skipz
  9335  071F  2F2A               	goto	u9795
  9336  0720  3000               	movlw	0
  9337  0721  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9338  0722  1D03               	skipz
  9339  0723  2F2A               	goto	u9795
  9340  0724  3009               	movlw	9
  9341  0725  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9342  0726  1D03               	skipz
  9343  0727  2F2A               	goto	u9795
  9344  0728  3060               	movlw	96
  9345  0729  0220               	subwf	_BaudTyped^(0+384),w
  9346  072A                     u9795:	
  9347  072A  1C03               	skipc
  9348  072B  2FAE               	goto	l7056
  9349  072C  3000               	movlw	0
  9350  072D  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9351  072E  1D03               	skipz
  9352  072F  2F3A               	goto	u9805
  9353  0730  3001               	movlw	1
  9354  0731  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9355  0732  1D03               	skipz
  9356  0733  2F3A               	goto	u9805
  9357  0734  30C2               	movlw	194
  9358  0735  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9359  0736  1D03               	skipz
  9360  0737  2F3A               	goto	u9805
  9361  0738  3001               	movlw	1
  9362  0739  0220               	subwf	_BaudTyped^(0+384),w
  9363  073A                     u9805:	
  9364  073A  1803               	skipnc
  9365  073B  2FAE               	goto	l7056
  9366                           
  9367                           ;PS_2.c: 701: {
  9368                           ;PS_2.c: 702: if(ParityTyped)
  9369  073C  0020               	movlb	0	; select bank0
  9370  073D  0869               	movf	_ParityTyped,w
  9371  073E  1903               	btfsc	3,2
  9372  073F  2F71               	goto	l7050
  9373                           
  9374                           ;PS_2.c: 703: {
  9375                           ;PS_2.c: 704: switch (ParityTyped)
  9376  0740  2F64               	goto	l7048
  9377  0741                     l7038:	
  9378                           ;PS_2.c: 705: {
  9379                           ;PS_2.c: 706: case 1:
  9380                           
  9381                           
  9382                           ;PS_2.c: 707: sprintf(buf,"Baud will be set to %lu with Odd parity bit\r\n",BaudTyped);
  9383  0741  30A0               	movlw	low PS_2_Update@buf
  9384  0742  00BD               	movwf	sprintf@sp
  9385  0743  3002               	movlw	high PS_2_Update@buf
  9386  0744  00BE               	movwf	sprintf@sp+1
  9387  0745  302A               	movlw	low (STR_29| (0+32768))
  9388  0746  00BF               	movwf	sprintf@f
  9389  0747  308A               	movlw	high (STR_29| (0+32768))
  9390  0748  2F78               	goto	L14
  9391  0749                     l7040:	
  9392                           ;PS_2.c: 709: case 2:
  9393                           
  9394                           ;PS_2.c: 708: break;
  9395                           
  9396                           
  9397                           ;PS_2.c: 710: sprintf(buf,"Baud will be set to %lu with Even parity bit\r\n",BaudTyped);
  9398  0749  30A0               	movlw	low PS_2_Update@buf
  9399  074A  0020               	movlb	0	; select bank0
  9400  074B  00BD               	movwf	sprintf@sp
  9401  074C  3002               	movlw	high PS_2_Update@buf
  9402  074D  00BE               	movwf	sprintf@sp+1
  9403  074E  30FB               	movlw	low (STR_30| (0+32768))
  9404  074F  00BF               	movwf	sprintf@f
  9405  0750  3089               	movlw	high (STR_30| (0+32768))
  9406  0751  2F78               	goto	L14
  9407  0752                     l7042:	
  9408                           ;PS_2.c: 712: case 3:
  9409                           
  9410                           ;PS_2.c: 711: break;
  9411                           
  9412                           
  9413                           ;PS_2.c: 713: sprintf(buf,"Baud will be set to %lu with Mark bit\r\n",BaudTyped);
  9414  0752  30A0               	movlw	low PS_2_Update@buf
  9415  0753  0020               	movlb	0	; select bank0
  9416  0754  00BD               	movwf	sprintf@sp
  9417  0755  3002               	movlw	high PS_2_Update@buf
  9418  0756  00BE               	movwf	sprintf@sp+1
  9419  0757  30AE               	movlw	low (STR_31| (0+32768))
  9420  0758  00BF               	movwf	sprintf@f
  9421  0759  308A               	movlw	high (STR_31| (0+32768))
  9422  075A  2F78               	goto	L14
  9423  075B                     l7044:	
  9424                           ;PS_2.c: 715: default:
  9425                           
  9426                           ;PS_2.c: 714: break;
  9427                           
  9428                           
  9429                           ;PS_2.c: 716: sprintf(buf,"Baud will be set to %lu with Space bit\r\n",BaudTyped);
  9430  075B  30A0               	movlw	low PS_2_Update@buf
  9431  075C  0020               	movlb	0	; select bank0
  9432  075D  00BD               	movwf	sprintf@sp
  9433  075E  3002               	movlw	high PS_2_Update@buf
  9434  075F  00BE               	movwf	sprintf@sp+1
  9435  0760  3085               	movlw	low (STR_32| (0+32768))
  9436  0761  00BF               	movwf	sprintf@f
  9437  0762  308A               	movlw	high (STR_32| (0+32768))
  9438  0763  2F78               	goto	L14
  9439  0764                     l7048:	
  9440                           ;PS_2.c: 718: }
  9441                           
  9442                           ;PS_2.c: 717: break;
  9443                           
  9444  0764  0020               	movlb	0	; select bank0
  9445  0765  0869               	movf	_ParityTyped,w
  9446                           
  9447                           ; Switch size 1, requested type "space"
  9448                           ; Number of cases is 3, Range of values is 1 to 3
  9449                           ; switch strategies available:
  9450                           ; Name         Instructions Cycles
  9451                           ; simple_byte           10     6 (average)
  9452                           ; direct_byte           15     9 (fixed)
  9453                           ; jumptable            263     9 (fixed)
  9454                           ;	Chosen strategy is simple_byte
  9455  0766  3A01               	xorlw	1	; case 1
  9456  0767  1903               	skipnz
  9457  0768  2F41               	goto	l7038
  9458  0769  3A03               	xorlw	3	; case 2
  9459  076A  1903               	skipnz
  9460  076B  2F49               	goto	l7040
  9461  076C  3A01               	xorlw	1	; case 3
  9462  076D  1903               	skipnz
  9463  076E  2F52               	goto	l7042
  9464  076F  2F5B               	goto	l7044
  9465                           
  9466                           ;PS_2.c: 719: }
  9467  0770  2F8C               	goto	l7052
  9468  0771                     l7050:	
  9469                           
  9470                           ;PS_2.c: 720: else
  9471                           ;PS_2.c: 721: {
  9472                           ;PS_2.c: 722: sprintf(buf,"Baud will be set to %lu with no parity bit\r\n",BaudTyped);
  9473  0771  30A0               	movlw	low PS_2_Update@buf
  9474  0772  00BD               	movwf	sprintf@sp
  9475  0773  3002               	movlw	high PS_2_Update@buf
  9476  0774  00BE               	movwf	sprintf@sp+1
  9477  0775  3058               	movlw	low (STR_33| (0+32768))
  9478  0776  00BF               	movwf	sprintf@f
  9479  0777  308A               	movlw	high (STR_33| (0+32768))
  9480  0778                     L14:	
  9481  0778  00C0               	movwf	sprintf@f+1
  9482  0779  0023               	movlb	3	; select bank3
  9483  077A  0823               	movf	(_BaudTyped+3)^(0+384),w
  9484  077B  0020               	movlb	0	; select bank0
  9485  077C  00C4               	movwf	?_sprintf+7
  9486  077D  0023               	movlb	3	; select bank3
  9487  077E  0822               	movf	(_BaudTyped+2)^(0+384),w
  9488  077F  0020               	movlb	0	; select bank0
  9489  0780  00C3               	movwf	?_sprintf+6
  9490  0781  0023               	movlb	3	; select bank3
  9491  0782  0821               	movf	(_BaudTyped+1)^(0+384),w
  9492  0783  0020               	movlb	0	; select bank0
  9493  0784  00C2               	movwf	?_sprintf+5
  9494  0785  0023               	movlb	3	; select bank3
  9495  0786  0820               	movf	_BaudTyped^(0+384),w
  9496  0787  0020               	movlb	0	; select bank0
  9497  0788  00C1               	movwf	?_sprintf+4
  9498  0789  3194  248F  3181   	fcall	_sprintf
  9499  078C                     l7052:	
  9500                           
  9501                           ;PS_2.c: 723: }
  9502                           ;PS_2.c: 724: UARTstringWAIT(buf);
  9503  078C  30A0               	movlw	low PS_2_Update@buf
  9504  078D  0020               	movlb	0	; select bank0
  9505  078E  00B4               	movwf	UARTstringWAIT@data
  9506  078F  3002               	movlw	high PS_2_Update@buf
  9507  0790  00B5               	movwf	UARTstringWAIT@data+1
  9508  0791  319A  22F0  3181   	fcall	_UARTstringWAIT
  9509                           
  9510                           ;PS_2.c: 725: SetBaud(BaudTyped, ParityTyped);
  9511  0794  0023               	movlb	3	; select bank3
  9512  0795  0823               	movf	(_BaudTyped+3)^(0+384),w
  9513  0796  0020               	movlb	0	; select bank0
  9514  0797  00D7               	movwf	SetBaud@Baud+3
  9515  0798  0023               	movlb	3	; select bank3
  9516  0799  0822               	movf	(_BaudTyped+2)^(0+384),w
  9517  079A  0020               	movlb	0	; select bank0
  9518  079B  00D6               	movwf	SetBaud@Baud+2
  9519  079C  0023               	movlb	3	; select bank3
  9520  079D  0821               	movf	(_BaudTyped+1)^(0+384),w
  9521  079E  0020               	movlb	0	; select bank0
  9522  079F  00D5               	movwf	SetBaud@Baud+1
  9523  07A0  0023               	movlb	3	; select bank3
  9524  07A1  0820               	movf	_BaudTyped^(0+384),w
  9525  07A2  0020               	movlb	0	; select bank0
  9526  07A3  00D4               	movwf	SetBaud@Baud
  9527  07A4  0869               	movf	_ParityTyped,w
  9528  07A5  0023               	movlb	3	; select bank3
  9529  07A6  00AF               	movwf	??_PS_2_Update^(0+384)
  9530  07A7  082F               	movf	??_PS_2_Update^(0+384),w
  9531  07A8  0020               	movlb	0	; select bank0
  9532  07A9  00D8               	movwf	SetBaud@Parity
  9533  07AA  3196  2693  3181   	fcall	_SetBaud
  9534                           
  9535                           ;PS_2.c: 726: }
  9536  07AD  2FC2               	goto	l7060
  9537  07AE                     l7056:	
  9538                           
  9539                           ;PS_2.c: 727: else
  9540                           ;PS_2.c: 728: {
  9541                           ;PS_2.c: 729: UARTstringWAIT("Baud Out of Range\r\n");
  9542  07AE  3018               	movlw	low (STR_34| (0+32768))
  9543  07AF  0020               	movlb	0	; select bank0
  9544  07B0  00B4               	movwf	UARTstringWAIT@data
  9545  07B1  308C               	movlw	high (STR_34| (0+32768))
  9546  07B2  00B5               	movwf	UARTstringWAIT@data+1
  9547  07B3  319A  22F0  3181   	fcall	_UARTstringWAIT
  9548                           
  9549                           ;PS_2.c: 730: delayUS(10000);
  9550  07B6  3000               	movlw	0
  9551  07B7  0020               	movlb	0	; select bank0
  9552  07B8  00A8               	movwf	delayUS@US+3
  9553  07B9  3000               	movlw	0
  9554  07BA  00A7               	movwf	delayUS@US+2
  9555  07BB  3027               	movlw	39
  9556  07BC  00A6               	movwf	delayUS@US+1
  9557  07BD  3010               	movlw	16
  9558  07BE  00A5               	movwf	delayUS@US
  9559  07BF  319B  2323  3181   	fcall	_delayUS
  9560  07C2                     l7060:	
  9561                           
  9562                           ;PS_2.c: 731: }
  9563                           ;PS_2.c: 732: BAUDMODE=0;
  9564  07C2  0022               	movlb	2	; select bank2
  9565  07C3  01E3               	clrf	_BAUDMODE^(0+256)
  9566  07C4                     l846:	
  9567  07C4  0025               	movlb	5	; select bank5
  9568  07C5                     l7062:	
  9569                           
  9570                           ;PS_2.c: 733: }
  9571                           ;PS_2.c: 734: }
  9572                           ;PS_2.c: 735: }
  9573                           ;PS_2.c: 736: }
  9574                           ;PS_2.c: 737: PS_2_Read_Data_First =0;
  9575  07C5  0023               	movlb	3	; select bank3
  9576  07C6  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  9577  07C7  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9578                           
  9579                           ;PS_2.c: 738: PS_2_Read_Data_Second =0;
  9580  07C8  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  9581  07C9  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9582                           
  9583                           ;PS_2.c: 739: PS_2_Read_Data_Third =0;
  9584  07CA  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  9585  07CB  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9586                           
  9587                           ;PS_2.c: 740: PS_2_Read_Data_Forth =0;
  9588  07CC  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9589  07CD  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9590                           
  9591                           ;PS_2.c: 741: PS_2_Read_Data_FirstTEMP =0;
  9592  07CE  0024               	movlb	4	; select bank4
  9593  07CF  01A0               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9594  07D0  01A1               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9595                           
  9596                           ;PS_2.c: 742: PS_2_Read_Data_SecondTEMP =0;
  9597  07D1  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9598  07D2  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9599                           
  9600                           ;PS_2.c: 743: PS_2_Read_Data_ThirdTEMP =0;
  9601  07D3  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9602  07D4  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9603                           
  9604                           ;PS_2.c: 744: PS_2_Read_Data_ForthTEMP =0;
  9605  07D5  01A2               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9606  07D6  01A3               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9607                           
  9608                           ;PS_2.c: 745: Caps_Lock_Key_old = Caps_Lock_Key;
  9609  07D7  0022               	movlb	2	; select bank2
  9610  07D8  0864               	movf	_Caps_Lock_Key^(0+256),w
  9611  07D9  0023               	movlb	3	; select bank3
  9612  07DA  00AF               	movwf	??_PS_2_Update^(0+384)
  9613  07DB  082F               	movf	??_PS_2_Update^(0+384),w
  9614  07DC  0022               	movlb	2	; select bank2
  9615  07DD  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9616                           
  9617                           ;PS_2.c: 746: Right_Shift_Key_old = Right_Shift_Key;
  9618  07DE  0023               	movlb	3	; select bank3
  9619  07DF  082E               	movf	_Right_Shift_Key^(0+384),w
  9620  07E0  00AF               	movwf	??_PS_2_Update^(0+384)
  9621  07E1  082F               	movf	??_PS_2_Update^(0+384),w
  9622  07E2  0022               	movlb	2	; select bank2
  9623  07E3  00EC               	movwf	_Right_Shift_Key_old^(0+256)
  9624                           
  9625                           ;PS_2.c: 747: Left_Shift_Key_old = Left_Shift_Key;
  9626  07E4  0020               	movlb	0	; select bank0
  9627  07E5  0866               	movf	_Left_Shift_Key,w
  9628  07E6  0023               	movlb	3	; select bank3
  9629  07E7  00AF               	movwf	??_PS_2_Update^(0+384)
  9630  07E8  082F               	movf	??_PS_2_Update^(0+384),w
  9631  07E9  0022               	movlb	2	; select bank2
  9632  07EA  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9633                           
  9634                           ;PS_2.c: 748: LATC &= ~0b00010000;
  9635  07EB  30EF               	movlw	239
  9636  07EC  0023               	movlb	3	; select bank3
  9637  07ED  00AF               	movwf	??_PS_2_Update^(0+384)
  9638  07EE  082F               	movf	??_PS_2_Update^(0+384),w
  9639  07EF  0022               	movlb	2	; select bank2
  9640  07F0  058E               	andwf	14,f	;volatile
  9641                           
  9642                           ;PS_2.c: 749: PIE1bits.RCIE = 1;
  9643  07F1  0021               	movlb	1	; select bank1
  9644  07F2  1691               	bsf	17,5	;volatile
  9645                           
  9646                           ;PS_2.c: 750: PS_2_ENABLE_INTERRUPT(0b00100000);
  9647  07F3  3020               	movlw	32
  9648  07F4  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
  9649  07F6  0020               	movlb	0	; select bank0
  9650  07F7  0008               	return
  9651  07F8                     __end_of_PS_2_Update:	
  9652                           
  9653                           	psect	text13
  9654  1A2C                     __ptext13:	
  9655 ;; *************** function ___lmul *****************
  9656 ;; Defined at:
  9657 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9660 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  product         4   13[BANK0 ] unsigned long 
  9663 ;; Return value:  Size  Location     Type
  9664 ;;                  4    5[BANK0 ] unsigned long 
  9665 ;; Registers used:
  9666 ;;		wreg, status,2, status,0
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:       12 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    3
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_PS_2_Update
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function ___lmul
  9688  1A2C                     ___lmul:	
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9692  1A2C  3000               	movlw	0
  9693  1A2D  0020               	movlb	0	; select bank0
  9694  1A2E  00B0               	movwf	___lmul@product+3
  9695  1A2F  3000               	movlw	0
  9696  1A30  00AF               	movwf	___lmul@product+2
  9697  1A31  3000               	movlw	0
  9698  1A32  00AE               	movwf	___lmul@product+1
  9699  1A33  3000               	movlw	0
  9700  1A34  00AD               	movwf	___lmul@product
  9701  1A35                     l6512:	
  9702  1A35  1C25               	btfss	___lmul@multiplier,0
  9703  1A36  2A3F               	goto	l6516
  9704  1A37  0829               	movf	___lmul@multiplicand,w
  9705  1A38  07AD               	addwf	___lmul@product,f
  9706  1A39  082A               	movf	___lmul@multiplicand+1,w
  9707  1A3A  3DAE               	addwfc	___lmul@product+1,f
  9708  1A3B  082B               	movf	___lmul@multiplicand+2,w
  9709  1A3C  3DAF               	addwfc	___lmul@product+2,f
  9710  1A3D  082C               	movf	___lmul@multiplicand+3,w
  9711  1A3E  3DB0               	addwfc	___lmul@product+3,f
  9712  1A3F                     l6516:	
  9713  1A3F  3001               	movlw	1
  9714  1A40                     u8425:	
  9715  1A40  35A9               	lslf	___lmul@multiplicand,f
  9716  1A41  0DAA               	rlf	___lmul@multiplicand+1,f
  9717  1A42  0DAB               	rlf	___lmul@multiplicand+2,f
  9718  1A43  0DAC               	rlf	___lmul@multiplicand+3,f
  9719  1A44  0B89               	decfsz	9,f
  9720  1A45  2A40               	goto	u8425
  9721  1A46  3001               	movlw	1
  9722  1A47                     u8435:	
  9723  1A47  36A8               	lsrf	___lmul@multiplier+3,f
  9724  1A48  0CA7               	rrf	___lmul@multiplier+2,f
  9725  1A49  0CA6               	rrf	___lmul@multiplier+1,f
  9726  1A4A  0CA5               	rrf	___lmul@multiplier,f
  9727  1A4B  0B89               	decfsz	9,f
  9728  1A4C  2A47               	goto	u8435
  9729  1A4D  0828               	movf	___lmul@multiplier+3,w
  9730  1A4E  0427               	iorwf	___lmul@multiplier+2,w
  9731  1A4F  0426               	iorwf	___lmul@multiplier+1,w
  9732  1A50  0425               	iorwf	___lmul@multiplier,w
  9733  1A51  1D03               	skipz
  9734  1A52  2A35               	goto	l6512
  9735  1A53  0830               	movf	___lmul@product+3,w
  9736  1A54  00A8               	movwf	?___lmul+3
  9737  1A55  082F               	movf	___lmul@product+2,w
  9738  1A56  00A7               	movwf	?___lmul+2
  9739  1A57  082E               	movf	___lmul@product+1,w
  9740  1A58  00A6               	movwf	?___lmul+1
  9741  1A59  082D               	movf	___lmul@product,w
  9742  1A5A  00A5               	movwf	?___lmul
  9743  1A5B  0008               	return
  9744  1A5C                     __end_of___lmul:	
  9745                           
  9746                           	psect	text14
  9747  18B0                     __ptext14:	
  9748 ;; *************** function _UART_send_break *****************
  9749 ;; Defined at:
  9750 ;;		line 248 in file "UART.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;		None
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;		None               void
  9757 ;; Registers used:
  9758 ;;		wreg
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;Total ram usage:        0 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    3
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_PS_2_Update
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _UART_send_break
  9780  18B0                     _UART_send_break:	
  9781                           
  9782                           ;UART.c: 250: TX1STA |= 0b00001000;
  9783                           
  9784                           ;incstack = 0
  9785                           ; Regs used in _UART_send_break: [wreg]
  9786  18B0  0023               	movlb	3	; select bank3
  9787  18B1  159E               	bsf	30,3	;volatile
  9788                           
  9789                           ;UART.c: 251: TXREG = 'd';
  9790  18B2  3064               	movlw	100
  9791  18B3  009A               	movwf	26	;volatile
  9792  18B4  0008               	return
  9793  18B5                     __end_of_UART_send_break:	
  9794                           
  9795                           	psect	text15
  9796  1693                     __ptext15:	
  9797 ;; *************** function _SetBaud *****************
  9798 ;; Defined at:
  9799 ;;		line 286 in file "UART.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  Baud            4   52[BANK0 ] unsigned long 
  9802 ;;  Parity          1   56[BANK0 ] unsigned char 
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9805 ;;  temp            4   58[BANK2 ] unsigned long 
  9806 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9807 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9808 ;;  i               1   62[BANK2 ] unsigned char 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;		None               void
  9811 ;; Registers used:
  9812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9818 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;Total ram usage:       76 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    7
  9825 ;; This function calls:
  9826 ;;		_InitUART
  9827 ;;		_ReadBaud
  9828 ;;		_UARTstringWAIT
  9829 ;;		_WriteBaud
  9830 ;;		_delayUS
  9831 ;;		_sprintf
  9832 ;; This function is called by:
  9833 ;;		_PS_2_Update
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function _SetBaud
  9839  1693                     _SetBaud:	
  9840                           
  9841                           ;UART.c: 288: unsigned char buf[50];
  9842                           ;UART.c: 289: unsigned long Baudtemp=0;
  9843                           
  9844                           ;incstack = 0
  9845                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9846  1693  3000               	movlw	0
  9847  1694  0022               	movlb	2	; select bank2
  9848  1695  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9849  1696  3000               	movlw	0
  9850  1697  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9851  1698  3000               	movlw	0
  9852  1699  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9853  169A  3000               	movlw	0
  9854  169B  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9855                           
  9856                           ;UART.c: 290: unsigned long Paritytemp=0;
  9857  169C  3000               	movlw	0
  9858  169D  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9859  169E  3000               	movlw	0
  9860  169F  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9861  16A0  3000               	movlw	0
  9862  16A1  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9863  16A2  3000               	movlw	0
  9864  16A3  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9865                           
  9866                           ;UART.c: 291: unsigned long temp;
  9867                           ;UART.c: 292: unsigned char i =0;
  9868  16A4  01DE               	clrf	SetBaud@i^(0+256)
  9869                           
  9870                           ;UART.c: 294: WriteBaud((0x1800 >> 5), Baud, Parity);
  9871  16A5  30C0               	movlw	192
  9872  16A6  0020               	movlb	0	; select bank0
  9873  16A7  00B6               	movwf	WriteBaud@row
  9874  16A8  3000               	movlw	0
  9875  16A9  00B7               	movwf	WriteBaud@row+1
  9876  16AA  0857               	movf	SetBaud@Baud+3,w
  9877  16AB  00BB               	movwf	WriteBaud@Baud+3
  9878  16AC  0856               	movf	SetBaud@Baud+2,w
  9879  16AD  00BA               	movwf	WriteBaud@Baud+2
  9880  16AE  0855               	movf	SetBaud@Baud+1,w
  9881  16AF  00B9               	movwf	WriteBaud@Baud+1
  9882  16B0  0854               	movf	SetBaud@Baud,w
  9883  16B1  00B8               	movwf	WriteBaud@Baud
  9884  16B2  0858               	movf	SetBaud@Parity,w
  9885  16B3  00D9               	movwf	??_SetBaud
  9886  16B4  0859               	movf	??_SetBaud,w
  9887  16B5  00BC               	movwf	WriteBaud@Parity
  9888  16B6  319D  25FF  3196   	fcall	_WriteBaud
  9889                           
  9890                           ;UART.c: 295: temp = ReadBaud((0x1800 >> 5), 0);
  9891  16B9  30C0               	movlw	192
  9892  16BA  0020               	movlb	0	; select bank0
  9893  16BB  00B7               	movwf	ReadBaud@row
  9894  16BC  3000               	movlw	0
  9895  16BD  00B8               	movwf	ReadBaud@row+1
  9896  16BE  01B9               	clrf	ReadBaud@column
  9897  16BF  319E  265D  3196   	fcall	_ReadBaud
  9898  16C2  0020               	movlb	0	; select bank0
  9899  16C3  083A               	movf	?_ReadBaud+3,w
  9900  16C4  0022               	movlb	2	; select bank2
  9901  16C5  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9902  16C6  0020               	movlb	0	; select bank0
  9903  16C7  0839               	movf	?_ReadBaud+2,w
  9904  16C8  0022               	movlb	2	; select bank2
  9905  16C9  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9906  16CA  0020               	movlb	0	; select bank0
  9907  16CB  0838               	movf	?_ReadBaud+1,w
  9908  16CC  0022               	movlb	2	; select bank2
  9909  16CD  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9910  16CE  0020               	movlb	0	; select bank0
  9911  16CF  0837               	movf	?_ReadBaud,w
  9912  16D0  0022               	movlb	2	; select bank2
  9913  16D1  00DA               	movwf	SetBaud@temp^(0+256)
  9914                           
  9915                           ;UART.c: 296: Baudtemp = temp & 0x000FFFFF;
  9916  16D2  30FF               	movlw	255
  9917  16D3  055A               	andwf	SetBaud@temp^(0+256),w
  9918  16D4  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9919  16D5  30FF               	movlw	255
  9920  16D6  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9921  16D7  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9922  16D8  300F               	movlw	15
  9923  16D9  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9924  16DA  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9925  16DB  3000               	movlw	0
  9926  16DC  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9927  16DD  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9928                           
  9929                           ;UART.c: 297: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9930  16DE  085A               	movf	SetBaud@temp^(0+256),w
  9931  16DF  0020               	movlb	0	; select bank0
  9932  16E0  00D9               	movwf	??_SetBaud
  9933  16E1  0022               	movlb	2	; select bank2
  9934  16E2  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9935  16E3  0020               	movlb	0	; select bank0
  9936  16E4  00DA               	movwf	??_SetBaud+1
  9937  16E5  0022               	movlb	2	; select bank2
  9938  16E6  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9939  16E7  0020               	movlb	0	; select bank0
  9940  16E8  00DB               	movwf	??_SetBaud+2
  9941  16E9  0022               	movlb	2	; select bank2
  9942  16EA  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9943  16EB  0020               	movlb	0	; select bank0
  9944  16EC  00DC               	movwf	??_SetBaud+3
  9945  16ED  3014               	movlw	20
  9946  16EE                     u8095:	
  9947  16EE  36DC               	lsrf	??_SetBaud+3,f
  9948  16EF  0CDB               	rrf	??_SetBaud+2,f
  9949  16F0  0CDA               	rrf	??_SetBaud+1,f
  9950  16F1  0CD9               	rrf	??_SetBaud,f
  9951  16F2  0B89               	decfsz	9,f
  9952  16F3  2EEE               	goto	u8095
  9953  16F4  0859               	movf	??_SetBaud,w
  9954  16F5  390F               	andlw	15
  9955  16F6  00DD               	movwf	??_SetBaud+4
  9956  16F7  01DE               	clrf	??_SetBaud+5
  9957  16F8  01DF               	clrf	??_SetBaud+6
  9958  16F9  01E0               	clrf	??_SetBaud+7
  9959  16FA  0860               	movf	??_SetBaud+7,w
  9960  16FB  0022               	movlb	2	; select bank2
  9961  16FC  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9962  16FD  0020               	movlb	0	; select bank0
  9963  16FE  085F               	movf	??_SetBaud+6,w
  9964  16FF  0022               	movlb	2	; select bank2
  9965  1700  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9966  1701  0020               	movlb	0	; select bank0
  9967  1702  085E               	movf	??_SetBaud+5,w
  9968  1703  0022               	movlb	2	; select bank2
  9969  1704  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9970  1705  0020               	movlb	0	; select bank0
  9971  1706  085D               	movf	??_SetBaud+4,w
  9972  1707  0022               	movlb	2	; select bank2
  9973  1708  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9974                           
  9975                           ;UART.c: 299: InitUART(Baud, Parity);
  9976  1709  0020               	movlb	0	; select bank0
  9977  170A  0857               	movf	SetBaud@Baud+3,w
  9978  170B  00B6               	movwf	InitUART@Baud+3
  9979  170C  0856               	movf	SetBaud@Baud+2,w
  9980  170D  00B5               	movwf	InitUART@Baud+2
  9981  170E  0855               	movf	SetBaud@Baud+1,w
  9982  170F  00B4               	movwf	InitUART@Baud+1
  9983  1710  0854               	movf	SetBaud@Baud,w
  9984  1711  00B3               	movwf	InitUART@Baud
  9985  1712  0858               	movf	SetBaud@Parity,w
  9986  1713  00D9               	movwf	??_SetBaud
  9987  1714  0859               	movf	??_SetBaud,w
  9988  1715  00B7               	movwf	InitUART@parity
  9989  1716  3191  21BC  3196   	fcall	_InitUART
  9990                           
  9991                           ;UART.c: 300: UARTstringWAIT("\r\n");
  9992  1719  303D               	movlw	low ((STR_11+17)| (0+32768))
  9993  171A  0020               	movlb	0	; select bank0
  9994  171B  00B4               	movwf	UARTstringWAIT@data
  9995  171C  308C               	movlw	high ((STR_11+17)| (0+32768))
  9996  171D  00B5               	movwf	UARTstringWAIT@data+1
  9997  171E  319A  22F0  3196   	fcall	_UARTstringWAIT
  9998                           
  9999                           ;UART.c: 301: delayUS(10000);
 10000  1721  3000               	movlw	0
 10001  1722  0020               	movlb	0	; select bank0
 10002  1723  00A8               	movwf	delayUS@US+3
 10003  1724  3000               	movlw	0
 10004  1725  00A7               	movwf	delayUS@US+2
 10005  1726  3027               	movlw	39
 10006  1727  00A6               	movwf	delayUS@US+1
 10007  1728  3010               	movlw	16
 10008  1729  00A5               	movwf	delayUS@US
 10009  172A  319B  2323  3196   	fcall	_delayUS
 10010                           
 10011                           ;UART.c: 302: if((Baud != Baudtemp) || (Parity != Paritytemp))
 10012  172D  0022               	movlb	2	; select bank2
 10013  172E  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 10014  172F  0020               	movlb	0	; select bank0
 10015  1730  0657               	xorwf	SetBaud@Baud+3,w
 10016  1731  1D03               	skipz
 10017  1732  2F43               	goto	u8105
 10018  1733  0022               	movlb	2	; select bank2
 10019  1734  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 10020  1735  0020               	movlb	0	; select bank0
 10021  1736  0656               	xorwf	SetBaud@Baud+2,w
 10022  1737  1D03               	skipz
 10023  1738  2F43               	goto	u8105
 10024  1739  0022               	movlb	2	; select bank2
 10025  173A  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 10026  173B  0020               	movlb	0	; select bank0
 10027  173C  0655               	xorwf	SetBaud@Baud+1,w
 10028  173D  1D03               	skipz
 10029  173E  2F43               	goto	u8105
 10030  173F  0022               	movlb	2	; select bank2
 10031  1740  0852               	movf	SetBaud@Baudtemp^(0+256),w
 10032  1741  0020               	movlb	0	; select bank0
 10033  1742  0654               	xorwf	SetBaud@Baud,w
 10034  1743                     u8105:	
 10035  1743  1D03               	skipz
 10036  1744  2F62               	goto	l6272
 10037  1745  0858               	movf	SetBaud@Parity,w
 10038  1746  00D9               	movwf	??_SetBaud
 10039  1747  01DA               	clrf	??_SetBaud+1
 10040  1748  01DB               	clrf	??_SetBaud+2
 10041  1749  01DC               	clrf	??_SetBaud+3
 10042  174A  0022               	movlb	2	; select bank2
 10043  174B  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 10044  174C  0020               	movlb	0	; select bank0
 10045  174D  065C               	xorwf	??_SetBaud+3,w
 10046  174E  1D03               	skipz
 10047  174F  2F60               	goto	u8115
 10048  1750  0022               	movlb	2	; select bank2
 10049  1751  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 10050  1752  0020               	movlb	0	; select bank0
 10051  1753  065B               	xorwf	??_SetBaud+2,w
 10052  1754  1D03               	skipz
 10053  1755  2F60               	goto	u8115
 10054  1756  0022               	movlb	2	; select bank2
 10055  1757  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10056  1758  0020               	movlb	0	; select bank0
 10057  1759  065A               	xorwf	??_SetBaud+1,w
 10058  175A  1D03               	skipz
 10059  175B  2F60               	goto	u8115
 10060  175C  0022               	movlb	2	; select bank2
 10061  175D  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10062  175E  0020               	movlb	0	; select bank0
 10063  175F  0659               	xorwf	??_SetBaud,w
 10064  1760                     u8115:	
 10065  1760  1903               	skipnz
 10066  1761  2F75               	goto	l6276
 10067  1762                     l6272:	
 10068                           
 10069                           ;UART.c: 303: {
 10070                           ;UART.c: 304: UARTstringWAIT("Program Fail\r\n");
 10071  1762  3089               	movlw	low (STR_19| (0+32768))
 10072  1763  00B4               	movwf	UARTstringWAIT@data
 10073  1764  308C               	movlw	high (STR_19| (0+32768))
 10074  1765  00B5               	movwf	UARTstringWAIT@data+1
 10075  1766  319A  22F0  3196   	fcall	_UARTstringWAIT
 10076                           
 10077                           ;UART.c: 305: delayUS(10000);
 10078  1769  3000               	movlw	0
 10079  176A  0020               	movlb	0	; select bank0
 10080  176B  00A8               	movwf	delayUS@US+3
 10081  176C  3000               	movlw	0
 10082  176D  00A7               	movwf	delayUS@US+2
 10083  176E  3027               	movlw	39
 10084  176F  00A6               	movwf	delayUS@US+1
 10085  1770  3010               	movlw	16
 10086  1771  00A5               	movwf	delayUS@US
 10087  1772  319B  2323  3196   	fcall	_delayUS
 10088  1775                     l6276:	
 10089                           
 10090                           ;UART.c: 306: }
 10091                           ;UART.c: 309: for(i =0;i<10;i++)
 10092  1775  0022               	movlb	2	; select bank2
 10093  1776  01DE               	clrf	SetBaud@i^(0+256)
 10094  1777  300A               	movlw	10
 10095  1778  025E               	subwf	SetBaud@i^(0+256),w
 10096  1779  1803               	btfsc	3,0
 10097  177A  2FA4               	goto	l6290
 10098  177B                     l529:	
 10099                           
 10100                           ;UART.c: 310: {
 10101                           ;UART.c: 311: LATC |= 0b00010000;
 10102  177B  160E               	bsf	14,4	;volatile
 10103                           
 10104                           ;UART.c: 312: delayUS(10000);
 10105  177C  3000               	movlw	0
 10106  177D  0020               	movlb	0	; select bank0
 10107  177E  00A8               	movwf	delayUS@US+3
 10108  177F  3000               	movlw	0
 10109  1780  00A7               	movwf	delayUS@US+2
 10110  1781  3027               	movlw	39
 10111  1782  00A6               	movwf	delayUS@US+1
 10112  1783  3010               	movlw	16
 10113  1784  00A5               	movwf	delayUS@US
 10114  1785  319B  2323  3196   	fcall	_delayUS
 10115                           
 10116                           ;UART.c: 313: LATC &= ~0b00010000;
 10117  1788  30EF               	movlw	239
 10118  1789  0020               	movlb	0	; select bank0
 10119  178A  00D9               	movwf	??_SetBaud
 10120  178B  0859               	movf	??_SetBaud,w
 10121  178C  0022               	movlb	2	; select bank2
 10122  178D  058E               	andwf	14,f	;volatile
 10123                           
 10124                           ;UART.c: 314: delayUS(10000);
 10125  178E  3000               	movlw	0
 10126  178F  0020               	movlb	0	; select bank0
 10127  1790  00A8               	movwf	delayUS@US+3
 10128  1791  3000               	movlw	0
 10129  1792  00A7               	movwf	delayUS@US+2
 10130  1793  3027               	movlw	39
 10131  1794  00A6               	movwf	delayUS@US+1
 10132  1795  3010               	movlw	16
 10133  1796  00A5               	movwf	delayUS@US
 10134  1797  319B  2323  3196   	fcall	_delayUS
 10135  179A  3001               	movlw	1
 10136  179B  0020               	movlb	0	; select bank0
 10137  179C  00D9               	movwf	??_SetBaud
 10138  179D  0859               	movf	??_SetBaud,w
 10139  179E  0022               	movlb	2	; select bank2
 10140  179F  07DE               	addwf	SetBaud@i^(0+256),f
 10141  17A0  300A               	movlw	10
 10142  17A1  025E               	subwf	SetBaud@i^(0+256),w
 10143  17A2  1C03               	skipc
 10144  17A3  2F7B               	goto	l529
 10145  17A4                     l6290:	
 10146                           
 10147                           ;UART.c: 315: }
 10148                           ;UART.c: 317: if(Parity)
 10149  17A4  0020               	movlb	0	; select bank0
 10150  17A5  0858               	movf	SetBaud@Parity,w
 10151  17A6  1903               	btfsc	3,2
 10152  17A7  2FD9               	goto	l6306
 10153                           
 10154                           ;UART.c: 318: {
 10155                           ;UART.c: 319: switch (Parity)
 10156  17A8  2FCC               	goto	l6304
 10157  17A9                     l6294:	
 10158                           ;UART.c: 320: {
 10159                           ;UART.c: 321: case 1:
 10160                           
 10161                           
 10162                           ;UART.c: 322: sprintf(buf,"Baud is %lu with Odd parity bit\r\n",Baud);
 10163  17A9  3020               	movlw	low SetBaud@buf
 10164  17AA  00BD               	movwf	sprintf@sp
 10165  17AB  3001               	movlw	high SetBaud@buf
 10166  17AC  00BE               	movwf	sprintf@sp+1
 10167  17AD  303F               	movlw	low (STR_13| (0+32768))
 10168  17AE  00BF               	movwf	sprintf@f
 10169  17AF  308B               	movlw	high (STR_13| (0+32768))
 10170  17B0  2FE0               	goto	L15
 10171  17B1                     l6296:	
 10172                           ;UART.c: 324: case 2:
 10173                           
 10174                           ;UART.c: 323: break;
 10175                           
 10176                           
 10177                           ;UART.c: 325: sprintf(buf,"Baud is %lu with Even parity bit\r\n",Baud);
 10178  17B1  3020               	movlw	low SetBaud@buf
 10179  17B2  0020               	movlb	0	; select bank0
 10180  17B3  00BD               	movwf	sprintf@sp
 10181  17B4  3001               	movlw	high SetBaud@buf
 10182  17B5  00BE               	movwf	sprintf@sp+1
 10183  17B6  30F9               	movlw	low (STR_14| (0+32768))
 10184  17B7  00BF               	movwf	sprintf@f
 10185  17B8  308A               	movlw	high (STR_14| (0+32768))
 10186  17B9  2FE0               	goto	L15
 10187  17BA                     l6298:	
 10188                           ;UART.c: 327: case 3:
 10189                           
 10190                           ;UART.c: 326: break;
 10191                           
 10192                           
 10193                           ;UART.c: 328: sprintf(buf,"Baud is %lu with Mark bit\r\n",Baud);
 10194  17BA  3020               	movlw	low SetBaud@buf
 10195  17BB  0020               	movlb	0	; select bank0
 10196  17BC  00BD               	movwf	sprintf@sp
 10197  17BD  3001               	movlw	high SetBaud@buf
 10198  17BE  00BE               	movwf	sprintf@sp+1
 10199  17BF  309F               	movlw	low (STR_15| (0+32768))
 10200  17C0  00BF               	movwf	sprintf@f
 10201  17C1  308B               	movlw	high (STR_15| (0+32768))
 10202  17C2  2FE0               	goto	L15
 10203  17C3                     l6300:	
 10204                           ;UART.c: 330: default:
 10205                           
 10206                           ;UART.c: 329: break;
 10207                           
 10208                           
 10209                           ;UART.c: 331: sprintf(buf,"Baud is %lu with Space bit\r\n",Baud);
 10210  17C3  3020               	movlw	low SetBaud@buf
 10211  17C4  0020               	movlb	0	; select bank0
 10212  17C5  00BD               	movwf	sprintf@sp
 10213  17C6  3001               	movlw	high SetBaud@buf
 10214  17C7  00BE               	movwf	sprintf@sp+1
 10215  17C8  3082               	movlw	low (STR_16| (0+32768))
 10216  17C9  00BF               	movwf	sprintf@f
 10217  17CA  308B               	movlw	high (STR_16| (0+32768))
 10218  17CB  2FE0               	goto	L15
 10219  17CC                     l6304:	
 10220                           ;UART.c: 333: }
 10221                           
 10222                           ;UART.c: 332: break;
 10223                           
 10224  17CC  0020               	movlb	0	; select bank0
 10225  17CD  0858               	movf	SetBaud@Parity,w
 10226                           
 10227                           ; Switch size 1, requested type "space"
 10228                           ; Number of cases is 3, Range of values is 1 to 3
 10229                           ; switch strategies available:
 10230                           ; Name         Instructions Cycles
 10231                           ; simple_byte           10     6 (average)
 10232                           ; direct_byte           15     9 (fixed)
 10233                           ; jumptable            263     9 (fixed)
 10234                           ;	Chosen strategy is simple_byte
 10235  17CE  3A01               	xorlw	1	; case 1
 10236  17CF  1903               	skipnz
 10237  17D0  2FA9               	goto	l6294
 10238  17D1  3A03               	xorlw	3	; case 2
 10239  17D2  1903               	skipnz
 10240  17D3  2FB1               	goto	l6296
 10241  17D4  3A01               	xorlw	1	; case 3
 10242  17D5  1903               	skipnz
 10243  17D6  2FBA               	goto	l6298
 10244  17D7  2FC3               	goto	l6300
 10245                           
 10246                           ;UART.c: 334: }
 10247  17D8  2FEC               	goto	l6308
 10248  17D9                     l6306:	
 10249                           
 10250                           ;UART.c: 335: else
 10251                           ;UART.c: 336: {
 10252                           ;UART.c: 337: sprintf(buf,"Baud is %lu with no parity bit\r\n",Baud);
 10253  17D9  3020               	movlw	low SetBaud@buf
 10254  17DA  00BD               	movwf	sprintf@sp
 10255  17DB  3001               	movlw	high SetBaud@buf
 10256  17DC  00BE               	movwf	sprintf@sp+1
 10257  17DD  3061               	movlw	low (STR_17| (0+32768))
 10258  17DE  00BF               	movwf	sprintf@f
 10259  17DF  308B               	movlw	high (STR_17| (0+32768))
 10260  17E0                     L15:	
 10261  17E0  00C0               	movwf	sprintf@f+1
 10262  17E1  0857               	movf	SetBaud@Baud+3,w
 10263  17E2  00C4               	movwf	?_sprintf+7
 10264  17E3  0856               	movf	SetBaud@Baud+2,w
 10265  17E4  00C3               	movwf	?_sprintf+6
 10266  17E5  0855               	movf	SetBaud@Baud+1,w
 10267  17E6  00C2               	movwf	?_sprintf+5
 10268  17E7  0854               	movf	SetBaud@Baud,w
 10269  17E8  00C1               	movwf	?_sprintf+4
 10270  17E9  3194  248F  3196   	fcall	_sprintf
 10271  17EC                     l6308:	
 10272                           
 10273                           ;UART.c: 338: }
 10274                           ;UART.c: 339: UARTstringWAIT(buf);
 10275  17EC  3020               	movlw	low SetBaud@buf
 10276  17ED  0020               	movlb	0	; select bank0
 10277  17EE  00B4               	movwf	UARTstringWAIT@data
 10278  17EF  3001               	movlw	high SetBaud@buf
 10279  17F0  00B5               	movwf	UARTstringWAIT@data+1
 10280  17F1  319A  22F0  3196   	fcall	_UARTstringWAIT
 10281                           
 10282                           ;UART.c: 340: delayUS(10000);
 10283  17F4  3000               	movlw	0
 10284  17F5  0020               	movlb	0	; select bank0
 10285  17F6  00A8               	movwf	delayUS@US+3
 10286  17F7  3000               	movlw	0
 10287  17F8  00A7               	movwf	delayUS@US+2
 10288  17F9  3027               	movlw	39
 10289  17FA  00A6               	movwf	delayUS@US+1
 10290  17FB  3010               	movlw	16
 10291  17FC  00A5               	movwf	delayUS@US
 10292  17FD  319B  2323         	fcall	_delayUS
 10293  17FF  0008               	return
 10294  1800                     __end_of_SetBaud:	
 10295                           
 10296                           	psect	text16
 10297  1DFF                     __ptext16:	
 10298 ;; *************** function _WriteBaud *****************
 10299 ;; Defined at:
 10300 ;;		line 127 in file "FLASH.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;  row             2   22[BANK0 ] unsigned int 
 10303 ;;  Baud            4   24[BANK0 ] unsigned long 
 10304 ;;  Parity          1   28[BANK0 ] unsigned char 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  temp            4   37[BANK0 ] unsigned long 
 10307 ;; Return value:  Size  Location     Type
 10308 ;;		None               void
 10309 ;; Registers used:
 10310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10316 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;Total ram usage:       19 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    6
 10323 ;; This function calls:
 10324 ;;		_WriteFlash_Sequential
 10325 ;; This function is called by:
 10326 ;;		_SetBaud
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _WriteBaud
 10332  1DFF                     _WriteBaud:	
 10333                           
 10334                           ;FLASH.c: 129: unsigned long temp;
 10335                           ;FLASH.c: 130: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10339  1DFF  0020               	movlb	0	; select bank0
 10340  1E00  083C               	movf	WriteBaud@Parity,w
 10341  1E01  3907               	andlw	7
 10342  1E02  00BD               	movwf	??_WriteBaud
 10343  1E03  01BE               	clrf	??_WriteBaud+1
 10344  1E04  01BF               	clrf	??_WriteBaud+2
 10345  1E05  01C0               	clrf	??_WriteBaud+3
 10346  1E06  3014               	movlw	20
 10347  1E07                     u7965:	
 10348  1E07  35BD               	lslf	??_WriteBaud,f
 10349  1E08  0DBE               	rlf	??_WriteBaud+1,f
 10350  1E09  0DBF               	rlf	??_WriteBaud+2,f
 10351  1E0A  0DC0               	rlf	??_WriteBaud+3,f
 10352  1E0B  0B89               	decfsz	9,f
 10353  1E0C  2E07               	goto	u7965
 10354  1E0D  30FF               	movlw	255
 10355  1E0E  0538               	andwf	WriteBaud@Baud,w
 10356  1E0F  00C1               	movwf	??_WriteBaud+4
 10357  1E10  30FF               	movlw	255
 10358  1E11  0539               	andwf	WriteBaud@Baud+1,w
 10359  1E12  00C2               	movwf	??_WriteBaud+5
 10360  1E13  300F               	movlw	15
 10361  1E14  053A               	andwf	WriteBaud@Baud+2,w
 10362  1E15  00C3               	movwf	??_WriteBaud+6
 10363  1E16  3000               	movlw	0
 10364  1E17  053B               	andwf	WriteBaud@Baud+3,w
 10365  1E18  00C4               	movwf	??_WriteBaud+7
 10366  1E19  0841               	movf	??_WriteBaud+4,w
 10367  1E1A  07BD               	addwf	??_WriteBaud,f
 10368  1E1B  0842               	movf	??_WriteBaud+5,w
 10369  1E1C  3DBE               	addwfc	??_WriteBaud+1,f
 10370  1E1D  0843               	movf	??_WriteBaud+6,w
 10371  1E1E  3DBF               	addwfc	??_WriteBaud+2,f
 10372  1E1F  0844               	movf	??_WriteBaud+7,w
 10373  1E20  3DC0               	addwfc	??_WriteBaud+3,f
 10374  1E21  0840               	movf	??_WriteBaud+3,w
 10375  1E22  00C8               	movwf	WriteBaud@temp+3
 10376  1E23  083F               	movf	??_WriteBaud+2,w
 10377  1E24  00C7               	movwf	WriteBaud@temp+2
 10378  1E25  083E               	movf	??_WriteBaud+1,w
 10379  1E26  00C6               	movwf	WriteBaud@temp+1
 10380  1E27  083D               	movf	??_WriteBaud,w
 10381  1E28  00C5               	movwf	WriteBaud@temp
 10382                           
 10383                           ;FLASH.c: 131: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10384  1E29  30FF               	movlw	255
 10385  1E2A  0545               	andwf	WriteBaud@temp,w
 10386  1E2B  0024               	movlb	4	; select bank4
 10387  1E2C  00B2               	movwf	(_MEM^(0+512)+2)
 10388  1E2D  303F               	movlw	63
 10389  1E2E  0020               	movlb	0	; select bank0
 10390  1E2F  0546               	andwf	WriteBaud@temp+1,w
 10391  1E30  0024               	movlb	4	; select bank4
 10392  1E31  00B3               	movwf	((_MEM+1)^(0+512)+2)
 10393                           
 10394                           ;FLASH.c: 132: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10395  1E32  0020               	movlb	0	; select bank0
 10396  1E33  0845               	movf	WriteBaud@temp,w
 10397  1E34  00BD               	movwf	??_WriteBaud
 10398  1E35  0846               	movf	WriteBaud@temp+1,w
 10399  1E36  00BE               	movwf	??_WriteBaud+1
 10400  1E37  0847               	movf	WriteBaud@temp+2,w
 10401  1E38  00BF               	movwf	??_WriteBaud+2
 10402  1E39  0848               	movf	WriteBaud@temp+3,w
 10403  1E3A  00C0               	movwf	??_WriteBaud+3
 10404  1E3B  300E               	movlw	14
 10405  1E3C                     u7975:	
 10406  1E3C  36C0               	lsrf	??_WriteBaud+3,f
 10407  1E3D  0CBF               	rrf	??_WriteBaud+2,f
 10408  1E3E  0CBE               	rrf	??_WriteBaud+1,f
 10409  1E3F  0CBD               	rrf	??_WriteBaud,f
 10410  1E40  0B89               	decfsz	9,f
 10411  1E41  2E3C               	goto	u7975
 10412  1E42  30FF               	movlw	255
 10413  1E43  053D               	andwf	??_WriteBaud,w
 10414  1E44  0024               	movlb	4	; select bank4
 10415  1E45  00B0               	movwf	_MEM^(0+512)
 10416  1E46  303F               	movlw	63
 10417  1E47  0020               	movlb	0	; select bank0
 10418  1E48  053E               	andwf	??_WriteBaud+1,w
 10419  1E49  0024               	movlb	4	; select bank4
 10420  1E4A  00B1               	movwf	(_MEM+1)^(0+512)
 10421                           
 10422                           ;FLASH.c: 133: WriteFlash_Sequential(row, MEM, 2);
 10423  1E4B  0020               	movlb	0	; select bank0
 10424  1E4C  0837               	movf	WriteBaud@row+1,w
 10425  1E4D  01B0               	clrf	WriteFlash_Sequential@row+1
 10426  1E4E  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10427  1E4F  0836               	movf	WriteBaud@row,w
 10428  1E50  01AF               	clrf	WriteFlash_Sequential@row
 10429  1E51  07AF               	addwf	WriteFlash_Sequential@row,f
 10430  1E52  3030               	movlw	_MEM& (0+255)
 10431  1E53  00BD               	movwf	??_WriteBaud
 10432  1E54  083D               	movf	??_WriteBaud,w
 10433  1E55  00B1               	movwf	WriteFlash_Sequential@buffer
 10434  1E56  3002               	movlw	2
 10435  1E57  00BE               	movwf	??_WriteBaud+1
 10436  1E58  083E               	movf	??_WriteBaud+1,w
 10437  1E59  00B2               	movwf	WriteFlash_Sequential@amount
 10438  1E5A  3192  22AA         	fcall	_WriteFlash_Sequential
 10439  1E5C  0008               	return
 10440  1E5D                     __end_of_WriteBaud:	
 10441                           
 10442                           	psect	text17
 10443  12AA                     __ptext17:	
 10444 ;; *************** function _WriteFlash_Sequential *****************
 10445 ;; Defined at:
 10446 ;;		line 73 in file "FLASH.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;  row             2   15[BANK0 ] unsigned int 
 10449 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10450 ;;		 -> MEM(4), 
 10451 ;;  amount          1   18[BANK0 ] unsigned char 
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10454 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10455 ;;  temp            2   67[BANK1 ] unsigned int 
 10456 ;;  i               1   70[BANK1 ] unsigned char 
 10457 ;;  spaces          1   69[BANK1 ] unsigned char 
 10458 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10459 ;;  tempL           1   65[BANK1 ] unsigned char 
 10460 ;;  tempH           1   64[BANK1 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;		None               void
 10463 ;; Registers used:
 10464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;Total ram usage:       78 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    5
 10477 ;; This function calls:
 10478 ;;		_BlockErase
 10479 ;;		_ReadFlash_2Byte
 10480 ;;		_UNLOCK
 10481 ;;		_delayUS
 10482 ;; This function is called by:
 10483 ;;		_WriteBaud
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function _WriteFlash_Sequential
 10489  12AA                     _WriteFlash_Sequential:	
 10490                           
 10491                           ;FLASH.c: 75: unsigned char spaces = 32;
 10492                           
 10493                           ;incstack = 0
 10494                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10495  12AA  3020               	movlw	32
 10496  12AB  0020               	movlb	0	; select bank0
 10497  12AC  00B3               	movwf	??_WriteFlash_Sequential
 10498  12AD  0833               	movf	??_WriteFlash_Sequential,w
 10499  12AE  0021               	movlb	1	; select bank1
 10500  12AF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10501                           
 10502                           ;FLASH.c: 76: unsigned char tempH;
 10503                           ;FLASH.c: 77: unsigned char tempL;
 10504                           ;FLASH.c: 78: unsigned char i;
 10505                           ;FLASH.c: 79: unsigned int temp;
 10506                           ;FLASH.c: 80: unsigned char amountTemp =0;
 10507  12B0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10508                           
 10509                           ;FLASH.c: 81: unsigned char TempBufH[32];
 10510                           ;FLASH.c: 82: unsigned char TempBufL[32];
 10511                           ;FLASH.c: 84: for(i=0;i<spaces;i++)
 10512  12B1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10513  12B2                     l5934:	
 10514  12B2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10515  12B3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10516  12B4  1803               	btfsc	3,0
 10517  12B5  2B23               	goto	l5936
 10518                           
 10519                           ;FLASH.c: 85: {
 10520                           ;FLASH.c: 86: amountTemp++;
 10521  12B6  3001               	movlw	1
 10522  12B7  0020               	movlb	0	; select bank0
 10523  12B8  00B3               	movwf	??_WriteFlash_Sequential
 10524  12B9  0833               	movf	??_WriteFlash_Sequential,w
 10525  12BA  0021               	movlb	1	; select bank1
 10526  12BB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10527                           
 10528                           ;FLASH.c: 87: if(amountTemp <= amount)
 10529  12BC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10530  12BD  0020               	movlb	0	; select bank0
 10531  12BE  0232               	subwf	WriteFlash_Sequential@amount,w
 10532  12BF  1C03               	skipc
 10533  12C0  2ADF               	goto	l5922
 10534                           
 10535                           ;FLASH.c: 88: {
 10536                           ;FLASH.c: 89: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10537  12C1  0831               	movf	WriteFlash_Sequential@buffer,w
 10538  12C2  0086               	movwf	6
 10539  12C3  3002               	movlw	2	; select bank4/5
 10540  12C4  0087               	movwf	7
 10541  12C5  3F40               	moviw [0]fsr1
 10542  12C6  00B3               	movwf	??_WriteFlash_Sequential
 10543  12C7  3F41               	moviw [1]fsr1
 10544  12C8  00B4               	movwf	??_WriteFlash_Sequential+1
 10545  12C9  0834               	movf	??_WriteFlash_Sequential+1,w
 10546  12CA  393F               	andlw	63
 10547  12CB  00B5               	movwf	??_WriteFlash_Sequential+2
 10548  12CC  0835               	movf	??_WriteFlash_Sequential+2,w
 10549  12CD  0021               	movlb	1	; select bank1
 10550  12CE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10551                           
 10552                           ;FLASH.c: 90: tempL = (unsigned char)(*buffer & 0x00FF);
 10553  12CF  0020               	movlb	0	; select bank0
 10554  12D0  0831               	movf	WriteFlash_Sequential@buffer,w
 10555  12D1  0086               	movwf	6
 10556  12D2  3002               	movlw	2	; select bank4/5
 10557  12D3  0087               	movwf	7
 10558  12D4  0801               	movf	1,w
 10559  12D5  00B3               	movwf	??_WriteFlash_Sequential
 10560  12D6  0833               	movf	??_WriteFlash_Sequential,w
 10561  12D7  0021               	movlb	1	; select bank1
 10562  12D8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10563                           
 10564                           ;FLASH.c: 91: buffer++;
 10565  12D9  3002               	movlw	2
 10566  12DA  0020               	movlb	0	; select bank0
 10567  12DB  00B3               	movwf	??_WriteFlash_Sequential
 10568  12DC  0833               	movf	??_WriteFlash_Sequential,w
 10569  12DD  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10570                           
 10571                           ;FLASH.c: 92: }
 10572  12DE  2B05               	goto	l5928
 10573  12DF                     l5922:	
 10574                           
 10575                           ;FLASH.c: 93: else
 10576                           ;FLASH.c: 94: {
 10577                           ;FLASH.c: 96: temp = ReadFlash_2Byte(row, i);
 10578  12DF  0830               	movf	WriteFlash_Sequential@row+1,w
 10579  12E0  01A6               	clrf	ReadFlash_2Byte@row+1
 10580  12E1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10581  12E2  082F               	movf	WriteFlash_Sequential@row,w
 10582  12E3  01A5               	clrf	ReadFlash_2Byte@row
 10583  12E4  07A5               	addwf	ReadFlash_2Byte@row,f
 10584  12E5  0021               	movlb	1	; select bank1
 10585  12E6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10586  12E7  0020               	movlb	0	; select bank0
 10587  12E8  00B3               	movwf	??_WriteFlash_Sequential
 10588  12E9  0833               	movf	??_WriteFlash_Sequential,w
 10589  12EA  00A7               	movwf	ReadFlash_2Byte@column
 10590  12EB  319A  22BE  3192   	fcall	_ReadFlash_2Byte
 10591  12EE  0020               	movlb	0	; select bank0
 10592  12EF  0826               	movf	?_ReadFlash_2Byte+1,w
 10593  12F0  0021               	movlb	1	; select bank1
 10594  12F1  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10595  12F2  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10596  12F3  0020               	movlb	0	; select bank0
 10597  12F4  0825               	movf	?_ReadFlash_2Byte,w
 10598  12F5  0021               	movlb	1	; select bank1
 10599  12F6  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10600  12F7  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10601                           
 10602                           ;FLASH.c: 97: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10603  12F8  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10604  12F9  393F               	andlw	63
 10605  12FA  0020               	movlb	0	; select bank0
 10606  12FB  00B3               	movwf	??_WriteFlash_Sequential
 10607  12FC  0833               	movf	??_WriteFlash_Sequential,w
 10608  12FD  0021               	movlb	1	; select bank1
 10609  12FE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10610                           
 10611                           ;FLASH.c: 98: tempL = (unsigned char)(temp & 0x00FF);
 10612  12FF  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10613  1300  0020               	movlb	0	; select bank0
 10614  1301  00B3               	movwf	??_WriteFlash_Sequential
 10615  1302  0833               	movf	??_WriteFlash_Sequential,w
 10616  1303  0021               	movlb	1	; select bank1
 10617  1304  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10618  1305                     l5928:	
 10619                           
 10620                           ;FLASH.c: 99: }
 10621                           ;FLASH.c: 100: TempBufH[i] = tempH;
 10622  1305  0021               	movlb	1	; select bank1
 10623  1306  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10624  1307  0020               	movlb	0	; select bank0
 10625  1308  00B3               	movwf	??_WriteFlash_Sequential
 10626  1309  0021               	movlb	1	; select bank1
 10627  130A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10628  130B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10629  130C  0086               	movwf	6
 10630  130D  0187               	clrf	7
 10631  130E  0020               	movlb	0	; select bank0
 10632  130F  0833               	movf	??_WriteFlash_Sequential,w
 10633  1310  0081               	movwf	1
 10634                           
 10635                           ;FLASH.c: 101: TempBufL[i] = tempL;
 10636  1311  0021               	movlb	1	; select bank1
 10637  1312  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10638  1313  0020               	movlb	0	; select bank0
 10639  1314  00B3               	movwf	??_WriteFlash_Sequential
 10640  1315  0021               	movlb	1	; select bank1
 10641  1316  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10642  1317  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10643  1318  0086               	movwf	6
 10644  1319  0187               	clrf	7
 10645  131A  0020               	movlb	0	; select bank0
 10646  131B  0833               	movf	??_WriteFlash_Sequential,w
 10647  131C  0081               	movwf	1
 10648  131D  3001               	movlw	1
 10649  131E  00B3               	movwf	??_WriteFlash_Sequential
 10650  131F  0833               	movf	??_WriteFlash_Sequential,w
 10651  1320  0021               	movlb	1	; select bank1
 10652  1321  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10653  1322  2AB2               	goto	l5934
 10654  1323                     l5936:	
 10655                           
 10656                           ;FLASH.c: 102: }
 10657                           ;FLASH.c: 103: BlockErase(row);
 10658  1323  0020               	movlb	0	; select bank0
 10659  1324  0830               	movf	WriteFlash_Sequential@row+1,w
 10660  1325  01A6               	clrf	BlockErase@row+1
 10661  1326  07A6               	addwf	BlockErase@row+1,f
 10662  1327  082F               	movf	WriteFlash_Sequential@row,w
 10663  1328  01A5               	clrf	BlockErase@row
 10664  1329  07A5               	addwf	BlockErase@row,f
 10665  132A  319A  228D  3192   	fcall	_BlockErase
 10666                           
 10667                           ;FLASH.c: 104: delayUS(1000);
 10668  132D  3000               	movlw	0
 10669  132E  0020               	movlb	0	; select bank0
 10670  132F  00A8               	movwf	delayUS@US+3
 10671  1330  3000               	movlw	0
 10672  1331  00A7               	movwf	delayUS@US+2
 10673  1332  3003               	movlw	3
 10674  1333  00A6               	movwf	delayUS@US+1
 10675  1334  30E8               	movlw	232
 10676  1335  00A5               	movwf	delayUS@US
 10677  1336  319B  2323  3192   	fcall	_delayUS
 10678                           
 10679                           ;FLASH.c: 105: INTCON &= ~0x80;
 10680  1339  307F               	movlw	127
 10681  133A  0020               	movlb	0	; select bank0
 10682  133B  00B3               	movwf	??_WriteFlash_Sequential
 10683  133C  0833               	movf	??_WriteFlash_Sequential,w
 10684  133D  058B               	andwf	11,f	;volatile
 10685                           
 10686                           ;FLASH.c: 106: PMCON1 |= 0b00000100;
 10687  133E  0023               	movlb	3	; select bank3
 10688  133F  1515               	bsf	21,2	;volatile
 10689                           
 10690                           ;FLASH.c: 107: PMCON1 &= ~0b01000000;
 10691  1340  30BF               	movlw	191
 10692  1341  0020               	movlb	0	; select bank0
 10693  1342  00B3               	movwf	??_WriteFlash_Sequential
 10694  1343  0833               	movf	??_WriteFlash_Sequential,w
 10695  1344  0023               	movlb	3	; select bank3
 10696  1345  0595               	andwf	21,f	;volatile
 10697                           
 10698                           ;FLASH.c: 108: PMCON1 &= ~0b00100000;
 10699  1346  30DF               	movlw	223
 10700  1347  0020               	movlb	0	; select bank0
 10701  1348  00B3               	movwf	??_WriteFlash_Sequential
 10702  1349  0833               	movf	??_WriteFlash_Sequential,w
 10703  134A  0023               	movlb	3	; select bank3
 10704  134B  0595               	andwf	21,f	;volatile
 10705                           
 10706                           ;FLASH.c: 109: PMCON1 &= ~0b00010000;
 10707  134C  30EF               	movlw	239
 10708  134D  0020               	movlb	0	; select bank0
 10709  134E  00B3               	movwf	??_WriteFlash_Sequential
 10710  134F  0833               	movf	??_WriteFlash_Sequential,w
 10711  1350  0023               	movlb	3	; select bank3
 10712  1351  0595               	andwf	21,f	;volatile
 10713                           
 10714                           ;FLASH.c: 110: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10715  1352  0020               	movlb	0	; select bank0
 10716  1353  0830               	movf	WriteFlash_Sequential@row+1,w
 10717  1354  00B4               	movwf	??_WriteFlash_Sequential+1
 10718  1355  082F               	movf	WriteFlash_Sequential@row,w
 10719  1356  00B3               	movwf	??_WriteFlash_Sequential
 10720  1357  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10721  1358  0CB3               	rrf	??_WriteFlash_Sequential,f
 10722  1359  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10723  135A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10724  135B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10725  135C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10726  135D  0833               	movf	??_WriteFlash_Sequential,w
 10727  135E  397F               	andlw	127
 10728  135F  0023               	movlb	3	; select bank3
 10729  1360  0092               	movwf	18	;volatile
 10730                           
 10731                           ;FLASH.c: 111: PMADRL = (unsigned char)((row & 0x007) << 5);
 10732  1361  0020               	movlb	0	; select bank0
 10733  1362  082F               	movf	WriteFlash_Sequential@row,w
 10734  1363  3907               	andlw	7
 10735  1364  00B3               	movwf	??_WriteFlash_Sequential
 10736  1365  3004               	movlw	4
 10737  1366                     u7635:	
 10738  1366  35B3               	lslf	??_WriteFlash_Sequential,f
 10739  1367  3EFF               	addlw	-1
 10740  1368  1D03               	skipz
 10741  1369  2B66               	goto	u7635
 10742  136A  3533               	lslf	??_WriteFlash_Sequential,w
 10743  136B  0023               	movlb	3	; select bank3
 10744  136C  0091               	movwf	17	;volatile
 10745                           
 10746                           ;FLASH.c: 113: for(i=0;i<spaces;i++)
 10747  136D  0021               	movlb	1	; select bank1
 10748  136E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10749  136F                     l5966:	
 10750  136F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10751  1370  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10752  1371  1803               	btfsc	3,0
 10753  1372  2B94               	goto	l5968
 10754                           
 10755                           ;FLASH.c: 114: {
 10756                           ;FLASH.c: 115: PMDATH = TempBufH[i];
 10757  1373  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10758  1374  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10759  1375  0086               	movwf	6
 10760  1376  0187               	clrf	7
 10761  1377  0801               	movf	1,w
 10762  1378  0023               	movlb	3	; select bank3
 10763  1379  0094               	movwf	20	;volatile
 10764                           
 10765                           ;FLASH.c: 116: PMDATL = TempBufL[i];
 10766  137A  0021               	movlb	1	; select bank1
 10767  137B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10768  137C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10769  137D  0086               	movwf	6
 10770  137E  0187               	clrf	7
 10771  137F  0801               	movf	1,w
 10772  1380  0023               	movlb	3	; select bank3
 10773  1381  0093               	movwf	19	;volatile
 10774                           
 10775                           ;FLASH.c: 117: __nop();
 10776  1382  0000               	nop
 10777                           
 10778                           ;FLASH.c: 118: __nop();
 10779  1383  0000               	nop
 10780                           
 10781                           ;FLASH.c: 119: UNLOCK();
 10782  1384  3198  20E5  3192   	fcall	_UNLOCK
 10783                           
 10784                           ;FLASH.c: 120: PMADRL++;
 10785  1387  3001               	movlw	1
 10786  1388  0020               	movlb	0	; select bank0
 10787  1389  00B3               	movwf	??_WriteFlash_Sequential
 10788  138A  0833               	movf	??_WriteFlash_Sequential,w
 10789  138B  0023               	movlb	3	; select bank3
 10790  138C  0791               	addwf	17,f	;volatile
 10791  138D  3001               	movlw	1
 10792  138E  0020               	movlb	0	; select bank0
 10793  138F  00B3               	movwf	??_WriteFlash_Sequential
 10794  1390  0833               	movf	??_WriteFlash_Sequential,w
 10795  1391  0021               	movlb	1	; select bank1
 10796  1392  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10797  1393  2B6F               	goto	l5966
 10798  1394                     l5968:	
 10799                           
 10800                           ;FLASH.c: 122: }
 10801                           ;FLASH.c: 123: PMCON1 &= ~0b00000100;
 10802  1394  30FB               	movlw	251
 10803  1395  0020               	movlb	0	; select bank0
 10804  1396  00B3               	movwf	??_WriteFlash_Sequential
 10805  1397  0833               	movf	??_WriteFlash_Sequential,w
 10806  1398  0023               	movlb	3	; select bank3
 10807  1399  0595               	andwf	21,f	;volatile
 10808                           
 10809                           ;FLASH.c: 124: INTCON |= 0x80;
 10810  139A  178B               	bsf	11,7	;volatile
 10811  139B  0008               	return
 10812  139C                     __end_of_WriteFlash_Sequential:	
 10813                           
 10814                           	psect	text18
 10815  1A8D                     __ptext18:	
 10816 ;; *************** function _BlockErase *****************
 10817 ;; Defined at:
 10818 ;;		line 61 in file "FLASH.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  row             2    5[BANK0 ] unsigned int 
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;		None
 10823 ;; Return value:  Size  Location     Type
 10824 ;;		None               void
 10825 ;; Registers used:
 10826 ;;		wreg, status,2, status,0, pclath, cstack
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;Total ram usage:        4 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:    4
 10839 ;; This function calls:
 10840 ;;		_UNLOCK
 10841 ;; This function is called by:
 10842 ;;		_WriteFlash_Sequential
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           
 10847                           ;psect for function _BlockErase
 10848  1A8D                     _BlockErase:	
 10849                           
 10850                           ;FLASH.c: 63: INTCON &= ~0x80;
 10851                           
 10852                           ;incstack = 0
 10853                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10854  1A8D  307F               	movlw	127
 10855  1A8E  0020               	movlb	0	; select bank0
 10856  1A8F  00A7               	movwf	??_BlockErase
 10857  1A90  0827               	movf	??_BlockErase,w
 10858  1A91  058B               	andwf	11,f	;volatile
 10859                           
 10860                           ;FLASH.c: 64: PMCON1 &= ~0b01000000;
 10861  1A92  30BF               	movlw	191
 10862  1A93  00A7               	movwf	??_BlockErase
 10863  1A94  0827               	movf	??_BlockErase,w
 10864  1A95  0023               	movlb	3	; select bank3
 10865  1A96  0595               	andwf	21,f	;volatile
 10866                           
 10867                           ;FLASH.c: 65: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10868  1A97  0020               	movlb	0	; select bank0
 10869  1A98  0826               	movf	BlockErase@row+1,w
 10870  1A99  00A8               	movwf	??_BlockErase+1
 10871  1A9A  0825               	movf	BlockErase@row,w
 10872  1A9B  00A7               	movwf	??_BlockErase
 10873  1A9C  36A8               	lsrf	??_BlockErase+1,f
 10874  1A9D  0CA7               	rrf	??_BlockErase,f
 10875  1A9E  36A8               	lsrf	??_BlockErase+1,f
 10876  1A9F  0CA7               	rrf	??_BlockErase,f
 10877  1AA0  36A8               	lsrf	??_BlockErase+1,f
 10878  1AA1  0CA7               	rrf	??_BlockErase,f
 10879  1AA2  0827               	movf	??_BlockErase,w
 10880  1AA3  397F               	andlw	127
 10881  1AA4  0023               	movlb	3	; select bank3
 10882  1AA5  0092               	movwf	18	;volatile
 10883                           
 10884                           ;FLASH.c: 66: PMADRL = (unsigned char)((row & 0x007) << 5);
 10885  1AA6  0020               	movlb	0	; select bank0
 10886  1AA7  0825               	movf	BlockErase@row,w
 10887  1AA8  3907               	andlw	7
 10888  1AA9  00A7               	movwf	??_BlockErase
 10889  1AAA  3004               	movlw	4
 10890  1AAB                     u7485:	
 10891  1AAB  35A7               	lslf	??_BlockErase,f
 10892  1AAC  3EFF               	addlw	-1
 10893  1AAD  1D03               	skipz
 10894  1AAE  2AAB               	goto	u7485
 10895  1AAF  3527               	lslf	??_BlockErase,w
 10896  1AB0  0023               	movlb	3	; select bank3
 10897  1AB1  0091               	movwf	17	;volatile
 10898                           
 10899                           ;FLASH.c: 67: PMCON1 |= 0b00010000;
 10900  1AB2  1615               	bsf	21,4	;volatile
 10901                           
 10902                           ;FLASH.c: 68: PMCON1 |= 0b00000100;
 10903  1AB3  1515               	bsf	21,2	;volatile
 10904                           
 10905                           ;FLASH.c: 69: UNLOCK();
 10906  1AB4  3198  20E5         	fcall	_UNLOCK
 10907                           
 10908                           ;FLASH.c: 70: PMCON1 &= ~0b00000100;
 10909  1AB6  30FB               	movlw	251
 10910  1AB7  0020               	movlb	0	; select bank0
 10911  1AB8  00A7               	movwf	??_BlockErase
 10912  1AB9  0827               	movf	??_BlockErase,w
 10913  1ABA  0023               	movlb	3	; select bank3
 10914  1ABB  0595               	andwf	21,f	;volatile
 10915                           
 10916                           ;FLASH.c: 71: INTCON |= 0x80;
 10917  1ABC  178B               	bsf	11,7	;volatile
 10918  1ABD  0008               	return
 10919  1ABE                     __end_of_BlockErase:	
 10920                           
 10921                           	psect	text19
 10922  18E5                     __ptext19:	
 10923 ;; *************** function _UNLOCK *****************
 10924 ;; Defined at:
 10925 ;;		line 51 in file "FLASH.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;		None
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;		None
 10930 ;; Return value:  Size  Location     Type
 10931 ;;		None               void
 10932 ;; Registers used:
 10933 ;;		wreg
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;Total ram usage:        0 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    3
 10946 ;; This function calls:
 10947 ;;		Nothing
 10948 ;; This function is called by:
 10949 ;;		_BlockErase
 10950 ;;		_WriteFlash_Sequential
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _UNLOCK
 10956  18E5                     _UNLOCK:	
 10957                           
 10958                           ;FLASH.c: 53: PMCON2 = 0x55;
 10959                           
 10960                           ;incstack = 0
 10961                           ; Regs used in _UNLOCK: [wreg]
 10962  18E5  3055               	movlw	85
 10963  18E6  0023               	movlb	3	; select bank3
 10964  18E7  0096               	movwf	22	;volatile
 10965                           
 10966                           ;FLASH.c: 54: PMCON2 = 0xAA;
 10967  18E8  30AA               	movlw	170
 10968  18E9  0096               	movwf	22	;volatile
 10969                           
 10970                           ;FLASH.c: 55: PMCON1 |= 0b00000010;
 10971  18EA  1495               	bsf	21,1	;volatile
 10972  18EB                     l1001:	
 10973                           ;FLASH.c: 56: while(PMCON1 & 0b00000010);
 10974                           
 10975  18EB  1895               	btfsc	21,1	;volatile
 10976  18EC  28EB               	goto	l1001
 10977                           
 10978                           ;FLASH.c: 57: __nop();
 10979  18ED  0000               	nop
 10980                           
 10981                           ;FLASH.c: 58: __nop();
 10982  18EE  0000               	nop
 10983  18EF  0008               	return
 10984  18F0                     __end_of_UNLOCK:	
 10985                           
 10986                           	psect	text20
 10987  1D55                     __ptext20:	
 10988 ;; *************** function _Reverse_Byte *****************
 10989 ;; Defined at:
 10990 ;;		line 314 in file "MISC.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;  This            1    wreg     unsigned char 
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;  This            1    8[BANK0 ] unsigned char 
 10995 ;;  temp            1    7[BANK0 ] unsigned char 
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      unsigned char 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, status,0
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;Total ram usage:        4 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    3
 11012 ;; This function calls:
 11013 ;;		Nothing
 11014 ;; This function is called by:
 11015 ;;		_PS_2_Update
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           
 11020                           ;psect for function _Reverse_Byte
 11021  1D55                     _Reverse_Byte:	
 11022                           
 11023                           ;incstack = 0
 11024                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 11025                           ;Reverse_Byte@This stored from wreg
 11026  1D55  0020               	movlb	0	; select bank0
 11027  1D56  00A8               	movwf	Reverse_Byte@This
 11028                           
 11029                           ;MISC.c: 316: unsigned char temp=0;
 11030  1D57  01A7               	clrf	Reverse_Byte@temp
 11031                           
 11032                           ;MISC.c: 318: temp += (This & 0x01) << 7;
 11033  1D58  0828               	movf	Reverse_Byte@This,w
 11034  1D59  3901               	andlw	1
 11035  1D5A  00A5               	movwf	??_Reverse_Byte
 11036  1D5B  3006               	movlw	6
 11037  1D5C                     u8015:	
 11038  1D5C  35A5               	lslf	??_Reverse_Byte,f
 11039  1D5D  3EFF               	addlw	-1
 11040  1D5E  1D03               	skipz
 11041  1D5F  2D5C               	goto	u8015
 11042  1D60  3525               	lslf	??_Reverse_Byte,w
 11043  1D61  00A6               	movwf	??_Reverse_Byte+1
 11044  1D62  0826               	movf	??_Reverse_Byte+1,w
 11045  1D63  07A7               	addwf	Reverse_Byte@temp,f
 11046                           
 11047                           ;MISC.c: 319: temp += (This & 0x02) << 5;
 11048  1D64  0828               	movf	Reverse_Byte@This,w
 11049  1D65  3902               	andlw	2
 11050  1D66  00A5               	movwf	??_Reverse_Byte
 11051  1D67  3004               	movlw	4
 11052  1D68                     u8025:	
 11053  1D68  35A5               	lslf	??_Reverse_Byte,f
 11054  1D69  3EFF               	addlw	-1
 11055  1D6A  1D03               	skipz
 11056  1D6B  2D68               	goto	u8025
 11057  1D6C  3525               	lslf	??_Reverse_Byte,w
 11058  1D6D  00A6               	movwf	??_Reverse_Byte+1
 11059  1D6E  0826               	movf	??_Reverse_Byte+1,w
 11060  1D6F  07A7               	addwf	Reverse_Byte@temp,f
 11061                           
 11062                           ;MISC.c: 320: temp += (This & 0x04) << 3;
 11063  1D70  0828               	movf	Reverse_Byte@This,w
 11064  1D71  3904               	andlw	4
 11065  1D72  00A5               	movwf	??_Reverse_Byte
 11066  1D73  3002               	movlw	2
 11067  1D74                     u8035:	
 11068  1D74  35A5               	lslf	??_Reverse_Byte,f
 11069  1D75  3EFF               	addlw	-1
 11070  1D76  1D03               	skipz
 11071  1D77  2D74               	goto	u8035
 11072  1D78  3525               	lslf	??_Reverse_Byte,w
 11073  1D79  00A6               	movwf	??_Reverse_Byte+1
 11074  1D7A  0826               	movf	??_Reverse_Byte+1,w
 11075  1D7B  07A7               	addwf	Reverse_Byte@temp,f
 11076                           
 11077                           ;MISC.c: 321: temp += (This & 0x08) << 1;
 11078  1D7C  0828               	movf	Reverse_Byte@This,w
 11079  1D7D  3908               	andlw	8
 11080  1D7E  0709               	addwf	9,w
 11081  1D7F  00A5               	movwf	??_Reverse_Byte
 11082  1D80  0825               	movf	??_Reverse_Byte,w
 11083  1D81  07A7               	addwf	Reverse_Byte@temp,f
 11084                           
 11085                           ;MISC.c: 322: temp += (This & 0x10) >> 1;
 11086  1D82  3628               	lsrf	Reverse_Byte@This,w
 11087  1D83  3908               	andlw	8
 11088  1D84  00A5               	movwf	??_Reverse_Byte
 11089  1D85  0825               	movf	??_Reverse_Byte,w
 11090  1D86  07A7               	addwf	Reverse_Byte@temp,f
 11091                           
 11092                           ;MISC.c: 323: temp += (This & 0x20) >> 3;
 11093  1D87  0828               	movf	Reverse_Byte@This,w
 11094  1D88  00A5               	movwf	??_Reverse_Byte
 11095  1D89  3003               	movlw	3
 11096  1D8A                     u8045:	
 11097  1D8A  36A5               	lsrf	??_Reverse_Byte,f
 11098  1D8B  0B89               	decfsz	9,f
 11099  1D8C  2D8A               	goto	u8045
 11100  1D8D  0825               	movf	??_Reverse_Byte,w
 11101  1D8E  3904               	andlw	4
 11102  1D8F  00A6               	movwf	??_Reverse_Byte+1
 11103  1D90  0826               	movf	??_Reverse_Byte+1,w
 11104  1D91  07A7               	addwf	Reverse_Byte@temp,f
 11105                           
 11106                           ;MISC.c: 324: temp += (This & 0x40) >> 5;
 11107  1D92  0828               	movf	Reverse_Byte@This,w
 11108  1D93  00A5               	movwf	??_Reverse_Byte
 11109  1D94  3005               	movlw	5
 11110  1D95                     u8055:	
 11111  1D95  36A5               	lsrf	??_Reverse_Byte,f
 11112  1D96  0B89               	decfsz	9,f
 11113  1D97  2D95               	goto	u8055
 11114  1D98  0825               	movf	??_Reverse_Byte,w
 11115  1D99  3902               	andlw	2
 11116  1D9A  00A6               	movwf	??_Reverse_Byte+1
 11117  1D9B  0826               	movf	??_Reverse_Byte+1,w
 11118  1D9C  07A7               	addwf	Reverse_Byte@temp,f
 11119                           
 11120                           ;MISC.c: 325: temp += (This & 0x80) >> 7;
 11121  1D9D  0828               	movf	Reverse_Byte@This,w
 11122  1D9E  00A5               	movwf	??_Reverse_Byte
 11123  1D9F  3007               	movlw	7
 11124  1DA0                     u8065:	
 11125  1DA0  36A5               	lsrf	??_Reverse_Byte,f
 11126  1DA1  0B89               	decfsz	9,f
 11127  1DA2  2DA0               	goto	u8065
 11128  1DA3  0825               	movf	??_Reverse_Byte,w
 11129  1DA4  3901               	andlw	1
 11130  1DA5  00A6               	movwf	??_Reverse_Byte+1
 11131  1DA6  0826               	movf	??_Reverse_Byte+1,w
 11132  1DA7  07A7               	addwf	Reverse_Byte@temp,f
 11133                           
 11134                           ;MISC.c: 327: return temp;
 11135  1DA8  0827               	movf	Reverse_Byte@temp,w
 11136  1DA9  0008               	return
 11137  1DAA                     __end_of_Reverse_Byte:	
 11138                           
 11139                           	psect	text21
 11140  1922                     __ptext21:	
 11141 ;; *************** function _ISNUMBER *****************
 11142 ;; Defined at:
 11143 ;;		line 330 in file "MISC.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  ascii           1    wreg     unsigned char 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  ascii           1    5[BANK0 ] unsigned char 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      unsigned char 
 11150 ;; Registers used:
 11151 ;;		wreg
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;Total ram usage:        1 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    3
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_PS_2_Update
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _ISNUMBER
 11173  1922                     _ISNUMBER:	
 11174                           
 11175                           ;incstack = 0
 11176                           ; Regs used in _ISNUMBER: [wreg]
 11177                           ;ISNUMBER@ascii stored from wreg
 11178  1922  0020               	movlb	0	; select bank0
 11179  1923  00A5               	movwf	ISNUMBER@ascii
 11180                           
 11181                           ;MISC.c: 332: if(ascii >= '0' && ascii <='9')
 11182  1924  3030               	movlw	48
 11183  1925  0225               	subwf	ISNUMBER@ascii,w
 11184  1926  1C03               	skipc
 11185  1927  292E               	goto	l6246
 11186  1928  303A               	movlw	58
 11187  1929  0225               	subwf	ISNUMBER@ascii,w
 11188  192A  1803               	skipnc
 11189  192B  292E               	goto	l6246
 11190                           
 11191                           ;MISC.c: 333: {
 11192                           ;MISC.c: 334: return 1;
 11193  192C  3001               	movlw	1
 11194                           
 11195                           ;MISC.c: 335: }
 11196  192D  0008               	return
 11197  192E                     l6246:	
 11198                           
 11199                           ;MISC.c: 336: else
 11200                           ;MISC.c: 337: {
 11201                           ;MISC.c: 338: return 0;
 11202  192E  3000               	movlw	0
 11203  192F  0008               	return
 11204  1930                     __end_of_ISNUMBER:	
 11205                           
 11206                           	psect	text22
 11207  199D                     __ptext22:	
 11208 ;; *************** function _Decode_Scan_Code_Shift *****************
 11209 ;; Defined at:
 11210 ;;		line 769 in file "PS_2.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;  Code            1    wreg     unsigned char 
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;  Code            1    5[BANK0 ] unsigned char 
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      unsigned char 
 11217 ;; Registers used:
 11218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;Total ram usage:        1 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:    3
 11231 ;; This function calls:
 11232 ;;		Nothing
 11233 ;; This function is called by:
 11234 ;;		_PS_2_Update
 11235 ;; This function uses a non-reentrant model
 11236 ;;
 11237                           
 11238                           
 11239                           ;psect for function _Decode_Scan_Code_Shift
 11240  199D                     _Decode_Scan_Code_Shift:	
 11241                           
 11242                           ;incstack = 0
 11243                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11244                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11245  199D  0020               	movlb	0	; select bank0
 11246  199E  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11247                           
 11248                           ;PS_2.c: 771: Code -= 13;
 11249  199F  300D               	movlw	13
 11250  19A0  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11251                           
 11252                           ;PS_2.c: 772: if(Code <=112)
 11253  19A1  3071               	movlw	113
 11254  19A2  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11255  19A3  1803               	skipnc
 11256  19A4  29AE               	goto	l6320
 11257                           
 11258                           ;PS_2.c: 773: {
 11259                           ;PS_2.c: 774: return ScanCodeSHIFT[Code];
 11260  19A5  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11261  19A6  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11262  19A7  0084               	movwf	4
 11263  19A8  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11264  19A9  1803               	skipnc
 11265  19AA  3E01               	addlw	1
 11266  19AB  0085               	movwf	5
 11267  19AC  0800               	movf	0,w	;code access
 11268                           
 11269                           ;PS_2.c: 775: }
 11270  19AD  0008               	return
 11271  19AE                     l6320:	
 11272                           
 11273                           ;PS_2.c: 776: else
 11274                           ;PS_2.c: 777: {
 11275                           ;PS_2.c: 778: return 0;
 11276  19AE  3000               	movlw	0
 11277  19AF  0008               	return
 11278  19B0                     __end_of_Decode_Scan_Code_Shift:	
 11279                           
 11280                           	psect	text23
 11281  198A                     __ptext23:	
 11282 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11283 ;; Defined at:
 11284 ;;		line 784 in file "PS_2.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;  Code            1    wreg     unsigned char 
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;  Code            1    5[BANK0 ] unsigned char 
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  1    wreg      unsigned char 
 11291 ;; Registers used:
 11292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;Total ram usage:        1 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    3
 11305 ;; This function calls:
 11306 ;;		Nothing
 11307 ;; This function is called by:
 11308 ;;		_PS_2_Update
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           
 11313                           ;psect for function _Decode_Scan_Code_FunctionE0
 11314  198A                     _Decode_Scan_Code_FunctionE0:	
 11315                           
 11316                           ;incstack = 0
 11317                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11318                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11319  198A  0020               	movlb	0	; select bank0
 11320  198B  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11321                           
 11322                           ;PS_2.c: 786: Code -= 17;
 11323  198C  3011               	movlw	17
 11324  198D  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11325                           
 11326                           ;PS_2.c: 787: if(Code <=108)
 11327  198E  306D               	movlw	109
 11328  198F  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11329  1990  1803               	skipnc
 11330  1991  299B               	goto	l6482
 11331                           
 11332                           ;PS_2.c: 788: {
 11333                           ;PS_2.c: 789: return ScanCodeFunctionE0[Code];
 11334  1992  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11335  1993  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11336  1994  0084               	movwf	4
 11337  1995  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11338  1996  1803               	skipnc
 11339  1997  3E01               	addlw	1
 11340  1998  0085               	movwf	5
 11341  1999  0800               	movf	0,w	;code access
 11342                           
 11343                           ;PS_2.c: 790: }
 11344  199A  0008               	return
 11345  199B                     l6482:	
 11346                           
 11347                           ;PS_2.c: 791: else
 11348                           ;PS_2.c: 792: {
 11349                           ;PS_2.c: 793: return 0;
 11350  199B  3000               	movlw	0
 11351  199C  0008               	return
 11352  199D                     __end_of_Decode_Scan_Code_FunctionE0:	
 11353                           
 11354                           	psect	text24
 11355  0C98                     __ptext24:	
 11356 ;; *************** function _Decode_Scan_Code_Function *****************
 11357 ;; Defined at:
 11358 ;;		line 799 in file "PS_2.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;  Code            1    wreg     unsigned char 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;  Code            1    5[BANK0 ] unsigned char 
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      unsigned char 
 11365 ;; Registers used:
 11366 ;;		wreg, fsr0l, fsr0h, pclath
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        1 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    3
 11379 ;; This function calls:
 11380 ;;		Nothing
 11381 ;; This function is called by:
 11382 ;;		_PS_2_Update
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           
 11387                           ;psect for function _Decode_Scan_Code_Function
 11388  0C98                     _Decode_Scan_Code_Function:	
 11389                           
 11390                           ;incstack = 0
 11391                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11392                           ;Decode_Scan_Code_Function@Code stored from wreg
 11393  0C98  0020               	movlb	0	; select bank0
 11394  0C99  00A5               	movwf	Decode_Scan_Code_Function@Code
 11395                           
 11396                           ;PS_2.c: 801: if(Code <=131)
 11397  0C9A  3084               	movlw	132
 11398  0C9B  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11399  0C9C  1803               	skipnc
 11400  0C9D  2CA7               	goto	l6506
 11401                           
 11402                           ;PS_2.c: 802: {
 11403                           ;PS_2.c: 803: return ScanCodeFunctionNoE0[Code];
 11404  0C9E  0825               	movf	Decode_Scan_Code_Function@Code,w
 11405  0C9F  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11406  0CA0  0084               	movwf	4
 11407  0CA1  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11408  0CA2  1803               	skipnc
 11409  0CA3  3E01               	addlw	1
 11410  0CA4  0085               	movwf	5
 11411  0CA5  0800               	movf	0,w	;code access
 11412                           
 11413                           ;PS_2.c: 804: }
 11414  0CA6  0008               	return
 11415  0CA7                     l6506:	
 11416                           
 11417                           ;PS_2.c: 805: else
 11418                           ;PS_2.c: 806: {
 11419                           ;PS_2.c: 807: return 0;
 11420  0CA7  3000               	movlw	0
 11421  0CA8  0008               	return
 11422  0CA9                     __end_of_Decode_Scan_Code_Function:	
 11423                           
 11424                           	psect	text25
 11425  1977                     __ptext25:	
 11426 ;; *************** function _Decode_Scan_Code *****************
 11427 ;; Defined at:
 11428 ;;		line 755 in file "PS_2.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  Code            1    wreg     unsigned char 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  Code            1    5[BANK0 ] unsigned char 
 11433 ;; Return value:  Size  Location     Type
 11434 ;;                  1    wreg      unsigned char 
 11435 ;; Registers used:
 11436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;Total ram usage:        1 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    3
 11449 ;; This function calls:
 11450 ;;		Nothing
 11451 ;; This function is called by:
 11452 ;;		_PS_2_Update
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           
 11457                           ;psect for function _Decode_Scan_Code
 11458  1977                     _Decode_Scan_Code:	
 11459                           
 11460                           ;incstack = 0
 11461                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11462                           ;Decode_Scan_Code@Code stored from wreg
 11463  1977  0020               	movlb	0	; select bank0
 11464  1978  00A5               	movwf	Decode_Scan_Code@Code
 11465                           
 11466                           ;PS_2.c: 757: Code -= 13;
 11467  1979  300D               	movlw	13
 11468  197A  02A5               	subwf	Decode_Scan_Code@Code,f
 11469                           
 11470                           ;PS_2.c: 758: if(Code <=112)
 11471  197B  3071               	movlw	113
 11472  197C  0225               	subwf	Decode_Scan_Code@Code,w
 11473  197D  1803               	skipnc
 11474  197E  2988               	goto	l6494
 11475                           
 11476                           ;PS_2.c: 759: {
 11477                           ;PS_2.c: 760: return ScanCode[Code];
 11478  197F  0825               	movf	Decode_Scan_Code@Code,w
 11479  1980  3E84               	addlw	low (_ScanCode| (0+32768))
 11480  1981  0084               	movwf	4
 11481  1982  3088               	movlw	high (_ScanCode| (0+32768))
 11482  1983  1803               	skipnc
 11483  1984  3E01               	addlw	1
 11484  1985  0085               	movwf	5
 11485  1986  0800               	movf	0,w	;code access
 11486                           
 11487                           ;PS_2.c: 761: }
 11488  1987  0008               	return
 11489  1988                     l6494:	
 11490                           
 11491                           ;PS_2.c: 762: else
 11492                           ;PS_2.c: 763: {
 11493                           ;PS_2.c: 764: return 0;
 11494  1988  3000               	movlw	0
 11495  1989  0008               	return
 11496  198A                     __end_of_Decode_Scan_Code:	
 11497                           
 11498                           	psect	text26
 11499  1583                     __ptext26:	
 11500 ;; *************** function _Init_System *****************
 11501 ;; Defined at:
 11502 ;;		line 78 in file "user.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11507 ;;  Baud            4   65[BANK1 ] unsigned long 
 11508 ;;  temp            4   60[BANK1 ] unsigned long 
 11509 ;;  Parity          1   64[BANK1 ] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;		None               void
 11512 ;; Registers used:
 11513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:       74 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    6
 11526 ;; This function calls:
 11527 ;;		_InitUART
 11528 ;;		_ReadBaud
 11529 ;;		_UARTstringWAIT
 11530 ;;		_delayUS
 11531 ;;		_sprintf
 11532 ;; This function is called by:
 11533 ;;		_main
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           
 11538                           ;psect for function _Init_System
 11539  1583                     _Init_System:	
 11540                           
 11541                           ;user.c: 80: unsigned long temp =0;
 11542                           
 11543                           ;incstack = 0
 11544                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11545  1583  3000               	movlw	0
 11546  1584  0021               	movlb	1	; select bank1
 11547  1585  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11548  1586  3000               	movlw	0
 11549  1587  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11550  1588  3000               	movlw	0
 11551  1589  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11552  158A  3000               	movlw	0
 11553  158B  00DC               	movwf	Init_System@temp^(0+128)
 11554                           
 11555                           ;user.c: 81: unsigned long Baud =0;
 11556  158C  3000               	movlw	0
 11557  158D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11558  158E  3000               	movlw	0
 11559  158F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11560  1590  3000               	movlw	0
 11561  1591  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11562  1592  3000               	movlw	0
 11563  1593  00E1               	movwf	Init_System@Baud^(0+128)
 11564                           
 11565                           ;user.c: 82: unsigned char Parity =0;
 11566  1594  01E0               	clrf	Init_System@Parity^(0+128)
 11567                           
 11568                           ;user.c: 83: unsigned char buf[60];
 11569                           ;user.c: 85: temp = ReadBaud((0x1800 >> 5),0);
 11570  1595  30C0               	movlw	192
 11571  1596  0020               	movlb	0	; select bank0
 11572  1597  00B7               	movwf	ReadBaud@row
 11573  1598  3000               	movlw	0
 11574  1599  00B8               	movwf	ReadBaud@row+1
 11575  159A  01B9               	clrf	ReadBaud@column
 11576  159B  319E  265D  3195   	fcall	_ReadBaud
 11577  159E  0020               	movlb	0	; select bank0
 11578  159F  083A               	movf	?_ReadBaud+3,w
 11579  15A0  0021               	movlb	1	; select bank1
 11580  15A1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11581  15A2  0020               	movlb	0	; select bank0
 11582  15A3  0839               	movf	?_ReadBaud+2,w
 11583  15A4  0021               	movlb	1	; select bank1
 11584  15A5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11585  15A6  0020               	movlb	0	; select bank0
 11586  15A7  0838               	movf	?_ReadBaud+1,w
 11587  15A8  0021               	movlb	1	; select bank1
 11588  15A9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11589  15AA  0020               	movlb	0	; select bank0
 11590  15AB  0837               	movf	?_ReadBaud,w
 11591  15AC  0021               	movlb	1	; select bank1
 11592  15AD  00DC               	movwf	Init_System@temp^(0+128)
 11593                           
 11594                           ;user.c: 86: Baud = temp & 0x000FFFFF;
 11595  15AE  30FF               	movlw	255
 11596  15AF  055C               	andwf	Init_System@temp^(0+128),w
 11597  15B0  00E1               	movwf	Init_System@Baud^(0+128)
 11598  15B1  30FF               	movlw	255
 11599  15B2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11600  15B3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11601  15B4  300F               	movlw	15
 11602  15B5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11603  15B6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11604  15B7  3000               	movlw	0
 11605  15B8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11606  15B9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11607                           
 11608                           ;user.c: 87: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11609  15BA  085C               	movf	Init_System@temp^(0+128),w
 11610  15BB  0020               	movlb	0	; select bank0
 11611  15BC  00D4               	movwf	??_Init_System
 11612  15BD  0021               	movlb	1	; select bank1
 11613  15BE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11614  15BF  0020               	movlb	0	; select bank0
 11615  15C0  00D5               	movwf	??_Init_System+1
 11616  15C1  0021               	movlb	1	; select bank1
 11617  15C2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11618  15C3  0020               	movlb	0	; select bank0
 11619  15C4  00D6               	movwf	??_Init_System+2
 11620  15C5  0021               	movlb	1	; select bank1
 11621  15C6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11622  15C7  0020               	movlb	0	; select bank0
 11623  15C8  00D7               	movwf	??_Init_System+3
 11624  15C9  3014               	movlw	20
 11625  15CA                     u10055:	
 11626  15CA  36D7               	lsrf	??_Init_System+3,f
 11627  15CB  0CD6               	rrf	??_Init_System+2,f
 11628  15CC  0CD5               	rrf	??_Init_System+1,f
 11629  15CD  0CD4               	rrf	??_Init_System,f
 11630  15CE  0B89               	decfsz	9,f
 11631  15CF  2DCA               	goto	u10055
 11632  15D0  0854               	movf	??_Init_System,w
 11633  15D1  390F               	andlw	15
 11634  15D2  00D8               	movwf	??_Init_System+4
 11635  15D3  0858               	movf	??_Init_System+4,w
 11636  15D4  0021               	movlb	1	; select bank1
 11637  15D5  00E0               	movwf	Init_System@Parity^(0+128)
 11638                           
 11639                           ;user.c: 88: if(Baud <2400 || Baud > 115200)
 11640  15D6  3000               	movlw	0
 11641  15D7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11642  15D8  1D03               	skipz
 11643  15D9  2DE4               	goto	u10065
 11644  15DA  3000               	movlw	0
 11645  15DB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11646  15DC  1D03               	skipz
 11647  15DD  2DE4               	goto	u10065
 11648  15DE  3009               	movlw	9
 11649  15DF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11650  15E0  1D03               	skipz
 11651  15E1  2DE4               	goto	u10065
 11652  15E2  3060               	movlw	96
 11653  15E3  0261               	subwf	Init_System@Baud^(0+128),w
 11654  15E4                     u10065:	
 11655  15E4  1C03               	skipc
 11656  15E5  2DF6               	goto	l7220
 11657  15E6  3000               	movlw	0
 11658  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11659  15E8  1D03               	skipz
 11660  15E9  2DF4               	goto	u10075
 11661  15EA  3001               	movlw	1
 11662  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11663  15EC  1D03               	skipz
 11664  15ED  2DF4               	goto	u10075
 11665  15EE  30C2               	movlw	194
 11666  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11667  15F0  1D03               	skipz
 11668  15F1  2DF4               	goto	u10075
 11669  15F2  3001               	movlw	1
 11670  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11671  15F4                     u10075:	
 11672  15F4  1C03               	skipc
 11673  15F5  2DFF               	goto	l7224
 11674  15F6                     l7220:	
 11675                           
 11676                           ;user.c: 89: {
 11677                           ;user.c: 91: Baud = 9600;
 11678  15F6  3000               	movlw	0
 11679  15F7  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11680  15F8  3000               	movlw	0
 11681  15F9  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11682  15FA  3025               	movlw	37
 11683  15FB  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11684  15FC  3080               	movlw	128
 11685  15FD  00E1               	movwf	Init_System@Baud^(0+128)
 11686                           
 11687                           ;user.c: 92: Parity = 0;
 11688  15FE  01E0               	clrf	Init_System@Parity^(0+128)
 11689  15FF                     l7224:	
 11690                           
 11691                           ;user.c: 93: }
 11692                           ;user.c: 94: InitUART(Baud, Parity);
 11693  15FF  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11694  1600  0020               	movlb	0	; select bank0
 11695  1601  00B6               	movwf	InitUART@Baud+3
 11696  1602  0021               	movlb	1	; select bank1
 11697  1603  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11698  1604  0020               	movlb	0	; select bank0
 11699  1605  00B5               	movwf	InitUART@Baud+2
 11700  1606  0021               	movlb	1	; select bank1
 11701  1607  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11702  1608  0020               	movlb	0	; select bank0
 11703  1609  00B4               	movwf	InitUART@Baud+1
 11704  160A  0021               	movlb	1	; select bank1
 11705  160B  0861               	movf	Init_System@Baud^(0+128),w
 11706  160C  0020               	movlb	0	; select bank0
 11707  160D  00B3               	movwf	InitUART@Baud
 11708  160E  0021               	movlb	1	; select bank1
 11709  160F  0860               	movf	Init_System@Parity^(0+128),w
 11710  1610  0020               	movlb	0	; select bank0
 11711  1611  00D4               	movwf	??_Init_System
 11712  1612  0854               	movf	??_Init_System,w
 11713  1613  00B7               	movwf	InitUART@parity
 11714  1614  3191  21BC  3195   	fcall	_InitUART
 11715                           
 11716                           ;user.c: 95: UARTstringWAIT("\r\n");
 11717  1617  303D               	movlw	low ((STR_11+17)| (0+32768))
 11718  1618  0020               	movlb	0	; select bank0
 11719  1619  00B4               	movwf	UARTstringWAIT@data
 11720  161A  308C               	movlw	high ((STR_11+17)| (0+32768))
 11721  161B  00B5               	movwf	UARTstringWAIT@data+1
 11722  161C  319A  22F0  3195   	fcall	_UARTstringWAIT
 11723                           
 11724                           ;user.c: 96: delayUS(10000);
 11725  161F  3000               	movlw	0
 11726  1620  0020               	movlb	0	; select bank0
 11727  1621  00A8               	movwf	delayUS@US+3
 11728  1622  3000               	movlw	0
 11729  1623  00A7               	movwf	delayUS@US+2
 11730  1624  3027               	movlw	39
 11731  1625  00A6               	movwf	delayUS@US+1
 11732  1626  3010               	movlw	16
 11733  1627  00A5               	movwf	delayUS@US
 11734  1628  319B  2323  3195   	fcall	_delayUS
 11735                           
 11736                           ;user.c: 97: if(Parity)
 11737  162B  0021               	movlb	1	; select bank1
 11738  162C  0860               	movf	Init_System@Parity^(0+128),w
 11739  162D  1903               	btfsc	3,2
 11740  162E  2E61               	goto	l7246
 11741                           
 11742                           ;user.c: 98: {
 11743                           ;user.c: 99: switch (Parity)
 11744  162F  2E54               	goto	l7244
 11745  1630                     l7234:	
 11746                           ;user.c: 100: {
 11747                           ;user.c: 101: case 1:
 11748                           
 11749                           
 11750                           ;user.c: 102: sprintf(buf,"Baud is %lu with Odd parity bit\r\n",Baud);
 11751  1630  30A0               	movlw	low Init_System@buf
 11752  1631  0020               	movlb	0	; select bank0
 11753  1632  00BD               	movwf	sprintf@sp
 11754  1633  3000               	movlw	high Init_System@buf
 11755  1634  00BE               	movwf	sprintf@sp+1
 11756  1635  303F               	movlw	low (STR_13| (0+32768))
 11757  1636  00BF               	movwf	sprintf@f
 11758  1637  308B               	movlw	high (STR_13| (0+32768))
 11759  1638  2E69               	goto	L16
 11760  1639                     l7236:	
 11761                           ;user.c: 104: case 2:
 11762                           
 11763                           ;user.c: 103: break;
 11764                           
 11765                           
 11766                           ;user.c: 105: sprintf(buf,"Baud is %lu with Even parity bit\r\n",Baud);
 11767  1639  30A0               	movlw	low Init_System@buf
 11768  163A  0020               	movlb	0	; select bank0
 11769  163B  00BD               	movwf	sprintf@sp
 11770  163C  3000               	movlw	high Init_System@buf
 11771  163D  00BE               	movwf	sprintf@sp+1
 11772  163E  30F9               	movlw	low (STR_14| (0+32768))
 11773  163F  00BF               	movwf	sprintf@f
 11774  1640  308A               	movlw	high (STR_14| (0+32768))
 11775  1641  2E69               	goto	L16
 11776  1642                     l7238:	
 11777                           ;user.c: 107: case 3:
 11778                           
 11779                           ;user.c: 106: break;
 11780                           
 11781                           
 11782                           ;user.c: 108: sprintf(buf,"Baud is %lu with Mark bit\r\n",Baud);
 11783  1642  30A0               	movlw	low Init_System@buf
 11784  1643  0020               	movlb	0	; select bank0
 11785  1644  00BD               	movwf	sprintf@sp
 11786  1645  3000               	movlw	high Init_System@buf
 11787  1646  00BE               	movwf	sprintf@sp+1
 11788  1647  309F               	movlw	low (STR_15| (0+32768))
 11789  1648  00BF               	movwf	sprintf@f
 11790  1649  308B               	movlw	high (STR_15| (0+32768))
 11791  164A  2E69               	goto	L16
 11792  164B                     l7240:	
 11793                           ;user.c: 110: default:
 11794                           
 11795                           ;user.c: 109: break;
 11796                           
 11797                           
 11798                           ;user.c: 111: sprintf(buf,"Baud is %lu with Space bit\r\n",Baud);
 11799  164B  30A0               	movlw	low Init_System@buf
 11800  164C  0020               	movlb	0	; select bank0
 11801  164D  00BD               	movwf	sprintf@sp
 11802  164E  3000               	movlw	high Init_System@buf
 11803  164F  00BE               	movwf	sprintf@sp+1
 11804  1650  3082               	movlw	low (STR_16| (0+32768))
 11805  1651  00BF               	movwf	sprintf@f
 11806  1652  308B               	movlw	high (STR_16| (0+32768))
 11807  1653  2E69               	goto	L16
 11808  1654                     l7244:	
 11809                           ;user.c: 113: }
 11810                           
 11811                           ;user.c: 112: break;
 11812                           
 11813  1654  0021               	movlb	1	; select bank1
 11814  1655  0860               	movf	Init_System@Parity^(0+128),w
 11815                           
 11816                           ; Switch size 1, requested type "space"
 11817                           ; Number of cases is 3, Range of values is 1 to 3
 11818                           ; switch strategies available:
 11819                           ; Name         Instructions Cycles
 11820                           ; simple_byte           10     6 (average)
 11821                           ; direct_byte           15     9 (fixed)
 11822                           ; jumptable            263     9 (fixed)
 11823                           ;	Chosen strategy is simple_byte
 11824  1656  3A01               	xorlw	1	; case 1
 11825  1657  1903               	skipnz
 11826  1658  2E30               	goto	l7234
 11827  1659  3A03               	xorlw	3	; case 2
 11828  165A  1903               	skipnz
 11829  165B  2E39               	goto	l7236
 11830  165C  3A01               	xorlw	1	; case 3
 11831  165D  1903               	skipnz
 11832  165E  2E42               	goto	l7238
 11833  165F  2E4B               	goto	l7240
 11834                           
 11835                           ;user.c: 114: }
 11836  1660  2E7D               	goto	l7248
 11837  1661                     l7246:	
 11838                           
 11839                           ;user.c: 115: else
 11840                           ;user.c: 116: {
 11841                           ;user.c: 117: sprintf(buf,"Baud is %lu with no parity bit\r\n",Baud);
 11842  1661  30A0               	movlw	low Init_System@buf
 11843  1662  0020               	movlb	0	; select bank0
 11844  1663  00BD               	movwf	sprintf@sp
 11845  1664  3000               	movlw	high Init_System@buf
 11846  1665  00BE               	movwf	sprintf@sp+1
 11847  1666  3061               	movlw	low (STR_17| (0+32768))
 11848  1667  00BF               	movwf	sprintf@f
 11849  1668  308B               	movlw	high (STR_17| (0+32768))
 11850  1669                     L16:	
 11851  1669  00C0               	movwf	sprintf@f+1
 11852  166A  0021               	movlb	1	; select bank1
 11853  166B  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11854  166C  0020               	movlb	0	; select bank0
 11855  166D  00C4               	movwf	?_sprintf+7
 11856  166E  0021               	movlb	1	; select bank1
 11857  166F  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11858  1670  0020               	movlb	0	; select bank0
 11859  1671  00C3               	movwf	?_sprintf+6
 11860  1672  0021               	movlb	1	; select bank1
 11861  1673  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11862  1674  0020               	movlb	0	; select bank0
 11863  1675  00C2               	movwf	?_sprintf+5
 11864  1676  0021               	movlb	1	; select bank1
 11865  1677  0861               	movf	Init_System@Baud^(0+128),w
 11866  1678  0020               	movlb	0	; select bank0
 11867  1679  00C1               	movwf	?_sprintf+4
 11868  167A  3194  248F  3195   	fcall	_sprintf
 11869  167D                     l7248:	
 11870                           
 11871                           ;user.c: 118: }
 11872                           ;user.c: 119: UARTstringWAIT(buf);
 11873  167D  30A0               	movlw	low Init_System@buf
 11874  167E  0020               	movlb	0	; select bank0
 11875  167F  00B4               	movwf	UARTstringWAIT@data
 11876  1680  3000               	movlw	high Init_System@buf
 11877  1681  00B5               	movwf	UARTstringWAIT@data+1
 11878  1682  319A  22F0  3195   	fcall	_UARTstringWAIT
 11879                           
 11880                           ;user.c: 120: delayUS(10000);
 11881  1685  3000               	movlw	0
 11882  1686  0020               	movlb	0	; select bank0
 11883  1687  00A8               	movwf	delayUS@US+3
 11884  1688  3000               	movlw	0
 11885  1689  00A7               	movwf	delayUS@US+2
 11886  168A  3027               	movlw	39
 11887  168B  00A6               	movwf	delayUS@US+1
 11888  168C  3010               	movlw	16
 11889  168D  00A5               	movwf	delayUS@US
 11890  168E  319B  2323         	fcall	_delayUS
 11891                           
 11892                           ;user.c: 122: INTCON |= 0x08;
 11893  1690  158B               	bsf	11,3	;volatile
 11894                           
 11895                           ;user.c: 123: INTCONbits.GIE = 1;
 11896  1691  178B               	bsf	11,7	;volatile
 11897  1692  0008               	return
 11898  1693                     __end_of_Init_System:	
 11899                           
 11900                           	psect	text27
 11901  148F                     __ptext27:	
 11902 ;; *************** function _sprintf *****************
 11903 ;; Defined at:
 11904 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11907 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11908 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11909 ;;		 -> STR_33(45), STR_32(41), STR_31(40), STR_30(47), 
 11910 ;;		 -> STR_29(46), STR_24(33), STR_23(29), STR_22(28), 
 11911 ;;		 -> STR_21(35), STR_20(34), STR_17(33), STR_16(29), 
 11912 ;;		 -> STR_15(28), STR_14(35), STR_13(34), 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  _val            4   46[BANK0 ] struct .
 11915 ;;  prec            2   44[BANK0 ] int 
 11916 ;;  c               1   51[BANK0 ] char 
 11917 ;;  ap              1   50[BANK0 ] PTR void [1]
 11918 ;;		 -> ?_sprintf(2), 
 11919 ;;  flag            1   43[BANK0 ] unsigned char 
 11920 ;; Return value:  Size  Location     Type
 11921 ;;                  2   29[BANK0 ] int 
 11922 ;; Registers used:
 11923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11929 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;Total ram usage:       23 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:    4
 11936 ;; This function calls:
 11937 ;;		___lldiv
 11938 ;;		___llmod
 11939 ;; This function is called by:
 11940 ;;		_Init_System
 11941 ;;		_SetBaud
 11942 ;;		_PS_2_Update
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           
 11947                           ;psect for function _sprintf
 11948  148F                     _sprintf:	
 11949                           
 11950                           ;doprnt.c: 494: va_list ap;
 11951                           ;doprnt.c: 499: signed char c;
 11952                           ;doprnt.c: 504: int prec;
 11953                           ;doprnt.c: 508: unsigned char flag;
 11954                           ;doprnt.c: 527: union {
 11955                           ;doprnt.c: 528: unsigned long _val;
 11956                           ;doprnt.c: 529: struct {
 11957                           ;doprnt.c: 530: const char * _cp;
 11958                           ;doprnt.c: 531: unsigned _len;
 11959                           ;doprnt.c: 532: } _str;
 11960                           ;doprnt.c: 533: } _val;
 11961                           ;doprnt.c: 542: *ap = __va_start();
 11962                           
 11963                           ;incstack = 0
 11964                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11965  148F  3041               	movlw	(?_sprintf+4)& (0+255)
 11966  1490  0020               	movlb	0	; select bank0
 11967  1491  00C5               	movwf	??_sprintf
 11968  1492  0845               	movf	??_sprintf,w
 11969  1493  00D2               	movwf	sprintf@ap
 11970  1494                     l6182:	
 11971                           ;doprnt.c: 545: while(c = *f++) {
 11972                           
 11973  1494  0840               	movf	sprintf@f+1,w
 11974  1495  00C6               	movwf	??_sprintf+1
 11975  1496  083F               	movf	sprintf@f,w
 11976  1497  00C5               	movwf	??_sprintf
 11977  1498  0ABF               	incf	sprintf@f,f
 11978  1499  1903               	skipnz
 11979  149A  0AC0               	incf	sprintf@f+1,f
 11980  149B  0845               	movf	??_sprintf,w
 11981  149C  0084               	movwf	4
 11982  149D  0846               	movf	??_sprintf+1,w
 11983  149E  0085               	movwf	5
 11984  149F  0800               	movf	0,w	;code access
 11985  14A0  00C7               	movwf	??_sprintf+2
 11986  14A1  0847               	movf	??_sprintf+2,w
 11987  14A2  00D3               	movwf	sprintf@c
 11988  14A3  08D3               	movf	sprintf@c,f
 11989  14A4  1903               	btfsc	3,2
 11990  14A5  2D7D               	goto	l6184
 11991                           
 11992                           ;doprnt.c: 547: if(c != '%')
 11993  14A6  0853               	movf	sprintf@c,w
 11994  14A7  3A25               	xorlw	37
 11995  14A8  1903               	skipnz
 11996  14A9  2CB5               	goto	l6142
 11997                           
 11998                           ;doprnt.c: 549: {
 11999                           ;doprnt.c: 550: ((*sp++ = (c)));
 12000  14AA  083D               	movf	sprintf@sp,w
 12001  14AB  0086               	movwf	6
 12002  14AC  083E               	movf	sprintf@sp+1,w
 12003  14AD  0087               	movwf	7
 12004  14AE  0853               	movf	sprintf@c,w
 12005  14AF  0081               	movwf	1
 12006  14B0  3001               	movlw	1
 12007  14B1  07BD               	addwf	sprintf@sp,f
 12008  14B2  3000               	movlw	0
 12009  14B3  3DBE               	addwfc	sprintf@sp+1,f
 12010                           
 12011                           ;doprnt.c: 551: continue;
 12012  14B4  2C94               	goto	l6182
 12013  14B5                     l6142:	
 12014                           
 12015                           ;doprnt.c: 552: }
 12016                           ;doprnt.c: 557: flag = 0;
 12017  14B5  01CB               	clrf	sprintf@flag
 12018                           
 12019                           ;doprnt.c: 644: switch(c = *f++) {
 12020                           
 12021                           ;doprnt.c: 642: loop:
 12022  14B6  2CBE               	goto	l6148
 12023  14B7                     l1094:	
 12024                           ;doprnt.c: 650: case 'l':
 12025                           
 12026                           ;doprnt.c: 647: goto alldone;
 12027                           
 12028                           ;doprnt.c: 646: case 0:
 12029                           
 12030                           
 12031                           ;doprnt.c: 652: flag |= 0x10;
 12032  14B7  164B               	bsf	sprintf@flag,4
 12033                           
 12034                           ;doprnt.c: 653: goto loop;
 12035  14B8  2CBE               	goto	l6148
 12036  14B9                     l6144:	
 12037                           ;doprnt.c: 826: case 'u':
 12038                           
 12039                           ;doprnt.c: 822: continue;
 12040                           
 12041                           ;doprnt.c: 811: default:
 12042                           
 12043                           
 12044                           ;doprnt.c: 827: flag |= 0xC0;
 12045  14B9  30C0               	movlw	192
 12046  14BA  00C5               	movwf	??_sprintf
 12047  14BB  0845               	movf	??_sprintf,w
 12048  14BC  04CB               	iorwf	sprintf@flag,f
 12049                           
 12050                           ;doprnt.c: 831: }
 12051                           
 12052                           ;doprnt.c: 828: break;
 12053  14BD  2CD5               	goto	l1097
 12054  14BE                     l6148:	
 12055  14BE  0840               	movf	sprintf@f+1,w
 12056  14BF  00C6               	movwf	??_sprintf+1
 12057  14C0  083F               	movf	sprintf@f,w
 12058  14C1  00C5               	movwf	??_sprintf
 12059  14C2  0ABF               	incf	sprintf@f,f
 12060  14C3  1903               	skipnz
 12061  14C4  0AC0               	incf	sprintf@f+1,f
 12062  14C5  0845               	movf	??_sprintf,w
 12063  14C6  0084               	movwf	4
 12064  14C7  0846               	movf	??_sprintf+1,w
 12065  14C8  0085               	movwf	5
 12066  14C9  0800               	movf	0,w	;code access
 12067  14CA  00D3               	movwf	sprintf@c
 12068                           
 12069                           ; Switch size 1, requested type "space"
 12070                           ; Number of cases is 3, Range of values is 0 to 117
 12071                           ; switch strategies available:
 12072                           ; Name         Instructions Cycles
 12073                           ; simple_byte           10     6 (average)
 12074                           ; direct_byte          242     6 (fixed)
 12075                           ; jumptable            260     6 (fixed)
 12076                           ;	Chosen strategy is simple_byte
 12077  14CB  3A00               	xorlw	0	; case 0
 12078  14CC  1903               	skipnz
 12079  14CD  2D7D               	goto	l6184
 12080  14CE  3A6C               	xorlw	108	; case 108
 12081  14CF  1903               	skipnz
 12082  14D0  2CB7               	goto	l1094
 12083  14D1  3A19               	xorlw	25	; case 117
 12084  14D2  1903               	skipnz
 12085  14D3  2CB9               	goto	l6144
 12086  14D4  2C94               	goto	l6182
 12087  14D5                     l1097:	
 12088                           
 12089                           ;doprnt.c: 1282: {
 12090                           ;doprnt.c: 1290: if(flag & 0x10)
 12091  14D5  1E4B               	btfss	sprintf@flag,4
 12092  14D6  2CE4               	goto	l6154
 12093                           
 12094                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12095  14D7  0852               	movf	sprintf@ap,w
 12096  14D8  0086               	movwf	6
 12097  14D9  0187               	clrf	7
 12098  14DA  3F40               	moviw [0]fsr1
 12099  14DB  00CE               	movwf	sprintf@_val
 12100  14DC  3F41               	moviw [1]fsr1
 12101  14DD  00CF               	movwf	sprintf@_val+1
 12102  14DE  3F42               	moviw [2]fsr1
 12103  14DF  00D0               	movwf	sprintf@_val+2
 12104  14E0  3F43               	moviw [3]fsr1
 12105  14E1  00D1               	movwf	sprintf@_val+3
 12106  14E2  3004               	movlw	4
 12107  14E3  2CF2               	goto	L17
 12108  14E4                     l6154:	
 12109                           
 12110                           ;doprnt.c: 1292: else
 12111                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12112  14E4  0852               	movf	sprintf@ap,w
 12113  14E5  0086               	movwf	6
 12114  14E6  0187               	clrf	7
 12115  14E7  3F40               	moviw [0]fsr1
 12116  14E8  00C5               	movwf	??_sprintf
 12117  14E9  3F41               	moviw [1]fsr1
 12118  14EA  00C6               	movwf	??_sprintf+1
 12119  14EB  0845               	movf	??_sprintf,w
 12120  14EC  00CE               	movwf	sprintf@_val
 12121  14ED  0846               	movf	??_sprintf+1,w
 12122  14EE  00CF               	movwf	sprintf@_val+1
 12123  14EF  01D0               	clrf	sprintf@_val+2
 12124  14F0  01D1               	clrf	sprintf@_val+3
 12125  14F1  3002               	movlw	2
 12126  14F2                     L17:	
 12127  14F2  00C5               	movwf	??_sprintf
 12128  14F3  0845               	movf	??_sprintf,w
 12129  14F4  07D2               	addwf	sprintf@ap,f
 12130                           
 12131                           ;doprnt.c: 1296: }
 12132                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12133  14F5  01D3               	clrf	sprintf@c
 12134  14F6  0AD3               	incf	sprintf@c,f
 12135  14F7  0853               	movf	sprintf@c,w
 12136  14F8  3A0A               	xorlw	10
 12137  14F9  1903               	btfsc	3,2
 12138  14FA  2D28               	goto	l6172
 12139  14FB                     l6164:	
 12140                           
 12141                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12142  14FB  0853               	movf	sprintf@c,w
 12143  14FC  00C5               	movwf	??_sprintf
 12144  14FD  01C6               	clrf	??_sprintf+1
 12145  14FE  35C5               	lslf	??_sprintf,f
 12146  14FF  0DC6               	rlf	??_sprintf+1,f
 12147  1500  35C5               	lslf	??_sprintf,f
 12148  1501  0DC6               	rlf	??_sprintf+1,f
 12149  1502  30D3               	movlw	low (_dpowers| (0+32768))
 12150  1503  0745               	addwf	??_sprintf,w
 12151  1504  0084               	movwf	4
 12152  1505  3089               	movlw	high (_dpowers| (0+32768))
 12153  1506  3D46               	addwfc	??_sprintf+1,w
 12154  1507  0085               	movwf	5
 12155  1508  3F00               	moviw [0]fsr0
 12156  1509  00C7               	movwf	??_sprintf+2
 12157  150A  3F01               	moviw [1]fsr0
 12158  150B  00C8               	movwf	??_sprintf+3
 12159  150C  3F02               	moviw [2]fsr0
 12160  150D  00C9               	movwf	??_sprintf+4
 12161  150E  3F03               	moviw [3]fsr0
 12162  150F  00CA               	movwf	??_sprintf+5
 12163  1510  084A               	movf	??_sprintf+5,w
 12164  1511  0251               	subwf	sprintf@_val+3,w
 12165  1512  1D03               	skipz
 12166  1513  2D1E               	goto	u7925
 12167  1514  0849               	movf	??_sprintf+4,w
 12168  1515  0250               	subwf	sprintf@_val+2,w
 12169  1516  1D03               	skipz
 12170  1517  2D1E               	goto	u7925
 12171  1518  0848               	movf	??_sprintf+3,w
 12172  1519  024F               	subwf	sprintf@_val+1,w
 12173  151A  1D03               	skipz
 12174  151B  2D1E               	goto	u7925
 12175  151C  0847               	movf	??_sprintf+2,w
 12176  151D  024E               	subwf	sprintf@_val,w
 12177  151E                     u7925:	
 12178  151E  1C03               	btfss	3,0
 12179  151F  2D28               	goto	l6172
 12180                           
 12181                           ;doprnt.c: 1316: break;
 12182  1520  3001               	movlw	1
 12183  1521  00C5               	movwf	??_sprintf
 12184  1522  0845               	movf	??_sprintf,w
 12185  1523  07D3               	addwf	sprintf@c,f
 12186  1524  0853               	movf	sprintf@c,w
 12187  1525  3A0A               	xorlw	10
 12188  1526  1D03               	skipz
 12189  1527  2CFB               	goto	l6164
 12190  1528                     l6172:	
 12191                           
 12192                           ;doprnt.c: 1431: {
 12193                           ;doprnt.c: 1478: }
 12194                           ;doprnt.c: 1481: prec = c;
 12195  1528  0853               	movf	sprintf@c,w
 12196  1529  00CC               	movwf	sprintf@prec
 12197  152A  01CD               	clrf	sprintf@prec+1
 12198  152B  1BCC               	btfsc	sprintf@prec,7
 12199  152C  03CD               	decf	sprintf@prec+1,f
 12200  152D                     l6180:	
 12201                           ;doprnt.c: 1483: while(prec--) {
 12202                           
 12203  152D  30FF               	movlw	255
 12204  152E  07CC               	addwf	sprintf@prec,f
 12205  152F  30FF               	movlw	255
 12206  1530  3DCD               	addwfc	sprintf@prec+1,f
 12207  1531  30FF               	movlw	255
 12208  1532  064D               	xorwf	sprintf@prec+1,w
 12209  1533  1D03               	skipz
 12210  1534  2D37               	goto	u7945
 12211  1535  30FF               	movlw	255
 12212  1536  064C               	xorwf	sprintf@prec,w
 12213  1537                     u7945:	
 12214  1537  1903               	btfsc	3,2
 12215  1538  2C94               	goto	l6182
 12216                           
 12217                           ;doprnt.c: 1487: {
 12218                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12219  1539  3000               	movlw	0
 12220  153A  00B6               	movwf	___llmod@divisor+3
 12221  153B  3000               	movlw	0
 12222  153C  00B5               	movwf	___llmod@divisor+2
 12223  153D  3000               	movlw	0
 12224  153E  00B4               	movwf	___llmod@divisor+1
 12225  153F  300A               	movlw	10
 12226  1540  00B3               	movwf	___llmod@divisor
 12227  1541  084D               	movf	sprintf@prec+1,w
 12228  1542  0085               	movwf	5
 12229  1543  084C               	movf	sprintf@prec,w
 12230  1544  0084               	movwf	4
 12231  1545  3584               	lslf	4,f
 12232  1546  0D85               	rlf	5,f
 12233  1547  3584               	lslf	4,f
 12234  1548  0D85               	rlf	5,f
 12235  1549  30D3               	movlw	low (_dpowers| (0+32768))
 12236  154A  0784               	addwf	4,f
 12237  154B  3089               	movlw	high (_dpowers| (0+32768))
 12238  154C  3D85               	addwfc	5,f
 12239  154D  3F00               	moviw [0]fsr0
 12240  154E  00A5               	movwf	___lldiv@divisor
 12241  154F  3F01               	moviw [1]fsr0
 12242  1550  00A6               	movwf	___lldiv@divisor+1
 12243  1551  3F02               	moviw [2]fsr0
 12244  1552  00A7               	movwf	___lldiv@divisor+2
 12245  1553  3F03               	moviw [3]fsr0
 12246  1554  00A8               	movwf	___lldiv@divisor+3
 12247  1555  0851               	movf	sprintf@_val+3,w
 12248  1556  00AC               	movwf	___lldiv@dividend+3
 12249  1557  0850               	movf	sprintf@_val+2,w
 12250  1558  00AB               	movwf	___lldiv@dividend+2
 12251  1559  084F               	movf	sprintf@_val+1,w
 12252  155A  00AA               	movwf	___lldiv@dividend+1
 12253  155B  084E               	movf	sprintf@_val,w
 12254  155C  00A9               	movwf	___lldiv@dividend
 12255  155D  319D  2502  3194   	fcall	___lldiv
 12256  1560  0020               	movlb	0	; select bank0
 12257  1561  0828               	movf	?___lldiv+3,w
 12258  1562  00BA               	movwf	___llmod@dividend+3
 12259  1563  0827               	movf	?___lldiv+2,w
 12260  1564  00B9               	movwf	___llmod@dividend+2
 12261  1565  0826               	movf	?___lldiv+1,w
 12262  1566  00B8               	movwf	___llmod@dividend+1
 12263  1567  0825               	movf	?___lldiv,w
 12264  1568  00B7               	movwf	___llmod@dividend
 12265  1569  319B  23D6  3194   	fcall	___llmod
 12266  156C  0020               	movlb	0	; select bank0
 12267  156D  0833               	movf	?___llmod,w
 12268  156E  3E30               	addlw	48
 12269  156F  00C5               	movwf	??_sprintf
 12270  1570  0845               	movf	??_sprintf,w
 12271  1571  00D3               	movwf	sprintf@c
 12272                           
 12273                           ;doprnt.c: 1532: }
 12274                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12275  1572  083D               	movf	sprintf@sp,w
 12276  1573  0086               	movwf	6
 12277  1574  083E               	movf	sprintf@sp+1,w
 12278  1575  0087               	movwf	7
 12279  1576  0853               	movf	sprintf@c,w
 12280  1577  0081               	movwf	1
 12281  1578  3001               	movlw	1
 12282  1579  07BD               	addwf	sprintf@sp,f
 12283  157A  3000               	movlw	0
 12284  157B  3DBE               	addwfc	sprintf@sp+1,f
 12285  157C  2D2D               	goto	l6180
 12286  157D                     l6184:	
 12287                           ;doprnt.c: 1534: }
 12288                           ;doprnt.c: 1542: }
 12289                           ;doprnt.c: 1544: alldone:
 12290                           
 12291                           
 12292                           ;doprnt.c: 1547: *sp = 0;
 12293  157D  083D               	movf	sprintf@sp,w
 12294  157E  0086               	movwf	6
 12295  157F  083E               	movf	sprintf@sp+1,w
 12296  1580  0087               	movwf	7
 12297  1581  0181               	clrf	1
 12298  1582  0008               	return
 12299  1583                     __end_of_sprintf:	
 12300                           ;doprnt.c: 1549: return 0;
 12301                           ;	Return value of _sprintf is never used
 12302                           
 12303                           
 12304                           	psect	text28
 12305  1BD6                     __ptext28:	
 12306 ;; *************** function ___llmod *****************
 12307 ;; Defined at:
 12308 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;  divisor         4   19[BANK0 ] unsigned long 
 12311 ;;  dividend        4   23[BANK0 ] unsigned long 
 12312 ;; Auto vars:     Size  Location     Type
 12313 ;;  counter         1   28[BANK0 ] unsigned char 
 12314 ;; Return value:  Size  Location     Type
 12315 ;;                  4   19[BANK0 ] unsigned long 
 12316 ;; Registers used:
 12317 ;;		wreg, status,2, status,0
 12318 ;; Tracked objects:
 12319 ;;		On entry : 0/0
 12320 ;;		On exit  : 0/0
 12321 ;;		Unchanged: 0/0
 12322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12323 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;Total ram usage:       10 bytes
 12328 ;; Hardware stack levels used:    1
 12329 ;; Hardware stack levels required when called:    3
 12330 ;; This function calls:
 12331 ;;		Nothing
 12332 ;; This function is called by:
 12333 ;;		_sprintf
 12334 ;; This function uses a non-reentrant model
 12335 ;;
 12336                           
 12337                           
 12338                           ;psect for function ___llmod
 12339  1BD6                     ___llmod:	
 12340                           
 12341                           ;incstack = 0
 12342                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12343  1BD6  0020               	movlb	0	; select bank0
 12344  1BD7  0836               	movf	___llmod@divisor+3,w
 12345  1BD8  0435               	iorwf	___llmod@divisor+2,w
 12346  1BD9  0434               	iorwf	___llmod@divisor+1,w
 12347  1BDA  0433               	iorwf	___llmod@divisor,w
 12348  1BDB  1903               	skipnz
 12349  1BDC  2C10               	goto	l6012
 12350  1BDD  01BC               	clrf	___llmod@counter
 12351  1BDE  0ABC               	incf	___llmod@counter,f
 12352  1BDF                     l6002:	
 12353  1BDF  1BB6               	btfsc	___llmod@divisor+3,7
 12354  1BE0  2BED               	goto	l6004
 12355  1BE1  3001               	movlw	1
 12356  1BE2                     u7735:	
 12357  1BE2  35B3               	lslf	___llmod@divisor,f
 12358  1BE3  0DB4               	rlf	___llmod@divisor+1,f
 12359  1BE4  0DB5               	rlf	___llmod@divisor+2,f
 12360  1BE5  0DB6               	rlf	___llmod@divisor+3,f
 12361  1BE6  0B89               	decfsz	9,f
 12362  1BE7  2BE2               	goto	u7735
 12363  1BE8  3001               	movlw	1
 12364  1BE9  00BB               	movwf	??___llmod
 12365  1BEA  083B               	movf	??___llmod,w
 12366  1BEB  07BC               	addwf	___llmod@counter,f
 12367  1BEC  2BDF               	goto	l6002
 12368  1BED                     l6004:	
 12369  1BED  0836               	movf	___llmod@divisor+3,w
 12370  1BEE  023A               	subwf	___llmod@dividend+3,w
 12371  1BEF  1D03               	skipz
 12372  1BF0  2BFB               	goto	u7755
 12373  1BF1  0835               	movf	___llmod@divisor+2,w
 12374  1BF2  0239               	subwf	___llmod@dividend+2,w
 12375  1BF3  1D03               	skipz
 12376  1BF4  2BFB               	goto	u7755
 12377  1BF5  0834               	movf	___llmod@divisor+1,w
 12378  1BF6  0238               	subwf	___llmod@dividend+1,w
 12379  1BF7  1D03               	skipz
 12380  1BF8  2BFB               	goto	u7755
 12381  1BF9  0833               	movf	___llmod@divisor,w
 12382  1BFA  0237               	subwf	___llmod@dividend,w
 12383  1BFB                     u7755:	
 12384  1BFB  1C03               	skipc
 12385  1BFC  2C05               	goto	l6008
 12386  1BFD  0833               	movf	___llmod@divisor,w
 12387  1BFE  02B7               	subwf	___llmod@dividend,f
 12388  1BFF  0834               	movf	___llmod@divisor+1,w
 12389  1C00  3BB8               	subwfb	___llmod@dividend+1,f
 12390  1C01  0835               	movf	___llmod@divisor+2,w
 12391  1C02  3BB9               	subwfb	___llmod@dividend+2,f
 12392  1C03  0836               	movf	___llmod@divisor+3,w
 12393  1C04  3BBA               	subwfb	___llmod@dividend+3,f
 12394  1C05                     l6008:	
 12395  1C05  3001               	movlw	1
 12396  1C06                     u7765:	
 12397  1C06  36B6               	lsrf	___llmod@divisor+3,f
 12398  1C07  0CB5               	rrf	___llmod@divisor+2,f
 12399  1C08  0CB4               	rrf	___llmod@divisor+1,f
 12400  1C09  0CB3               	rrf	___llmod@divisor,f
 12401  1C0A  0B89               	decfsz	9,f
 12402  1C0B  2C06               	goto	u7765
 12403  1C0C  3001               	movlw	1
 12404  1C0D  02BC               	subwf	___llmod@counter,f
 12405  1C0E  1D03               	btfss	3,2
 12406  1C0F  2BED               	goto	l6004
 12407  1C10                     l6012:	
 12408  1C10  083A               	movf	___llmod@dividend+3,w
 12409  1C11  00B6               	movwf	?___llmod+3
 12410  1C12  0839               	movf	___llmod@dividend+2,w
 12411  1C13  00B5               	movwf	?___llmod+2
 12412  1C14  0838               	movf	___llmod@dividend+1,w
 12413  1C15  00B4               	movwf	?___llmod+1
 12414  1C16  0837               	movf	___llmod@dividend,w
 12415  1C17  00B3               	movwf	?___llmod
 12416  1C18  0008               	return
 12417  1C19                     __end_of___llmod:	
 12418                           
 12419                           	psect	text29
 12420  1AF0                     __ptext29:	
 12421 ;; *************** function _UARTstringWAIT *****************
 12422 ;; Defined at:
 12423 ;;		line 273 in file "UART.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12426 ;;		 -> STR_34(20), PS_2_Update@buf(60), STR_28(3), STR_27(35), 
 12427 ;;		 -> STR_26(18), STR_25(3), SetBaud@buf(50), STR_19(15), 
 12428 ;;		 -> STR_18(3), Init_System@buf(60), STR_12(3), STR_11(20), 
 12429 ;;		 -> STR_10(19), STR_9(17), STR_8(22), STR_7(21), 
 12430 ;;		 -> STR_6(24), STR_5(35), STR_4(3), Version(4), 
 12431 ;;		 -> STR_3(19), STR_2(26), STR_1(3), 
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;		None
 12434 ;; Return value:  Size  Location     Type
 12435 ;;		None               void
 12436 ;; Registers used:
 12437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12443 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;Total ram usage:        4 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    5
 12450 ;; This function calls:
 12451 ;;		_UARTchar
 12452 ;;		_delayUS
 12453 ;; This function is called by:
 12454 ;;		_main
 12455 ;;		_Init_System
 12456 ;;		_SetBaud
 12457 ;;		_PS_2_Update
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _UARTstringWAIT
 12463  1AF0                     _UARTstringWAIT:	
 12464  1AF0                     l517:	
 12465                           ;incstack = 0
 12466                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12467                           ;UART.c: 275: do
 12468                           
 12469                           
 12470                           ;UART.c: 276: {
 12471                           ;UART.c: 277: delayUS(5000);
 12472  1AF0  3000               	movlw	0
 12473  1AF1  0020               	movlb	0	; select bank0
 12474  1AF2  00A8               	movwf	delayUS@US+3
 12475  1AF3  3000               	movlw	0
 12476  1AF4  00A7               	movwf	delayUS@US+2
 12477  1AF5  3013               	movlw	19
 12478  1AF6  00A6               	movwf	delayUS@US+1
 12479  1AF7  3088               	movlw	136
 12480  1AF8  00A5               	movwf	delayUS@US
 12481  1AF9  319B  2323  319A   	fcall	_delayUS
 12482                           
 12483                           ;UART.c: 278: if(*data != 0)
 12484  1AFC  0020               	movlb	0	; select bank0
 12485  1AFD  0834               	movf	UARTstringWAIT@data,w
 12486  1AFE  0084               	movwf	4
 12487  1AFF  0835               	movf	UARTstringWAIT@data+1,w
 12488  1B00  0085               	movwf	5
 12489  1B01  0800               	movf	0,w	;code access
 12490  1B02  3A00               	xorlw	0
 12491  1B03  1903               	skipnz
 12492  1B04  2B12               	goto	l6046
 12493                           
 12494                           ;UART.c: 279: {
 12495                           ;UART.c: 280: UARTchar(*data, 0, 0);
 12496  1B05  01AD               	clrf	UARTchar@NinethBit_override
 12497  1B06  01AE               	clrf	UARTchar@NinethBit_override_data
 12498  1B07  0834               	movf	UARTstringWAIT@data,w
 12499  1B08  0084               	movwf	4
 12500  1B09  0835               	movf	UARTstringWAIT@data+1,w
 12501  1B0A  0085               	movwf	5
 12502  1B0B  0800               	movf	0,w	;code access
 12503  1B0C  319C  2463  319A   	fcall	_UARTchar
 12504  1B0F                     l519:	
 12505                           ;UART.c: 281: while((!TX1STAbits.TRMT));
 12506                           
 12507  1B0F  0023               	movlb	3	; select bank3
 12508  1B10  1C9E               	btfss	30,1	;volatile
 12509  1B11  2B0F               	goto	l519
 12510  1B12                     l6046:	
 12511                           
 12512                           ;UART.c: 282: }
 12513                           ;UART.c: 283: } while( *data++);
 12514  1B12  0020               	movlb	0	; select bank0
 12515  1B13  0835               	movf	UARTstringWAIT@data+1,w
 12516  1B14  00B7               	movwf	??_UARTstringWAIT+1
 12517  1B15  0834               	movf	UARTstringWAIT@data,w
 12518  1B16  00B6               	movwf	??_UARTstringWAIT
 12519  1B17  0AB4               	incf	UARTstringWAIT@data,f
 12520  1B18  1903               	skipnz
 12521  1B19  0AB5               	incf	UARTstringWAIT@data+1,f
 12522  1B1A  0836               	movf	??_UARTstringWAIT,w
 12523  1B1B  0084               	movwf	4
 12524  1B1C  0837               	movf	??_UARTstringWAIT+1,w
 12525  1B1D  0085               	movwf	5
 12526  1B1E  0800               	movf	0,w	;code access
 12527  1B1F  3800               	iorlw	0
 12528  1B20  1903               	btfsc	3,2
 12529  1B21  0008               	return
 12530  1B22  2AF0               	goto	l517
 12531  1B23                     __end_of_UARTstringWAIT:	
 12532                           
 12533                           	psect	text30
 12534  1C63                     __ptext30:	
 12535 ;; *************** function _UARTchar *****************
 12536 ;; Defined at:
 12537 ;;		line 189 in file "UART.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  data            1    wreg     unsigned char 
 12540 ;;  NinethBit_ov    1   13[BANK0 ] unsigned char 
 12541 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  data            1   19[BANK0 ] unsigned char 
 12544 ;; Return value:  Size  Location     Type
 12545 ;;		None               void
 12546 ;; Registers used:
 12547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;Total ram usage:        7 bytes
 12558 ;; Hardware stack levels used:    1
 12559 ;; Hardware stack levels required when called:    4
 12560 ;; This function calls:
 12561 ;;		_CheckSum_byte
 12562 ;; This function is called by:
 12563 ;;		_UARTstringWAIT
 12564 ;;		_PS_2_Update
 12565 ;;		_UARTstring
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function _UARTchar
 12571  1C63                     _UARTchar:	
 12572                           
 12573                           ;incstack = 0
 12574                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12575                           ;UARTchar@data stored from wreg
 12576  1C63  0020               	movlb	0	; select bank0
 12577  1C64  00B3               	movwf	UARTchar@data
 12578                           
 12579                           ;UART.c: 192: if(TXSTAbits.TX9)
 12580  1C65  0023               	movlb	3	; select bank3
 12581  1C66  1F1E               	btfss	30,6	;volatile
 12582  1C67  2CAC               	goto	l5848
 12583                           
 12584                           ;UART.c: 193: {
 12585                           ;UART.c: 195: if(!NinethBit_override)
 12586  1C68  0020               	movlb	0	; select bank0
 12587  1C69  08AD               	movf	UARTchar@NinethBit_override,f
 12588  1C6A  1903               	btfsc	3,2
 12589  1C6B  2C94               	goto	l5844
 12590  1C6C  2CA1               	goto	l5846
 12591  1C6D                     l5838:	
 12592                           ;UART.c: 199: {
 12593                           ;UART.c: 200: case 1:
 12594                           
 12595                           ;UART.c: 196: {
 12596                           ;UART.c: 198: switch (PARITY)
 12597                           
 12598                           
 12599                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12600  1C6D  0833               	movf	UARTchar@data,w
 12601  1C6E  00AF               	movwf	??_UARTchar
 12602  1C6F  01B0               	clrf	??_UARTchar+1
 12603  1C70  082F               	movf	??_UARTchar,w
 12604  1C71  00A5               	movwf	CheckSum_byte@This
 12605  1C72  0830               	movf	??_UARTchar+1,w
 12606  1C73  00A6               	movwf	CheckSum_byte@This+1
 12607  1C74  3003               	movlw	3
 12608  1C75  2C7F               	goto	L20
 12609  1C76                     l5840:	
 12610                           ;UART.c: 203: case 2:
 12611                           
 12612                           ;UART.c: 202: break;
 12613                           
 12614                           
 12615                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12616  1C76  0020               	movlb	0	; select bank0
 12617  1C77  0833               	movf	UARTchar@data,w
 12618  1C78  00AF               	movwf	??_UARTchar
 12619  1C79  01B0               	clrf	??_UARTchar+1
 12620  1C7A  082F               	movf	??_UARTchar,w
 12621  1C7B  00A5               	movwf	CheckSum_byte@This
 12622  1C7C  0830               	movf	??_UARTchar+1,w
 12623  1C7D  00A6               	movwf	CheckSum_byte@This+1
 12624  1C7E  3002               	movlw	2
 12625  1C7F                     L20:	
 12626  1C7F  00B1               	movwf	??_UARTchar+2
 12627  1C80  0831               	movf	??_UARTchar+2,w
 12628  1C81  00A7               	movwf	CheckSum_byte@Odd_Even
 12629  1C82  319A  225C  319C   	fcall	_CheckSum_byte
 12630  1C85  0020               	movlb	0	; select bank0
 12631  1C86  00B2               	movwf	??_UARTchar+3
 12632  1C87  0023               	movlb	3	; select bank3
 12633  1C88  081E               	movf	30,w	;volatile
 12634  1C89  0020               	movlb	0	; select bank0
 12635  1C8A  0632               	xorwf	??_UARTchar+3,w
 12636  1C8B  39FE               	andlw	-2
 12637  1C8C  0632               	xorwf	??_UARTchar+3,w
 12638  1C8D  2CAA               	goto	L19
 12639  1C8E                     l491:	
 12640                           ;UART.c: 206: case 3:
 12641                           
 12642                           ;UART.c: 205: break;
 12643                           
 12644                           
 12645                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 12646  1C8E  0023               	movlb	3	; select bank3
 12647  1C8F  141E               	bsf	30,0	;volatile
 12648                           
 12649                           ;UART.c: 208: break;
 12650  1C90  2CAC               	goto	l5848
 12651  1C91                     l492:	
 12652                           ;UART.c: 209: default:
 12653                           
 12654                           
 12655                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 12656  1C91  0023               	movlb	3	; select bank3
 12657  1C92  101E               	bcf	30,0	;volatile
 12658                           
 12659                           ;UART.c: 212: }
 12660                           
 12661                           ;UART.c: 211: break;
 12662  1C93  2CAC               	goto	l5848
 12663  1C94                     l5844:	
 12664  1C94  0020               	movlb	0	; select bank0
 12665  1C95  0867               	movf	_PARITY,w
 12666                           
 12667                           ; Switch size 1, requested type "space"
 12668                           ; Number of cases is 3, Range of values is 1 to 3
 12669                           ; switch strategies available:
 12670                           ; Name         Instructions Cycles
 12671                           ; simple_byte           10     6 (average)
 12672                           ; direct_byte           15     9 (fixed)
 12673                           ; jumptable            263     9 (fixed)
 12674                           ;	Chosen strategy is simple_byte
 12675  1C96  3A01               	xorlw	1	; case 1
 12676  1C97  1903               	skipnz
 12677  1C98  2C6D               	goto	l5838
 12678  1C99  3A03               	xorlw	3	; case 2
 12679  1C9A  1903               	skipnz
 12680  1C9B  2C76               	goto	l5840
 12681  1C9C  3A01               	xorlw	1	; case 3
 12682  1C9D  1903               	skipnz
 12683  1C9E  2C8E               	goto	l491
 12684  1C9F  2C91               	goto	l492
 12685                           
 12686                           ;UART.c: 213: }
 12687  1CA0  2CAC               	goto	l5848
 12688  1CA1                     l5846:	
 12689                           
 12690                           ;UART.c: 214: else
 12691                           ;UART.c: 215: {
 12692                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12693  1CA1  3001               	movlw	1
 12694  1CA2  052E               	andwf	UARTchar@NinethBit_override_data,w
 12695  1CA3  00AF               	movwf	??_UARTchar
 12696  1CA4  0023               	movlb	3	; select bank3
 12697  1CA5  081E               	movf	30,w	;volatile
 12698  1CA6  0020               	movlb	0	; select bank0
 12699  1CA7  062F               	xorwf	??_UARTchar,w
 12700  1CA8  39FE               	andlw	-2
 12701  1CA9  062F               	xorwf	??_UARTchar,w
 12702  1CAA                     L19:	
 12703  1CAA  0023               	movlb	3	; select bank3
 12704  1CAB  009E               	movwf	30	;volatile
 12705  1CAC                     l5848:	
 12706                           
 12707                           ;UART.c: 217: }
 12708                           ;UART.c: 218: }
 12709                           ;UART.c: 219: TXREG = data;
 12710  1CAC  0020               	movlb	0	; select bank0
 12711  1CAD  0833               	movf	UARTchar@data,w
 12712  1CAE  0023               	movlb	3	; select bank3
 12713  1CAF  009A               	movwf	26	;volatile
 12714  1CB0  0008               	return
 12715  1CB1                     __end_of_UARTchar:	
 12716                           
 12717                           	psect	text31
 12718  1E5D                     __ptext31:	
 12719 ;; *************** function _ReadBaud *****************
 12720 ;; Defined at:
 12721 ;;		line 135 in file "FLASH.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  row             2   23[BANK0 ] unsigned int 
 12724 ;;  column          1   25[BANK0 ] unsigned char 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  temp            4   35[BANK0 ] unsigned long 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  4   23[BANK0 ] unsigned long 
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0, pclath, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:       16 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    5
 12743 ;; This function calls:
 12744 ;;		_ReadFlash_4Byte
 12745 ;; This function is called by:
 12746 ;;		_Init_System
 12747 ;;		_SetBaud
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           
 12752                           ;psect for function _ReadBaud
 12753  1E5D                     _ReadBaud:	
 12754                           
 12755                           ;FLASH.c: 137: unsigned long temp;
 12756                           ;FLASH.c: 138: temp =(ReadFlash_4Byte(row, column));
 12757                           
 12758                           ;incstack = 0
 12759                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12760  1E5D  0020               	movlb	0	; select bank0
 12761  1E5E  0838               	movf	ReadBaud@row+1,w
 12762  1E5F  01AB               	clrf	ReadFlash_4Byte@row+1
 12763  1E60  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12764  1E61  0837               	movf	ReadBaud@row,w
 12765  1E62  01AA               	clrf	ReadFlash_4Byte@row
 12766  1E63  07AA               	addwf	ReadFlash_4Byte@row,f
 12767  1E64  0839               	movf	ReadBaud@column,w
 12768  1E65  00BB               	movwf	??_ReadBaud
 12769  1E66  083B               	movf	??_ReadBaud,w
 12770  1E67  00AC               	movwf	ReadFlash_4Byte@column
 12771  1E68  319C  24B1  319E   	fcall	_ReadFlash_4Byte
 12772  1E6B  0020               	movlb	0	; select bank0
 12773  1E6C  082D               	movf	?_ReadFlash_4Byte+3,w
 12774  1E6D  00C6               	movwf	ReadBaud@temp+3
 12775  1E6E  082C               	movf	?_ReadFlash_4Byte+2,w
 12776  1E6F  00C5               	movwf	ReadBaud@temp+2
 12777  1E70  082B               	movf	?_ReadFlash_4Byte+1,w
 12778  1E71  00C4               	movwf	ReadBaud@temp+1
 12779  1E72  082A               	movf	?_ReadFlash_4Byte,w
 12780  1E73  00C3               	movwf	ReadBaud@temp
 12781                           
 12782                           ;FLASH.c: 139: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12783  1E74  30FF               	movlw	255
 12784  1E75  0543               	andwf	ReadBaud@temp,w
 12785  1E76  0024               	movlb	4	; select bank4
 12786  1E77  00B2               	movwf	(_MEM^(0+512)+2)
 12787  1E78  303F               	movlw	63
 12788  1E79  0020               	movlb	0	; select bank0
 12789  1E7A  0544               	andwf	ReadBaud@temp+1,w
 12790  1E7B  0024               	movlb	4	; select bank4
 12791  1E7C  00B3               	movwf	((_MEM+1)^(0+512)+2)
 12792                           
 12793                           ;FLASH.c: 140: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12794  1E7D  0020               	movlb	0	; select bank0
 12795  1E7E  0843               	movf	ReadBaud@temp,w
 12796  1E7F  00BB               	movwf	??_ReadBaud
 12797  1E80  0844               	movf	ReadBaud@temp+1,w
 12798  1E81  00BC               	movwf	??_ReadBaud+1
 12799  1E82  0845               	movf	ReadBaud@temp+2,w
 12800  1E83  00BD               	movwf	??_ReadBaud+2
 12801  1E84  0846               	movf	ReadBaud@temp+3,w
 12802  1E85  00BE               	movwf	??_ReadBaud+3
 12803  1E86  300E               	movlw	14
 12804  1E87                     u7855:	
 12805  1E87  36BE               	lsrf	??_ReadBaud+3,f
 12806  1E88  0CBD               	rrf	??_ReadBaud+2,f
 12807  1E89  0CBC               	rrf	??_ReadBaud+1,f
 12808  1E8A  0CBB               	rrf	??_ReadBaud,f
 12809  1E8B  0B89               	decfsz	9,f
 12810  1E8C  2E87               	goto	u7855
 12811  1E8D  30FF               	movlw	255
 12812  1E8E  053B               	andwf	??_ReadBaud,w
 12813  1E8F  0024               	movlb	4	; select bank4
 12814  1E90  00B0               	movwf	_MEM^(0+512)
 12815  1E91  303F               	movlw	63
 12816  1E92  0020               	movlb	0	; select bank0
 12817  1E93  053C               	andwf	??_ReadBaud+1,w
 12818  1E94  0024               	movlb	4	; select bank4
 12819  1E95  00B1               	movwf	(_MEM+1)^(0+512)
 12820                           
 12821                           ;FLASH.c: 141: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12822  1E96  0832               	movf	(_MEM^(0+512)+2),w
 12823  1E97  0020               	movlb	0	; select bank0
 12824  1E98  00BB               	movwf	??_ReadBaud
 12825  1E99  0024               	movlb	4	; select bank4
 12826  1E9A  0833               	movf	((_MEM+1)^(0+512)+2),w
 12827  1E9B  0020               	movlb	0	; select bank0
 12828  1E9C  00BC               	movwf	??_ReadBaud+1
 12829  1E9D  01BD               	clrf	??_ReadBaud+2
 12830  1E9E  01BE               	clrf	??_ReadBaud+3
 12831  1E9F  0024               	movlb	4	; select bank4
 12832  1EA0  0830               	movf	_MEM^(0+512),w
 12833  1EA1  0020               	movlb	0	; select bank0
 12834  1EA2  00BF               	movwf	??_ReadBaud+4
 12835  1EA3  0024               	movlb	4	; select bank4
 12836  1EA4  0831               	movf	(_MEM+1)^(0+512),w
 12837  1EA5  0020               	movlb	0	; select bank0
 12838  1EA6  00C0               	movwf	??_ReadBaud+5
 12839  1EA7  01C1               	clrf	??_ReadBaud+6
 12840  1EA8  01C2               	clrf	??_ReadBaud+7
 12841  1EA9  300C               	movlw	12
 12842  1EAA                     u7865:	
 12843  1EAA  35BF               	lslf	??_ReadBaud+4,f
 12844  1EAB  0DC0               	rlf	??_ReadBaud+5,f
 12845  1EAC  0DC1               	rlf	??_ReadBaud+6,f
 12846  1EAD  0DC2               	rlf	??_ReadBaud+7,f
 12847  1EAE  0B89               	decfsz	9,f
 12848  1EAF  2EAA               	goto	u7865
 12849  1EB0  083F               	movf	??_ReadBaud+4,w
 12850  1EB1  07BB               	addwf	??_ReadBaud,f
 12851  1EB2  0840               	movf	??_ReadBaud+5,w
 12852  1EB3  3DBC               	addwfc	??_ReadBaud+1,f
 12853  1EB4  0841               	movf	??_ReadBaud+6,w
 12854  1EB5  3DBD               	addwfc	??_ReadBaud+2,f
 12855  1EB6  0842               	movf	??_ReadBaud+7,w
 12856  1EB7  3DBE               	addwfc	??_ReadBaud+3,f
 12857  1EB8  083E               	movf	??_ReadBaud+3,w
 12858  1EB9  00BA               	movwf	?_ReadBaud+3
 12859  1EBA  083D               	movf	??_ReadBaud+2,w
 12860  1EBB  00B9               	movwf	?_ReadBaud+2
 12861  1EBC  083C               	movf	??_ReadBaud+1,w
 12862  1EBD  00B8               	movwf	?_ReadBaud+1
 12863  1EBE  083B               	movf	??_ReadBaud,w
 12864  1EBF  00B7               	movwf	?_ReadBaud
 12865  1EC0  0008               	return
 12866  1EC1                     __end_of_ReadBaud:	
 12867                           
 12868                           	psect	text32
 12869  1CB1                     __ptext32:	
 12870 ;; *************** function _ReadFlash_4Byte *****************
 12871 ;; Defined at:
 12872 ;;		line 43 in file "FLASH.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  row             2   10[BANK0 ] unsigned int 
 12875 ;;  column          1   12[BANK0 ] unsigned char 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  temp            4   19[BANK0 ] unsigned long 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  4   10[BANK0 ] unsigned long 
 12880 ;; Registers used:
 12881 ;;		wreg, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:       13 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    4
 12894 ;; This function calls:
 12895 ;;		_ReadFlash_2Byte
 12896 ;; This function is called by:
 12897 ;;		_ReadBaud
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           
 12902                           ;psect for function _ReadFlash_4Byte
 12903  1CB1                     _ReadFlash_4Byte:	
 12904                           
 12905                           ;FLASH.c: 45: unsigned long temp =0;
 12906                           
 12907                           ;incstack = 0
 12908                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12909  1CB1  3000               	movlw	0
 12910  1CB2  0020               	movlb	0	; select bank0
 12911  1CB3  00B6               	movwf	ReadFlash_4Byte@temp+3
 12912  1CB4  3000               	movlw	0
 12913  1CB5  00B5               	movwf	ReadFlash_4Byte@temp+2
 12914  1CB6  3000               	movlw	0
 12915  1CB7  00B4               	movwf	ReadFlash_4Byte@temp+1
 12916  1CB8  3000               	movlw	0
 12917  1CB9  00B3               	movwf	ReadFlash_4Byte@temp
 12918                           
 12919                           ;FLASH.c: 46: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12920  1CBA  082B               	movf	ReadFlash_4Byte@row+1,w
 12921  1CBB  01A6               	clrf	ReadFlash_2Byte@row+1
 12922  1CBC  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12923  1CBD  082A               	movf	ReadFlash_4Byte@row,w
 12924  1CBE  01A5               	clrf	ReadFlash_2Byte@row
 12925  1CBF  07A5               	addwf	ReadFlash_2Byte@row,f
 12926  1CC0  082C               	movf	ReadFlash_4Byte@column,w
 12927  1CC1  00AE               	movwf	??_ReadFlash_4Byte
 12928  1CC2  082E               	movf	??_ReadFlash_4Byte,w
 12929  1CC3  00A7               	movwf	ReadFlash_2Byte@column
 12930  1CC4  319A  22BE  319C   	fcall	_ReadFlash_2Byte
 12931  1CC7  0020               	movlb	0	; select bank0
 12932  1CC8  0825               	movf	?_ReadFlash_2Byte,w
 12933  1CC9  00AF               	movwf	??_ReadFlash_4Byte+1
 12934  1CCA  0826               	movf	?_ReadFlash_2Byte+1,w
 12935  1CCB  00B0               	movwf	??_ReadFlash_4Byte+2
 12936  1CCC  01B1               	clrf	??_ReadFlash_4Byte+3
 12937  1CCD  01B2               	clrf	??_ReadFlash_4Byte+4
 12938  1CCE  3010               	movlw	16
 12939  1CCF                     u7605:	
 12940  1CCF  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12941  1CD0  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12942  1CD1  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12943  1CD2  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12944  1CD3  0B89               	decfsz	9,f
 12945  1CD4  2CCF               	goto	u7605
 12946  1CD5  0832               	movf	??_ReadFlash_4Byte+4,w
 12947  1CD6  00B6               	movwf	ReadFlash_4Byte@temp+3
 12948  1CD7  0831               	movf	??_ReadFlash_4Byte+3,w
 12949  1CD8  00B5               	movwf	ReadFlash_4Byte@temp+2
 12950  1CD9  0830               	movf	??_ReadFlash_4Byte+2,w
 12951  1CDA  00B4               	movwf	ReadFlash_4Byte@temp+1
 12952  1CDB  082F               	movf	??_ReadFlash_4Byte+1,w
 12953  1CDC  00B3               	movwf	ReadFlash_4Byte@temp
 12954                           
 12955                           ;FLASH.c: 47: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12956  1CDD  082B               	movf	ReadFlash_4Byte@row+1,w
 12957  1CDE  01A6               	clrf	ReadFlash_2Byte@row+1
 12958  1CDF  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12959  1CE0  082A               	movf	ReadFlash_4Byte@row,w
 12960  1CE1  01A5               	clrf	ReadFlash_2Byte@row
 12961  1CE2  07A5               	addwf	ReadFlash_2Byte@row,f
 12962  1CE3  082C               	movf	ReadFlash_4Byte@column,w
 12963  1CE4  3E01               	addlw	1
 12964  1CE5  00AE               	movwf	??_ReadFlash_4Byte
 12965  1CE6  082E               	movf	??_ReadFlash_4Byte,w
 12966  1CE7  00A7               	movwf	ReadFlash_2Byte@column
 12967  1CE8  319A  22BE         	fcall	_ReadFlash_2Byte
 12968  1CEA  0020               	movlb	0	; select bank0
 12969  1CEB  0825               	movf	?_ReadFlash_2Byte,w
 12970  1CEC  00AF               	movwf	??_ReadFlash_4Byte+1
 12971  1CED  0826               	movf	?_ReadFlash_2Byte+1,w
 12972  1CEE  00B0               	movwf	??_ReadFlash_4Byte+2
 12973  1CEF  01B1               	clrf	??_ReadFlash_4Byte+3
 12974  1CF0  01B2               	clrf	??_ReadFlash_4Byte+4
 12975  1CF1  082F               	movf	??_ReadFlash_4Byte+1,w
 12976  1CF2  04B3               	iorwf	ReadFlash_4Byte@temp,f
 12977  1CF3  0830               	movf	??_ReadFlash_4Byte+2,w
 12978  1CF4  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 12979  1CF5  0831               	movf	??_ReadFlash_4Byte+3,w
 12980  1CF6  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 12981  1CF7  0832               	movf	??_ReadFlash_4Byte+4,w
 12982  1CF8  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 12983                           
 12984                           ;FLASH.c: 48: return temp;
 12985  1CF9  0836               	movf	ReadFlash_4Byte@temp+3,w
 12986  1CFA  00AD               	movwf	?_ReadFlash_4Byte+3
 12987  1CFB  0835               	movf	ReadFlash_4Byte@temp+2,w
 12988  1CFC  00AC               	movwf	?_ReadFlash_4Byte+2
 12989  1CFD  0834               	movf	ReadFlash_4Byte@temp+1,w
 12990  1CFE  00AB               	movwf	?_ReadFlash_4Byte+1
 12991  1CFF  0833               	movf	ReadFlash_4Byte@temp,w
 12992  1D00  00AA               	movwf	?_ReadFlash_4Byte
 12993  1D01  0008               	return
 12994  1D02                     __end_of_ReadFlash_4Byte:	
 12995                           
 12996                           	psect	text33
 12997  1ABE                     __ptext33:	
 12998 ;; *************** function _ReadFlash_2Byte *****************
 12999 ;; Defined at:
 13000 ;;		line 31 in file "FLASH.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;  row             2    5[BANK0 ] unsigned int 
 13003 ;;  column          1    7[BANK0 ] unsigned char 
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;		None
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  2    5[BANK0 ] unsigned int 
 13008 ;; Registers used:
 13009 ;;		wreg, status,2, status,0
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13015 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;Total ram usage:        5 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    3
 13022 ;; This function calls:
 13023 ;;		Nothing
 13024 ;; This function is called by:
 13025 ;;		_ReadFlash_4Byte
 13026 ;;		_WriteFlash_Sequential
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           
 13031                           ;psect for function _ReadFlash_2Byte
 13032  1ABE                     _ReadFlash_2Byte:	
 13033                           
 13034                           ;FLASH.c: 33: PMCON1 &= ~0b01000000;
 13035                           
 13036                           ;incstack = 0
 13037                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 13038  1ABE  30BF               	movlw	191
 13039  1ABF  0020               	movlb	0	; select bank0
 13040  1AC0  00A8               	movwf	??_ReadFlash_2Byte
 13041  1AC1  0828               	movf	??_ReadFlash_2Byte,w
 13042  1AC2  0023               	movlb	3	; select bank3
 13043  1AC3  0595               	andwf	21,f	;volatile
 13044                           
 13045                           ;FLASH.c: 34: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 13046  1AC4  0020               	movlb	0	; select bank0
 13047  1AC5  0826               	movf	ReadFlash_2Byte@row+1,w
 13048  1AC6  00A9               	movwf	??_ReadFlash_2Byte+1
 13049  1AC7  0825               	movf	ReadFlash_2Byte@row,w
 13050  1AC8  00A8               	movwf	??_ReadFlash_2Byte
 13051  1AC9  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13052  1ACA  0CA8               	rrf	??_ReadFlash_2Byte,f
 13053  1ACB  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13054  1ACC  0CA8               	rrf	??_ReadFlash_2Byte,f
 13055  1ACD  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13056  1ACE  0CA8               	rrf	??_ReadFlash_2Byte,f
 13057  1ACF  0828               	movf	??_ReadFlash_2Byte,w
 13058  1AD0  397F               	andlw	127
 13059  1AD1  0023               	movlb	3	; select bank3
 13060  1AD2  0092               	movwf	18	;volatile
 13061                           
 13062                           ;FLASH.c: 35: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 13063  1AD3  0020               	movlb	0	; select bank0
 13064  1AD4  0825               	movf	ReadFlash_2Byte@row,w
 13065  1AD5  3907               	andlw	7
 13066  1AD6  00A8               	movwf	??_ReadFlash_2Byte
 13067  1AD7  3004               	movlw	4
 13068  1AD8                     u7465:	
 13069  1AD8  35A8               	lslf	??_ReadFlash_2Byte,f
 13070  1AD9  3EFF               	addlw	-1
 13071  1ADA  1D03               	skipz
 13072  1ADB  2AD8               	goto	u7465
 13073  1ADC  3528               	lslf	??_ReadFlash_2Byte,w
 13074  1ADD  0727               	addwf	ReadFlash_2Byte@column,w
 13075  1ADE  0023               	movlb	3	; select bank3
 13076  1ADF  0091               	movwf	17	;volatile
 13077                           
 13078                           ;FLASH.c: 36: PMCON1 |= 0b00000001;
 13079  1AE0  1415               	bsf	21,0	;volatile
 13080  1AE1                     l992:	
 13081                           ;FLASH.c: 37: while(PMCON1 & 0b00000001);
 13082                           
 13083  1AE1  1815               	btfsc	21,0	;volatile
 13084  1AE2  2AE1               	goto	l992
 13085                           
 13086                           ;FLASH.c: 38: __nop();
 13087  1AE3  0000               	nop
 13088                           
 13089                           ;FLASH.c: 39: __nop();
 13090  1AE4  0000               	nop
 13091                           
 13092                           ;FLASH.c: 40: return (PMDATL | (PMDATH << 8));
 13093  1AE5  0023               	movlb	3	; select bank3
 13094  1AE6  0814               	movf	20,w	;volatile
 13095  1AE7  0020               	movlb	0	; select bank0
 13096  1AE8  01A6               	clrf	?_ReadFlash_2Byte+1
 13097  1AE9  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13098  1AEA  0023               	movlb	3	; select bank3
 13099  1AEB  0813               	movf	19,w	;volatile
 13100  1AEC  0020               	movlb	0	; select bank0
 13101  1AED  01A5               	clrf	?_ReadFlash_2Byte
 13102  1AEE  07A5               	addwf	?_ReadFlash_2Byte,f
 13103  1AEF  0008               	return
 13104  1AF0                     __end_of_ReadFlash_2Byte:	
 13105                           
 13106                           	psect	text34
 13107  11BC                     __ptext34:	
 13108 ;; *************** function _InitUART *****************
 13109 ;; Defined at:
 13110 ;;		line 52 in file "UART.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;  Baud            4   19[BANK0 ] unsigned long 
 13113 ;;  parity          1   23[BANK0 ] unsigned char 
 13114 ;; Auto vars:     Size  Location     Type
 13115 ;;  temp            4   36[BANK0 ] unsigned long 
 13116 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13117 ;;  config          1   35[BANK0 ] unsigned char 
 13118 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;		None               void
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0, pclath, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13128 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13130 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;Total ram usage:       21 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    4
 13135 ;; This function calls:
 13136 ;;		_CloseUSART
 13137 ;;		_OpenUSART
 13138 ;;		_ReadUSART
 13139 ;;		___lldiv
 13140 ;;		_baudUSART
 13141 ;; This function is called by:
 13142 ;;		_Init_System
 13143 ;;		_SetBaud
 13144 ;; This function uses a non-reentrant model
 13145 ;;
 13146                           
 13147                           
 13148                           ;psect for function _InitUART
 13149  11BC                     _InitUART:	
 13150                           
 13151                           ;UART.c: 54: unsigned long temp;
 13152                           ;UART.c: 55: unsigned char config;
 13153                           ;UART.c: 56: unsigned int spbrg;
 13154                           ;UART.c: 57: unsigned char baudconfig;
 13155                           ;UART.c: 67: LATC |= 0b00000100;
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13159  11BC  0022               	movlb	2	; select bank2
 13160  11BD  150E               	bsf	14,2	;volatile
 13161                           
 13162                           ;UART.c: 68: PPSLOCK =0;
 13163  11BE  003C               	movlb	28	; select bank28
 13164  11BF  018F               	clrf	15	;volatile
 13165                           
 13166                           ;UART.c: 69: RC2PPS = 0b00000000;
 13167  11C0  003D               	movlb	29	; select bank29
 13168  11C1  01A2               	clrf	34	;volatile
 13169                           
 13170                           ;UART.c: 70: PPSLOCK =1;
 13171  11C2  3001               	movlw	1
 13172  11C3  003C               	movlb	28	; select bank28
 13173  11C4  008F               	movwf	15	;volatile
 13174                           
 13175                           ;UART.c: 72: CloseUSART();
 13176  11C5  3199  2114  3191   	fcall	_CloseUSART
 13177                           
 13178                           ;UART.c: 73: config =0;
 13179  11C8  0020               	movlb	0	; select bank0
 13180  11C9  01C3               	clrf	InitUART@config
 13181                           
 13182                           ;UART.c: 74: baudconfig =0;
 13183  11CA  01C2               	clrf	InitUART@baudconfig
 13184                           
 13185                           ;UART.c: 77: config |= 0b01000000;
 13186  11CB  1743               	bsf	InitUART@config,6
 13187                           
 13188                           ;UART.c: 79: config |= 0b00001000;
 13189  11CC  15C3               	bsf	InitUART@config,3
 13190                           
 13191                           ;UART.c: 80: config |= 0b00010000;
 13192  11CD  1643               	bsf	InitUART@config,4
 13193                           
 13194                           ;UART.c: 81: PARITY = parity;
 13195  11CE  0837               	movf	InitUART@parity,w
 13196  11CF  00B8               	movwf	??_InitUART
 13197  11D0  0838               	movf	??_InitUART,w
 13198  11D1  00E7               	movwf	_PARITY
 13199                           
 13200                           ;UART.c: 82: BAUD = Baud;
 13201  11D2  0836               	movf	InitUART@Baud+3,w
 13202  11D3  0024               	movlb	4	; select bank4
 13203  11D4  00AF               	movwf	(_BAUD+3)^(0+512)
 13204  11D5  0020               	movlb	0	; select bank0
 13205  11D6  0835               	movf	InitUART@Baud+2,w
 13206  11D7  0024               	movlb	4	; select bank4
 13207  11D8  00AE               	movwf	(_BAUD+2)^(0+512)
 13208  11D9  0020               	movlb	0	; select bank0
 13209  11DA  0834               	movf	InitUART@Baud+1,w
 13210  11DB  0024               	movlb	4	; select bank4
 13211  11DC  00AD               	movwf	(_BAUD+1)^(0+512)
 13212  11DD  0020               	movlb	0	; select bank0
 13213  11DE  0833               	movf	InitUART@Baud,w
 13214  11DF  0024               	movlb	4	; select bank4
 13215  11E0  00AC               	movwf	_BAUD^(0+512)
 13216                           
 13217                           ;UART.c: 83: if(parity)
 13218  11E1  0020               	movlb	0	; select bank0
 13219  11E2  0837               	movf	InitUART@parity,w
 13220  11E3  1903               	btfsc	3,2
 13221  11E4  29E7               	goto	l6094
 13222                           
 13223                           ;UART.c: 84: {
 13224                           ;UART.c: 85: config |= 0b00000010;
 13225  11E5  14C3               	bsf	InitUART@config,1
 13226                           
 13227                           ;UART.c: 86: }
 13228  11E6  29EB               	goto	l6096
 13229  11E7                     l6094:	
 13230                           
 13231                           ;UART.c: 87: else
 13232                           ;UART.c: 88: {
 13233                           ;UART.c: 89: config &= ~0b00000010;
 13234  11E7  30FD               	movlw	253
 13235  11E8  00B8               	movwf	??_InitUART
 13236  11E9  0838               	movf	??_InitUART,w
 13237  11EA  05C3               	andwf	InitUART@config,f
 13238  11EB                     l6096:	
 13239                           
 13240                           ;UART.c: 90: }
 13241                           ;UART.c: 91: baudconfig |= 0b00001000;
 13242  11EB  15C2               	bsf	InitUART@baudconfig,3
 13243                           
 13244                           ;UART.c: 93: temp = (32000000L / Baud) - 1;
 13245  11EC  0836               	movf	InitUART@Baud+3,w
 13246  11ED  00A8               	movwf	___lldiv@divisor+3
 13247  11EE  0835               	movf	InitUART@Baud+2,w
 13248  11EF  00A7               	movwf	___lldiv@divisor+2
 13249  11F0  0834               	movf	InitUART@Baud+1,w
 13250  11F1  00A6               	movwf	___lldiv@divisor+1
 13251  11F2  0833               	movf	InitUART@Baud,w
 13252  11F3  00A5               	movwf	___lldiv@divisor
 13253  11F4  3001               	movlw	1
 13254  11F5  00AC               	movwf	___lldiv@dividend+3
 13255  11F6  30E8               	movlw	232
 13256  11F7  00AB               	movwf	___lldiv@dividend+2
 13257  11F8  3048               	movlw	72
 13258  11F9  00AA               	movwf	___lldiv@dividend+1
 13259  11FA  3000               	movlw	0
 13260  11FB  00A9               	movwf	___lldiv@dividend
 13261  11FC  319D  2502  3191   	fcall	___lldiv
 13262  11FF  30FF               	movlw	255
 13263  1200  0020               	movlb	0	; select bank0
 13264  1201  0725               	addwf	?___lldiv,w
 13265  1202  00C4               	movwf	InitUART@temp
 13266  1203  30FF               	movlw	255
 13267  1204  3D26               	addwfc	?___lldiv+1,w
 13268  1205  00C5               	movwf	InitUART@temp+1
 13269  1206  30FF               	movlw	255
 13270  1207  3D27               	addwfc	?___lldiv+2,w
 13271  1208  00C6               	movwf	InitUART@temp+2
 13272  1209  30FF               	movlw	255
 13273  120A  3D28               	addwfc	?___lldiv+3,w
 13274  120B  00C7               	movwf	InitUART@temp+3
 13275                           
 13276                           ;UART.c: 94: temp = (temp >> 2) - 1;
 13277  120C  30FF               	movlw	255
 13278  120D  00B8               	movwf	??_InitUART
 13279  120E  30FF               	movlw	255
 13280  120F  00B9               	movwf	??_InitUART+1
 13281  1210  30FF               	movlw	255
 13282  1211  00BA               	movwf	??_InitUART+2
 13283  1212  30FF               	movlw	255
 13284  1213  00BB               	movwf	??_InitUART+3
 13285  1214  0844               	movf	InitUART@temp,w
 13286  1215  00BC               	movwf	??_InitUART+4
 13287  1216  0845               	movf	InitUART@temp+1,w
 13288  1217  00BD               	movwf	??_InitUART+5
 13289  1218  0846               	movf	InitUART@temp+2,w
 13290  1219  00BE               	movwf	??_InitUART+6
 13291  121A  0847               	movf	InitUART@temp+3,w
 13292  121B  00BF               	movwf	??_InitUART+7
 13293  121C  3002               	movlw	2
 13294  121D                     u7885:	
 13295  121D  36BF               	lsrf	??_InitUART+7,f
 13296  121E  0CBE               	rrf	??_InitUART+6,f
 13297  121F  0CBD               	rrf	??_InitUART+5,f
 13298  1220  0CBC               	rrf	??_InitUART+4,f
 13299  1221  0B89               	decfsz	9,f
 13300  1222  2A1D               	goto	u7885
 13301  1223  083C               	movf	??_InitUART+4,w
 13302  1224  07B8               	addwf	??_InitUART,f
 13303  1225  083D               	movf	??_InitUART+5,w
 13304  1226  3DB9               	addwfc	??_InitUART+1,f
 13305  1227  083E               	movf	??_InitUART+6,w
 13306  1228  3DBA               	addwfc	??_InitUART+2,f
 13307  1229  083F               	movf	??_InitUART+7,w
 13308  122A  3DBB               	addwfc	??_InitUART+3,f
 13309  122B  083B               	movf	??_InitUART+3,w
 13310  122C  00C7               	movwf	InitUART@temp+3
 13311  122D  083A               	movf	??_InitUART+2,w
 13312  122E  00C6               	movwf	InitUART@temp+2
 13313  122F  0839               	movf	??_InitUART+1,w
 13314  1230  00C5               	movwf	InitUART@temp+1
 13315  1231  0838               	movf	??_InitUART,w
 13316  1232  00C4               	movwf	InitUART@temp
 13317                           
 13318                           ;UART.c: 95: spbrg = (unsigned int)temp;
 13319  1233  0845               	movf	InitUART@temp+1,w
 13320  1234  01C1               	clrf	InitUART@spbrg+1
 13321  1235  07C1               	addwf	InitUART@spbrg+1,f
 13322  1236  0844               	movf	InitUART@temp,w
 13323  1237  01C0               	clrf	InitUART@spbrg
 13324  1238  07C0               	addwf	InitUART@spbrg,f
 13325                           
 13326                           ;UART.c: 97: RCSTAbits.CREN = 0;
 13327  1239  0023               	movlb	3	; select bank3
 13328  123A  121D               	bcf	29,4	;volatile
 13329                           
 13330                           ;UART.c: 98: OpenUSART(config, spbrg);
 13331  123B  0020               	movlb	0	; select bank0
 13332  123C  0841               	movf	InitUART@spbrg+1,w
 13333  123D  01A6               	clrf	OpenUSART@spbrg+1
 13334  123E  07A6               	addwf	OpenUSART@spbrg+1,f
 13335  123F  0840               	movf	InitUART@spbrg,w
 13336  1240  01A5               	clrf	OpenUSART@spbrg
 13337  1241  07A5               	addwf	OpenUSART@spbrg,f
 13338  1242  0843               	movf	InitUART@config,w
 13339  1243  319B  2358  3191   	fcall	_OpenUSART
 13340                           
 13341                           ;UART.c: 99: baudUSART(baudconfig);
 13342  1246  0020               	movlb	0	; select bank0
 13343  1247  0842               	movf	InitUART@baudconfig,w
 13344  1248  3198  20BB  3191   	fcall	_baudUSART
 13345                           
 13346                           ;UART.c: 100: temp = ReadUSART();
 13347  124B  3198  20F0  3191   	fcall	_ReadUSART
 13348  124E  0020               	movlb	0	; select bank0
 13349  124F  00B8               	movwf	??_InitUART
 13350  1250  01B9               	clrf	??_InitUART+1
 13351  1251  01BA               	clrf	??_InitUART+2
 13352  1252  01BB               	clrf	??_InitUART+3
 13353  1253  083B               	movf	??_InitUART+3,w
 13354  1254  00C7               	movwf	InitUART@temp+3
 13355  1255  083A               	movf	??_InitUART+2,w
 13356  1256  00C6               	movwf	InitUART@temp+2
 13357  1257  0839               	movf	??_InitUART+1,w
 13358  1258  00C5               	movwf	InitUART@temp+1
 13359  1259  0838               	movf	??_InitUART,w
 13360  125A  00C4               	movwf	InitUART@temp
 13361                           
 13362                           ;UART.c: 101: temp = ReadUSART();
 13363  125B  3198  20F0  3191   	fcall	_ReadUSART
 13364  125E  0020               	movlb	0	; select bank0
 13365  125F  00B8               	movwf	??_InitUART
 13366  1260  01B9               	clrf	??_InitUART+1
 13367  1261  01BA               	clrf	??_InitUART+2
 13368  1262  01BB               	clrf	??_InitUART+3
 13369  1263  083B               	movf	??_InitUART+3,w
 13370  1264  00C7               	movwf	InitUART@temp+3
 13371  1265  083A               	movf	??_InitUART+2,w
 13372  1266  00C6               	movwf	InitUART@temp+2
 13373  1267  0839               	movf	??_InitUART+1,w
 13374  1268  00C5               	movwf	InitUART@temp+1
 13375  1269  0838               	movf	??_InitUART,w
 13376  126A  00C4               	movwf	InitUART@temp
 13377                           
 13378                           ;UART.c: 102: temp = ReadUSART();
 13379  126B  3198  20F0  3191   	fcall	_ReadUSART
 13380  126E  0020               	movlb	0	; select bank0
 13381  126F  00B8               	movwf	??_InitUART
 13382  1270  01B9               	clrf	??_InitUART+1
 13383  1271  01BA               	clrf	??_InitUART+2
 13384  1272  01BB               	clrf	??_InitUART+3
 13385  1273  083B               	movf	??_InitUART+3,w
 13386  1274  00C7               	movwf	InitUART@temp+3
 13387  1275  083A               	movf	??_InitUART+2,w
 13388  1276  00C6               	movwf	InitUART@temp+2
 13389  1277  0839               	movf	??_InitUART+1,w
 13390  1278  00C5               	movwf	InitUART@temp+1
 13391  1279  0838               	movf	??_InitUART,w
 13392  127A  00C4               	movwf	InitUART@temp
 13393                           
 13394                           ;UART.c: 103: temp = ReadUSART();
 13395  127B  3198  20F0  3191   	fcall	_ReadUSART
 13396  127E  0020               	movlb	0	; select bank0
 13397  127F  00B8               	movwf	??_InitUART
 13398  1280  01B9               	clrf	??_InitUART+1
 13399  1281  01BA               	clrf	??_InitUART+2
 13400  1282  01BB               	clrf	??_InitUART+3
 13401  1283  083B               	movf	??_InitUART+3,w
 13402  1284  00C7               	movwf	InitUART@temp+3
 13403  1285  083A               	movf	??_InitUART+2,w
 13404  1286  00C6               	movwf	InitUART@temp+2
 13405  1287  0839               	movf	??_InitUART+1,w
 13406  1288  00C5               	movwf	InitUART@temp+1
 13407  1289  0838               	movf	??_InitUART,w
 13408  128A  00C4               	movwf	InitUART@temp
 13409                           
 13410                           ;UART.c: 104: temp = ReadUSART();
 13411  128B  3198  20F0         	fcall	_ReadUSART
 13412  128D  0020               	movlb	0	; select bank0
 13413  128E  00B8               	movwf	??_InitUART
 13414  128F  01B9               	clrf	??_InitUART+1
 13415  1290  01BA               	clrf	??_InitUART+2
 13416  1291  01BB               	clrf	??_InitUART+3
 13417  1292  083B               	movf	??_InitUART+3,w
 13418  1293  00C7               	movwf	InitUART@temp+3
 13419  1294  083A               	movf	??_InitUART+2,w
 13420  1295  00C6               	movwf	InitUART@temp+2
 13421  1296  0839               	movf	??_InitUART+1,w
 13422  1297  00C5               	movwf	InitUART@temp+1
 13423  1298  0838               	movf	??_InitUART,w
 13424  1299  00C4               	movwf	InitUART@temp
 13425                           
 13426                           ;UART.c: 106: PPSLOCK =0;
 13427  129A  003C               	movlb	28	; select bank28
 13428  129B  018F               	clrf	15	;volatile
 13429                           
 13430                           ;UART.c: 107: RC2PPS = 0b00010100;
 13431  129C  3014               	movlw	20
 13432  129D  003D               	movlb	29	; select bank29
 13433  129E  00A2               	movwf	34	;volatile
 13434                           
 13435                           ;UART.c: 108: CKPPS = 0b00010010;
 13436  129F  3012               	movlw	18
 13437  12A0  003C               	movlb	28	; select bank28
 13438  12A1  00A5               	movwf	37	;volatile
 13439                           
 13440                           ;UART.c: 109: RXPPS = 0b00010101;
 13441  12A2  3015               	movlw	21
 13442  12A3  00A4               	movwf	36	;volatile
 13443                           
 13444                           ;UART.c: 110: PPSLOCK =1;
 13445  12A4  3001               	movlw	1
 13446  12A5  008F               	movwf	15	;volatile
 13447                           
 13448                           ;UART.c: 112: PIR1bits.RCIF = 0;
 13449  12A6  0020               	movlb	0	; select bank0
 13450  12A7  1291               	bcf	17,5	;volatile
 13451                           
 13452                           ;UART.c: 113: INTCONbits.PEIE = 1;
 13453  12A8  170B               	bsf	11,6	;volatile
 13454  12A9  0008               	return
 13455  12AA                     __end_of_InitUART:	
 13456                           
 13457                           	psect	text35
 13458  18BB                     __ptext35:	
 13459 ;; *************** function _baudUSART *****************
 13460 ;; Defined at:
 13461 ;;		line 116 in file "UART.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  baudconfig      1    wreg     unsigned char 
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13466 ;; Return value:  Size  Location     Type
 13467 ;;		None               void
 13468 ;; Registers used:
 13469 ;;		wreg, status,2
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/0
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;Total ram usage:        1 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:    3
 13482 ;; This function calls:
 13483 ;;		Nothing
 13484 ;; This function is called by:
 13485 ;;		_InitUART
 13486 ;; This function uses a non-reentrant model
 13487 ;;
 13488                           
 13489                           
 13490                           ;psect for function _baudUSART
 13491  18BB                     _baudUSART:	
 13492                           
 13493                           ;incstack = 0
 13494                           ; Regs used in _baudUSART: [wreg+status,2]
 13495                           ;baudUSART@baudconfig stored from wreg
 13496  18BB  0020               	movlb	0	; select bank0
 13497  18BC  00A5               	movwf	baudUSART@baudconfig
 13498                           
 13499                           ;UART.c: 118: BAUD1CON =0;
 13500  18BD  0023               	movlb	3	; select bank3
 13501  18BE  019F               	clrf	31	;volatile
 13502                           
 13503                           ;UART.c: 119: BAUD1CON = baudconfig;
 13504  18BF  0020               	movlb	0	; select bank0
 13505  18C0  0825               	movf	baudUSART@baudconfig,w
 13506  18C1  0023               	movlb	3	; select bank3
 13507  18C2  009F               	movwf	31	;volatile
 13508  18C3  0008               	return
 13509  18C4                     __end_of_baudUSART:	
 13510                           
 13511                           	psect	text36
 13512  1D02                     __ptext36:	
 13513 ;; *************** function ___lldiv *****************
 13514 ;; Defined at:
 13515 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  divisor         4    5[BANK0 ] unsigned long 
 13518 ;;  dividend        4    9[BANK0 ] unsigned long 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  quotient        4   14[BANK0 ] unsigned long 
 13521 ;;  counter         1   18[BANK0 ] unsigned char 
 13522 ;; Return value:  Size  Location     Type
 13523 ;;                  4    5[BANK0 ] unsigned long 
 13524 ;; Registers used:
 13525 ;;		wreg, status,2, status,0
 13526 ;; Tracked objects:
 13527 ;;		On entry : 0/0
 13528 ;;		On exit  : 0/0
 13529 ;;		Unchanged: 0/0
 13530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13531 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;Total ram usage:       14 bytes
 13536 ;; Hardware stack levels used:    1
 13537 ;; Hardware stack levels required when called:    3
 13538 ;; This function calls:
 13539 ;;		Nothing
 13540 ;; This function is called by:
 13541 ;;		_InitUART
 13542 ;;		_sprintf
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545                           
 13546                           
 13547                           ;psect for function ___lldiv
 13548  1D02                     ___lldiv:	
 13549                           
 13550                           ;incstack = 0
 13551                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13552  1D02  3000               	movlw	0
 13553  1D03  0020               	movlb	0	; select bank0
 13554  1D04  00B1               	movwf	___lldiv@quotient+3
 13555  1D05  3000               	movlw	0
 13556  1D06  00B0               	movwf	___lldiv@quotient+2
 13557  1D07  3000               	movlw	0
 13558  1D08  00AF               	movwf	___lldiv@quotient+1
 13559  1D09  3000               	movlw	0
 13560  1D0A  00AE               	movwf	___lldiv@quotient
 13561  1D0B  0828               	movf	___lldiv@divisor+3,w
 13562  1D0C  0427               	iorwf	___lldiv@divisor+2,w
 13563  1D0D  0426               	iorwf	___lldiv@divisor+1,w
 13564  1D0E  0425               	iorwf	___lldiv@divisor,w
 13565  1D0F  1903               	skipnz
 13566  1D10  2D4C               	goto	l5992
 13567  1D11  01B2               	clrf	___lldiv@counter
 13568  1D12  0AB2               	incf	___lldiv@counter,f
 13569  1D13                     l5978:	
 13570  1D13  1BA8               	btfsc	___lldiv@divisor+3,7
 13571  1D14  2D21               	goto	l5980
 13572  1D15  3001               	movlw	1
 13573  1D16                     u7665:	
 13574  1D16  35A5               	lslf	___lldiv@divisor,f
 13575  1D17  0DA6               	rlf	___lldiv@divisor+1,f
 13576  1D18  0DA7               	rlf	___lldiv@divisor+2,f
 13577  1D19  0DA8               	rlf	___lldiv@divisor+3,f
 13578  1D1A  0B89               	decfsz	9,f
 13579  1D1B  2D16               	goto	u7665
 13580  1D1C  3001               	movlw	1
 13581  1D1D  00AD               	movwf	??___lldiv
 13582  1D1E  082D               	movf	??___lldiv,w
 13583  1D1F  07B2               	addwf	___lldiv@counter,f
 13584  1D20  2D13               	goto	l5978
 13585  1D21                     l5980:	
 13586  1D21  3001               	movlw	1
 13587  1D22                     u7685:	
 13588  1D22  35AE               	lslf	___lldiv@quotient,f
 13589  1D23  0DAF               	rlf	___lldiv@quotient+1,f
 13590  1D24  0DB0               	rlf	___lldiv@quotient+2,f
 13591  1D25  0DB1               	rlf	___lldiv@quotient+3,f
 13592  1D26  0B89               	decfsz	9,f
 13593  1D27  2D22               	goto	u7685
 13594  1D28  0828               	movf	___lldiv@divisor+3,w
 13595  1D29  022C               	subwf	___lldiv@dividend+3,w
 13596  1D2A  1D03               	skipz
 13597  1D2B  2D36               	goto	u7695
 13598  1D2C  0827               	movf	___lldiv@divisor+2,w
 13599  1D2D  022B               	subwf	___lldiv@dividend+2,w
 13600  1D2E  1D03               	skipz
 13601  1D2F  2D36               	goto	u7695
 13602  1D30  0826               	movf	___lldiv@divisor+1,w
 13603  1D31  022A               	subwf	___lldiv@dividend+1,w
 13604  1D32  1D03               	skipz
 13605  1D33  2D36               	goto	u7695
 13606  1D34  0825               	movf	___lldiv@divisor,w
 13607  1D35  0229               	subwf	___lldiv@dividend,w
 13608  1D36                     u7695:	
 13609  1D36  1C03               	skipc
 13610  1D37  2D41               	goto	l5988
 13611  1D38  0825               	movf	___lldiv@divisor,w
 13612  1D39  02A9               	subwf	___lldiv@dividend,f
 13613  1D3A  0826               	movf	___lldiv@divisor+1,w
 13614  1D3B  3BAA               	subwfb	___lldiv@dividend+1,f
 13615  1D3C  0827               	movf	___lldiv@divisor+2,w
 13616  1D3D  3BAB               	subwfb	___lldiv@dividend+2,f
 13617  1D3E  0828               	movf	___lldiv@divisor+3,w
 13618  1D3F  3BAC               	subwfb	___lldiv@dividend+3,f
 13619  1D40  142E               	bsf	___lldiv@quotient,0
 13620  1D41                     l5988:	
 13621  1D41  3001               	movlw	1
 13622  1D42                     u7705:	
 13623  1D42  36A8               	lsrf	___lldiv@divisor+3,f
 13624  1D43  0CA7               	rrf	___lldiv@divisor+2,f
 13625  1D44  0CA6               	rrf	___lldiv@divisor+1,f
 13626  1D45  0CA5               	rrf	___lldiv@divisor,f
 13627  1D46  0B89               	decfsz	9,f
 13628  1D47  2D42               	goto	u7705
 13629  1D48  3001               	movlw	1
 13630  1D49  02B2               	subwf	___lldiv@counter,f
 13631  1D4A  1D03               	btfss	3,2
 13632  1D4B  2D21               	goto	l5980
 13633  1D4C                     l5992:	
 13634  1D4C  0831               	movf	___lldiv@quotient+3,w
 13635  1D4D  00A8               	movwf	?___lldiv+3
 13636  1D4E  0830               	movf	___lldiv@quotient+2,w
 13637  1D4F  00A7               	movwf	?___lldiv+2
 13638  1D50  082F               	movf	___lldiv@quotient+1,w
 13639  1D51  00A6               	movwf	?___lldiv+1
 13640  1D52  082E               	movf	___lldiv@quotient,w
 13641  1D53  00A5               	movwf	?___lldiv
 13642  1D54  0008               	return
 13643  1D55                     __end_of___lldiv:	
 13644                           
 13645                           	psect	text37
 13646  18F0                     __ptext37:	
 13647 ;; *************** function _ReadUSART *****************
 13648 ;; Defined at:
 13649 ;;		line 234 in file "UART.c"
 13650 ;; Parameters:    Size  Location     Type
 13651 ;;		None
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;  data            1    6[BANK0 ] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      unsigned char 
 13656 ;; Registers used:
 13657 ;;		wreg
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:        2 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    3
 13670 ;; This function calls:
 13671 ;;		Nothing
 13672 ;; This function is called by:
 13673 ;;		_InitUART
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           
 13678                           ;psect for function _ReadUSART
 13679  18F0                     _ReadUSART:	
 13680                           
 13681                           ;UART.c: 236: char data;
 13682                           ;UART.c: 238: if(RCSTAbits.FERR)
 13683                           
 13684                           ;incstack = 0
 13685                           ; Regs used in _ReadUSART: [wreg]
 13686  18F0  0023               	movlb	3	; select bank3
 13687  18F1  191D               	btfsc	29,2	;volatile
 13688                           
 13689                           ;UART.c: 240: if(RCSTAbits.OERR)
 13690  18F2  1C9D               	btfss	29,1	;volatile
 13691  18F3  28F5               	goto	l5828
 13692                           
 13693                           ;UART.c: 241: RCSTAbits.CREN = 0;
 13694  18F4  121D               	bcf	29,4	;volatile
 13695  18F5                     l5828:	
 13696                           
 13697                           ;UART.c: 243: data = RCREG;
 13698  18F5  0819               	movf	25,w	;volatile
 13699  18F6  0020               	movlb	0	; select bank0
 13700  18F7  00A5               	movwf	??_ReadUSART
 13701  18F8  0825               	movf	??_ReadUSART,w
 13702  18F9  00A6               	movwf	ReadUSART@data
 13703                           
 13704                           ;UART.c: 245: return (data);
 13705  18FA  0826               	movf	ReadUSART@data,w
 13706  18FB  0008               	return
 13707  18FC                     __end_of_ReadUSART:	
 13708                           
 13709                           	psect	text38
 13710  1B58                     __ptext38:	
 13711 ;; *************** function _OpenUSART *****************
 13712 ;; Defined at:
 13713 ;;		line 122 in file "UART.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;  config          1    wreg     unsigned char 
 13716 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13717 ;; Auto vars:     Size  Location     Type
 13718 ;;  config          1    7[BANK0 ] unsigned char 
 13719 ;; Return value:  Size  Location     Type
 13720 ;;		None               void
 13721 ;; Registers used:
 13722 ;;		wreg, status,2
 13723 ;; Tracked objects:
 13724 ;;		On entry : 0/0
 13725 ;;		On exit  : 0/0
 13726 ;;		Unchanged: 0/0
 13727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13728 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;Total ram usage:        3 bytes
 13733 ;; Hardware stack levels used:    1
 13734 ;; Hardware stack levels required when called:    3
 13735 ;; This function calls:
 13736 ;;		Nothing
 13737 ;; This function is called by:
 13738 ;;		_InitUART
 13739 ;; This function uses a non-reentrant model
 13740 ;;
 13741                           
 13742                           
 13743                           ;psect for function _OpenUSART
 13744  1B58                     _OpenUSART:	
 13745                           
 13746                           ;incstack = 0
 13747                           ; Regs used in _OpenUSART: [wreg+status,2]
 13748                           ;OpenUSART@config stored from wreg
 13749  1B58  0020               	movlb	0	; select bank0
 13750  1B59  00A7               	movwf	OpenUSART@config
 13751                           
 13752                           ;UART.c: 124: TX1STA = 0;
 13753  1B5A  0023               	movlb	3	; select bank3
 13754  1B5B  019E               	clrf	30	;volatile
 13755                           
 13756                           ;UART.c: 125: RC1STA = 0;
 13757  1B5C  019D               	clrf	29	;volatile
 13758                           
 13759                           ;UART.c: 127: if(config&0x01)
 13760  1B5D  0020               	movlb	0	; select bank0
 13761  1B5E  1C27               	btfss	OpenUSART@config,0
 13762  1B5F  2B62               	goto	l5860
 13763                           
 13764                           ;UART.c: 128: {
 13765                           ;UART.c: 129: TX1STAbits.SYNC = 1;
 13766  1B60  0023               	movlb	3	; select bank3
 13767  1B61  161E               	bsf	30,4	;volatile
 13768  1B62                     l5860:	
 13769                           
 13770                           ;UART.c: 130: }
 13771                           ;UART.c: 132: if(config&0x02)
 13772  1B62  0020               	movlb	0	; select bank0
 13773  1B63  1CA7               	btfss	OpenUSART@config,1
 13774  1B64  2B68               	goto	l5864
 13775                           
 13776                           ;UART.c: 133: {
 13777                           ;UART.c: 134: TX1STAbits.TX9 = 1;
 13778  1B65  0023               	movlb	3	; select bank3
 13779  1B66  171E               	bsf	30,6	;volatile
 13780                           
 13781                           ;UART.c: 135: RC1STAbits.RX9 = 1;
 13782  1B67  171D               	bsf	29,6	;volatile
 13783  1B68                     l5864:	
 13784                           
 13785                           ;UART.c: 136: }
 13786                           ;UART.c: 138: if(config&0x04)
 13787  1B68  0020               	movlb	0	; select bank0
 13788  1B69  1D27               	btfss	OpenUSART@config,2
 13789  1B6A  2B6D               	goto	l5868
 13790                           
 13791                           ;UART.c: 139: {
 13792                           ;UART.c: 140: TX1STAbits.CSRC = 1;
 13793  1B6B  0023               	movlb	3	; select bank3
 13794  1B6C  179E               	bsf	30,7	;volatile
 13795  1B6D                     l5868:	
 13796                           
 13797                           ;UART.c: 141: }
 13798                           ;UART.c: 143: if(config&0x08)
 13799  1B6D  0020               	movlb	0	; select bank0
 13800  1B6E  1DA7               	btfss	OpenUSART@config,3
 13801  1B6F  2B73               	goto	l474
 13802                           
 13803                           ;UART.c: 144: {
 13804                           ;UART.c: 145: RC1STAbits.CREN = 1;
 13805  1B70  0023               	movlb	3	; select bank3
 13806  1B71  161D               	bsf	29,4	;volatile
 13807                           
 13808                           ;UART.c: 146: }
 13809  1B72  2B75               	goto	l5872
 13810  1B73                     l474:	
 13811                           
 13812                           ;UART.c: 147: else
 13813                           ;UART.c: 148: {
 13814                           ;UART.c: 149: RC1STAbits.SREN = 1;
 13815  1B73  0023               	movlb	3	; select bank3
 13816  1B74  169D               	bsf	29,5	;volatile
 13817  1B75                     l5872:	
 13818                           
 13819                           ;UART.c: 150: }
 13820                           ;UART.c: 152: if(config&0x10)
 13821  1B75  0020               	movlb	0	; select bank0
 13822  1B76  1E27               	btfss	OpenUSART@config,4
 13823  1B77  2B7A               	goto	l5878
 13824                           
 13825                           ;UART.c: 153: {
 13826                           ;UART.c: 154: TX1STAbits.BRGH = 1;
 13827  1B78  0023               	movlb	3	; select bank3
 13828  1B79  151E               	bsf	30,2	;volatile
 13829  1B7A                     l5878:	
 13830                           ;UART.c: 158: {
 13831                           
 13832                           
 13833                           ;UART.c: 160: }
 13834                           ;UART.c: 162: if(config&0x40)
 13835  1B7A  0020               	movlb	0	; select bank0
 13836  1B7B  1F27               	btfss	OpenUSART@config,6
 13837  1B7C  2B81               	goto	l478
 13838                           
 13839                           ;UART.c: 163: {
 13840                           ;UART.c: 164: PIR1bits.RCIF = 0;
 13841  1B7D  1291               	bcf	17,5	;volatile
 13842                           
 13843                           ;UART.c: 165: PIE1bits.RCIE = 1;
 13844  1B7E  0021               	movlb	1	; select bank1
 13845  1B7F  1691               	bsf	17,5	;volatile
 13846                           
 13847                           ;UART.c: 166: }
 13848  1B80  2B83               	goto	l5882
 13849  1B81                     l478:	
 13850                           
 13851                           ;UART.c: 167: else
 13852                           ;UART.c: 168: {
 13853                           ;UART.c: 169: PIE1bits.RCIE = 0;
 13854  1B81  0021               	movlb	1	; select bank1
 13855  1B82  1291               	bcf	17,5	;volatile
 13856  1B83                     l5882:	
 13857                           
 13858                           ;UART.c: 170: }
 13859                           ;UART.c: 172: if(config&0x80)
 13860  1B83  0020               	movlb	0	; select bank0
 13861  1B84  1FA7               	btfss	OpenUSART@config,7
 13862  1B85  2B8A               	goto	l480
 13863                           
 13864                           ;UART.c: 173: {
 13865                           ;UART.c: 174: PIR1bits.TXIF = 0;
 13866  1B86  1211               	bcf	17,4	;volatile
 13867                           
 13868                           ;UART.c: 175: PIE1bits.TXIE = 1;
 13869  1B87  0021               	movlb	1	; select bank1
 13870  1B88  1611               	bsf	17,4	;volatile
 13871                           
 13872                           ;UART.c: 176: }
 13873  1B89  2B8C               	goto	l5886
 13874  1B8A                     l480:	
 13875                           
 13876                           ;UART.c: 177: else
 13877                           ;UART.c: 178: {
 13878                           ;UART.c: 179: PIE1bits.TXIE = 0;
 13879  1B8A  0021               	movlb	1	; select bank1
 13880  1B8B  1211               	bcf	17,4	;volatile
 13881  1B8C                     l5886:	
 13882                           
 13883                           ;UART.c: 180: }
 13884                           ;UART.c: 182: SPBRG = spbrg;
 13885  1B8C  0020               	movlb	0	; select bank0
 13886  1B8D  0825               	movf	OpenUSART@spbrg,w
 13887  1B8E  0023               	movlb	3	; select bank3
 13888  1B8F  009B               	movwf	27	;volatile
 13889                           
 13890                           ;UART.c: 183: SPBRGH = spbrg >> 8;
 13891  1B90  0020               	movlb	0	; select bank0
 13892  1B91  0826               	movf	OpenUSART@spbrg+1,w
 13893  1B92  0023               	movlb	3	; select bank3
 13894  1B93  009C               	movwf	28	;volatile
 13895                           
 13896                           ;UART.c: 185: TX1STAbits.TXEN = 1;
 13897  1B94  169E               	bsf	30,5	;volatile
 13898                           
 13899                           ;UART.c: 186: RC1STAbits.SPEN = 1;
 13900  1B95  179D               	bsf	29,7	;volatile
 13901  1B96  0008               	return
 13902  1B97                     __end_of_OpenUSART:	
 13903                           
 13904                           	psect	text39
 13905  1914                     __ptext39:	
 13906 ;; *************** function _CloseUSART *****************
 13907 ;; Defined at:
 13908 ;;		line 45 in file "UART.c"
 13909 ;; Parameters:    Size  Location     Type
 13910 ;;		None
 13911 ;; Auto vars:     Size  Location     Type
 13912 ;;		None
 13913 ;; Return value:  Size  Location     Type
 13914 ;;		None               void
 13915 ;; Registers used:
 13916 ;;		wreg, status,2, status,0
 13917 ;; Tracked objects:
 13918 ;;		On entry : 0/0
 13919 ;;		On exit  : 0/0
 13920 ;;		Unchanged: 0/0
 13921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;Total ram usage:        1 bytes
 13927 ;; Hardware stack levels used:    1
 13928 ;; Hardware stack levels required when called:    3
 13929 ;; This function calls:
 13930 ;;		Nothing
 13931 ;; This function is called by:
 13932 ;;		_InitUART
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           
 13937                           ;psect for function _CloseUSART
 13938  1914                     _CloseUSART:	
 13939                           
 13940                           ;UART.c: 47: RCSTA&=0b01001111;
 13941                           
 13942                           ;incstack = 0
 13943                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13944  1914  304F               	movlw	79
 13945  1915  0020               	movlb	0	; select bank0
 13946  1916  00A5               	movwf	??_CloseUSART
 13947  1917  0825               	movf	??_CloseUSART,w
 13948  1918  0023               	movlb	3	; select bank3
 13949  1919  059D               	andwf	29,f	;volatile
 13950                           
 13951                           ;UART.c: 48: TX1STAbits.TXEN=0;
 13952  191A  129E               	bcf	30,5	;volatile
 13953                           
 13954                           ;UART.c: 49: PIE1&=0b11001111;
 13955  191B  30CF               	movlw	207
 13956  191C  0020               	movlb	0	; select bank0
 13957  191D  00A5               	movwf	??_CloseUSART
 13958  191E  0825               	movf	??_CloseUSART,w
 13959  191F  0021               	movlb	1	; select bank1
 13960  1920  0591               	andwf	17,f	;volatile
 13961  1921  0008               	return
 13962  1922                     __end_of_CloseUSART:	
 13963                           
 13964                           	psect	text40
 13965  139C                     __ptext40:	
 13966 ;; *************** function _Init_PS_2_Send *****************
 13967 ;; Defined at:
 13968 ;;		line 968 in file "PS_2.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;		None
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;		None
 13973 ;; Return value:  Size  Location     Type
 13974 ;;                  1    wreg      unsigned char 
 13975 ;; Registers used:
 13976 ;;		wreg, status,2, status,0, pclath, cstack
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;Total ram usage:        0 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    5
 13989 ;; This function calls:
 13990 ;;		_PS_2_DISABLE_INTERRUPT
 13991 ;;		_PS_2_ENABLE_INTERRUPT
 13992 ;;		_Send_PS2
 13993 ;;		_delayUS
 13994 ;; This function is called by:
 13995 ;;		_main
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           
 14000                           ;psect for function _Init_PS_2_Send
 14001  139C                     _Init_PS_2_Send:	
 14002                           
 14003                           ;PS_2.c: 970: PS_2_DISABLE_INTERRUPT(0b00100000);
 14004                           
 14005                           ;incstack = 0
 14006                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 14007  139C  3020               	movlw	32
 14008  139D  3199  21DD  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 14009                           
 14010                           ;PS_2.c: 973: if(Send_PS2(0xED))
 14011  13A0  30ED               	movlw	237
 14012  13A1  318C  24A9  3193   	fcall	_Send_PS2
 14013  13A4  3A00               	xorlw	0
 14014  13A5  1903               	skipnz
 14015  13A6  2BA9               	goto	l7302
 14016                           
 14017                           ;PS_2.c: 974: {
 14018                           ;PS_2.c: 975: return 0;
 14019  13A7  3000               	movlw	0
 14020  13A8  0008               	return
 14021  13A9                     l7302:	
 14022                           
 14023                           ;PS_2.c: 976: }
 14024                           ;PS_2.c: 977: delayUS(100);
 14025  13A9  3000               	movlw	0
 14026  13AA  0020               	movlb	0	; select bank0
 14027  13AB  00A8               	movwf	delayUS@US+3
 14028  13AC  3000               	movlw	0
 14029  13AD  00A7               	movwf	delayUS@US+2
 14030  13AE  3000               	movlw	0
 14031  13AF  00A6               	movwf	delayUS@US+1
 14032  13B0  3064               	movlw	100
 14033  13B1  00A5               	movwf	delayUS@US
 14034  13B2  319B  2323  3193   	fcall	_delayUS
 14035                           
 14036                           ;PS_2.c: 978: if(Send_PS2(0x01))
 14037  13B5  3001               	movlw	1
 14038  13B6  318C  24A9  3193   	fcall	_Send_PS2
 14039  13B9  3A00               	xorlw	0
 14040  13BA  1903               	skipnz
 14041  13BB  2BBE               	goto	l7308
 14042                           
 14043                           ;PS_2.c: 979: {
 14044                           ;PS_2.c: 980: return 0;
 14045  13BC  3000               	movlw	0
 14046  13BD  0008               	return
 14047  13BE                     l7308:	
 14048                           
 14049                           ;PS_2.c: 981: }
 14050                           ;PS_2.c: 982: delayUS(5000);
 14051  13BE  3000               	movlw	0
 14052  13BF  0020               	movlb	0	; select bank0
 14053  13C0  00A8               	movwf	delayUS@US+3
 14054  13C1  3000               	movlw	0
 14055  13C2  00A7               	movwf	delayUS@US+2
 14056  13C3  3013               	movlw	19
 14057  13C4  00A6               	movwf	delayUS@US+1
 14058  13C5  3088               	movlw	136
 14059  13C6  00A5               	movwf	delayUS@US
 14060  13C7  319B  2323  3193   	fcall	_delayUS
 14061                           
 14062                           ;PS_2.c: 985: if(Send_PS2(0xED))
 14063  13CA  30ED               	movlw	237
 14064  13CB  318C  24A9  3193   	fcall	_Send_PS2
 14065  13CE  3A00               	xorlw	0
 14066  13CF  1903               	skipnz
 14067  13D0  2BD3               	goto	l7314
 14068                           
 14069                           ;PS_2.c: 986: {
 14070                           ;PS_2.c: 987: return 0;
 14071  13D1  3000               	movlw	0
 14072  13D2  0008               	return
 14073  13D3                     l7314:	
 14074                           
 14075                           ;PS_2.c: 988: }
 14076                           ;PS_2.c: 989: delayUS(100);
 14077  13D3  3000               	movlw	0
 14078  13D4  0020               	movlb	0	; select bank0
 14079  13D5  00A8               	movwf	delayUS@US+3
 14080  13D6  3000               	movlw	0
 14081  13D7  00A7               	movwf	delayUS@US+2
 14082  13D8  3000               	movlw	0
 14083  13D9  00A6               	movwf	delayUS@US+1
 14084  13DA  3064               	movlw	100
 14085  13DB  00A5               	movwf	delayUS@US
 14086  13DC  319B  2323  3193   	fcall	_delayUS
 14087                           
 14088                           ;PS_2.c: 990: if(Send_PS2(0x04))
 14089  13DF  3004               	movlw	4
 14090  13E0  318C  24A9  3193   	fcall	_Send_PS2
 14091  13E3  3A00               	xorlw	0
 14092  13E4  1903               	skipnz
 14093  13E5  2BE8               	goto	l7320
 14094                           
 14095                           ;PS_2.c: 991: {
 14096                           ;PS_2.c: 992: return 0;
 14097  13E6  3000               	movlw	0
 14098  13E7  0008               	return
 14099  13E8                     l7320:	
 14100                           
 14101                           ;PS_2.c: 993: }
 14102                           ;PS_2.c: 994: delayUS(5000);
 14103  13E8  3000               	movlw	0
 14104  13E9  0020               	movlb	0	; select bank0
 14105  13EA  00A8               	movwf	delayUS@US+3
 14106  13EB  3000               	movlw	0
 14107  13EC  00A7               	movwf	delayUS@US+2
 14108  13ED  3013               	movlw	19
 14109  13EE  00A6               	movwf	delayUS@US+1
 14110  13EF  3088               	movlw	136
 14111  13F0  00A5               	movwf	delayUS@US
 14112  13F1  319B  2323  3193   	fcall	_delayUS
 14113                           
 14114                           ;PS_2.c: 997: if(Send_PS2(0xED))
 14115  13F4  30ED               	movlw	237
 14116  13F5  318C  24A9  3193   	fcall	_Send_PS2
 14117  13F8  3A00               	xorlw	0
 14118  13F9  1903               	skipnz
 14119  13FA  2BFD               	goto	l7326
 14120                           
 14121                           ;PS_2.c: 998: {
 14122                           ;PS_2.c: 999: return 0;
 14123  13FB  3000               	movlw	0
 14124  13FC  0008               	return
 14125  13FD                     l7326:	
 14126                           
 14127                           ;PS_2.c: 1000: }
 14128                           ;PS_2.c: 1001: delayUS(1000);
 14129  13FD  3000               	movlw	0
 14130  13FE  0020               	movlb	0	; select bank0
 14131  13FF  00A8               	movwf	delayUS@US+3
 14132  1400  3000               	movlw	0
 14133  1401  00A7               	movwf	delayUS@US+2
 14134  1402  3003               	movlw	3
 14135  1403  00A6               	movwf	delayUS@US+1
 14136  1404  30E8               	movlw	232
 14137  1405  00A5               	movwf	delayUS@US
 14138  1406  319B  2323  3193   	fcall	_delayUS
 14139                           
 14140                           ;PS_2.c: 1002: if(Send_PS2(0x02))
 14141  1409  3002               	movlw	2
 14142  140A  318C  24A9  3193   	fcall	_Send_PS2
 14143  140D  3A00               	xorlw	0
 14144  140E  1903               	skipnz
 14145  140F  2C12               	goto	l7332
 14146                           
 14147                           ;PS_2.c: 1003: {
 14148                           ;PS_2.c: 1004: return 0;
 14149  1410  3000               	movlw	0
 14150  1411  0008               	return
 14151  1412                     l7332:	
 14152                           
 14153                           ;PS_2.c: 1005: }
 14154                           ;PS_2.c: 1006: delayUS(5000);
 14155  1412  3000               	movlw	0
 14156  1413  0020               	movlb	0	; select bank0
 14157  1414  00A8               	movwf	delayUS@US+3
 14158  1415  3000               	movlw	0
 14159  1416  00A7               	movwf	delayUS@US+2
 14160  1417  3013               	movlw	19
 14161  1418  00A6               	movwf	delayUS@US+1
 14162  1419  3088               	movlw	136
 14163  141A  00A5               	movwf	delayUS@US
 14164  141B  319B  2323  3193   	fcall	_delayUS
 14165                           
 14166                           ;PS_2.c: 1009: if(Send_PS2(0xED))
 14167  141E  30ED               	movlw	237
 14168  141F  318C  24A9  3193   	fcall	_Send_PS2
 14169  1422  3A00               	xorlw	0
 14170  1423  1903               	skipnz
 14171  1424  2C27               	goto	l7338
 14172                           
 14173                           ;PS_2.c: 1010: {
 14174                           ;PS_2.c: 1011: return 0;
 14175  1425  3000               	movlw	0
 14176  1426  0008               	return
 14177  1427                     l7338:	
 14178                           
 14179                           ;PS_2.c: 1012: }
 14180                           ;PS_2.c: 1013: delayUS(100);
 14181  1427  3000               	movlw	0
 14182  1428  0020               	movlb	0	; select bank0
 14183  1429  00A8               	movwf	delayUS@US+3
 14184  142A  3000               	movlw	0
 14185  142B  00A7               	movwf	delayUS@US+2
 14186  142C  3000               	movlw	0
 14187  142D  00A6               	movwf	delayUS@US+1
 14188  142E  3064               	movlw	100
 14189  142F  00A5               	movwf	delayUS@US
 14190  1430  319B  2323  3193   	fcall	_delayUS
 14191                           
 14192                           ;PS_2.c: 1014: if(Send_PS2(0x00))
 14193  1433  3000               	movlw	0
 14194  1434  318C  24A9  3193   	fcall	_Send_PS2
 14195  1437  3A00               	xorlw	0
 14196  1438  1903               	skipnz
 14197  1439  2C3C               	goto	l7344
 14198                           
 14199                           ;PS_2.c: 1015: {
 14200                           ;PS_2.c: 1016: return 0;
 14201  143A  3000               	movlw	0
 14202  143B  0008               	return
 14203  143C                     l7344:	
 14204                           
 14205                           ;PS_2.c: 1017: }
 14206                           ;PS_2.c: 1020: if(Send_PS2(0xf4))
 14207  143C  30F4               	movlw	244
 14208  143D  318C  24A9  3193   	fcall	_Send_PS2
 14209  1440  3A00               	xorlw	0
 14210  1441  1903               	skipnz
 14211  1442  2C45               	goto	l7350
 14212                           
 14213                           ;PS_2.c: 1021: {
 14214                           ;PS_2.c: 1022: return 0;
 14215  1443  3000               	movlw	0
 14216  1444  0008               	return
 14217  1445                     l7350:	
 14218                           
 14219                           ;PS_2.c: 1023: }
 14220                           ;PS_2.c: 1026: if(Send_PS2(0xf4))
 14221  1445  30F4               	movlw	244
 14222  1446  318C  24A9  3193   	fcall	_Send_PS2
 14223  1449  3A00               	xorlw	0
 14224  144A  1903               	skipnz
 14225  144B  2C4E               	goto	l7356
 14226                           
 14227                           ;PS_2.c: 1027: {
 14228                           ;PS_2.c: 1028: return 0;
 14229  144C  3000               	movlw	0
 14230  144D  0008               	return
 14231  144E                     l7356:	
 14232                           
 14233                           ;PS_2.c: 1029: }
 14234                           ;PS_2.c: 1032: if(Send_PS2(0xf0))
 14235  144E  30F0               	movlw	240
 14236  144F  318C  24A9  3193   	fcall	_Send_PS2
 14237  1452  3A00               	xorlw	0
 14238  1453  1903               	skipnz
 14239  1454  2C57               	goto	l7362
 14240                           
 14241                           ;PS_2.c: 1033: {
 14242                           ;PS_2.c: 1034: return 0;
 14243  1455  3000               	movlw	0
 14244  1456  0008               	return
 14245  1457                     l7362:	
 14246                           
 14247                           ;PS_2.c: 1035: }
 14248                           ;PS_2.c: 1036: delayUS(100);
 14249  1457  3000               	movlw	0
 14250  1458  0020               	movlb	0	; select bank0
 14251  1459  00A8               	movwf	delayUS@US+3
 14252  145A  3000               	movlw	0
 14253  145B  00A7               	movwf	delayUS@US+2
 14254  145C  3000               	movlw	0
 14255  145D  00A6               	movwf	delayUS@US+1
 14256  145E  3064               	movlw	100
 14257  145F  00A5               	movwf	delayUS@US
 14258  1460  319B  2323  3193   	fcall	_delayUS
 14259                           
 14260                           ;PS_2.c: 1037: if(Send_PS2(0x02))
 14261  1463  3002               	movlw	2
 14262  1464  318C  24A9  3193   	fcall	_Send_PS2
 14263  1467  3A00               	xorlw	0
 14264  1468  1903               	skipnz
 14265  1469  2C6C               	goto	l7368
 14266                           
 14267                           ;PS_2.c: 1038: {
 14268                           ;PS_2.c: 1039: return 0;
 14269  146A  3000               	movlw	0
 14270  146B  0008               	return
 14271  146C                     l7368:	
 14272                           
 14273                           ;PS_2.c: 1040: }
 14274                           ;PS_2.c: 1043: if(Send_PS2(0xf3))
 14275  146C  30F3               	movlw	243
 14276  146D  318C  24A9  3193   	fcall	_Send_PS2
 14277  1470  3A00               	xorlw	0
 14278  1471  1903               	skipnz
 14279  1472  2C75               	goto	l7374
 14280                           
 14281                           ;PS_2.c: 1044: {
 14282                           ;PS_2.c: 1045: return 0;
 14283  1473  3000               	movlw	0
 14284  1474  0008               	return
 14285  1475                     l7374:	
 14286                           
 14287                           ;PS_2.c: 1046: }
 14288                           ;PS_2.c: 1047: delayUS(100);
 14289  1475  3000               	movlw	0
 14290  1476  0020               	movlb	0	; select bank0
 14291  1477  00A8               	movwf	delayUS@US+3
 14292  1478  3000               	movlw	0
 14293  1479  00A7               	movwf	delayUS@US+2
 14294  147A  3000               	movlw	0
 14295  147B  00A6               	movwf	delayUS@US+1
 14296  147C  3064               	movlw	100
 14297  147D  00A5               	movwf	delayUS@US
 14298  147E  319B  2323  3193   	fcall	_delayUS
 14299                           
 14300                           ;PS_2.c: 1048: if(Send_PS2(0x2F))
 14301  1481  302F               	movlw	47
 14302  1482  318C  24A9  3193   	fcall	_Send_PS2
 14303  1485  3A00               	xorlw	0
 14304  1486  1903               	skipnz
 14305  1487  2C8A               	goto	l7380
 14306                           
 14307                           ;PS_2.c: 1049: {
 14308                           ;PS_2.c: 1050: return 0;
 14309  1488  3000               	movlw	0
 14310  1489  0008               	return
 14311  148A                     l7380:	
 14312                           
 14313                           ;PS_2.c: 1051: }
 14314                           ;PS_2.c: 1053: PS_2_ENABLE_INTERRUPT(0b00100000);
 14315  148A  3020               	movlw	32
 14316  148B  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
 14317                           
 14318                           ;PS_2.c: 1054: return 1;
 14319  148D  3001               	movlw	1
 14320  148E  0008               	return
 14321  148F                     __end_of_Init_PS_2_Send:	
 14322                           
 14323                           	psect	text41
 14324  0CA9                     __ptext41:	
 14325 ;; *************** function _Send_PS2 *****************
 14326 ;; Defined at:
 14327 ;;		line 812 in file "PS_2.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;  command         1    wreg     unsigned char 
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;  command         1   20[BANK0 ] unsigned char 
 14332 ;;  timeout         2   22[BANK0 ] unsigned int 
 14333 ;;  i               1   21[BANK0 ] unsigned char 
 14334 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14335 ;; Return value:  Size  Location     Type
 14336 ;;                  1    wreg      unsigned char 
 14337 ;; Registers used:
 14338 ;;		wreg, status,2, status,0, pclath, cstack
 14339 ;; Tracked objects:
 14340 ;;		On entry : 0/0
 14341 ;;		On exit  : 0/0
 14342 ;;		Unchanged: 0/0
 14343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;Total ram usage:        9 bytes
 14349 ;; Hardware stack levels used:    1
 14350 ;; Hardware stack levels required when called:    4
 14351 ;; This function calls:
 14352 ;;		_CheckSum_byte
 14353 ;;		_Clock_TRIS
 14354 ;;		_Data_TRIS
 14355 ;;		_PS_2_ENABLE_INTERRUPT
 14356 ;;		_READ_PS_2_PIN
 14357 ;;		_delayUS
 14358 ;; This function is called by:
 14359 ;;		_PS_2_Update
 14360 ;;		_Init_PS_2_Send
 14361 ;;		_Keyboard_Connected
 14362 ;; This function uses a non-reentrant model
 14363 ;;
 14364                           
 14365                           
 14366                           ;psect for function _Send_PS2
 14367  0CA9                     _Send_PS2:	
 14368                           
 14369                           ;incstack = 0
 14370                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14371                           ;Send_PS2@command stored from wreg
 14372  0CA9  0020               	movlb	0	; select bank0
 14373  0CAA  00B4               	movwf	Send_PS2@command
 14374                           
 14375                           ;PS_2.c: 814: unsigned char i=0;
 14376  0CAB  01B5               	clrf	Send_PS2@i
 14377                           
 14378                           ;PS_2.c: 815: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14379  0CAC  0834               	movf	Send_PS2@command,w
 14380  0CAD  00AF               	movwf	??_Send_PS2
 14381  0CAE  01B0               	clrf	??_Send_PS2+1
 14382  0CAF  082F               	movf	??_Send_PS2,w
 14383  0CB0  00A5               	movwf	CheckSum_byte@This
 14384  0CB1  0830               	movf	??_Send_PS2+1,w
 14385  0CB2  00A6               	movwf	CheckSum_byte@This+1
 14386  0CB3  3003               	movlw	3
 14387  0CB4  00B1               	movwf	??_Send_PS2+2
 14388  0CB5  0831               	movf	??_Send_PS2+2,w
 14389  0CB6  00A7               	movwf	CheckSum_byte@Odd_Even
 14390  0CB7  319A  225C  318C   	fcall	_CheckSum_byte
 14391  0CBA  0020               	movlb	0	; select bank0
 14392  0CBB  00B2               	movwf	??_Send_PS2+3
 14393  0CBC  0832               	movf	??_Send_PS2+3,w
 14394  0CBD  00B3               	movwf	Send_PS2@oddparity
 14395                           
 14396                           ;PS_2.c: 816: unsigned int timeout =0;
 14397  0CBE  01B6               	clrf	Send_PS2@timeout
 14398  0CBF  01B7               	clrf	Send_PS2@timeout+1
 14399                           
 14400                           ;PS_2.c: 818: Clock_TRIS(0);
 14401  0CC0  3000               	movlw	0
 14402  0CC1  3198  20CF  318C   	fcall	_Clock_TRIS
 14403                           
 14404                           ;PS_2.c: 819: Data_TRIS(0);
 14405  0CC4  3000               	movlw	0
 14406  0CC5  3198  20DA  318C   	fcall	_Data_TRIS
 14407                           
 14408                           ;PS_2.c: 820: LATA &= ~0b00100000;
 14409  0CC8  30DF               	movlw	223
 14410  0CC9  0020               	movlb	0	; select bank0
 14411  0CCA  00AF               	movwf	??_Send_PS2
 14412  0CCB  082F               	movf	??_Send_PS2,w
 14413  0CCC  0022               	movlb	2	; select bank2
 14414  0CCD  058C               	andwf	12,f	;volatile
 14415                           
 14416                           ;PS_2.c: 821: delayUS(300);
 14417  0CCE  3000               	movlw	0
 14418  0CCF  0020               	movlb	0	; select bank0
 14419  0CD0  00A8               	movwf	delayUS@US+3
 14420  0CD1  3000               	movlw	0
 14421  0CD2  00A7               	movwf	delayUS@US+2
 14422  0CD3  3001               	movlw	1
 14423  0CD4  00A6               	movwf	delayUS@US+1
 14424  0CD5  302C               	movlw	44
 14425  0CD6  00A5               	movwf	delayUS@US
 14426  0CD7  319B  2323  318C   	fcall	_delayUS
 14427                           
 14428                           ;PS_2.c: 822: LATA &= ~0b00010000;
 14429  0CDA  30EF               	movlw	239
 14430  0CDB  0020               	movlb	0	; select bank0
 14431  0CDC  00AF               	movwf	??_Send_PS2
 14432  0CDD  082F               	movf	??_Send_PS2,w
 14433  0CDE  0022               	movlb	2	; select bank2
 14434  0CDF  058C               	andwf	12,f	;volatile
 14435                           
 14436                           ;PS_2.c: 823: delayUS(20);
 14437  0CE0  3000               	movlw	0
 14438  0CE1  0020               	movlb	0	; select bank0
 14439  0CE2  00A8               	movwf	delayUS@US+3
 14440  0CE3  3000               	movlw	0
 14441  0CE4  00A7               	movwf	delayUS@US+2
 14442  0CE5  3000               	movlw	0
 14443  0CE6  00A6               	movwf	delayUS@US+1
 14444  0CE7  3014               	movlw	20
 14445  0CE8  00A5               	movwf	delayUS@US
 14446  0CE9  319B  2323  318C   	fcall	_delayUS
 14447                           
 14448                           ;PS_2.c: 824: Clock_TRIS(1);
 14449  0CEC  3001               	movlw	1
 14450  0CED  3198  20CF  318C   	fcall	_Clock_TRIS
 14451                           
 14452                           ;PS_2.c: 825: timeout=0;
 14453  0CF0  0020               	movlb	0	; select bank0
 14454  0CF1  01B6               	clrf	Send_PS2@timeout
 14455  0CF2  01B7               	clrf	Send_PS2@timeout+1
 14456  0CF3                     l6348:	
 14457                           ;PS_2.c: 826: while(READ_PS_2_PIN(0b00100000))
 14458                           
 14459  0CF3  3020               	movlw	32
 14460  0CF4  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14461  0CF7  3800               	iorlw	0
 14462  0CF8  1903               	btfsc	3,2
 14463  0CF9  2D10               	goto	l6350
 14464                           
 14465                           ;PS_2.c: 827: {
 14466                           ;PS_2.c: 828: __nop();
 14467  0CFA  0000               	nop
 14468                           
 14469                           ;PS_2.c: 829: timeout++;
 14470  0CFB  3001               	movlw	1
 14471  0CFC  0020               	movlb	0	; select bank0
 14472  0CFD  07B6               	addwf	Send_PS2@timeout,f
 14473  0CFE  3000               	movlw	0
 14474  0CFF  3DB7               	addwfc	Send_PS2@timeout+1,f
 14475                           
 14476                           ;PS_2.c: 830: if(timeout > 15000)
 14477  0D00  303A               	movlw	58
 14478  0D01  0237               	subwf	Send_PS2@timeout+1,w
 14479  0D02  3099               	movlw	153
 14480  0D03  1903               	skipnz
 14481  0D04  0236               	subwf	Send_PS2@timeout,w
 14482  0D05  1C03               	skipc
 14483  0D06  2CF3               	goto	l6348
 14484                           
 14485                           ;PS_2.c: 831: {
 14486                           ;PS_2.c: 832: Clock_TRIS(1);
 14487  0D07  3001               	movlw	1
 14488  0D08  3198  20CF  318C   	fcall	_Clock_TRIS
 14489                           
 14490                           ;PS_2.c: 833: Data_TRIS(1);
 14491  0D0B  3001               	movlw	1
 14492  0D0C  3198  20DA         	fcall	_Data_TRIS
 14493                           
 14494                           ;PS_2.c: 834: return 1;
 14495  0D0E  3001               	movlw	1
 14496  0D0F  0008               	return
 14497  0D10                     l6350:	
 14498                           
 14499                           ;PS_2.c: 835: }
 14500                           ;PS_2.c: 836: }
 14501                           ;PS_2.c: 837: for(i=0;i<8;i++)
 14502  0D10  0020               	movlb	0	; select bank0
 14503  0D11  01B5               	clrf	Send_PS2@i
 14504  0D12  3008               	movlw	8
 14505  0D13  0235               	subwf	Send_PS2@i,w
 14506  0D14  1803               	btfsc	3,0
 14507  0D15  2D6C               	goto	l908
 14508  0D16                     l907:	
 14509                           
 14510                           ;PS_2.c: 838: {
 14511                           ;PS_2.c: 839: if(command & 0x1)
 14512  0D16  1C34               	btfss	Send_PS2@command,0
 14513  0D17  2D1B               	goto	l6358
 14514                           
 14515                           ;PS_2.c: 840: {
 14516                           ;PS_2.c: 841: LATA |= 0b00010000;
 14517  0D18  0022               	movlb	2	; select bank2
 14518  0D19  160C               	bsf	12,4	;volatile
 14519                           
 14520                           ;PS_2.c: 842: }
 14521  0D1A  2D21               	goto	l6360
 14522  0D1B                     l6358:	
 14523                           
 14524                           ;PS_2.c: 843: else
 14525                           ;PS_2.c: 844: {
 14526                           ;PS_2.c: 845: LATA &= ~0b00010000;
 14527  0D1B  30EF               	movlw	239
 14528  0D1C  0020               	movlb	0	; select bank0
 14529  0D1D  00AF               	movwf	??_Send_PS2
 14530  0D1E  082F               	movf	??_Send_PS2,w
 14531  0D1F  0022               	movlb	2	; select bank2
 14532  0D20  058C               	andwf	12,f	;volatile
 14533  0D21                     l6360:	
 14534                           
 14535                           ;PS_2.c: 846: }
 14536                           ;PS_2.c: 847: command >> = 1;
 14537  0D21  1003               	clrc
 14538  0D22  0020               	movlb	0	; select bank0
 14539  0D23  0CB4               	rrf	Send_PS2@command,f
 14540                           
 14541                           ;PS_2.c: 848: timeout=0;
 14542  0D24  01B6               	clrf	Send_PS2@timeout
 14543  0D25  01B7               	clrf	Send_PS2@timeout+1
 14544  0D26                     l6372:	
 14545                           ;PS_2.c: 849: while(!READ_PS_2_PIN(0b00100000))
 14546                           
 14547  0D26  3020               	movlw	32
 14548  0D27  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14549  0D2A  3A00               	xorlw	0
 14550  0D2B  1D03               	btfss	3,2
 14551  0D2C  2D43               	goto	l6374
 14552                           
 14553                           ;PS_2.c: 850: {
 14554                           ;PS_2.c: 851: __nop();
 14555  0D2D  0000               	nop
 14556                           
 14557                           ;PS_2.c: 852: timeout++;
 14558  0D2E  3001               	movlw	1
 14559  0D2F  0020               	movlb	0	; select bank0
 14560  0D30  07B6               	addwf	Send_PS2@timeout,f
 14561  0D31  3000               	movlw	0
 14562  0D32  3DB7               	addwfc	Send_PS2@timeout+1,f
 14563                           
 14564                           ;PS_2.c: 853: if(timeout > 15000)
 14565  0D33  303A               	movlw	58
 14566  0D34  0237               	subwf	Send_PS2@timeout+1,w
 14567  0D35  3099               	movlw	153
 14568  0D36  1903               	skipnz
 14569  0D37  0236               	subwf	Send_PS2@timeout,w
 14570  0D38  1C03               	skipc
 14571  0D39  2D26               	goto	l6372
 14572                           
 14573                           ;PS_2.c: 854: {
 14574                           ;PS_2.c: 855: Clock_TRIS(1);
 14575  0D3A  3001               	movlw	1
 14576  0D3B  3198  20CF  318C   	fcall	_Clock_TRIS
 14577                           
 14578                           ;PS_2.c: 856: Data_TRIS(1);
 14579  0D3E  3001               	movlw	1
 14580  0D3F  3198  20DA         	fcall	_Data_TRIS
 14581                           
 14582                           ;PS_2.c: 857: return 1;
 14583  0D41  3001               	movlw	1
 14584  0D42  0008               	return
 14585  0D43                     l6374:	
 14586                           
 14587                           ;PS_2.c: 858: }
 14588                           ;PS_2.c: 859: }
 14589                           ;PS_2.c: 860: timeout=0;
 14590  0D43  0020               	movlb	0	; select bank0
 14591  0D44  01B6               	clrf	Send_PS2@timeout
 14592  0D45  01B7               	clrf	Send_PS2@timeout+1
 14593  0D46                     l6384:	
 14594                           ;PS_2.c: 861: while(READ_PS_2_PIN(0b00100000))
 14595                           
 14596  0D46  3020               	movlw	32
 14597  0D47  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14598  0D4A  3800               	iorlw	0
 14599  0D4B  1903               	btfsc	3,2
 14600  0D4C  2D63               	goto	l6386
 14601                           
 14602                           ;PS_2.c: 862: {
 14603                           ;PS_2.c: 863: __nop();
 14604  0D4D  0000               	nop
 14605                           
 14606                           ;PS_2.c: 864: timeout++;
 14607  0D4E  3001               	movlw	1
 14608  0D4F  0020               	movlb	0	; select bank0
 14609  0D50  07B6               	addwf	Send_PS2@timeout,f
 14610  0D51  3000               	movlw	0
 14611  0D52  3DB7               	addwfc	Send_PS2@timeout+1,f
 14612                           
 14613                           ;PS_2.c: 865: if(timeout > 15000)
 14614  0D53  303A               	movlw	58
 14615  0D54  0237               	subwf	Send_PS2@timeout+1,w
 14616  0D55  3099               	movlw	153
 14617  0D56  1903               	skipnz
 14618  0D57  0236               	subwf	Send_PS2@timeout,w
 14619  0D58  1C03               	skipc
 14620  0D59  2D46               	goto	l6384
 14621                           
 14622                           ;PS_2.c: 866: {
 14623                           ;PS_2.c: 867: Clock_TRIS(1);
 14624  0D5A  3001               	movlw	1
 14625  0D5B  3198  20CF  318C   	fcall	_Clock_TRIS
 14626                           
 14627                           ;PS_2.c: 868: Data_TRIS(1);
 14628  0D5E  3001               	movlw	1
 14629  0D5F  3198  20DA         	fcall	_Data_TRIS
 14630                           
 14631                           ;PS_2.c: 869: return 1;
 14632  0D61  3001               	movlw	1
 14633  0D62  0008               	return
 14634  0D63                     l6386:	
 14635  0D63  3001               	movlw	1
 14636  0D64  0020               	movlb	0	; select bank0
 14637  0D65  00AF               	movwf	??_Send_PS2
 14638  0D66  082F               	movf	??_Send_PS2,w
 14639  0D67  07B5               	addwf	Send_PS2@i,f
 14640  0D68  3008               	movlw	8
 14641  0D69  0235               	subwf	Send_PS2@i,w
 14642  0D6A  1C03               	skipc
 14643  0D6B  2D16               	goto	l907
 14644  0D6C                     l908:	
 14645                           
 14646                           ;PS_2.c: 870: }
 14647                           ;PS_2.c: 871: }
 14648                           ;PS_2.c: 872: }
 14649                           ;PS_2.c: 874: if(oddparity & 0x1)
 14650  0D6C  1C33               	btfss	Send_PS2@oddparity,0
 14651  0D6D  2D71               	goto	l6392
 14652                           
 14653                           ;PS_2.c: 875: {
 14654                           ;PS_2.c: 876: LATA |= 0b00010000;
 14655  0D6E  0022               	movlb	2	; select bank2
 14656  0D6F  160C               	bsf	12,4	;volatile
 14657                           
 14658                           ;PS_2.c: 877: }
 14659  0D70  2D77               	goto	l6394
 14660  0D71                     l6392:	
 14661                           
 14662                           ;PS_2.c: 878: else
 14663                           ;PS_2.c: 879: {
 14664                           ;PS_2.c: 880: LATA &= ~0b00010000;
 14665  0D71  30EF               	movlw	239
 14666  0D72  0020               	movlb	0	; select bank0
 14667  0D73  00AF               	movwf	??_Send_PS2
 14668  0D74  082F               	movf	??_Send_PS2,w
 14669  0D75  0022               	movlb	2	; select bank2
 14670  0D76  058C               	andwf	12,f	;volatile
 14671  0D77                     l6394:	
 14672                           
 14673                           ;PS_2.c: 881: }
 14674                           ;PS_2.c: 882: timeout=0;
 14675  0D77  0020               	movlb	0	; select bank0
 14676  0D78  01B6               	clrf	Send_PS2@timeout
 14677  0D79  01B7               	clrf	Send_PS2@timeout+1
 14678  0D7A                     l6404:	
 14679                           ;PS_2.c: 883: while(!READ_PS_2_PIN(0b00100000))
 14680                           
 14681  0D7A  3020               	movlw	32
 14682  0D7B  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14683  0D7E  3A00               	xorlw	0
 14684  0D7F  1D03               	btfss	3,2
 14685  0D80  2D97               	goto	l6406
 14686                           
 14687                           ;PS_2.c: 884: {
 14688                           ;PS_2.c: 885: __nop();
 14689  0D81  0000               	nop
 14690                           
 14691                           ;PS_2.c: 886: timeout++;
 14692  0D82  3001               	movlw	1
 14693  0D83  0020               	movlb	0	; select bank0
 14694  0D84  07B6               	addwf	Send_PS2@timeout,f
 14695  0D85  3000               	movlw	0
 14696  0D86  3DB7               	addwfc	Send_PS2@timeout+1,f
 14697                           
 14698                           ;PS_2.c: 887: if(timeout > 15000)
 14699  0D87  303A               	movlw	58
 14700  0D88  0237               	subwf	Send_PS2@timeout+1,w
 14701  0D89  3099               	movlw	153
 14702  0D8A  1903               	skipnz
 14703  0D8B  0236               	subwf	Send_PS2@timeout,w
 14704  0D8C  1C03               	skipc
 14705  0D8D  2D7A               	goto	l6404
 14706                           
 14707                           ;PS_2.c: 888: {
 14708                           ;PS_2.c: 889: Clock_TRIS(1);
 14709  0D8E  3001               	movlw	1
 14710  0D8F  3198  20CF  318C   	fcall	_Clock_TRIS
 14711                           
 14712                           ;PS_2.c: 890: Data_TRIS(1);
 14713  0D92  3001               	movlw	1
 14714  0D93  3198  20DA         	fcall	_Data_TRIS
 14715                           
 14716                           ;PS_2.c: 891: return 1;
 14717  0D95  3001               	movlw	1
 14718  0D96  0008               	return
 14719  0D97                     l6406:	
 14720                           
 14721                           ;PS_2.c: 892: }
 14722                           ;PS_2.c: 893: }
 14723                           ;PS_2.c: 894: timeout=0;
 14724  0D97  0020               	movlb	0	; select bank0
 14725  0D98  01B6               	clrf	Send_PS2@timeout
 14726  0D99  01B7               	clrf	Send_PS2@timeout+1
 14727  0D9A                     l6416:	
 14728                           ;PS_2.c: 895: while(READ_PS_2_PIN(0b00100000))
 14729                           
 14730  0D9A  3020               	movlw	32
 14731  0D9B  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14732  0D9E  3800               	iorlw	0
 14733  0D9F  1903               	btfsc	3,2
 14734  0DA0  2DB7               	goto	l6418
 14735                           
 14736                           ;PS_2.c: 896: {
 14737                           ;PS_2.c: 897: __nop();
 14738  0DA1  0000               	nop
 14739                           
 14740                           ;PS_2.c: 898: timeout++;
 14741  0DA2  3001               	movlw	1
 14742  0DA3  0020               	movlb	0	; select bank0
 14743  0DA4  07B6               	addwf	Send_PS2@timeout,f
 14744  0DA5  3000               	movlw	0
 14745  0DA6  3DB7               	addwfc	Send_PS2@timeout+1,f
 14746                           
 14747                           ;PS_2.c: 899: if(timeout > 15000)
 14748  0DA7  303A               	movlw	58
 14749  0DA8  0237               	subwf	Send_PS2@timeout+1,w
 14750  0DA9  3099               	movlw	153
 14751  0DAA  1903               	skipnz
 14752  0DAB  0236               	subwf	Send_PS2@timeout,w
 14753  0DAC  1C03               	skipc
 14754  0DAD  2D9A               	goto	l6416
 14755                           
 14756                           ;PS_2.c: 900: {
 14757                           ;PS_2.c: 901: Clock_TRIS(1);
 14758  0DAE  3001               	movlw	1
 14759  0DAF  3198  20CF  318C   	fcall	_Clock_TRIS
 14760                           
 14761                           ;PS_2.c: 902: Data_TRIS(1);
 14762  0DB2  3001               	movlw	1
 14763  0DB3  3198  20DA         	fcall	_Data_TRIS
 14764                           
 14765                           ;PS_2.c: 903: return 1;
 14766  0DB5  3001               	movlw	1
 14767  0DB6  0008               	return
 14768  0DB7                     l6418:	
 14769                           
 14770                           ;PS_2.c: 904: }
 14771                           ;PS_2.c: 905: }
 14772                           ;PS_2.c: 907: Data_TRIS(1);
 14773  0DB7  3001               	movlw	1
 14774  0DB8  3198  20DA  318C   	fcall	_Data_TRIS
 14775                           
 14776                           ;PS_2.c: 909: timeout=0;
 14777  0DBB  0020               	movlb	0	; select bank0
 14778  0DBC  01B6               	clrf	Send_PS2@timeout
 14779  0DBD  01B7               	clrf	Send_PS2@timeout+1
 14780  0DBE                     l6430:	
 14781                           ;PS_2.c: 910: while(READ_PS_2_PIN(0b00010000))
 14782                           
 14783  0DBE  3010               	movlw	16
 14784  0DBF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14785  0DC2  3800               	iorlw	0
 14786  0DC3  1903               	btfsc	3,2
 14787  0DC4  2DDB               	goto	l6432
 14788                           
 14789                           ;PS_2.c: 911: {
 14790                           ;PS_2.c: 912: __nop();
 14791  0DC5  0000               	nop
 14792                           
 14793                           ;PS_2.c: 913: timeout++;
 14794  0DC6  3001               	movlw	1
 14795  0DC7  0020               	movlb	0	; select bank0
 14796  0DC8  07B6               	addwf	Send_PS2@timeout,f
 14797  0DC9  3000               	movlw	0
 14798  0DCA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14799                           
 14800                           ;PS_2.c: 914: if(timeout > 15000)
 14801  0DCB  303A               	movlw	58
 14802  0DCC  0237               	subwf	Send_PS2@timeout+1,w
 14803  0DCD  3099               	movlw	153
 14804  0DCE  1903               	skipnz
 14805  0DCF  0236               	subwf	Send_PS2@timeout,w
 14806  0DD0  1C03               	skipc
 14807  0DD1  2DBE               	goto	l6430
 14808                           
 14809                           ;PS_2.c: 915: {
 14810                           ;PS_2.c: 916: Clock_TRIS(1);
 14811  0DD2  3001               	movlw	1
 14812  0DD3  3198  20CF  318C   	fcall	_Clock_TRIS
 14813                           
 14814                           ;PS_2.c: 917: Data_TRIS(1);
 14815  0DD6  3001               	movlw	1
 14816  0DD7  3198  20DA         	fcall	_Data_TRIS
 14817                           
 14818                           ;PS_2.c: 918: return 1;
 14819  0DD9  3001               	movlw	1
 14820  0DDA  0008               	return
 14821  0DDB                     l6432:	
 14822                           
 14823                           ;PS_2.c: 919: }
 14824                           ;PS_2.c: 920: }
 14825                           ;PS_2.c: 921: timeout=0;
 14826  0DDB  0020               	movlb	0	; select bank0
 14827  0DDC  01B6               	clrf	Send_PS2@timeout
 14828  0DDD  01B7               	clrf	Send_PS2@timeout+1
 14829  0DDE                     l6442:	
 14830                           ;PS_2.c: 922: while(READ_PS_2_PIN(0b00100000))
 14831                           
 14832  0DDE  3020               	movlw	32
 14833  0DDF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14834  0DE2  3800               	iorlw	0
 14835  0DE3  1903               	btfsc	3,2
 14836  0DE4  2DFB               	goto	l6444
 14837                           
 14838                           ;PS_2.c: 923: {
 14839                           ;PS_2.c: 924: __nop();
 14840  0DE5  0000               	nop
 14841                           
 14842                           ;PS_2.c: 925: timeout++;
 14843  0DE6  3001               	movlw	1
 14844  0DE7  0020               	movlb	0	; select bank0
 14845  0DE8  07B6               	addwf	Send_PS2@timeout,f
 14846  0DE9  3000               	movlw	0
 14847  0DEA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14848                           
 14849                           ;PS_2.c: 926: if(timeout > 15000)
 14850  0DEB  303A               	movlw	58
 14851  0DEC  0237               	subwf	Send_PS2@timeout+1,w
 14852  0DED  3099               	movlw	153
 14853  0DEE  1903               	skipnz
 14854  0DEF  0236               	subwf	Send_PS2@timeout,w
 14855  0DF0  1C03               	skipc
 14856  0DF1  2DDE               	goto	l6442
 14857                           
 14858                           ;PS_2.c: 927: {
 14859                           ;PS_2.c: 928: Clock_TRIS(1);
 14860  0DF2  3001               	movlw	1
 14861  0DF3  3198  20CF  318C   	fcall	_Clock_TRIS
 14862                           
 14863                           ;PS_2.c: 929: Data_TRIS(1);
 14864  0DF6  3001               	movlw	1
 14865  0DF7  3198  20DA         	fcall	_Data_TRIS
 14866                           
 14867                           ;PS_2.c: 930: return 1;
 14868  0DF9  3001               	movlw	1
 14869  0DFA  0008               	return
 14870  0DFB                     l6444:	
 14871                           
 14872                           ;PS_2.c: 931: }
 14873                           ;PS_2.c: 932: }
 14874                           ;PS_2.c: 933: timeout=0;
 14875  0DFB  0020               	movlb	0	; select bank0
 14876  0DFC  01B6               	clrf	Send_PS2@timeout
 14877  0DFD  01B7               	clrf	Send_PS2@timeout+1
 14878  0DFE                     l6454:	
 14879                           ;PS_2.c: 934: while(!READ_PS_2_PIN(0b00010000))
 14880                           
 14881  0DFE  3010               	movlw	16
 14882  0DFF  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14883  0E02  3A00               	xorlw	0
 14884  0E03  1D03               	btfss	3,2
 14885  0E04  2E1B               	goto	l6456
 14886                           
 14887                           ;PS_2.c: 935: {
 14888                           ;PS_2.c: 936: __nop();
 14889  0E05  0000               	nop
 14890                           
 14891                           ;PS_2.c: 937: timeout++;
 14892  0E06  3001               	movlw	1
 14893  0E07  0020               	movlb	0	; select bank0
 14894  0E08  07B6               	addwf	Send_PS2@timeout,f
 14895  0E09  3000               	movlw	0
 14896  0E0A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14897                           
 14898                           ;PS_2.c: 938: if(timeout > 15000)
 14899  0E0B  303A               	movlw	58
 14900  0E0C  0237               	subwf	Send_PS2@timeout+1,w
 14901  0E0D  3099               	movlw	153
 14902  0E0E  1903               	skipnz
 14903  0E0F  0236               	subwf	Send_PS2@timeout,w
 14904  0E10  1C03               	skipc
 14905  0E11  2DFE               	goto	l6454
 14906                           
 14907                           ;PS_2.c: 939: {
 14908                           ;PS_2.c: 940: Clock_TRIS(1);
 14909  0E12  3001               	movlw	1
 14910  0E13  3198  20CF  318C   	fcall	_Clock_TRIS
 14911                           
 14912                           ;PS_2.c: 941: Data_TRIS(1);
 14913  0E16  3001               	movlw	1
 14914  0E17  3198  20DA         	fcall	_Data_TRIS
 14915                           
 14916                           ;PS_2.c: 942: return 1;
 14917  0E19  3001               	movlw	1
 14918  0E1A  0008               	return
 14919  0E1B                     l6456:	
 14920                           
 14921                           ;PS_2.c: 943: }
 14922                           ;PS_2.c: 944: }
 14923                           ;PS_2.c: 945: timeout=0;
 14924  0E1B  0020               	movlb	0	; select bank0
 14925  0E1C  01B6               	clrf	Send_PS2@timeout
 14926  0E1D  01B7               	clrf	Send_PS2@timeout+1
 14927  0E1E                     l6466:	
 14928                           ;PS_2.c: 946: while(!READ_PS_2_PIN(0b00100000))
 14929                           
 14930  0E1E  3020               	movlw	32
 14931  0E1F  3199  2152  318C   	fcall	_READ_PS_2_PIN
 14932  0E22  3A00               	xorlw	0
 14933  0E23  1D03               	btfss	3,2
 14934  0E24  2E3B               	goto	l6468
 14935                           
 14936                           ;PS_2.c: 947: {
 14937                           ;PS_2.c: 948: __nop();
 14938  0E25  0000               	nop
 14939                           
 14940                           ;PS_2.c: 949: timeout++;
 14941  0E26  3001               	movlw	1
 14942  0E27  0020               	movlb	0	; select bank0
 14943  0E28  07B6               	addwf	Send_PS2@timeout,f
 14944  0E29  3000               	movlw	0
 14945  0E2A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14946                           
 14947                           ;PS_2.c: 950: if(timeout > 15000)
 14948  0E2B  303A               	movlw	58
 14949  0E2C  0237               	subwf	Send_PS2@timeout+1,w
 14950  0E2D  3099               	movlw	153
 14951  0E2E  1903               	skipnz
 14952  0E2F  0236               	subwf	Send_PS2@timeout,w
 14953  0E30  1C03               	skipc
 14954  0E31  2E1E               	goto	l6466
 14955                           
 14956                           ;PS_2.c: 951: {
 14957                           ;PS_2.c: 952: Clock_TRIS(1);
 14958  0E32  3001               	movlw	1
 14959  0E33  3198  20CF  318C   	fcall	_Clock_TRIS
 14960                           
 14961                           ;PS_2.c: 953: Data_TRIS(1);
 14962  0E36  3001               	movlw	1
 14963  0E37  3198  20DA         	fcall	_Data_TRIS
 14964                           
 14965                           ;PS_2.c: 954: return 1;
 14966  0E39  3001               	movlw	1
 14967  0E3A  0008               	return
 14968  0E3B                     l6468:	
 14969                           
 14970                           ;PS_2.c: 955: }
 14971                           ;PS_2.c: 956: }
 14972                           ;PS_2.c: 959: Clock_TRIS(1);
 14973  0E3B  3001               	movlw	1
 14974  0E3C  3198  20CF  318C   	fcall	_Clock_TRIS
 14975                           
 14976                           ;PS_2.c: 960: Data_TRIS(1);
 14977  0E3F  3001               	movlw	1
 14978  0E40  3198  20DA  318C   	fcall	_Data_TRIS
 14979                           
 14980                           ;PS_2.c: 961: PS_2_ENABLE_INTERRUPT(0b00100000);
 14981  0E43  3020               	movlw	32
 14982  0E44  3199  21B0         	fcall	_PS_2_ENABLE_INTERRUPT
 14983                           
 14984                           ;PS_2.c: 962: return 0;
 14985  0E46  3000               	movlw	0
 14986  0E47  0008               	return
 14987  0E48                     __end_of_Send_PS2:	
 14988                           
 14989                           	psect	text42
 14990  1B23                     __ptext42:	
 14991 ;; *************** function _delayUS *****************
 14992 ;; Defined at:
 14993 ;;		line 41 in file "MISC.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  US              4    5[BANK0 ] long 
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;  i               4   10[BANK0 ] long 
 14998 ;;  j               1   14[BANK0 ] unsigned char 
 14999 ;; Return value:  Size  Location     Type
 15000 ;;		None               void
 15001 ;; Registers used:
 15002 ;;		wreg, status,2, status,0
 15003 ;; Tracked objects:
 15004 ;;		On entry : 0/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;Total ram usage:       10 bytes
 15013 ;; Hardware stack levels used:    1
 15014 ;; Hardware stack levels required when called:    3
 15015 ;; This function calls:
 15016 ;;		Nothing
 15017 ;; This function is called by:
 15018 ;;		_main
 15019 ;;		_Init_System
 15020 ;;		_UARTstringWAIT
 15021 ;;		_SetBaud
 15022 ;;		_PS_2_Update
 15023 ;;		_Send_PS2
 15024 ;;		_Init_PS_2_Send
 15025 ;;		_Keyboard_Connected
 15026 ;;		_WriteFlash_Sequential
 15027 ;;		_InternalADC_Read
 15028 ;;		_UART_send_break_timed
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           
 15033                           ;psect for function _delayUS
 15034  1B23                     _delayUS:	
 15035                           
 15036                           ;MISC.c: 43: long i;
 15037                           ;MISC.c: 44: unsigned char j;
 15038                           ;MISC.c: 45: for(i=0;i<US;i+=6)
 15039                           
 15040                           ;incstack = 0
 15041                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 15042  1B23  3000               	movlw	0
 15043  1B24  0020               	movlb	0	; select bank0
 15044  1B25  00AD               	movwf	delayUS@i+3
 15045  1B26  3000               	movlw	0
 15046  1B27  00AC               	movwf	delayUS@i+2
 15047  1B28  3000               	movlw	0
 15048  1B29  00AB               	movwf	delayUS@i+1
 15049  1B2A  3000               	movlw	0
 15050  1B2B  00AA               	movwf	delayUS@i
 15051  1B2C                     l264:	
 15052  1B2C  082D               	movf	delayUS@i+3,w
 15053  1B2D  3A80               	xorlw	128
 15054  1B2E  00A9               	movwf	??_delayUS
 15055  1B2F  0828               	movf	delayUS@US+3,w
 15056  1B30  3A80               	xorlw	128
 15057  1B31  0229               	subwf	??_delayUS,w
 15058  1B32  1D03               	skipz
 15059  1B33  2B3E               	goto	u7383
 15060  1B34  0827               	movf	delayUS@US+2,w
 15061  1B35  022C               	subwf	delayUS@i+2,w
 15062  1B36  1D03               	skipz
 15063  1B37  2B3E               	goto	u7383
 15064  1B38  0826               	movf	delayUS@US+1,w
 15065  1B39  022B               	subwf	delayUS@i+1,w
 15066  1B3A  1D03               	skipz
 15067  1B3B  2B3E               	goto	u7383
 15068  1B3C  0825               	movf	delayUS@US,w
 15069  1B3D  022A               	subwf	delayUS@i,w
 15070  1B3E                     u7383:	
 15071  1B3E  1803               	btfsc	3,0
 15072  1B3F  0008               	return
 15073                           
 15074                           ;MISC.c: 46: {
 15075                           ;MISC.c: 47: for(j=0;j<32;j++)
 15076  1B40  01AE               	clrf	delayUS@j
 15077  1B41  3020               	movlw	32
 15078  1B42  022E               	subwf	delayUS@j,w
 15079  1B43  1803               	btfsc	3,0
 15080  1B44  2B4F               	goto	l5764
 15081  1B45                     l266:	
 15082                           
 15083                           ;MISC.c: 48: {
 15084                           ;MISC.c: 49: __nop();
 15085  1B45  0000               	nop
 15086  1B46  3001               	movlw	1
 15087  1B47  0020               	movlb	0	; select bank0
 15088  1B48  00A9               	movwf	??_delayUS
 15089  1B49  0829               	movf	??_delayUS,w
 15090  1B4A  07AE               	addwf	delayUS@j,f
 15091  1B4B  3020               	movlw	32
 15092  1B4C  022E               	subwf	delayUS@j,w
 15093  1B4D  1C03               	skipc
 15094  1B4E  2B45               	goto	l266
 15095  1B4F                     l5764:	
 15096  1B4F  3006               	movlw	6
 15097  1B50  07AA               	addwf	delayUS@i,f
 15098  1B51  3000               	movlw	0
 15099  1B52  3DAB               	addwfc	delayUS@i+1,f
 15100  1B53  3000               	movlw	0
 15101  1B54  3DAC               	addwfc	delayUS@i+2,f
 15102  1B55  3000               	movlw	0
 15103  1B56  3DAD               	addwfc	delayUS@i+3,f
 15104  1B57  2B2C               	goto	l264
 15105  1B58                     __end_of_delayUS:	
 15106                           
 15107                           	psect	text43
 15108  1952                     __ptext43:	
 15109 ;; *************** function _READ_PS_2_PIN *****************
 15110 ;; Defined at:
 15111 ;;		line 182 in file "PS_2.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;  DATA_CLK        1    wreg     unsigned char 
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      unsigned char 
 15118 ;; Registers used:
 15119 ;;		wreg
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;Total ram usage:        1 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    3
 15132 ;; This function calls:
 15133 ;;		Nothing
 15134 ;; This function is called by:
 15135 ;;		_Send_PS2
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           
 15140                           ;psect for function _READ_PS_2_PIN
 15141  1952                     _READ_PS_2_PIN:	
 15142                           
 15143                           ;incstack = 0
 15144                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15145                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15146  1952  0020               	movlb	0	; select bank0
 15147  1953  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15148                           
 15149                           ;PS_2.c: 184: if(DATA_CLK == 0b00100000)
 15150  1954  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15151  1955  3A20               	xorlw	32
 15152  1956  1D03               	skipz
 15153  1957  295E               	goto	l694
 15154                           
 15155                           ;PS_2.c: 185: {
 15156                           ;PS_2.c: 187: if((PORTA & 0b00100000) == 0b00100000)
 15157  1958  1E8C               	btfss	12,5	;volatile
 15158  1959  295C               	goto	l6026
 15159                           
 15160                           ;PS_2.c: 188: {
 15161                           ;PS_2.c: 189: return (1);
 15162  195A  3001               	movlw	1
 15163                           
 15164                           ;PS_2.c: 190: }
 15165  195B  0008               	return
 15166  195C                     l6026:	
 15167                           
 15168                           ;PS_2.c: 191: else
 15169                           ;PS_2.c: 192: {
 15170                           ;PS_2.c: 193: return 0;
 15171  195C  3000               	movlw	0
 15172                           
 15173                           ;PS_2.c: 194: }
 15174                           ;PS_2.c: 195: }
 15175  195D  0008               	return
 15176  195E                     l694:	
 15177                           
 15178                           ;PS_2.c: 196: else
 15179                           ;PS_2.c: 197: {
 15180                           ;PS_2.c: 199: if((PORTA & 0b00010000) == 0b00010000)
 15181  195E  1E0C               	btfss	12,4	;volatile
 15182  195F  2962               	goto	l6036
 15183                           
 15184                           ;PS_2.c: 200: {
 15185                           ;PS_2.c: 201: return (1);
 15186  1960  3001               	movlw	1
 15187                           
 15188                           ;PS_2.c: 202: }
 15189  1961  0008               	return
 15190  1962                     l6036:	
 15191                           
 15192                           ;PS_2.c: 203: else
 15193                           ;PS_2.c: 204: {
 15194                           ;PS_2.c: 205: return 0;
 15195  1962  3000               	movlw	0
 15196  1963  0008               	return
 15197  1964                     __end_of_READ_PS_2_PIN:	
 15198                           
 15199                           	psect	text44
 15200  19B0                     __ptext44:	
 15201 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15202 ;; Defined at:
 15203 ;;		line 161 in file "PS_2.c"
 15204 ;; Parameters:    Size  Location     Type
 15205 ;;  DATA_CLK        1    wreg     unsigned char 
 15206 ;; Auto vars:     Size  Location     Type
 15207 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15208 ;; Return value:  Size  Location     Type
 15209 ;;		None               void
 15210 ;; Registers used:
 15211 ;;		wreg, status,2, status,0
 15212 ;; Tracked objects:
 15213 ;;		On entry : 0/0
 15214 ;;		On exit  : 0/0
 15215 ;;		Unchanged: 0/0
 15216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;Total ram usage:        2 bytes
 15222 ;; Hardware stack levels used:    1
 15223 ;; Hardware stack levels required when called:    3
 15224 ;; This function calls:
 15225 ;;		Nothing
 15226 ;; This function is called by:
 15227 ;;		_main
 15228 ;;		_PS_2_Update
 15229 ;;		_Send_PS2
 15230 ;;		_Init_PS_2_Send
 15231 ;;		_Keyboard_Connected
 15232 ;; This function uses a non-reentrant model
 15233 ;;
 15234                           
 15235                           
 15236                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15237  19B0                     _PS_2_ENABLE_INTERRUPT:	
 15238                           
 15239                           ;incstack = 0
 15240                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15241                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15242  19B0  0020               	movlb	0	; select bank0
 15243  19B1  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15244                           
 15245                           ;PS_2.c: 163: if(DATA_CLK == 0b00100000)
 15246  19B2  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15247  19B3  3A20               	xorlw	32
 15248  19B4  1D03               	skipz
 15249  19B5  29BD               	goto	l6054
 15250                           
 15251                           ;PS_2.c: 164: {
 15252                           ;PS_2.c: 167: IOCAF &= ~0b00100000;
 15253  19B6  30DF               	movlw	223
 15254  19B7  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15255  19B8  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15256  19B9  0027               	movlb	7	; select bank7
 15257  19BA  0593               	andwf	19,f	;volatile
 15258                           
 15259                           ;PS_2.c: 168: IOCAN |= 0b00100000;
 15260  19BB  1692               	bsf	18,5	;volatile
 15261                           
 15262                           ;PS_2.c: 170: }
 15263  19BC  0008               	return
 15264  19BD                     l6054:	
 15265                           
 15266                           ;PS_2.c: 171: else
 15267                           ;PS_2.c: 172: {
 15268                           ;PS_2.c: 175: IOCAF &= ~0b00010000;
 15269  19BD  30EF               	movlw	239
 15270  19BE  0020               	movlb	0	; select bank0
 15271  19BF  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15272  19C0  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15273  19C1  0027               	movlb	7	; select bank7
 15274  19C2  0593               	andwf	19,f	;volatile
 15275                           
 15276                           ;PS_2.c: 176: IOCAN |= 0b00010000;
 15277  19C3  1612               	bsf	18,4	;volatile
 15278  19C4  0008               	return
 15279  19C5                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15280                           
 15281                           	psect	text45
 15282  18DA                     __ptext45:	
 15283 ;; *************** function _Data_TRIS *****************
 15284 ;; Defined at:
 15285 ;;		line 110 in file "PS_2.c"
 15286 ;; Parameters:    Size  Location     Type
 15287 ;;  direction       1    wreg     unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  direction       1    5[BANK0 ] unsigned char 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;		None               void
 15292 ;; Registers used:
 15293 ;;		wreg, status,2, status,0
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;Total ram usage:        1 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:    3
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		_PS_2_INIT
 15310 ;;		_Send_PS2
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           
 15315                           ;psect for function _Data_TRIS
 15316  18DA                     _Data_TRIS:	
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15320                           ;Data_TRIS@direction stored from wreg
 15321  18DA  0020               	movlb	0	; select bank0
 15322  18DB  00A5               	movwf	Data_TRIS@direction
 15323                           
 15324                           ;PS_2.c: 112: if(direction == 0)
 15325  18DC  08A5               	movf	Data_TRIS@direction,f
 15326  18DD  1D03               	skipz
 15327  18DE  28E2               	goto	l674
 15328                           
 15329                           ;PS_2.c: 113: {
 15330                           ;PS_2.c: 114: TRISAbits.TRISA4 = 0;
 15331  18DF  0021               	movlb	1	; select bank1
 15332  18E0  120C               	bcf	12,4	;volatile
 15333                           
 15334                           ;PS_2.c: 115: }
 15335  18E1  0008               	return
 15336  18E2                     l674:	
 15337                           
 15338                           ;PS_2.c: 116: else
 15339                           ;PS_2.c: 117: {
 15340                           ;PS_2.c: 118: TRISAbits.TRISA4 = 1;
 15341  18E2  0021               	movlb	1	; select bank1
 15342  18E3  160C               	bsf	12,4	;volatile
 15343  18E4  0008               	return
 15344  18E5                     __end_of_Data_TRIS:	
 15345                           
 15346                           	psect	text46
 15347  18CF                     __ptext46:	
 15348 ;; *************** function _Clock_TRIS *****************
 15349 ;; Defined at:
 15350 ;;		line 97 in file "PS_2.c"
 15351 ;; Parameters:    Size  Location     Type
 15352 ;;  direction       1    wreg     unsigned char 
 15353 ;; Auto vars:     Size  Location     Type
 15354 ;;  direction       1    5[BANK0 ] unsigned char 
 15355 ;; Return value:  Size  Location     Type
 15356 ;;		None               void
 15357 ;; Registers used:
 15358 ;;		wreg, status,2, status,0
 15359 ;; Tracked objects:
 15360 ;;		On entry : 0/0
 15361 ;;		On exit  : 0/0
 15362 ;;		Unchanged: 0/0
 15363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15368 ;;Total ram usage:        1 bytes
 15369 ;; Hardware stack levels used:    1
 15370 ;; Hardware stack levels required when called:    3
 15371 ;; This function calls:
 15372 ;;		Nothing
 15373 ;; This function is called by:
 15374 ;;		_PS_2_INIT
 15375 ;;		_Send_PS2
 15376 ;; This function uses a non-reentrant model
 15377 ;;
 15378                           
 15379                           
 15380                           ;psect for function _Clock_TRIS
 15381  18CF                     _Clock_TRIS:	
 15382                           
 15383                           ;incstack = 0
 15384                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15385                           ;Clock_TRIS@direction stored from wreg
 15386  18CF  0020               	movlb	0	; select bank0
 15387  18D0  00A5               	movwf	Clock_TRIS@direction
 15388                           
 15389                           ;PS_2.c: 99: if(direction == 0)
 15390  18D1  08A5               	movf	Clock_TRIS@direction,f
 15391  18D2  1D03               	skipz
 15392  18D3  28D7               	goto	l669
 15393                           
 15394                           ;PS_2.c: 100: {
 15395                           ;PS_2.c: 101: TRISAbits.TRISA5 = 0;
 15396  18D4  0021               	movlb	1	; select bank1
 15397  18D5  128C               	bcf	12,5	;volatile
 15398                           
 15399                           ;PS_2.c: 102: }
 15400  18D6  0008               	return
 15401  18D7                     l669:	
 15402                           
 15403                           ;PS_2.c: 103: else
 15404                           ;PS_2.c: 104: {
 15405                           ;PS_2.c: 105: TRISAbits.TRISA5 = 1;
 15406  18D7  0021               	movlb	1	; select bank1
 15407  18D8  168C               	bsf	12,5	;volatile
 15408  18D9  0008               	return
 15409  18DA                     __end_of_Clock_TRIS:	
 15410                           
 15411                           	psect	text47
 15412  1A5C                     __ptext47:	
 15413 ;; *************** function _CheckSum_byte *****************
 15414 ;; Defined at:
 15415 ;;		line 282 in file "MISC.c"
 15416 ;; Parameters:    Size  Location     Type
 15417 ;;  This            2    5[BANK0 ] unsigned int 
 15418 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15419 ;; Auto vars:     Size  Location     Type
 15420 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15421 ;;  i               1   12[BANK0 ] unsigned char 
 15422 ;;  Parity          1   11[BANK0 ] unsigned char 
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      unsigned char 
 15425 ;; Registers used:
 15426 ;;		wreg, status,2, status,0
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        8 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    3
 15439 ;; This function calls:
 15440 ;;		Nothing
 15441 ;; This function is called by:
 15442 ;;		_UARTchar
 15443 ;;		_PS_2_Update
 15444 ;;		_Send_PS2
 15445 ;; This function uses a non-reentrant model
 15446 ;;
 15447                           
 15448                           
 15449                           ;psect for function _CheckSum_byte
 15450  1A5C                     _CheckSum_byte:	
 15451                           
 15452                           ;MISC.c: 284: char i = 0;
 15453                           
 15454                           ;incstack = 0
 15455                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15456  1A5C  0020               	movlb	0	; select bank0
 15457  1A5D  01AC               	clrf	CheckSum_byte@i
 15458                           
 15459                           ;MISC.c: 285: unsigned char Parity = 0;
 15460  1A5E  01AB               	clrf	CheckSum_byte@Parity
 15461                           
 15462                           ;MISC.c: 286: unsigned int ThisTemp = This;
 15463  1A5F  0826               	movf	CheckSum_byte@This+1,w
 15464  1A60  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15465  1A61  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15466  1A62  0825               	movf	CheckSum_byte@This,w
 15467  1A63  01A9               	clrf	CheckSum_byte@ThisTemp
 15468  1A64  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15469                           
 15470                           ;MISC.c: 288: for (i =0; i<8; i++)
 15471  1A65  01AC               	clrf	CheckSum_byte@i
 15472  1A66  3008               	movlw	8
 15473  1A67  022C               	subwf	CheckSum_byte@i,w
 15474  1A68  1803               	btfsc	3,0
 15475  1A69  2A7D               	goto	l5780
 15476  1A6A                     l378:	
 15477                           
 15478                           ;MISC.c: 289: {
 15479                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 15480  1A6A  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15481  1A6B  2A70               	goto	l380
 15482                           
 15483                           ;MISC.c: 291: {
 15484                           ;MISC.c: 292: Parity++;
 15485  1A6C  3001               	movlw	1
 15486  1A6D  00A8               	movwf	??_CheckSum_byte
 15487  1A6E  0828               	movf	??_CheckSum_byte,w
 15488  1A6F  07AB               	addwf	CheckSum_byte@Parity,f
 15489  1A70                     l380:	
 15490                           
 15491                           ;MISC.c: 293: }
 15492                           ;MISC.c: 294: ThisTemp >>= 1;
 15493  1A70  3001               	movlw	1
 15494  1A71                     u7415:	
 15495  1A71  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15496  1A72  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15497  1A73  0B89               	decfsz	9,f
 15498  1A74  2A71               	goto	u7415
 15499  1A75  3001               	movlw	1
 15500  1A76  00A8               	movwf	??_CheckSum_byte
 15501  1A77  0828               	movf	??_CheckSum_byte,w
 15502  1A78  07AC               	addwf	CheckSum_byte@i,f
 15503  1A79  3008               	movlw	8
 15504  1A7A  022C               	subwf	CheckSum_byte@i,w
 15505  1A7B  1C03               	skipc
 15506  1A7C  2A6A               	goto	l378
 15507  1A7D                     l5780:	
 15508                           
 15509                           ;MISC.c: 295: }
 15510                           ;MISC.c: 296: if(Odd_Even == 3)
 15511  1A7D  0827               	movf	CheckSum_byte@Odd_Even,w
 15512  1A7E  3A03               	xorlw	3
 15513  1A7F  1D03               	skipz
 15514  1A80  2A87               	goto	l381
 15515                           
 15516                           ;MISC.c: 297: {
 15517                           ;MISC.c: 298: if(Parity % 2 == 0)
 15518  1A81  182B               	btfsc	CheckSum_byte@Parity,0
 15519  1A82  2A85               	goto	l5788
 15520                           
 15521                           ;MISC.c: 299: {
 15522                           ;MISC.c: 300: return 1;
 15523  1A83  3001               	movlw	1
 15524  1A84  0008               	return
 15525  1A85                     l5788:	
 15526                           
 15527                           ;MISC.c: 301: }
 15528                           ;MISC.c: 302: return 0;
 15529  1A85  3000               	movlw	0
 15530                           
 15531                           ;MISC.c: 303: }
 15532  1A86  0008               	return
 15533  1A87                     l381:	
 15534                           
 15535                           ;MISC.c: 304: else
 15536                           ;MISC.c: 305: {
 15537                           ;MISC.c: 306: if(Parity % 2 == 1)
 15538  1A87  1C2B               	btfss	CheckSum_byte@Parity,0
 15539  1A88  2A8B               	goto	l5798
 15540                           
 15541                           ;MISC.c: 307: {
 15542                           ;MISC.c: 308: return 1;
 15543  1A89  3001               	movlw	1
 15544  1A8A  0008               	return
 15545  1A8B                     l5798:	
 15546                           
 15547                           ;MISC.c: 309: }
 15548                           ;MISC.c: 310: return 0;
 15549  1A8B  3000               	movlw	0
 15550  1A8C  0008               	return
 15551  1A8D                     __end_of_CheckSum_byte:	
 15552                           
 15553                           	psect	text48
 15554  19DD                     __ptext48:	
 15555 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15556 ;; Defined at:
 15557 ;;		line 142 in file "PS_2.c"
 15558 ;; Parameters:    Size  Location     Type
 15559 ;;  DATA_CLK        1    wreg     unsigned char 
 15560 ;; Auto vars:     Size  Location     Type
 15561 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15562 ;; Return value:  Size  Location     Type
 15563 ;;		None               void
 15564 ;; Registers used:
 15565 ;;		wreg, status,2, status,0
 15566 ;; Tracked objects:
 15567 ;;		On entry : 0/0
 15568 ;;		On exit  : 0/0
 15569 ;;		Unchanged: 0/0
 15570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;Total ram usage:        2 bytes
 15576 ;; Hardware stack levels used:    1
 15577 ;; Hardware stack levels required when called:    3
 15578 ;; This function calls:
 15579 ;;		Nothing
 15580 ;; This function is called by:
 15581 ;;		_main
 15582 ;;		_PS_2_Update
 15583 ;;		_Init_PS_2_Send
 15584 ;;		_Keyboard_Connected
 15585 ;; This function uses a non-reentrant model
 15586 ;;
 15587                           
 15588                           
 15589                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15590  19DD                     _PS_2_DISABLE_INTERRUPT:	
 15591                           
 15592                           ;incstack = 0
 15593                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15594                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15595  19DD  0020               	movlb	0	; select bank0
 15596  19DE  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15597                           
 15598                           ;PS_2.c: 144: if(DATA_CLK == 0b00100000)
 15599  19DF  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15600  19E0  3A20               	xorlw	32
 15601  19E1  1D03               	skipz
 15602  19E2  29EF               	goto	l6212
 15603                           
 15604                           ;PS_2.c: 145: {
 15605                           ;PS_2.c: 148: IOCAN &= ~0b00100000;
 15606  19E3  30DF               	movlw	223
 15607  19E4  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15608  19E5  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15609  19E6  0027               	movlb	7	; select bank7
 15610  19E7  0592               	andwf	18,f	;volatile
 15611                           
 15612                           ;PS_2.c: 149: IOCAF &= ~0b00100000;
 15613  19E8  30DF               	movlw	223
 15614  19E9  0020               	movlb	0	; select bank0
 15615  19EA  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15616  19EB  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15617  19EC  0027               	movlb	7	; select bank7
 15618  19ED  0593               	andwf	19,f	;volatile
 15619                           
 15620                           ;PS_2.c: 150: }
 15621  19EE  0008               	return
 15622  19EF                     l6212:	
 15623                           
 15624                           ;PS_2.c: 151: else
 15625                           ;PS_2.c: 152: {
 15626                           ;PS_2.c: 155: IOCAN &= ~0b00010000;
 15627  19EF  30EF               	movlw	239
 15628  19F0  0020               	movlb	0	; select bank0
 15629  19F1  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15630  19F2  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15631  19F3  0027               	movlb	7	; select bank7
 15632  19F4  0592               	andwf	18,f	;volatile
 15633                           
 15634                           ;PS_2.c: 156: IOCAF &= ~0b00010000;
 15635  19F5  30EF               	movlw	239
 15636  19F6  0020               	movlb	0	; select bank0
 15637  19F7  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15638  19F8  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15639  19F9  0027               	movlb	7	; select bank7
 15640  19FA  0593               	andwf	19,f	;volatile
 15641  19FB  0008               	return
 15642  19FC                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15643                           
 15644                           	psect	text49
 15645  1006                     __ptext49:	
 15646 ;; *************** function _InitApp *****************
 15647 ;; Defined at:
 15648 ;;		line 51 in file "user.c"
 15649 ;; Parameters:    Size  Location     Type
 15650 ;;		None
 15651 ;; Auto vars:     Size  Location     Type
 15652 ;;		None
 15653 ;; Return value:  Size  Location     Type
 15654 ;;		None               void
 15655 ;; Registers used:
 15656 ;;		wreg, status,2
 15657 ;; Tracked objects:
 15658 ;;		On entry : 0/0
 15659 ;;		On exit  : 0/0
 15660 ;;		Unchanged: 0/0
 15661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;Total ram usage:        0 bytes
 15667 ;; Hardware stack levels used:    1
 15668 ;; Hardware stack levels required when called:    3
 15669 ;; This function calls:
 15670 ;;		Nothing
 15671 ;; This function is called by:
 15672 ;;		_main
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           
 15677                           ;psect for function _InitApp
 15678  1006                     _InitApp:	
 15679                           
 15680                           ;user.c: 53: LATC =0;
 15681                           
 15682                           ;incstack = 0
 15683                           ; Regs used in _InitApp: [wreg+status,2]
 15684  1006  0022               	movlb	2	; select bank2
 15685  1007  018E               	clrf	14	;volatile
 15686                           
 15687                           ;user.c: 54: LATA =0;
 15688  1008  018C               	clrf	12	;volatile
 15689                           
 15690                           ;user.c: 55: TRISCbits.TRISC2 = 0;
 15691  1009  0021               	movlb	1	; select bank1
 15692  100A  110E               	bcf	14,2	;volatile
 15693                           
 15694                           ;user.c: 56: TRISCbits.TRISC1 = 0;
 15695  100B  108E               	bcf	14,1	;volatile
 15696                           
 15697                           ;user.c: 57: TRISCbits.TRISC3 = 0;
 15698  100C  118E               	bcf	14,3	;volatile
 15699                           
 15700                           ;user.c: 58: TRISCbits.TRISC4 = 0;
 15701  100D  120E               	bcf	14,4	;volatile
 15702                           
 15703                           ;user.c: 59: TRISAbits.TRISA2 = 1;
 15704  100E  150C               	bsf	12,2	;volatile
 15705                           
 15706                           ;user.c: 60: TRISCbits.TRISC0 = 0;
 15707  100F  100E               	bcf	14,0	;volatile
 15708                           
 15709                           ;user.c: 63: LATC |= 0b00000010;
 15710  1010  0022               	movlb	2	; select bank2
 15711  1011  148E               	bsf	14,1	;volatile
 15712                           
 15713                           ;user.c: 64: PPSLOCK =0;
 15714  1012  003C               	movlb	28	; select bank28
 15715  1013  018F               	clrf	15	;volatile
 15716                           
 15717                           ;user.c: 65: RC2PPS = 0b00010100;
 15718  1014  3014               	movlw	20
 15719  1015  003D               	movlb	29	; select bank29
 15720  1016  00A2               	movwf	34	;volatile
 15721                           
 15722                           ;user.c: 66: CKPPS = 0b00010010;
 15723  1017  3012               	movlw	18
 15724  1018  003C               	movlb	28	; select bank28
 15725  1019  00A5               	movwf	37	;volatile
 15726                           
 15727                           ;user.c: 67: RXPPS = 0b00010101;
 15728  101A  3015               	movlw	21
 15729  101B  00A4               	movwf	36	;volatile
 15730                           
 15731                           ;user.c: 68: PPSLOCK =1;
 15732  101C  3001               	movlw	1
 15733  101D  008F               	movwf	15	;volatile
 15734                           
 15735                           ;user.c: 70: ANSELA &= ~0xFF;
 15736  101E  0023               	movlb	3	; select bank3
 15737  101F  018C               	clrf	12	;volatile
 15738                           
 15739                           ;user.c: 71: ANSELA |= 0b00000100;
 15740  1020  150C               	bsf	12,2	;volatile
 15741                           
 15742                           ;user.c: 72: ANSELC &= ~0xFF;
 15743  1021  018E               	clrf	14	;volatile
 15744                           
 15745                           ;user.c: 73: OPTION_REGbits.nWPUEN = 0;
 15746  1022  0021               	movlb	1	; select bank1
 15747  1023  1395               	bcf	21,7	;volatile
 15748                           
 15749                           ;user.c: 74: WPUC = 0b00100000;
 15750  1024  3020               	movlw	32
 15751  1025  0024               	movlb	4	; select bank4
 15752  1026  008E               	movwf	14	;volatile
 15753                           
 15754                           ;user.c: 75: WPUA = 0;
 15755  1027  018C               	clrf	12	;volatile
 15756  1028  0008               	return
 15757  1029                     __end_of_InitApp:	
 15758                           
 15759                           	psect	text50
 15760  1940                     __ptext50:	
 15761 ;; *************** function _ConfigureOscillator *****************
 15762 ;; Defined at:
 15763 ;;		line 18 in file "system.c"
 15764 ;; Parameters:    Size  Location     Type
 15765 ;;		None
 15766 ;; Auto vars:     Size  Location     Type
 15767 ;;		None
 15768 ;; Return value:  Size  Location     Type
 15769 ;;		None               void
 15770 ;; Registers used:
 15771 ;;		wreg, status,2, status,0
 15772 ;; Tracked objects:
 15773 ;;		On entry : 0/0
 15774 ;;		On exit  : 0/0
 15775 ;;		Unchanged: 0/0
 15776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;Total ram usage:        1 bytes
 15782 ;; Hardware stack levels used:    1
 15783 ;; Hardware stack levels required when called:    3
 15784 ;; This function calls:
 15785 ;;		Nothing
 15786 ;; This function is called by:
 15787 ;;		_main
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           
 15792                           ;psect for function _ConfigureOscillator
 15793  1940                     _ConfigureOscillator:	
 15794                           
 15795                           ;system.c: 26: OSCCON= 0b11110000;
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15799  1940  30F0               	movlw	240
 15800  1941  0021               	movlb	1	; select bank1
 15801  1942  0099               	movwf	25	;volatile
 15802  1943                     l5240:	
 15803                           ;system.c: 27: while(!(OSCSTAT & HFIOFS));
 15804                           
 15805  1943  3000               	movlw	0
 15806  1944  181A               	btfsc	26,0	;volatile
 15807  1945  3001               	movlw	1
 15808  1946  051A               	andwf	26,w	;volatile
 15809  1947  1903               	btfsc	3,2
 15810  1948  2943               	goto	l5240
 15811  1949                     l5242:	
 15812                           ;system.c: 28: while(!(OSCSTAT & = 0b01000000));
 15813                           
 15814  1949  3040               	movlw	64
 15815  194A  0020               	movlb	0	; select bank0
 15816  194B  00A5               	movwf	??_ConfigureOscillator
 15817  194C  0825               	movf	??_ConfigureOscillator,w
 15818  194D  0021               	movlb	1	; select bank1
 15819  194E  059A               	andwf	26,f	;volatile
 15820  194F  1D03               	btfss	3,2
 15821  1950  0008               	return
 15822  1951  2949               	goto	l5242
 15823  1952                     __end_of_ConfigureOscillator:	
 15824                           
 15825                           	psect	intentry
 15826  0004                     __pintentry:	
 15827 ;; *************** function _isr *****************
 15828 ;; Defined at:
 15829 ;;		line 52 in file "interrupts.c"
 15830 ;; Parameters:    Size  Location     Type
 15831 ;;		None
 15832 ;; Auto vars:     Size  Location     Type
 15833 ;;  rx              1    4[BANK0 ] unsigned char 
 15834 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15835 ;; Return value:  Size  Location     Type
 15836 ;;		None               void
 15837 ;; Registers used:
 15838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15839 ;; Tracked objects:
 15840 ;;		On entry : 0/0
 15841 ;;		On exit  : 0/0
 15842 ;;		Unchanged: 0/0
 15843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;Total ram usage:        4 bytes
 15849 ;; Hardware stack levels used:    1
 15850 ;; Hardware stack levels required when called:    2
 15851 ;; This function calls:
 15852 ;;		i1_READ_PS_2_PIN
 15853 ;;		i1_ReadUSART
 15854 ;;		i1_UART_send_break
 15855 ;;		i1_UARTchar
 15856 ;; This function is called by:
 15857 ;;		Interrupt level 1
 15858 ;; This function uses a non-reentrant model
 15859 ;;
 15860                           
 15861  0004                     _isr:	
 15862                           
 15863                           ;incstack = 0
 15864                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15865  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15866  0005  3180               	pagesel	$
 15867  0006  0020               	movlb	0	; select bank0
 15868  0007  087F               	movf	127,w
 15869  0008  00A2               	movwf	??_isr+1
 15870                           
 15871                           ;interrupts.c: 54: unsigned char rx;
 15872                           ;interrupts.c: 55: unsigned char Rx_fault =0;
 15873  0009  01A3               	clrf	isr@Rx_fault
 15874                           
 15875                           ;interrupts.c: 57: if(IOCAF & 0b00100000)
 15876  000A  0027               	movlb	7	; select bank7
 15877  000B  1E93               	btfss	19,5	;volatile
 15878  000C  287C               	goto	i1l61
 15879                           
 15880                           ;interrupts.c: 58: {
 15881                           ;interrupts.c: 60: LATC |= 0b00010000;
 15882  000D  0022               	movlb	2	; select bank2
 15883  000E  160E               	bsf	14,4	;volatile
 15884                           
 15885                           ;interrupts.c: 61: if(PS_2_bits <44)
 15886  000F  302C               	movlw	44
 15887  0010  0020               	movlb	0	; select bank0
 15888  0011  0268               	subwf	_PS_2_bits,w
 15889  0012  1803               	skipnc
 15890  0013  287A               	goto	i1l5592
 15891                           
 15892                           ;interrupts.c: 62: {
 15893                           ;interrupts.c: 63: if(PS_2_bits <11 )
 15894  0014  300B               	movlw	11
 15895  0015  0268               	subwf	_PS_2_bits,w
 15896  0016  1803               	skipnc
 15897  0017  2830               	goto	i1l5566
 15898                           
 15899                           ;interrupts.c: 64: {
 15900                           ;interrupts.c: 65: PS_2_Read_Data_FirstTEMP <<= 1;
 15901  0018  3001               	movlw	1
 15902  0019  0024               	movlb	4	; select bank4
 15903  001A                     u703_25:	
 15904  001A  35A0               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15905  001B  0DA1               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15906  001C  0B89               	decfsz	9,f
 15907  001D  281A               	goto	u703_25
 15908                           
 15909                           ;interrupts.c: 66: if(READ_PS_2_PIN(0b00010000))
 15910  001E  3010               	movlw	16
 15911  001F  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 15912  0022  3A00               	xorlw	0
 15913  0023  1903               	skipnz
 15914  0024  282A               	goto	i1l5562
 15915                           
 15916                           ;interrupts.c: 67: {
 15917                           ;interrupts.c: 68: PS_2_Read_Data_FirstTEMP++;
 15918  0025  3001               	movlw	1
 15919  0026  0024               	movlb	4	; select bank4
 15920  0027  07A0               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15921  0028  3000               	movlw	0
 15922  0029  3DA1               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15923  002A                     i1l5562:	
 15924                           
 15925                           ;interrupts.c: 69: }
 15926                           ;interrupts.c: 70: PS_2_Read_Data_SecondTEMP = 0;
 15927  002A  0024               	movlb	4	; select bank4
 15928  002B  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15929  002C  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15930                           
 15931                           ;interrupts.c: 71: PS_2_Read_Data_ThirdTEMP = 0;
 15932  002D  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15933  002E  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15934                           
 15935                           ;interrupts.c: 72: }
 15936  002F  2872               	goto	i1l5588
 15937  0030                     i1l5566:	
 15938                           
 15939                           ;interrupts.c: 73: else if(PS_2_bits <22 )
 15940  0030  3016               	movlw	22
 15941  0031  0020               	movlb	0	; select bank0
 15942  0032  0268               	subwf	_PS_2_bits,w
 15943  0033  1803               	skipnc
 15944  0034  2848               	goto	i1l5574
 15945                           
 15946                           ;interrupts.c: 74: {
 15947                           ;interrupts.c: 75: PS_2_Read_Data_SecondTEMP <<= 1;
 15948  0035  3001               	movlw	1
 15949  0036  0024               	movlb	4	; select bank4
 15950  0037                     u706_25:	
 15951  0037  35A4               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15952  0038  0DA5               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15953  0039  0B89               	decfsz	9,f
 15954  003A  2837               	goto	u706_25
 15955                           
 15956                           ;interrupts.c: 76: if(READ_PS_2_PIN(0b00010000))
 15957  003B  3010               	movlw	16
 15958  003C  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 15959  003F  3A00               	xorlw	0
 15960  0040  1903               	skipnz
 15961  0041  2872               	goto	i1l5588
 15962                           
 15963                           ;interrupts.c: 77: {
 15964                           ;interrupts.c: 78: PS_2_Read_Data_SecondTEMP++;
 15965  0042  3001               	movlw	1
 15966  0043  0024               	movlb	4	; select bank4
 15967  0044  07A4               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15968  0045  3000               	movlw	0
 15969  0046  3DA5               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15970                           
 15971                           ;interrupts.c: 79: }
 15972                           ;interrupts.c: 80: }
 15973  0047  2872               	goto	i1l5588
 15974  0048                     i1l5574:	
 15975                           
 15976                           ;interrupts.c: 81: else if(PS_2_bits <33 )
 15977  0048  3021               	movlw	33
 15978  0049  0020               	movlb	0	; select bank0
 15979  004A  0268               	subwf	_PS_2_bits,w
 15980  004B  1803               	skipnc
 15981  004C  2860               	goto	i1l5582
 15982                           
 15983                           ;interrupts.c: 82: {
 15984                           ;interrupts.c: 83: PS_2_Read_Data_ThirdTEMP <<= 1;
 15985  004D  3001               	movlw	1
 15986  004E  0024               	movlb	4	; select bank4
 15987  004F                     u709_25:	
 15988  004F  35A6               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15989  0050  0DA7               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15990  0051  0B89               	decfsz	9,f
 15991  0052  284F               	goto	u709_25
 15992                           
 15993                           ;interrupts.c: 84: if(READ_PS_2_PIN(0b00010000))
 15994  0053  3010               	movlw	16
 15995  0054  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 15996  0057  3A00               	xorlw	0
 15997  0058  1903               	skipnz
 15998  0059  2872               	goto	i1l5588
 15999                           
 16000                           ;interrupts.c: 85: {
 16001                           ;interrupts.c: 86: PS_2_Read_Data_ThirdTEMP++;
 16002  005A  3001               	movlw	1
 16003  005B  0024               	movlb	4	; select bank4
 16004  005C  07A6               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16005  005D  3000               	movlw	0
 16006  005E  3DA7               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16007                           
 16008                           ;interrupts.c: 87: }
 16009                           ;interrupts.c: 88: }
 16010  005F  2872               	goto	i1l5588
 16011  0060                     i1l5582:	
 16012                           
 16013                           ;interrupts.c: 89: else
 16014                           ;interrupts.c: 90: {
 16015                           ;interrupts.c: 91: PS_2_Read_Data_ForthTEMP <<= 1;
 16016  0060  3001               	movlw	1
 16017  0061  0024               	movlb	4	; select bank4
 16018  0062                     u711_25:	
 16019  0062  35A2               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16020  0063  0DA3               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16021  0064  0B89               	decfsz	9,f
 16022  0065  2862               	goto	u711_25
 16023                           
 16024                           ;interrupts.c: 92: if(READ_PS_2_PIN(0b00010000))
 16025  0066  3010               	movlw	16
 16026  0067  3199  2164  3180   	fcall	i1_READ_PS_2_PIN
 16027  006A  3A00               	xorlw	0
 16028  006B  1903               	skipnz
 16029  006C  2872               	goto	i1l5588
 16030                           
 16031                           ;interrupts.c: 93: {
 16032                           ;interrupts.c: 94: PS_2_Read_Data_ForthTEMP++;
 16033  006D  3001               	movlw	1
 16034  006E  0024               	movlb	4	; select bank4
 16035  006F  07A2               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16036  0070  3000               	movlw	0
 16037  0071  3DA3               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16038  0072                     i1l5588:	
 16039                           
 16040                           ;interrupts.c: 95: }
 16041                           ;interrupts.c: 96: }
 16042                           ;interrupts.c: 97: PS_2_bits++;
 16043  0072  3001               	movlw	1
 16044  0073  0020               	movlb	0	; select bank0
 16045  0074  00A1               	movwf	??_isr
 16046  0075  0821               	movf	??_isr,w
 16047  0076  07E8               	addwf	_PS_2_bits,f
 16048                           
 16049                           ;interrupts.c: 98: Read_Timer = 0;
 16050  0077  0022               	movlb	2	; select bank2
 16051  0078  01ED               	clrf	_Read_Timer^(0+256)
 16052  0079  01EE               	clrf	(_Read_Timer+1)^(0+256)
 16053  007A                     i1l5592:	
 16054                           
 16055                           ;interrupts.c: 99: }
 16056                           ;interrupts.c: 100: IOCAF &= ~0b00100000;
 16057  007A  30DF               	movlw	223
 16058  007B  287F               	goto	L21
 16059  007C                     i1l61:	
 16060                           ;interrupts.c: 101: }
 16061                           
 16062                           
 16063                           ;interrupts.c: 102: else if (IOCAF & 0b00010000)
 16064  007C  1E13               	btfss	19,4	;volatile
 16065  007D  2885               	goto	i1l74
 16066                           
 16067                           ;interrupts.c: 103: {
 16068                           ;interrupts.c: 104: IOCAF &= ~0b00010000;
 16069  007E  30EF               	movlw	239
 16070  007F                     L21:	
 16071  007F  0020               	movlb	0	; select bank0
 16072  0080  00A1               	movwf	??_isr
 16073  0081  0821               	movf	??_isr,w
 16074  0082  0027               	movlb	7	; select bank7
 16075  0083  0593               	andwf	19,f	;volatile
 16076                           
 16077                           ;interrupts.c: 105: }
 16078  0084  28D4               	goto	i1l87
 16079  0085                     i1l74:	
 16080                           
 16081                           ;interrupts.c: 106: else if (PIR1bits.RCIF)
 16082  0085  0020               	movlb	0	; select bank0
 16083  0086  1E91               	btfss	17,5	;volatile
 16084  0087  28B6               	goto	i1l76
 16085                           
 16086                           ;interrupts.c: 107: {
 16087                           ;interrupts.c: 109: LATC |= 0b00001000;
 16088  0088  0022               	movlb	2	; select bank2
 16089  0089  158E               	bsf	14,3	;volatile
 16090                           
 16091                           ;interrupts.c: 110: SinLEDtimer = 0;
 16092  008A  0024               	movlb	4	; select bank4
 16093  008B  01A8               	clrf	_SinLEDtimer^(0+512)
 16094  008C  01A9               	clrf	(_SinLEDtimer+1)^(0+512)
 16095                           
 16096                           ;interrupts.c: 111: Rx_fault = 0;
 16097  008D  0020               	movlb	0	; select bank0
 16098  008E  01A3               	clrf	isr@Rx_fault
 16099                           
 16100                           ;interrupts.c: 112: if(RC1STAbits.FERR)
 16101  008F  0023               	movlb	3	; select bank3
 16102  0090  1D1D               	btfss	29,2	;volatile
 16103  0091  2895               	goto	i1l5604
 16104                           
 16105                           ;interrupts.c: 113: {
 16106                           ;interrupts.c: 114: Rx_fault =1;
 16107  0092  0020               	movlb	0	; select bank0
 16108  0093  01A3               	clrf	isr@Rx_fault
 16109  0094  0AA3               	incf	isr@Rx_fault,f
 16110  0095                     i1l5604:	
 16111                           
 16112                           ;interrupts.c: 115: }
 16113                           ;interrupts.c: 116: rx = ReadUSART();
 16114  0095  3198  20C4  3180   	fcall	i1_ReadUSART
 16115  0098  0020               	movlb	0	; select bank0
 16116  0099  00A1               	movwf	??_isr
 16117  009A  0821               	movf	??_isr,w
 16118  009B  00A4               	movwf	isr@rx
 16119                           
 16120                           ;interrupts.c: 117: if(Rx_fault == 1)
 16121  009C  0823               	movf	isr@Rx_fault,w
 16122  009D  3A01               	xorlw	1
 16123  009E  1D03               	skipz
 16124  009F  28A7               	goto	i1l5612
 16125                           
 16126                           ;interrupts.c: 118: {
 16127                           ;interrupts.c: 119: if(rx == 0)
 16128  00A0  08A4               	movf	isr@rx,f
 16129  00A1  1D03               	skipz
 16130  00A2  28B3               	goto	i1l5614
 16131                           
 16132                           ;interrupts.c: 120: {
 16133                           ;interrupts.c: 121: UART_send_break();
 16134  00A3  3198  20AB  3180   	fcall	i1_UART_send_break
 16135                           
 16136                           ;interrupts.c: 122: }
 16137                           ;interrupts.c: 123: }
 16138  00A6  28B3               	goto	i1l5614
 16139  00A7                     i1l5612:	
 16140                           
 16141                           ;interrupts.c: 124: else
 16142                           ;interrupts.c: 125: {
 16143                           ;interrupts.c: 126: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16144  00A7  01F8               	clrf	i1UARTchar@NinethBit_override
 16145  00A8  0AF8               	incf	i1UARTchar@NinethBit_override,f
 16146  00A9  3000               	movlw	0
 16147  00AA  0023               	movlb	3	; select bank3
 16148  00AB  181D               	btfsc	29,0	;volatile
 16149  00AC  3001               	movlw	1
 16150  00AD  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16151  00AE  0020               	movlb	0	; select bank0
 16152  00AF  0824               	movf	isr@rx,w
 16153  00B0  319C  2419  3180   	fcall	i1_UARTchar
 16154  00B3                     i1l5614:	
 16155                           
 16156                           ;interrupts.c: 127: }
 16157                           ;interrupts.c: 128: PIR1bits.RCIF = 0;
 16158  00B3  0020               	movlb	0	; select bank0
 16159  00B4  1291               	bcf	17,5	;volatile
 16160                           
 16161                           ;interrupts.c: 129: }
 16162  00B5  28D4               	goto	i1l87
 16163  00B6                     i1l76:	
 16164                           
 16165                           ;interrupts.c: 130: else if(PIR1bits.TMR2IF)
 16166  00B6  1C91               	btfss	17,1	;volatile
 16167  00B7  28D4               	goto	i1l87
 16168                           
 16169                           ;interrupts.c: 131: {
 16170                           ;interrupts.c: 133: PIE1bits.TMR2IE = 0;
 16171  00B8  0021               	movlb	1	; select bank1
 16172  00B9  1091               	bcf	17,1	;volatile
 16173                           
 16174                           ;interrupts.c: 134: blinkdelay++;LATC ^= 0b00000010;
 16175  00BA  3001               	movlw	1
 16176  00BB  0020               	movlb	0	; select bank0
 16177  00BC  00A1               	movwf	??_isr
 16178  00BD  0821               	movf	??_isr,w
 16179  00BE  0021               	movlb	1	; select bank1
 16180  00BF  07EA               	addwf	_blinkdelay^(0+128),f
 16181  00C0  3002               	movlw	2
 16182  00C1  0020               	movlb	0	; select bank0
 16183  00C2  00A1               	movwf	??_isr
 16184  00C3  0821               	movf	??_isr,w
 16185  00C4  0022               	movlb	2	; select bank2
 16186  00C5  068E               	xorwf	14,f	;volatile
 16187                           
 16188                           ;interrupts.c: 135: if(blinkdelay > 4)
 16189  00C6  3005               	movlw	5
 16190  00C7  0021               	movlb	1	; select bank1
 16191  00C8  026A               	subwf	_blinkdelay^(0+128),w
 16192  00C9  1C03               	skipc
 16193  00CA  28D2               	goto	i1l5628
 16194                           
 16195                           ;interrupts.c: 136: {
 16196                           ;interrupts.c: 137: if(Alarm)
 16197  00CB  0868               	movf	_Alarm^(0+128),w
 16198  00CC  1D03               	skipz
 16199                           
 16200                           ;interrupts.c: 138: {
 16201                           ;interrupts.c: 140: }
 16202  00CD  28D0               	goto	i1l5626
 16203                           
 16204                           ;interrupts.c: 141: else
 16205                           ;interrupts.c: 142: {
 16206                           ;interrupts.c: 143: LATC |= 0b00000010;
 16207  00CE  0022               	movlb	2	; select bank2
 16208  00CF  148E               	bsf	14,1	;volatile
 16209  00D0                     i1l5626:	
 16210                           
 16211                           ;interrupts.c: 144: }
 16212                           ;interrupts.c: 145: blinkdelay =0;
 16213  00D0  0021               	movlb	1	; select bank1
 16214  00D1  01EA               	clrf	_blinkdelay^(0+128)
 16215  00D2                     i1l5628:	
 16216                           
 16217                           ;interrupts.c: 146: }
 16218                           ;interrupts.c: 147: PIR1bits.TMR2IF =0;
 16219  00D2  0020               	movlb	0	; select bank0
 16220  00D3  1091               	bcf	17,1	;volatile
 16221  00D4                     i1l87:	
 16222                           ;interrupts.c: 150: else
 16223                           ;interrupts.c: 151: {
 16224                           
 16225                           ;interrupts.c: 149: }
 16226                           
 16227  00D4  0020               	movlb	0	; select bank0
 16228  00D5  0822               	movf	??_isr+1,w
 16229  00D6  00FF               	movwf	127
 16230  00D7  107E               	bcf	126,0	;clear compiler interrupt flag
 16231  00D8  0009               	retfie
 16232  00D9                     __end_of_isr:	
 16233                           
 16234                           	psect	text52
 16235  1C19                     __ptext52:	
 16236 ;; *************** function i1_UARTchar *****************
 16237 ;; Defined at:
 16238 ;;		line 189 in file "UART.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;  data            1    wreg     unsigned char 
 16241 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 16242 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  data            1    0[BANK0 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;		None               void
 16247 ;; Registers used:
 16248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16256 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16257 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;Total ram usage:        7 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    1
 16261 ;; This function calls:
 16262 ;;		i1_CheckSum_byte
 16263 ;; This function is called by:
 16264 ;;		_isr
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           
 16269                           ;psect for function i1_UARTchar
 16270  1C19                     i1_UARTchar:	
 16271                           
 16272                           ;incstack = 0
 16273                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16274                           ;i1UARTchar@data stored from wreg
 16275  1C19  0020               	movlb	0	; select bank0
 16276  1C1A  00A0               	movwf	i1UARTchar@data
 16277                           
 16278                           ;UART.c: 192: if(TXSTAbits.TX9)
 16279  1C1B  0023               	movlb	3	; select bank3
 16280  1C1C  1F1E               	btfss	30,6	;volatile
 16281  1C1D  2C5E               	goto	i1l5506
 16282                           
 16283                           ;UART.c: 193: {
 16284                           ;UART.c: 195: if(!NinethBit_override)
 16285  1C1E  08F8               	movf	i1UARTchar@NinethBit_override,f
 16286  1C1F  1903               	btfsc	3,2
 16287  1C20  2C48               	goto	i1l5502
 16288  1C21  2C55               	goto	i1l5504
 16289  1C22                     i1l5496:	
 16290                           ;UART.c: 199: {
 16291                           ;UART.c: 200: case 1:
 16292                           
 16293                           ;UART.c: 196: {
 16294                           ;UART.c: 198: switch (PARITY)
 16295                           
 16296                           
 16297                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16298  1C22  0020               	movlb	0	; select bank0
 16299  1C23  0820               	movf	i1UARTchar@data,w
 16300  1C24  00FA               	movwf	??i1_UARTchar
 16301  1C25  01FB               	clrf	??i1_UARTchar+1
 16302  1C26  087A               	movf	??i1_UARTchar,w
 16303  1C27  00F0               	movwf	i1CheckSum_byte@This
 16304  1C28  087B               	movf	??i1_UARTchar+1,w
 16305  1C29  00F1               	movwf	i1CheckSum_byte@This+1
 16306  1C2A  3003               	movlw	3
 16307  1C2B  2C35               	goto	L24
 16308  1C2C                     i1l5498:	
 16309                           ;UART.c: 203: case 2:
 16310                           
 16311                           ;UART.c: 202: break;
 16312                           
 16313                           
 16314                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16315  1C2C  0020               	movlb	0	; select bank0
 16316  1C2D  0820               	movf	i1UARTchar@data,w
 16317  1C2E  00FA               	movwf	??i1_UARTchar
 16318  1C2F  01FB               	clrf	??i1_UARTchar+1
 16319  1C30  087A               	movf	??i1_UARTchar,w
 16320  1C31  00F0               	movwf	i1CheckSum_byte@This
 16321  1C32  087B               	movf	??i1_UARTchar+1,w
 16322  1C33  00F1               	movwf	i1CheckSum_byte@This+1
 16323  1C34  3002               	movlw	2
 16324  1C35                     L24:	
 16325  1C35  00FC               	movwf	??i1_UARTchar+2
 16326  1C36  087C               	movf	??i1_UARTchar+2,w
 16327  1C37  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16328  1C38  3199  21FC  319C   	fcall	i1_CheckSum_byte
 16329  1C3B  00FD               	movwf	??i1_UARTchar+3
 16330  1C3C  0023               	movlb	3	; select bank3
 16331  1C3D  081E               	movf	30,w	;volatile
 16332  1C3E  067D               	xorwf	??i1_UARTchar+3,w
 16333  1C3F  39FE               	andlw	-2
 16334  1C40  067D               	xorwf	??i1_UARTchar+3,w
 16335  1C41  2C5D               	goto	L23
 16336  1C42                     i1l491:	
 16337                           ;UART.c: 206: case 3:
 16338                           
 16339                           ;UART.c: 205: break;
 16340                           
 16341                           
 16342                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 16343  1C42  0023               	movlb	3	; select bank3
 16344  1C43  141E               	bsf	30,0	;volatile
 16345                           
 16346                           ;UART.c: 208: break;
 16347  1C44  2C5E               	goto	i1l5506
 16348  1C45                     i1l492:	
 16349                           ;UART.c: 209: default:
 16350                           
 16351                           
 16352                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 16353  1C45  0023               	movlb	3	; select bank3
 16354  1C46  101E               	bcf	30,0	;volatile
 16355                           
 16356                           ;UART.c: 212: }
 16357                           
 16358                           ;UART.c: 211: break;
 16359  1C47  2C5E               	goto	i1l5506
 16360  1C48                     i1l5502:	
 16361  1C48  0020               	movlb	0	; select bank0
 16362  1C49  0867               	movf	_PARITY,w
 16363                           
 16364                           ; Switch size 1, requested type "space"
 16365                           ; Number of cases is 3, Range of values is 1 to 3
 16366                           ; switch strategies available:
 16367                           ; Name         Instructions Cycles
 16368                           ; simple_byte           10     6 (average)
 16369                           ; direct_byte           15     9 (fixed)
 16370                           ; jumptable            263     9 (fixed)
 16371                           ;	Chosen strategy is simple_byte
 16372  1C4A  3A01               	xorlw	1	; case 1
 16373  1C4B  1903               	skipnz
 16374  1C4C  2C22               	goto	i1l5496
 16375  1C4D  3A03               	xorlw	3	; case 2
 16376  1C4E  1903               	skipnz
 16377  1C4F  2C2C               	goto	i1l5498
 16378  1C50  3A01               	xorlw	1	; case 3
 16379  1C51  1903               	skipnz
 16380  1C52  2C42               	goto	i1l491
 16381  1C53  2C45               	goto	i1l492
 16382                           
 16383                           ;UART.c: 213: }
 16384  1C54  2C5E               	goto	i1l5506
 16385  1C55                     i1l5504:	
 16386                           
 16387                           ;UART.c: 214: else
 16388                           ;UART.c: 215: {
 16389                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16390  1C55  3001               	movlw	1
 16391  1C56  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16392  1C57  00FA               	movwf	??i1_UARTchar
 16393  1C58  0023               	movlb	3	; select bank3
 16394  1C59  081E               	movf	30,w	;volatile
 16395  1C5A  067A               	xorwf	??i1_UARTchar,w
 16396  1C5B  39FE               	andlw	-2
 16397  1C5C  067A               	xorwf	??i1_UARTchar,w
 16398  1C5D                     L23:	
 16399  1C5D  009E               	movwf	30	;volatile
 16400  1C5E                     i1l5506:	
 16401                           
 16402                           ;UART.c: 217: }
 16403                           ;UART.c: 218: }
 16404                           ;UART.c: 219: TXREG = data;
 16405  1C5E  0020               	movlb	0	; select bank0
 16406  1C5F  0820               	movf	i1UARTchar@data,w
 16407  1C60  0023               	movlb	3	; select bank3
 16408  1C61  009A               	movwf	26	;volatile
 16409  1C62  0008               	return
 16410  1C63                     __end_ofi1_UARTchar:	
 16411                           
 16412                           	psect	text53
 16413  19FC                     __ptext53:	
 16414 ;; *************** function i1_CheckSum_byte *****************
 16415 ;; Defined at:
 16416 ;;		line 282 in file "MISC.c"
 16417 ;; Parameters:    Size  Location     Type
 16418 ;;  This            2    0[COMMON] unsigned int 
 16419 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16420 ;; Auto vars:     Size  Location     Type
 16421 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16422 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16423 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16424 ;; Return value:  Size  Location     Type
 16425 ;;                  1    wreg      unsigned char 
 16426 ;; Registers used:
 16427 ;;		wreg, status,2, status,0
 16428 ;; Tracked objects:
 16429 ;;		On entry : 0/0
 16430 ;;		On exit  : 0/0
 16431 ;;		Unchanged: 0/0
 16432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16433 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;Total ram usage:        8 bytes
 16438 ;; Hardware stack levels used:    1
 16439 ;; This function calls:
 16440 ;;		Nothing
 16441 ;; This function is called by:
 16442 ;;		i1_UARTchar
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           
 16447                           ;psect for function i1_CheckSum_byte
 16448  19FC                     i1_CheckSum_byte:	
 16449                           
 16450                           ;MISC.c: 284: char i = 0;
 16451                           
 16452                           ;incstack = 0
 16453                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16454  19FC  01F7               	clrf	i1CheckSum_byte@i
 16455                           
 16456                           ;MISC.c: 285: unsigned char Parity = 0;
 16457  19FD  01F6               	clrf	i1CheckSum_byte@Parity
 16458                           
 16459                           ;MISC.c: 286: unsigned int ThisTemp = This;
 16460  19FE  0871               	movf	i1CheckSum_byte@This+1,w
 16461  19FF  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16462  1A00  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16463  1A01  0870               	movf	i1CheckSum_byte@This,w
 16464  1A02  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16465  1A03  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16466                           
 16467                           ;MISC.c: 288: for (i =0; i<8; i++)
 16468  1A04  01F7               	clrf	i1CheckSum_byte@i
 16469  1A05  3008               	movlw	8
 16470  1A06  0277               	subwf	i1CheckSum_byte@i,w
 16471  1A07  1803               	btfsc	3,0
 16472  1A08  2A1C               	goto	i1l5216
 16473  1A09                     i1l378:	
 16474                           
 16475                           ;MISC.c: 289: {
 16476                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 16477  1A09  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16478  1A0A  2A0F               	goto	i1l380
 16479                           
 16480                           ;MISC.c: 291: {
 16481                           ;MISC.c: 292: Parity++;
 16482  1A0B  3001               	movlw	1
 16483  1A0C  00F3               	movwf	??i1_CheckSum_byte
 16484  1A0D  0873               	movf	??i1_CheckSum_byte,w
 16485  1A0E  07F6               	addwf	i1CheckSum_byte@Parity,f
 16486  1A0F                     i1l380:	
 16487                           
 16488                           ;MISC.c: 293: }
 16489                           ;MISC.c: 294: ThisTemp >>= 1;
 16490  1A0F  3001               	movlw	1
 16491  1A10                     u661_25:	
 16492  1A10  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16493  1A11  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16494  1A12  0B89               	decfsz	9,f
 16495  1A13  2A10               	goto	u661_25
 16496  1A14  3001               	movlw	1
 16497  1A15  00F3               	movwf	??i1_CheckSum_byte
 16498  1A16  0873               	movf	??i1_CheckSum_byte,w
 16499  1A17  07F7               	addwf	i1CheckSum_byte@i,f
 16500  1A18  3008               	movlw	8
 16501  1A19  0277               	subwf	i1CheckSum_byte@i,w
 16502  1A1A  1C03               	skipc
 16503  1A1B  2A09               	goto	i1l378
 16504  1A1C                     i1l5216:	
 16505                           
 16506                           ;MISC.c: 295: }
 16507                           ;MISC.c: 296: if(Odd_Even == 3)
 16508  1A1C  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16509  1A1D  3A03               	xorlw	3
 16510  1A1E  1D03               	skipz
 16511  1A1F  2A26               	goto	i1l381
 16512                           
 16513                           ;MISC.c: 297: {
 16514                           ;MISC.c: 298: if(Parity % 2 == 0)
 16515  1A20  1876               	btfsc	i1CheckSum_byte@Parity,0
 16516  1A21  2A24               	goto	i1l5224
 16517                           
 16518                           ;MISC.c: 299: {
 16519                           ;MISC.c: 300: return 1;
 16520  1A22  3001               	movlw	1
 16521  1A23  0008               	return
 16522  1A24                     i1l5224:	
 16523                           
 16524                           ;MISC.c: 301: }
 16525                           ;MISC.c: 302: return 0;
 16526  1A24  3000               	movlw	0
 16527                           
 16528                           ;MISC.c: 303: }
 16529  1A25  0008               	return
 16530  1A26                     i1l381:	
 16531                           
 16532                           ;MISC.c: 304: else
 16533                           ;MISC.c: 305: {
 16534                           ;MISC.c: 306: if(Parity % 2 == 1)
 16535  1A26  1C76               	btfss	i1CheckSum_byte@Parity,0
 16536  1A27  2A2A               	goto	i1l5234
 16537                           
 16538                           ;MISC.c: 307: {
 16539                           ;MISC.c: 308: return 1;
 16540  1A28  3001               	movlw	1
 16541  1A29  0008               	return
 16542  1A2A                     i1l5234:	
 16543                           
 16544                           ;MISC.c: 309: }
 16545                           ;MISC.c: 310: return 0;
 16546  1A2A  3000               	movlw	0
 16547  1A2B  0008               	return
 16548  1A2C                     __end_ofi1_CheckSum_byte:	
 16549                           
 16550                           	psect	text54
 16551  18AB                     __ptext54:	
 16552 ;; *************** function i1_UART_send_break *****************
 16553 ;; Defined at:
 16554 ;;		line 248 in file "UART.c"
 16555 ;; Parameters:    Size  Location     Type
 16556 ;;		None
 16557 ;; Auto vars:     Size  Location     Type
 16558 ;;		None
 16559 ;; Return value:  Size  Location     Type
 16560 ;;		None               void
 16561 ;; Registers used:
 16562 ;;		wreg
 16563 ;; Tracked objects:
 16564 ;;		On entry : 0/0
 16565 ;;		On exit  : 0/0
 16566 ;;		Unchanged: 0/0
 16567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;Total ram usage:        0 bytes
 16573 ;; Hardware stack levels used:    1
 16574 ;; This function calls:
 16575 ;;		Nothing
 16576 ;; This function is called by:
 16577 ;;		_isr
 16578 ;; This function uses a non-reentrant model
 16579 ;;
 16580                           
 16581                           
 16582                           ;psect for function i1_UART_send_break
 16583  18AB                     i1_UART_send_break:	
 16584                           
 16585                           ;UART.c: 250: TX1STA |= 0b00001000;
 16586                           
 16587                           ;incstack = 0
 16588                           ; Regs used in i1_UART_send_break: [wreg]
 16589  18AB  0023               	movlb	3	; select bank3
 16590  18AC  159E               	bsf	30,3	;volatile
 16591                           
 16592                           ;UART.c: 251: TXREG = 'd';
 16593  18AD  3064               	movlw	100
 16594  18AE  009A               	movwf	26	;volatile
 16595  18AF  0008               	return
 16596  18B0                     __end_ofi1_UART_send_break:	
 16597                           
 16598                           	psect	text55
 16599  18C4                     __ptext55:	
 16600 ;; *************** function i1_ReadUSART *****************
 16601 ;; Defined at:
 16602 ;;		line 234 in file "UART.c"
 16603 ;; Parameters:    Size  Location     Type
 16604 ;;		None
 16605 ;; Auto vars:     Size  Location     Type
 16606 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16607 ;; Return value:  Size  Location     Type
 16608 ;;                  1    wreg      unsigned char 
 16609 ;; Registers used:
 16610 ;;		wreg
 16611 ;; Tracked objects:
 16612 ;;		On entry : 0/0
 16613 ;;		On exit  : 0/0
 16614 ;;		Unchanged: 0/0
 16615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;Total ram usage:        2 bytes
 16621 ;; Hardware stack levels used:    1
 16622 ;; This function calls:
 16623 ;;		Nothing
 16624 ;; This function is called by:
 16625 ;;		_isr
 16626 ;; This function uses a non-reentrant model
 16627 ;;
 16628                           
 16629                           
 16630                           ;psect for function i1_ReadUSART
 16631  18C4                     i1_ReadUSART:	
 16632                           
 16633                           ;UART.c: 236: char data;
 16634                           ;UART.c: 238: if(RCSTAbits.FERR)
 16635                           
 16636                           ;incstack = 0
 16637                           ; Regs used in i1_ReadUSART: [wreg]
 16638  18C4  0023               	movlb	3	; select bank3
 16639  18C5  191D               	btfsc	29,2	;volatile
 16640                           
 16641                           ;UART.c: 240: if(RCSTAbits.OERR)
 16642  18C6  1C9D               	btfss	29,1	;volatile
 16643  18C7  28C9               	goto	i1l5514
 16644                           
 16645                           ;UART.c: 241: RCSTAbits.CREN = 0;
 16646  18C8  121D               	bcf	29,4	;volatile
 16647  18C9                     i1l5514:	
 16648                           
 16649                           ;UART.c: 243: data = RCREG;
 16650  18C9  0819               	movf	25,w	;volatile
 16651  18CA  00F0               	movwf	??i1_ReadUSART
 16652  18CB  0870               	movf	??i1_ReadUSART,w
 16653  18CC  00F1               	movwf	i1ReadUSART@data
 16654                           
 16655                           ;UART.c: 245: return (data);
 16656  18CD  0871               	movf	i1ReadUSART@data,w
 16657  18CE  0008               	return
 16658  18CF                     __end_ofi1_ReadUSART:	
 16659                           
 16660                           	psect	text56
 16661  1964                     __ptext56:	
 16662 ;; *************** function i1_READ_PS_2_PIN *****************
 16663 ;; Defined at:
 16664 ;;		line 182 in file "PS_2.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;  DATA_CLK        1    wreg     unsigned char 
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16669 ;; Return value:  Size  Location     Type
 16670 ;;                  1    wreg      unsigned char 
 16671 ;; Registers used:
 16672 ;;		wreg
 16673 ;; Tracked objects:
 16674 ;;		On entry : 0/0
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;Total ram usage:        1 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; This function calls:
 16685 ;;		Nothing
 16686 ;; This function is called by:
 16687 ;;		_isr
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           
 16692                           ;psect for function i1_READ_PS_2_PIN
 16693  1964                     i1_READ_PS_2_PIN:	
 16694                           
 16695                           ;incstack = 0
 16696                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16697                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16698  1964  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16699                           
 16700                           ;PS_2.c: 184: if(DATA_CLK == 0b00100000)
 16701  1965  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16702  1966  3A20               	xorlw	32
 16703  1967  1D03               	skipz
 16704  1968  2970               	goto	i1l694
 16705                           
 16706                           ;PS_2.c: 185: {
 16707                           ;PS_2.c: 187: if((PORTA & 0b00100000) == 0b00100000)
 16708  1969  0020               	movlb	0	; select bank0
 16709  196A  1E8C               	btfss	12,5	;volatile
 16710  196B  296E               	goto	i1l5532
 16711                           
 16712                           ;PS_2.c: 188: {
 16713                           ;PS_2.c: 189: return (1);
 16714  196C  3001               	movlw	1
 16715                           
 16716                           ;PS_2.c: 190: }
 16717  196D  0008               	return
 16718  196E                     i1l5532:	
 16719                           
 16720                           ;PS_2.c: 191: else
 16721                           ;PS_2.c: 192: {
 16722                           ;PS_2.c: 193: return 0;
 16723  196E  3000               	movlw	0
 16724                           
 16725                           ;PS_2.c: 194: }
 16726                           ;PS_2.c: 195: }
 16727  196F  0008               	return
 16728  1970                     i1l694:	
 16729                           
 16730                           ;PS_2.c: 196: else
 16731                           ;PS_2.c: 197: {
 16732                           ;PS_2.c: 199: if((PORTA & 0b00010000) == 0b00010000)
 16733  1970  0020               	movlb	0	; select bank0
 16734  1971  1E0C               	btfss	12,4	;volatile
 16735  1972  2975               	goto	i1l5542
 16736                           
 16737                           ;PS_2.c: 200: {
 16738                           ;PS_2.c: 201: return (1);
 16739  1973  3001               	movlw	1
 16740                           
 16741                           ;PS_2.c: 202: }
 16742  1974  0008               	return
 16743  1975                     i1l5542:	
 16744                           
 16745                           ;PS_2.c: 203: else
 16746                           ;PS_2.c: 204: {
 16747                           ;PS_2.c: 205: return 0;
 16748  1975  3000               	movlw	0
 16749  1976  0008               	return
 16750  1977                     __end_ofi1_READ_PS_2_PIN:	
 16751  007E                     btemp	set	126	;btemp
 16752  007E                     pic14e$flags	set	126
 16753  007E                     wtemp	set	126
 16754  007E                     wtemp0	set	126
 16755  0080                     wtemp1	set	128
 16756  0082                     wtemp2	set	130
 16757  0084                     wtemp3	set	132
 16758  0086                     wtemp4	set	134
 16759  0088                     wtemp5	set	136
 16760  007F                     wtemp6	set	127
 16761  007E                     ttemp	set	126
 16762  007E                     ttemp0	set	126
 16763  0081                     ttemp1	set	129
 16764  0084                     ttemp2	set	132
 16765  0087                     ttemp3	set	135
 16766  007F                     ttemp4	set	127
 16767  007E                     ltemp	set	126
 16768  007E                     ltemp0	set	126
 16769  0082                     ltemp1	set	130
 16770  0086                     ltemp2	set	134
 16771  0080                     ltemp3	set	128


Data Sizes:
    Strings     669
    Constant    507
    Data        14
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      24
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_33(CODE[45]), STR_32(CODE[41]), STR_31(CODE[40]), STR_30(CODE[47]), 
		 -> STR_29(CODE[46]), STR_24(CODE[33]), STR_23(CODE[29]), STR_22(CODE[28]), 
		 -> STR_21(CODE[35]), STR_20(CODE[34]), STR_17(CODE[33]), STR_16(CODE[29]), 
		 -> STR_15(CODE[28]), STR_14(CODE[35]), STR_13(CODE[34]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1078$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[20]), PS_2_Update@buf(BANK5[60]), STR_28(CODE[3]), STR_27(CODE[35]), 
		 -> STR_26(CODE[18]), STR_25(CODE[3]), SetBaud@buf(BANK2[50]), STR_19(CODE[15]), 
		 -> STR_18(CODE[3]), Init_System@buf(BANK1[60]), STR_12(CODE[3]), STR_11(CODE[20]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[22]), STR_7(CODE[21]), 
		 -> STR_6(CODE[24]), STR_5(CODE[35]), STR_4(CODE[3]), Version(BANK4[4]), 
		 -> STR_3(CODE[19]), STR_2(CODE[26]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  155729
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11524
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3016
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   57306
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   49257
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   23495
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5131
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4742
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17870
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    3357
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    7944
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3095
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    7978
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    4931
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2985
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     542
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                  i1_UART_send_break
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     427
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      18      13       30.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     165      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     165      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jan 21 15:58:01 2015

              _PS_2_DISABLE_INTERRUPT 19DD                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0028                     ??_ReadFlash_4Byte 002E  
                                   _i 00EB                          ___fldiv@cntr 0045  
                        ___fldiv@sign 0047                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l170 0FE6                                   l158 0E5C  
                                 l264 1B2C                                   l266 1B45  
                                 l380 1A70                                   l381 1A87  
                                 l517 1AF0                                   l519 1B0F  
                                 l480 1B8A                                   l529 177B  
                                 l378 1A6A                                   l474 1B73  
                                 l491 1C8E                                   l492 1C91  
                                 l478 1B81                                   l674 18E2  
                                 l834 055C                                   l907 0D16  
                                 l908 0D6C                                   l764 03CE  
                                 l669 18D7                                   l694 195E  
                                 l846 07C4                                   l854 06B2  
                                 l679 193D                                   l992 1AE1  
                                 _MEM 0230                                   _PR2 001B  
                                 _isr 0004                          __CFG_BORV$LO 0000  
                                 wreg 0009                          ___flmul@cntr 005A  
                        ___flmul@sign 005B            __end_of_ScanCodeFunctionE0 09D3  
                       ___flpack@sign 002A                                  l1001 18EB  
                                l1056 1BA5                                  l1059 1BCA  
                                l1094 14B7                                  l1097 14D5  
                                l1275 1F77                                  l1269 1F5D  
                                l6002 1BDF                                  l6004 1BED  
                                l6012 1C10                                  l5240 1943  
                                l6008 1C05                                  l7000 06BD  
                                l5242 1949                                  l6026 195C  
                                l6212 19EF                                  l6036 1962  
                                l6300 17C3                                  l7020 06F4  
                                l7012 06DD                                  l7004 06C6  
                                l6054 19BD                                  l6046 1B12  
                                l6142 14B5                                  l6144 14B9  
                                l6320 19AE                                  l6304 17CC  
                                l7040 0749                                  l7024 0702  
                                l7016 06EB                                  l7008 06D4  
                                l7120 1044                                  l6154 14E4  
                                l6306 17D9                                  l7042 0752  
                                l7050 0771                                  l6404 0D7A  
                                l6180 152D                                  l6172 1528  
                                l6164 14FB                                  l6148 14BE  
                                l7220 15F6                                  l6308 17EC  
                                l7060 07C2                                  l7044 075B  
                                l7052 078C                                  l6430 0DBE  
                                l6406 0D97                                  l6350 0D10  
                                l7302 13A9                                  l6094 11E7  
                                l6182 1494                                  l6246 192E  
                                l7038 0741                                  l7062 07C5  
                                l7126 105E                                  l6432 0DDB  
                                l6416 0D9A                                  l6360 0D21  
                                l7320 13E8                                  l6096 11EB  
                                l6184 157D                                  l7240 164B  
                                l7224 15FF                                  l6272 1762  
                                l6512 1A35                                  l7048 0764  
                                l7056 07AE                                  l7144 10C3  
                                l6442 0DDE                                  l6418 0DB7  
                                l7314 13D3                                  l7234 1630  
                                l6506 0CA7                                  l6290 17A4  
                                l7138 10A3                                  l5474 1EEB  
                                l6444 0DFB                                  l6372 0D26  
                                l6348 0CF3                                  l7332 1412  
                                l7308 13BE                                  l7236 1639  
                                l7244 1654                                  l6276 1775  
                                l6516 1A3F                                  l6700 036E  
                                l6604 024A                                  l6532 1F3A  
                                l7180 116E                                  l7164 111F  
                                l6454 0DFE                                  l6374 0D43  
                                l6358 0D1B                                  l7350 1445  
                                l7326 13FD                                  l7238 1642  
                                l7246 1661                                  l6294 17A9  
                                l6710 0385                                  l6630 02CD  
                                l6606 0250                                  l6542 1F62  
                                l6534 1F45                                  l7158 1105  
                                l5478 1F14                                  l6456 0E1B  
                                l6392 0D71                                  l6384 0D46  
                                l7344 143C                                  l5840 1C76  
                                l7248 167D                                  l6296 17B1  
                                l6800 0445                                  l6712 0373  
                                l6616 02AA                                  l6560 0124  
                                l7280 1DC7                                  l6544 1F6B  
                                l6536 1F4A                                  l6528 1F31  
                                l7192 118E                                  l7176 1164  
                                l7424 0E86                                  l6466 0E1E  
                                l6394 0D77                                  l6386 0D63  
                                l7362 1457                                  l7338 1427  
                                l6482 199B                                  l5922 12DF  
                                l6298 17BA                                  l6810 045F  
                                l6802 045D                                  l6722 039E  
                                l6714 038B                                  l6730 03AC  
                                l6650 02FD                                  l6618 02B2  
                                l6562 0126                                  l7282 1DF3  
                                l5780 1A7D                                  l5764 1B4F  
                                l6468 0E3B                                  l7380 148A  
                                l7356 144E                                  l5860 1B62  
                                l5828 18F5                                  l5844 1C94  
                                l6812 0464                                  l6740 03C5  
                                l6724 038C                                  l6580 0190  
                                l7292 1DFD                                  l7188 1184  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 0015  
                                l7374 1475                                  l5838 1C6D  
                                l5846 1CA1                                  l6494 1988  
                                l5934 12B2                                  l6822 048D  
                                l6814 0479                                  l6750 03DA  
                                l6726 03A4                                  l6662 0319  
                                l6582 0192                                  l7470 0F83  
                                l7446 0EF8                                  l7368 146C  
                                l5872 1B75                                  l5864 1B68  
                                l5848 1CAC                                  l5936 1323  
                                l5928 1305                                  l6920 0577  
                                l6808 0476                                  l6912 056B  
                                l6736 03BB                                  l6592 01EC  
                                l7464 0F59                                  l7456 0F1D  
                                l7448 0EFE                                  l5882 1B83  
                                l6826 0499                                  l6818 0483  
                                l6690 0357                                  l6682 0344  
                                l6674 0333                                  l6658 0310  
                                l6666 0322                                  l6762 0406  
                                l6594 01F0                                  l7482 0FE8  
                                l5788 1A85                                  l5868 1B6D  
                                l5980 1D21                                  l6908 055D  
                                l6844 04C1                                  l6860 04E4  
                                l7476 0FD0                                  l7468 0F7F  
                                l5798 1A8B                                  l5886 1B8C  
                                l5878 1B7A                                  l5966 136F  
                                l6870 04FC                                  l6854 04DB  
                                l6846 04AF                                  l6782 0430  
                                l6774 041F                                  l6758 03E6  
                                l6678 033B                                  l6686 034C  
                                l7486 0FF7                                  l5992 1D4C  
                                l5968 1394                                  l6928 0583  
                                l6880 0516                                  l6872 04EA  
                                l6856 04DE                                  l6848 04C7  
                                l7488 0FFC                                  l5978 1D13  
                                l6882 051A                                  l6874 0502  
                                l6858 04C9                                  l6786 0439  
                                l6778 0427                                  _BAUD 022C  
                                l5988 1D41                                  l6948 05DC  
                                l6884 0504                                  l6974 0621  
                                l6958 060F                                  l6886 0520  
                                l6798 0457                                  l6968 0615  
                                l6994 06A9                                  l6986 0652  
                                l6898 0543                                  _ECHO 00E9  
                                STR_1 0C3D                                  STR_2 0BBB  
                                STR_3 0C53                                  STR_4 0C3D  
                                STR_5 0B1C                                  STR_6 0BD5  
                                STR_7 0C03                                  STR_8 0BED  
                                STR_9 0C78                                  _LATA 010C  
                                _LATC 010E                                  _LALT 0167  
       __end_of_PS_2_ENABLE_INTERRUPT 19C5                                  _PIE1 0091  
                                i1l61 007C                                  u8015 1D5C  
                                u8025 1D68                                  u8105 1743  
                                i1l74 0085                                  u8035 1D74  
                                u8115 1760                                  i1l76 00B6  
                                u8045 1D8A                                  i1l87 00D4  
                                u7415 1A71                                  u8055 1D95  
                                _RALT 016A                                  u8065 1DA0  
                                u7605 1CCF                                  u7383 1B3E  
                                u8095 16EE                                  u7705 1D42  
                                u7465 1AD8                                  u8425 1A40  
                                u7635 1366                                  u8435 1A47  
                                u8515 1F65                                  u7485 1AAB  
                                u8605 0174                                  u7735 1BE2  
                                u7665 1D16                                  u8625 01D0  
                                u8545 1F7F                                  u7755 1BFB  
                                u8475 1F3F                                  u7685 1D22  
                                u7765 1C06                                  u7925 151E  
                                u8645 022E                                  u7695 1D36  
                                u7855 1E87                                  u8495 1F57  
                                u7865 1EAA                                  u7945 1537  
                                u8665 028E                                  u7885 121D  
                                u7965 1E07                                  u9805 073A  
                                u7975 1E3C                                  u9905 10B8  
                                u9835 1BAB                                  u9915 10C4  
                                u9795 072A                                  u9875 106C  
                                u9955 112D                                  u9885 107F  
                                u9965 1140                                  u9895 10A4  
                                u9985 116F                                  u9995 1176  
                                _WPUA 020C                                  _WPUC 020E  
                        __CFG_WRT$OFF 0000                                  _main 0E48  
                  UARTstringWAIT@data 0034                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                 baudUSART@baudconfig 0025                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                                start 00D9                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0028             WriteFlash_Sequential@temp 00E3  
                    Reverse_Byte@temp 0027                         __CFG_MCLRE$ON 0000  
                          _BlockErase 1A8D                           ?i1_UARTchar 0078  
             ?_Decode_Scan_Code_Shift 0070                       __end_of_InitApp 1029  
                     __end_of_SetBaud 1800                            _Clock_TRIS 18CF  
                       ??_Init_System 0054                __size_of_READ_PS_2_PIN 0012  
                               ??_isr 0021                   _Right_Shift_Key_old 016C  
                      _Init_PS_2_Send 139C                     ??i1_READ_PS_2_PIN 0070  
     UARTchar@NinethBit_override_data 002E     i1UARTchar@NinethBit_override_data 0079  
               ??_INIT_PS_2_INTERRUPT 0025             _Decode_Scan_Code_Function 0C98  
                         ReadBaud@row 0037       WriteFlash_Sequential@amountTemp 00E2  
                       ??_ReadVoltage 0060                            _CloseUSART 1914  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0030  
                     __end_of___fldiv 10EA                                 STR_10 0C40  
                               STR_11 0C2C                                 STR_12 0C3D  
                               STR_20 0B3F                                 STR_21 0AF9  
                               STR_13 0B3F                                 STR_22 0B9F  
                               STR_14 0AF9                                 STR_30 09FB  
                               STR_23 0B82                                 STR_15 0B9F  
                               STR_31 0AAE                                 STR_24 0B61  
                               STR_16 0B82                                 STR_32 0A85  
                               STR_25 0C3D                                 STR_17 0B61  
                               STR_33 0A58                         __CFG_WDTE$OFF 0000  
                               STR_18 0C3D                                 STR_26 0C66  
                               STR_34 0C18                                 STR_19 0C89  
                               STR_27 0AD6                                 STR_28 0C3D  
                               STR_29 0A2A                       __end_of___flmul 11BC  
                    __end_of_ISNUMBER 1930                       __end_of___lldiv 1D55  
                               u10025 118F                                 u10115 1DDE  
                               u10035 1196                                 u10055 15CA  
                               u10065 15E4                                 u10075 15F4  
                               _CKPPS 0E25                       __end_of___llmod 1C19  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l380 1A0F                                 i1l381 1A26  
                               i1l378 1A09                                 i1l491 1C42  
                               i1l492 1C45                                 i1l694 1970  
                               _RCREG 0199                                 _RCSTA 019D  
                               _SPBRG 019B                  _PS_2_Read_Data_First 01A4  
                               _PORTA 000C                  _PS_2_Read_Data_Forth 01A6  
                        InitUART@Baud 0033                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 1940  
                               _Alarm 00E8                  _PS_2_Read_Data_Third 01AA  
                     __end_of_delayUS 1B58                      _InternalADC_Read 1B97  
                 ___lmul@multiplicand 0029                        __CFG_FCMEN$OFF 0000  
          __end_of_Keyboard_Connected 1DFF                          InitUART@temp 0044  
               _WriteFlash_Sequential 12AA                 ReadFlash_2Byte@column 0027  
                    __end_of_UARTchar 1CB1                            SetBaud@buf 0120  
                     __end_of_dpowers 09FB                    __size_of_PS_2_INIT 000C  
                               main@i 00E7                                 isr@rx 0024  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 0033                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 1583                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 19B0                         _ScanCodeSHIFT 08F5  
                     _UART_send_break 18B0                       __initialization 00DB  
              __end_of_Init_PS_2_Send 148F                    __size_of_Data_TRIS 000B  
                        __end_of_main 1000                      __end_of_InitUART 12AA  
                          _Read_Timer 016D                      ??_UARTstringWAIT 0036  
                         isr@Rx_fault 0023                      __end_of_ReadBaud 1EC1  
          __end_of_DisableInternalADC 07FF                      __end_of_ScanCode 08F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 0E48  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 1693  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 2000  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                   __size_ofi1_UARTchar 004A  
                    ___llmod@dividend 0037                                _ADRESH 009C  
                              _ADRESL 009B                      __end_of___flpack 1F92  
                       _READ_PS_2_PIN 1952                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l5224 1A24  
                              i1l5216 1A1C                                i1l5234 1A2A  
                              i1l5502 1C48                                i1l5504 1C55  
                              i1l5514 18C9                                i1l5506 1C5E  
                              i1l5532 196E                                i1l5612 00A7  
                              i1l5604 0095                                i1l5542 1975  
                              i1l5614 00B3                                i1l5626 00D0  
                              i1l5562 002A                                i1l5628 00D2  
                              i1l5582 0060                                i1l5574 0048  
                              i1l5566 0030                                i1l5496 1C22  
                              i1l5592 007A                                i1l5498 1C2C  
                              i1l5588 0072                                _INTCON 000B  
                              _FVRCON 0117                                _PARITY 0067  
                              _PMADRH 0192                                _PMADRL 0191  
                    __end_of___lwtofl 19DD                                _PMDATH 0194  
                              _PMDATL 0193                                _PMCON1 0195  
                              _PMCON2 0196                    __size_of_ReadUSART 000C  
                              u711_25 0062                                u703_25 001A  
                              _OSCCON 0099                                u706_25 0037  
                              u661_25 1A10                                u709_25 004F  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 18E5                 _PS_2_Read_Data_Second 01A8  
                           ??_InitApp 0025                 ??_ConfigureOscillator 0025  
                              _Delete 0166                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 0059                           ?_BlockErase 0025  
                       InitUART@spbrg 0040                           SetBaud@Baud 0054  
                  __size_of_OpenUSART 003F                       ?_Init_PS_2_Send 0070  
                              ___flge 1EC1                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A2C                             ??___fldiv 003C  
                      __CFG_STVREN$ON 0000                             ??___flmul 0050  
                           ??___lldiv 002D                           ?_Clock_TRIS 0070  
                           ??___llmod 003B                           SetBaud@temp 015A  
                   __end_of_PS_2_INIT 1908                    ??_Decode_Scan_Code 0025  
                        ?i1_ReadUSART 0070                             ??_delayUS 0029  
__size_of_Decode_Scan_Code_FunctionE0 0013                           ?_CloseUSART 0070  
              ?_WriteFlash_Sequential 002F                       SetBaud@Baudtemp 0152  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18E5  
                           ??_sprintf 0045               i1READ_PS_2_PIN@DATA_CLK 0070  
                          ___flge@ff1 0025                            ___flge@ff2 0029  
                        ?_PS_2_Update 0070               __end_of_UART_send_break 18B5  
                     _ReadFlash_2Byte 1ABE                       _ReadFlash_4Byte 1CB1  
                          ___fldiv@f1 0038                            ___fldiv@f2 0034  
                          ___fldiv@f3 0041               __end_of__initialization 0111  
                  __size_of_WriteBaud 005E                            ___flmul@f1 0048  
                          ___flmul@f2 004C                        PS_2_Update@buf 02A0  
             ?_PS_2_DISABLE_INTERRUPT 0070                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                        __pcstackCOMMON 0070  
                        __pidataBANK2 0002                          __pidataBANK4 1908  
                           ?_UARTchar 002D                    InitUART@baudconfig 0042  
                         _Init_System 1583                     __end_of_ReadUSART 18FC  
                          ___lwtofl@c 002F                           _ReadVoltage 1F92  
                     ReadVoltage@temp 00A4                          WriteBaud@row 0036  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 0033  
                       ReadUSART@data 0026                           _SinLEDtimer 0228  
  __size_of_Decode_Scan_Code_Function 0011                     __end_of_OpenUSART 1B97  
                 __size_of_BlockErase 0031                       WriteBaud@Parity 003C  
                   Send_PS2@oddparity 0033                            __pbssBANK0 0066  
                          __pbssBANK1 00E8                            __pbssBANK2 015F  
                          __pbssBANK3 01A0                            __pbssBANK4 0220  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 0033  
                           ?_ReadBaud 0037        __end_of_PS_2_DISABLE_INTERRUPT 19FC  
                  ReadVoltage@voltage 00A0                               ?_UNLOCK 0070  
                     i1_READ_PS_2_PIN 1964                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0025  
                _ScanCodeFunctionNoE0 0800              __end_of_InternalADC_Read 1BD6  
                  _ScanCodeFunctionE0 0966                         _CheckSum_byte 1A5C  
                          __pmaintext 0E48                          ??i1_UARTchar 007A  
                         _ParityTyped 0069                         BlockErase@row 0025  
                             ?___flge 0025                               ?___lmul 0025  
                 i1CheckSum_byte@This 0070                         _Caps_Lock_Key 0164  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 002F                            _blinkdelay 00EA  
                           ?___flpack 0025                        ___lmul@product 002D  
               i1CheckSum_byte@Parity 0076                             ?___lwtofl 002F  
                   __end_of_WriteBaud 1E5D                       ??_READ_PS_2_PIN 0025  
                   __end_of_baudUSART 18C4               __end_of_ReadFlash_2Byte 1AF0  
             __end_of_ReadFlash_4Byte 1D02                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0025                               _PPSLOCK 0E0F  
                  __end_ofi1_UARTchar 1C63                            ??_InitUART 0038  
                          ??_ReadBaud 003B                 READ_PS_2_PIN@DATA_CLK 0025  
                    ?_UART_send_break 0070                 _PS_2_ENABLE_INTERRUPT 19B0  
                     __size_of_UNLOCK 000B                               _InitApp 1006  
                          ??_Send_PS2 002F                    _Keyboard_Connected 1DAA  
                             _SetBaud 1693                        InitUART@config 0043  
                      ?_CheckSum_byte 0025           __end_of_INIT_PS_2_INTERRUPT 1940  
                      InitUART@parity 0037               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0025                               _Version 0234  
                     __size_of___flge 0066                               ___fldiv 1029  
                     __size_of___lmul 0030                               ___flmul 10EA  
                 ?_Keyboard_Connected 0070                               ___lldiv 1D02  
                             ___llmod 1BD6                            ??___flpack 002B  
                             _delayUS 1B23                               __ptext1 1EC1  
                             __ptext2 1F92                               __ptext3 19C5  
                             __ptext4 10EA                               __ptext5 1029  
                             __ptext6 1F27                               __ptext7 1B97  
                             __ptext8 07F8                               __ptext9 18FC  
                          ??___lwtofl 0033                  __size_ofi1_ReadUSART 000B  
                             _dpowers 09D3                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00D5  
         WriteFlash_Sequential@amount 0032           WriteFlash_Sequential@buffer 0031  
                  _DisableInternalADC 07F8           WriteFlash_Sequential@spaces 00E5  
             __end_ofi1_READ_PS_2_PIN 1977                  ??_Keyboard_Connected 0061  
                             _sprintf 148F                               clrloop0 1001  
                   _Caps_Lock_Key_old 0165                  end_of_initialization 0111  
                     i1ReadUSART@data 0071                               init_ram 18B5  
                 ?_DisableInternalADC 0070                               initloop 18B6  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 06E3                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 0220  
                     i1_CheckSum_byte 19FC               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0222                             _PS_2_INIT 18FC  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 0068  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1ABE           __end_of_ConfigureOscillator 1952  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18DA  
                         ___flmul@exp 0055                             _BaudTyped 01A0  
                           _Data_TRIS 18DA                       PS_2_Update@temp 02E0  
                           _CapsCount 01AC                             _Caps_Lock 01AD  
            _PS_2_Read_Data_ThirdTEMP 0226                       ??_CheckSum_byte 0028  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 18F0                    __end_of_CloseUSART 1922  
       ??_Decode_Scan_Code_FunctionE0 0025                     __size_of_ISNUMBER 000E  
                      __end_of___flge 1F27                 CheckSum_byte@Odd_Even 0027  
                        ?_Init_System 0070                        __end_of___lmul 1A5C  
                   __size_of_UARTchar 004E                          ?_ReadVoltage 005C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0035  
         INIT_PS_2_INTERRUPT@DATA_CLK 0025                   start_initialization 00DB  
                           _ReadUSART 18F0               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0029                           __end_of_isr 00D9  
                       WriteBaud@Baud 0038                  __end_of_Reverse_Byte 1DAA  
                    ?i1_READ_PS_2_PIN 0070              ??_Decode_Scan_Code_Shift 0025  
                       WriteBaud@temp 0045                             _OpenUSART 1B58  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0025  
                     ___llmod@divisor 0033                     __size_of_InitUART 00EE  
                     ___llmod@counter 003C                     __size_of_ReadBaud 0064  
                           _Shift_Key 006A               __end_ofi1_CheckSum_byte 1A2C  
                   ?_InternalADC_Read 002F                     __size_of_Send_PS2 019F  
                            ??___flge 002D                              ??___lmul 002D  
           _PS_2_Read_Data_SecondTEMP 0224                    ??_InternalADC_Read 0031  
                         __pdataBANK2 016D                           __pdataBANK4 022C  
                   __size_of___flpack 006B                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtofl 0018  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01AF  
                       __pcstackBANK5 02A0                             _WriteBaud 1DFF  
                 __end_of__stringdata 0C98                    ReadFlash_2Byte@row 0025  
                           _baudUSART 18BB                    ReadFlash_4Byte@row 002A  
                          ?_OpenUSART 0025                           sprintf@_val 004E  
                         sprintf@flag 004B                           sprintf@prec 004C  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0966  
     Decode_Scan_Code_FunctionE0@Code 0025                              ?_SetBaud 0054  
                      ReadBaud@column 0039                              ?___fldiv 0034  
                            ?___flmul 0048                              ?___lldiv 0025  
                            ?___llmod 0033                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 00A0         WriteFlash_Sequential@TempBufL 00C0  
                            ?_delayUS 0025                WriteFlash_Sequential@i 00E6  
          Decode_Scan_Code_Shift@Code 0025                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0026                              _BAUDMODE 0163  
                    _Decode_Scan_Code 1977                            ?_WriteBaud 0036  
               __end_of_READ_PS_2_PIN 1964                              ?_sprintf 003D  
          UARTchar@NinethBit_override 002D                       _PS_2_Update$854 02DC  
                     _PS_2_Update$855 02DD                       _PS_2_Update$856 02DE  
                     _PS_2_Update$857 02DF                            ?_baudUSART 0070  
                           delayUS@US 0025       __size_of_Decode_Scan_Code_Shift 0013  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0025  
          WriteFlash_Sequential@tempH 00E0            WriteFlash_Sequential@tempL 00E1  
                   i1_UART_send_break 18AB                             clear_ram0 1000  
                            _PIE1bits 0091                              _ISNUMBER 1922  
                  ?i1_UART_send_break 0070                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 002F                              _UARTchar 1C63  
                       ??i1_ReadUSART 0070                   ??i1_UART_send_break 0070  
                            _LControl 0168          __size_of_INIT_PS_2_INTERRUPT 0010  
                         __stringdata 09FB                  __size_of_Init_System 0110  
      __size_of_WriteFlash_Sequential 00F2         __end_of_WriteFlash_Sequential 139C  
               __size_of_Reverse_Byte 0055                        _UARTstringWAIT 1AF0  
                         ??_ReadUSART 0025                  __size_of_ReadVoltage 006E  
                            _RControl 016B              ??_PS_2_DISABLE_INTERRUPT 0025  
             ??_PS_2_ENABLE_INTERRUPT 0025                     ___lmul@multiplier 0025  
         __size_of_Keyboard_Connected 0055                              SetBaud@i 015E  
                       ??_PS_2_Update 01AF                              _InitUART 11BC  
           __end_ofi1_UART_send_break 18B0                              _ReadBaud 1E5D  
                         ??_OpenUSART 0027                              _ScanCode 0884  
                     OpenUSART@config 0027     __end_of_Decode_Scan_Code_Function 0CA9  
                            _Send_PS2 0CA9                      __size_of_InitApp 0023  
                    __size_of_SetBaud 016D                          _Reverse_Byte 1D55  
                    __size_of___fldiv 00C1                      __size_of___flmul 00D2  
              _Decode_Scan_Code_Shift 199D                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                              ___flpack 1F27  
                       SetBaud@Parity 0058                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1B23  
                            ___lwtofl 19C5                       Send_PS2@command 0034  
                 __end_ofi1_ReadUSART 18CF                           ??_WriteBaud 003D  
                     Send_PS2@timeout 0036                         ISNUMBER@ascii 0025  
                            __ptext10 1930                              __ptext11 1DAA  
                            __ptext20 1D55                              __ptext12 0115  
                            __ptext21 1922                              __ptext13 1A2C  
                            __ptext30 1C63                              __ptext22 199D  
                            __ptext14 18B0                              __ptext31 1E5D  
                            __ptext23 198A                              __ptext15 1693  
                            __ptext40 139C                              __ptext32 1CB1  
                            __ptext24 0C98                              __ptext16 1DFF  
                            __ptext41 0CA9                              __ptext33 1ABE  
                            __ptext25 1977                              __ptext17 12AA  
                            __ptext50 1940                              __ptext42 1B23  
                            __ptext34 11BC                              __ptext26 1583  
                            __ptext18 1A8D                              __ptext43 1952  
                            __ptext35 18BB                              __ptext27 148F  
                            __ptext19 18E5                              __ptext52 1C19  
                            __ptext44 19B0                              __ptext36 1D02  
                            __ptext28 1BD6                              __ptext53 19FC  
                            __ptext45 18DA                              __ptext37 18F0  
                            __ptext29 1AF0                              __ptext54 18AB  
                            __ptext46 18CF                              __ptext38 1B58  
                            __ptext55 18C4                              __ptext47 1A5C  
                            __ptext39 1914                              __ptext56 1964  
                            __ptext48 19DD                              __ptext49 1006  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0026                           ??_baudUSART 0025  
                    __size_of_sprintf 00F4                   Keyboard_Connected@i 0061  
                       __size_of_main 01B8              __size_of_ReadFlash_2Byte 0032  
            __size_of_ReadFlash_4Byte 0051                              delayUS@i 002A  
                            delayUS@j 002E                          _pwrLEDtoggle 022A  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1A8D  
                 __end_of_PS_2_Update 07F8                            _RC1STAbits 019D  
                      CheckSum_byte@i 002C                        _Left_Shift_Key 0066  
             __size_of_Init_PS_2_Send 00F3                     ??_UART_send_break 0025  
               ___flmul@f3_as_product 0056                       ?_UARTstringWAIT 0034  
                 CheckSum_byte@Parity 002B                            _INTCONbits 000B  
           __size_of_InternalADC_Read 003F                        OpenUSART@spbrg 0025  
                        UARTchar@data 0033          i1UARTchar@NinethBit_override 0078  
                         pic14e$flags 007E       __size_of_PS_2_DISABLE_INTERRUPT 001F  
                            intlevel1 0000                             sprintf@ap 0052  
                           sprintf@sp 003D            __size_ofi1_UART_send_break 0005  
                    ___lldiv@dividend 0029   __end_of_Decode_Scan_Code_FunctionE0 199D  
         _Decode_Scan_Code_FunctionE0 198A                     __CFG_CLKOUTEN$OFF 0000  
                      _BatteryVoltage 015F              __size_ofi1_READ_PS_2_PIN 0013  
            __end_of_Decode_Scan_Code 198A                            i1_UARTchar 1C19  
                     _Right_Shift_Key 01AE                           i1_ReadUSART 18C4  
                            sprintf@c 0053                              sprintf@f 003F  
                    ___lldiv@quotient 002E                  Decode_Scan_Code@Code 0025  
                   Init_System@Parity 00E0                    _Left_Shift_Key_old 0169  
                          _TX1STAbits 019E                     CheckSum_byte@This 0025  
                      i1UARTchar@data 0020                           _PS_2_Update 0115  
                 _INIT_PS_2_INTERRUPT 1930           ??_Decode_Scan_Code_Function 0025  
                     Init_System@Baud 00E1                       Init_System@temp 00DC  
                      Init_System@buf 00A0        PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
