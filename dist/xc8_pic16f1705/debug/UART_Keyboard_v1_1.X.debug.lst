

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jan 21 13:19:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011C                     	;# 
   136  018C                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019F                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  028C                     	;# 
   191  028E                     	;# 
   192  0291                     	;# 
   193  0291                     	;# 
   194  0292                     	;# 
   195  0293                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029A                     	;# 
   202  029E                     	;# 
   203  030C                     	;# 
   204  030E                     	;# 
   205  038C                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0397                     	;# 
   211  0398                     	;# 
   212  0399                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  041C                     	;# 
   217  041D                     	;# 
   218  041E                     	;# 
   219  0511                     	;# 
   220  0515                     	;# 
   221  0617                     	;# 
   222  0618                     	;# 
   223  0619                     	;# 
   224  0619                     	;# 
   225  061A                     	;# 
   226  061B                     	;# 
   227  061C                     	;# 
   228  061C                     	;# 
   229  0691                     	;# 
   230  0692                     	;# 
   231  0693                     	;# 
   232  0694                     	;# 
   233  0695                     	;# 
   234  0696                     	;# 
   235  0697                     	;# 
   236  0698                     	;# 
   237  0699                     	;# 
   238  069A                     	;# 
   239  069B                     	;# 
   240  069C                     	;# 
   241  069D                     	;# 
   242  069E                     	;# 
   243  069F                     	;# 
   244  0E0F                     	;# 
   245  0E10                     	;# 
   246  0E11                     	;# 
   247  0E12                     	;# 
   248  0E13                     	;# 
   249  0E14                     	;# 
   250  0E15                     	;# 
   251  0E17                     	;# 
   252  0E20                     	;# 
   253  0E21                     	;# 
   254  0E22                     	;# 
   255  0E24                     	;# 
   256  0E25                     	;# 
   257  0E28                     	;# 
   258  0E29                     	;# 
   259  0E2A                     	;# 
   260  0E2B                     	;# 
   261  0E90                     	;# 
   262  0E91                     	;# 
   263  0E92                     	;# 
   264  0E94                     	;# 
   265  0E95                     	;# 
   266  0EA0                     	;# 
   267  0EA1                     	;# 
   268  0EA2                     	;# 
   269  0EA3                     	;# 
   270  0EA4                     	;# 
   271  0EA5                     	;# 
   272  0F0F                     	;# 
   273  0F10                     	;# 
   274  0F11                     	;# 
   275  0F12                     	;# 
   276  0F13                     	;# 
   277  0F14                     	;# 
   278  0F15                     	;# 
   279  0F16                     	;# 
   280  0F17                     	;# 
   281  0F18                     	;# 
   282  0F19                     	;# 
   283  0F1A                     	;# 
   284  0F1B                     	;# 
   285  0F1C                     	;# 
   286  0F1D                     	;# 
   287  0F1E                     	;# 
   288  0F1F                     	;# 
   289  0F20                     	;# 
   290  0F21                     	;# 
   291  0F22                     	;# 
   292  0F23                     	;# 
   293  0F24                     	;# 
   294  0F25                     	;# 
   295  0F26                     	;# 
   296  0F27                     	;# 
   297  0F28                     	;# 
   298  0F29                     	;# 
   299  0F2A                     	;# 
   300  0F2B                     	;# 
   301  0F2C                     	;# 
   302  0F2D                     	;# 
   303  0F9E                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  010C                     	;# 
   359  010E                     	;# 
   360  0111                     	;# 
   361  0112                     	;# 
   362  0113                     	;# 
   363  0114                     	;# 
   364  0115                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  0118                     	;# 
   368  0119                     	;# 
   369  011C                     	;# 
   370  018C                     	;# 
   371  018E                     	;# 
   372  0191                     	;# 
   373  0191                     	;# 
   374  0192                     	;# 
   375  0193                     	;# 
   376  0193                     	;# 
   377  0194                     	;# 
   378  0195                     	;# 
   379  0196                     	;# 
   380  0197                     	;# 
   381  0199                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019F                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  028C                     	;# 
   425  028E                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0293                     	;# 
   431  0298                     	;# 
   432  0298                     	;# 
   433  0299                     	;# 
   434  029A                     	;# 
   435  029A                     	;# 
   436  029E                     	;# 
   437  030C                     	;# 
   438  030E                     	;# 
   439  038C                     	;# 
   440  038E                     	;# 
   441  0391                     	;# 
   442  0392                     	;# 
   443  0393                     	;# 
   444  0397                     	;# 
   445  0398                     	;# 
   446  0399                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0511                     	;# 
   454  0515                     	;# 
   455  0617                     	;# 
   456  0618                     	;# 
   457  0619                     	;# 
   458  0619                     	;# 
   459  061A                     	;# 
   460  061B                     	;# 
   461  061C                     	;# 
   462  061C                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0696                     	;# 
   469  0697                     	;# 
   470  0698                     	;# 
   471  0699                     	;# 
   472  069A                     	;# 
   473  069B                     	;# 
   474  069C                     	;# 
   475  069D                     	;# 
   476  069E                     	;# 
   477  069F                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E17                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E28                     	;# 
   492  0E29                     	;# 
   493  0E2A                     	;# 
   494  0E2B                     	;# 
   495  0E90                     	;# 
   496  0E91                     	;# 
   497  0E92                     	;# 
   498  0E94                     	;# 
   499  0E95                     	;# 
   500  0EA0                     	;# 
   501  0EA1                     	;# 
   502  0EA2                     	;# 
   503  0EA3                     	;# 
   504  0EA4                     	;# 
   505  0EA5                     	;# 
   506  0F0F                     	;# 
   507  0F10                     	;# 
   508  0F11                     	;# 
   509  0F12                     	;# 
   510  0F13                     	;# 
   511  0F14                     	;# 
   512  0F15                     	;# 
   513  0F16                     	;# 
   514  0F17                     	;# 
   515  0F18                     	;# 
   516  0F19                     	;# 
   517  0F1A                     	;# 
   518  0F1B                     	;# 
   519  0F1C                     	;# 
   520  0F1D                     	;# 
   521  0F1E                     	;# 
   522  0F1F                     	;# 
   523  0F20                     	;# 
   524  0F21                     	;# 
   525  0F22                     	;# 
   526  0F23                     	;# 
   527  0F24                     	;# 
   528  0F25                     	;# 
   529  0F26                     	;# 
   530  0F27                     	;# 
   531  0F28                     	;# 
   532  0F29                     	;# 
   533  0F2A                     	;# 
   534  0F2B                     	;# 
   535  0F2C                     	;# 
   536  0F2D                     	;# 
   537  0F9E                     	;# 
   538  0FE4                     	;# 
   539  0FE5                     	;# 
   540  0FE6                     	;# 
   541  0FE7                     	;# 
   542  0FE8                     	;# 
   543  0FE9                     	;# 
   544  0FEA                     	;# 
   545  0FEB                     	;# 
   546  0FED                     	;# 
   547  0FEE                     	;# 
   548  0FEF                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000E                     	;# 
   563  0011                     	;# 
   564  0012                     	;# 
   565  0013                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  008C                     	;# 
   576  008E                     	;# 
   577  0091                     	;# 
   578  0092                     	;# 
   579  0093                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0098                     	;# 
   584  0099                     	;# 
   585  009A                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  009F                     	;# 
   592  010C                     	;# 
   593  010E                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  011C                     	;# 
   604  018C                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  028C                     	;# 
   659  028E                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029A                     	;# 
   670  029E                     	;# 
   671  030C                     	;# 
   672  030E                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  0397                     	;# 
   679  0398                     	;# 
   680  0399                     	;# 
   681  0415                     	;# 
   682  0416                     	;# 
   683  0417                     	;# 
   684  041C                     	;# 
   685  041D                     	;# 
   686  041E                     	;# 
   687  0511                     	;# 
   688  0515                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0696                     	;# 
   703  0697                     	;# 
   704  0698                     	;# 
   705  0699                     	;# 
   706  069A                     	;# 
   707  069B                     	;# 
   708  069C                     	;# 
   709  069D                     	;# 
   710  069E                     	;# 
   711  069F                     	;# 
   712  0E0F                     	;# 
   713  0E10                     	;# 
   714  0E11                     	;# 
   715  0E12                     	;# 
   716  0E13                     	;# 
   717  0E14                     	;# 
   718  0E15                     	;# 
   719  0E17                     	;# 
   720  0E20                     	;# 
   721  0E21                     	;# 
   722  0E22                     	;# 
   723  0E24                     	;# 
   724  0E25                     	;# 
   725  0E28                     	;# 
   726  0E29                     	;# 
   727  0E2A                     	;# 
   728  0E2B                     	;# 
   729  0E90                     	;# 
   730  0E91                     	;# 
   731  0E92                     	;# 
   732  0E94                     	;# 
   733  0E95                     	;# 
   734  0EA0                     	;# 
   735  0EA1                     	;# 
   736  0EA2                     	;# 
   737  0EA3                     	;# 
   738  0EA4                     	;# 
   739  0EA5                     	;# 
   740  0F0F                     	;# 
   741  0F10                     	;# 
   742  0F11                     	;# 
   743  0F12                     	;# 
   744  0F13                     	;# 
   745  0F14                     	;# 
   746  0F15                     	;# 
   747  0F16                     	;# 
   748  0F17                     	;# 
   749  0F18                     	;# 
   750  0F19                     	;# 
   751  0F1A                     	;# 
   752  0F1B                     	;# 
   753  0F1C                     	;# 
   754  0F1D                     	;# 
   755  0F1E                     	;# 
   756  0F1F                     	;# 
   757  0F20                     	;# 
   758  0F21                     	;# 
   759  0F22                     	;# 
   760  0F23                     	;# 
   761  0F24                     	;# 
   762  0F25                     	;# 
   763  0F26                     	;# 
   764  0F27                     	;# 
   765  0F28                     	;# 
   766  0F29                     	;# 
   767  0F2A                     	;# 
   768  0F2B                     	;# 
   769  0F2C                     	;# 
   770  0F2D                     	;# 
   771  0F9E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008E                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010E                     	;# 
   828  0111                     	;# 
   829  0112                     	;# 
   830  0113                     	;# 
   831  0114                     	;# 
   832  0115                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  0118                     	;# 
   836  0119                     	;# 
   837  011C                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  028C                     	;# 
   893  028E                     	;# 
   894  0291                     	;# 
   895  0291                     	;# 
   896  0292                     	;# 
   897  0293                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  029A                     	;# 
   904  029E                     	;# 
   905  030C                     	;# 
   906  030E                     	;# 
   907  038C                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0397                     	;# 
   913  0398                     	;# 
   914  0399                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  041C                     	;# 
   919  041D                     	;# 
   920  041E                     	;# 
   921  0511                     	;# 
   922  0515                     	;# 
   923  0617                     	;# 
   924  0618                     	;# 
   925  0619                     	;# 
   926  0619                     	;# 
   927  061A                     	;# 
   928  061B                     	;# 
   929  061C                     	;# 
   930  061C                     	;# 
   931  0691                     	;# 
   932  0692                     	;# 
   933  0693                     	;# 
   934  0694                     	;# 
   935  0695                     	;# 
   936  0696                     	;# 
   937  0697                     	;# 
   938  0698                     	;# 
   939  0699                     	;# 
   940  069A                     	;# 
   941  069B                     	;# 
   942  069C                     	;# 
   943  069D                     	;# 
   944  069E                     	;# 
   945  069F                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E17                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E24                     	;# 
   958  0E25                     	;# 
   959  0E28                     	;# 
   960  0E29                     	;# 
   961  0E2A                     	;# 
   962  0E2B                     	;# 
   963  0E90                     	;# 
   964  0E91                     	;# 
   965  0E92                     	;# 
   966  0E94                     	;# 
   967  0E95                     	;# 
   968  0EA0                     	;# 
   969  0EA1                     	;# 
   970  0EA2                     	;# 
   971  0EA3                     	;# 
   972  0EA4                     	;# 
   973  0EA5                     	;# 
   974  0F0F                     	;# 
   975  0F10                     	;# 
   976  0F11                     	;# 
   977  0F12                     	;# 
   978  0F13                     	;# 
   979  0F14                     	;# 
   980  0F15                     	;# 
   981  0F16                     	;# 
   982  0F17                     	;# 
   983  0F18                     	;# 
   984  0F19                     	;# 
   985  0F1A                     	;# 
   986  0F1B                     	;# 
   987  0F1C                     	;# 
   988  0F1D                     	;# 
   989  0F1E                     	;# 
   990  0F1F                     	;# 
   991  0F20                     	;# 
   992  0F21                     	;# 
   993  0F22                     	;# 
   994  0F23                     	;# 
   995  0F24                     	;# 
   996  0F25                     	;# 
   997  0F26                     	;# 
   998  0F27                     	;# 
   999  0F28                     	;# 
  1000  0F29                     	;# 
  1001  0F2A                     	;# 
  1002  0F2B                     	;# 
  1003  0F2C                     	;# 
  1004  0F2D                     	;# 
  1005  0F9E                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000E                     	;# 
  1031  0011                     	;# 
  1032  0012                     	;# 
  1033  0013                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001B                     	;# 
  1042  001C                     	;# 
  1043  008C                     	;# 
  1044  008E                     	;# 
  1045  0091                     	;# 
  1046  0092                     	;# 
  1047  0093                     	;# 
  1048  0095                     	;# 
  1049  0096                     	;# 
  1050  0097                     	;# 
  1051  0098                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  009F                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011C                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0197                     	;# 
  1083  0199                     	;# 
  1084  0199                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019A                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019C                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019D                     	;# 
  1099  019D                     	;# 
  1100  019E                     	;# 
  1101  019E                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  028C                     	;# 
  1127  028E                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  029A                     	;# 
  1138  029E                     	;# 
  1139  030C                     	;# 
  1140  030E                     	;# 
  1141  038C                     	;# 
  1142  038E                     	;# 
  1143  0391                     	;# 
  1144  0392                     	;# 
  1145  0393                     	;# 
  1146  0397                     	;# 
  1147  0398                     	;# 
  1148  0399                     	;# 
  1149  0415                     	;# 
  1150  0416                     	;# 
  1151  0417                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  0511                     	;# 
  1156  0515                     	;# 
  1157  0617                     	;# 
  1158  0618                     	;# 
  1159  0619                     	;# 
  1160  0619                     	;# 
  1161  061A                     	;# 
  1162  061B                     	;# 
  1163  061C                     	;# 
  1164  061C                     	;# 
  1165  0691                     	;# 
  1166  0692                     	;# 
  1167  0693                     	;# 
  1168  0694                     	;# 
  1169  0695                     	;# 
  1170  0696                     	;# 
  1171  0697                     	;# 
  1172  0698                     	;# 
  1173  0699                     	;# 
  1174  069A                     	;# 
  1175  069B                     	;# 
  1176  069C                     	;# 
  1177  069D                     	;# 
  1178  069E                     	;# 
  1179  069F                     	;# 
  1180  0E0F                     	;# 
  1181  0E10                     	;# 
  1182  0E11                     	;# 
  1183  0E12                     	;# 
  1184  0E13                     	;# 
  1185  0E14                     	;# 
  1186  0E15                     	;# 
  1187  0E17                     	;# 
  1188  0E20                     	;# 
  1189  0E21                     	;# 
  1190  0E22                     	;# 
  1191  0E24                     	;# 
  1192  0E25                     	;# 
  1193  0E28                     	;# 
  1194  0E29                     	;# 
  1195  0E2A                     	;# 
  1196  0E2B                     	;# 
  1197  0E90                     	;# 
  1198  0E91                     	;# 
  1199  0E92                     	;# 
  1200  0E94                     	;# 
  1201  0E95                     	;# 
  1202  0EA0                     	;# 
  1203  0EA1                     	;# 
  1204  0EA2                     	;# 
  1205  0EA3                     	;# 
  1206  0EA4                     	;# 
  1207  0EA5                     	;# 
  1208  0F0F                     	;# 
  1209  0F10                     	;# 
  1210  0F11                     	;# 
  1211  0F12                     	;# 
  1212  0F13                     	;# 
  1213  0F14                     	;# 
  1214  0F15                     	;# 
  1215  0F16                     	;# 
  1216  0F17                     	;# 
  1217  0F18                     	;# 
  1218  0F19                     	;# 
  1219  0F1A                     	;# 
  1220  0F1B                     	;# 
  1221  0F1C                     	;# 
  1222  0F1D                     	;# 
  1223  0F1E                     	;# 
  1224  0F1F                     	;# 
  1225  0F20                     	;# 
  1226  0F21                     	;# 
  1227  0F22                     	;# 
  1228  0F23                     	;# 
  1229  0F24                     	;# 
  1230  0F25                     	;# 
  1231  0F26                     	;# 
  1232  0F27                     	;# 
  1233  0F28                     	;# 
  1234  0F29                     	;# 
  1235  0F2A                     	;# 
  1236  0F2B                     	;# 
  1237  0F2C                     	;# 
  1238  0F2D                     	;# 
  1239  0F9E                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000E                     	;# 
  1265  0011                     	;# 
  1266  0012                     	;# 
  1267  0013                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008E                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0093                     	;# 
  1282  0095                     	;# 
  1283  0096                     	;# 
  1284  0097                     	;# 
  1285  0098                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  009F                     	;# 
  1294  010C                     	;# 
  1295  010E                     	;# 
  1296  0111                     	;# 
  1297  0112                     	;# 
  1298  0113                     	;# 
  1299  0114                     	;# 
  1300  0115                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  0118                     	;# 
  1304  0119                     	;# 
  1305  011C                     	;# 
  1306  018C                     	;# 
  1307  018E                     	;# 
  1308  0191                     	;# 
  1309  0191                     	;# 
  1310  0192                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0199                     	;# 
  1318  0199                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019A                     	;# 
  1322  019A                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019D                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019E                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  019F                     	;# 
  1339  019F                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  020C                     	;# 
  1343  020E                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  028C                     	;# 
  1361  028E                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  029A                     	;# 
  1372  029E                     	;# 
  1373  030C                     	;# 
  1374  030E                     	;# 
  1375  038C                     	;# 
  1376  038E                     	;# 
  1377  0391                     	;# 
  1378  0392                     	;# 
  1379  0393                     	;# 
  1380  0397                     	;# 
  1381  0398                     	;# 
  1382  0399                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  0511                     	;# 
  1390  0515                     	;# 
  1391  0617                     	;# 
  1392  0618                     	;# 
  1393  0619                     	;# 
  1394  0619                     	;# 
  1395  061A                     	;# 
  1396  061B                     	;# 
  1397  061C                     	;# 
  1398  061C                     	;# 
  1399  0691                     	;# 
  1400  0692                     	;# 
  1401  0693                     	;# 
  1402  0694                     	;# 
  1403  0695                     	;# 
  1404  0696                     	;# 
  1405  0697                     	;# 
  1406  0698                     	;# 
  1407  0699                     	;# 
  1408  069A                     	;# 
  1409  069B                     	;# 
  1410  069C                     	;# 
  1411  069D                     	;# 
  1412  069E                     	;# 
  1413  069F                     	;# 
  1414  0E0F                     	;# 
  1415  0E10                     	;# 
  1416  0E11                     	;# 
  1417  0E12                     	;# 
  1418  0E13                     	;# 
  1419  0E14                     	;# 
  1420  0E15                     	;# 
  1421  0E17                     	;# 
  1422  0E20                     	;# 
  1423  0E21                     	;# 
  1424  0E22                     	;# 
  1425  0E24                     	;# 
  1426  0E25                     	;# 
  1427  0E28                     	;# 
  1428  0E29                     	;# 
  1429  0E2A                     	;# 
  1430  0E2B                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0EA0                     	;# 
  1437  0EA1                     	;# 
  1438  0EA2                     	;# 
  1439  0EA3                     	;# 
  1440  0EA4                     	;# 
  1441  0EA5                     	;# 
  1442  0F0F                     	;# 
  1443  0F10                     	;# 
  1444  0F11                     	;# 
  1445  0F12                     	;# 
  1446  0F13                     	;# 
  1447  0F14                     	;# 
  1448  0F15                     	;# 
  1449  0F16                     	;# 
  1450  0F17                     	;# 
  1451  0F18                     	;# 
  1452  0F19                     	;# 
  1453  0F1A                     	;# 
  1454  0F1B                     	;# 
  1455  0F1C                     	;# 
  1456  0F1D                     	;# 
  1457  0F1E                     	;# 
  1458  0F1F                     	;# 
  1459  0F20                     	;# 
  1460  0F21                     	;# 
  1461  0F22                     	;# 
  1462  0F23                     	;# 
  1463  0F24                     	;# 
  1464  0F25                     	;# 
  1465  0F26                     	;# 
  1466  0F27                     	;# 
  1467  0F28                     	;# 
  1468  0F29                     	;# 
  1469  0F2A                     	;# 
  1470  0F2B                     	;# 
  1471  0F2C                     	;# 
  1472  0F2D                     	;# 
  1473  0F9E                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0098                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011C                     	;# 
  1540  018C                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  028C                     	;# 
  1595  028E                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0293                     	;# 
  1601  0298                     	;# 
  1602  0298                     	;# 
  1603  0299                     	;# 
  1604  029A                     	;# 
  1605  029A                     	;# 
  1606  029E                     	;# 
  1607  030C                     	;# 
  1608  030E                     	;# 
  1609  038C                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  0511                     	;# 
  1624  0515                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  069A                     	;# 
  1643  069B                     	;# 
  1644  069C                     	;# 
  1645  069D                     	;# 
  1646  069E                     	;# 
  1647  069F                     	;# 
  1648  0E0F                     	;# 
  1649  0E10                     	;# 
  1650  0E11                     	;# 
  1651  0E12                     	;# 
  1652  0E13                     	;# 
  1653  0E14                     	;# 
  1654  0E15                     	;# 
  1655  0E17                     	;# 
  1656  0E20                     	;# 
  1657  0E21                     	;# 
  1658  0E22                     	;# 
  1659  0E24                     	;# 
  1660  0E25                     	;# 
  1661  0E28                     	;# 
  1662  0E29                     	;# 
  1663  0E2A                     	;# 
  1664  0E2B                     	;# 
  1665  0E90                     	;# 
  1666  0E91                     	;# 
  1667  0E92                     	;# 
  1668  0E94                     	;# 
  1669  0E95                     	;# 
  1670  0EA0                     	;# 
  1671  0EA1                     	;# 
  1672  0EA2                     	;# 
  1673  0EA3                     	;# 
  1674  0EA4                     	;# 
  1675  0EA5                     	;# 
  1676  0F0F                     	;# 
  1677  0F10                     	;# 
  1678  0F11                     	;# 
  1679  0F12                     	;# 
  1680  0F13                     	;# 
  1681  0F14                     	;# 
  1682  0F15                     	;# 
  1683  0F16                     	;# 
  1684  0F17                     	;# 
  1685  0F18                     	;# 
  1686  0F19                     	;# 
  1687  0F1A                     	;# 
  1688  0F1B                     	;# 
  1689  0F1C                     	;# 
  1690  0F1D                     	;# 
  1691  0F1E                     	;# 
  1692  0F1F                     	;# 
  1693  0F20                     	;# 
  1694  0F21                     	;# 
  1695  0F22                     	;# 
  1696  0F23                     	;# 
  1697  0F24                     	;# 
  1698  0F25                     	;# 
  1699  0F26                     	;# 
  1700  0F27                     	;# 
  1701  0F28                     	;# 
  1702  0F29                     	;# 
  1703  0F2A                     	;# 
  1704  0F2B                     	;# 
  1705  0F2C                     	;# 
  1706  0F2D                     	;# 
  1707  0F9E                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000E                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0013                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008E                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0093                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0098                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  009F                     	;# 
  1762  010C                     	;# 
  1763  010E                     	;# 
  1764  0111                     	;# 
  1765  0112                     	;# 
  1766  0113                     	;# 
  1767  0114                     	;# 
  1768  0115                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  0118                     	;# 
  1772  0119                     	;# 
  1773  011C                     	;# 
  1774  018C                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  0199                     	;# 
  1787  0199                     	;# 
  1788  019A                     	;# 
  1789  019A                     	;# 
  1790  019A                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019D                     	;# 
  1800  019D                     	;# 
  1801  019D                     	;# 
  1802  019E                     	;# 
  1803  019E                     	;# 
  1804  019E                     	;# 
  1805  019F                     	;# 
  1806  019F                     	;# 
  1807  019F                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  020C                     	;# 
  1811  020E                     	;# 
  1812  0211                     	;# 
  1813  0211                     	;# 
  1814  0212                     	;# 
  1815  0212                     	;# 
  1816  0213                     	;# 
  1817  0213                     	;# 
  1818  0214                     	;# 
  1819  0214                     	;# 
  1820  0215                     	;# 
  1821  0215                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0216                     	;# 
  1825  0216                     	;# 
  1826  0217                     	;# 
  1827  0217                     	;# 
  1828  028C                     	;# 
  1829  028E                     	;# 
  1830  0291                     	;# 
  1831  0291                     	;# 
  1832  0292                     	;# 
  1833  0293                     	;# 
  1834  0293                     	;# 
  1835  0298                     	;# 
  1836  0298                     	;# 
  1837  0299                     	;# 
  1838  029A                     	;# 
  1839  029A                     	;# 
  1840  029E                     	;# 
  1841  030C                     	;# 
  1842  030E                     	;# 
  1843  038C                     	;# 
  1844  038E                     	;# 
  1845  0391                     	;# 
  1846  0392                     	;# 
  1847  0393                     	;# 
  1848  0397                     	;# 
  1849  0398                     	;# 
  1850  0399                     	;# 
  1851  0415                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  041C                     	;# 
  1855  041D                     	;# 
  1856  041E                     	;# 
  1857  0511                     	;# 
  1858  0515                     	;# 
  1859  0617                     	;# 
  1860  0618                     	;# 
  1861  0619                     	;# 
  1862  0619                     	;# 
  1863  061A                     	;# 
  1864  061B                     	;# 
  1865  061C                     	;# 
  1866  061C                     	;# 
  1867  0691                     	;# 
  1868  0692                     	;# 
  1869  0693                     	;# 
  1870  0694                     	;# 
  1871  0695                     	;# 
  1872  0696                     	;# 
  1873  0697                     	;# 
  1874  0698                     	;# 
  1875  0699                     	;# 
  1876  069A                     	;# 
  1877  069B                     	;# 
  1878  069C                     	;# 
  1879  069D                     	;# 
  1880  069E                     	;# 
  1881  069F                     	;# 
  1882  0E0F                     	;# 
  1883  0E10                     	;# 
  1884  0E11                     	;# 
  1885  0E12                     	;# 
  1886  0E13                     	;# 
  1887  0E14                     	;# 
  1888  0E15                     	;# 
  1889  0E17                     	;# 
  1890  0E20                     	;# 
  1891  0E21                     	;# 
  1892  0E22                     	;# 
  1893  0E24                     	;# 
  1894  0E25                     	;# 
  1895  0E28                     	;# 
  1896  0E29                     	;# 
  1897  0E2A                     	;# 
  1898  0E2B                     	;# 
  1899  0E90                     	;# 
  1900  0E91                     	;# 
  1901  0E92                     	;# 
  1902  0E94                     	;# 
  1903  0E95                     	;# 
  1904  0EA0                     	;# 
  1905  0EA1                     	;# 
  1906  0EA2                     	;# 
  1907  0EA3                     	;# 
  1908  0EA4                     	;# 
  1909  0EA5                     	;# 
  1910  0F0F                     	;# 
  1911  0F10                     	;# 
  1912  0F11                     	;# 
  1913  0F12                     	;# 
  1914  0F13                     	;# 
  1915  0F14                     	;# 
  1916  0F15                     	;# 
  1917  0F16                     	;# 
  1918  0F17                     	;# 
  1919  0F18                     	;# 
  1920  0F19                     	;# 
  1921  0F1A                     	;# 
  1922  0F1B                     	;# 
  1923  0F1C                     	;# 
  1924  0F1D                     	;# 
  1925  0F1E                     	;# 
  1926  0F1F                     	;# 
  1927  0F20                     	;# 
  1928  0F21                     	;# 
  1929  0F22                     	;# 
  1930  0F23                     	;# 
  1931  0F24                     	;# 
  1932  0F25                     	;# 
  1933  0F26                     	;# 
  1934  0F27                     	;# 
  1935  0F28                     	;# 
  1936  0F29                     	;# 
  1937  0F2A                     	;# 
  1938  0F2B                     	;# 
  1939  0F2C                     	;# 
  1940  0F2D                     	;# 
  1941  0F9E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000E                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  008C                     	;# 
  1980  008E                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0093                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0098                     	;# 
  1988  0099                     	;# 
  1989  009A                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  009F                     	;# 
  1996  010C                     	;# 
  1997  010E                     	;# 
  1998  0111                     	;# 
  1999  0112                     	;# 
  2000  0113                     	;# 
  2001  0114                     	;# 
  2002  0115                     	;# 
  2003  0116                     	;# 
  2004  0117                     	;# 
  2005  0118                     	;# 
  2006  0119                     	;# 
  2007  011C                     	;# 
  2008  018C                     	;# 
  2009  018E                     	;# 
  2010  0191                     	;# 
  2011  0191                     	;# 
  2012  0192                     	;# 
  2013  0193                     	;# 
  2014  0193                     	;# 
  2015  0194                     	;# 
  2016  0195                     	;# 
  2017  0196                     	;# 
  2018  0197                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  020C                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028E                     	;# 
  2064  0291                     	;# 
  2065  0291                     	;# 
  2066  0292                     	;# 
  2067  0293                     	;# 
  2068  0293                     	;# 
  2069  0298                     	;# 
  2070  0298                     	;# 
  2071  0299                     	;# 
  2072  029A                     	;# 
  2073  029A                     	;# 
  2074  029E                     	;# 
  2075  030C                     	;# 
  2076  030E                     	;# 
  2077  038C                     	;# 
  2078  038E                     	;# 
  2079  0391                     	;# 
  2080  0392                     	;# 
  2081  0393                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  041C                     	;# 
  2089  041D                     	;# 
  2090  041E                     	;# 
  2091  0511                     	;# 
  2092  0515                     	;# 
  2093  0617                     	;# 
  2094  0618                     	;# 
  2095  0619                     	;# 
  2096  0619                     	;# 
  2097  061A                     	;# 
  2098  061B                     	;# 
  2099  061C                     	;# 
  2100  061C                     	;# 
  2101  0691                     	;# 
  2102  0692                     	;# 
  2103  0693                     	;# 
  2104  0694                     	;# 
  2105  0695                     	;# 
  2106  0696                     	;# 
  2107  0697                     	;# 
  2108  0698                     	;# 
  2109  0699                     	;# 
  2110  069A                     	;# 
  2111  069B                     	;# 
  2112  069C                     	;# 
  2113  069D                     	;# 
  2114  069E                     	;# 
  2115  069F                     	;# 
  2116  0E0F                     	;# 
  2117  0E10                     	;# 
  2118  0E11                     	;# 
  2119  0E12                     	;# 
  2120  0E13                     	;# 
  2121  0E14                     	;# 
  2122  0E15                     	;# 
  2123  0E17                     	;# 
  2124  0E20                     	;# 
  2125  0E21                     	;# 
  2126  0E22                     	;# 
  2127  0E24                     	;# 
  2128  0E25                     	;# 
  2129  0E28                     	;# 
  2130  0E29                     	;# 
  2131  0E2A                     	;# 
  2132  0E2B                     	;# 
  2133  0E90                     	;# 
  2134  0E91                     	;# 
  2135  0E92                     	;# 
  2136  0E94                     	;# 
  2137  0E95                     	;# 
  2138  0EA0                     	;# 
  2139  0EA1                     	;# 
  2140  0EA2                     	;# 
  2141  0EA3                     	;# 
  2142  0EA4                     	;# 
  2143  0EA5                     	;# 
  2144  0F0F                     	;# 
  2145  0F10                     	;# 
  2146  0F11                     	;# 
  2147  0F12                     	;# 
  2148  0F13                     	;# 
  2149  0F14                     	;# 
  2150  0F15                     	;# 
  2151  0F16                     	;# 
  2152  0F17                     	;# 
  2153  0F18                     	;# 
  2154  0F19                     	;# 
  2155  0F1A                     	;# 
  2156  0F1B                     	;# 
  2157  0F1C                     	;# 
  2158  0F1D                     	;# 
  2159  0F1E                     	;# 
  2160  0F1F                     	;# 
  2161  0F20                     	;# 
  2162  0F21                     	;# 
  2163  0F22                     	;# 
  2164  0F23                     	;# 
  2165  0F24                     	;# 
  2166  0F25                     	;# 
  2167  0F26                     	;# 
  2168  0F27                     	;# 
  2169  0F28                     	;# 
  2170  0F29                     	;# 
  2171  0F2A                     	;# 
  2172  0F2B                     	;# 
  2173  0F2C                     	;# 
  2174  0F2D                     	;# 
  2175  0F9E                     	;# 
  2176  0FE4                     	;# 
  2177  0FE5                     	;# 
  2178  0FE6                     	;# 
  2179  0FE7                     	;# 
  2180  0FE8                     	;# 
  2181  0FE9                     	;# 
  2182  0FEA                     	;# 
  2183  0FEB                     	;# 
  2184  0FED                     	;# 
  2185  0FEE                     	;# 
  2186  0FEF                     	;# 
  2187  0000                     	;# 
  2188  0001                     	;# 
  2189  0002                     	;# 
  2190  0003                     	;# 
  2191  0004                     	;# 
  2192  0005                     	;# 
  2193  0006                     	;# 
  2194  0007                     	;# 
  2195  0008                     	;# 
  2196  0009                     	;# 
  2197  000A                     	;# 
  2198  000B                     	;# 
  2199  000C                     	;# 
  2200  000E                     	;# 
  2201  0011                     	;# 
  2202  0012                     	;# 
  2203  0013                     	;# 
  2204  0015                     	;# 
  2205  0016                     	;# 
  2206  0016                     	;# 
  2207  0017                     	;# 
  2208  0018                     	;# 
  2209  0019                     	;# 
  2210  001A                     	;# 
  2211  001B                     	;# 
  2212  001C                     	;# 
  2213  008C                     	;# 
  2214  008E                     	;# 
  2215  0091                     	;# 
  2216  0092                     	;# 
  2217  0093                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009B                     	;# 
  2226  009C                     	;# 
  2227  009D                     	;# 
  2228  009E                     	;# 
  2229  009F                     	;# 
  2230  010C                     	;# 
  2231  010E                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0115                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0118                     	;# 
  2240  0119                     	;# 
  2241  011C                     	;# 
  2242  018C                     	;# 
  2243  018E                     	;# 
  2244  0191                     	;# 
  2245  0191                     	;# 
  2246  0192                     	;# 
  2247  0193                     	;# 
  2248  0193                     	;# 
  2249  0194                     	;# 
  2250  0195                     	;# 
  2251  0196                     	;# 
  2252  0197                     	;# 
  2253  0199                     	;# 
  2254  0199                     	;# 
  2255  0199                     	;# 
  2256  019A                     	;# 
  2257  019A                     	;# 
  2258  019A                     	;# 
  2259  019B                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019C                     	;# 
  2265  019C                     	;# 
  2266  019C                     	;# 
  2267  019D                     	;# 
  2268  019D                     	;# 
  2269  019D                     	;# 
  2270  019E                     	;# 
  2271  019E                     	;# 
  2272  019E                     	;# 
  2273  019F                     	;# 
  2274  019F                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  020C                     	;# 
  2279  020E                     	;# 
  2280  0211                     	;# 
  2281  0211                     	;# 
  2282  0212                     	;# 
  2283  0212                     	;# 
  2284  0213                     	;# 
  2285  0213                     	;# 
  2286  0214                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  028C                     	;# 
  2297  028E                     	;# 
  2298  0291                     	;# 
  2299  0291                     	;# 
  2300  0292                     	;# 
  2301  0293                     	;# 
  2302  0293                     	;# 
  2303  0298                     	;# 
  2304  0298                     	;# 
  2305  0299                     	;# 
  2306  029A                     	;# 
  2307  029A                     	;# 
  2308  029E                     	;# 
  2309  030C                     	;# 
  2310  030E                     	;# 
  2311  038C                     	;# 
  2312  038E                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  0393                     	;# 
  2316  0397                     	;# 
  2317  0398                     	;# 
  2318  0399                     	;# 
  2319  0415                     	;# 
  2320  0416                     	;# 
  2321  0417                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  0511                     	;# 
  2326  0515                     	;# 
  2327  0617                     	;# 
  2328  0618                     	;# 
  2329  0619                     	;# 
  2330  0619                     	;# 
  2331  061A                     	;# 
  2332  061B                     	;# 
  2333  061C                     	;# 
  2334  061C                     	;# 
  2335  0691                     	;# 
  2336  0692                     	;# 
  2337  0693                     	;# 
  2338  0694                     	;# 
  2339  0695                     	;# 
  2340  0696                     	;# 
  2341  0697                     	;# 
  2342  0698                     	;# 
  2343  0699                     	;# 
  2344  069A                     	;# 
  2345  069B                     	;# 
  2346  069C                     	;# 
  2347  069D                     	;# 
  2348  069E                     	;# 
  2349  069F                     	;# 
  2350  0E0F                     	;# 
  2351  0E10                     	;# 
  2352  0E11                     	;# 
  2353  0E12                     	;# 
  2354  0E13                     	;# 
  2355  0E14                     	;# 
  2356  0E15                     	;# 
  2357  0E17                     	;# 
  2358  0E20                     	;# 
  2359  0E21                     	;# 
  2360  0E22                     	;# 
  2361  0E24                     	;# 
  2362  0E25                     	;# 
  2363  0E28                     	;# 
  2364  0E29                     	;# 
  2365  0E2A                     	;# 
  2366  0E2B                     	;# 
  2367  0E90                     	;# 
  2368  0E91                     	;# 
  2369  0E92                     	;# 
  2370  0E94                     	;# 
  2371  0E95                     	;# 
  2372  0EA0                     	;# 
  2373  0EA1                     	;# 
  2374  0EA2                     	;# 
  2375  0EA3                     	;# 
  2376  0EA4                     	;# 
  2377  0EA5                     	;# 
  2378  0F0F                     	;# 
  2379  0F10                     	;# 
  2380  0F11                     	;# 
  2381  0F12                     	;# 
  2382  0F13                     	;# 
  2383  0F14                     	;# 
  2384  0F15                     	;# 
  2385  0F16                     	;# 
  2386  0F17                     	;# 
  2387  0F18                     	;# 
  2388  0F19                     	;# 
  2389  0F1A                     	;# 
  2390  0F1B                     	;# 
  2391  0F1C                     	;# 
  2392  0F1D                     	;# 
  2393  0F1E                     	;# 
  2394  0F1F                     	;# 
  2395  0F20                     	;# 
  2396  0F21                     	;# 
  2397  0F22                     	;# 
  2398  0F23                     	;# 
  2399  0F24                     	;# 
  2400  0F25                     	;# 
  2401  0F26                     	;# 
  2402  0F27                     	;# 
  2403  0F28                     	;# 
  2404  0F29                     	;# 
  2405  0F2A                     	;# 
  2406  0F2B                     	;# 
  2407  0F2C                     	;# 
  2408  0F2D                     	;# 
  2409  0F9E                     	;# 
  2410  0FE4                     	;# 
  2411  0FE5                     	;# 
  2412  0FE6                     	;# 
  2413  0FE7                     	;# 
  2414  0FE8                     	;# 
  2415  0FE9                     	;# 
  2416  0FEA                     	;# 
  2417  0FEB                     	;# 
  2418  0FED                     	;# 
  2419  0FEE                     	;# 
  2420  0FEF                     	;# 
  2421  0000                     	;# 
  2422  0001                     	;# 
  2423  0002                     	;# 
  2424  0003                     	;# 
  2425  0004                     	;# 
  2426  0005                     	;# 
  2427  0006                     	;# 
  2428  0007                     	;# 
  2429  0008                     	;# 
  2430  0009                     	;# 
  2431  000A                     	;# 
  2432  000B                     	;# 
  2433  000C                     	;# 
  2434  000E                     	;# 
  2435  0011                     	;# 
  2436  0012                     	;# 
  2437  0013                     	;# 
  2438  0015                     	;# 
  2439  0016                     	;# 
  2440  0016                     	;# 
  2441  0017                     	;# 
  2442  0018                     	;# 
  2443  0019                     	;# 
  2444  001A                     	;# 
  2445  001B                     	;# 
  2446  001C                     	;# 
  2447  008C                     	;# 
  2448  008E                     	;# 
  2449  0091                     	;# 
  2450  0092                     	;# 
  2451  0093                     	;# 
  2452  0095                     	;# 
  2453  0096                     	;# 
  2454  0097                     	;# 
  2455  0098                     	;# 
  2456  0099                     	;# 
  2457  009A                     	;# 
  2458  009B                     	;# 
  2459  009B                     	;# 
  2460  009C                     	;# 
  2461  009D                     	;# 
  2462  009E                     	;# 
  2463  009F                     	;# 
  2464  010C                     	;# 
  2465  010E                     	;# 
  2466  0111                     	;# 
  2467  0112                     	;# 
  2468  0113                     	;# 
  2469  0114                     	;# 
  2470  0115                     	;# 
  2471  0116                     	;# 
  2472  0117                     	;# 
  2473  0118                     	;# 
  2474  0119                     	;# 
  2475  011C                     	;# 
  2476  018C                     	;# 
  2477  018E                     	;# 
  2478  0191                     	;# 
  2479  0191                     	;# 
  2480  0192                     	;# 
  2481  0193                     	;# 
  2482  0193                     	;# 
  2483  0194                     	;# 
  2484  0195                     	;# 
  2485  0196                     	;# 
  2486  0197                     	;# 
  2487  0199                     	;# 
  2488  0199                     	;# 
  2489  0199                     	;# 
  2490  019A                     	;# 
  2491  019A                     	;# 
  2492  019A                     	;# 
  2493  019B                     	;# 
  2494  019B                     	;# 
  2495  019B                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019C                     	;# 
  2499  019C                     	;# 
  2500  019C                     	;# 
  2501  019D                     	;# 
  2502  019D                     	;# 
  2503  019D                     	;# 
  2504  019E                     	;# 
  2505  019E                     	;# 
  2506  019E                     	;# 
  2507  019F                     	;# 
  2508  019F                     	;# 
  2509  019F                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  020C                     	;# 
  2513  020E                     	;# 
  2514  0211                     	;# 
  2515  0211                     	;# 
  2516  0212                     	;# 
  2517  0212                     	;# 
  2518  0213                     	;# 
  2519  0213                     	;# 
  2520  0214                     	;# 
  2521  0214                     	;# 
  2522  0215                     	;# 
  2523  0215                     	;# 
  2524  0215                     	;# 
  2525  0215                     	;# 
  2526  0216                     	;# 
  2527  0216                     	;# 
  2528  0217                     	;# 
  2529  0217                     	;# 
  2530  028C                     	;# 
  2531  028E                     	;# 
  2532  0291                     	;# 
  2533  0291                     	;# 
  2534  0292                     	;# 
  2535  0293                     	;# 
  2536  0293                     	;# 
  2537  0298                     	;# 
  2538  0298                     	;# 
  2539  0299                     	;# 
  2540  029A                     	;# 
  2541  029A                     	;# 
  2542  029E                     	;# 
  2543  030C                     	;# 
  2544  030E                     	;# 
  2545  038C                     	;# 
  2546  038E                     	;# 
  2547  0391                     	;# 
  2548  0392                     	;# 
  2549  0393                     	;# 
  2550  0397                     	;# 
  2551  0398                     	;# 
  2552  0399                     	;# 
  2553  0415                     	;# 
  2554  0416                     	;# 
  2555  0417                     	;# 
  2556  041C                     	;# 
  2557  041D                     	;# 
  2558  041E                     	;# 
  2559  0511                     	;# 
  2560  0515                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  0691                     	;# 
  2570  0692                     	;# 
  2571  0693                     	;# 
  2572  0694                     	;# 
  2573  0695                     	;# 
  2574  0696                     	;# 
  2575  0697                     	;# 
  2576  0698                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  069B                     	;# 
  2580  069C                     	;# 
  2581  069D                     	;# 
  2582  069E                     	;# 
  2583  069F                     	;# 
  2584  0E0F                     	;# 
  2585  0E10                     	;# 
  2586  0E11                     	;# 
  2587  0E12                     	;# 
  2588  0E13                     	;# 
  2589  0E14                     	;# 
  2590  0E15                     	;# 
  2591  0E17                     	;# 
  2592  0E20                     	;# 
  2593  0E21                     	;# 
  2594  0E22                     	;# 
  2595  0E24                     	;# 
  2596  0E25                     	;# 
  2597  0E28                     	;# 
  2598  0E29                     	;# 
  2599  0E2A                     	;# 
  2600  0E2B                     	;# 
  2601  0E90                     	;# 
  2602  0E91                     	;# 
  2603  0E92                     	;# 
  2604  0E94                     	;# 
  2605  0E95                     	;# 
  2606  0EA0                     	;# 
  2607  0EA1                     	;# 
  2608  0EA2                     	;# 
  2609  0EA3                     	;# 
  2610  0EA4                     	;# 
  2611  0EA5                     	;# 
  2612  0F0F                     	;# 
  2613  0F10                     	;# 
  2614  0F11                     	;# 
  2615  0F12                     	;# 
  2616  0F13                     	;# 
  2617  0F14                     	;# 
  2618  0F15                     	;# 
  2619  0F16                     	;# 
  2620  0F17                     	;# 
  2621  0F18                     	;# 
  2622  0F19                     	;# 
  2623  0F1A                     	;# 
  2624  0F1B                     	;# 
  2625  0F1C                     	;# 
  2626  0F1D                     	;# 
  2627  0F1E                     	;# 
  2628  0F1F                     	;# 
  2629  0F20                     	;# 
  2630  0F21                     	;# 
  2631  0F22                     	;# 
  2632  0F23                     	;# 
  2633  0F24                     	;# 
  2634  0F25                     	;# 
  2635  0F26                     	;# 
  2636  0F27                     	;# 
  2637  0F28                     	;# 
  2638  0F29                     	;# 
  2639  0F2A                     	;# 
  2640  0F2B                     	;# 
  2641  0F2C                     	;# 
  2642  0F2D                     	;# 
  2643  0F9E                     	;# 
  2644  0FE4                     	;# 
  2645  0FE5                     	;# 
  2646  0FE6                     	;# 
  2647  0FE7                     	;# 
  2648  0FE8                     	;# 
  2649  0FE9                     	;# 
  2650  0FEA                     	;# 
  2651  0FEB                     	;# 
  2652  0FED                     	;# 
  2653  0FEE                     	;# 
  2654  0FEF                     	;# 
  2655                           
  2656                           	psect	idataBANK2
  2657  1000                     __pidataBANK2:	
  2658                           
  2659                           ;initializer for _Read_Timer
  2660  1000  3414               	retlw	20
  2661  1001  3400               	retlw	0
  2662                           
  2663                           ;initializer for _MEM
  2664  1002  3400               	retlw	0
  2665  1003  3400               	retlw	0
  2666  1004  3480               	retlw	128
  2667  1005  3425               	retlw	37
  2668                           
  2669                           	psect	idataBANK4
  2670  1886                     __pidataBANK4:	
  2671                           
  2672                           ;initializer for _BAUD
  2673  1886  3480               	retlw	128
  2674  1887  3425               	retlw	37
  2675  1888  3400               	retlw	0
  2676  1889  3400               	retlw	0
  2677                           
  2678                           ;initializer for _Version
  2679  188A  3431               	retlw	49
  2680  188B  342E               	retlw	46
  2681  188C  3431               	retlw	49
  2682  188D  3400               	retlw	0
  2683                           
  2684                           	psect	stringtext
  2685  0800                     __pstringtext:	
  2686  0800                     _ScanCodeFunctionNoE0:	
  2687  0800  3400               	retlw	0
  2688  0801  3411               	retlw	17
  2689  0802  3400               	retlw	0
  2690  0803  340C               	retlw	12
  2691  0804  340A               	retlw	10
  2692  0805  3406               	retlw	6
  2693  0806  3407               	retlw	7
  2694  0807  3414               	retlw	20
  2695  0808  3400               	retlw	0
  2696  0809  3412               	retlw	18
  2697  080A  3410               	retlw	16
  2698  080B  340E               	retlw	14
  2699  080C  340B               	retlw	11
  2700  080D  3400               	retlw	0
  2701  080E  3400               	retlw	0
  2702  080F  3400               	retlw	0
  2703  0810  3400               	retlw	0
  2704  0811  341C               	retlw	28
  2705  0812  3400               	retlw	0
  2706  0813  3400               	retlw	0
  2707  0814  341A               	retlw	26
  2708  0815  3400               	retlw	0
  2709  0816  3400               	retlw	0
  2710  0817  3400               	retlw	0
  2711  0818  3400               	retlw	0
  2712  0819  3400               	retlw	0
  2713  081A  3400               	retlw	0
  2714  081B  3400               	retlw	0
  2715  081C  3400               	retlw	0
  2716  081D  3400               	retlw	0
  2717  081E  3400               	retlw	0
  2718  081F  3400               	retlw	0
  2719  0820  3400               	retlw	0
  2720  0821  3400               	retlw	0
  2721  0822  3400               	retlw	0
  2722  0823  3400               	retlw	0
  2723  0824  3400               	retlw	0
  2724  0825  3400               	retlw	0
  2725  0826  3400               	retlw	0
  2726  0827  3400               	retlw	0
  2727  0828  3400               	retlw	0
  2728  0829  3400               	retlw	0
  2729  082A  3400               	retlw	0
  2730  082B  3400               	retlw	0
  2731  082C  3400               	retlw	0
  2732  082D  3400               	retlw	0
  2733  082E  3400               	retlw	0
  2734  082F  3400               	retlw	0
  2735  0830  3400               	retlw	0
  2736  0831  3400               	retlw	0
  2737  0832  3400               	retlw	0
  2738  0833  3400               	retlw	0
  2739  0834  3400               	retlw	0
  2740  0835  3400               	retlw	0
  2741  0836  3400               	retlw	0
  2742  0837  3400               	retlw	0
  2743  0838  3400               	retlw	0
  2744  0839  3400               	retlw	0
  2745  083A  3400               	retlw	0
  2746  083B  3400               	retlw	0
  2747  083C  3400               	retlw	0
  2748  083D  3400               	retlw	0
  2749  083E  3400               	retlw	0
  2750  083F  3400               	retlw	0
  2751  0840  3400               	retlw	0
  2752  0841  3400               	retlw	0
  2753  0842  3400               	retlw	0
  2754  0843  3400               	retlw	0
  2755  0844  3400               	retlw	0
  2756  0845  3400               	retlw	0
  2757  0846  3400               	retlw	0
  2758  0847  3400               	retlw	0
  2759  0848  3400               	retlw	0
  2760  0849  3400               	retlw	0
  2761  084A  3400               	retlw	0
  2762  084B  3400               	retlw	0
  2763  084C  3400               	retlw	0
  2764  084D  3400               	retlw	0
  2765  084E  3400               	retlw	0
  2766  084F  3400               	retlw	0
  2767  0850  3400               	retlw	0
  2768  0851  3400               	retlw	0
  2769  0852  3400               	retlw	0
  2770  0853  3400               	retlw	0
  2771  0854  3400               	retlw	0
  2772  0855  3400               	retlw	0
  2773  0856  3400               	retlw	0
  2774  0857  3400               	retlw	0
  2775  0858  3400               	retlw	0
  2776  0859  3400               	retlw	0
  2777  085A  3400               	retlw	0
  2778  085B  3400               	retlw	0
  2779  085C  3400               	retlw	0
  2780  085D  3400               	retlw	0
  2781  085E  3400               	retlw	0
  2782  085F  3400               	retlw	0
  2783  0860  3400               	retlw	0
  2784  0861  3400               	retlw	0
  2785  0862  3400               	retlw	0
  2786  0863  3400               	retlw	0
  2787  0864  3400               	retlw	0
  2788  0865  3400               	retlw	0
  2789  0866  3400               	retlw	0
  2790  0867  3400               	retlw	0
  2791  0868  3400               	retlw	0
  2792  0869  3400               	retlw	0
  2793  086A  3400               	retlw	0
  2794  086B  3400               	retlw	0
  2795  086C  3400               	retlw	0
  2796  086D  3400               	retlw	0
  2797  086E  3400               	retlw	0
  2798  086F  3400               	retlw	0
  2799  0870  3400               	retlw	0
  2800  0871  3400               	retlw	0
  2801  0872  3400               	retlw	0
  2802  0873  3400               	retlw	0
  2803  0874  3400               	retlw	0
  2804  0875  3400               	retlw	0
  2805  0876  3400               	retlw	0
  2806  0877  3400               	retlw	0
  2807  0878  3413               	retlw	19
  2808  0879  3400               	retlw	0
  2809  087A  3400               	retlw	0
  2810  087B  3400               	retlw	0
  2811  087C  3400               	retlw	0
  2812  087D  3400               	retlw	0
  2813  087E  3400               	retlw	0
  2814  087F  3400               	retlw	0
  2815  0880  3400               	retlw	0
  2816  0881  3400               	retlw	0
  2817  0882  3400               	retlw	0
  2818  0883  340F               	retlw	15
  2819  0884                     __end_of_ScanCodeFunctionNoE0:	
  2820  0884                     _ScanCode:	
  2821  0884  3409               	retlw	9
  2822  0885  3460               	retlw	96
  2823  0886  3400               	retlw	0
  2824  0887  3400               	retlw	0
  2825  0888  3400               	retlw	0
  2826  0889  3400               	retlw	0
  2827  088A  3400               	retlw	0
  2828  088B  3400               	retlw	0
  2829  088C  3471               	retlw	113
  2830  088D  3431               	retlw	49
  2831  088E  3400               	retlw	0
  2832  088F  3400               	retlw	0
  2833  0890  3400               	retlw	0
  2834  0891  347A               	retlw	122
  2835  0892  3473               	retlw	115
  2836  0893  3461               	retlw	97
  2837  0894  3477               	retlw	119
  2838  0895  3432               	retlw	50
  2839  0896  3400               	retlw	0
  2840  0897  3400               	retlw	0
  2841  0898  3463               	retlw	99
  2842  0899  3478               	retlw	120
  2843  089A  3464               	retlw	100
  2844  089B  3465               	retlw	101
  2845  089C  3434               	retlw	52
  2846  089D  3433               	retlw	51
  2847  089E  3400               	retlw	0
  2848  089F  3400               	retlw	0
  2849  08A0  3420               	retlw	32
  2850  08A1  3476               	retlw	118
  2851  08A2  3466               	retlw	102
  2852  08A3  3474               	retlw	116
  2853  08A4  3472               	retlw	114
  2854  08A5  3435               	retlw	53
  2855  08A6  3400               	retlw	0
  2856  08A7  3400               	retlw	0
  2857  08A8  346E               	retlw	110
  2858  08A9  3462               	retlw	98
  2859  08AA  3468               	retlw	104
  2860  08AB  3467               	retlw	103
  2861  08AC  3479               	retlw	121
  2862  08AD  3436               	retlw	54
  2863  08AE  3400               	retlw	0
  2864  08AF  3400               	retlw	0
  2865  08B0  3400               	retlw	0
  2866  08B1  346D               	retlw	109
  2867  08B2  346A               	retlw	106
  2868  08B3  3475               	retlw	117
  2869  08B4  3437               	retlw	55
  2870  08B5  3438               	retlw	56
  2871  08B6  3400               	retlw	0
  2872  08B7  3400               	retlw	0
  2873  08B8  342C               	retlw	44
  2874  08B9  346B               	retlw	107
  2875  08BA  3469               	retlw	105
  2876  08BB  346F               	retlw	111
  2877  08BC  3430               	retlw	48
  2878  08BD  3439               	retlw	57
  2879  08BE  3400               	retlw	0
  2880  08BF  3400               	retlw	0
  2881  08C0  342E               	retlw	46
  2882  08C1  342F               	retlw	47
  2883  08C2  346C               	retlw	108
  2884  08C3  343B               	retlw	59
  2885  08C4  3470               	retlw	112
  2886  08C5  342D               	retlw	45
  2887  08C6  3400               	retlw	0
  2888  08C7  3400               	retlw	0
  2889  08C8  3400               	retlw	0
  2890  08C9  3427               	retlw	39
  2891  08CA  3400               	retlw	0
  2892  08CB  345B               	retlw	91
  2893  08CC  343D               	retlw	61
  2894  08CD  3400               	retlw	0
  2895  08CE  3400               	retlw	0
  2896  08CF  3400               	retlw	0
  2897  08D0  3400               	retlw	0
  2898  08D1  340D               	retlw	13
  2899  08D2  345D               	retlw	93
  2900  08D3  3400               	retlw	0
  2901  08D4  345C               	retlw	92
  2902  08D5  3400               	retlw	0
  2903  08D6  3400               	retlw	0
  2904  08D7  3400               	retlw	0
  2905  08D8  3400               	retlw	0
  2906  08D9  3400               	retlw	0
  2907  08DA  3400               	retlw	0
  2908  08DB  3400               	retlw	0
  2909  08DC  3400               	retlw	0
  2910  08DD  3408               	retlw	8
  2911  08DE  3400               	retlw	0
  2912  08DF  3400               	retlw	0
  2913  08E0  3431               	retlw	49
  2914  08E1  3400               	retlw	0
  2915  08E2  3434               	retlw	52
  2916  08E3  3437               	retlw	55
  2917  08E4  3400               	retlw	0
  2918  08E5  3400               	retlw	0
  2919  08E6  3400               	retlw	0
  2920  08E7  3430               	retlw	48
  2921  08E8  342E               	retlw	46
  2922  08E9  3432               	retlw	50
  2923  08EA  3435               	retlw	53
  2924  08EB  3436               	retlw	54
  2925  08EC  3438               	retlw	56
  2926  08ED  341B               	retlw	27
  2927  08EE  3400               	retlw	0
  2928  08EF  3400               	retlw	0
  2929  08F0  342B               	retlw	43
  2930  08F1  3433               	retlw	51
  2931  08F2  342D               	retlw	45
  2932  08F3  342A               	retlw	42
  2933  08F4  3439               	retlw	57
  2934  08F5                     __end_of_ScanCode:	
  2935  08F5                     _ScanCodeSHIFT:	
  2936  08F5  3409               	retlw	9
  2937  08F6  347E               	retlw	126
  2938  08F7  3400               	retlw	0
  2939  08F8  3400               	retlw	0
  2940  08F9  3400               	retlw	0
  2941  08FA  3400               	retlw	0
  2942  08FB  3400               	retlw	0
  2943  08FC  3400               	retlw	0
  2944  08FD  3451               	retlw	81
  2945  08FE  3421               	retlw	33
  2946  08FF  3400               	retlw	0
  2947  0900  3400               	retlw	0
  2948  0901  3400               	retlw	0
  2949  0902  345A               	retlw	90
  2950  0903  3453               	retlw	83
  2951  0904  3441               	retlw	65
  2952  0905  3457               	retlw	87
  2953  0906  3440               	retlw	64
  2954  0907  3400               	retlw	0
  2955  0908  3400               	retlw	0
  2956  0909  3443               	retlw	67
  2957  090A  3458               	retlw	88
  2958  090B  3444               	retlw	68
  2959  090C  3445               	retlw	69
  2960  090D  3424               	retlw	36
  2961  090E  3423               	retlw	35
  2962  090F  3400               	retlw	0
  2963  0910  3400               	retlw	0
  2964  0911  3420               	retlw	32
  2965  0912  3456               	retlw	86
  2966  0913  3446               	retlw	70
  2967  0914  3454               	retlw	84
  2968  0915  3452               	retlw	82
  2969  0916  3425               	retlw	37
  2970  0917  3400               	retlw	0
  2971  0918  3400               	retlw	0
  2972  0919  344E               	retlw	78
  2973  091A  3442               	retlw	66
  2974  091B  3448               	retlw	72
  2975  091C  3447               	retlw	71
  2976  091D  3459               	retlw	89
  2977  091E  345E               	retlw	94
  2978  091F  3400               	retlw	0
  2979  0920  3400               	retlw	0
  2980  0921  3400               	retlw	0
  2981  0922  344D               	retlw	77
  2982  0923  344A               	retlw	74
  2983  0924  3455               	retlw	85
  2984  0925  3426               	retlw	38
  2985  0926  342A               	retlw	42
  2986  0927  3400               	retlw	0
  2987  0928  3400               	retlw	0
  2988  0929  343C               	retlw	60
  2989  092A  344B               	retlw	75
  2990  092B  3449               	retlw	73
  2991  092C  344F               	retlw	79
  2992  092D  3429               	retlw	41
  2993  092E  3428               	retlw	40
  2994  092F  3400               	retlw	0
  2995  0930  3400               	retlw	0
  2996  0931  343E               	retlw	62
  2997  0932  343F               	retlw	63
  2998  0933  344C               	retlw	76
  2999  0934  343A               	retlw	58
  3000  0935  3450               	retlw	80
  3001  0936  345F               	retlw	95
  3002  0937  3400               	retlw	0
  3003  0938  3400               	retlw	0
  3004  0939  3400               	retlw	0
  3005  093A  3422               	retlw	34
  3006  093B  3400               	retlw	0
  3007  093C  347B               	retlw	123
  3008  093D  342B               	retlw	43
  3009  093E  3400               	retlw	0
  3010  093F  3400               	retlw	0
  3011  0940  3400               	retlw	0
  3012  0941  3400               	retlw	0
  3013  0942  340D               	retlw	13
  3014  0943  347D               	retlw	125
  3015  0944  3400               	retlw	0
  3016  0945  347C               	retlw	124
  3017  0946  3400               	retlw	0
  3018  0947  3400               	retlw	0
  3019  0948  3400               	retlw	0
  3020  0949  3400               	retlw	0
  3021  094A  3400               	retlw	0
  3022  094B  3400               	retlw	0
  3023  094C  3400               	retlw	0
  3024  094D  3400               	retlw	0
  3025  094E  3408               	retlw	8
  3026  094F  3400               	retlw	0
  3027  0950  3400               	retlw	0
  3028  0951  3431               	retlw	49
  3029  0952  3400               	retlw	0
  3030  0953  3434               	retlw	52
  3031  0954  3437               	retlw	55
  3032  0955  3400               	retlw	0
  3033  0956  3400               	retlw	0
  3034  0957  3400               	retlw	0
  3035  0958  3430               	retlw	48
  3036  0959  342E               	retlw	46
  3037  095A  3432               	retlw	50
  3038  095B  3435               	retlw	53
  3039  095C  3436               	retlw	54
  3040  095D  3438               	retlw	56
  3041  095E  341B               	retlw	27
  3042  095F  3400               	retlw	0
  3043  0960  3400               	retlw	0
  3044  0961  342B               	retlw	43
  3045  0962  3433               	retlw	51
  3046  0963  342D               	retlw	45
  3047  0964  342A               	retlw	42
  3048  0965  3439               	retlw	57
  3049  0966                     __end_of_ScanCodeSHIFT:	
  3050  0966                     _ScanCodeFunctionE0:	
  3051  0966  341E               	retlw	30
  3052  0967  3400               	retlw	0
  3053  0968  3400               	retlw	0
  3054  0969  341F               	retlw	31
  3055  096A  3400               	retlw	0
  3056  096B  3400               	retlw	0
  3057  096C  3400               	retlw	0
  3058  096D  3400               	retlw	0
  3059  096E  3400               	retlw	0
  3060  096F  3400               	retlw	0
  3061  0970  3400               	retlw	0
  3062  0971  3400               	retlw	0
  3063  0972  3400               	retlw	0
  3064  0973  3400               	retlw	0
  3065  0974  3419               	retlw	25
  3066  0975  3400               	retlw	0
  3067  0976  3400               	retlw	0
  3068  0977  3400               	retlw	0
  3069  0978  3400               	retlw	0
  3070  0979  3400               	retlw	0
  3071  097A  3400               	retlw	0
  3072  097B  3400               	retlw	0
  3073  097C  341D               	retlw	29
  3074  097D  3400               	retlw	0
  3075  097E  3400               	retlw	0
  3076  097F  3400               	retlw	0
  3077  0980  3400               	retlw	0
  3078  0981  3400               	retlw	0
  3079  0982  3400               	retlw	0
  3080  0983  3400               	retlw	0
  3081  0984  3400               	retlw	0
  3082  0985  3400               	retlw	0
  3083  0986  3400               	retlw	0
  3084  0987  3400               	retlw	0
  3085  0988  3400               	retlw	0
  3086  0989  3400               	retlw	0
  3087  098A  3400               	retlw	0
  3088  098B  3400               	retlw	0
  3089  098C  3400               	retlw	0
  3090  098D  3400               	retlw	0
  3091  098E  3400               	retlw	0
  3092  098F  3400               	retlw	0
  3093  0990  3400               	retlw	0
  3094  0991  3400               	retlw	0
  3095  0992  3400               	retlw	0
  3096  0993  3400               	retlw	0
  3097  0994  3400               	retlw	0
  3098  0995  3400               	retlw	0
  3099  0996  3400               	retlw	0
  3100  0997  3400               	retlw	0
  3101  0998  3400               	retlw	0
  3102  0999  3400               	retlw	0
  3103  099A  3400               	retlw	0
  3104  099B  3400               	retlw	0
  3105  099C  3400               	retlw	0
  3106  099D  3400               	retlw	0
  3107  099E  3400               	retlw	0
  3108  099F  342F               	retlw	47
  3109  09A0  3400               	retlw	0
  3110  09A1  3400               	retlw	0
  3111  09A2  3400               	retlw	0
  3112  09A3  3400               	retlw	0
  3113  09A4  3400               	retlw	0
  3114  09A5  3400               	retlw	0
  3115  09A6  3400               	retlw	0
  3116  09A7  3400               	retlw	0
  3117  09A8  3400               	retlw	0
  3118  09A9  3400               	retlw	0
  3119  09AA  3400               	retlw	0
  3120  09AB  3400               	retlw	0
  3121  09AC  3400               	retlw	0
  3122  09AD  3400               	retlw	0
  3123  09AE  3400               	retlw	0
  3124  09AF  340D               	retlw	13
  3125  09B0  3400               	retlw	0
  3126  09B1  3400               	retlw	0
  3127  09B2  3400               	retlw	0
  3128  09B3  3400               	retlw	0
  3129  09B4  3400               	retlw	0
  3130  09B5  3400               	retlw	0
  3131  09B6  3400               	retlw	0
  3132  09B7  3400               	retlw	0
  3133  09B8  3400               	retlw	0
  3134  09B9  3400               	retlw	0
  3135  09BA  3400               	retlw	0
  3136  09BB  3400               	retlw	0
  3137  09BC  3400               	retlw	0
  3138  09BD  3400               	retlw	0
  3139  09BE  3401               	retlw	1
  3140  09BF  3400               	retlw	0
  3141  09C0  3403               	retlw	3
  3142  09C1  3416               	retlw	22
  3143  09C2  3400               	retlw	0
  3144  09C3  3400               	retlw	0
  3145  09C4  3400               	retlw	0
  3146  09C5  3415               	retlw	21
  3147  09C6  347F               	retlw	127
  3148  09C7  3404               	retlw	4
  3149  09C8  3400               	retlw	0
  3150  09C9  3405               	retlw	5
  3151  09CA  3402               	retlw	2
  3152  09CB  3400               	retlw	0
  3153  09CC  3400               	retlw	0
  3154  09CD  3400               	retlw	0
  3155  09CE  3400               	retlw	0
  3156  09CF  3418               	retlw	24
  3157  09D0  3400               	retlw	0
  3158  09D1  3400               	retlw	0
  3159  09D2  3417               	retlw	23
  3160  09D3                     __end_of_ScanCodeFunctionE0:	
  3161  09D3                     _dpowers:	
  3162  09D3  3401               	retlw	1
  3163  09D4  3400               	retlw	0
  3164  09D5  3400               	retlw	0
  3165  09D6  3400               	retlw	0
  3166  09D7  340A               	retlw	10
  3167  09D8  3400               	retlw	0
  3168  09D9  3400               	retlw	0
  3169  09DA  3400               	retlw	0
  3170  09DB  3464               	retlw	100
  3171  09DC  3400               	retlw	0
  3172  09DD  3400               	retlw	0
  3173  09DE  3400               	retlw	0
  3174  09DF  34E8               	retlw	232
  3175  09E0  3403               	retlw	3
  3176  09E1  3400               	retlw	0
  3177  09E2  3400               	retlw	0
  3178  09E3  3410               	retlw	16
  3179  09E4  3427               	retlw	39
  3180  09E5  3400               	retlw	0
  3181  09E6  3400               	retlw	0
  3182  09E7  34A0               	retlw	160
  3183  09E8  3486               	retlw	134
  3184  09E9  3401               	retlw	1
  3185  09EA  3400               	retlw	0
  3186  09EB  3440               	retlw	64
  3187  09EC  3442               	retlw	66
  3188  09ED  340F               	retlw	15
  3189  09EE  3400               	retlw	0
  3190  09EF  3480               	retlw	128
  3191  09F0  3496               	retlw	150
  3192  09F1  3498               	retlw	152
  3193  09F2  3400               	retlw	0
  3194  09F3  3400               	retlw	0
  3195  09F4  34E1               	retlw	225
  3196  09F5  34F5               	retlw	245
  3197  09F6  3405               	retlw	5
  3198  09F7  3400               	retlw	0
  3199  09F8  34CA               	retlw	202
  3200  09F9  349A               	retlw	154
  3201  09FA  343B               	retlw	59
  3202  09FB                     __end_of_dpowers:	
  3203  000B                     _INTCON	set	11
  3204  000B                     _INTCONbits	set	11
  3205  0011                     _PIR1bits	set	17
  3206  000C                     _PORTA	set	12
  3207  001B                     _PR2	set	27
  3208  001C                     _T2CON	set	28
  3209  001C                     _T2CONbits	set	28
  3210  009D                     _ADCON0	set	157
  3211  009E                     _ADCON1	set	158
  3212  009C                     _ADRESH	set	156
  3213  009B                     _ADRESL	set	155
  3214  0095                     _OPTION_REGbits	set	149
  3215  0099                     _OSCCON	set	153
  3216  009A                     _OSCSTAT	set	154
  3217  0091                     _PIE1	set	145
  3218  0091                     _PIE1bits	set	145
  3219  008C                     _TRISAbits	set	140
  3220  008E                     _TRISCbits	set	142
  3221  04D0                     _HFIOFS	set	1232
  3222  0117                     _FVRCON	set	279
  3223  010C                     _LATA	set	268
  3224  010E                     _LATC	set	270
  3225  018C                     _ANSELA	set	396
  3226  018E                     _ANSELC	set	398
  3227  019F                     _BAUD1CON	set	415
  3228  0192                     _PMADRH	set	402
  3229  0191                     _PMADRL	set	401
  3230  0195                     _PMCON1	set	405
  3231  0196                     _PMCON2	set	406
  3232  0194                     _PMDATH	set	404
  3233  0193                     _PMDATL	set	403
  3234  019D                     _RC1STA	set	413
  3235  019D                     _RC1STAbits	set	413
  3236  0199                     _RCREG	set	409
  3237  019D                     _RCSTA	set	413
  3238  019D                     _RCSTAbits	set	413
  3239  019B                     _SPBRG	set	411
  3240  019C                     _SPBRGH	set	412
  3241  019E                     _TX1STA	set	414
  3242  019E                     _TX1STAbits	set	414
  3243  019A                     _TXREG	set	410
  3244  019E                     _TXSTAbits	set	414
  3245  020C                     _WPUA	set	524
  3246  020E                     _WPUC	set	526
  3247  029A                     _CCP2CONbits	set	666
  3248  0393                     _IOCAF	set	915
  3249  0392                     _IOCAN	set	914
  3250  0391                     _IOCAP	set	913
  3251  0E25                     _CKPPS	set	3621
  3252  0E0F                     _PPSLOCK	set	3599
  3253  0E24                     _RXPPS	set	3620
  3254  0EA2                     _RC2PPS	set	3746
  3255  09FB                     __stringdata:	
  3256  09FB                     STR_30:	
  3257  09FB  3442               	retlw	66	;'B'
  3258  09FC  3461               	retlw	97	;'a'
  3259  09FD  3475               	retlw	117	;'u'
  3260  09FE  3464               	retlw	100	;'d'
  3261  09FF  3420               	retlw	32	;' '
  3262  0A00  3477               	retlw	119	;'w'
  3263  0A01  3469               	retlw	105	;'i'
  3264  0A02  346C               	retlw	108	;'l'
  3265  0A03  346C               	retlw	108	;'l'
  3266  0A04  3420               	retlw	32	;' '
  3267  0A05  3462               	retlw	98	;'b'
  3268  0A06  3465               	retlw	101	;'e'
  3269  0A07  3420               	retlw	32	;' '
  3270  0A08  3473               	retlw	115	;'s'
  3271  0A09  3465               	retlw	101	;'e'
  3272  0A0A  3474               	retlw	116	;'t'
  3273  0A0B  3420               	retlw	32	;' '
  3274  0A0C  3474               	retlw	116	;'t'
  3275  0A0D  346F               	retlw	111	;'o'
  3276  0A0E  3420               	retlw	32	;' '
  3277  0A0F  3425               	retlw	37	;'%'
  3278  0A10  346C               	retlw	108	;'l'
  3279  0A11  3475               	retlw	117	;'u'
  3280  0A12  3420               	retlw	32	;' '
  3281  0A13  3477               	retlw	119	;'w'
  3282  0A14  3469               	retlw	105	;'i'
  3283  0A15  3474               	retlw	116	;'t'
  3284  0A16  3468               	retlw	104	;'h'
  3285  0A17  3420               	retlw	32	;' '
  3286  0A18  3445               	retlw	69	;'E'
  3287  0A19  3476               	retlw	118	;'v'
  3288  0A1A  3465               	retlw	101	;'e'
  3289  0A1B  346E               	retlw	110	;'n'
  3290  0A1C  3420               	retlw	32	;' '
  3291  0A1D  3470               	retlw	112	;'p'
  3292  0A1E  3461               	retlw	97	;'a'
  3293  0A1F  3472               	retlw	114	;'r'
  3294  0A20  3469               	retlw	105	;'i'
  3295  0A21  3474               	retlw	116	;'t'
  3296  0A22  3479               	retlw	121	;'y'
  3297  0A23  3420               	retlw	32	;' '
  3298  0A24  3462               	retlw	98	;'b'
  3299  0A25  3469               	retlw	105	;'i'
  3300  0A26  3474               	retlw	116	;'t'
  3301  0A27  340D               	retlw	13
  3302  0A28  340A               	retlw	10
  3303  0A29  3400               	retlw	0
  3304  0A2A                     STR_29:	
  3305  0A2A  3442               	retlw	66	;'B'
  3306  0A2B  3461               	retlw	97	;'a'
  3307  0A2C  3475               	retlw	117	;'u'
  3308  0A2D  3464               	retlw	100	;'d'
  3309  0A2E  3420               	retlw	32	;' '
  3310  0A2F  3477               	retlw	119	;'w'
  3311  0A30  3469               	retlw	105	;'i'
  3312  0A31  346C               	retlw	108	;'l'
  3313  0A32  346C               	retlw	108	;'l'
  3314  0A33  3420               	retlw	32	;' '
  3315  0A34  3462               	retlw	98	;'b'
  3316  0A35  3465               	retlw	101	;'e'
  3317  0A36  3420               	retlw	32	;' '
  3318  0A37  3473               	retlw	115	;'s'
  3319  0A38  3465               	retlw	101	;'e'
  3320  0A39  3474               	retlw	116	;'t'
  3321  0A3A  3420               	retlw	32	;' '
  3322  0A3B  3474               	retlw	116	;'t'
  3323  0A3C  346F               	retlw	111	;'o'
  3324  0A3D  3420               	retlw	32	;' '
  3325  0A3E  3425               	retlw	37	;'%'
  3326  0A3F  346C               	retlw	108	;'l'
  3327  0A40  3475               	retlw	117	;'u'
  3328  0A41  3420               	retlw	32	;' '
  3329  0A42  3477               	retlw	119	;'w'
  3330  0A43  3469               	retlw	105	;'i'
  3331  0A44  3474               	retlw	116	;'t'
  3332  0A45  3468               	retlw	104	;'h'
  3333  0A46  3420               	retlw	32	;' '
  3334  0A47  344F               	retlw	79	;'O'
  3335  0A48  3464               	retlw	100	;'d'
  3336  0A49  3464               	retlw	100	;'d'
  3337  0A4A  3420               	retlw	32	;' '
  3338  0A4B  3470               	retlw	112	;'p'
  3339  0A4C  3461               	retlw	97	;'a'
  3340  0A4D  3472               	retlw	114	;'r'
  3341  0A4E  3469               	retlw	105	;'i'
  3342  0A4F  3474               	retlw	116	;'t'
  3343  0A50  3479               	retlw	121	;'y'
  3344  0A51  3420               	retlw	32	;' '
  3345  0A52  3462               	retlw	98	;'b'
  3346  0A53  3469               	retlw	105	;'i'
  3347  0A54  3474               	retlw	116	;'t'
  3348  0A55  340D               	retlw	13
  3349  0A56  340A               	retlw	10
  3350  0A57  3400               	retlw	0
  3351  0A58                     STR_33:	
  3352  0A58  3442               	retlw	66	;'B'
  3353  0A59  3461               	retlw	97	;'a'
  3354  0A5A  3475               	retlw	117	;'u'
  3355  0A5B  3464               	retlw	100	;'d'
  3356  0A5C  3420               	retlw	32	;' '
  3357  0A5D  3477               	retlw	119	;'w'
  3358  0A5E  3469               	retlw	105	;'i'
  3359  0A5F  346C               	retlw	108	;'l'
  3360  0A60  346C               	retlw	108	;'l'
  3361  0A61  3420               	retlw	32	;' '
  3362  0A62  3462               	retlw	98	;'b'
  3363  0A63  3465               	retlw	101	;'e'
  3364  0A64  3420               	retlw	32	;' '
  3365  0A65  3473               	retlw	115	;'s'
  3366  0A66  3465               	retlw	101	;'e'
  3367  0A67  3474               	retlw	116	;'t'
  3368  0A68  3420               	retlw	32	;' '
  3369  0A69  3474               	retlw	116	;'t'
  3370  0A6A  346F               	retlw	111	;'o'
  3371  0A6B  3420               	retlw	32	;' '
  3372  0A6C  3425               	retlw	37	;'%'
  3373  0A6D  346C               	retlw	108	;'l'
  3374  0A6E  3475               	retlw	117	;'u'
  3375  0A6F  3420               	retlw	32	;' '
  3376  0A70  3477               	retlw	119	;'w'
  3377  0A71  3469               	retlw	105	;'i'
  3378  0A72  3474               	retlw	116	;'t'
  3379  0A73  3468               	retlw	104	;'h'
  3380  0A74  3420               	retlw	32	;' '
  3381  0A75  346E               	retlw	110	;'n'
  3382  0A76  346F               	retlw	111	;'o'
  3383  0A77  3420               	retlw	32	;' '
  3384  0A78  3470               	retlw	112	;'p'
  3385  0A79  3461               	retlw	97	;'a'
  3386  0A7A  3472               	retlw	114	;'r'
  3387  0A7B  3469               	retlw	105	;'i'
  3388  0A7C  3474               	retlw	116	;'t'
  3389  0A7D  3479               	retlw	121	;'y'
  3390  0A7E  3420               	retlw	32	;' '
  3391  0A7F  3462               	retlw	98	;'b'
  3392  0A80  3469               	retlw	105	;'i'
  3393  0A81  3474               	retlw	116	;'t'
  3394  0A82  340D               	retlw	13
  3395  0A83  340A               	retlw	10
  3396  0A84  3400               	retlw	0
  3397  0A85                     STR_32:	
  3398  0A85  3442               	retlw	66	;'B'
  3399  0A86  3461               	retlw	97	;'a'
  3400  0A87  3475               	retlw	117	;'u'
  3401  0A88  3464               	retlw	100	;'d'
  3402  0A89  3420               	retlw	32	;' '
  3403  0A8A  3477               	retlw	119	;'w'
  3404  0A8B  3469               	retlw	105	;'i'
  3405  0A8C  346C               	retlw	108	;'l'
  3406  0A8D  346C               	retlw	108	;'l'
  3407  0A8E  3420               	retlw	32	;' '
  3408  0A8F  3462               	retlw	98	;'b'
  3409  0A90  3465               	retlw	101	;'e'
  3410  0A91  3420               	retlw	32	;' '
  3411  0A92  3473               	retlw	115	;'s'
  3412  0A93  3465               	retlw	101	;'e'
  3413  0A94  3474               	retlw	116	;'t'
  3414  0A95  3420               	retlw	32	;' '
  3415  0A96  3474               	retlw	116	;'t'
  3416  0A97  346F               	retlw	111	;'o'
  3417  0A98  3420               	retlw	32	;' '
  3418  0A99  3425               	retlw	37	;'%'
  3419  0A9A  346C               	retlw	108	;'l'
  3420  0A9B  3475               	retlw	117	;'u'
  3421  0A9C  3420               	retlw	32	;' '
  3422  0A9D  3477               	retlw	119	;'w'
  3423  0A9E  3469               	retlw	105	;'i'
  3424  0A9F  3474               	retlw	116	;'t'
  3425  0AA0  3468               	retlw	104	;'h'
  3426  0AA1  3420               	retlw	32	;' '
  3427  0AA2  3453               	retlw	83	;'S'
  3428  0AA3  3470               	retlw	112	;'p'
  3429  0AA4  3461               	retlw	97	;'a'
  3430  0AA5  3463               	retlw	99	;'c'
  3431  0AA6  3465               	retlw	101	;'e'
  3432  0AA7  3420               	retlw	32	;' '
  3433  0AA8  3462               	retlw	98	;'b'
  3434  0AA9  3469               	retlw	105	;'i'
  3435  0AAA  3474               	retlw	116	;'t'
  3436  0AAB  340D               	retlw	13
  3437  0AAC  340A               	retlw	10
  3438  0AAD  3400               	retlw	0
  3439  0AAE                     STR_31:	
  3440  0AAE  3442               	retlw	66	;'B'
  3441  0AAF  3461               	retlw	97	;'a'
  3442  0AB0  3475               	retlw	117	;'u'
  3443  0AB1  3464               	retlw	100	;'d'
  3444  0AB2  3420               	retlw	32	;' '
  3445  0AB3  3477               	retlw	119	;'w'
  3446  0AB4  3469               	retlw	105	;'i'
  3447  0AB5  346C               	retlw	108	;'l'
  3448  0AB6  346C               	retlw	108	;'l'
  3449  0AB7  3420               	retlw	32	;' '
  3450  0AB8  3462               	retlw	98	;'b'
  3451  0AB9  3465               	retlw	101	;'e'
  3452  0ABA  3420               	retlw	32	;' '
  3453  0ABB  3473               	retlw	115	;'s'
  3454  0ABC  3465               	retlw	101	;'e'
  3455  0ABD  3474               	retlw	116	;'t'
  3456  0ABE  3420               	retlw	32	;' '
  3457  0ABF  3474               	retlw	116	;'t'
  3458  0AC0  346F               	retlw	111	;'o'
  3459  0AC1  3420               	retlw	32	;' '
  3460  0AC2  3425               	retlw	37	;'%'
  3461  0AC3  346C               	retlw	108	;'l'
  3462  0AC4  3475               	retlw	117	;'u'
  3463  0AC5  3420               	retlw	32	;' '
  3464  0AC6  3477               	retlw	119	;'w'
  3465  0AC7  3469               	retlw	105	;'i'
  3466  0AC8  3474               	retlw	116	;'t'
  3467  0AC9  3468               	retlw	104	;'h'
  3468  0ACA  3420               	retlw	32	;' '
  3469  0ACB  344D               	retlw	77	;'M'
  3470  0ACC  3461               	retlw	97	;'a'
  3471  0ACD  3472               	retlw	114	;'r'
  3472  0ACE  346B               	retlw	107	;'k'
  3473  0ACF  3420               	retlw	32	;' '
  3474  0AD0  3462               	retlw	98	;'b'
  3475  0AD1  3469               	retlw	105	;'i'
  3476  0AD2  3474               	retlw	116	;'t'
  3477  0AD3  340D               	retlw	13
  3478  0AD4  340A               	retlw	10
  3479  0AD5  3400               	retlw	0
  3480  0AD6                     STR_21:	
  3481  0AD6  3442               	retlw	66	;'B'
  3482  0AD7  3461               	retlw	97	;'a'
  3483  0AD8  3475               	retlw	117	;'u'
  3484  0AD9  3464               	retlw	100	;'d'
  3485  0ADA  3420               	retlw	32	;' '
  3486  0ADB  3473               	retlw	115	;'s'
  3487  0ADC  3465               	retlw	101	;'e'
  3488  0ADD  3474               	retlw	116	;'t'
  3489  0ADE  3420               	retlw	32	;' '
  3490  0ADF  3474               	retlw	116	;'t'
  3491  0AE0  346F               	retlw	111	;'o'
  3492  0AE1  3420               	retlw	32	;' '
  3493  0AE2  3425               	retlw	37	;'%'
  3494  0AE3  346C               	retlw	108	;'l'
  3495  0AE4  3475               	retlw	117	;'u'
  3496  0AE5  3420               	retlw	32	;' '
  3497  0AE6  3477               	retlw	119	;'w'
  3498  0AE7  3469               	retlw	105	;'i'
  3499  0AE8  3474               	retlw	116	;'t'
  3500  0AE9  3468               	retlw	104	;'h'
  3501  0AEA  3420               	retlw	32	;' '
  3502  0AEB  3445               	retlw	69	;'E'
  3503  0AEC  3476               	retlw	118	;'v'
  3504  0AED  3465               	retlw	101	;'e'
  3505  0AEE  346E               	retlw	110	;'n'
  3506  0AEF  3420               	retlw	32	;' '
  3507  0AF0  3470               	retlw	112	;'p'
  3508  0AF1  3461               	retlw	97	;'a'
  3509  0AF2  3472               	retlw	114	;'r'
  3510  0AF3  3469               	retlw	105	;'i'
  3511  0AF4  3474               	retlw	116	;'t'
  3512  0AF5  3479               	retlw	121	;'y'
  3513  0AF6  3420               	retlw	32	;' '
  3514  0AF7  3462               	retlw	98	;'b'
  3515  0AF8  3469               	retlw	105	;'i'
  3516  0AF9  3474               	retlw	116	;'t'
  3517  0AFA  340D               	retlw	13
  3518  0AFB  340A               	retlw	10
  3519  0AFC  3400               	retlw	0
  3520  0AFD                     STR_20:	
  3521  0AFD  3442               	retlw	66	;'B'
  3522  0AFE  3461               	retlw	97	;'a'
  3523  0AFF  3475               	retlw	117	;'u'
  3524  0B00  3464               	retlw	100	;'d'
  3525  0B01  3420               	retlw	32	;' '
  3526  0B02  3473               	retlw	115	;'s'
  3527  0B03  3465               	retlw	101	;'e'
  3528  0B04  3474               	retlw	116	;'t'
  3529  0B05  3420               	retlw	32	;' '
  3530  0B06  3474               	retlw	116	;'t'
  3531  0B07  346F               	retlw	111	;'o'
  3532  0B08  3420               	retlw	32	;' '
  3533  0B09  3425               	retlw	37	;'%'
  3534  0B0A  346C               	retlw	108	;'l'
  3535  0B0B  3475               	retlw	117	;'u'
  3536  0B0C  3420               	retlw	32	;' '
  3537  0B0D  3477               	retlw	119	;'w'
  3538  0B0E  3469               	retlw	105	;'i'
  3539  0B0F  3474               	retlw	116	;'t'
  3540  0B10  3468               	retlw	104	;'h'
  3541  0B11  3420               	retlw	32	;' '
  3542  0B12  344F               	retlw	79	;'O'
  3543  0B13  3464               	retlw	100	;'d'
  3544  0B14  3464               	retlw	100	;'d'
  3545  0B15  3420               	retlw	32	;' '
  3546  0B16  3470               	retlw	112	;'p'
  3547  0B17  3461               	retlw	97	;'a'
  3548  0B18  3472               	retlw	114	;'r'
  3549  0B19  3469               	retlw	105	;'i'
  3550  0B1A  3474               	retlw	116	;'t'
  3551  0B1B  3479               	retlw	121	;'y'
  3552  0B1C  3420               	retlw	32	;' '
  3553  0B1D  3462               	retlw	98	;'b'
  3554  0B1E  3469               	retlw	105	;'i'
  3555  0B1F  3474               	retlw	116	;'t'
  3556  0B20  340D               	retlw	13
  3557  0B21  340A               	retlw	10
  3558  0B22  3400               	retlw	0
  3559  0B23                     STR_24:	
  3560  0B23  3442               	retlw	66	;'B'
  3561  0B24  3461               	retlw	97	;'a'
  3562  0B25  3475               	retlw	117	;'u'
  3563  0B26  3464               	retlw	100	;'d'
  3564  0B27  3420               	retlw	32	;' '
  3565  0B28  3473               	retlw	115	;'s'
  3566  0B29  3465               	retlw	101	;'e'
  3567  0B2A  3474               	retlw	116	;'t'
  3568  0B2B  3420               	retlw	32	;' '
  3569  0B2C  3474               	retlw	116	;'t'
  3570  0B2D  346F               	retlw	111	;'o'
  3571  0B2E  3420               	retlw	32	;' '
  3572  0B2F  3425               	retlw	37	;'%'
  3573  0B30  346C               	retlw	108	;'l'
  3574  0B31  3475               	retlw	117	;'u'
  3575  0B32  3420               	retlw	32	;' '
  3576  0B33  3477               	retlw	119	;'w'
  3577  0B34  3469               	retlw	105	;'i'
  3578  0B35  3474               	retlw	116	;'t'
  3579  0B36  3468               	retlw	104	;'h'
  3580  0B37  3420               	retlw	32	;' '
  3581  0B38  346E               	retlw	110	;'n'
  3582  0B39  346F               	retlw	111	;'o'
  3583  0B3A  3420               	retlw	32	;' '
  3584  0B3B  3470               	retlw	112	;'p'
  3585  0B3C  3461               	retlw	97	;'a'
  3586  0B3D  3472               	retlw	114	;'r'
  3587  0B3E  3469               	retlw	105	;'i'
  3588  0B3F  3474               	retlw	116	;'t'
  3589  0B40  3479               	retlw	121	;'y'
  3590  0B41  3420               	retlw	32	;' '
  3591  0B42  3462               	retlw	98	;'b'
  3592  0B43  3469               	retlw	105	;'i'
  3593  0B44  3474               	retlw	116	;'t'
  3594  0B45  340D               	retlw	13
  3595  0B46  340A               	retlw	10
  3596  0B47  3400               	retlw	0
  3597  0B48                     STR_27:	
  3598  0B48  3452               	retlw	82	;'R'
  3599  0B49  3465               	retlw	101	;'e'
  3600  0B4A  3473               	retlw	115	;'s'
  3601  0B4B  3465               	retlw	101	;'e'
  3602  0B4C  3474               	retlw	116	;'t'
  3603  0B4D  3420               	retlw	32	;' '
  3604  0B4E  3474               	retlw	116	;'t'
  3605  0B4F  346F               	retlw	111	;'o'
  3606  0B50  3420               	retlw	32	;' '
  3607  0B51  3439               	retlw	57	;'9'
  3608  0B52  3436               	retlw	54	;'6'
  3609  0B53  3430               	retlw	48	;'0'
  3610  0B54  3430               	retlw	48	;'0'
  3611  0B55  3420               	retlw	32	;' '
  3612  0B56  3477               	retlw	119	;'w'
  3613  0B57  3469               	retlw	105	;'i'
  3614  0B58  3474               	retlw	116	;'t'
  3615  0B59  3468               	retlw	104	;'h'
  3616  0B5A  3420               	retlw	32	;' '
  3617  0B5B  346E               	retlw	110	;'n'
  3618  0B5C  346F               	retlw	111	;'o'
  3619  0B5D  3420               	retlw	32	;' '
  3620  0B5E  3470               	retlw	112	;'p'
  3621  0B5F  3461               	retlw	97	;'a'
  3622  0B60  3472               	retlw	114	;'r'
  3623  0B61  3469               	retlw	105	;'i'
  3624  0B62  3474               	retlw	116	;'t'
  3625  0B63  3479               	retlw	121	;'y'
  3626  0B64  3420               	retlw	32	;' '
  3627  0B65  3462               	retlw	98	;'b'
  3628  0B66  3469               	retlw	105	;'i'
  3629  0B67  3474               	retlw	116	;'t'
  3630  0B68  340D               	retlw	13
  3631  0B69  340A               	retlw	10
  3632  0B6A  3400               	retlw	0
  3633  0B6B                     STR_14:	
  3634  0B6B  3442               	retlw	66	;'B'
  3635  0B6C  3461               	retlw	97	;'a'
  3636  0B6D  3475               	retlw	117	;'u'
  3637  0B6E  3464               	retlw	100	;'d'
  3638  0B6F  3420               	retlw	32	;' '
  3639  0B70  3469               	retlw	105	;'i'
  3640  0B71  3473               	retlw	115	;'s'
  3641  0B72  3420               	retlw	32	;' '
  3642  0B73  3425               	retlw	37	;'%'
  3643  0B74  346C               	retlw	108	;'l'
  3644  0B75  3475               	retlw	117	;'u'
  3645  0B76  3420               	retlw	32	;' '
  3646  0B77  3477               	retlw	119	;'w'
  3647  0B78  3469               	retlw	105	;'i'
  3648  0B79  3474               	retlw	116	;'t'
  3649  0B7A  3468               	retlw	104	;'h'
  3650  0B7B  3420               	retlw	32	;' '
  3651  0B7C  3445               	retlw	69	;'E'
  3652  0B7D  3476               	retlw	118	;'v'
  3653  0B7E  3465               	retlw	101	;'e'
  3654  0B7F  346E               	retlw	110	;'n'
  3655  0B80  3420               	retlw	32	;' '
  3656  0B81  3470               	retlw	112	;'p'
  3657  0B82  3461               	retlw	97	;'a'
  3658  0B83  3472               	retlw	114	;'r'
  3659  0B84  3469               	retlw	105	;'i'
  3660  0B85  3474               	retlw	116	;'t'
  3661  0B86  3479               	retlw	121	;'y'
  3662  0B87  3420               	retlw	32	;' '
  3663  0B88  3462               	retlw	98	;'b'
  3664  0B89  3469               	retlw	105	;'i'
  3665  0B8A  3474               	retlw	116	;'t'
  3666  0B8B  340D               	retlw	13
  3667  0B8C  340A               	retlw	10
  3668  0B8D  3400               	retlw	0
  3669  0B8E                     STR_5:	
  3670  0B8E  3454               	retlw	84	;'T'
  3671  0B8F  346F               	retlw	111	;'o'
  3672  0B90  3420               	retlw	32	;' '
  3673  0B91  3443               	retlw	67	;'C'
  3674  0B92  3468               	retlw	104	;'h'
  3675  0B93  3461               	retlw	97	;'a'
  3676  0B94  346E               	retlw	110	;'n'
  3677  0B95  3467               	retlw	103	;'g'
  3678  0B96  3465               	retlw	101	;'e'
  3679  0B97  3420               	retlw	32	;' '
  3680  0B98  3442               	retlw	66	;'B'
  3681  0B99  3441               	retlw	65	;'A'
  3682  0B9A  3455               	retlw	85	;'U'
  3683  0B9B  3444               	retlw	68	;'D'
  3684  0B9C  3420               	retlw	32	;' '
  3685  0B9D  3468               	retlw	104	;'h'
  3686  0B9E  3469               	retlw	105	;'i'
  3687  0B9F  3474               	retlw	116	;'t'
  3688  0BA0  3420               	retlw	32	;' '
  3689  0BA1  3422               	retlw	34	;'"'
  3690  0BA2  3443               	retlw	67	;'C'
  3691  0BA3  344E               	retlw	78	;'N'
  3692  0BA4  3454               	retlw	84	;'T'
  3693  0BA5  342B               	retlw	43	;'+'
  3694  0BA6  3441               	retlw	65	;'A'
  3695  0BA7  344C               	retlw	76	;'L'
  3696  0BA8  3454               	retlw	84	;'T'
  3697  0BA9  342B               	retlw	43	;'+'
  3698  0BAA  3444               	retlw	68	;'D'
  3699  0BAB  3445               	retlw	69	;'E'
  3700  0BAC  344C               	retlw	76	;'L'
  3701  0BAD  3422               	retlw	34	;'"'
  3702  0BAE  340D               	retlw	13
  3703  0BAF  340A               	retlw	10
  3704  0BB0  3400               	retlw	0
  3705  0BB1                     STR_13:	
  3706  0BB1  3442               	retlw	66	;'B'
  3707  0BB2  3461               	retlw	97	;'a'
  3708  0BB3  3475               	retlw	117	;'u'
  3709  0BB4  3464               	retlw	100	;'d'
  3710  0BB5  3420               	retlw	32	;' '
  3711  0BB6  3469               	retlw	105	;'i'
  3712  0BB7  3473               	retlw	115	;'s'
  3713  0BB8  3420               	retlw	32	;' '
  3714  0BB9  3425               	retlw	37	;'%'
  3715  0BBA  346C               	retlw	108	;'l'
  3716  0BBB  3475               	retlw	117	;'u'
  3717  0BBC  3420               	retlw	32	;' '
  3718  0BBD  3477               	retlw	119	;'w'
  3719  0BBE  3469               	retlw	105	;'i'
  3720  0BBF  3474               	retlw	116	;'t'
  3721  0BC0  3468               	retlw	104	;'h'
  3722  0BC1  3420               	retlw	32	;' '
  3723  0BC2  344F               	retlw	79	;'O'
  3724  0BC3  3464               	retlw	100	;'d'
  3725  0BC4  3464               	retlw	100	;'d'
  3726  0BC5  3420               	retlw	32	;' '
  3727  0BC6  3470               	retlw	112	;'p'
  3728  0BC7  3461               	retlw	97	;'a'
  3729  0BC8  3472               	retlw	114	;'r'
  3730  0BC9  3469               	retlw	105	;'i'
  3731  0BCA  3474               	retlw	116	;'t'
  3732  0BCB  3479               	retlw	121	;'y'
  3733  0BCC  3420               	retlw	32	;' '
  3734  0BCD  3462               	retlw	98	;'b'
  3735  0BCE  3469               	retlw	105	;'i'
  3736  0BCF  3474               	retlw	116	;'t'
  3737  0BD0  340D               	retlw	13
  3738  0BD1  340A               	retlw	10
  3739  0BD2  3400               	retlw	0
  3740  0BD3                     STR_23:	
  3741  0BD3  3442               	retlw	66	;'B'
  3742  0BD4  3461               	retlw	97	;'a'
  3743  0BD5  3475               	retlw	117	;'u'
  3744  0BD6  3464               	retlw	100	;'d'
  3745  0BD7  3420               	retlw	32	;' '
  3746  0BD8  3473               	retlw	115	;'s'
  3747  0BD9  3465               	retlw	101	;'e'
  3748  0BDA  3474               	retlw	116	;'t'
  3749  0BDB  3420               	retlw	32	;' '
  3750  0BDC  3474               	retlw	116	;'t'
  3751  0BDD  346F               	retlw	111	;'o'
  3752  0BDE  3420               	retlw	32	;' '
  3753  0BDF  3425               	retlw	37	;'%'
  3754  0BE0  346C               	retlw	108	;'l'
  3755  0BE1  3475               	retlw	117	;'u'
  3756  0BE2  3420               	retlw	32	;' '
  3757  0BE3  3477               	retlw	119	;'w'
  3758  0BE4  3469               	retlw	105	;'i'
  3759  0BE5  3474               	retlw	116	;'t'
  3760  0BE6  3468               	retlw	104	;'h'
  3761  0BE7  3420               	retlw	32	;' '
  3762  0BE8  3453               	retlw	83	;'S'
  3763  0BE9  3470               	retlw	112	;'p'
  3764  0BEA  3461               	retlw	97	;'a'
  3765  0BEB  3463               	retlw	99	;'c'
  3766  0BEC  3465               	retlw	101	;'e'
  3767  0BED  3420               	retlw	32	;' '
  3768  0BEE  3462               	retlw	98	;'b'
  3769  0BEF  3469               	retlw	105	;'i'
  3770  0BF0  3474               	retlw	116	;'t'
  3771  0BF1  340D               	retlw	13
  3772  0BF2  340A               	retlw	10
  3773  0BF3  3400               	retlw	0
  3774  0BF4                     STR_17:	
  3775  0BF4  3442               	retlw	66	;'B'
  3776  0BF5  3461               	retlw	97	;'a'
  3777  0BF6  3475               	retlw	117	;'u'
  3778  0BF7  3464               	retlw	100	;'d'
  3779  0BF8  3420               	retlw	32	;' '
  3780  0BF9  3469               	retlw	105	;'i'
  3781  0BFA  3473               	retlw	115	;'s'
  3782  0BFB  3420               	retlw	32	;' '
  3783  0BFC  3425               	retlw	37	;'%'
  3784  0BFD  346C               	retlw	108	;'l'
  3785  0BFE  3475               	retlw	117	;'u'
  3786  0BFF  3420               	retlw	32	;' '
  3787  0C00  3477               	retlw	119	;'w'
  3788  0C01  3469               	retlw	105	;'i'
  3789  0C02  3474               	retlw	116	;'t'
  3790  0C03  3468               	retlw	104	;'h'
  3791  0C04  3420               	retlw	32	;' '
  3792  0C05  346E               	retlw	110	;'n'
  3793  0C06  346F               	retlw	111	;'o'
  3794  0C07  3420               	retlw	32	;' '
  3795  0C08  3470               	retlw	112	;'p'
  3796  0C09  3461               	retlw	97	;'a'
  3797  0C0A  3472               	retlw	114	;'r'
  3798  0C0B  3469               	retlw	105	;'i'
  3799  0C0C  3474               	retlw	116	;'t'
  3800  0C0D  3479               	retlw	121	;'y'
  3801  0C0E  3420               	retlw	32	;' '
  3802  0C0F  3462               	retlw	98	;'b'
  3803  0C10  3469               	retlw	105	;'i'
  3804  0C11  3474               	retlw	116	;'t'
  3805  0C12  340D               	retlw	13
  3806  0C13  340A               	retlw	10
  3807  0C14  3400               	retlw	0
  3808  0C15                     STR_22:	
  3809  0C15  3442               	retlw	66	;'B'
  3810  0C16  3461               	retlw	97	;'a'
  3811  0C17  3475               	retlw	117	;'u'
  3812  0C18  3464               	retlw	100	;'d'
  3813  0C19  3420               	retlw	32	;' '
  3814  0C1A  3473               	retlw	115	;'s'
  3815  0C1B  3465               	retlw	101	;'e'
  3816  0C1C  3474               	retlw	116	;'t'
  3817  0C1D  3420               	retlw	32	;' '
  3818  0C1E  3474               	retlw	116	;'t'
  3819  0C1F  346F               	retlw	111	;'o'
  3820  0C20  3420               	retlw	32	;' '
  3821  0C21  3425               	retlw	37	;'%'
  3822  0C22  346C               	retlw	108	;'l'
  3823  0C23  3475               	retlw	117	;'u'
  3824  0C24  3420               	retlw	32	;' '
  3825  0C25  3477               	retlw	119	;'w'
  3826  0C26  3469               	retlw	105	;'i'
  3827  0C27  3474               	retlw	116	;'t'
  3828  0C28  3468               	retlw	104	;'h'
  3829  0C29  3420               	retlw	32	;' '
  3830  0C2A  344D               	retlw	77	;'M'
  3831  0C2B  3461               	retlw	97	;'a'
  3832  0C2C  3472               	retlw	114	;'r'
  3833  0C2D  346B               	retlw	107	;'k'
  3834  0C2E  3420               	retlw	32	;' '
  3835  0C2F  3462               	retlw	98	;'b'
  3836  0C30  3469               	retlw	105	;'i'
  3837  0C31  3474               	retlw	116	;'t'
  3838  0C32  340D               	retlw	13
  3839  0C33  340A               	retlw	10
  3840  0C34  3400               	retlw	0
  3841  0C35                     STR_16:	
  3842  0C35  3442               	retlw	66	;'B'
  3843  0C36  3461               	retlw	97	;'a'
  3844  0C37  3475               	retlw	117	;'u'
  3845  0C38  3464               	retlw	100	;'d'
  3846  0C39  3420               	retlw	32	;' '
  3847  0C3A  3469               	retlw	105	;'i'
  3848  0C3B  3473               	retlw	115	;'s'
  3849  0C3C  3420               	retlw	32	;' '
  3850  0C3D  3425               	retlw	37	;'%'
  3851  0C3E  346C               	retlw	108	;'l'
  3852  0C3F  3475               	retlw	117	;'u'
  3853  0C40  3420               	retlw	32	;' '
  3854  0C41  3477               	retlw	119	;'w'
  3855  0C42  3469               	retlw	105	;'i'
  3856  0C43  3474               	retlw	116	;'t'
  3857  0C44  3468               	retlw	104	;'h'
  3858  0C45  3420               	retlw	32	;' '
  3859  0C46  3453               	retlw	83	;'S'
  3860  0C47  3470               	retlw	112	;'p'
  3861  0C48  3461               	retlw	97	;'a'
  3862  0C49  3463               	retlw	99	;'c'
  3863  0C4A  3465               	retlw	101	;'e'
  3864  0C4B  3420               	retlw	32	;' '
  3865  0C4C  3462               	retlw	98	;'b'
  3866  0C4D  3469               	retlw	105	;'i'
  3867  0C4E  3474               	retlw	116	;'t'
  3868  0C4F  340D               	retlw	13
  3869  0C50  340A               	retlw	10
  3870  0C51  3400               	retlw	0
  3871  0C52                     STR_15:	
  3872  0C52  3442               	retlw	66	;'B'
  3873  0C53  3461               	retlw	97	;'a'
  3874  0C54  3475               	retlw	117	;'u'
  3875  0C55  3464               	retlw	100	;'d'
  3876  0C56  3420               	retlw	32	;' '
  3877  0C57  3469               	retlw	105	;'i'
  3878  0C58  3473               	retlw	115	;'s'
  3879  0C59  3420               	retlw	32	;' '
  3880  0C5A  3425               	retlw	37	;'%'
  3881  0C5B  346C               	retlw	108	;'l'
  3882  0C5C  3475               	retlw	117	;'u'
  3883  0C5D  3420               	retlw	32	;' '
  3884  0C5E  3477               	retlw	119	;'w'
  3885  0C5F  3469               	retlw	105	;'i'
  3886  0C60  3474               	retlw	116	;'t'
  3887  0C61  3468               	retlw	104	;'h'
  3888  0C62  3420               	retlw	32	;' '
  3889  0C63  344D               	retlw	77	;'M'
  3890  0C64  3461               	retlw	97	;'a'
  3891  0C65  3472               	retlw	114	;'r'
  3892  0C66  346B               	retlw	107	;'k'
  3893  0C67  3420               	retlw	32	;' '
  3894  0C68  3462               	retlw	98	;'b'
  3895  0C69  3469               	retlw	105	;'i'
  3896  0C6A  3474               	retlw	116	;'t'
  3897  0C6B  340D               	retlw	13
  3898  0C6C  340A               	retlw	10
  3899  0C6D  3400               	retlw	0
  3900  0C6E                     STR_2:	
  3901  0C6E  3450               	retlw	80	;'P'
  3902  0C6F  3453               	retlw	83	;'S'
  3903  0C70  342F               	retlw	47	;'/'
  3904  0C71  3432               	retlw	50	;'2'
  3905  0C72  3420               	retlw	32	;' '
  3906  0C73  344B               	retlw	75	;'K'
  3907  0C74  3465               	retlw	101	;'e'
  3908  0C75  3479               	retlw	121	;'y'
  3909  0C76  3462               	retlw	98	;'b'
  3910  0C77  346F               	retlw	111	;'o'
  3911  0C78  3461               	retlw	97	;'a'
  3912  0C79  3472               	retlw	114	;'r'
  3913  0C7A  3464               	retlw	100	;'d'
  3914  0C7B  3420               	retlw	32	;' '
  3915  0C7C  3474               	retlw	116	;'t'
  3916  0C7D  346F               	retlw	111	;'o'
  3917  0C7E  3420               	retlw	32	;' '
  3918  0C7F  3452               	retlw	82	;'R'
  3919  0C80  3453               	retlw	83	;'S'
  3920  0C81  342D               	retlw	45	;'-'
  3921  0C82  3432               	retlw	50	;'2'
  3922  0C83  3433               	retlw	51	;'3'
  3923  0C84  3432               	retlw	50	;'2'
  3924  0C85  340D               	retlw	13
  3925  0C86  340A               	retlw	10
  3926  0C87  3400               	retlw	0
  3927  0C88                     STR_6:	
  3928  0C88  344E               	retlw	78	;'N'
  3929  0C89  346F               	retlw	111	;'o'
  3930  0C8A  3420               	retlw	32	;' '
  3931  0C8B  344B               	retlw	75	;'K'
  3932  0C8C  3465               	retlw	101	;'e'
  3933  0C8D  3479               	retlw	121	;'y'
  3934  0C8E  3462               	retlw	98	;'b'
  3935  0C8F  346F               	retlw	111	;'o'
  3936  0C90  3461               	retlw	97	;'a'
  3937  0C91  3472               	retlw	114	;'r'
  3938  0C92  3464               	retlw	100	;'d'
  3939  0C93  3420               	retlw	32	;' '
  3940  0C94  3463               	retlw	99	;'c'
  3941  0C95  346F               	retlw	111	;'o'
  3942  0C96  346E               	retlw	110	;'n'
  3943  0C97  346E               	retlw	110	;'n'
  3944  0C98  3465               	retlw	101	;'e'
  3945  0C99  3463               	retlw	99	;'c'
  3946  0C9A  3474               	retlw	116	;'t'
  3947  0C9B  3465               	retlw	101	;'e'
  3948  0C9C  3464               	retlw	100	;'d'
  3949  0C9D  340D               	retlw	13
  3950  0C9E  340A               	retlw	10
  3951  0C9F  3400               	retlw	0
  3952  0CA0                     STR_8:	
  3953  0CA0  3449               	retlw	73	;'I'
  3954  0CA1  346E               	retlw	110	;'n'
  3955  0CA2  3469               	retlw	105	;'i'
  3956  0CA3  3474               	retlw	116	;'t'
  3957  0CA4  3469               	retlw	105	;'i'
  3958  0CA5  3461               	retlw	97	;'a'
  3959  0CA6  346C               	retlw	108	;'l'
  3960  0CA7  3469               	retlw	105	;'i'
  3961  0CA8  347A               	retlw	122	;'z'
  3962  0CA9  3461               	retlw	97	;'a'
  3963  0CAA  3474               	retlw	116	;'t'
  3964  0CAB  3469               	retlw	105	;'i'
  3965  0CAC  346F               	retlw	111	;'o'
  3966  0CAD  346E               	retlw	110	;'n'
  3967  0CAE  3420               	retlw	32	;' '
  3968  0CAF  3446               	retlw	70	;'F'
  3969  0CB0  3461               	retlw	97	;'a'
  3970  0CB1  3469               	retlw	105	;'i'
  3971  0CB2  346C               	retlw	108	;'l'
  3972  0CB3  340D               	retlw	13
  3973  0CB4  340A               	retlw	10
  3974  0CB5  3400               	retlw	0
  3975  0CB6                     STR_7:	
  3976  0CB6  344B               	retlw	75	;'K'
  3977  0CB7  3465               	retlw	101	;'e'
  3978  0CB8  3479               	retlw	121	;'y'
  3979  0CB9  3462               	retlw	98	;'b'
  3980  0CBA  346F               	retlw	111	;'o'
  3981  0CBB  3461               	retlw	97	;'a'
  3982  0CBC  3472               	retlw	114	;'r'
  3983  0CBD  3464               	retlw	100	;'d'
  3984  0CBE  3420               	retlw	32	;' '
  3985  0CBF  3443               	retlw	67	;'C'
  3986  0CC0  346F               	retlw	111	;'o'
  3987  0CC1  346E               	retlw	110	;'n'
  3988  0CC2  346E               	retlw	110	;'n'
  3989  0CC3  3465               	retlw	101	;'e'
  3990  0CC4  3463               	retlw	99	;'c'
  3991  0CC5  3474               	retlw	116	;'t'
  3992  0CC6  3465               	retlw	101	;'e'
  3993  0CC7  3464               	retlw	100	;'d'
  3994  0CC8  340D               	retlw	13
  3995  0CC9  340A               	retlw	10
  3996  0CCA  3400               	retlw	0
  3997  0CCB                     STR_34:	
  3998  0CCB  3442               	retlw	66	;'B'
  3999  0CCC  3461               	retlw	97	;'a'
  4000  0CCD  3475               	retlw	117	;'u'
  4001  0CCE  3464               	retlw	100	;'d'
  4002  0CCF  3420               	retlw	32	;' '
  4003  0CD0  344F               	retlw	79	;'O'
  4004  0CD1  3475               	retlw	117	;'u'
  4005  0CD2  3474               	retlw	116	;'t'
  4006  0CD3  3420               	retlw	32	;' '
  4007  0CD4  346F               	retlw	111	;'o'
  4008  0CD5  3466               	retlw	102	;'f'
  4009  0CD6  3420               	retlw	32	;' '
  4010  0CD7  3452               	retlw	82	;'R'
  4011  0CD8  3461               	retlw	97	;'a'
  4012  0CD9  346E               	retlw	110	;'n'
  4013  0CDA  3467               	retlw	103	;'g'
  4014  0CDB  3465               	retlw	101	;'e'
  4015  0CDC  340D               	retlw	13
  4016  0CDD  340A               	retlw	10
  4017  0CDE  3400               	retlw	0
  4018  0CDF                     STR_11:	
  4019  0CDF  3456               	retlw	86	;'V'
  4020  0CE0  346F               	retlw	111	;'o'
  4021  0CE1  346C               	retlw	108	;'l'
  4022  0CE2  3474               	retlw	116	;'t'
  4023  0CE3  3461               	retlw	97	;'a'
  4024  0CE4  3467               	retlw	103	;'g'
  4025  0CE5  3465               	retlw	101	;'e'
  4026  0CE6  3420               	retlw	32	;' '
  4027  0CE7  3474               	retlw	116	;'t'
  4028  0CE8  346F               	retlw	111	;'o'
  4029  0CE9  346F               	retlw	111	;'o'
  4030  0CEA  3420               	retlw	32	;' '
  4031  0CEB  3448               	retlw	72	;'H'
  4032  0CEC  3469               	retlw	105	;'i'
  4033  0CED  3467               	retlw	103	;'g'
  4034  0CEE  3468               	retlw	104	;'h'
  4035  0CEF  3421               	retlw	33	;'!'
  4036  0CF0  340D               	retlw	13
  4037  0CF1  340A               	retlw	10
  4038  0CF2  3400               	retlw	0
  4039  0CF3                     STR_10:	
  4040  0CF3  3456               	retlw	86	;'V'
  4041  0CF4  346F               	retlw	111	;'o'
  4042  0CF5  346C               	retlw	108	;'l'
  4043  0CF6  3474               	retlw	116	;'t'
  4044  0CF7  3461               	retlw	97	;'a'
  4045  0CF8  3467               	retlw	103	;'g'
  4046  0CF9  3465               	retlw	101	;'e'
  4047  0CFA  3420               	retlw	32	;' '
  4048  0CFB  3474               	retlw	116	;'t'
  4049  0CFC  346F               	retlw	111	;'o'
  4050  0CFD  346F               	retlw	111	;'o'
  4051  0CFE  3420               	retlw	32	;' '
  4052  0CFF  344C               	retlw	76	;'L'
  4053  0D00  346F               	retlw	111	;'o'
  4054  0D01  3477               	retlw	119	;'w'
  4055  0D02  3421               	retlw	33	;'!'
  4056  0D03  340D               	retlw	13
  4057  0D04  340A               	retlw	10
  4058  0D05  3400               	retlw	0
  4059  0D06                     STR_3:	
  4060  0D06  3446               	retlw	70	;'F'
  4061  0D07  3469               	retlw	105	;'i'
  4062  0D08  3472               	retlw	114	;'r'
  4063  0D09  346D               	retlw	109	;'m'
  4064  0D0A  3477               	retlw	119	;'w'
  4065  0D0B  3461               	retlw	97	;'a'
  4066  0D0C  3472               	retlw	114	;'r'
  4067  0D0D  3465               	retlw	101	;'e'
  4068  0D0E  3420               	retlw	32	;' '
  4069  0D0F  3456               	retlw	86	;'V'
  4070  0D10  3465               	retlw	101	;'e'
  4071  0D11  3472               	retlw	114	;'r'
  4072  0D12  3473               	retlw	115	;'s'
  4073  0D13  3469               	retlw	105	;'i'
  4074  0D14  346F               	retlw	111	;'o'
  4075  0D15  346E               	retlw	110	;'n'
  4076  0D16  343A               	retlw	58	;':'
  4077  0D17  3420               	retlw	32	;' '
  4078  0D18  3400               	retlw	0
  4079  0D19                     STR_26:	
  4080  0D19  3445               	retlw	69	;'E'
  4081  0D1A  346E               	retlw	110	;'n'
  4082  0D1B  3474               	retlw	116	;'t'
  4083  0D1C  3465               	retlw	101	;'e'
  4084  0D1D  3472               	retlw	114	;'r'
  4085  0D1E  3420               	retlw	32	;' '
  4086  0D1F  3442               	retlw	66	;'B'
  4087  0D20  3461               	retlw	97	;'a'
  4088  0D21  3475               	retlw	117	;'u'
  4089  0D22  3464               	retlw	100	;'d'
  4090  0D23  3420               	retlw	32	;' '
  4091  0D24  3472               	retlw	114	;'r'
  4092  0D25  3461               	retlw	97	;'a'
  4093  0D26  3474               	retlw	116	;'t'
  4094  0D27  3465               	retlw	101	;'e'
  4095  0D28  340D               	retlw	13
  4096  0D29  340A               	retlw	10
  4097  0D2A  3400               	retlw	0
  4098  0D2B                     STR_9:	
  4099  0D2B  344B               	retlw	75	;'K'
  4100  0D2C  3465               	retlw	101	;'e'
  4101  0D2D  3479               	retlw	121	;'y'
  4102  0D2E  3462               	retlw	98	;'b'
  4103  0D2F  346F               	retlw	111	;'o'
  4104  0D30  3461               	retlw	97	;'a'
  4105  0D31  3472               	retlw	114	;'r'
  4106  0D32  3464               	retlw	100	;'d'
  4107  0D33  3420               	retlw	32	;' '
  4108  0D34  3450               	retlw	80	;'P'
  4109  0D35  3461               	retlw	97	;'a'
  4110  0D36  3473               	retlw	115	;'s'
  4111  0D37  3473               	retlw	115	;'s'
  4112  0D38  3421               	retlw	33	;'!'
  4113  0D39  340D               	retlw	13
  4114  0D3A  340A               	retlw	10
  4115  0D3B  3400               	retlw	0
  4116  0D3C                     STR_19:	
  4117  0D3C  3450               	retlw	80	;'P'
  4118  0D3D  3472               	retlw	114	;'r'
  4119  0D3E  346F               	retlw	111	;'o'
  4120  0D3F  3467               	retlw	103	;'g'
  4121  0D40  3472               	retlw	114	;'r'
  4122  0D41  3461               	retlw	97	;'a'
  4123  0D42  346D               	retlw	109	;'m'
  4124  0D43  3420               	retlw	32	;' '
  4125  0D44  3446               	retlw	70	;'F'
  4126  0D45  3461               	retlw	97	;'a'
  4127  0D46  3469               	retlw	105	;'i'
  4128  0D47  346C               	retlw	108	;'l'
  4129  0D48  340D               	retlw	13
  4130  0D49  340A               	retlw	10
  4131  0D4A  3400               	retlw	0
  4132  0D4B                     __end_of__stringdata:	
  4133                           
  4134                           ; #config settings
  4135  0000                     
  4136                           	psect	cinit
  4137  00DA                     start_initialization:	
  4138  00DA                     __initialization:	
  4139                           
  4140                           ; Clear objects allocated to BANK0
  4141  00DA  01E6               	clrf	__pbssBANK0& (0+127)
  4142  00DB  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  4143  00DC  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  4144  00DD  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  4145  00DE  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  4146                           
  4147                           ; Clear objects allocated to BANK1
  4148  00DF  0021               	movlb	1	; select bank1
  4149  00E0  01E8               	clrf	__pbssBANK1& (0+127)
  4150  00E1  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  4151  00E2  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  4152  00E3  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  4153                           
  4154                           ; Clear objects allocated to BANK2
  4155  00E4  305F               	movlw	low __pbssBANK2
  4156  00E5  0084               	movwf	4
  4157  00E6  3001               	movlw	high __pbssBANK2
  4158  00E7  0085               	movwf	5
  4159  00E8  300A               	movlw	10
  4160  00E9  3198  2079  3180   	fcall	clear_ram0
  4161                           
  4162                           ; Clear objects allocated to BANK3
  4163  00EC  30A0               	movlw	low __pbssBANK3
  4164  00ED  0084               	movwf	4
  4165  00EE  3001               	movlw	high __pbssBANK3
  4166  00EF  0085               	movwf	5
  4167  00F0  300F               	movlw	15
  4168  00F1  3198  2079  3180   	fcall	clear_ram0
  4169                           
  4170                           ; Clear objects allocated to BANK4
  4171  00F4  3020               	movlw	low __pbssBANK4
  4172  00F5  0084               	movwf	4
  4173  00F6  3002               	movlw	high __pbssBANK4
  4174  00F7  0085               	movwf	5
  4175  00F8  300A               	movlw	10
  4176  00F9  3198  2079  3180   	fcall	clear_ram0
  4177                           
  4178                           ; Initialize objects allocated to BANK2
  4179  00FC  3000               	movlw	low __pidataBANK2
  4180  00FD  0084               	movwf	4
  4181  00FE  3090               	movlw	(high __pidataBANK2)| (0+128)
  4182  00FF  0085               	movwf	5
  4183  0100  3069               	movlw	low __pdataBANK2
  4184  0101  0086               	movwf	6
  4185  0102  3001               	movlw	high __pdataBANK2
  4186  0103  0087               	movwf	7
  4187  0104  3006               	movlw	6
  4188  0105  3198  2073  3180   	fcall	init_ram
  4189                           
  4190                           ; Initialize objects allocated to BANK4
  4191  0108  3086               	movlw	low __pidataBANK4
  4192  0109  0084               	movwf	4
  4193  010A  3098               	movlw	(high __pidataBANK4)| (0+128)
  4194  010B  0085               	movwf	5
  4195  010C  302A               	movlw	low __pdataBANK4
  4196  010D  0086               	movwf	6
  4197  010E  3002               	movlw	high __pdataBANK4
  4198  010F  0087               	movwf	7
  4199  0110  3008               	movlw	8
  4200  0111  3198  2073         	fcall	init_ram
  4201  0113                     end_of_initialization:	
  4202                           ;End of C runtime variable initialization code
  4203                           
  4204  0113                     __end_of__initialization:	
  4205  0113  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  4206  0114  0020               	movlb	0
  4207  0115  318E  2E49         	ljmp	_main	;jump to C main() function
  4208                           
  4209                           	psect	bssBANK0
  4210  0066                     __pbssBANK0:	
  4211  0066                     _LALT:	
  4212  0066                     	ds	1
  4213  0067                     _PARITY:	
  4214  0067                     	ds	1
  4215  0068                     _PS_2_bits:	
  4216  0068                     	ds	1
  4217  0069                     _ParityTyped:	
  4218  0069                     	ds	1
  4219  006A                     _RALT:	
  4220  006A                     	ds	1
  4221                           
  4222                           	psect	bssBANK1
  4223  00E8                     __pbssBANK1:	
  4224  00E8                     _Alarm:	
  4225  00E8                     	ds	1
  4226  00E9                     _ECHO:	
  4227  00E9                     	ds	1
  4228  00EA                     _blinkdelay:	
  4229  00EA                     	ds	1
  4230  00EB                     _i:	
  4231  00EB                     	ds	1
  4232                           
  4233                           	psect	bssBANK2
  4234  015F                     __pbssBANK2:	
  4235  015F                     _BatteryVoltage:	
  4236  015F                     	ds	4
  4237  0163                     _SinLEDtimer:	
  4238  0163                     	ds	2
  4239  0165                     _BAUDMODE:	
  4240  0165                     	ds	1
  4241  0166                     _Delete:	
  4242  0166                     	ds	1
  4243  0167                     _LControl:	
  4244  0167                     	ds	1
  4245  0168                     _RControl:	
  4246  0168                     	ds	1
  4247                           
  4248                           	psect	dataBANK2
  4249  0169                     __pdataBANK2:	
  4250  0169                     _Read_Timer:	
  4251  0169                     	ds	2
  4252  016B                     _MEM:	
  4253  016B                     	ds	4
  4254                           
  4255                           	psect	bssBANK3
  4256  01A0                     __pbssBANK3:	
  4257  01A0                     _BaudTyped:	
  4258  01A0                     	ds	4
  4259  01A4                     _PS_2_Read_Data_First:	
  4260  01A4                     	ds	2
  4261  01A6                     _PS_2_Read_Data_Forth:	
  4262  01A6                     	ds	2
  4263  01A8                     _PS_2_Read_Data_Second:	
  4264  01A8                     	ds	2
  4265  01AA                     _PS_2_Read_Data_Third:	
  4266  01AA                     	ds	2
  4267  01AC                     _CapsCount:	
  4268  01AC                     	ds	1
  4269  01AD                     _Caps_Lock:	
  4270  01AD                     	ds	1
  4271  01AE                     _Shift_Key:	
  4272  01AE                     	ds	1
  4273                           
  4274                           	psect	bssBANK4
  4275  0220                     __pbssBANK4:	
  4276  0220                     _PS_2_Read_Data_FirstTEMP:	
  4277  0220                     	ds	2
  4278  0222                     _PS_2_Read_Data_ForthTEMP:	
  4279  0222                     	ds	2
  4280  0224                     _PS_2_Read_Data_SecondTEMP:	
  4281  0224                     	ds	2
  4282  0226                     _PS_2_Read_Data_ThirdTEMP:	
  4283  0226                     	ds	2
  4284  0228                     _pwrLEDtoggle:	
  4285  0228                     	ds	2
  4286                           
  4287                           	psect	dataBANK4
  4288  022A                     __pdataBANK4:	
  4289  022A                     _BAUD:	
  4290  022A                     	ds	4
  4291  022E                     _Version:	
  4292  022E                     	ds	4
  4293                           
  4294                           	psect	clrtext
  4295  1879                     clear_ram0:	
  4296                           ;	Called with FSR0 containing the base address, and
  4297                           ;	WREG with the size to clear
  4298                           
  4299  1879  0064               	clrwdt	;clear the watchdog before getting into this loop
  4300  187A                     clrloop0:	
  4301  187A  0180               	clrf	0	;clear RAM location pointed to by FSR
  4302  187B  3101               	addfsr 0,1
  4303  187C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4304  187D  287A               	goto	clrloop0	;have we reached the end yet?
  4305  187E  3400               	retlw	0	;all done for this memory range, return
  4306                           
  4307                           	psect	inittext
  4308  1873                     init_ram:	
  4309  1873  00FE               	movwf	126
  4310  1874                     initloop:	
  4311  1874  0012               	moviw fsr0++
  4312  1875  001E               	movwi fsr1++
  4313  1876  0BFE               	decfsz	126,f
  4314  1877  2874               	goto	initloop
  4315  1878  3400               	retlw	0
  4316                           
  4317                           	psect	cstackBANK5
  4318  02A0                     __pcstackBANK5:	
  4319  02A0                     PS_2_Update@buf:	
  4320                           
  4321                           ; 60 bytes @ 0x0
  4322  02A0                     	ds	60
  4323  02DC                     _PS_2_Update$848:	
  4324                           
  4325                           ; 1 bytes @ 0x3C
  4326  02DC                     	ds	1
  4327  02DD                     _PS_2_Update$849:	
  4328                           
  4329                           ; 1 bytes @ 0x3D
  4330  02DD                     	ds	1
  4331  02DE                     _PS_2_Update$850:	
  4332                           
  4333                           ; 1 bytes @ 0x3E
  4334  02DE                     	ds	1
  4335  02DF                     _PS_2_Update$851:	
  4336                           
  4337                           ; 1 bytes @ 0x3F
  4338  02DF                     	ds	1
  4339  02E0                     PS_2_Update@temp:	
  4340                           
  4341                           ; 1 bytes @ 0x40
  4342  02E0                     	ds	1
  4343                           
  4344                           	psect	cstackBANK3
  4345  01AF                     __pcstackBANK3:	
  4346  01AF                     ??_PS_2_Update:	
  4347                           
  4348                           ; 0 bytes @ 0x0
  4349  01AF                     	ds	9
  4350                           
  4351                           	psect	cstackBANK2
  4352  0120                     __pcstackBANK2:	
  4353  0120                     SetBaud@buf:	
  4354                           
  4355                           ; 50 bytes @ 0x0
  4356  0120                     	ds	50
  4357  0152                     SetBaud@Baudtemp:	
  4358                           
  4359                           ; 4 bytes @ 0x32
  4360  0152                     	ds	4
  4361  0156                     SetBaud@Paritytemp:	
  4362                           
  4363                           ; 4 bytes @ 0x36
  4364  0156                     	ds	4
  4365  015A                     SetBaud@temp:	
  4366                           
  4367                           ; 4 bytes @ 0x3A
  4368  015A                     	ds	4
  4369  015E                     SetBaud@i:	
  4370                           
  4371                           ; 1 bytes @ 0x3E
  4372  015E                     	ds	1
  4373                           
  4374                           	psect	cstackBANK1
  4375  00A0                     __pcstackBANK1:	
  4376  00A0                     ReadVoltage@voltage:	
  4377  00A0                     WriteFlash_Sequential@TempBufH:	
  4378                           ; 4 bytes @ 0x0
  4379                           
  4380  00A0                     Init_System@buf:	
  4381                           ; 32 bytes @ 0x0
  4382                           
  4383                           
  4384                           ; 60 bytes @ 0x0
  4385  00A0                     	ds	4
  4386  00A4                     ReadVoltage@temp:	
  4387                           
  4388                           ; 2 bytes @ 0x4
  4389  00A4                     	ds	28
  4390  00C0                     WriteFlash_Sequential@TempBufL:	
  4391                           
  4392                           ; 32 bytes @ 0x20
  4393  00C0                     	ds	28
  4394  00DC                     Init_System@temp:	
  4395                           
  4396                           ; 4 bytes @ 0x3C
  4397  00DC                     	ds	4
  4398  00E0                     Init_System@Parity:	
  4399  00E0                     WriteFlash_Sequential@tempH:	
  4400                           ; 1 bytes @ 0x40
  4401                           
  4402                           
  4403                           ; 1 bytes @ 0x40
  4404  00E0                     	ds	1
  4405  00E1                     WriteFlash_Sequential@tempL:	
  4406  00E1                     Init_System@Baud:	
  4407                           ; 1 bytes @ 0x41
  4408                           
  4409                           
  4410                           ; 4 bytes @ 0x41
  4411  00E1                     	ds	1
  4412  00E2                     WriteFlash_Sequential@amountTemp:	
  4413                           
  4414                           ; 1 bytes @ 0x42
  4415  00E2                     	ds	1
  4416  00E3                     WriteFlash_Sequential@temp:	
  4417                           
  4418                           ; 2 bytes @ 0x43
  4419  00E3                     	ds	2
  4420  00E5                     WriteFlash_Sequential@spaces:	
  4421                           
  4422                           ; 1 bytes @ 0x45
  4423  00E5                     	ds	1
  4424  00E6                     WriteFlash_Sequential@i:	
  4425                           
  4426                           ; 1 bytes @ 0x46
  4427  00E6                     	ds	1
  4428  00E7                     main@i:	
  4429                           
  4430                           ; 1 bytes @ 0x47
  4431  00E7                     	ds	1
  4432                           
  4433                           	psect	cstackCOMMON
  4434  0070                     __pcstackCOMMON:	
  4435  0070                     ?_UART_send_break:	
  4436  0070                     ?_ConfigureOscillator:	
  4437                           ; 0 bytes @ 0x0
  4438                           
  4439  0070                     ?_InitApp:	
  4440                           ; 0 bytes @ 0x0
  4441                           
  4442  0070                     ?_Init_System:	
  4443                           ; 0 bytes @ 0x0
  4444                           
  4445  0070                     ?_PS_2_INIT:	
  4446                           ; 0 bytes @ 0x0
  4447                           
  4448  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4449                           ; 0 bytes @ 0x0
  4450                           
  4451  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4452                           ; 0 bytes @ 0x0
  4453                           
  4454  0070                     ?_PS_2_Update:	
  4455                           ; 0 bytes @ 0x0
  4456                           
  4457  0070                     ?_baudUSART:	
  4458                           ; 0 bytes @ 0x0
  4459                           
  4460  0070                     ?_Clock_TRIS:	
  4461                           ; 0 bytes @ 0x0
  4462                           
  4463  0070                     ?_Data_TRIS:	
  4464                           ; 0 bytes @ 0x0
  4465                           
  4466  0070                     ?_INIT_PS_2_INTERRUPT:	
  4467                           ; 0 bytes @ 0x0
  4468                           
  4469  0070                     ?_DisableInternalADC:	
  4470                           ; 0 bytes @ 0x0
  4471                           
  4472  0070                     ?_isr:	
  4473                           ; 0 bytes @ 0x0
  4474                           
  4475  0070                     ?_main:	
  4476                           ; 0 bytes @ 0x0
  4477                           
  4478  0070                     ?_CloseUSART:	
  4479                           ; 0 bytes @ 0x0
  4480                           
  4481  0070                     ?_UNLOCK:	
  4482                           ; 0 bytes @ 0x0
  4483                           
  4484  0070                     ??i1_ReadUSART:	
  4485                           ; 0 bytes @ 0x0
  4486                           
  4487  0070                     ?i1_UART_send_break:	
  4488                           ; 0 bytes @ 0x0
  4489                           
  4490  0070                     ??i1_UART_send_break:	
  4491                           ; 0 bytes @ 0x0
  4492                           
  4493  0070                     ??i1_READ_PS_2_PIN:	
  4494                           ; 0 bytes @ 0x0
  4495                           
  4496  0070                     ?_READ_PS_2_PIN:	
  4497                           ; 0 bytes @ 0x0
  4498                           
  4499  0070                     ?_ReadUSART:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_Keyboard_Connected:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_Init_PS_2_Send:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_Decode_Scan_Code_Shift:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_Send_PS2:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_Decode_Scan_Code:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_Decode_Scan_Code_Function:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_Reverse_Byte:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_ISNUMBER:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?i1_CheckSum_byte:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?i1_ReadUSART:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?i1_READ_PS_2_PIN:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     i1CheckSum_byte@This:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544                           
  4545                           ; 2 bytes @ 0x0
  4546  0070                     	ds	1
  4547  0071                     i1ReadUSART@data:	
  4548                           
  4549                           ; 1 bytes @ 0x1
  4550  0071                     	ds	1
  4551  0072                     i1CheckSum_byte@Odd_Even:	
  4552                           
  4553                           ; 1 bytes @ 0x2
  4554  0072                     	ds	1
  4555  0073                     ??i1_CheckSum_byte:	
  4556                           
  4557                           ; 0 bytes @ 0x3
  4558  0073                     	ds	1
  4559  0074                     i1CheckSum_byte@ThisTemp:	
  4560                           
  4561                           ; 2 bytes @ 0x4
  4562  0074                     	ds	2
  4563  0076                     i1CheckSum_byte@Parity:	
  4564                           
  4565                           ; 1 bytes @ 0x6
  4566  0076                     	ds	1
  4567  0077                     i1CheckSum_byte@i:	
  4568                           
  4569                           ; 1 bytes @ 0x7
  4570  0077                     	ds	1
  4571  0078                     ?i1_UARTchar:	
  4572  0078                     i1UARTchar@NinethBit_override:	
  4573                           ; 0 bytes @ 0x8
  4574                           
  4575                           
  4576                           ; 1 bytes @ 0x8
  4577  0078                     	ds	1
  4578  0079                     i1UARTchar@NinethBit_override_data:	
  4579                           
  4580                           ; 1 bytes @ 0x9
  4581  0079                     	ds	1
  4582  007A                     ??i1_UARTchar:	
  4583                           
  4584                           ; 0 bytes @ 0xA
  4585  007A                     	ds	4
  4586                           
  4587                           	psect	cstackBANK0
  4588  0020                     __pcstackBANK0:	
  4589  0020                     i1UARTchar@data:	
  4590                           
  4591                           ; 1 bytes @ 0x0
  4592  0020                     	ds	1
  4593  0021                     ??_isr:	
  4594                           
  4595                           ; 0 bytes @ 0x1
  4596  0021                     	ds	2
  4597  0023                     isr@Rx_fault:	
  4598                           
  4599                           ; 1 bytes @ 0x3
  4600  0023                     	ds	1
  4601  0024                     isr@rx:	
  4602                           
  4603                           ; 1 bytes @ 0x4
  4604  0024                     	ds	1
  4605  0025                     ??_READ_PS_2_PIN:	
  4606  0025                     ??_ReadUSART:	
  4607                           ; 0 bytes @ 0x5
  4608                           
  4609  0025                     ??_UART_send_break:	
  4610                           ; 0 bytes @ 0x5
  4611                           
  4612  0025                     ??_ConfigureOscillator:	
  4613                           ; 0 bytes @ 0x5
  4614                           
  4615  0025                     ??_InitApp:	
  4616                           ; 0 bytes @ 0x5
  4617                           
  4618  0025                     ?_delayUS:	
  4619                           ; 0 bytes @ 0x5
  4620                           
  4621  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4622                           ; 0 bytes @ 0x5
  4623                           
  4624  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4625                           ; 0 bytes @ 0x5
  4626                           
  4627  0025                     ?_OpenUSART:	
  4628                           ; 0 bytes @ 0x5
  4629                           
  4630  0025                     ??_baudUSART:	
  4631                           ; 0 bytes @ 0x5
  4632                           
  4633  0025                     ??_Clock_TRIS:	
  4634                           ; 0 bytes @ 0x5
  4635                           
  4636  0025                     ??_Data_TRIS:	
  4637                           ; 0 bytes @ 0x5
  4638                           
  4639  0025                     ??_INIT_PS_2_INTERRUPT:	
  4640                           ; 0 bytes @ 0x5
  4641                           
  4642  0025                     ??_Decode_Scan_Code_Shift:	
  4643                           ; 0 bytes @ 0x5
  4644                           
  4645  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4646                           ; 0 bytes @ 0x5
  4647                           
  4648  0025                     ??_Decode_Scan_Code:	
  4649                           ; 0 bytes @ 0x5
  4650                           
  4651  0025                     ??_Decode_Scan_Code_Function:	
  4652                           ; 0 bytes @ 0x5
  4653                           
  4654  0025                     ??_DisableInternalADC:	
  4655                           ; 0 bytes @ 0x5
  4656                           
  4657  0025                     ??_Reverse_Byte:	
  4658                           ; 0 bytes @ 0x5
  4659                           
  4660  0025                     ??_ISNUMBER:	
  4661                           ; 0 bytes @ 0x5
  4662                           
  4663  0025                     ??_CloseUSART:	
  4664                           ; 0 bytes @ 0x5
  4665                           
  4666  0025                     ??_UNLOCK:	
  4667                           ; 0 bytes @ 0x5
  4668                           
  4669  0025                     ?_BlockErase:	
  4670                           ; 0 bytes @ 0x5
  4671                           
  4672  0025                     ?___flge:	
  4673                           ; 0 bytes @ 0x5
  4674                           
  4675  0025                     ?_CheckSum_byte:	
  4676                           ; 1 bit 
  4677                           
  4678  0025                     ?_ReadFlash_2Byte:	
  4679                           ; 1 bytes @ 0x5
  4680                           
  4681  0025                     ?___flpack:	
  4682                           ; 2 bytes @ 0x5
  4683                           
  4684  0025                     ?___lmul:	
  4685                           ; 4 bytes @ 0x5
  4686                           
  4687  0025                     ?___lldiv:	
  4688                           ; 4 bytes @ 0x5
  4689                           
  4690  0025                     ISNUMBER@ascii:	
  4691                           ; 4 bytes @ 0x5
  4692                           
  4693  0025                     baudUSART@baudconfig:	
  4694                           ; 1 bytes @ 0x5
  4695                           
  4696  0025                     Clock_TRIS@direction:	
  4697                           ; 1 bytes @ 0x5
  4698                           
  4699  0025                     Data_TRIS@direction:	
  4700                           ; 1 bytes @ 0x5
  4701                           
  4702  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4703                           ; 1 bytes @ 0x5
  4704                           
  4705  0025                     READ_PS_2_PIN@DATA_CLK:	
  4706                           ; 1 bytes @ 0x5
  4707                           
  4708  0025                     Decode_Scan_Code@Code:	
  4709                           ; 1 bytes @ 0x5
  4710                           
  4711  0025                     Decode_Scan_Code_Shift@Code:	
  4712                           ; 1 bytes @ 0x5
  4713                           
  4714  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4715                           ; 1 bytes @ 0x5
  4716                           
  4717  0025                     Decode_Scan_Code_Function@Code:	
  4718                           ; 1 bytes @ 0x5
  4719                           
  4720  0025                     CheckSum_byte@This:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723  0025                     OpenUSART@spbrg:	
  4724                           ; 2 bytes @ 0x5
  4725                           
  4726  0025                     ReadFlash_2Byte@row:	
  4727                           ; 2 bytes @ 0x5
  4728                           
  4729  0025                     BlockErase@row:	
  4730                           ; 2 bytes @ 0x5
  4731                           
  4732  0025                     delayUS@US:	
  4733                           ; 2 bytes @ 0x5
  4734                           
  4735  0025                     ___lmul@multiplier:	
  4736                           ; 4 bytes @ 0x5
  4737                           
  4738  0025                     ___flpack@arg:	
  4739                           ; 4 bytes @ 0x5
  4740                           
  4741  0025                     ___flge@ff1:	
  4742                           ; 4 bytes @ 0x5
  4743                           
  4744  0025                     ___lldiv@divisor:	
  4745                           ; 4 bytes @ 0x5
  4746                           
  4747                           
  4748                           ; 4 bytes @ 0x5
  4749  0025                     	ds	1
  4750  0026                     ??_PS_2_INIT:	
  4751  0026                     ReadUSART@data:	
  4752                           ; 0 bytes @ 0x6
  4753                           
  4754  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4755                           ; 1 bytes @ 0x6
  4756                           
  4757  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4758                           ; 1 bytes @ 0x6
  4759                           
  4760                           
  4761                           ; 1 bytes @ 0x6
  4762  0026                     	ds	1
  4763  0027                     ??_OpenUSART:	
  4764  0027                     ??_BlockErase:	
  4765                           ; 0 bytes @ 0x7
  4766                           
  4767  0027                     CheckSum_byte@Odd_Even:	
  4768                           ; 0 bytes @ 0x7
  4769                           
  4770  0027                     Reverse_Byte@temp:	
  4771                           ; 1 bytes @ 0x7
  4772                           
  4773  0027                     OpenUSART@config:	
  4774                           ; 1 bytes @ 0x7
  4775                           
  4776  0027                     ReadFlash_2Byte@column:	
  4777                           ; 1 bytes @ 0x7
  4778                           
  4779                           
  4780                           ; 1 bytes @ 0x7
  4781  0027                     	ds	1
  4782  0028                     ??_CheckSum_byte:	
  4783  0028                     ??_ReadFlash_2Byte:	
  4784                           ; 0 bytes @ 0x8
  4785                           
  4786  0028                     Reverse_Byte@This:	
  4787                           ; 0 bytes @ 0x8
  4788                           
  4789                           
  4790                           ; 1 bytes @ 0x8
  4791  0028                     	ds	1
  4792  0029                     ??_delayUS:	
  4793  0029                     ___flpack@exp:	
  4794                           ; 0 bytes @ 0x9
  4795                           
  4796  0029                     CheckSum_byte@ThisTemp:	
  4797                           ; 1 bytes @ 0x9
  4798                           
  4799  0029                     ___lmul@multiplicand:	
  4800                           ; 2 bytes @ 0x9
  4801                           
  4802  0029                     ___flge@ff2:	
  4803                           ; 4 bytes @ 0x9
  4804                           
  4805  0029                     ___lldiv@dividend:	
  4806                           ; 4 bytes @ 0x9
  4807                           
  4808                           
  4809                           ; 4 bytes @ 0x9
  4810  0029                     	ds	1
  4811  002A                     ?_ReadFlash_4Byte:	
  4812  002A                     ___flpack@sign:	
  4813                           ; 4 bytes @ 0xA
  4814                           
  4815  002A                     ReadFlash_4Byte@row:	
  4816                           ; 1 bytes @ 0xA
  4817                           
  4818  002A                     delayUS@i:	
  4819                           ; 2 bytes @ 0xA
  4820                           
  4821                           
  4822                           ; 4 bytes @ 0xA
  4823  002A                     	ds	1
  4824  002B                     ??___flpack:	
  4825  002B                     CheckSum_byte@Parity:	
  4826                           ; 0 bytes @ 0xB
  4827                           
  4828                           
  4829                           ; 1 bytes @ 0xB
  4830  002B                     	ds	1
  4831  002C                     CheckSum_byte@i:	
  4832  002C                     ReadFlash_4Byte@column:	
  4833                           ; 1 bytes @ 0xC
  4834                           
  4835                           
  4836                           ; 1 bytes @ 0xC
  4837  002C                     	ds	1
  4838  002D                     ?_UARTchar:	
  4839  002D                     ??___lmul:	
  4840                           ; 0 bytes @ 0xD
  4841                           
  4842  002D                     ??___flge:	
  4843                           ; 0 bytes @ 0xD
  4844                           
  4845  002D                     ??___lldiv:	
  4846                           ; 0 bytes @ 0xD
  4847                           
  4848  002D                     UARTchar@NinethBit_override:	
  4849                           ; 0 bytes @ 0xD
  4850                           
  4851  002D                     ___lmul@product:	
  4852                           ; 1 bytes @ 0xD
  4853                           
  4854                           
  4855                           ; 4 bytes @ 0xD
  4856  002D                     	ds	1
  4857  002E                     ??_ReadFlash_4Byte:	
  4858  002E                     delayUS@j:	
  4859                           ; 0 bytes @ 0xE
  4860                           
  4861  002E                     UARTchar@NinethBit_override_data:	
  4862                           ; 1 bytes @ 0xE
  4863                           
  4864  002E                     ___lldiv@quotient:	
  4865                           ; 1 bytes @ 0xE
  4866                           
  4867                           
  4868                           ; 4 bytes @ 0xE
  4869  002E                     	ds	1
  4870  002F                     ??_UARTchar:	
  4871  002F                     ??_Send_PS2:	
  4872                           ; 0 bytes @ 0xF
  4873                           
  4874  002F                     ?_WriteFlash_Sequential:	
  4875                           ; 0 bytes @ 0xF
  4876                           
  4877  002F                     ?_InternalADC_Read:	
  4878                           ; 0 bytes @ 0xF
  4879                           
  4880  002F                     ?___lwtofl:	
  4881                           ; 2 bytes @ 0xF
  4882                           
  4883  002F                     WriteFlash_Sequential@row:	
  4884                           ; 4 bytes @ 0xF
  4885                           
  4886  002F                     ___lwtofl@c:	
  4887                           ; 2 bytes @ 0xF
  4888                           
  4889                           
  4890                           ; 2 bytes @ 0xF
  4891  002F                     	ds	2
  4892  0031                     ??_InternalADC_Read:	
  4893  0031                     WriteFlash_Sequential@buffer:	
  4894                           ; 0 bytes @ 0x11
  4895                           
  4896                           
  4897                           ; 1 bytes @ 0x11
  4898  0031                     	ds	1
  4899  0032                     WriteFlash_Sequential@amount:	
  4900  0032                     ___lldiv@counter:	
  4901                           ; 1 bytes @ 0x12
  4902                           
  4903                           
  4904                           ; 1 bytes @ 0x12
  4905  0032                     	ds	1
  4906  0033                     ?_InitUART:	
  4907  0033                     ??_WriteFlash_Sequential:	
  4908                           ; 0 bytes @ 0x13
  4909                           
  4910  0033                     ??___lwtofl:	
  4911                           ; 0 bytes @ 0x13
  4912                           
  4913  0033                     ?___llmod:	
  4914                           ; 0 bytes @ 0x13
  4915                           
  4916  0033                     UARTchar@data:	
  4917                           ; 4 bytes @ 0x13
  4918                           
  4919  0033                     Send_PS2@oddparity:	
  4920                           ; 1 bytes @ 0x13
  4921                           
  4922  0033                     InternalADC_Read@channel:	
  4923                           ; 1 bytes @ 0x13
  4924                           
  4925  0033                     InitUART@Baud:	
  4926                           ; 1 bytes @ 0x13
  4927                           
  4928  0033                     ReadFlash_4Byte@temp:	
  4929                           ; 4 bytes @ 0x13
  4930                           
  4931  0033                     ___llmod@divisor:	
  4932                           ; 4 bytes @ 0x13
  4933                           
  4934                           
  4935                           ; 4 bytes @ 0x13
  4936  0033                     	ds	1
  4937  0034                     ?_UARTstringWAIT:	
  4938  0034                     ?___fldiv:	
  4939                           ; 0 bytes @ 0x14
  4940                           
  4941  0034                     Send_PS2@command:	
  4942                           ; 4 bytes @ 0x14
  4943                           
  4944  0034                     UARTstringWAIT@data:	
  4945                           ; 1 bytes @ 0x14
  4946                           
  4947  0034                     ___fldiv@f2:	
  4948                           ; 2 bytes @ 0x14
  4949                           
  4950                           
  4951                           ; 4 bytes @ 0x14
  4952  0034                     	ds	1
  4953  0035                     Send_PS2@i:	
  4954                           
  4955                           ; 1 bytes @ 0x15
  4956  0035                     	ds	1
  4957  0036                     ??_UARTstringWAIT:	
  4958  0036                     ?_WriteBaud:	
  4959                           ; 0 bytes @ 0x16
  4960                           
  4961  0036                     Send_PS2@timeout:	
  4962                           ; 0 bytes @ 0x16
  4963                           
  4964  0036                     WriteBaud@row:	
  4965                           ; 2 bytes @ 0x16
  4966                           
  4967                           
  4968                           ; 2 bytes @ 0x16
  4969  0036                     	ds	1
  4970  0037                     ?_ReadBaud:	
  4971  0037                     InitUART@parity:	
  4972                           ; 4 bytes @ 0x17
  4973                           
  4974  0037                     ReadBaud@row:	
  4975                           ; 1 bytes @ 0x17
  4976                           
  4977  0037                     ___llmod@dividend:	
  4978                           ; 2 bytes @ 0x17
  4979                           
  4980                           
  4981                           ; 4 bytes @ 0x17
  4982  0037                     	ds	1
  4983  0038                     ??_Init_PS_2_Send:	
  4984  0038                     ??_InitUART:	
  4985                           ; 0 bytes @ 0x18
  4986                           
  4987  0038                     WriteBaud@Baud:	
  4988                           ; 0 bytes @ 0x18
  4989                           
  4990  0038                     ___fldiv@f1:	
  4991                           ; 4 bytes @ 0x18
  4992                           
  4993                           
  4994                           ; 4 bytes @ 0x18
  4995  0038                     	ds	1
  4996  0039                     ReadBaud@column:	
  4997                           
  4998                           ; 1 bytes @ 0x19
  4999  0039                     	ds	2
  5000  003B                     ??_ReadBaud:	
  5001  003B                     ??___llmod:	
  5002                           ; 0 bytes @ 0x1B
  5003                           
  5004                           
  5005                           ; 0 bytes @ 0x1B
  5006  003B                     	ds	1
  5007  003C                     ??___fldiv:	
  5008  003C                     WriteBaud@Parity:	
  5009                           ; 0 bytes @ 0x1C
  5010                           
  5011  003C                     ___llmod@counter:	
  5012                           ; 1 bytes @ 0x1C
  5013                           
  5014                           
  5015                           ; 1 bytes @ 0x1C
  5016  003C                     	ds	1
  5017  003D                     ??_WriteBaud:	
  5018  003D                     ?_sprintf:	
  5019                           ; 0 bytes @ 0x1D
  5020                           
  5021  003D                     sprintf@sp:	
  5022                           ; 2 bytes @ 0x1D
  5023                           
  5024                           
  5025                           ; 2 bytes @ 0x1D
  5026  003D                     	ds	2
  5027  003F                     sprintf@f:	
  5028                           
  5029                           ; 2 bytes @ 0x1F
  5030  003F                     	ds	1
  5031  0040                     InitUART@spbrg:	
  5032                           
  5033                           ; 2 bytes @ 0x20
  5034  0040                     	ds	1
  5035  0041                     ___fldiv@f3:	
  5036                           
  5037                           ; 4 bytes @ 0x21
  5038  0041                     	ds	1
  5039  0042                     InitUART@baudconfig:	
  5040                           
  5041                           ; 1 bytes @ 0x22
  5042  0042                     	ds	1
  5043  0043                     InitUART@config:	
  5044  0043                     ReadBaud@temp:	
  5045                           ; 1 bytes @ 0x23
  5046                           
  5047                           
  5048                           ; 4 bytes @ 0x23
  5049  0043                     	ds	1
  5050  0044                     InitUART@temp:	
  5051                           
  5052                           ; 4 bytes @ 0x24
  5053  0044                     	ds	1
  5054  0045                     ??_sprintf:	
  5055  0045                     ___fldiv@cntr:	
  5056                           ; 0 bytes @ 0x25
  5057                           
  5058  0045                     WriteBaud@temp:	
  5059                           ; 1 bytes @ 0x25
  5060                           
  5061                           
  5062                           ; 4 bytes @ 0x25
  5063  0045                     	ds	1
  5064  0046                     ___fldiv@exp:	
  5065                           
  5066                           ; 1 bytes @ 0x26
  5067  0046                     	ds	1
  5068  0047                     ___fldiv@sign:	
  5069                           
  5070                           ; 1 bytes @ 0x27
  5071  0047                     	ds	1
  5072  0048                     ?___flmul:	
  5073  0048                     ___flmul@f1:	
  5074                           ; 4 bytes @ 0x28
  5075                           
  5076                           
  5077                           ; 4 bytes @ 0x28
  5078  0048                     	ds	3
  5079  004B                     sprintf@flag:	
  5080                           
  5081                           ; 1 bytes @ 0x2B
  5082  004B                     	ds	1
  5083  004C                     sprintf@prec:	
  5084  004C                     ___flmul@f2:	
  5085                           ; 2 bytes @ 0x2C
  5086                           
  5087                           
  5088                           ; 4 bytes @ 0x2C
  5089  004C                     	ds	2
  5090  004E                     sprintf@_val:	
  5091                           
  5092                           ; 4 bytes @ 0x2E
  5093  004E                     	ds	2
  5094  0050                     ??___flmul:	
  5095                           
  5096                           ; 0 bytes @ 0x30
  5097  0050                     	ds	2
  5098  0052                     sprintf@ap:	
  5099                           
  5100                           ; 1 bytes @ 0x32
  5101  0052                     	ds	1
  5102  0053                     sprintf@c:	
  5103                           
  5104                           ; 1 bytes @ 0x33
  5105  0053                     	ds	1
  5106  0054                     ??_Init_System:	
  5107  0054                     ?_SetBaud:	
  5108                           ; 0 bytes @ 0x34
  5109                           
  5110  0054                     SetBaud@Baud:	
  5111                           ; 0 bytes @ 0x34
  5112                           
  5113                           
  5114                           ; 4 bytes @ 0x34
  5115  0054                     	ds	1
  5116  0055                     ___flmul@exp:	
  5117                           
  5118                           ; 1 bytes @ 0x35
  5119  0055                     	ds	1
  5120  0056                     ___flmul@f3_as_product:	
  5121                           
  5122                           ; 4 bytes @ 0x36
  5123  0056                     	ds	2
  5124  0058                     SetBaud@Parity:	
  5125                           
  5126                           ; 1 bytes @ 0x38
  5127  0058                     	ds	1
  5128  0059                     ??_SetBaud:	
  5129                           
  5130                           ; 0 bytes @ 0x39
  5131  0059                     	ds	1
  5132  005A                     ___flmul@cntr:	
  5133                           
  5134                           ; 1 bytes @ 0x3A
  5135  005A                     	ds	1
  5136  005B                     ___flmul@sign:	
  5137                           
  5138                           ; 1 bytes @ 0x3B
  5139  005B                     	ds	1
  5140  005C                     ?_ReadVoltage:	
  5141                           
  5142                           ; 4 bytes @ 0x3C
  5143  005C                     	ds	4
  5144  0060                     ??_ReadVoltage:	
  5145                           
  5146                           ; 0 bytes @ 0x40
  5147  0060                     	ds	1
  5148  0061                     ??_Keyboard_Connected:	
  5149  0061                     Keyboard_Connected@i:	
  5150                           ; 0 bytes @ 0x41
  5151                           
  5152                           
  5153                           ; 4 bytes @ 0x41
  5154  0061                     	ds	4
  5155  0065                     ??_main:	
  5156                           
  5157                           ; 0 bytes @ 0x45
  5158  0065                     	ds	1
  5159                           
  5160                           	psect	maintext
  5161  0E49                     __pmaintext:	
  5162 ;;
  5163 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5164 ;;
  5165 ;; *************** function _main *****************
  5166 ;; Defined at:
  5167 ;;		line 66 in file "main.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  i               1   71[BANK1 ] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 17F/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;Total ram usage:        2 bytes
  5186 ;; Hardware stack levels required when called:   10
  5187 ;; This function calls:
  5188 ;;		_ConfigureOscillator
  5189 ;;		_InitApp
  5190 ;;		_Init_PS_2_Send
  5191 ;;		_Init_System
  5192 ;;		_Keyboard_Connected
  5193 ;;		_PS_2_DISABLE_INTERRUPT
  5194 ;;		_PS_2_ENABLE_INTERRUPT
  5195 ;;		_PS_2_INIT
  5196 ;;		_PS_2_Update
  5197 ;;		_ReadVoltage
  5198 ;;		_UARTstringWAIT
  5199 ;;		___flge
  5200 ;;		_delayUS
  5201 ;; This function is called by:
  5202 ;;		Startup code after reset
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _main
  5208  0E49                     _main:	
  5209                           
  5210                           ;main.c: 68: unsigned char i=0;
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5214  0E49  0021               	movlb	1	; select bank1
  5215  0E4A  01E7               	clrf	main@i^(0+128)
  5216                           
  5217                           ;main.c: 70: ConfigureOscillator();
  5218  0E4B  3199  210F  318E   	fcall	_ConfigureOscillator
  5219                           
  5220                           ;main.c: 71: InitApp();
  5221  0E4E  3199  21CB  318E   	fcall	_InitApp
  5222                           
  5223                           ;main.c: 72: Init_System();
  5224  0E51  318D  2554  318E   	fcall	_Init_System
  5225                           
  5226                           ;main.c: 73: PS_2_INIT();
  5227  0E54  3198  20C6  318E   	fcall	_PS_2_INIT
  5228                           
  5229                           ;main.c: 76: for(i =0;i<10;i++)
  5230  0E57  0021               	movlb	1	; select bank1
  5231  0E58  01E7               	clrf	main@i^(0+128)
  5232  0E59  300A               	movlw	10
  5233  0E5A  0267               	subwf	main@i^(0+128),w
  5234  0E5B  1803               	btfsc	3,0
  5235  0E5C  2E87               	goto	l7287
  5236  0E5D                     l158:	
  5237                           
  5238                           ;main.c: 77: {
  5239                           ;main.c: 78: LATC |= 0b00010000;
  5240  0E5D  0022               	movlb	2	; select bank2
  5241  0E5E  160E               	bsf	14,4	;volatile
  5242                           
  5243                           ;main.c: 79: delayUS(10000);
  5244  0E5F  3000               	movlw	0
  5245  0E60  0020               	movlb	0	; select bank0
  5246  0E61  00A8               	movwf	delayUS@US+3
  5247  0E62  3000               	movlw	0
  5248  0E63  00A7               	movwf	delayUS@US+2
  5249  0E64  3027               	movlw	39
  5250  0E65  00A6               	movwf	delayUS@US+1
  5251  0E66  3010               	movlw	16
  5252  0E67  00A5               	movwf	delayUS@US
  5253  0E68  319B  2315  318E   	fcall	_delayUS
  5254                           
  5255                           ;main.c: 80: LATC &= ~0b00010000;
  5256  0E6B  30EF               	movlw	239
  5257  0E6C  0020               	movlb	0	; select bank0
  5258  0E6D  00E5               	movwf	??_main
  5259  0E6E  0865               	movf	??_main,w
  5260  0E6F  0022               	movlb	2	; select bank2
  5261  0E70  058E               	andwf	14,f	;volatile
  5262                           
  5263                           ;main.c: 81: delayUS(10000);
  5264  0E71  3000               	movlw	0
  5265  0E72  0020               	movlb	0	; select bank0
  5266  0E73  00A8               	movwf	delayUS@US+3
  5267  0E74  3000               	movlw	0
  5268  0E75  00A7               	movwf	delayUS@US+2
  5269  0E76  3027               	movlw	39
  5270  0E77  00A6               	movwf	delayUS@US+1
  5271  0E78  3010               	movlw	16
  5272  0E79  00A5               	movwf	delayUS@US
  5273  0E7A  319B  2315  318E   	fcall	_delayUS
  5274  0E7D  3001               	movlw	1
  5275  0E7E  0020               	movlb	0	; select bank0
  5276  0E7F  00E5               	movwf	??_main
  5277  0E80  0865               	movf	??_main,w
  5278  0E81  0021               	movlb	1	; select bank1
  5279  0E82  07E7               	addwf	main@i^(0+128),f
  5280  0E83  300A               	movlw	10
  5281  0E84  0267               	subwf	main@i^(0+128),w
  5282  0E85  1C03               	skipc
  5283  0E86  2E5D               	goto	l158
  5284  0E87                     l7287:	
  5285                           
  5286                           ;main.c: 82: }
  5287                           ;main.c: 84: PS_2_DISABLE_INTERRUPT(0b00100000);
  5288  0E87  3020               	movlw	32
  5289  0E88  3199  21AC  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  5290                           
  5291                           ;main.c: 86: UARTstringWAIT("\r\n");
  5292  0E8B  30F0               	movlw	low ((STR_11+17)| (0+32768))
  5293  0E8C  0020               	movlb	0	; select bank0
  5294  0E8D  00B4               	movwf	UARTstringWAIT@data
  5295  0E8E  308C               	movlw	high ((STR_11+17)| (0+32768))
  5296  0E8F  00B5               	movwf	UARTstringWAIT@data+1
  5297  0E90  319A  22E2  318E   	fcall	_UARTstringWAIT
  5298                           
  5299                           ;main.c: 87: delayUS(10000);
  5300  0E93  3000               	movlw	0
  5301  0E94  0020               	movlb	0	; select bank0
  5302  0E95  00A8               	movwf	delayUS@US+3
  5303  0E96  3000               	movlw	0
  5304  0E97  00A7               	movwf	delayUS@US+2
  5305  0E98  3027               	movlw	39
  5306  0E99  00A6               	movwf	delayUS@US+1
  5307  0E9A  3010               	movlw	16
  5308  0E9B  00A5               	movwf	delayUS@US
  5309  0E9C  319B  2315  318E   	fcall	_delayUS
  5310                           
  5311                           ;main.c: 88: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  5312  0E9F  306E               	movlw	low (STR_2| (0+32768))
  5313  0EA0  0020               	movlb	0	; select bank0
  5314  0EA1  00B4               	movwf	UARTstringWAIT@data
  5315  0EA2  308C               	movlw	high (STR_2| (0+32768))
  5316  0EA3  00B5               	movwf	UARTstringWAIT@data+1
  5317  0EA4  319A  22E2  318E   	fcall	_UARTstringWAIT
  5318                           
  5319                           ;main.c: 89: delayUS(5000);
  5320  0EA7  3000               	movlw	0
  5321  0EA8  0020               	movlb	0	; select bank0
  5322  0EA9  00A8               	movwf	delayUS@US+3
  5323  0EAA  3000               	movlw	0
  5324  0EAB  00A7               	movwf	delayUS@US+2
  5325  0EAC  3013               	movlw	19
  5326  0EAD  00A6               	movwf	delayUS@US+1
  5327  0EAE  3088               	movlw	136
  5328  0EAF  00A5               	movwf	delayUS@US
  5329  0EB0  319B  2315  318E   	fcall	_delayUS
  5330                           
  5331                           ;main.c: 90: UARTstringWAIT("Firmware Version: ");
  5332  0EB3  3006               	movlw	low (STR_3| (0+32768))
  5333  0EB4  0020               	movlb	0	; select bank0
  5334  0EB5  00B4               	movwf	UARTstringWAIT@data
  5335  0EB6  308D               	movlw	high (STR_3| (0+32768))
  5336  0EB7  00B5               	movwf	UARTstringWAIT@data+1
  5337  0EB8  319A  22E2  318E   	fcall	_UARTstringWAIT
  5338                           
  5339                           ;main.c: 91: UARTstringWAIT(Version);
  5340  0EBB  302E               	movlw	low _Version
  5341  0EBC  0020               	movlb	0	; select bank0
  5342  0EBD  00B4               	movwf	UARTstringWAIT@data
  5343  0EBE  3002               	movlw	high _Version
  5344  0EBF  00B5               	movwf	UARTstringWAIT@data+1
  5345  0EC0  319A  22E2  318E   	fcall	_UARTstringWAIT
  5346                           
  5347                           ;main.c: 92: UARTstringWAIT("\r\n");
  5348  0EC3  30F0               	movlw	low ((STR_11+17)| (0+32768))
  5349  0EC4  0020               	movlb	0	; select bank0
  5350  0EC5  00B4               	movwf	UARTstringWAIT@data
  5351  0EC6  308C               	movlw	high ((STR_11+17)| (0+32768))
  5352  0EC7  00B5               	movwf	UARTstringWAIT@data+1
  5353  0EC8  319A  22E2  318E   	fcall	_UARTstringWAIT
  5354                           
  5355                           ;main.c: 93: delayUS(5000);
  5356  0ECB  3000               	movlw	0
  5357  0ECC  0020               	movlb	0	; select bank0
  5358  0ECD  00A8               	movwf	delayUS@US+3
  5359  0ECE  3000               	movlw	0
  5360  0ECF  00A7               	movwf	delayUS@US+2
  5361  0ED0  3013               	movlw	19
  5362  0ED1  00A6               	movwf	delayUS@US+1
  5363  0ED2  3088               	movlw	136
  5364  0ED3  00A5               	movwf	delayUS@US
  5365  0ED4  319B  2315  318E   	fcall	_delayUS
  5366                           
  5367                           ;main.c: 94: UARTstringWAIT("To Change BAUD hit \"CNT+ALT+DEL\"\r\n");
  5368  0ED7  308E               	movlw	low (STR_5| (0+32768))
  5369  0ED8  0020               	movlb	0	; select bank0
  5370  0ED9  00B4               	movwf	UARTstringWAIT@data
  5371  0EDA  308B               	movlw	high (STR_5| (0+32768))
  5372  0EDB  00B5               	movwf	UARTstringWAIT@data+1
  5373  0EDC  319A  22E2  318E   	fcall	_UARTstringWAIT
  5374                           
  5375                           ;main.c: 95: delayUS(10000);
  5376  0EDF  3000               	movlw	0
  5377  0EE0  0020               	movlb	0	; select bank0
  5378  0EE1  00A8               	movwf	delayUS@US+3
  5379  0EE2  3000               	movlw	0
  5380  0EE3  00A7               	movwf	delayUS@US+2
  5381  0EE4  3027               	movlw	39
  5382  0EE5  00A6               	movwf	delayUS@US+1
  5383  0EE6  3010               	movlw	16
  5384  0EE7  00A5               	movwf	delayUS@US
  5385  0EE8  319B  2315  318E   	fcall	_delayUS
  5386                           
  5387                           ;main.c: 97: if(!Keyboard_Connected())
  5388  0EEB  3190  2006  318E   	fcall	_Keyboard_Connected
  5389  0EEE  3800               	iorlw	0
  5390  0EEF  1D03               	skipz
  5391  0EF0  2EFF               	goto	l7311
  5392                           
  5393                           ;main.c: 98: {
  5394                           ;main.c: 99: UARTstringWAIT("No Keyboard connected\r\n");
  5395  0EF1  3088               	movlw	low (STR_6| (0+32768))
  5396  0EF2  0020               	movlb	0	; select bank0
  5397  0EF3  00B4               	movwf	UARTstringWAIT@data
  5398  0EF4  308C               	movlw	high (STR_6| (0+32768))
  5399  0EF5  00B5               	movwf	UARTstringWAIT@data+1
  5400  0EF6  319A  22E2  318E   	fcall	_UARTstringWAIT
  5401  0EF9                     l7309:	
  5402                           ;main.c: 101: while(!Keyboard_Connected());
  5403                           
  5404  0EF9  3190  2006  318E   	fcall	_Keyboard_Connected
  5405  0EFC  3A00               	xorlw	0
  5406  0EFD  1903               	skipnz
  5407  0EFE  2EF9               	goto	l7309
  5408  0EFF                     l7311:	
  5409                           
  5410                           ;main.c: 102: }
  5411                           ;main.c: 103: UARTstringWAIT("Keyboard Connected\r\n");
  5412  0EFF  30B6               	movlw	low (STR_7| (0+32768))
  5413  0F00  0020               	movlb	0	; select bank0
  5414  0F01  00B4               	movwf	UARTstringWAIT@data
  5415  0F02  308C               	movlw	high (STR_7| (0+32768))
  5416  0F03  00B5               	movwf	UARTstringWAIT@data+1
  5417  0F04  319A  22E2  318E   	fcall	_UARTstringWAIT
  5418                           
  5419                           ;main.c: 104: if(!Init_PS_2_Send())
  5420  0F07  3193  230D  318E   	fcall	_Init_PS_2_Send
  5421  0F0A  3800               	iorlw	0
  5422  0F0B  1D03               	skipz
  5423  0F0C  2F1E               	goto	l7319
  5424                           
  5425                           ;main.c: 105: {
  5426                           ;main.c: 106: delayUS(10000);
  5427  0F0D  3000               	movlw	0
  5428  0F0E  0020               	movlb	0	; select bank0
  5429  0F0F  00A8               	movwf	delayUS@US+3
  5430  0F10  3000               	movlw	0
  5431  0F11  00A7               	movwf	delayUS@US+2
  5432  0F12  3027               	movlw	39
  5433  0F13  00A6               	movwf	delayUS@US+1
  5434  0F14  3010               	movlw	16
  5435  0F15  00A5               	movwf	delayUS@US
  5436  0F16  319B  2315  318E   	fcall	_delayUS
  5437                           
  5438                           ;main.c: 107: UARTstringWAIT("Initialization Fail\r\n");
  5439  0F19  30A0               	movlw	low (STR_8| (0+32768))
  5440  0F1A  0020               	movlb	0	; select bank0
  5441  0F1B  00B4               	movwf	UARTstringWAIT@data
  5442  0F1C  308C               	movlw	high (STR_8| (0+32768))
  5443  0F1D  2F22               	goto	L1
  5444  0F1E                     l7319:	
  5445                           ;main.c: 108: }
  5446                           
  5447                           
  5448                           ;main.c: 109: else
  5449                           ;main.c: 110: {
  5450                           ;main.c: 111: UARTstringWAIT("Keyboard Pass!\r\n");
  5451  0F1E  302B               	movlw	low (STR_9| (0+32768))
  5452  0F1F  0020               	movlb	0	; select bank0
  5453  0F20  00B4               	movwf	UARTstringWAIT@data
  5454  0F21  308D               	movlw	high (STR_9| (0+32768))
  5455  0F22                     L1:	
  5456  0F22  00B5               	movwf	UARTstringWAIT@data+1
  5457  0F23  319A  22E2  318E   	fcall	_UARTstringWAIT
  5458                           
  5459                           ;main.c: 112: }
  5460                           ;main.c: 113: BatteryVoltage = ReadVoltage();
  5461  0F26  319E  26D1  318E   	fcall	_ReadVoltage
  5462  0F29  0020               	movlb	0	; select bank0
  5463  0F2A  085F               	movf	?_ReadVoltage+3,w
  5464  0F2B  0022               	movlb	2	; select bank2
  5465  0F2C  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5466  0F2D  0020               	movlb	0	; select bank0
  5467  0F2E  085E               	movf	?_ReadVoltage+2,w
  5468  0F2F  0022               	movlb	2	; select bank2
  5469  0F30  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5470  0F31  0020               	movlb	0	; select bank0
  5471  0F32  085D               	movf	?_ReadVoltage+1,w
  5472  0F33  0022               	movlb	2	; select bank2
  5473  0F34  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5474  0F35  0020               	movlb	0	; select bank0
  5475  0F36  085C               	movf	?_ReadVoltage,w
  5476  0F37  0022               	movlb	2	; select bank2
  5477  0F38  00DF               	movwf	_BatteryVoltage^(0+256)
  5478                           
  5479                           ;main.c: 114: if(BatteryVoltage < 4.65 )
  5480  0F39  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5481  0F3A  0020               	movlb	0	; select bank0
  5482  0F3B  00A8               	movwf	___flge@ff1+3
  5483  0F3C  0022               	movlb	2	; select bank2
  5484  0F3D  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5485  0F3E  0020               	movlb	0	; select bank0
  5486  0F3F  00A7               	movwf	___flge@ff1+2
  5487  0F40  0022               	movlb	2	; select bank2
  5488  0F41  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5489  0F42  0020               	movlb	0	; select bank0
  5490  0F43  00A6               	movwf	___flge@ff1+1
  5491  0F44  0022               	movlb	2	; select bank2
  5492  0F45  085F               	movf	_BatteryVoltage^(0+256),w
  5493  0F46  0020               	movlb	0	; select bank0
  5494  0F47  00A5               	movwf	___flge@ff1
  5495  0F48  3040               	movlw	64
  5496  0F49  00AC               	movwf	___flge@ff2+3
  5497  0F4A  3094               	movlw	148
  5498  0F4B  00AB               	movwf	___flge@ff2+2
  5499  0F4C  30CC               	movlw	204
  5500  0F4D  00AA               	movwf	___flge@ff2+1
  5501  0F4E  30CD               	movlw	205
  5502  0F4F  00A9               	movwf	___flge@ff2
  5503  0F50  319E  2600  318E   	fcall	___flge
  5504  0F53  1803               	btfsc	3,0
  5505  0F54  2F5A               	goto	l7327
  5506                           
  5507                           ;main.c: 115: {
  5508                           ;main.c: 116: UARTstringWAIT("Voltage too Low!\r\n");
  5509  0F55  30F3               	movlw	low (STR_10| (0+32768))
  5510  0F56  0020               	movlb	0	; select bank0
  5511  0F57  00B4               	movwf	UARTstringWAIT@data
  5512  0F58  308C               	movlw	high (STR_10| (0+32768))
  5513  0F59  2F7C               	goto	L2
  5514  0F5A                     l7327:	
  5515                           ;main.c: 117: }
  5516                           
  5517                           
  5518                           ;main.c: 118: else if (BatteryVoltage > 5.35)
  5519  0F5A  3040               	movlw	64
  5520  0F5B  0020               	movlb	0	; select bank0
  5521  0F5C  00A8               	movwf	___flge@ff1+3
  5522  0F5D  30AB               	movlw	171
  5523  0F5E  00A7               	movwf	___flge@ff1+2
  5524  0F5F  3033               	movlw	51
  5525  0F60  00A6               	movwf	___flge@ff1+1
  5526  0F61  3033               	movlw	51
  5527  0F62  00A5               	movwf	___flge@ff1
  5528  0F63  0022               	movlb	2	; select bank2
  5529  0F64  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5530  0F65  0020               	movlb	0	; select bank0
  5531  0F66  00AC               	movwf	___flge@ff2+3
  5532  0F67  0022               	movlb	2	; select bank2
  5533  0F68  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5534  0F69  0020               	movlb	0	; select bank0
  5535  0F6A  00AB               	movwf	___flge@ff2+2
  5536  0F6B  0022               	movlb	2	; select bank2
  5537  0F6C  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5538  0F6D  0020               	movlb	0	; select bank0
  5539  0F6E  00AA               	movwf	___flge@ff2+1
  5540  0F6F  0022               	movlb	2	; select bank2
  5541  0F70  085F               	movf	_BatteryVoltage^(0+256),w
  5542  0F71  0020               	movlb	0	; select bank0
  5543  0F72  00A9               	movwf	___flge@ff2
  5544  0F73  319E  2600  318E   	fcall	___flge
  5545  0F76  1803               	btfsc	3,0
  5546  0F77  2F80               	goto	l7331
  5547                           
  5548                           ;main.c: 119: {
  5549                           ;main.c: 120: UARTstringWAIT("Voltage too High!\r\n");
  5550  0F78  30DF               	movlw	low (STR_11| (0+32768))
  5551  0F79  0020               	movlb	0	; select bank0
  5552  0F7A  00B4               	movwf	UARTstringWAIT@data
  5553  0F7B  308C               	movlw	high (STR_11| (0+32768))
  5554  0F7C                     L2:	
  5555  0F7C  00B5               	movwf	UARTstringWAIT@data+1
  5556  0F7D  319A  22E2  318E   	fcall	_UARTstringWAIT
  5557  0F80                     l7331:	
  5558                           
  5559                           ;main.c: 121: }
  5560                           ;main.c: 122: PS_2_ENABLE_INTERRUPT(0b00100000);
  5561  0F80  3020               	movlw	32
  5562  0F81  3199  217F  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5563  0F84                     l7333:	
  5564                           ;main.c: 124: while(1)
  5565                           
  5566                           
  5567                           ;main.c: 125: {
  5568                           ;main.c: 126: BatteryVoltage = ReadVoltage();
  5569  0F84  319E  26D1  318E   	fcall	_ReadVoltage
  5570  0F87  0020               	movlb	0	; select bank0
  5571  0F88  085F               	movf	?_ReadVoltage+3,w
  5572  0F89  0022               	movlb	2	; select bank2
  5573  0F8A  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5574  0F8B  0020               	movlb	0	; select bank0
  5575  0F8C  085E               	movf	?_ReadVoltage+2,w
  5576  0F8D  0022               	movlb	2	; select bank2
  5577  0F8E  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5578  0F8F  0020               	movlb	0	; select bank0
  5579  0F90  085D               	movf	?_ReadVoltage+1,w
  5580  0F91  0022               	movlb	2	; select bank2
  5581  0F92  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5582  0F93  0020               	movlb	0	; select bank0
  5583  0F94  085C               	movf	?_ReadVoltage,w
  5584  0F95  0022               	movlb	2	; select bank2
  5585  0F96  00DF               	movwf	_BatteryVoltage^(0+256)
  5586                           
  5587                           ;main.c: 127: if(BatteryVoltage < 4.65 || BatteryVoltage > 5.35)
  5588  0F97  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5589  0F98  0020               	movlb	0	; select bank0
  5590  0F99  00A8               	movwf	___flge@ff1+3
  5591  0F9A  0022               	movlb	2	; select bank2
  5592  0F9B  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5593  0F9C  0020               	movlb	0	; select bank0
  5594  0F9D  00A7               	movwf	___flge@ff1+2
  5595  0F9E  0022               	movlb	2	; select bank2
  5596  0F9F  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5597  0FA0  0020               	movlb	0	; select bank0
  5598  0FA1  00A6               	movwf	___flge@ff1+1
  5599  0FA2  0022               	movlb	2	; select bank2
  5600  0FA3  085F               	movf	_BatteryVoltage^(0+256),w
  5601  0FA4  0020               	movlb	0	; select bank0
  5602  0FA5  00A5               	movwf	___flge@ff1
  5603  0FA6  3040               	movlw	64
  5604  0FA7  00AC               	movwf	___flge@ff2+3
  5605  0FA8  3094               	movlw	148
  5606  0FA9  00AB               	movwf	___flge@ff2+2
  5607  0FAA  30CC               	movlw	204
  5608  0FAB  00AA               	movwf	___flge@ff2+1
  5609  0FAC  30CD               	movlw	205
  5610  0FAD  00A9               	movwf	___flge@ff2
  5611  0FAE  319E  2600  318E   	fcall	___flge
  5612  0FB1  1C03               	btfss	3,0
  5613  0FB2  2FD1               	goto	l7339
  5614  0FB3  3040               	movlw	64
  5615  0FB4  0020               	movlb	0	; select bank0
  5616  0FB5  00A8               	movwf	___flge@ff1+3
  5617  0FB6  30AB               	movlw	171
  5618  0FB7  00A7               	movwf	___flge@ff1+2
  5619  0FB8  3033               	movlw	51
  5620  0FB9  00A6               	movwf	___flge@ff1+1
  5621  0FBA  3033               	movlw	51
  5622  0FBB  00A5               	movwf	___flge@ff1
  5623  0FBC  0022               	movlb	2	; select bank2
  5624  0FBD  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5625  0FBE  0020               	movlb	0	; select bank0
  5626  0FBF  00AC               	movwf	___flge@ff2+3
  5627  0FC0  0022               	movlb	2	; select bank2
  5628  0FC1  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5629  0FC2  0020               	movlb	0	; select bank0
  5630  0FC3  00AB               	movwf	___flge@ff2+2
  5631  0FC4  0022               	movlb	2	; select bank2
  5632  0FC5  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5633  0FC6  0020               	movlb	0	; select bank0
  5634  0FC7  00AA               	movwf	___flge@ff2+1
  5635  0FC8  0022               	movlb	2	; select bank2
  5636  0FC9  085F               	movf	_BatteryVoltage^(0+256),w
  5637  0FCA  0020               	movlb	0	; select bank0
  5638  0FCB  00A9               	movwf	___flge@ff2
  5639  0FCC  319E  2600  318E   	fcall	___flge
  5640  0FCF  1803               	btfsc	3,0
  5641  0FD0  2FE7               	goto	l170
  5642  0FD1                     l7339:	
  5643                           
  5644                           ;main.c: 128: {
  5645                           ;main.c: 129: pwrLEDtoggle++;
  5646  0FD1  3001               	movlw	1
  5647  0FD2  0024               	movlb	4	; select bank4
  5648  0FD3  07A8               	addwf	_pwrLEDtoggle^(0+512),f
  5649  0FD4  3000               	movlw	0
  5650  0FD5  3DA9               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5651                           
  5652                           ;main.c: 130: if(pwrLEDtoggle > 1000)
  5653  0FD6  3003               	movlw	3
  5654  0FD7  0229               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5655  0FD8  30E9               	movlw	233
  5656  0FD9  1903               	skipnz
  5657  0FDA  0228               	subwf	_pwrLEDtoggle^(0+512),w
  5658  0FDB  1C03               	skipc
  5659  0FDC  2FE9               	goto	l7345
  5660                           
  5661                           ;main.c: 131: {
  5662                           ;main.c: 132: LATC ^= 0b00000010;
  5663  0FDD  3002               	movlw	2
  5664  0FDE  0020               	movlb	0	; select bank0
  5665  0FDF  00E5               	movwf	??_main
  5666  0FE0  0865               	movf	??_main,w
  5667  0FE1  0022               	movlb	2	; select bank2
  5668  0FE2  068E               	xorwf	14,f	;volatile
  5669                           
  5670                           ;main.c: 133: pwrLEDtoggle = 0;
  5671  0FE3  0024               	movlb	4	; select bank4
  5672  0FE4  01A8               	clrf	_pwrLEDtoggle^(0+512)
  5673  0FE5  01A9               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5674                           
  5675                           ;main.c: 134: }
  5676                           ;main.c: 135: }
  5677  0FE6  2FE9               	goto	l7345
  5678  0FE7                     l170:	
  5679                           
  5680                           ;main.c: 136: else
  5681                           ;main.c: 137: {
  5682                           ;main.c: 138: LATC |= 0b00000010;
  5683  0FE7  0022               	movlb	2	; select bank2
  5684  0FE8  148E               	bsf	14,1	;volatile
  5685  0FE9                     l7345:	
  5686                           
  5687                           ;main.c: 139: }
  5688                           ;main.c: 140: if(SinLEDtimer >= 100)
  5689  0FE9  3000               	movlw	0
  5690  0FEA  0022               	movlb	2	; select bank2
  5691  0FEB  0264               	subwf	(_SinLEDtimer+1)^(0+256),w
  5692  0FEC  3064               	movlw	100
  5693  0FED  1903               	skipnz
  5694  0FEE  0263               	subwf	_SinLEDtimer^(0+256),w
  5695  0FEF  1C03               	skipc
  5696  0FF0  2FF8               	goto	l7349
  5697                           
  5698                           ;main.c: 141: {
  5699                           ;main.c: 142: LATC &= ~0b00001000;
  5700  0FF1  30F7               	movlw	247
  5701  0FF2  0020               	movlb	0	; select bank0
  5702  0FF3  00E5               	movwf	??_main
  5703  0FF4  0865               	movf	??_main,w
  5704  0FF5  0022               	movlb	2	; select bank2
  5705  0FF6  058E               	andwf	14,f	;volatile
  5706                           
  5707                           ;main.c: 143: }
  5708  0FF7  2FFC               	goto	l7351
  5709  0FF8                     l7349:	
  5710                           
  5711                           ;main.c: 144: else
  5712                           ;main.c: 145: {
  5713                           ;main.c: 146: SinLEDtimer++;
  5714  0FF8  3001               	movlw	1
  5715  0FF9  07E3               	addwf	_SinLEDtimer^(0+256),f
  5716  0FFA  3000               	movlw	0
  5717  0FFB  3DE4               	addwfc	(_SinLEDtimer+1)^(0+256),f
  5718  0FFC                     l7351:	
  5719                           
  5720                           ;main.c: 147: }
  5721                           ;main.c: 148: PS_2_Update();
  5722  0FFC  3181  2117  318E   	fcall	_PS_2_Update
  5723  0FFF  2F84               	goto	l7333
  5724  1000                     __end_of_main:	
  5725                           
  5726                           	psect	text1
  5727  1E00                     __ptext1:	
  5728 ;; *************** function ___flge *****************
  5729 ;; Defined at:
  5730 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  ff1             4    5[BANK0 ] unsigned char 
  5733 ;;  ff2             4    9[BANK0 ] unsigned char 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5745 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;Total ram usage:       16 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    3
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_main
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function ___flge
  5761  1E00                     ___flge:	
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5765  1E00  0020               	movlb	0	; select bank0
  5766  1E01  1FA8               	btfss	___flge@ff1+3,7
  5767  1E02  2E2A               	goto	l5375
  5768  1E03  3000               	movlw	0
  5769  1E04  00AD               	movwf	??___flge
  5770  1E05  3000               	movlw	0
  5771  1E06  00AE               	movwf	??___flge+1
  5772  1E07  3000               	movlw	0
  5773  1E08  00AF               	movwf	??___flge+2
  5774  1E09  3080               	movlw	128
  5775  1E0A  00B0               	movwf	??___flge+3
  5776  1E0B  0925               	comf	___flge@ff1,w
  5777  1E0C  00B1               	movwf	??___flge+4
  5778  1E0D  0926               	comf	___flge@ff1+1,w
  5779  1E0E  00B2               	movwf	??___flge+5
  5780  1E0F  0927               	comf	___flge@ff1+2,w
  5781  1E10  00B3               	movwf	??___flge+6
  5782  1E11  0928               	comf	___flge@ff1+3,w
  5783  1E12  00B4               	movwf	??___flge+7
  5784  1E13  0AB1               	incf	??___flge+4,f
  5785  1E14  1903               	skipnz
  5786  1E15  0AB2               	incf	??___flge+5,f
  5787  1E16  1903               	skipnz
  5788  1E17  0AB3               	incf	??___flge+6,f
  5789  1E18  1903               	skipnz
  5790  1E19  0AB4               	incf	??___flge+7,f
  5791  1E1A  0831               	movf	??___flge+4,w
  5792  1E1B  07AD               	addwf	??___flge,f
  5793  1E1C  0832               	movf	??___flge+5,w
  5794  1E1D  3DAE               	addwfc	??___flge+1,f
  5795  1E1E  0833               	movf	??___flge+6,w
  5796  1E1F  3DAF               	addwfc	??___flge+2,f
  5797  1E20  0834               	movf	??___flge+7,w
  5798  1E21  3DB0               	addwfc	??___flge+3,f
  5799  1E22  0830               	movf	??___flge+3,w
  5800  1E23  00A8               	movwf	___flge@ff1+3
  5801  1E24  082F               	movf	??___flge+2,w
  5802  1E25  00A7               	movwf	___flge@ff1+2
  5803  1E26  082E               	movf	??___flge+1,w
  5804  1E27  00A6               	movwf	___flge@ff1+1
  5805  1E28  082D               	movf	??___flge,w
  5806  1E29  00A5               	movwf	___flge@ff1
  5807  1E2A                     l5375:	
  5808  1E2A  1FAC               	btfss	___flge@ff2+3,7
  5809  1E2B  2E53               	goto	l5379
  5810  1E2C  3000               	movlw	0
  5811  1E2D  00AD               	movwf	??___flge
  5812  1E2E  3000               	movlw	0
  5813  1E2F  00AE               	movwf	??___flge+1
  5814  1E30  3000               	movlw	0
  5815  1E31  00AF               	movwf	??___flge+2
  5816  1E32  3080               	movlw	128
  5817  1E33  00B0               	movwf	??___flge+3
  5818  1E34  0929               	comf	___flge@ff2,w
  5819  1E35  00B1               	movwf	??___flge+4
  5820  1E36  092A               	comf	___flge@ff2+1,w
  5821  1E37  00B2               	movwf	??___flge+5
  5822  1E38  092B               	comf	___flge@ff2+2,w
  5823  1E39  00B3               	movwf	??___flge+6
  5824  1E3A  092C               	comf	___flge@ff2+3,w
  5825  1E3B  00B4               	movwf	??___flge+7
  5826  1E3C  0AB1               	incf	??___flge+4,f
  5827  1E3D  1903               	skipnz
  5828  1E3E  0AB2               	incf	??___flge+5,f
  5829  1E3F  1903               	skipnz
  5830  1E40  0AB3               	incf	??___flge+6,f
  5831  1E41  1903               	skipnz
  5832  1E42  0AB4               	incf	??___flge+7,f
  5833  1E43  0831               	movf	??___flge+4,w
  5834  1E44  07AD               	addwf	??___flge,f
  5835  1E45  0832               	movf	??___flge+5,w
  5836  1E46  3DAE               	addwfc	??___flge+1,f
  5837  1E47  0833               	movf	??___flge+6,w
  5838  1E48  3DAF               	addwfc	??___flge+2,f
  5839  1E49  0834               	movf	??___flge+7,w
  5840  1E4A  3DB0               	addwfc	??___flge+3,f
  5841  1E4B  0830               	movf	??___flge+3,w
  5842  1E4C  00AC               	movwf	___flge@ff2+3
  5843  1E4D  082F               	movf	??___flge+2,w
  5844  1E4E  00AB               	movwf	___flge@ff2+2
  5845  1E4F  082E               	movf	??___flge+1,w
  5846  1E50  00AA               	movwf	___flge@ff2+1
  5847  1E51  082D               	movf	??___flge,w
  5848  1E52  00A9               	movwf	___flge@ff2
  5849  1E53                     l5379:	
  5850  1E53  3080               	movlw	128
  5851  1E54  06A8               	xorwf	___flge@ff1+3,f
  5852  1E55  3080               	movlw	128
  5853  1E56  06AC               	xorwf	___flge@ff2+3,f
  5854  1E57  082C               	movf	___flge@ff2+3,w
  5855  1E58  0228               	subwf	___flge@ff1+3,w
  5856  1E59  1D03               	skipz
  5857  1E5A  0008               	return
  5858  1E5B  082B               	movf	___flge@ff2+2,w
  5859  1E5C  0227               	subwf	___flge@ff1+2,w
  5860  1E5D  1D03               	skipz
  5861  1E5E  0008               	return
  5862  1E5F  082A               	movf	___flge@ff2+1,w
  5863  1E60  0226               	subwf	___flge@ff1+1,w
  5864  1E61  1D03               	skipz
  5865  1E62  0008               	return
  5866  1E63  0829               	movf	___flge@ff2,w
  5867  1E64  0225               	subwf	___flge@ff1,w
  5868  1E65  0008               	return
  5869  1E66                     __end_of___flge:	
  5870                           
  5871                           	psect	text2
  5872  1ED1                     __ptext2:	
  5873 ;; *************** function _ReadVoltage *****************
  5874 ;; Defined at:
  5875 ;;		line 27 in file "ADC.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  voltage         4    0[BANK1 ] unsigned char 
  5880 ;;  temp            2    4[BANK1 ] unsigned int 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  4   60[BANK0 ] unsigned int 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, pclath, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5890 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;Total ram usage:       11 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    5
  5897 ;; This function calls:
  5898 ;;		_DisableInternalADC
  5899 ;;		_InternalADC_Read
  5900 ;;		___fldiv
  5901 ;;		___flmul
  5902 ;;		___lwtofl
  5903 ;; This function is called by:
  5904 ;;		_main
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function _ReadVoltage
  5910  1ED1                     _ReadVoltage:	
  5911                           
  5912                           ;ADC.c: 29: unsigned int temp;
  5913                           ;ADC.c: 30: double voltage;
  5914                           ;ADC.c: 31: LATC &= ~0b00000001;
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5918  1ED1  30FE               	movlw	254
  5919  1ED2  0020               	movlb	0	; select bank0
  5920  1ED3  00E0               	movwf	??_ReadVoltage
  5921  1ED4  0860               	movf	??_ReadVoltage,w
  5922  1ED5  0022               	movlb	2	; select bank2
  5923  1ED6  058E               	andwf	14,f	;volatile
  5924                           
  5925                           ;ADC.c: 32: temp = InternalADC_Read(2);
  5926  1ED7  3002               	movlw	2
  5927  1ED8  319B  2389  319E   	fcall	_InternalADC_Read
  5928  1EDB  0020               	movlb	0	; select bank0
  5929  1EDC  0830               	movf	?_InternalADC_Read+1,w
  5930  1EDD  0021               	movlb	1	; select bank1
  5931  1EDE  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5932  1EDF  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5933  1EE0  0020               	movlb	0	; select bank0
  5934  1EE1  082F               	movf	?_InternalADC_Read,w
  5935  1EE2  0021               	movlb	1	; select bank1
  5936  1EE3  01A4               	clrf	ReadVoltage@temp^(0+128)
  5937  1EE4  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5938                           
  5939                           ;ADC.c: 33: DisableInternalADC();
  5940  1EE5  3198  207F  319E   	fcall	_DisableInternalADC
  5941                           
  5942                           ;ADC.c: 34: LATC |= 0b00000001;
  5943  1EE8  0022               	movlb	2	; select bank2
  5944  1EE9  140E               	bsf	14,0	;volatile
  5945                           
  5946                           ;ADC.c: 37: voltage = ((double)temp / 1000) * 5.7;
  5947  1EEA  3040               	movlw	64
  5948  1EEB  0020               	movlb	0	; select bank0
  5949  1EEC  00CB               	movwf	___flmul@f1+3
  5950  1EED  30B6               	movlw	182
  5951  1EEE  00CA               	movwf	___flmul@f1+2
  5952  1EEF  3066               	movlw	102
  5953  1EF0  00C9               	movwf	___flmul@f1+1
  5954  1EF1  3066               	movlw	102
  5955  1EF2  00C8               	movwf	___flmul@f1
  5956  1EF3  3044               	movlw	68
  5957  1EF4  00B7               	movwf	___fldiv@f2+3
  5958  1EF5  307A               	movlw	122
  5959  1EF6  00B6               	movwf	___fldiv@f2+2
  5960  1EF7  3000               	movlw	0
  5961  1EF8  00B5               	movwf	___fldiv@f2+1
  5962  1EF9  3000               	movlw	0
  5963  1EFA  00B4               	movwf	___fldiv@f2
  5964  1EFB  0021               	movlb	1	; select bank1
  5965  1EFC  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5966  1EFD  0020               	movlb	0	; select bank0
  5967  1EFE  01B0               	clrf	___lwtofl@c+1
  5968  1EFF  07B0               	addwf	___lwtofl@c+1,f
  5969  1F00  0021               	movlb	1	; select bank1
  5970  1F01  0824               	movf	ReadVoltage@temp^(0+128),w
  5971  1F02  0020               	movlb	0	; select bank0
  5972  1F03  01AF               	clrf	___lwtofl@c
  5973  1F04  07AF               	addwf	___lwtofl@c,f
  5974  1F05  3199  2194  319E   	fcall	___lwtofl
  5975  1F08  0020               	movlb	0	; select bank0
  5976  1F09  0832               	movf	?___lwtofl+3,w
  5977  1F0A  00BB               	movwf	___fldiv@f1+3
  5978  1F0B  0831               	movf	?___lwtofl+2,w
  5979  1F0C  00BA               	movwf	___fldiv@f1+2
  5980  1F0D  0830               	movf	?___lwtofl+1,w
  5981  1F0E  00B9               	movwf	___fldiv@f1+1
  5982  1F0F  082F               	movf	?___lwtofl,w
  5983  1F10  00B8               	movwf	___fldiv@f1
  5984  1F11  319F  273F  319E   	fcall	___fldiv
  5985  1F14  0020               	movlb	0	; select bank0
  5986  1F15  0837               	movf	?___fldiv+3,w
  5987  1F16  00CF               	movwf	___flmul@f2+3
  5988  1F17  0836               	movf	?___fldiv+2,w
  5989  1F18  00CE               	movwf	___flmul@f2+2
  5990  1F19  0835               	movf	?___fldiv+1,w
  5991  1F1A  00CD               	movwf	___flmul@f2+1
  5992  1F1B  0834               	movf	?___fldiv,w
  5993  1F1C  00CC               	movwf	___flmul@f2
  5994  1F1D  3190  205B         	fcall	___flmul
  5995  1F1F  0020               	movlb	0	; select bank0
  5996  1F20  084B               	movf	?___flmul+3,w
  5997  1F21  0021               	movlb	1	; select bank1
  5998  1F22  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5999  1F23  0020               	movlb	0	; select bank0
  6000  1F24  084A               	movf	?___flmul+2,w
  6001  1F25  0021               	movlb	1	; select bank1
  6002  1F26  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  6003  1F27  0020               	movlb	0	; select bank0
  6004  1F28  0849               	movf	?___flmul+1,w
  6005  1F29  0021               	movlb	1	; select bank1
  6006  1F2A  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  6007  1F2B  0020               	movlb	0	; select bank0
  6008  1F2C  0848               	movf	?___flmul,w
  6009  1F2D  0021               	movlb	1	; select bank1
  6010  1F2E  00A0               	movwf	ReadVoltage@voltage^(0+128)
  6011                           
  6012                           ;ADC.c: 38: return voltage;
  6013  1F2F  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  6014  1F30  0020               	movlb	0	; select bank0
  6015  1F31  00DF               	movwf	?_ReadVoltage+3
  6016  1F32  0021               	movlb	1	; select bank1
  6017  1F33  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  6018  1F34  0020               	movlb	0	; select bank0
  6019  1F35  00DE               	movwf	?_ReadVoltage+2
  6020  1F36  0021               	movlb	1	; select bank1
  6021  1F37  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  6022  1F38  0020               	movlb	0	; select bank0
  6023  1F39  00DD               	movwf	?_ReadVoltage+1
  6024  1F3A  0021               	movlb	1	; select bank1
  6025  1F3B  0820               	movf	ReadVoltage@voltage^(0+128),w
  6026  1F3C  0020               	movlb	0	; select bank0
  6027  1F3D  00DC               	movwf	?_ReadVoltage
  6028  1F3E  0008               	return
  6029  1F3F                     __end_of_ReadVoltage:	
  6030                           
  6031                           	psect	text3
  6032  1994                     __ptext3:	
  6033 ;; *************** function ___lwtofl *****************
  6034 ;; Defined at:
  6035 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  c               2   15[BANK0 ] unsigned int 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;		None
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  4   15[BANK0 ] unsigned int 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0, pclath, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;Total ram usage:        5 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    4
  6056 ;; This function calls:
  6057 ;;		___flpack
  6058 ;; This function is called by:
  6059 ;;		_ReadVoltage
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           
  6064                           ;psect for function ___lwtofl
  6065  1994                     ___lwtofl:	
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  6069  1994  0020               	movlb	0	; select bank0
  6070  1995  082F               	movf	___lwtofl@c,w
  6071  1996  00A5               	movwf	___flpack@arg
  6072  1997  0830               	movf	___lwtofl@c+1,w
  6073  1998  00A6               	movwf	___flpack@arg+1
  6074  1999  01A7               	clrf	___flpack@arg+2
  6075  199A  01A8               	clrf	___flpack@arg+3
  6076  199B  3096               	movlw	150
  6077  199C  00B3               	movwf	??___lwtofl
  6078  199D  0833               	movf	??___lwtofl,w
  6079  199E  00A9               	movwf	___flpack@exp
  6080  199F  01AA               	clrf	___flpack@sign
  6081  19A0  319E  2666         	fcall	___flpack
  6082  19A2  0020               	movlb	0	; select bank0
  6083  19A3  0828               	movf	?___flpack+3,w
  6084  19A4  00B2               	movwf	?___lwtofl+3
  6085  19A5  0827               	movf	?___flpack+2,w
  6086  19A6  00B1               	movwf	?___lwtofl+2
  6087  19A7  0826               	movf	?___flpack+1,w
  6088  19A8  00B0               	movwf	?___lwtofl+1
  6089  19A9  0825               	movf	?___flpack,w
  6090  19AA  00AF               	movwf	?___lwtofl
  6091  19AB  0008               	return
  6092  19AC                     __end_of___lwtofl:	
  6093                           
  6094                           	psect	text4
  6095  105B                     __ptext4:	
  6096 ;; *************** function ___flmul *****************
  6097 ;; Defined at:
  6098 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  f1              4   40[BANK0 ] unsigned int 
  6101 ;;  f2              4   44[BANK0 ] unsigned int 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  6104 ;;  sign            1   59[BANK0 ] unsigned char 
  6105 ;;  cntr            1   58[BANK0 ] unsigned char 
  6106 ;;  exp             1   53[BANK0 ] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  4   40[BANK0 ] unsigned char 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0, pclath, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6116 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;Total ram usage:       20 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    4
  6123 ;; This function calls:
  6124 ;;		___flpack
  6125 ;; This function is called by:
  6126 ;;		_ReadVoltage
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function ___flmul
  6132  105B                     ___flmul:	
  6133                           
  6134                           ;incstack = 0
  6135                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  6136  105B  0020               	movlb	0	; select bank0
  6137  105C  0848               	movf	___flmul@f1,w
  6138  105D  00D0               	movwf	??___flmul
  6139  105E  0849               	movf	___flmul@f1+1,w
  6140  105F  00D1               	movwf	??___flmul+1
  6141  1060  084A               	movf	___flmul@f1+2,w
  6142  1061  00D2               	movwf	??___flmul+2
  6143  1062  084B               	movf	___flmul@f1+3,w
  6144  1063  00D3               	movwf	??___flmul+3
  6145  1064  1003               	clrc
  6146  1065  0D52               	rlf	??___flmul+2,w
  6147  1066  0D53               	rlf	??___flmul+3,w
  6148  1067  00D4               	movwf	??___flmul+4
  6149  1068  0854               	movf	??___flmul+4,w
  6150  1069  00D5               	movwf	___flmul@exp
  6151  106A  08D5               	movf	___flmul@exp,f
  6152  106B  1D03               	skipz
  6153  106C  2876               	goto	l7021
  6154  106D  3000               	movlw	0
  6155  106E  00CB               	movwf	?___flmul+3
  6156  106F  3000               	movlw	0
  6157  1070  00CA               	movwf	?___flmul+2
  6158  1071  3000               	movlw	0
  6159  1072  00C9               	movwf	?___flmul+1
  6160  1073  3000               	movlw	0
  6161  1074  00C8               	movwf	?___flmul
  6162  1075  0008               	return
  6163  1076                     l7021:	
  6164  1076  084C               	movf	___flmul@f2,w
  6165  1077  00D0               	movwf	??___flmul
  6166  1078  084D               	movf	___flmul@f2+1,w
  6167  1079  00D1               	movwf	??___flmul+1
  6168  107A  084E               	movf	___flmul@f2+2,w
  6169  107B  00D2               	movwf	??___flmul+2
  6170  107C  084F               	movf	___flmul@f2+3,w
  6171  107D  00D3               	movwf	??___flmul+3
  6172  107E  1003               	clrc
  6173  107F  0D52               	rlf	??___flmul+2,w
  6174  1080  0D53               	rlf	??___flmul+3,w
  6175  1081  00D4               	movwf	??___flmul+4
  6176  1082  0854               	movf	??___flmul+4,w
  6177  1083  00DB               	movwf	___flmul@sign
  6178  1084  08DB               	movf	___flmul@sign,f
  6179  1085  1D03               	skipz
  6180  1086  2890               	goto	l7027
  6181  1087  3000               	movlw	0
  6182  1088  00CB               	movwf	?___flmul+3
  6183  1089  3000               	movlw	0
  6184  108A  00CA               	movwf	?___flmul+2
  6185  108B  3000               	movlw	0
  6186  108C  00C9               	movwf	?___flmul+1
  6187  108D  3000               	movlw	0
  6188  108E  00C8               	movwf	?___flmul
  6189  108F  0008               	return
  6190  1090                     l7027:	
  6191  1090  085B               	movf	___flmul@sign,w
  6192  1091  3E7B               	addlw	123
  6193  1092  00D0               	movwf	??___flmul
  6194  1093  0850               	movf	??___flmul,w
  6195  1094  07D5               	addwf	___flmul@exp,f
  6196  1095  0848               	movf	___flmul@f1,w
  6197  1096  00D0               	movwf	??___flmul
  6198  1097  0849               	movf	___flmul@f1+1,w
  6199  1098  00D1               	movwf	??___flmul+1
  6200  1099  084A               	movf	___flmul@f1+2,w
  6201  109A  00D2               	movwf	??___flmul+2
  6202  109B  084B               	movf	___flmul@f1+3,w
  6203  109C  00D3               	movwf	??___flmul+3
  6204  109D  3018               	movlw	24
  6205  109E                     u9635:	
  6206  109E  36D3               	lsrf	??___flmul+3,f
  6207  109F  0CD2               	rrf	??___flmul+2,f
  6208  10A0  0CD1               	rrf	??___flmul+1,f
  6209  10A1  0CD0               	rrf	??___flmul,f
  6210  10A2  0B89               	decfsz	9,f
  6211  10A3  289E               	goto	u9635
  6212  10A4  0850               	movf	??___flmul,w
  6213  10A5  00D4               	movwf	??___flmul+4
  6214  10A6  0854               	movf	??___flmul+4,w
  6215  10A7  00DB               	movwf	___flmul@sign
  6216  10A8  084C               	movf	___flmul@f2,w
  6217  10A9  00D0               	movwf	??___flmul
  6218  10AA  084D               	movf	___flmul@f2+1,w
  6219  10AB  00D1               	movwf	??___flmul+1
  6220  10AC  084E               	movf	___flmul@f2+2,w
  6221  10AD  00D2               	movwf	??___flmul+2
  6222  10AE  084F               	movf	___flmul@f2+3,w
  6223  10AF  00D3               	movwf	??___flmul+3
  6224  10B0  3018               	movlw	24
  6225  10B1                     u9645:	
  6226  10B1  36D3               	lsrf	??___flmul+3,f
  6227  10B2  0CD2               	rrf	??___flmul+2,f
  6228  10B3  0CD1               	rrf	??___flmul+1,f
  6229  10B4  0CD0               	rrf	??___flmul,f
  6230  10B5  0B89               	decfsz	9,f
  6231  10B6  28B1               	goto	u9645
  6232  10B7  0850               	movf	??___flmul,w
  6233  10B8  00D4               	movwf	??___flmul+4
  6234  10B9  0854               	movf	??___flmul+4,w
  6235  10BA  06DB               	xorwf	___flmul@sign,f
  6236  10BB  3080               	movlw	128
  6237  10BC  00D0               	movwf	??___flmul
  6238  10BD  0850               	movf	??___flmul,w
  6239  10BE  05DB               	andwf	___flmul@sign,f
  6240  10BF  17CA               	bsf	___flmul@f1+2,7
  6241  10C0  17CE               	bsf	___flmul@f2+2,7
  6242  10C1  30FF               	movlw	255
  6243  10C2  05CC               	andwf	___flmul@f2,f
  6244  10C3  30FF               	movlw	255
  6245  10C4  05CD               	andwf	___flmul@f2+1,f
  6246  10C5  30FF               	movlw	255
  6247  10C6  05CE               	andwf	___flmul@f2+2,f
  6248  10C7  3000               	movlw	0
  6249  10C8  05CF               	andwf	___flmul@f2+3,f
  6250  10C9  3000               	movlw	0
  6251  10CA  00D9               	movwf	___flmul@f3_as_product+3
  6252  10CB  3000               	movlw	0
  6253  10CC  00D8               	movwf	___flmul@f3_as_product+2
  6254  10CD  3000               	movlw	0
  6255  10CE  00D7               	movwf	___flmul@f3_as_product+1
  6256  10CF  3000               	movlw	0
  6257  10D0  00D6               	movwf	___flmul@f3_as_product
  6258  10D1  3007               	movlw	7
  6259  10D2  00D0               	movwf	??___flmul
  6260  10D3  0850               	movf	??___flmul,w
  6261  10D4  00DA               	movwf	___flmul@cntr
  6262  10D5                     l7039:	
  6263  10D5  1C48               	btfss	___flmul@f1,0
  6264  10D6  28DF               	goto	l7043
  6265  10D7  084C               	movf	___flmul@f2,w
  6266  10D8  07D6               	addwf	___flmul@f3_as_product,f
  6267  10D9  084D               	movf	___flmul@f2+1,w
  6268  10DA  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6269  10DB  084E               	movf	___flmul@f2+2,w
  6270  10DC  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6271  10DD  084F               	movf	___flmul@f2+3,w
  6272  10DE  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6273  10DF                     l7043:	
  6274  10DF  3001               	movlw	1
  6275  10E0                     u9665:	
  6276  10E0  36CB               	lsrf	___flmul@f1+3,f
  6277  10E1  0CCA               	rrf	___flmul@f1+2,f
  6278  10E2  0CC9               	rrf	___flmul@f1+1,f
  6279  10E3  0CC8               	rrf	___flmul@f1,f
  6280  10E4  0B89               	decfsz	9,f
  6281  10E5  28E0               	goto	u9665
  6282  10E6  3001               	movlw	1
  6283  10E7                     u9675:	
  6284  10E7  35CC               	lslf	___flmul@f2,f
  6285  10E8  0DCD               	rlf	___flmul@f2+1,f
  6286  10E9  0DCE               	rlf	___flmul@f2+2,f
  6287  10EA  0DCF               	rlf	___flmul@f2+3,f
  6288  10EB  0B89               	decfsz	9,f
  6289  10EC  28E7               	goto	u9675
  6290  10ED  3001               	movlw	1
  6291  10EE  02DA               	subwf	___flmul@cntr,f
  6292  10EF  1D03               	btfss	3,2
  6293  10F0  28D5               	goto	l7039
  6294  10F1  3011               	movlw	17
  6295  10F2  00D0               	movwf	??___flmul
  6296  10F3  0850               	movf	??___flmul,w
  6297  10F4  00DA               	movwf	___flmul@cntr
  6298  10F5                     l7051:	
  6299  10F5  1C48               	btfss	___flmul@f1,0
  6300  10F6  28FF               	goto	l7055
  6301  10F7  084C               	movf	___flmul@f2,w
  6302  10F8  07D6               	addwf	___flmul@f3_as_product,f
  6303  10F9  084D               	movf	___flmul@f2+1,w
  6304  10FA  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6305  10FB  084E               	movf	___flmul@f2+2,w
  6306  10FC  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6307  10FD  084F               	movf	___flmul@f2+3,w
  6308  10FE  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6309  10FF                     l7055:	
  6310  10FF  3001               	movlw	1
  6311  1100                     u9705:	
  6312  1100  36CB               	lsrf	___flmul@f1+3,f
  6313  1101  0CCA               	rrf	___flmul@f1+2,f
  6314  1102  0CC9               	rrf	___flmul@f1+1,f
  6315  1103  0CC8               	rrf	___flmul@f1,f
  6316  1104  0B89               	decfsz	9,f
  6317  1105  2900               	goto	u9705
  6318  1106  3001               	movlw	1
  6319  1107                     u9715:	
  6320  1107  36D9               	lsrf	___flmul@f3_as_product+3,f
  6321  1108  0CD8               	rrf	___flmul@f3_as_product+2,f
  6322  1109  0CD7               	rrf	___flmul@f3_as_product+1,f
  6323  110A  0CD6               	rrf	___flmul@f3_as_product,f
  6324  110B  0B89               	decfsz	9,f
  6325  110C  2907               	goto	u9715
  6326  110D  3001               	movlw	1
  6327  110E  02DA               	subwf	___flmul@cntr,f
  6328  110F  1D03               	btfss	3,2
  6329  1110  28F5               	goto	l7051
  6330  1111  0859               	movf	___flmul@f3_as_product+3,w
  6331  1112  00A8               	movwf	___flpack@arg+3
  6332  1113  0858               	movf	___flmul@f3_as_product+2,w
  6333  1114  00A7               	movwf	___flpack@arg+2
  6334  1115  0857               	movf	___flmul@f3_as_product+1,w
  6335  1116  00A6               	movwf	___flpack@arg+1
  6336  1117  0856               	movf	___flmul@f3_as_product,w
  6337  1118  00A5               	movwf	___flpack@arg
  6338  1119  0855               	movf	___flmul@exp,w
  6339  111A  00D0               	movwf	??___flmul
  6340  111B  0850               	movf	??___flmul,w
  6341  111C  00A9               	movwf	___flpack@exp
  6342  111D  085B               	movf	___flmul@sign,w
  6343  111E  00D1               	movwf	??___flmul+1
  6344  111F  0851               	movf	??___flmul+1,w
  6345  1120  00AA               	movwf	___flpack@sign
  6346  1121  319E  2666         	fcall	___flpack
  6347  1123  0020               	movlb	0	; select bank0
  6348  1124  0828               	movf	?___flpack+3,w
  6349  1125  00CB               	movwf	?___flmul+3
  6350  1126  0827               	movf	?___flpack+2,w
  6351  1127  00CA               	movwf	?___flmul+2
  6352  1128  0826               	movf	?___flpack+1,w
  6353  1129  00C9               	movwf	?___flmul+1
  6354  112A  0825               	movf	?___flpack,w
  6355  112B  00C8               	movwf	?___flmul
  6356  112C  0008               	return
  6357  112D                     __end_of___flmul:	
  6358                           
  6359                           	psect	text5
  6360  1F3F                     __ptext5:	
  6361 ;; *************** function ___fldiv *****************
  6362 ;; Defined at:
  6363 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  f2              4   20[BANK0 ] unsigned char 
  6366 ;;  f1              4   24[BANK0 ] unsigned char 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  f3              4   33[BANK0 ] unsigned char 
  6369 ;;  sign            1   39[BANK0 ] unsigned char 
  6370 ;;  exp             1   38[BANK0 ] unsigned char 
  6371 ;;  cntr            1   37[BANK0 ] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  4   20[BANK0 ] unsigned char 
  6374 ;; Registers used:
  6375 ;;		wreg, status,2, status,0, pclath, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6381 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;Total ram usage:       20 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    4
  6388 ;; This function calls:
  6389 ;;		___flpack
  6390 ;; This function is called by:
  6391 ;;		_ReadVoltage
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function ___fldiv
  6397  1F3F                     ___fldiv:	
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6401  1F3F  0020               	movlb	0	; select bank0
  6402  1F40  0838               	movf	___fldiv@f1,w
  6403  1F41  00BC               	movwf	??___fldiv
  6404  1F42  0839               	movf	___fldiv@f1+1,w
  6405  1F43  00BD               	movwf	??___fldiv+1
  6406  1F44  083A               	movf	___fldiv@f1+2,w
  6407  1F45  00BE               	movwf	??___fldiv+2
  6408  1F46  083B               	movf	___fldiv@f1+3,w
  6409  1F47  00BF               	movwf	??___fldiv+3
  6410  1F48  1003               	clrc
  6411  1F49  0D3E               	rlf	??___fldiv+2,w
  6412  1F4A  0D3F               	rlf	??___fldiv+3,w
  6413  1F4B  00C0               	movwf	??___fldiv+4
  6414  1F4C  0840               	movf	??___fldiv+4,w
  6415  1F4D  00C6               	movwf	___fldiv@exp
  6416  1F4E  08C6               	movf	___fldiv@exp,f
  6417  1F4F  1D03               	skipz
  6418  1F50  2F5A               	goto	l6983
  6419  1F51  3000               	movlw	0
  6420  1F52  00B7               	movwf	?___fldiv+3
  6421  1F53  3000               	movlw	0
  6422  1F54  00B6               	movwf	?___fldiv+2
  6423  1F55  3000               	movlw	0
  6424  1F56  00B5               	movwf	?___fldiv+1
  6425  1F57  3000               	movlw	0
  6426  1F58  00B4               	movwf	?___fldiv
  6427  1F59  0008               	return
  6428  1F5A                     l6983:	
  6429  1F5A  0834               	movf	___fldiv@f2,w
  6430  1F5B  00BC               	movwf	??___fldiv
  6431  1F5C  0835               	movf	___fldiv@f2+1,w
  6432  1F5D  00BD               	movwf	??___fldiv+1
  6433  1F5E  0836               	movf	___fldiv@f2+2,w
  6434  1F5F  00BE               	movwf	??___fldiv+2
  6435  1F60  0837               	movf	___fldiv@f2+3,w
  6436  1F61  00BF               	movwf	??___fldiv+3
  6437  1F62  1003               	clrc
  6438  1F63  0D3E               	rlf	??___fldiv+2,w
  6439  1F64  0D3F               	rlf	??___fldiv+3,w
  6440  1F65  00C0               	movwf	??___fldiv+4
  6441  1F66  0840               	movf	??___fldiv+4,w
  6442  1F67  00C7               	movwf	___fldiv@sign
  6443  1F68  08C7               	movf	___fldiv@sign,f
  6444  1F69  1D03               	skipz
  6445  1F6A  2F74               	goto	l6989
  6446  1F6B  3000               	movlw	0
  6447  1F6C  00B7               	movwf	?___fldiv+3
  6448  1F6D  3000               	movlw	0
  6449  1F6E  00B6               	movwf	?___fldiv+2
  6450  1F6F  3000               	movlw	0
  6451  1F70  00B5               	movwf	?___fldiv+1
  6452  1F71  3000               	movlw	0
  6453  1F72  00B4               	movwf	?___fldiv
  6454  1F73  0008               	return
  6455  1F74                     l6989:	
  6456  1F74  3089               	movlw	137
  6457  1F75  0747               	addwf	___fldiv@sign,w
  6458  1F76  00BC               	movwf	??___fldiv
  6459  1F77  083C               	movf	??___fldiv,w
  6460  1F78  02C6               	subwf	___fldiv@exp,f
  6461  1F79  0838               	movf	___fldiv@f1,w
  6462  1F7A  00BC               	movwf	??___fldiv
  6463  1F7B  0839               	movf	___fldiv@f1+1,w
  6464  1F7C  00BD               	movwf	??___fldiv+1
  6465  1F7D  083A               	movf	___fldiv@f1+2,w
  6466  1F7E  00BE               	movwf	??___fldiv+2
  6467  1F7F  083B               	movf	___fldiv@f1+3,w
  6468  1F80  00BF               	movwf	??___fldiv+3
  6469  1F81  3018               	movlw	24
  6470  1F82                     u9555:	
  6471  1F82  36BF               	lsrf	??___fldiv+3,f
  6472  1F83  0CBE               	rrf	??___fldiv+2,f
  6473  1F84  0CBD               	rrf	??___fldiv+1,f
  6474  1F85  0CBC               	rrf	??___fldiv,f
  6475  1F86  0B89               	decfsz	9,f
  6476  1F87  2F82               	goto	u9555
  6477  1F88  083C               	movf	??___fldiv,w
  6478  1F89  00C0               	movwf	??___fldiv+4
  6479  1F8A  0840               	movf	??___fldiv+4,w
  6480  1F8B  00C7               	movwf	___fldiv@sign
  6481  1F8C  0834               	movf	___fldiv@f2,w
  6482  1F8D  00BC               	movwf	??___fldiv
  6483  1F8E  0835               	movf	___fldiv@f2+1,w
  6484  1F8F  00BD               	movwf	??___fldiv+1
  6485  1F90  0836               	movf	___fldiv@f2+2,w
  6486  1F91  00BE               	movwf	??___fldiv+2
  6487  1F92  0837               	movf	___fldiv@f2+3,w
  6488  1F93  00BF               	movwf	??___fldiv+3
  6489  1F94  3018               	movlw	24
  6490  1F95                     u9565:	
  6491  1F95  36BF               	lsrf	??___fldiv+3,f
  6492  1F96  0CBE               	rrf	??___fldiv+2,f
  6493  1F97  0CBD               	rrf	??___fldiv+1,f
  6494  1F98  0CBC               	rrf	??___fldiv,f
  6495  1F99  0B89               	decfsz	9,f
  6496  1F9A  2F95               	goto	u9565
  6497  1F9B  083C               	movf	??___fldiv,w
  6498  1F9C  00C0               	movwf	??___fldiv+4
  6499  1F9D  0840               	movf	??___fldiv+4,w
  6500  1F9E  06C7               	xorwf	___fldiv@sign,f
  6501  1F9F  3080               	movlw	128
  6502  1FA0  00BC               	movwf	??___fldiv
  6503  1FA1  083C               	movf	??___fldiv,w
  6504  1FA2  05C7               	andwf	___fldiv@sign,f
  6505  1FA3  17BA               	bsf	___fldiv@f1+2,7
  6506  1FA4  30FF               	movlw	255
  6507  1FA5  05B8               	andwf	___fldiv@f1,f
  6508  1FA6  30FF               	movlw	255
  6509  1FA7  05B9               	andwf	___fldiv@f1+1,f
  6510  1FA8  30FF               	movlw	255
  6511  1FA9  05BA               	andwf	___fldiv@f1+2,f
  6512  1FAA  3000               	movlw	0
  6513  1FAB  05BB               	andwf	___fldiv@f1+3,f
  6514  1FAC  17B6               	bsf	___fldiv@f2+2,7
  6515  1FAD  30FF               	movlw	255
  6516  1FAE  05B4               	andwf	___fldiv@f2,f
  6517  1FAF  30FF               	movlw	255
  6518  1FB0  05B5               	andwf	___fldiv@f2+1,f
  6519  1FB1  30FF               	movlw	255
  6520  1FB2  05B6               	andwf	___fldiv@f2+2,f
  6521  1FB3  3000               	movlw	0
  6522  1FB4  05B7               	andwf	___fldiv@f2+3,f
  6523  1FB5  3020               	movlw	32
  6524  1FB6  00BC               	movwf	??___fldiv
  6525  1FB7  083C               	movf	??___fldiv,w
  6526  1FB8  00C5               	movwf	___fldiv@cntr
  6527  1FB9                     l7001:	
  6528  1FB9  3001               	movlw	1
  6529  1FBA                     u9575:	
  6530  1FBA  35C1               	lslf	___fldiv@f3,f
  6531  1FBB  0DC2               	rlf	___fldiv@f3+1,f
  6532  1FBC  0DC3               	rlf	___fldiv@f3+2,f
  6533  1FBD  0DC4               	rlf	___fldiv@f3+3,f
  6534  1FBE  0B89               	decfsz	9,f
  6535  1FBF  2FBA               	goto	u9575
  6536  1FC0  0837               	movf	___fldiv@f2+3,w
  6537  1FC1  023B               	subwf	___fldiv@f1+3,w
  6538  1FC2  1D03               	skipz
  6539  1FC3  2FCE               	goto	u9585
  6540  1FC4  0836               	movf	___fldiv@f2+2,w
  6541  1FC5  023A               	subwf	___fldiv@f1+2,w
  6542  1FC6  1D03               	skipz
  6543  1FC7  2FCE               	goto	u9585
  6544  1FC8  0835               	movf	___fldiv@f2+1,w
  6545  1FC9  0239               	subwf	___fldiv@f1+1,w
  6546  1FCA  1D03               	skipz
  6547  1FCB  2FCE               	goto	u9585
  6548  1FCC  0834               	movf	___fldiv@f2,w
  6549  1FCD  0238               	subwf	___fldiv@f1,w
  6550  1FCE                     u9585:	
  6551  1FCE  1C03               	skipc
  6552  1FCF  2FD9               	goto	l7007
  6553  1FD0  0834               	movf	___fldiv@f2,w
  6554  1FD1  02B8               	subwf	___fldiv@f1,f
  6555  1FD2  0835               	movf	___fldiv@f2+1,w
  6556  1FD3  3BB9               	subwfb	___fldiv@f1+1,f
  6557  1FD4  0836               	movf	___fldiv@f2+2,w
  6558  1FD5  3BBA               	subwfb	___fldiv@f1+2,f
  6559  1FD6  0837               	movf	___fldiv@f2+3,w
  6560  1FD7  3BBB               	subwfb	___fldiv@f1+3,f
  6561  1FD8  1441               	bsf	___fldiv@f3,0
  6562  1FD9                     l7007:	
  6563  1FD9  3001               	movlw	1
  6564  1FDA                     u9595:	
  6565  1FDA  35B8               	lslf	___fldiv@f1,f
  6566  1FDB  0DB9               	rlf	___fldiv@f1+1,f
  6567  1FDC  0DBA               	rlf	___fldiv@f1+2,f
  6568  1FDD  0DBB               	rlf	___fldiv@f1+3,f
  6569  1FDE  0B89               	decfsz	9,f
  6570  1FDF  2FDA               	goto	u9595
  6571  1FE0  3001               	movlw	1
  6572  1FE1  02C5               	subwf	___fldiv@cntr,f
  6573  1FE2  1D03               	btfss	3,2
  6574  1FE3  2FB9               	goto	l7001
  6575  1FE4  0844               	movf	___fldiv@f3+3,w
  6576  1FE5  00A8               	movwf	___flpack@arg+3
  6577  1FE6  0843               	movf	___fldiv@f3+2,w
  6578  1FE7  00A7               	movwf	___flpack@arg+2
  6579  1FE8  0842               	movf	___fldiv@f3+1,w
  6580  1FE9  00A6               	movwf	___flpack@arg+1
  6581  1FEA  0841               	movf	___fldiv@f3,w
  6582  1FEB  00A5               	movwf	___flpack@arg
  6583  1FEC  0846               	movf	___fldiv@exp,w
  6584  1FED  00BC               	movwf	??___fldiv
  6585  1FEE  083C               	movf	??___fldiv,w
  6586  1FEF  00A9               	movwf	___flpack@exp
  6587  1FF0  0847               	movf	___fldiv@sign,w
  6588  1FF1  00BD               	movwf	??___fldiv+1
  6589  1FF2  083D               	movf	??___fldiv+1,w
  6590  1FF3  00AA               	movwf	___flpack@sign
  6591  1FF4  319E  2666         	fcall	___flpack
  6592  1FF6  0020               	movlb	0	; select bank0
  6593  1FF7  0828               	movf	?___flpack+3,w
  6594  1FF8  00B7               	movwf	?___fldiv+3
  6595  1FF9  0827               	movf	?___flpack+2,w
  6596  1FFA  00B6               	movwf	?___fldiv+2
  6597  1FFB  0826               	movf	?___flpack+1,w
  6598  1FFC  00B5               	movwf	?___fldiv+1
  6599  1FFD  0825               	movf	?___flpack,w
  6600  1FFE  00B4               	movwf	?___fldiv
  6601  1FFF  0008               	return
  6602  2000                     __end_of___fldiv:	
  6603                           
  6604                           	psect	text6
  6605  1E66                     __ptext6:	
  6606 ;; *************** function ___flpack *****************
  6607 ;; Defined at:
  6608 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  arg             4    5[BANK0 ] unsigned long 
  6611 ;;  exp             1    9[BANK0 ] unsigned char 
  6612 ;;  sign            1   10[BANK0 ] unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  4    5[BANK0 ] unsigned char 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6624 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;Total ram usage:       10 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    3
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		___fldiv
  6635 ;;		___flmul
  6636 ;;		___lwtofl
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           
  6641                           ;psect for function ___flpack
  6642  1E66                     ___flpack:	
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6646  1E66  0020               	movlb	0	; select bank0
  6647  1E67  0829               	movf	___flpack@exp,w
  6648  1E68  1903               	btfsc	3,2
  6649  1E69  2E70               	goto	l6429
  6650  1E6A  0828               	movf	___flpack@arg+3,w
  6651  1E6B  0427               	iorwf	___flpack@arg+2,w
  6652  1E6C  0426               	iorwf	___flpack@arg+1,w
  6653  1E6D  0425               	iorwf	___flpack@arg,w
  6654  1E6E  1D03               	skipz
  6655  1E6F  2E84               	goto	l6435
  6656  1E70                     l6429:	
  6657  1E70  3000               	movlw	0
  6658  1E71  00A8               	movwf	?___flpack+3
  6659  1E72  3000               	movlw	0
  6660  1E73  00A7               	movwf	?___flpack+2
  6661  1E74  3000               	movlw	0
  6662  1E75  00A6               	movwf	?___flpack+1
  6663  1E76  3000               	movlw	0
  6664  1E77  00A5               	movwf	?___flpack
  6665  1E78  0008               	return
  6666  1E79                     l6433:	
  6667  1E79  3001               	movlw	1
  6668  1E7A  00AB               	movwf	??___flpack
  6669  1E7B  082B               	movf	??___flpack,w
  6670  1E7C  07A9               	addwf	___flpack@exp,f
  6671  1E7D  3001               	movlw	1
  6672  1E7E                     u8255:	
  6673  1E7E  36A8               	lsrf	___flpack@arg+3,f
  6674  1E7F  0CA7               	rrf	___flpack@arg+2,f
  6675  1E80  0CA6               	rrf	___flpack@arg+1,f
  6676  1E81  0CA5               	rrf	___flpack@arg,f
  6677  1E82  0B89               	decfsz	9,f
  6678  1E83  2E7E               	goto	u8255
  6679  1E84                     l6435:	
  6680  1E84  30FE               	movlw	254
  6681  1E85  0528               	andwf	___flpack@arg+3,w
  6682  1E86  1903               	btfsc	3,2
  6683  1E87  2E9C               	goto	l1246
  6684  1E88  2E79               	goto	l6433
  6685  1E89                     l6437:	
  6686  1E89  3001               	movlw	1
  6687  1E8A  00AB               	movwf	??___flpack
  6688  1E8B  082B               	movf	??___flpack,w
  6689  1E8C  07A9               	addwf	___flpack@exp,f
  6690  1E8D  3001               	movlw	1
  6691  1E8E  07A5               	addwf	___flpack@arg,f
  6692  1E8F  3000               	movlw	0
  6693  1E90  3DA6               	addwfc	___flpack@arg+1,f
  6694  1E91  3000               	movlw	0
  6695  1E92  3DA7               	addwfc	___flpack@arg+2,f
  6696  1E93  3000               	movlw	0
  6697  1E94  3DA8               	addwfc	___flpack@arg+3,f
  6698  1E95  3001               	movlw	1
  6699  1E96                     u8275:	
  6700  1E96  36A8               	lsrf	___flpack@arg+3,f
  6701  1E97  0CA7               	rrf	___flpack@arg+2,f
  6702  1E98  0CA6               	rrf	___flpack@arg+1,f
  6703  1E99  0CA5               	rrf	___flpack@arg,f
  6704  1E9A  0B89               	decfsz	9,f
  6705  1E9B  2E96               	goto	u8275
  6706  1E9C                     l1246:	
  6707  1E9C  30FF               	movlw	255
  6708  1E9D  0528               	andwf	___flpack@arg+3,w
  6709  1E9E  1903               	btfsc	3,2
  6710  1E9F  2EAA               	goto	l6445
  6711  1EA0  2E89               	goto	l6437
  6712  1EA1                     l6443:	
  6713  1EA1  3001               	movlw	1
  6714  1EA2  02A9               	subwf	___flpack@exp,f
  6715  1EA3  3001               	movlw	1
  6716  1EA4                     u8295:	
  6717  1EA4  35A5               	lslf	___flpack@arg,f
  6718  1EA5  0DA6               	rlf	___flpack@arg+1,f
  6719  1EA6  0DA7               	rlf	___flpack@arg+2,f
  6720  1EA7  0DA8               	rlf	___flpack@arg+3,f
  6721  1EA8  0B89               	decfsz	9,f
  6722  1EA9  2EA4               	goto	u8295
  6723  1EAA                     l6445:	
  6724  1EAA  1FA7               	btfss	___flpack@arg+2,7
  6725  1EAB  2EA1               	goto	l6443
  6726  1EAC  1829               	btfsc	___flpack@exp,0
  6727  1EAD  2EB6               	goto	l1252
  6728  1EAE  30FF               	movlw	255
  6729  1EAF  05A5               	andwf	___flpack@arg,f
  6730  1EB0  30FF               	movlw	255
  6731  1EB1  05A6               	andwf	___flpack@arg+1,f
  6732  1EB2  307F               	movlw	127
  6733  1EB3  05A7               	andwf	___flpack@arg+2,f
  6734  1EB4  30FF               	movlw	255
  6735  1EB5  05A8               	andwf	___flpack@arg+3,f
  6736  1EB6                     l1252:	
  6737  1EB6  1003               	clrc
  6738  1EB7  0CA9               	rrf	___flpack@exp,f
  6739  1EB8  0829               	movf	___flpack@exp,w
  6740  1EB9  00AB               	movwf	??___flpack
  6741  1EBA  01AC               	clrf	??___flpack+1
  6742  1EBB  01AD               	clrf	??___flpack+2
  6743  1EBC  01AE               	clrf	??___flpack+3
  6744  1EBD  3018               	movlw	24
  6745  1EBE                     u8325:	
  6746  1EBE  35AB               	lslf	??___flpack,f
  6747  1EBF  0DAC               	rlf	??___flpack+1,f
  6748  1EC0  0DAD               	rlf	??___flpack+2,f
  6749  1EC1  0DAE               	rlf	??___flpack+3,f
  6750  1EC2  0B89               	decfsz	9,f
  6751  1EC3  2EBE               	goto	u8325
  6752  1EC4  082B               	movf	??___flpack,w
  6753  1EC5  04A5               	iorwf	___flpack@arg,f
  6754  1EC6  082C               	movf	??___flpack+1,w
  6755  1EC7  04A6               	iorwf	___flpack@arg+1,f
  6756  1EC8  082D               	movf	??___flpack+2,w
  6757  1EC9  04A7               	iorwf	___flpack@arg+2,f
  6758  1ECA  082E               	movf	??___flpack+3,w
  6759  1ECB  04A8               	iorwf	___flpack@arg+3,f
  6760  1ECC  082A               	movf	___flpack@sign,w
  6761  1ECD  1903               	btfsc	3,2
  6762  1ECE  0008               	return
  6763  1ECF  17A8               	bsf	___flpack@arg+3,7
  6764  1ED0  0008               	return
  6765  1ED1                     __end_of___flpack:	
  6766                           
  6767                           	psect	text7
  6768  1B89                     __ptext7:	
  6769 ;; *************** function _InternalADC_Read *****************
  6770 ;; Defined at:
  6771 ;;		line 41 in file "ADC.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  channel         1    wreg     unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  channel         1   19[BANK0 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2   15[BANK0 ] unsigned int 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0, pclath, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;Total ram usage:        5 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    4
  6792 ;; This function calls:
  6793 ;;		_delayUS
  6794 ;; This function is called by:
  6795 ;;		_ReadVoltage
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function _InternalADC_Read
  6801  1B89                     _InternalADC_Read:	
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6805                           ;InternalADC_Read@channel stored from wreg
  6806  1B89  0020               	movlb	0	; select bank0
  6807  1B8A  00B3               	movwf	InternalADC_Read@channel
  6808                           
  6809                           ;ADC.c: 43: ADCON0 =0;
  6810  1B8B  0021               	movlb	1	; select bank1
  6811  1B8C  019D               	clrf	29	;volatile
  6812                           
  6813                           ;ADC.c: 44: ADCON1 =0;
  6814  1B8D  019E               	clrf	30	;volatile
  6815                           
  6816                           ;ADC.c: 45: ADCON1 |= 0b01010000;
  6817  1B8E  3050               	movlw	80
  6818  1B8F  0020               	movlb	0	; select bank0
  6819  1B90  00B1               	movwf	??_InternalADC_Read
  6820  1B91  0831               	movf	??_InternalADC_Read,w
  6821  1B92  0021               	movlb	1	; select bank1
  6822  1B93  049E               	iorwf	30,f	;volatile
  6823                           
  6824                           ;ADC.c: 46: FVRCON |= 0b10000000;
  6825  1B94  0022               	movlb	2	; select bank2
  6826  1B95  1797               	bsf	23,7	;volatile
  6827                           
  6828                           ;ADC.c: 47: FVRCON |= 0x01;
  6829  1B96  1417               	bsf	23,0	;volatile
  6830  1B97                     l1033:	
  6831                           ;ADC.c: 48: while(!(FVRCON & 0b01000000));
  6832                           
  6833  1B97  1F17               	btfss	23,6	;volatile
  6834  1B98  2B97               	goto	l1033
  6835                           
  6836                           ;ADC.c: 49: ADCON0 |= (channel << 2);
  6837  1B99  0020               	movlb	0	; select bank0
  6838  1B9A  0833               	movf	InternalADC_Read@channel,w
  6839  1B9B  00B1               	movwf	??_InternalADC_Read
  6840  1B9C  3001               	movlw	1
  6841  1B9D                     u9515:	
  6842  1B9D  35B1               	lslf	??_InternalADC_Read,f
  6843  1B9E  3EFF               	addlw	-1
  6844  1B9F  1D03               	skipz
  6845  1BA0  2B9D               	goto	u9515
  6846  1BA1  3531               	lslf	??_InternalADC_Read,w
  6847  1BA2  00B2               	movwf	??_InternalADC_Read+1
  6848  1BA3  0832               	movf	??_InternalADC_Read+1,w
  6849  1BA4  0021               	movlb	1	; select bank1
  6850  1BA5  049D               	iorwf	29,f	;volatile
  6851                           
  6852                           ;ADC.c: 50: ADCON1 |= 0b10000011;
  6853  1BA6  3083               	movlw	131
  6854  1BA7  0020               	movlb	0	; select bank0
  6855  1BA8  00B1               	movwf	??_InternalADC_Read
  6856  1BA9  0831               	movf	??_InternalADC_Read,w
  6857  1BAA  0021               	movlb	1	; select bank1
  6858  1BAB  049E               	iorwf	30,f	;volatile
  6859                           
  6860                           ;ADC.c: 51: ADCON0 |= 0b00000001;
  6861  1BAC  141D               	bsf	29,0	;volatile
  6862                           
  6863                           ;ADC.c: 52: (PIE1bits.ADIE=0);
  6864  1BAD  1311               	bcf	17,6	;volatile
  6865                           
  6866                           ;ADC.c: 53: delayUS(5);
  6867  1BAE  3000               	movlw	0
  6868  1BAF  0020               	movlb	0	; select bank0
  6869  1BB0  00A8               	movwf	delayUS@US+3
  6870  1BB1  3000               	movlw	0
  6871  1BB2  00A7               	movwf	delayUS@US+2
  6872  1BB3  3000               	movlw	0
  6873  1BB4  00A6               	movwf	delayUS@US+1
  6874  1BB5  3005               	movlw	5
  6875  1BB6  00A5               	movwf	delayUS@US
  6876  1BB7  319B  2315  319B   	fcall	_delayUS
  6877                           
  6878                           ;ADC.c: 54: ADCON0 |= 0b00000010;
  6879  1BBA  0021               	movlb	1	; select bank1
  6880  1BBB  149D               	bsf	29,1	;volatile
  6881  1BBC                     l1036:	
  6882                           ;ADC.c: 55: while(ADCON0 & 0b00000010);
  6883                           
  6884  1BBC  189D               	btfsc	29,1	;volatile
  6885  1BBD  2BBC               	goto	l1036
  6886                           
  6887                           ;ADC.c: 56: return ((ADRESH << 8) + ADRESL);
  6888  1BBE  081C               	movf	28,w	;volatile
  6889  1BBF  0020               	movlb	0	; select bank0
  6890  1BC0  01B0               	clrf	?_InternalADC_Read+1
  6891  1BC1  07B0               	addwf	?_InternalADC_Read+1,f
  6892  1BC2  0021               	movlb	1	; select bank1
  6893  1BC3  081B               	movf	27,w	;volatile
  6894  1BC4  0020               	movlb	0	; select bank0
  6895  1BC5  01AF               	clrf	?_InternalADC_Read
  6896  1BC6  07AF               	addwf	?_InternalADC_Read,f
  6897  1BC7  0008               	return
  6898  1BC8                     __end_of_InternalADC_Read:	
  6899                           
  6900                           	psect	text8
  6901  187F                     __ptext8:	
  6902 ;; *************** function _DisableInternalADC *****************
  6903 ;; Defined at:
  6904 ;;		line 58 in file "ADC.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;		None               void
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;Total ram usage:        1 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    3
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_ReadVoltage
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           
  6933                           ;psect for function _DisableInternalADC
  6934  187F                     _DisableInternalADC:	
  6935                           
  6936                           ;ADC.c: 60: ADCON0 &= ~0b00000001;
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6940  187F  30FE               	movlw	254
  6941  1880  0020               	movlb	0	; select bank0
  6942  1881  00A5               	movwf	??_DisableInternalADC
  6943  1882  0825               	movf	??_DisableInternalADC,w
  6944  1883  0021               	movlb	1	; select bank1
  6945  1884  059D               	andwf	29,f	;volatile
  6946  1885  0008               	return
  6947  1886                     __end_of_DisableInternalADC:	
  6948                           
  6949                           	psect	text9
  6950  18C6                     __ptext9:	
  6951 ;; *************** function _PS_2_INIT *****************
  6952 ;; Defined at:
  6953 ;;		line 77 in file "PS_2.c"
  6954 ;; Parameters:    Size  Location     Type
  6955 ;;		None
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;		None
  6958 ;; Return value:  Size  Location     Type
  6959 ;;		None               void
  6960 ;; Registers used:
  6961 ;;		wreg, status,2, status,0, pclath, cstack
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;Total ram usage:        0 bytes
  6972 ;; Hardware stack levels used:    1
  6973 ;; Hardware stack levels required when called:    4
  6974 ;; This function calls:
  6975 ;;		_Clock_TRIS
  6976 ;;		_Data_TRIS
  6977 ;;		_INIT_PS_2_INTERRUPT
  6978 ;; This function is called by:
  6979 ;;		_main
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           
  6984                           ;psect for function _PS_2_INIT
  6985  18C6                     _PS_2_INIT:	
  6986                           
  6987                           ;PS_2.c: 80: Clock_TRIS(1);
  6988                           
  6989                           ;incstack = 0
  6990                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6991  18C6  3001               	movlw	1
  6992  18C7  3198  2099  3198   	fcall	_Clock_TRIS
  6993                           
  6994                           ;PS_2.c: 81: Data_TRIS(1);
  6995  18CA  3001               	movlw	1
  6996  18CB  3198  20A4  3198   	fcall	_Data_TRIS
  6997                           
  6998                           ;PS_2.c: 82: INIT_PS_2_INTERRUPT(0b00100000);
  6999  18CE  3020               	movlw	32
  7000  18CF  3198  20EE         	fcall	_INIT_PS_2_INTERRUPT
  7001  18D1  0008               	return
  7002  18D2                     __end_of_PS_2_INIT:	
  7003                           
  7004                           	psect	text10
  7005  18EE                     __ptext10:	
  7006 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  7007 ;; Defined at:
  7008 ;;		line 112 in file "PS_2.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  DATA_CLK        1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;		None               void
  7015 ;; Registers used:
  7016 ;;		wreg, status,2
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        1 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    3
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_PS_2_INIT
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _INIT_PS_2_INTERRUPT
  7038  18EE                     _INIT_PS_2_INTERRUPT:	
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  7042                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  7043  18EE  0020               	movlb	0	; select bank0
  7044  18EF  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  7045                           
  7046                           ;PS_2.c: 114: IOCAP =0;
  7047  18F0  0027               	movlb	7	; select bank7
  7048  18F1  0191               	clrf	17	;volatile
  7049                           
  7050                           ;PS_2.c: 115: IOCAN =0;
  7051  18F2  0192               	clrf	18	;volatile
  7052                           
  7053                           ;PS_2.c: 116: if(DATA_CLK == 0b00100000)
  7054  18F3  0020               	movlb	0	; select bank0
  7055  18F4  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  7056  18F5  3A20               	xorlw	32
  7057  18F6  1D03               	skipz
  7058  18F7  28FB               	goto	l667
  7059                           
  7060                           ;PS_2.c: 117: {
  7061                           ;PS_2.c: 120: IOCAN |= 0b00100000;
  7062  18F8  0027               	movlb	7	; select bank7
  7063  18F9  1692               	bsf	18,5	;volatile
  7064                           
  7065                           ;PS_2.c: 121: }
  7066  18FA  0008               	return
  7067  18FB                     l667:	
  7068                           
  7069                           ;PS_2.c: 122: else
  7070                           ;PS_2.c: 123: {
  7071                           ;PS_2.c: 126: IOCAN |= 0b00010000;
  7072  18FB  0027               	movlb	7	; select bank7
  7073  18FC  1612               	bsf	18,4	;volatile
  7074  18FD  0008               	return
  7075  18FE                     __end_of_INIT_PS_2_INTERRUPT:	
  7076                           
  7077                           	psect	text11
  7078  1006                     __ptext11:	
  7079 ;; *************** function _Keyboard_Connected *****************
  7080 ;; Defined at:
  7081 ;;		line 1014 in file "PS_2.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  i               4   65[BANK0 ] unsigned long 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      unsigned char 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;Total ram usage:        4 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    9
  7102 ;; This function calls:
  7103 ;;		_PS_2_DISABLE_INTERRUPT
  7104 ;;		_PS_2_ENABLE_INTERRUPT
  7105 ;;		_PS_2_Update
  7106 ;;		_Send_PS2
  7107 ;;		_delayUS
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           
  7114                           ;psect for function _Keyboard_Connected
  7115  1006                     _Keyboard_Connected:	
  7116                           
  7117                           ;PS_2.c: 1016: unsigned long i=0;
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7121  1006  3000               	movlw	0
  7122  1007  0020               	movlb	0	; select bank0
  7123  1008  00E4               	movwf	Keyboard_Connected@i+3
  7124  1009  3000               	movlw	0
  7125  100A  00E3               	movwf	Keyboard_Connected@i+2
  7126  100B  3000               	movlw	0
  7127  100C  00E2               	movwf	Keyboard_Connected@i+1
  7128  100D  3000               	movlw	0
  7129  100E  00E1               	movwf	Keyboard_Connected@i
  7130                           
  7131                           ;PS_2.c: 1017: ECHO =0;
  7132  100F  0021               	movlb	1	; select bank1
  7133  1010  01E9               	clrf	_ECHO^(0+128)	;volatile
  7134                           
  7135                           ;PS_2.c: 1018: Send_PS2(0xEE);
  7136  1011  30EE               	movlw	238
  7137  1012  3196  2661  3190   	fcall	_Send_PS2
  7138                           
  7139                           ;PS_2.c: 1019: PS_2_ENABLE_INTERRUPT(0b00100000);
  7140  1015  3020               	movlw	32
  7141  1016  3199  217F  3190   	fcall	_PS_2_ENABLE_INTERRUPT
  7142                           
  7143                           ;PS_2.c: 1020: for(i=0;i<8000;i++)
  7144  1019  3000               	movlw	0
  7145  101A  0020               	movlb	0	; select bank0
  7146  101B  00E4               	movwf	Keyboard_Connected@i+3
  7147  101C  3000               	movlw	0
  7148  101D  00E3               	movwf	Keyboard_Connected@i+2
  7149  101E  3000               	movlw	0
  7150  101F  00E2               	movwf	Keyboard_Connected@i+1
  7151  1020  3000               	movlw	0
  7152  1021  00E1               	movwf	Keyboard_Connected@i
  7153  1022  282C               	goto	L4
  7154  1023                     l7143:	
  7155                           ;PS_2.c: 1025: {
  7156                           ;PS_2.c: 1026: break;
  7157                           
  7158  1023  3001               	movlw	1
  7159  1024  0020               	movlb	0	; select bank0
  7160  1025  07E1               	addwf	Keyboard_Connected@i,f
  7161  1026  3000               	movlw	0
  7162  1027  3DE2               	addwfc	Keyboard_Connected@i+1,f
  7163  1028  3000               	movlw	0
  7164  1029  3DE3               	addwfc	Keyboard_Connected@i+2,f
  7165  102A  3000               	movlw	0
  7166  102B  3DE4               	addwfc	Keyboard_Connected@i+3,f
  7167  102C                     L4:	
  7168  102C  3000               	movlw	0
  7169  102D  0264               	subwf	Keyboard_Connected@i+3,w
  7170  102E  1D03               	skipz
  7171  102F  283A               	goto	u9785
  7172  1030  3000               	movlw	0
  7173  1031  0263               	subwf	Keyboard_Connected@i+2,w
  7174  1032  1D03               	skipz
  7175  1033  283A               	goto	u9785
  7176  1034  301F               	movlw	31
  7177  1035  0262               	subwf	Keyboard_Connected@i+1,w
  7178  1036  1D03               	skipz
  7179  1037  283A               	goto	u9785
  7180  1038  3040               	movlw	64
  7181  1039  0261               	subwf	Keyboard_Connected@i,w
  7182  103A                     u9785:	
  7183  103A  1803               	btfsc	3,0
  7184  103B  284F               	goto	l7145
  7185                           
  7186                           ;PS_2.c: 1021: {
  7187                           ;PS_2.c: 1022: PS_2_Update();
  7188  103C  3181  2117  3190   	fcall	_PS_2_Update
  7189                           
  7190                           ;PS_2.c: 1023: delayUS(10);
  7191  103F  3000               	movlw	0
  7192  1040  0020               	movlb	0	; select bank0
  7193  1041  00A8               	movwf	delayUS@US+3
  7194  1042  3000               	movlw	0
  7195  1043  00A7               	movwf	delayUS@US+2
  7196  1044  3000               	movlw	0
  7197  1045  00A6               	movwf	delayUS@US+1
  7198  1046  300A               	movlw	10
  7199  1047  00A5               	movwf	delayUS@US
  7200  1048  319B  2315  3190   	fcall	_delayUS
  7201                           
  7202                           ;PS_2.c: 1024: if(ECHO)
  7203  104B  0021               	movlb	1	; select bank1
  7204  104C  0869               	movf	_ECHO^(0+128),w	;volatile
  7205  104D  1903               	btfsc	3,2
  7206  104E  2823               	goto	l7143
  7207  104F                     l7145:	
  7208                           
  7209                           ;PS_2.c: 1027: }
  7210                           ;PS_2.c: 1028: }
  7211                           ;PS_2.c: 1029: PS_2_DISABLE_INTERRUPT(0b00100000);
  7212  104F  3020               	movlw	32
  7213  1050  3199  21AC  3190   	fcall	_PS_2_DISABLE_INTERRUPT
  7214                           
  7215                           ;PS_2.c: 1030: if(ECHO)
  7216  1053  0021               	movlb	1	; select bank1
  7217  1054  0869               	movf	_ECHO^(0+128),w	;volatile
  7218  1055  1903               	btfsc	3,2
  7219  1056  2859               	goto	l7155
  7220                           
  7221                           ;PS_2.c: 1031: {
  7222                           ;PS_2.c: 1032: return 1;
  7223  1057  3001               	movlw	1
  7224                           
  7225                           ;PS_2.c: 1033: }
  7226  1058  0008               	return
  7227  1059                     l7155:	
  7228                           
  7229                           ;PS_2.c: 1034: else
  7230                           ;PS_2.c: 1035: {
  7231                           ;PS_2.c: 1036: return 0;
  7232  1059  3000               	movlw	0
  7233  105A  0008               	return
  7234  105B                     __end_of_Keyboard_Connected:	
  7235                           
  7236                           	psect	text12
  7237  0117                     __ptext12:	
  7238 ;; *************** function _PS_2_Update *****************
  7239 ;; Defined at:
  7240 ;;		line 201 in file "PS_2.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  buf            60    0[BANK5 ] unsigned char [60]
  7245 ;;  temp            1   64[BANK5 ] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  7257 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  7259 ;;Total ram usage:       74 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    8
  7262 ;; This function calls:
  7263 ;;		_CheckSum_byte
  7264 ;;		_Decode_Scan_Code
  7265 ;;		_Decode_Scan_Code_Function
  7266 ;;		_Decode_Scan_Code_FunctionE0
  7267 ;;		_Decode_Scan_Code_Shift
  7268 ;;		_ISNUMBER
  7269 ;;		_PS_2_DISABLE_INTERRUPT
  7270 ;;		_PS_2_ENABLE_INTERRUPT
  7271 ;;		_Reverse_Byte
  7272 ;;		_Send_PS2
  7273 ;;		_SetBaud
  7274 ;;		_UART_send_break
  7275 ;;		_UARTchar
  7276 ;;		_UARTstringWAIT
  7277 ;;		___lmul
  7278 ;;		_delayUS
  7279 ;;		_sprintf
  7280 ;; This function is called by:
  7281 ;;		_main
  7282 ;;		_Keyboard_Connected
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286                           
  7287                           ;psect for function _PS_2_Update
  7288  0117                     _PS_2_Update:	
  7289                           
  7290                           ;PS_2.c: 203: unsigned char temp =0;
  7291                           
  7292                           ;incstack = 0
  7293                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7294  0117  0025               	movlb	5	; select bank5
  7295  0118  01E0               	clrf	PS_2_Update@temp^(0+640)
  7296                           
  7297                           ;PS_2.c: 204: unsigned char buf[60];
  7298                           ;PS_2.c: 206: if(Read_Timer < 20)
  7299  0119  3000               	movlw	0
  7300  011A  0022               	movlb	2	; select bank2
  7301  011B  026A               	subwf	(_Read_Timer+1)^(0+256),w
  7302  011C  3014               	movlw	20
  7303  011D  1903               	skipnz
  7304  011E  0269               	subwf	_Read_Timer^(0+256),w
  7305  011F  1803               	skipnc
  7306  0120  2926               	goto	l6461
  7307                           
  7308                           ;PS_2.c: 207: {
  7309                           ;PS_2.c: 208: Read_Timer++;
  7310  0121  3001               	movlw	1
  7311  0122  07E9               	addwf	_Read_Timer^(0+256),f
  7312  0123  3000               	movlw	0
  7313  0124  3DEA               	addwfc	(_Read_Timer+1)^(0+256),f
  7314                           
  7315                           ;PS_2.c: 209: }
  7316  0125  2928               	goto	l6463
  7317  0126                     l6461:	
  7318                           
  7319                           ;PS_2.c: 210: else
  7320                           ;PS_2.c: 211: {
  7321                           ;PS_2.c: 212: PS_2_bits = 0;
  7322  0126  0020               	movlb	0	; select bank0
  7323  0127  01E8               	clrf	_PS_2_bits
  7324  0128                     l6463:	
  7325                           
  7326                           ;PS_2.c: 213: }
  7327                           ;PS_2.c: 215: if(Read_Timer == 20 && PS_2_bits != 0)
  7328  0128  3014               	movlw	20
  7329  0129  0022               	movlb	2	; select bank2
  7330  012A  0669               	xorwf	_Read_Timer^(0+256),w
  7331  012B  046A               	iorwf	(_Read_Timer+1)^(0+256),w
  7332  012C  1D03               	skipz
  7333  012D  0008               	return
  7334  012E  0020               	movlb	0	; select bank0
  7335  012F  0868               	movf	_PS_2_bits,w
  7336  0130  1903               	btfsc	3,2
  7337  0131  0008               	return
  7338                           
  7339                           ;PS_2.c: 216: {
  7340                           ;PS_2.c: 218: PS_2_DISABLE_INTERRUPT(0b00100000);
  7341  0132  3020               	movlw	32
  7342  0133  3199  21AC  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7343                           
  7344                           ;PS_2.c: 219: PIE1bits.RCIE = 0;
  7345  0136  0021               	movlb	1	; select bank1
  7346  0137  1291               	bcf	17,5	;volatile
  7347                           
  7348                           ;PS_2.c: 221: if(PS_2_bits >= 11)
  7349  0138  300B               	movlw	11
  7350  0139  0020               	movlb	0	; select bank0
  7351  013A  0268               	subwf	_PS_2_bits,w
  7352  013B  1C03               	skipc
  7353  013C  2994               	goto	l6483
  7354                           
  7355                           ;PS_2.c: 222: {
  7356                           ;PS_2.c: 225: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7357  013D  0024               	movlb	4	; select bank4
  7358  013E  0821               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7359  013F  0023               	movlb	3	; select bank3
  7360  0140  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7361  0141  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7362  0142  0024               	movlb	4	; select bank4
  7363  0143  0820               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7364  0144  0023               	movlb	3	; select bank3
  7365  0145  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7366  0146  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7367                           
  7368                           ;PS_2.c: 226: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7369  0147  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7370  0148  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7371  0149  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7372  014A  00AF               	movwf	??_PS_2_Update^(0+384)
  7373  014B  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7374  014C  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7375  014D  3001               	movlw	1
  7376  014E  052F               	andwf	??_PS_2_Update^(0+384),w
  7377  014F  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7378  0150  3000               	movlw	0
  7379  0151  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7380  0152  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7381  0153  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7382  0154  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7383  0155  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7384  0156  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7385  0157  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7386  0158  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7387  0159  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7388  015A  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7389  015B  30FF               	movlw	255
  7390  015C  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7391  015D  0020               	movlb	0	; select bank0
  7392  015E  00A5               	movwf	CheckSum_byte@This
  7393  015F  3000               	movlw	0
  7394  0160  0023               	movlb	3	; select bank3
  7395  0161  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7396  0162  0020               	movlb	0	; select bank0
  7397  0163  00A6               	movwf	CheckSum_byte@This+1
  7398  0164  3003               	movlw	3
  7399  0165  0023               	movlb	3	; select bank3
  7400  0166  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7401  0167  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7402  0168  0020               	movlb	0	; select bank0
  7403  0169  00A7               	movwf	CheckSum_byte@Odd_Even
  7404  016A  319A  224E  3181   	fcall	_CheckSum_byte
  7405  016D  0023               	movlb	3	; select bank3
  7406  016E  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7407  016F  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7408  0170  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7409  0171  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7410  0172  1D03               	skipz
  7411  0173  2976               	goto	u8385
  7412  0174  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7413  0175  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7414  0176                     u8385:	
  7415  0176  1D03               	skipz
  7416  0177  2992               	goto	l6481
  7417                           
  7418                           ;PS_2.c: 227: {
  7419                           ;PS_2.c: 229: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7420  0178  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7421  0179  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7422  017A  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7423  017B  00AF               	movwf	??_PS_2_Update^(0+384)
  7424  017C  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7425  017D  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7426  017E  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7427  017F  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7428  0180  30FF               	movlw	255
  7429  0181  052F               	andwf	??_PS_2_Update^(0+384),w
  7430  0182  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7431  0183  3000               	movlw	0
  7432  0184  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7433  0185  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7434                           
  7435                           ;PS_2.c: 230: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7436  0186  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  7437  0187  319D  2547  3181   	fcall	_Reverse_Byte
  7438  018A  0023               	movlb	3	; select bank3
  7439  018B  00AF               	movwf	??_PS_2_Update^(0+384)
  7440  018C  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7441  018D  082F               	movf	??_PS_2_Update^(0+384),w
  7442  018E  00A4               	movwf	_PS_2_Read_Data_First^(0+384)
  7443  018F  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7444  0190  00A5               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7445                           
  7446                           ;PS_2.c: 231: }
  7447  0191  2994               	goto	l6483
  7448  0192                     l6481:	
  7449                           
  7450                           ;PS_2.c: 232: else
  7451                           ;PS_2.c: 233: {
  7452                           ;PS_2.c: 235: PS_2_Read_Data_First =0;
  7453  0192  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7454  0193  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7455  0194                     l6483:	
  7456                           
  7457                           ;PS_2.c: 236: }
  7458                           ;PS_2.c: 237: }
  7459                           ;PS_2.c: 238: if(PS_2_bits >= (22))
  7460  0194  3016               	movlw	22
  7461  0195  0020               	movlb	0	; select bank0
  7462  0196  0268               	subwf	_PS_2_bits,w
  7463  0197  1C03               	skipc
  7464  0198  29F2               	goto	l6495
  7465                           
  7466                           ;PS_2.c: 239: {
  7467                           ;PS_2.c: 242: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7468  0199  0024               	movlb	4	; select bank4
  7469  019A  0825               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7470  019B  0023               	movlb	3	; select bank3
  7471  019C  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7472  019D  07A9               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7473  019E  0024               	movlb	4	; select bank4
  7474  019F  0824               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7475  01A0  0023               	movlb	3	; select bank3
  7476  01A1  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7477  01A2  07A8               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7478                           
  7479                           ;PS_2.c: 243: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7480  01A3  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7481  01A4  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7482  01A5  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7483  01A6  00AF               	movwf	??_PS_2_Update^(0+384)
  7484  01A7  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7485  01A8  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7486  01A9  3001               	movlw	1
  7487  01AA  052F               	andwf	??_PS_2_Update^(0+384),w
  7488  01AB  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7489  01AC  3000               	movlw	0
  7490  01AD  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7491  01AE  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7492  01AF  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7493  01B0  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7494  01B1  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7495  01B2  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7496  01B3  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7497  01B4  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7498  01B5  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7499  01B6  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7500  01B7  30FF               	movlw	255
  7501  01B8  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7502  01B9  0020               	movlb	0	; select bank0
  7503  01BA  00A5               	movwf	CheckSum_byte@This
  7504  01BB  3000               	movlw	0
  7505  01BC  0023               	movlb	3	; select bank3
  7506  01BD  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7507  01BE  0020               	movlb	0	; select bank0
  7508  01BF  00A6               	movwf	CheckSum_byte@This+1
  7509  01C0  3003               	movlw	3
  7510  01C1  0023               	movlb	3	; select bank3
  7511  01C2  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7512  01C3  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7513  01C4  0020               	movlb	0	; select bank0
  7514  01C5  00A7               	movwf	CheckSum_byte@Odd_Even
  7515  01C6  319A  224E  3181   	fcall	_CheckSum_byte
  7516  01C9  0023               	movlb	3	; select bank3
  7517  01CA  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7518  01CB  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7519  01CC  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7520  01CD  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7521  01CE  1D03               	skipz
  7522  01CF  29D2               	goto	u8405
  7523  01D0  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7524  01D1  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7525  01D2                     u8405:	
  7526  01D2  1D03               	skipz
  7527  01D3  29EE               	goto	l6493
  7528                           
  7529                           ;PS_2.c: 244: {
  7530                           ;PS_2.c: 246: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7531  01D4  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7532  01D5  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7533  01D6  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7534  01D7  00AF               	movwf	??_PS_2_Update^(0+384)
  7535  01D8  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7536  01D9  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7537  01DA  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7538  01DB  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7539  01DC  30FF               	movlw	255
  7540  01DD  052F               	andwf	??_PS_2_Update^(0+384),w
  7541  01DE  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7542  01DF  3000               	movlw	0
  7543  01E0  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7544  01E1  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7545                           
  7546                           ;PS_2.c: 247: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7547  01E2  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  7548  01E3  319D  2547  3181   	fcall	_Reverse_Byte
  7549  01E6  0023               	movlb	3	; select bank3
  7550  01E7  00AF               	movwf	??_PS_2_Update^(0+384)
  7551  01E8  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7552  01E9  082F               	movf	??_PS_2_Update^(0+384),w
  7553  01EA  00A8               	movwf	_PS_2_Read_Data_Second^(0+384)
  7554  01EB  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7555  01EC  00A9               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7556                           
  7557                           ;PS_2.c: 248: }
  7558  01ED  29F2               	goto	l6495
  7559  01EE                     l6493:	
  7560                           
  7561                           ;PS_2.c: 249: else
  7562                           ;PS_2.c: 250: {
  7563                           ;PS_2.c: 252: PS_2_Read_Data_First =0;
  7564  01EE  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7565  01EF  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7566                           
  7567                           ;PS_2.c: 253: PS_2_Read_Data_Second =0;
  7568  01F0  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7569  01F1  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7570  01F2                     l6495:	
  7571                           
  7572                           ;PS_2.c: 254: }
  7573                           ;PS_2.c: 255: }
  7574                           ;PS_2.c: 256: if(PS_2_bits >= (33))
  7575  01F2  3021               	movlw	33
  7576  01F3  0020               	movlb	0	; select bank0
  7577  01F4  0268               	subwf	_PS_2_bits,w
  7578  01F5  1C03               	skipc
  7579  01F6  2A52               	goto	l6507
  7580                           
  7581                           ;PS_2.c: 257: {
  7582                           ;PS_2.c: 260: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7583  01F7  0024               	movlb	4	; select bank4
  7584  01F8  0827               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7585  01F9  0023               	movlb	3	; select bank3
  7586  01FA  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7587  01FB  07AB               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7588  01FC  0024               	movlb	4	; select bank4
  7589  01FD  0826               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7590  01FE  0023               	movlb	3	; select bank3
  7591  01FF  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7592  0200  07AA               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7593                           
  7594                           ;PS_2.c: 261: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7595  0201  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7596  0202  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7597  0203  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7598  0204  00AF               	movwf	??_PS_2_Update^(0+384)
  7599  0205  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7600  0206  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7601  0207  3001               	movlw	1
  7602  0208  052F               	andwf	??_PS_2_Update^(0+384),w
  7603  0209  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7604  020A  3000               	movlw	0
  7605  020B  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7606  020C  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7607  020D  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7608  020E  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7609  020F  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7610  0210  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7611  0211  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7612  0212  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7613  0213  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7614  0214  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7615  0215  30FF               	movlw	255
  7616  0216  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7617  0217  0020               	movlb	0	; select bank0
  7618  0218  00A5               	movwf	CheckSum_byte@This
  7619  0219  3000               	movlw	0
  7620  021A  0023               	movlb	3	; select bank3
  7621  021B  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7622  021C  0020               	movlb	0	; select bank0
  7623  021D  00A6               	movwf	CheckSum_byte@This+1
  7624  021E  3003               	movlw	3
  7625  021F  0023               	movlb	3	; select bank3
  7626  0220  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7627  0221  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7628  0222  0020               	movlb	0	; select bank0
  7629  0223  00A7               	movwf	CheckSum_byte@Odd_Even
  7630  0224  319A  224E  3181   	fcall	_CheckSum_byte
  7631  0227  0023               	movlb	3	; select bank3
  7632  0228  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7633  0229  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7634  022A  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7635  022B  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7636  022C  1D03               	skipz
  7637  022D  2A30               	goto	u8425
  7638  022E  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7639  022F  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7640  0230                     u8425:	
  7641  0230  1D03               	skipz
  7642  0231  2A4C               	goto	l6505
  7643                           
  7644                           ;PS_2.c: 262: {
  7645                           ;PS_2.c: 264: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7646  0232  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7647  0233  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7648  0234  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7649  0235  00AF               	movwf	??_PS_2_Update^(0+384)
  7650  0236  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7651  0237  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7652  0238  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7653  0239  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7654  023A  30FF               	movlw	255
  7655  023B  052F               	andwf	??_PS_2_Update^(0+384),w
  7656  023C  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7657  023D  3000               	movlw	0
  7658  023E  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7659  023F  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7660                           
  7661                           ;PS_2.c: 265: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7662  0240  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7663  0241  319D  2547  3181   	fcall	_Reverse_Byte
  7664  0244  0023               	movlb	3	; select bank3
  7665  0245  00AF               	movwf	??_PS_2_Update^(0+384)
  7666  0246  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7667  0247  082F               	movf	??_PS_2_Update^(0+384),w
  7668  0248  00AA               	movwf	_PS_2_Read_Data_Third^(0+384)
  7669  0249  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7670  024A  00AB               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7671                           
  7672                           ;PS_2.c: 266: }
  7673  024B  2A52               	goto	l6507
  7674  024C                     l6505:	
  7675                           
  7676                           ;PS_2.c: 267: else
  7677                           ;PS_2.c: 268: {
  7678                           ;PS_2.c: 270: PS_2_Read_Data_First =0;
  7679  024C  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7680  024D  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7681                           
  7682                           ;PS_2.c: 271: PS_2_Read_Data_Second =0;
  7683  024E  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7684  024F  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7685                           
  7686                           ;PS_2.c: 272: PS_2_Read_Data_Third =0;
  7687  0250  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7688  0251  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7689  0252                     l6507:	
  7690                           
  7691                           ;PS_2.c: 273: }
  7692                           ;PS_2.c: 274: }
  7693                           ;PS_2.c: 275: if(PS_2_bits >= (44))
  7694  0252  302C               	movlw	44
  7695  0253  0020               	movlb	0	; select bank0
  7696  0254  0268               	subwf	_PS_2_bits,w
  7697  0255  1C03               	skipc
  7698  0256  2AB4               	goto	l6519
  7699                           
  7700                           ;PS_2.c: 276: {
  7701                           ;PS_2.c: 279: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7702  0257  0024               	movlb	4	; select bank4
  7703  0258  0823               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7704  0259  0023               	movlb	3	; select bank3
  7705  025A  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7706  025B  07A7               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7707  025C  0024               	movlb	4	; select bank4
  7708  025D  0822               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7709  025E  0023               	movlb	3	; select bank3
  7710  025F  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7711  0260  07A6               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7712                           
  7713                           ;PS_2.c: 280: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7714  0261  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7715  0262  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7716  0263  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7717  0264  00AF               	movwf	??_PS_2_Update^(0+384)
  7718  0265  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7719  0266  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7720  0267  3001               	movlw	1
  7721  0268  052F               	andwf	??_PS_2_Update^(0+384),w
  7722  0269  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7723  026A  3000               	movlw	0
  7724  026B  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7725  026C  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7726  026D  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7727  026E  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7728  026F  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7729  0270  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7730  0271  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7731  0272  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7732  0273  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7733  0274  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7734  0275  30FF               	movlw	255
  7735  0276  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7736  0277  0020               	movlb	0	; select bank0
  7737  0278  00A5               	movwf	CheckSum_byte@This
  7738  0279  3000               	movlw	0
  7739  027A  0023               	movlb	3	; select bank3
  7740  027B  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7741  027C  0020               	movlb	0	; select bank0
  7742  027D  00A6               	movwf	CheckSum_byte@This+1
  7743  027E  3003               	movlw	3
  7744  027F  0023               	movlb	3	; select bank3
  7745  0280  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7746  0281  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7747  0282  0020               	movlb	0	; select bank0
  7748  0283  00A7               	movwf	CheckSum_byte@Odd_Even
  7749  0284  319A  224E  3181   	fcall	_CheckSum_byte
  7750  0287  0023               	movlb	3	; select bank3
  7751  0288  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7752  0289  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7753  028A  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7754  028B  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7755  028C  1D03               	skipz
  7756  028D  2A90               	goto	u8445
  7757  028E  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7758  028F  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7759  0290                     u8445:	
  7760  0290  1D03               	skipz
  7761  0291  2AAC               	goto	l6517
  7762                           
  7763                           ;PS_2.c: 281: {
  7764                           ;PS_2.c: 283: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7765  0292  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7766  0293  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7767  0294  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7768  0295  00AF               	movwf	??_PS_2_Update^(0+384)
  7769  0296  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7770  0297  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7771  0298  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7772  0299  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7773  029A  30FF               	movlw	255
  7774  029B  052F               	andwf	??_PS_2_Update^(0+384),w
  7775  029C  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7776  029D  3000               	movlw	0
  7777  029E  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7778  029F  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7779                           
  7780                           ;PS_2.c: 284: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7781  02A0  0826               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7782  02A1  319D  2547  3181   	fcall	_Reverse_Byte
  7783  02A4  0023               	movlb	3	; select bank3
  7784  02A5  00AF               	movwf	??_PS_2_Update^(0+384)
  7785  02A6  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7786  02A7  082F               	movf	??_PS_2_Update^(0+384),w
  7787  02A8  00A6               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7788  02A9  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7789  02AA  00A7               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7790                           
  7791                           ;PS_2.c: 285: }
  7792  02AB  2AB4               	goto	l6519
  7793  02AC                     l6517:	
  7794                           
  7795                           ;PS_2.c: 286: else
  7796                           ;PS_2.c: 287: {
  7797                           ;PS_2.c: 289: PS_2_Read_Data_First =0;
  7798  02AC  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7799  02AD  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7800                           
  7801                           ;PS_2.c: 290: PS_2_Read_Data_Second =0;
  7802  02AE  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7803  02AF  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7804                           
  7805                           ;PS_2.c: 291: PS_2_Read_Data_Third =0;
  7806  02B0  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7807  02B1  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7808                           
  7809                           ;PS_2.c: 292: PS_2_Read_Data_Forth =0;
  7810  02B2  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7811  02B3  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7812  02B4                     l6519:	
  7813                           
  7814                           ;PS_2.c: 293: }
  7815                           ;PS_2.c: 294: }
  7816                           ;PS_2.c: 296: if(PS_2_Read_Data_Forth)
  7817  02B4  0023               	movlb	3	; select bank3
  7818  02B5  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7819  02B6  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7820  02B7  1903               	skipnz
  7821  02B8  2ACF               	goto	l6531
  7822                           
  7823                           ;PS_2.c: 297: {
  7824                           ;PS_2.c: 298: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7825                           ;PS_2.c: 299: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7826  02B9  30F0               	movlw	240
  7827  02BA  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7828  02BB  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7829  02BC  1903               	skipnz
  7830  02BD  2C62               	goto	l6703
  7831  02BE  30F0               	movlw	240
  7832  02BF  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7833  02C0  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7834  02C1  1903               	skipnz
  7835  02C2  2C62               	goto	l6703
  7836  02C3  30F0               	movlw	240
  7837  02C4  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7838  02C5  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7839  02C6  1903               	skipnz
  7840  02C7  2C62               	goto	l6703
  7841  02C8  30F0               	movlw	240
  7842  02C9  0626               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7843  02CA  0427               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7844  02CB  1903               	skipnz
  7845  02CC  2C62               	goto	l6703
  7846                           
  7847                           ;PS_2.c: 300: {
  7848                           ;PS_2.c: 302: __nop();
  7849  02CD  0000               	nop
  7850                           
  7851                           ;PS_2.c: 303: }
  7852                           ;PS_2.c: 304: }
  7853  02CE  2C62               	goto	l6703
  7854  02CF                     l6531:	
  7855                           
  7856                           ;PS_2.c: 305: else if(PS_2_Read_Data_Third)
  7857  02CF  0023               	movlb	3	; select bank3
  7858  02D0  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7859  02D1  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7860  02D2  1903               	skipnz
  7861  02D3  2B24               	goto	l6567
  7862                           
  7863                           ;PS_2.c: 306: {
  7864                           ;PS_2.c: 308: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7865                           ;PS_2.c: 309: PS_2_Read_Data_First != 0xE0 &&
  7866                           ;PS_2.c: 310: PS_2_Read_Data_Second != 0xE0 &&
  7867                           ;PS_2.c: 311: PS_2_Read_Data_Third != 0xE0)
  7868  02D4  30F0               	movlw	240
  7869  02D5  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7870  02D6  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7871  02D7  1D03               	skipz
  7872  02D8  2AFF               	goto	l6551
  7873  02D9  30F0               	movlw	240
  7874  02DA  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7875  02DB  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7876  02DC  1903               	skipnz
  7877  02DD  2AFF               	goto	l6551
  7878  02DE  30E0               	movlw	224
  7879  02DF  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7880  02E0  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7881  02E1  1903               	skipnz
  7882  02E2  2AFF               	goto	l6551
  7883  02E3  30E0               	movlw	224
  7884  02E4  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7885  02E5  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7886  02E6  1903               	skipnz
  7887  02E7  2AFF               	goto	l6551
  7888  02E8  30E0               	movlw	224
  7889  02E9  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7890  02EA  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7891  02EB  1903               	skipnz
  7892  02EC  2AFF               	goto	l6551
  7893                           
  7894                           ;PS_2.c: 312: {
  7895                           ;PS_2.c: 314: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7896  02ED  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7897  02EE  3199  216C  3181   	fcall	_Decode_Scan_Code_Shift
  7898  02F1  3A00               	xorlw	0
  7899  02F2  1903               	skipnz
  7900  02F3  2AFF               	goto	l6551
  7901                           
  7902                           ;PS_2.c: 315: {
  7903                           ;PS_2.c: 317: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7904  02F4  0023               	movlb	3	; select bank3
  7905  02F5  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7906  02F6  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7907  02F7  07A5               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7908  02F8  082A               	movf	_PS_2_Read_Data_Third^(0+384),w
  7909  02F9  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  7910  02FA  07A4               	addwf	_PS_2_Read_Data_First^(0+384),f
  7911                           
  7912                           ;PS_2.c: 318: PS_2_Read_Data_Second = 0;
  7913  02FB  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  7914  02FC  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7915                           
  7916                           ;PS_2.c: 319: PS_2_Read_Data_Third = 0;
  7917  02FD  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  7918  02FE  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7919  02FF                     l6551:	
  7920                           
  7921                           ;PS_2.c: 320: }
  7922                           ;PS_2.c: 321: }
  7923                           ;PS_2.c: 322: if(PS_2_Read_Data_First == 0xE0)
  7924  02FF  30E0               	movlw	224
  7925  0300  0023               	movlb	3	; select bank3
  7926  0301  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7927  0302  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7928  0303  1D03               	skipz
  7929  0304  2C62               	goto	l6703
  7930                           
  7931                           ;PS_2.c: 323: {
  7932                           ;PS_2.c: 324: if(PS_2_Read_Data_Second == 0xF0)
  7933  0305  30F0               	movlw	240
  7934  0306  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7935  0307  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7936  0308  1D03               	skipz
  7937  0309  2C62               	goto	l6703
  7938                           
  7939                           ;PS_2.c: 325: {
  7940                           ;PS_2.c: 326: if(PS_2_Read_Data_Third == 0x11 )
  7941  030A  3011               	movlw	17
  7942  030B  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7943  030C  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7944  030D  1D03               	skipz
  7945  030E  2B12               	goto	l6559
  7946                           
  7947                           ;PS_2.c: 327: {
  7948                           ;PS_2.c: 328: LALT = 0;
  7949  030F  0020               	movlb	0	; select bank0
  7950  0310  01E6               	clrf	_LALT
  7951                           
  7952                           ;PS_2.c: 329: }
  7953  0311  2C62               	goto	l6703
  7954  0312                     l6559:	
  7955                           
  7956                           ;PS_2.c: 330: else if(PS_2_Read_Data_Third == 0x14 )
  7957  0312  3014               	movlw	20
  7958  0313  0023               	movlb	3	; select bank3
  7959  0314  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7960  0315  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7961  0316  1D03               	skipz
  7962  0317  2B1B               	goto	l6563
  7963                           
  7964                           ;PS_2.c: 331: {
  7965                           ;PS_2.c: 332: LControl = 0;
  7966  0318  0022               	movlb	2	; select bank2
  7967  0319  01E7               	clrf	_LControl^(0+256)
  7968                           
  7969                           ;PS_2.c: 333: }
  7970  031A  2C62               	goto	l6703
  7971  031B                     l6563:	
  7972                           
  7973                           ;PS_2.c: 334: else if(PS_2_Read_Data_Third == 0x71 )
  7974  031B  3071               	movlw	113
  7975  031C  0023               	movlb	3	; select bank3
  7976  031D  062A               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7977  031E  042B               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7978  031F  1D03               	skipz
  7979  0320  2C62               	goto	l6703
  7980                           
  7981                           ;PS_2.c: 335: {
  7982                           ;PS_2.c: 336: Delete = 0;
  7983  0321  0022               	movlb	2	; select bank2
  7984  0322  01E6               	clrf	_Delete^(0+256)
  7985                           
  7986                           ;PS_2.c: 337: }
  7987                           ;PS_2.c: 338: }
  7988                           ;PS_2.c: 339: }
  7989                           ;PS_2.c: 340: }
  7990  0323  2C62               	goto	l6703
  7991  0324                     l6567:	
  7992                           
  7993                           ;PS_2.c: 341: else if(PS_2_Read_Data_Second)
  7994  0324  0023               	movlb	3	; select bank3
  7995  0325  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7996  0326  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7997  0327  1903               	skipnz
  7998  0328  2C62               	goto	l6703
  7999                           
  8000                           ;PS_2.c: 342: {
  8001                           ;PS_2.c: 344: if(PS_2_Read_Data_First == 0xF0)
  8002  0329  30F0               	movlw	240
  8003  032A  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8004  032B  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8005  032C  1D03               	skipz
  8006  032D  2C09               	goto	l6671
  8007                           
  8008                           ;PS_2.c: 345: {
  8009                           ;PS_2.c: 347: if(PS_2_Read_Data_Second == 0x12 || PS_2_Read_Data_Second == 0x59)
  8010  032E  3012               	movlw	18
  8011  032F  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8012  0330  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8013  0331  1903               	skipnz
  8014  0332  2B38               	goto	l6575
  8015  0333  3059               	movlw	89
  8016  0334  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8017  0335  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8018  0336  1D03               	skipz
  8019  0337  2B7E               	goto	l6607
  8020  0338                     l6575:	
  8021                           
  8022                           ;PS_2.c: 348: {
  8023                           ;PS_2.c: 349: if(!Send_PS2(0xED))
  8024  0338  30ED               	movlw	237
  8025  0339  3196  2661  3181   	fcall	_Send_PS2
  8026  033C  3800               	iorlw	0
  8027  033D  1D03               	skipz
  8028  033E  2B48               	goto	l6581
  8029                           
  8030                           ;PS_2.c: 350: {
  8031                           ;PS_2.c: 351: if(!Send_PS2(0x00))
  8032  033F  3000               	movlw	0
  8033  0340  3196  2661  3181   	fcall	_Send_PS2
  8034  0343  3800               	iorlw	0
  8035  0344  1D03               	skipz
  8036  0345  2B48               	goto	l6581
  8037                           
  8038                           ;PS_2.c: 352: {
  8039                           ;PS_2.c: 353: Shift_Key = 0;
  8040  0346  0023               	movlb	3	; select bank3
  8041  0347  01AE               	clrf	_Shift_Key^(0+384)
  8042  0348                     l6581:	
  8043                           
  8044                           ;PS_2.c: 354: }
  8045                           ;PS_2.c: 355: }
  8046                           ;PS_2.c: 356: if(Caps_Lock)
  8047  0348  0023               	movlb	3	; select bank3
  8048  0349  082D               	movf	_Caps_Lock^(0+384),w
  8049  034A  1903               	btfsc	3,2
  8050  034B  2B65               	goto	l6595
  8051                           
  8052                           ;PS_2.c: 357: {
  8053                           ;PS_2.c: 358: CapsCount=0;
  8054  034C  01AC               	clrf	_CapsCount^(0+384)
  8055  034D                     l6593:	
  8056                           ;PS_2.c: 359: while(CapsCount<10)
  8057                           
  8058  034D  300A               	movlw	10
  8059  034E  022C               	subwf	_CapsCount^(0+384),w
  8060  034F  1803               	btfsc	3,0
  8061  0350  2C62               	goto	l6703
  8062                           
  8063                           ;PS_2.c: 360: {
  8064                           ;PS_2.c: 361: if(!Send_PS2(0xED))
  8065  0351  30ED               	movlw	237
  8066  0352  3196  2661  3181   	fcall	_Send_PS2
  8067  0355  3800               	iorlw	0
  8068  0356  1D03               	skipz
  8069  0357  2B5F               	goto	l6591
  8070                           
  8071                           ;PS_2.c: 362: {
  8072                           ;PS_2.c: 363: if(!Send_PS2(0x04))
  8073  0358  3004               	movlw	4
  8074  0359  3196  2661  3181   	fcall	_Send_PS2
  8075  035C  3800               	iorlw	0
  8076  035D  1903               	btfsc	3,2
  8077  035E  2C62               	goto	l6703
  8078  035F                     l6591:	
  8079                           ;PS_2.c: 364: {
  8080                           ;PS_2.c: 365: break;
  8081                           
  8082                           
  8083                           ;PS_2.c: 366: }
  8084                           ;PS_2.c: 367: }
  8085                           ;PS_2.c: 368: CapsCount++;
  8086  035F  3001               	movlw	1
  8087  0360  0023               	movlb	3	; select bank3
  8088  0361  00AF               	movwf	??_PS_2_Update^(0+384)
  8089  0362  082F               	movf	??_PS_2_Update^(0+384),w
  8090  0363  07AC               	addwf	_CapsCount^(0+384),f
  8091  0364  2B4D               	goto	l6593
  8092  0365                     l6595:	
  8093                           ;PS_2.c: 369: }
  8094                           ;PS_2.c: 370: }
  8095                           
  8096                           
  8097                           ;PS_2.c: 371: else
  8098                           ;PS_2.c: 372: {
  8099                           ;PS_2.c: 373: CapsCount=0;
  8100  0365  01AC               	clrf	_CapsCount^(0+384)
  8101  0366                     l6605:	
  8102                           ;PS_2.c: 374: while(CapsCount<10)
  8103                           
  8104  0366  300A               	movlw	10
  8105  0367  022C               	subwf	_CapsCount^(0+384),w
  8106  0368  1803               	btfsc	3,0
  8107  0369  2C62               	goto	l6703
  8108                           
  8109                           ;PS_2.c: 375: {
  8110                           ;PS_2.c: 376: if(!Send_PS2(0xED))
  8111  036A  30ED               	movlw	237
  8112  036B  3196  2661  3181   	fcall	_Send_PS2
  8113  036E  3800               	iorlw	0
  8114  036F  1D03               	skipz
  8115  0370  2B78               	goto	l6603
  8116                           
  8117                           ;PS_2.c: 377: {
  8118                           ;PS_2.c: 378: if(!Send_PS2(0x00))
  8119  0371  3000               	movlw	0
  8120  0372  3196  2661  3181   	fcall	_Send_PS2
  8121  0375  3800               	iorlw	0
  8122  0376  1903               	btfsc	3,2
  8123  0377  2C62               	goto	l6703
  8124  0378                     l6603:	
  8125                           ;PS_2.c: 379: {
  8126                           ;PS_2.c: 380: break;
  8127                           
  8128                           
  8129                           ;PS_2.c: 381: }
  8130                           ;PS_2.c: 382: }
  8131                           ;PS_2.c: 383: CapsCount++;
  8132  0378  3001               	movlw	1
  8133  0379  0023               	movlb	3	; select bank3
  8134  037A  00AF               	movwf	??_PS_2_Update^(0+384)
  8135  037B  082F               	movf	??_PS_2_Update^(0+384),w
  8136  037C  07AC               	addwf	_CapsCount^(0+384),f
  8137  037D  2B66               	goto	l6605
  8138  037E                     l6607:	
  8139                           ;PS_2.c: 384: }
  8140                           ;PS_2.c: 385: }
  8141                           ;PS_2.c: 386: }
  8142                           
  8143                           
  8144                           ;PS_2.c: 387: else if(PS_2_Read_Data_Second == 0x14)
  8145  037E  3014               	movlw	20
  8146  037F  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8147  0380  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8148  0381  1D03               	skipz
  8149  0382  2B86               	goto	l6611
  8150                           
  8151                           ;PS_2.c: 388: {
  8152                           ;PS_2.c: 389: RControl =0;
  8153  0383  0022               	movlb	2	; select bank2
  8154  0384  01E8               	clrf	_RControl^(0+256)
  8155                           
  8156                           ;PS_2.c: 390: }
  8157  0385  2C62               	goto	l6703
  8158  0386                     l6611:	
  8159                           
  8160                           ;PS_2.c: 391: else if(PS_2_Read_Data_Second == 0x11 )
  8161  0386  3011               	movlw	17
  8162  0387  0023               	movlb	3	; select bank3
  8163  0388  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8164  0389  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8165  038A  1D03               	skipz
  8166  038B  2B8F               	goto	l6615
  8167                           
  8168                           ;PS_2.c: 392: {
  8169                           ;PS_2.c: 393: RALT =0;
  8170  038C  0020               	movlb	0	; select bank0
  8171  038D  01EA               	clrf	_RALT
  8172                           
  8173                           ;PS_2.c: 394: }
  8174  038E  2C62               	goto	l6703
  8175  038F                     l6615:	
  8176                           
  8177                           ;PS_2.c: 395: else if(PS_2_Read_Data_Second == 0x58)
  8178  038F  3058               	movlw	88
  8179  0390  0023               	movlb	3	; select bank3
  8180  0391  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8181  0392  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8182  0393  1D03               	skipz
  8183  0394  2C62               	goto	l6703
  8184                           
  8185                           ;PS_2.c: 396: {
  8186                           ;PS_2.c: 397: if(Caps_Lock)
  8187  0395  082D               	movf	_Caps_Lock^(0+384),w
  8188  0396  1903               	btfsc	3,2
  8189  0397  2BD0               	goto	l6645
  8190                           
  8191                           ;PS_2.c: 398: {
  8192                           ;PS_2.c: 399: if(Shift_Key)
  8193  0398  082E               	movf	_Shift_Key^(0+384),w
  8194  0399  1903               	btfsc	3,2
  8195  039A  2BB4               	goto	l6633
  8196                           
  8197                           ;PS_2.c: 400: {
  8198                           ;PS_2.c: 401: CapsCount=0;
  8199  039B  01AC               	clrf	_CapsCount^(0+384)
  8200  039C                     l6631:	
  8201                           ;PS_2.c: 402: while(CapsCount<10)
  8202                           
  8203  039C  300A               	movlw	10
  8204  039D  022C               	subwf	_CapsCount^(0+384),w
  8205  039E  1803               	btfsc	3,0
  8206  039F  2C62               	goto	l6703
  8207                           
  8208                           ;PS_2.c: 403: {
  8209                           ;PS_2.c: 404: if(!Send_PS2(0xED))
  8210  03A0  30ED               	movlw	237
  8211  03A1  3196  2661  3181   	fcall	_Send_PS2
  8212  03A4  3800               	iorlw	0
  8213  03A5  1D03               	skipz
  8214  03A6  2BAE               	goto	l6629
  8215                           
  8216                           ;PS_2.c: 405: {
  8217                           ;PS_2.c: 406: if(!Send_PS2(0x01))
  8218  03A7  3001               	movlw	1
  8219  03A8  3196  2661  3181   	fcall	_Send_PS2
  8220  03AB  3800               	iorlw	0
  8221  03AC  1903               	btfsc	3,2
  8222  03AD  2BC7               	goto	l6639
  8223  03AE                     l6629:	
  8224                           ;PS_2.c: 409: break;
  8225                           
  8226                           ;PS_2.c: 407: {
  8227                           ;PS_2.c: 408: Caps_Lock =0;
  8228                           
  8229                           
  8230                           ;PS_2.c: 410: }
  8231                           ;PS_2.c: 411: }
  8232                           ;PS_2.c: 412: CapsCount++;
  8233  03AE  3001               	movlw	1
  8234  03AF  0023               	movlb	3	; select bank3
  8235  03B0  00AF               	movwf	??_PS_2_Update^(0+384)
  8236  03B1  082F               	movf	??_PS_2_Update^(0+384),w
  8237  03B2  07AC               	addwf	_CapsCount^(0+384),f
  8238  03B3  2B9C               	goto	l6631
  8239  03B4                     l6633:	
  8240                           ;PS_2.c: 413: }
  8241                           ;PS_2.c: 414: }
  8242                           
  8243                           
  8244                           ;PS_2.c: 415: else
  8245                           ;PS_2.c: 416: {
  8246                           ;PS_2.c: 417: CapsCount=0;
  8247  03B4  01AC               	clrf	_CapsCount^(0+384)
  8248  03B5                     l6643:	
  8249                           ;PS_2.c: 418: while(CapsCount<10)
  8250                           
  8251  03B5  300A               	movlw	10
  8252  03B6  022C               	subwf	_CapsCount^(0+384),w
  8253  03B7  1803               	btfsc	3,0
  8254  03B8  2C62               	goto	l6703
  8255                           
  8256                           ;PS_2.c: 419: {
  8257                           ;PS_2.c: 420: if(!Send_PS2(0xED))
  8258  03B9  30ED               	movlw	237
  8259  03BA  3196  2661  3181   	fcall	_Send_PS2
  8260  03BD  3800               	iorlw	0
  8261  03BE  1D03               	skipz
  8262  03BF  2BCA               	goto	l6641
  8263                           
  8264                           ;PS_2.c: 421: {
  8265                           ;PS_2.c: 422: if(!Send_PS2(0x00))
  8266  03C0  3000               	movlw	0
  8267  03C1  3196  2661  3181   	fcall	_Send_PS2
  8268  03C4  3800               	iorlw	0
  8269  03C5  1D03               	skipz
  8270  03C6  2BCA               	goto	l6641
  8271  03C7                     l6639:	
  8272                           
  8273                           ;PS_2.c: 423: {
  8274                           ;PS_2.c: 424: Caps_Lock =0;
  8275  03C7  0023               	movlb	3	; select bank3
  8276  03C8  01AD               	clrf	_Caps_Lock^(0+384)
  8277                           
  8278                           ;PS_2.c: 425: break;
  8279  03C9  2C62               	goto	l6703
  8280  03CA                     l6641:	
  8281                           
  8282                           ;PS_2.c: 426: }
  8283                           ;PS_2.c: 427: }
  8284                           ;PS_2.c: 428: CapsCount++;
  8285  03CA  3001               	movlw	1
  8286  03CB  0023               	movlb	3	; select bank3
  8287  03CC  00AF               	movwf	??_PS_2_Update^(0+384)
  8288  03CD  082F               	movf	??_PS_2_Update^(0+384),w
  8289  03CE  07AC               	addwf	_CapsCount^(0+384),f
  8290  03CF  2BB5               	goto	l6643
  8291  03D0                     l6645:	
  8292                           ;PS_2.c: 429: }
  8293                           ;PS_2.c: 430: }
  8294                           ;PS_2.c: 431: }
  8295                           
  8296                           
  8297                           ;PS_2.c: 432: else
  8298                           ;PS_2.c: 433: {
  8299                           ;PS_2.c: 434: if(Shift_Key)
  8300  03D0  082E               	movf	_Shift_Key^(0+384),w
  8301  03D1  1903               	btfsc	3,2
  8302  03D2  2BEC               	goto	l6659
  8303                           
  8304                           ;PS_2.c: 435: {
  8305                           ;PS_2.c: 436: CapsCount=0;
  8306  03D3  01AC               	clrf	_CapsCount^(0+384)
  8307  03D4                     l6657:	
  8308                           ;PS_2.c: 437: while(CapsCount<10)
  8309                           
  8310  03D4  300A               	movlw	10
  8311  03D5  022C               	subwf	_CapsCount^(0+384),w
  8312  03D6  1803               	btfsc	3,0
  8313  03D7  2C62               	goto	l6703
  8314                           
  8315                           ;PS_2.c: 438: {
  8316                           ;PS_2.c: 439: if(!Send_PS2(0xED))
  8317  03D8  30ED               	movlw	237
  8318  03D9  3196  2661  3181   	fcall	_Send_PS2
  8319  03DC  3800               	iorlw	0
  8320  03DD  1D03               	skipz
  8321  03DE  2BE6               	goto	l6655
  8322                           
  8323                           ;PS_2.c: 440: {
  8324                           ;PS_2.c: 441: if(!Send_PS2(0x05))
  8325  03DF  3005               	movlw	5
  8326  03E0  3196  2661  3181   	fcall	_Send_PS2
  8327  03E3  3800               	iorlw	0
  8328  03E4  1903               	btfsc	3,2
  8329  03E5  2BFF               	goto	l6665
  8330  03E6                     l6655:	
  8331                           ;PS_2.c: 444: break;
  8332                           
  8333                           ;PS_2.c: 442: {
  8334                           ;PS_2.c: 443: Caps_Lock =1;
  8335                           
  8336                           
  8337                           ;PS_2.c: 445: }
  8338                           ;PS_2.c: 446: }
  8339                           ;PS_2.c: 447: CapsCount++;
  8340  03E6  3001               	movlw	1
  8341  03E7  0023               	movlb	3	; select bank3
  8342  03E8  00AF               	movwf	??_PS_2_Update^(0+384)
  8343  03E9  082F               	movf	??_PS_2_Update^(0+384),w
  8344  03EA  07AC               	addwf	_CapsCount^(0+384),f
  8345  03EB  2BD4               	goto	l6657
  8346  03EC                     l6659:	
  8347                           ;PS_2.c: 448: }
  8348                           ;PS_2.c: 449: }
  8349                           
  8350                           
  8351                           ;PS_2.c: 450: else
  8352                           ;PS_2.c: 451: {
  8353                           ;PS_2.c: 452: CapsCount=0;
  8354  03EC  01AC               	clrf	_CapsCount^(0+384)
  8355  03ED                     l6669:	
  8356                           ;PS_2.c: 453: while(CapsCount<10)
  8357                           
  8358  03ED  300A               	movlw	10
  8359  03EE  022C               	subwf	_CapsCount^(0+384),w
  8360  03EF  1803               	btfsc	3,0
  8361  03F0  2C62               	goto	l6703
  8362                           
  8363                           ;PS_2.c: 454: {
  8364                           ;PS_2.c: 455: if(!Send_PS2(0xED))
  8365  03F1  30ED               	movlw	237
  8366  03F2  3196  2661  3181   	fcall	_Send_PS2
  8367  03F5  3800               	iorlw	0
  8368  03F6  1D03               	skipz
  8369  03F7  2C03               	goto	l6667
  8370                           
  8371                           ;PS_2.c: 456: {
  8372                           ;PS_2.c: 457: if(!Send_PS2(0x04))
  8373  03F8  3004               	movlw	4
  8374  03F9  3196  2661  3181   	fcall	_Send_PS2
  8375  03FC  3800               	iorlw	0
  8376  03FD  1D03               	skipz
  8377  03FE  2C03               	goto	l6667
  8378  03FF                     l6665:	
  8379                           
  8380                           ;PS_2.c: 458: {
  8381                           ;PS_2.c: 459: Caps_Lock =1;
  8382  03FF  0023               	movlb	3	; select bank3
  8383  0400  01AD               	clrf	_Caps_Lock^(0+384)
  8384  0401  0AAD               	incf	_Caps_Lock^(0+384),f
  8385                           
  8386                           ;PS_2.c: 460: break;
  8387  0402  2C62               	goto	l6703
  8388  0403                     l6667:	
  8389                           
  8390                           ;PS_2.c: 461: }
  8391                           ;PS_2.c: 462: }
  8392                           ;PS_2.c: 463: CapsCount++;
  8393  0403  3001               	movlw	1
  8394  0404  0023               	movlb	3	; select bank3
  8395  0405  00AF               	movwf	??_PS_2_Update^(0+384)
  8396  0406  082F               	movf	??_PS_2_Update^(0+384),w
  8397  0407  07AC               	addwf	_CapsCount^(0+384),f
  8398  0408  2BED               	goto	l6669
  8399  0409                     l6671:	
  8400                           ;PS_2.c: 464: }
  8401                           ;PS_2.c: 465: }
  8402                           ;PS_2.c: 466: }
  8403                           ;PS_2.c: 467: }
  8404                           ;PS_2.c: 468: }
  8405                           
  8406                           
  8407                           ;PS_2.c: 469: else if(PS_2_Read_Data_First == 0xE0)
  8408  0409  30E0               	movlw	224
  8409  040A  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8410  040B  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8411  040C  1D03               	skipz
  8412  040D  2C62               	goto	l6703
  8413                           
  8414                           ;PS_2.c: 470: {
  8415                           ;PS_2.c: 472: if(PS_2_Read_Data_Second == 0x11 )
  8416  040E  3011               	movlw	17
  8417  040F  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8418  0410  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8419  0411  1D03               	skipz
  8420  0412  2C17               	goto	l6677
  8421                           
  8422                           ;PS_2.c: 473: {
  8423                           ;PS_2.c: 474: LALT = 1;
  8424  0413  0020               	movlb	0	; select bank0
  8425  0414  01E6               	clrf	_LALT
  8426  0415  0AE6               	incf	_LALT,f
  8427                           
  8428                           ;PS_2.c: 475: }
  8429  0416  2C2A               	goto	l774
  8430  0417                     l6677:	
  8431                           
  8432                           ;PS_2.c: 476: else if(PS_2_Read_Data_Second == 0x14 )
  8433  0417  3014               	movlw	20
  8434  0418  0023               	movlb	3	; select bank3
  8435  0419  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8436  041A  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8437  041B  1D03               	skipz
  8438  041C  2C21               	goto	l6681
  8439                           
  8440                           ;PS_2.c: 477: {
  8441                           ;PS_2.c: 478: LControl = 1;
  8442  041D  0022               	movlb	2	; select bank2
  8443  041E  01E7               	clrf	_LControl^(0+256)
  8444  041F  0AE7               	incf	_LControl^(0+256),f
  8445                           
  8446                           ;PS_2.c: 479: }
  8447  0420  2C2A               	goto	l774
  8448  0421                     l6681:	
  8449                           
  8450                           ;PS_2.c: 480: else if(PS_2_Read_Data_Second == 0x71 )
  8451  0421  3071               	movlw	113
  8452  0422  0023               	movlb	3	; select bank3
  8453  0423  0628               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8454  0424  0429               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8455  0425  1D03               	skipz
  8456  0426  2C2A               	goto	l774
  8457                           
  8458                           ;PS_2.c: 481: {
  8459                           ;PS_2.c: 482: Delete = 1;
  8460  0427  0022               	movlb	2	; select bank2
  8461  0428  01E6               	clrf	_Delete^(0+256)
  8462  0429  0AE6               	incf	_Delete^(0+256),f
  8463  042A                     l774:	
  8464                           
  8465                           ;PS_2.c: 483: }
  8466                           ;PS_2.c: 484: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8467  042A  0025               	movlb	5	; select bank5
  8468  042B  01DC               	clrf	_PS_2_Update$848^(0+640)
  8469  042C  0ADC               	incf	_PS_2_Update$848^(0+640),f
  8470  042D  0020               	movlb	0	; select bank0
  8471  042E  08E6               	movf	_LALT,f
  8472  042F  1D03               	skipz
  8473  0430  2C36               	goto	l6691
  8474  0431  08EA               	movf	_RALT,f
  8475  0432  1D03               	skipz
  8476  0433  2C36               	goto	l6691
  8477  0434  0025               	movlb	5	; select bank5
  8478  0435  01DC               	clrf	_PS_2_Update$848^(0+640)
  8479  0436                     l6691:	
  8480  0436  0025               	movlb	5	; select bank5
  8481  0437  01DD               	clrf	_PS_2_Update$849^(0+640)
  8482  0438  0ADD               	incf	_PS_2_Update$849^(0+640),f
  8483  0439  0022               	movlb	2	; select bank2
  8484  043A  08E8               	movf	_RControl^(0+256),f
  8485  043B  1D03               	skipz
  8486  043C  2C42               	goto	l6699
  8487  043D  08E7               	movf	_LControl^(0+256),f
  8488  043E  1D03               	skipz
  8489  043F  2C42               	goto	l6699
  8490  0440  0025               	movlb	5	; select bank5
  8491  0441  01DD               	clrf	_PS_2_Update$849^(0+640)
  8492  0442                     l6699:	
  8493  0442  0022               	movlb	2	; select bank2
  8494  0443  0866               	movf	_Delete^(0+256),w
  8495  0444  0023               	movlb	3	; select bank3
  8496  0445  00AF               	movwf	??_PS_2_Update^(0+384)
  8497  0446  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8498  0447  0025               	movlb	5	; select bank5
  8499  0448  085D               	movf	_PS_2_Update$849^(0+640),w
  8500  0449  075C               	addwf	_PS_2_Update$848^(0+640),w
  8501  044A  0023               	movlb	3	; select bank3
  8502  044B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8503  044C  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8504  044D  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8505  044E  082F               	movf	??_PS_2_Update^(0+384),w
  8506  044F  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8507  0450  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8508  0451  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8509  0452  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8510  0453  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8511  0454  3003               	movlw	3
  8512  0455  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8513  0456  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8514  0457  1903               	skipnz
  8515  0458  2C62               	goto	l6703
  8516                           
  8517                           ;PS_2.c: 485: {
  8518                           ;PS_2.c: 487: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8519  0459  0828               	movf	_PS_2_Read_Data_Second^(0+384),w
  8520  045A  3199  2159  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8521  045D  0023               	movlb	3	; select bank3
  8522  045E  00AF               	movwf	??_PS_2_Update^(0+384)
  8523  045F  082F               	movf	??_PS_2_Update^(0+384),w
  8524  0460  0025               	movlb	5	; select bank5
  8525  0461  00E0               	movwf	PS_2_Update@temp^(0+640)
  8526  0462                     l6703:	
  8527                           
  8528                           ;PS_2.c: 488: }
  8529                           ;PS_2.c: 489: }
  8530                           ;PS_2.c: 490: }
  8531                           ;PS_2.c: 491: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8532                           ;PS_2.c: 492: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8533  0462  0023               	movlb	3	; select bank3
  8534  0463  0825               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8535  0464  0424               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8536  0465  1903               	skipnz
  8537  0466  2D27               	goto	l6781
  8538  0467  0829               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8539  0468  0428               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8540  0469  1D03               	skipz
  8541  046A  2D27               	goto	l6781
  8542  046B  082B               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8543  046C  042A               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8544  046D  1D03               	skipz
  8545  046E  2D27               	goto	l6781
  8546  046F  0827               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8547  0470  0426               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8548  0471  1D03               	skipz
  8549  0472  2D27               	goto	l6781
  8550                           
  8551                           ;PS_2.c: 493: {
  8552                           ;PS_2.c: 495: if(PS_2_Read_Data_First == 0x12 || PS_2_Read_Data_First == 0x59)
  8553  0473  3012               	movlw	18
  8554  0474  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8555  0475  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8556  0476  1903               	skipnz
  8557  0477  2C7D               	goto	l6715
  8558  0478  3059               	movlw	89
  8559  0479  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8560  047A  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8561  047B  1D03               	skipz
  8562  047C  2CBE               	goto	l6743
  8563  047D                     l6715:	
  8564                           
  8565                           ;PS_2.c: 496: {
  8566                           ;PS_2.c: 497: if(!Send_PS2(0xED))
  8567  047D  30ED               	movlw	237
  8568  047E  3196  2661  3181   	fcall	_Send_PS2
  8569  0481  3800               	iorlw	0
  8570  0482  1D03               	skipz
  8571  0483  2D27               	goto	l6781
  8572                           
  8573                           ;PS_2.c: 498: {
  8574                           ;PS_2.c: 499: if(Caps_Lock)
  8575  0484  0023               	movlb	3	; select bank3
  8576  0485  082D               	movf	_Caps_Lock^(0+384),w
  8577  0486  1903               	btfsc	3,2
  8578  0487  2CA1               	goto	l6731
  8579                           
  8580                           ;PS_2.c: 500: {
  8581                           ;PS_2.c: 501: CapsCount=0;
  8582  0488  01AC               	clrf	_CapsCount^(0+384)
  8583  0489                     l6729:	
  8584                           ;PS_2.c: 502: while(CapsCount<10)
  8585                           
  8586  0489  300A               	movlw	10
  8587  048A  022C               	subwf	_CapsCount^(0+384),w
  8588  048B  1803               	btfsc	3,0
  8589  048C  2D27               	goto	l6781
  8590                           
  8591                           ;PS_2.c: 503: {
  8592                           ;PS_2.c: 504: if(!Send_PS2(0xED))
  8593  048D  30ED               	movlw	237
  8594  048E  3196  2661  3181   	fcall	_Send_PS2
  8595  0491  3800               	iorlw	0
  8596  0492  1D03               	skipz
  8597  0493  2C9B               	goto	l6727
  8598                           
  8599                           ;PS_2.c: 505: {
  8600                           ;PS_2.c: 506: if(!Send_PS2(0x05))
  8601  0494  3005               	movlw	5
  8602  0495  3196  2661  3181   	fcall	_Send_PS2
  8603  0498  3800               	iorlw	0
  8604  0499  1903               	btfsc	3,2
  8605  049A  2CB4               	goto	l6737
  8606  049B                     l6727:	
  8607                           ;PS_2.c: 509: break;
  8608                           
  8609                           ;PS_2.c: 507: {
  8610                           ;PS_2.c: 508: Shift_Key = 1;
  8611                           
  8612                           
  8613                           ;PS_2.c: 510: }
  8614                           ;PS_2.c: 511: }
  8615                           ;PS_2.c: 512: CapsCount++;
  8616  049B  3001               	movlw	1
  8617  049C  0023               	movlb	3	; select bank3
  8618  049D  00AF               	movwf	??_PS_2_Update^(0+384)
  8619  049E  082F               	movf	??_PS_2_Update^(0+384),w
  8620  049F  07AC               	addwf	_CapsCount^(0+384),f
  8621  04A0  2C89               	goto	l6729
  8622  04A1                     l6731:	
  8623                           ;PS_2.c: 513: }
  8624                           ;PS_2.c: 514: }
  8625                           
  8626                           
  8627                           ;PS_2.c: 515: else
  8628                           ;PS_2.c: 516: {
  8629                           ;PS_2.c: 517: CapsCount=0;
  8630  04A1  01AC               	clrf	_CapsCount^(0+384)
  8631  04A2                     l6741:	
  8632                           ;PS_2.c: 518: while(CapsCount<10)
  8633                           
  8634  04A2  300A               	movlw	10
  8635  04A3  022C               	subwf	_CapsCount^(0+384),w
  8636  04A4  1803               	btfsc	3,0
  8637  04A5  2D27               	goto	l6781
  8638                           
  8639                           ;PS_2.c: 519: {
  8640                           ;PS_2.c: 520: if(!Send_PS2(0xED))
  8641  04A6  30ED               	movlw	237
  8642  04A7  3196  2661  3181   	fcall	_Send_PS2
  8643  04AA  3800               	iorlw	0
  8644  04AB  1D03               	skipz
  8645  04AC  2CB8               	goto	l6739
  8646                           
  8647                           ;PS_2.c: 521: {
  8648                           ;PS_2.c: 522: if(!Send_PS2(0x01))
  8649  04AD  3001               	movlw	1
  8650  04AE  3196  2661  3181   	fcall	_Send_PS2
  8651  04B1  3800               	iorlw	0
  8652  04B2  1D03               	skipz
  8653  04B3  2CB8               	goto	l6739
  8654  04B4                     l6737:	
  8655                           
  8656                           ;PS_2.c: 523: {
  8657                           ;PS_2.c: 524: Shift_Key = 1;
  8658  04B4  0023               	movlb	3	; select bank3
  8659  04B5  01AE               	clrf	_Shift_Key^(0+384)
  8660  04B6  0AAE               	incf	_Shift_Key^(0+384),f
  8661                           
  8662                           ;PS_2.c: 525: break;
  8663  04B7  2D27               	goto	l6781
  8664  04B8                     l6739:	
  8665                           
  8666                           ;PS_2.c: 526: }
  8667                           ;PS_2.c: 527: }
  8668                           ;PS_2.c: 528: CapsCount++;
  8669  04B8  3001               	movlw	1
  8670  04B9  0023               	movlb	3	; select bank3
  8671  04BA  00AF               	movwf	??_PS_2_Update^(0+384)
  8672  04BB  082F               	movf	??_PS_2_Update^(0+384),w
  8673  04BC  07AC               	addwf	_CapsCount^(0+384),f
  8674  04BD  2CA2               	goto	l6741
  8675  04BE                     l6743:	
  8676                           ;PS_2.c: 529: }
  8677                           ;PS_2.c: 530: }
  8678                           ;PS_2.c: 531: }
  8679                           ;PS_2.c: 532: }
  8680                           
  8681                           
  8682                           ;PS_2.c: 533: else if(PS_2_Read_Data_First == 0x14 )
  8683  04BE  3014               	movlw	20
  8684  04BF  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8685  04C0  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8686  04C1  1D03               	skipz
  8687  04C2  2CC7               	goto	l6747
  8688                           
  8689                           ;PS_2.c: 534: {
  8690                           ;PS_2.c: 535: RControl = 1;
  8691  04C3  0022               	movlb	2	; select bank2
  8692  04C4  01E8               	clrf	_RControl^(0+256)
  8693  04C5  0AE8               	incf	_RControl^(0+256),f
  8694                           
  8695                           ;PS_2.c: 536: }
  8696  04C6  2D27               	goto	l6781
  8697  04C7                     l6747:	
  8698                           
  8699                           ;PS_2.c: 537: else if(PS_2_Read_Data_First == 0x11 )
  8700  04C7  3011               	movlw	17
  8701  04C8  0023               	movlb	3	; select bank3
  8702  04C9  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8703  04CA  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8704  04CB  1D03               	skipz
  8705  04CC  2CD1               	goto	l6751
  8706                           
  8707                           ;PS_2.c: 538: {
  8708                           ;PS_2.c: 539: RALT = 1;
  8709  04CD  0020               	movlb	0	; select bank0
  8710  04CE  01EA               	clrf	_RALT
  8711  04CF  0AEA               	incf	_RALT,f
  8712                           
  8713                           ;PS_2.c: 540: }
  8714  04D0  2D27               	goto	l6781
  8715  04D1                     l6751:	
  8716                           
  8717                           ;PS_2.c: 541: else if(PS_2_Read_Data_First == 0xEE )
  8718  04D1  30EE               	movlw	238
  8719  04D2  0023               	movlb	3	; select bank3
  8720  04D3  0624               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8721  04D4  0425               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8722  04D5  1D03               	skipz
  8723  04D6  2CDD               	goto	l6755
  8724                           
  8725                           ;PS_2.c: 542: {
  8726                           ;PS_2.c: 543: ECHO = 1;
  8727  04D7  3001               	movlw	1
  8728  04D8  00AF               	movwf	??_PS_2_Update^(0+384)
  8729  04D9  082F               	movf	??_PS_2_Update^(0+384),w
  8730  04DA  0021               	movlb	1	; select bank1
  8731  04DB  00E9               	movwf	_ECHO^(0+128)	;volatile
  8732                           
  8733                           ;PS_2.c: 544: }
  8734  04DC  2D27               	goto	l6781
  8735  04DD                     l6755:	
  8736                           
  8737                           ;PS_2.c: 545: else
  8738                           ;PS_2.c: 546: {
  8739                           ;PS_2.c: 547: if(Shift_Key ==1)
  8740  04DD  0023               	movlb	3	; select bank3
  8741  04DE  082E               	movf	_Shift_Key^(0+384),w
  8742  04DF  3A01               	xorlw	1
  8743  04E0  1D03               	skipz
  8744  04E1  2CFF               	goto	l6767
  8745                           
  8746                           ;PS_2.c: 548: {
  8747                           ;PS_2.c: 550: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8748  04E2  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8749  04E3  3199  216C  3181   	fcall	_Decode_Scan_Code_Shift
  8750  04E6  0023               	movlb	3	; select bank3
  8751  04E7  00AF               	movwf	??_PS_2_Update^(0+384)
  8752  04E8  082F               	movf	??_PS_2_Update^(0+384),w
  8753  04E9  0025               	movlb	5	; select bank5
  8754  04EA  00E0               	movwf	PS_2_Update@temp^(0+640)
  8755                           
  8756                           ;PS_2.c: 551: if(Caps_Lock)
  8757  04EB  0023               	movlb	3	; select bank3
  8758  04EC  082D               	movf	_Caps_Lock^(0+384),w
  8759  04ED  1903               	btfsc	3,2
  8760  04EE  2D19               	goto	l6777
  8761                           
  8762                           ;PS_2.c: 552: {
  8763                           ;PS_2.c: 554: if(temp >= 'A' && temp <= 'Z')
  8764  04EF  3041               	movlw	65
  8765  04F0  0025               	movlb	5	; select bank5
  8766  04F1  0260               	subwf	PS_2_Update@temp^(0+640),w
  8767  04F2  1C03               	skipc
  8768  04F3  2D18               	goto	l811
  8769  04F4  305B               	movlw	91
  8770  04F5  0260               	subwf	PS_2_Update@temp^(0+640),w
  8771  04F6  1803               	skipnc
  8772  04F7  2D18               	goto	l811
  8773                           
  8774                           ;PS_2.c: 555: {
  8775                           ;PS_2.c: 556: temp += 32;
  8776  04F8  3020               	movlw	32
  8777  04F9  0023               	movlb	3	; select bank3
  8778  04FA  00AF               	movwf	??_PS_2_Update^(0+384)
  8779  04FB  082F               	movf	??_PS_2_Update^(0+384),w
  8780  04FC  0025               	movlb	5	; select bank5
  8781  04FD  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8782  04FE  2D18               	goto	l811
  8783  04FF                     l6767:	
  8784                           ;PS_2.c: 557: }
  8785                           ;PS_2.c: 558: }
  8786                           ;PS_2.c: 559: }
  8787                           
  8788                           
  8789                           ;PS_2.c: 560: else
  8790                           ;PS_2.c: 561: {
  8791                           ;PS_2.c: 562: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8792  04FF  0023               	movlb	3	; select bank3
  8793  0500  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8794  0501  3199  2146  3181   	fcall	_Decode_Scan_Code
  8795  0504  0023               	movlb	3	; select bank3
  8796  0505  00AF               	movwf	??_PS_2_Update^(0+384)
  8797  0506  082F               	movf	??_PS_2_Update^(0+384),w
  8798  0507  0025               	movlb	5	; select bank5
  8799  0508  00E0               	movwf	PS_2_Update@temp^(0+640)
  8800                           
  8801                           ;PS_2.c: 563: if(Caps_Lock)
  8802  0509  0023               	movlb	3	; select bank3
  8803  050A  082D               	movf	_Caps_Lock^(0+384),w
  8804  050B  1903               	btfsc	3,2
  8805  050C  2D19               	goto	l6777
  8806                           
  8807                           ;PS_2.c: 564: {
  8808                           ;PS_2.c: 566: if(temp >= 'a' && temp <= 'z')
  8809  050D  3061               	movlw	97
  8810  050E  0025               	movlb	5	; select bank5
  8811  050F  0260               	subwf	PS_2_Update@temp^(0+640),w
  8812  0510  1C03               	skipc
  8813  0511  2D18               	goto	l811
  8814  0512  307B               	movlw	123
  8815  0513  0260               	subwf	PS_2_Update@temp^(0+640),w
  8816  0514  1803               	skipnc
  8817  0515  2D18               	goto	l811
  8818                           
  8819                           ;PS_2.c: 567: {
  8820                           ;PS_2.c: 568: temp -= 32;
  8821  0516  3020               	movlw	32
  8822  0517  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8823  0518                     l811:	
  8824  0518  0023               	movlb	3	; select bank3
  8825  0519                     l6777:	
  8826                           
  8827                           ;PS_2.c: 569: }
  8828                           ;PS_2.c: 570: }
  8829                           ;PS_2.c: 571: }
  8830                           ;PS_2.c: 572: if(!temp)
  8831  0519  0025               	movlb	5	; select bank5
  8832  051A  08E0               	movf	PS_2_Update@temp^(0+640),f
  8833  051B  1D03               	skipz
  8834  051C  2D27               	goto	l6781
  8835                           
  8836                           ;PS_2.c: 573: {
  8837                           ;PS_2.c: 575: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8838  051D  0023               	movlb	3	; select bank3
  8839  051E  0824               	movf	_PS_2_Read_Data_First^(0+384),w
  8840  051F  3198  20FE  3181   	fcall	_Decode_Scan_Code_Function
  8841  0522  0023               	movlb	3	; select bank3
  8842  0523  00AF               	movwf	??_PS_2_Update^(0+384)
  8843  0524  082F               	movf	??_PS_2_Update^(0+384),w
  8844  0525  0025               	movlb	5	; select bank5
  8845  0526  00E0               	movwf	PS_2_Update@temp^(0+640)
  8846  0527                     l6781:	
  8847                           
  8848                           ;PS_2.c: 576: }
  8849                           ;PS_2.c: 577: }
  8850                           ;PS_2.c: 578: }
  8851                           ;PS_2.c: 579: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8852  0527  0025               	movlb	5	; select bank5
  8853  0528  01DE               	clrf	_PS_2_Update$850^(0+640)
  8854  0529  0ADE               	incf	_PS_2_Update$850^(0+640),f
  8855  052A  0020               	movlb	0	; select bank0
  8856  052B  08E6               	movf	_LALT,f
  8857  052C  1D03               	skipz
  8858  052D  2D33               	goto	l6789
  8859  052E  08EA               	movf	_RALT,f
  8860  052F  1D03               	skipz
  8861  0530  2D33               	goto	l6789
  8862  0531  0025               	movlb	5	; select bank5
  8863  0532  01DE               	clrf	_PS_2_Update$850^(0+640)
  8864  0533                     l6789:	
  8865  0533  0025               	movlb	5	; select bank5
  8866  0534  01DF               	clrf	_PS_2_Update$851^(0+640)
  8867  0535  0ADF               	incf	_PS_2_Update$851^(0+640),f
  8868  0536  0022               	movlb	2	; select bank2
  8869  0537  08E8               	movf	_RControl^(0+256),f
  8870  0538  1D03               	skipz
  8871  0539  2D3F               	goto	l6797
  8872  053A  08E7               	movf	_LControl^(0+256),f
  8873  053B  1D03               	skipz
  8874  053C  2D3F               	goto	l6797
  8875  053D  0025               	movlb	5	; select bank5
  8876  053E  01DF               	clrf	_PS_2_Update$851^(0+640)
  8877  053F                     l6797:	
  8878  053F  0022               	movlb	2	; select bank2
  8879  0540  0866               	movf	_Delete^(0+256),w
  8880  0541  0023               	movlb	3	; select bank3
  8881  0542  00AF               	movwf	??_PS_2_Update^(0+384)
  8882  0543  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8883  0544  0025               	movlb	5	; select bank5
  8884  0545  085F               	movf	_PS_2_Update$851^(0+640),w
  8885  0546  075E               	addwf	_PS_2_Update$850^(0+640),w
  8886  0547  0023               	movlb	3	; select bank3
  8887  0548  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8888  0549  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8889  054A  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8890  054B  082F               	movf	??_PS_2_Update^(0+384),w
  8891  054C  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8892  054D  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8893  054E  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8894  054F  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8895  0550  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8896  0551  3003               	movlw	3
  8897  0552  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8898  0553  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8899  0554  1D03               	skipz
  8900  0555  2DD3               	goto	l6837
  8901                           
  8902                           ;PS_2.c: 580: {
  8903                           ;PS_2.c: 582: UARTstringWAIT("\r\n");
  8904  0556  30F0               	movlw	low ((STR_11+17)| (0+32768))
  8905  0557  0020               	movlb	0	; select bank0
  8906  0558  00B4               	movwf	UARTstringWAIT@data
  8907  0559  308C               	movlw	high ((STR_11+17)| (0+32768))
  8908  055A  00B5               	movwf	UARTstringWAIT@data+1
  8909  055B  319A  22E2  3181   	fcall	_UARTstringWAIT
  8910                           
  8911                           ;PS_2.c: 583: delayUS(10000);
  8912  055E  3000               	movlw	0
  8913  055F  0020               	movlb	0	; select bank0
  8914  0560  00A8               	movwf	delayUS@US+3
  8915  0561  3000               	movlw	0
  8916  0562  00A7               	movwf	delayUS@US+2
  8917  0563  3027               	movlw	39
  8918  0564  00A6               	movwf	delayUS@US+1
  8919  0565  3010               	movlw	16
  8920  0566  00A5               	movwf	delayUS@US
  8921  0567  319B  2315  3181   	fcall	_delayUS
  8922                           
  8923                           ;PS_2.c: 584: if(!BAUDMODE)
  8924  056A  0022               	movlb	2	; select bank2
  8925  056B  08E5               	movf	_BAUDMODE^(0+256),f
  8926  056C  1D03               	skipz
  8927  056D  2D98               	goto	l6817
  8928                           
  8929                           ;PS_2.c: 585: {
  8930                           ;PS_2.c: 586: BaudTyped =0;
  8931  056E  3000               	movlw	0
  8932  056F  0023               	movlb	3	; select bank3
  8933  0570  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8934  0571  3000               	movlw	0
  8935  0572  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8936  0573  3000               	movlw	0
  8937  0574  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8938  0575  3000               	movlw	0
  8939  0576  00A0               	movwf	_BaudTyped^(0+384)
  8940                           
  8941                           ;PS_2.c: 587: ParityTyped =0;
  8942  0577  0020               	movlb	0	; select bank0
  8943  0578  01E9               	clrf	_ParityTyped
  8944                           
  8945                           ;PS_2.c: 588: BAUDMODE = 1;
  8946  0579  0022               	movlb	2	; select bank2
  8947  057A  01E5               	clrf	_BAUDMODE^(0+256)
  8948  057B  0AE5               	incf	_BAUDMODE^(0+256),f
  8949                           
  8950                           ;PS_2.c: 589: UARTstringWAIT("Enter Baud rate\r\n");
  8951  057C  3019               	movlw	low (STR_26| (0+32768))
  8952  057D  0020               	movlb	0	; select bank0
  8953  057E  00B4               	movwf	UARTstringWAIT@data
  8954  057F  308D               	movlw	high (STR_26| (0+32768))
  8955  0580  00B5               	movwf	UARTstringWAIT@data+1
  8956  0581  319A  22E2  3181   	fcall	_UARTstringWAIT
  8957                           
  8958                           ;PS_2.c: 590: delayUS(10000);
  8959  0584  3000               	movlw	0
  8960  0585  0020               	movlb	0	; select bank0
  8961  0586  00A8               	movwf	delayUS@US+3
  8962  0587  3000               	movlw	0
  8963  0588  00A7               	movwf	delayUS@US+2
  8964  0589  3027               	movlw	39
  8965  058A  00A6               	movwf	delayUS@US+1
  8966  058B  3010               	movlw	16
  8967  058C  00A5               	movwf	delayUS@US
  8968  058D  319B  2315  3181   	fcall	_delayUS
  8969                           
  8970                           ;PS_2.c: 591: UARTchar('>' , 0, 0);
  8971  0590  0020               	movlb	0	; select bank0
  8972  0591  01AD               	clrf	UARTchar@NinethBit_override
  8973  0592  01AE               	clrf	UARTchar@NinethBit_override_data
  8974  0593  303E               	movlw	62
  8975  0594  319C  2455  3181   	fcall	_UARTchar
  8976                           
  8977                           ;PS_2.c: 593: }
  8978  0597  2DCB               	goto	l6827
  8979  0598                     l6817:	
  8980                           
  8981                           ;PS_2.c: 594: else
  8982                           ;PS_2.c: 595: {
  8983                           ;PS_2.c: 596: BaudTyped = 9600;
  8984  0598  3000               	movlw	0
  8985  0599  0023               	movlb	3	; select bank3
  8986  059A  00A3               	movwf	(_BaudTyped+3)^(0+384)
  8987  059B  3000               	movlw	0
  8988  059C  00A2               	movwf	(_BaudTyped+2)^(0+384)
  8989  059D  3025               	movlw	37
  8990  059E  00A1               	movwf	(_BaudTyped+1)^(0+384)
  8991  059F  3080               	movlw	128
  8992  05A0  00A0               	movwf	_BaudTyped^(0+384)
  8993                           
  8994                           ;PS_2.c: 597: UARTstringWAIT("Reset to 9600 with no parity bit\r\n");
  8995  05A1  3048               	movlw	low (STR_27| (0+32768))
  8996  05A2  0020               	movlb	0	; select bank0
  8997  05A3  00B4               	movwf	UARTstringWAIT@data
  8998  05A4  308B               	movlw	high (STR_27| (0+32768))
  8999  05A5  00B5               	movwf	UARTstringWAIT@data+1
  9000  05A6  319A  22E2  3181   	fcall	_UARTstringWAIT
  9001                           
  9002                           ;PS_2.c: 598: delayUS(10000);
  9003  05A9  3000               	movlw	0
  9004  05AA  0020               	movlb	0	; select bank0
  9005  05AB  00A8               	movwf	delayUS@US+3
  9006  05AC  3000               	movlw	0
  9007  05AD  00A7               	movwf	delayUS@US+2
  9008  05AE  3027               	movlw	39
  9009  05AF  00A6               	movwf	delayUS@US+1
  9010  05B0  3010               	movlw	16
  9011  05B1  00A5               	movwf	delayUS@US
  9012  05B2  319B  2315  3181   	fcall	_delayUS
  9013                           
  9014                           ;PS_2.c: 599: SetBaud(BaudTyped, 0);
  9015  05B5  0023               	movlb	3	; select bank3
  9016  05B6  0823               	movf	(_BaudTyped+3)^(0+384),w
  9017  05B7  0020               	movlb	0	; select bank0
  9018  05B8  00D7               	movwf	SetBaud@Baud+3
  9019  05B9  0023               	movlb	3	; select bank3
  9020  05BA  0822               	movf	(_BaudTyped+2)^(0+384),w
  9021  05BB  0020               	movlb	0	; select bank0
  9022  05BC  00D6               	movwf	SetBaud@Baud+2
  9023  05BD  0023               	movlb	3	; select bank3
  9024  05BE  0821               	movf	(_BaudTyped+1)^(0+384),w
  9025  05BF  0020               	movlb	0	; select bank0
  9026  05C0  00D5               	movwf	SetBaud@Baud+1
  9027  05C1  0023               	movlb	3	; select bank3
  9028  05C2  0820               	movf	_BaudTyped^(0+384),w
  9029  05C3  0020               	movlb	0	; select bank0
  9030  05C4  00D4               	movwf	SetBaud@Baud
  9031  05C5  01D8               	clrf	SetBaud@Parity
  9032  05C6  3194  24F4  3181   	fcall	_SetBaud
  9033                           
  9034                           ;PS_2.c: 600: BAUDMODE = 0;
  9035  05C9  0022               	movlb	2	; select bank2
  9036  05CA  01E5               	clrf	_BAUDMODE^(0+256)
  9037  05CB                     l6827:	
  9038                           
  9039                           ;PS_2.c: 601: }
  9040                           ;PS_2.c: 602: RControl =0;
  9041  05CB  0022               	movlb	2	; select bank2
  9042  05CC  01E8               	clrf	_RControl^(0+256)
  9043                           
  9044                           ;PS_2.c: 603: LControl =0;
  9045  05CD  01E7               	clrf	_LControl^(0+256)
  9046                           
  9047                           ;PS_2.c: 604: LALT =0;
  9048  05CE  0020               	movlb	0	; select bank0
  9049  05CF  01E6               	clrf	_LALT
  9050                           
  9051                           ;PS_2.c: 605: RALT =0;
  9052  05D0  01EA               	clrf	_RALT
  9053                           
  9054                           ;PS_2.c: 606: Delete =0;
  9055  05D1  0022               	movlb	2	; select bank2
  9056  05D2  01E6               	clrf	_Delete^(0+256)
  9057  05D3                     l6837:	
  9058                           
  9059                           ;PS_2.c: 607: }
  9060                           ;PS_2.c: 608: if(temp)
  9061  05D3  0025               	movlb	5	; select bank5
  9062  05D4  0860               	movf	PS_2_Update@temp^(0+640),w
  9063  05D5  1903               	btfsc	3,2
  9064  05D6  2F83               	goto	l6931
  9065                           
  9066                           ;PS_2.c: 609: {
  9067                           ;PS_2.c: 611: if(temp == 0x01)
  9068  05D7  0860               	movf	PS_2_Update@temp^(0+640),w
  9069  05D8  3A01               	xorlw	1
  9070  05D9  1D03               	skipz
  9071  05DA  2DDF               	goto	l6843
  9072                           
  9073                           ;PS_2.c: 612: {
  9074                           ;PS_2.c: 614: UART_send_break();
  9075  05DB  3198  206E  3181   	fcall	_UART_send_break
  9076  05DE  2F82               	goto	l823
  9077  05DF                     l6843:	
  9078                           ;PS_2.c: 615: }
  9079                           
  9080                           
  9081                           ;PS_2.c: 616: else
  9082                           ;PS_2.c: 617: {
  9083                           ;PS_2.c: 618: if(!BAUDMODE)
  9084  05DF  0022               	movlb	2	; select bank2
  9085  05E0  08E5               	movf	_BAUDMODE^(0+256),f
  9086  05E1  1D03               	skipz
  9087  05E2  2E10               	goto	l6855
  9088                           
  9089                           ;PS_2.c: 619: {
  9090                           ;PS_2.c: 620: UARTchar(temp, 0, 0);
  9091  05E3  0020               	movlb	0	; select bank0
  9092  05E4  01AD               	clrf	UARTchar@NinethBit_override
  9093  05E5  01AE               	clrf	UARTchar@NinethBit_override_data
  9094  05E6  0025               	movlb	5	; select bank5
  9095  05E7  0860               	movf	PS_2_Update@temp^(0+640),w
  9096  05E8  319C  2455  3181   	fcall	_UARTchar
  9097                           
  9098                           ;PS_2.c: 621: if(temp == '\r')
  9099  05EB  0025               	movlb	5	; select bank5
  9100  05EC  0860               	movf	PS_2_Update@temp^(0+640),w
  9101  05ED  3A0D               	xorlw	13
  9102  05EE  1D03               	skipz
  9103  05EF  2F83               	goto	l6931
  9104                           
  9105                           ;PS_2.c: 622: {
  9106                           ;PS_2.c: 623: delayUS(5000);
  9107  05F0  3000               	movlw	0
  9108  05F1  0020               	movlb	0	; select bank0
  9109  05F2  00A8               	movwf	delayUS@US+3
  9110  05F3  3000               	movlw	0
  9111  05F4  00A7               	movwf	delayUS@US+2
  9112  05F5  3013               	movlw	19
  9113  05F6  00A6               	movwf	delayUS@US+1
  9114  05F7  3088               	movlw	136
  9115  05F8  00A5               	movwf	delayUS@US
  9116  05F9  319B  2315  3181   	fcall	_delayUS
  9117                           
  9118                           ;PS_2.c: 624: UARTchar('\n', 0, 0);
  9119  05FC  0020               	movlb	0	; select bank0
  9120  05FD  01AD               	clrf	UARTchar@NinethBit_override
  9121  05FE  01AE               	clrf	UARTchar@NinethBit_override_data
  9122  05FF  300A               	movlw	10
  9123  0600  319C  2455  3181   	fcall	_UARTchar
  9124                           
  9125                           ;PS_2.c: 625: delayUS(10000);
  9126  0603  3000               	movlw	0
  9127  0604  0020               	movlb	0	; select bank0
  9128  0605  00A8               	movwf	delayUS@US+3
  9129  0606  3000               	movlw	0
  9130  0607  00A7               	movwf	delayUS@US+2
  9131  0608  3027               	movlw	39
  9132  0609  00A6               	movwf	delayUS@US+1
  9133  060A  3010               	movlw	16
  9134  060B  00A5               	movwf	delayUS@US
  9135  060C  319B  2315  3181   	fcall	_delayUS
  9136  060F  2F82               	goto	l823
  9137  0610                     l6855:	
  9138                           ;PS_2.c: 626: }
  9139                           ;PS_2.c: 627: }
  9140                           
  9141                           
  9142                           ;PS_2.c: 628: else
  9143                           ;PS_2.c: 629: {
  9144                           ;PS_2.c: 630: if(ISNUMBER(temp))
  9145  0610  0025               	movlb	5	; select bank5
  9146  0611  0860               	movf	PS_2_Update@temp^(0+640),w
  9147  0612  3198  20E0  3181   	fcall	_ISNUMBER
  9148  0615  3A00               	xorlw	0
  9149  0616  1903               	skipnz
  9150  0617  2E67               	goto	l6863
  9151                           
  9152                           ;PS_2.c: 631: {
  9153                           ;PS_2.c: 632: BaudTyped*=10;
  9154  0618  3000               	movlw	0
  9155  0619  0020               	movlb	0	; select bank0
  9156  061A  00A8               	movwf	___lmul@multiplier+3
  9157  061B  3000               	movlw	0
  9158  061C  00A7               	movwf	___lmul@multiplier+2
  9159  061D  3000               	movlw	0
  9160  061E  00A6               	movwf	___lmul@multiplier+1
  9161  061F  300A               	movlw	10
  9162  0620  00A5               	movwf	___lmul@multiplier
  9163  0621  0023               	movlb	3	; select bank3
  9164  0622  0823               	movf	(_BaudTyped+3)^(0+384),w
  9165  0623  0020               	movlb	0	; select bank0
  9166  0624  00AC               	movwf	___lmul@multiplicand+3
  9167  0625  0023               	movlb	3	; select bank3
  9168  0626  0822               	movf	(_BaudTyped+2)^(0+384),w
  9169  0627  0020               	movlb	0	; select bank0
  9170  0628  00AB               	movwf	___lmul@multiplicand+2
  9171  0629  0023               	movlb	3	; select bank3
  9172  062A  0821               	movf	(_BaudTyped+1)^(0+384),w
  9173  062B  0020               	movlb	0	; select bank0
  9174  062C  00AA               	movwf	___lmul@multiplicand+1
  9175  062D  0023               	movlb	3	; select bank3
  9176  062E  0820               	movf	_BaudTyped^(0+384),w
  9177  062F  0020               	movlb	0	; select bank0
  9178  0630  00A9               	movwf	___lmul@multiplicand
  9179  0631  319A  221E  3181   	fcall	___lmul
  9180  0634  0020               	movlb	0	; select bank0
  9181  0635  0828               	movf	?___lmul+3,w
  9182  0636  0023               	movlb	3	; select bank3
  9183  0637  00A3               	movwf	(_BaudTyped+3)^(0+384)
  9184  0638  0020               	movlb	0	; select bank0
  9185  0639  0827               	movf	?___lmul+2,w
  9186  063A  0023               	movlb	3	; select bank3
  9187  063B  00A2               	movwf	(_BaudTyped+2)^(0+384)
  9188  063C  0020               	movlb	0	; select bank0
  9189  063D  0826               	movf	?___lmul+1,w
  9190  063E  0023               	movlb	3	; select bank3
  9191  063F  00A1               	movwf	(_BaudTyped+1)^(0+384)
  9192  0640  0020               	movlb	0	; select bank0
  9193  0641  0825               	movf	?___lmul,w
  9194  0642  0023               	movlb	3	; select bank3
  9195  0643  00A0               	movwf	_BaudTyped^(0+384)
  9196                           
  9197                           ;PS_2.c: 633: BaudTyped += temp - 48;
  9198  0644  0025               	movlb	5	; select bank5
  9199  0645  0860               	movf	PS_2_Update@temp^(0+640),w
  9200  0646  3ED0               	addlw	208
  9201  0647  0023               	movlb	3	; select bank3
  9202  0648  00AF               	movwf	??_PS_2_Update^(0+384)
  9203  0649  30FF               	movlw	255
  9204  064A  1803               	skipnc
  9205  064B  3000               	movlw	0
  9206  064C  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9207  064D  082F               	movf	??_PS_2_Update^(0+384),w
  9208  064E  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9209  064F  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9210  0650  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9211  0651  3000               	movlw	0
  9212  0652  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9213  0653  30FF               	movlw	255
  9214  0654  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9215  0655  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9216  0656  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9217  0657  07A0               	addwf	_BaudTyped^(0+384),f
  9218  0658  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9219  0659  3DA1               	addwfc	(_BaudTyped+1)^(0+384),f
  9220  065A  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9221  065B  3DA2               	addwfc	(_BaudTyped+2)^(0+384),f
  9222  065C  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9223  065D  3DA3               	addwfc	(_BaudTyped+3)^(0+384),f
  9224                           
  9225                           ;PS_2.c: 634: UARTchar(temp, 0, 0);
  9226  065E  0020               	movlb	0	; select bank0
  9227  065F  01AD               	clrf	UARTchar@NinethBit_override
  9228  0660  01AE               	clrf	UARTchar@NinethBit_override_data
  9229  0661  0025               	movlb	5	; select bank5
  9230  0662  0860               	movf	PS_2_Update@temp^(0+640),w
  9231  0663  319C  2455  3181   	fcall	_UARTchar
  9232  0666  2F82               	goto	l823
  9233  0667                     l6863:	
  9234                           ;PS_2.c: 635: }
  9235                           
  9236                           
  9237                           ;PS_2.c: 636: else if(temp == 'o' || temp == 'O')
  9238  0667  0025               	movlb	5	; select bank5
  9239  0668  0860               	movf	PS_2_Update@temp^(0+640),w
  9240  0669  3A6F               	xorlw	111
  9241  066A  1903               	skipnz
  9242  066B  2E70               	goto	l831
  9243  066C  0860               	movf	PS_2_Update@temp^(0+640),w
  9244  066D  3A4F               	xorlw	79
  9245  066E  1D03               	skipz
  9246  066F  2E7B               	goto	l6869
  9247  0670                     l831:	
  9248                           
  9249                           ;PS_2.c: 637: {
  9250                           ;PS_2.c: 638: ParityTyped = 1;
  9251  0670  0020               	movlb	0	; select bank0
  9252  0671  01E9               	clrf	_ParityTyped
  9253  0672  0AE9               	incf	_ParityTyped,f
  9254                           
  9255                           ;PS_2.c: 639: UARTchar(temp, 0, 0);
  9256  0673  01AD               	clrf	UARTchar@NinethBit_override
  9257  0674  01AE               	clrf	UARTchar@NinethBit_override_data
  9258  0675  0025               	movlb	5	; select bank5
  9259  0676  0860               	movf	PS_2_Update@temp^(0+640),w
  9260  0677  319C  2455  3181   	fcall	_UARTchar
  9261  067A  2F82               	goto	l823
  9262  067B                     l6869:	
  9263                           ;PS_2.c: 640: }
  9264                           
  9265                           
  9266                           ;PS_2.c: 641: else if(temp == 'e' || temp == 'E')
  9267  067B  0025               	movlb	5	; select bank5
  9268  067C  0860               	movf	PS_2_Update@temp^(0+640),w
  9269  067D  3A65               	xorlw	101
  9270  067E  1903               	skipnz
  9271  067F  2E84               	goto	l6873
  9272  0680  0860               	movf	PS_2_Update@temp^(0+640),w
  9273  0681  3A45               	xorlw	69
  9274  0682  1D03               	skipz
  9275  0683  2E92               	goto	l6877
  9276  0684                     l6873:	
  9277                           
  9278                           ;PS_2.c: 642: {
  9279                           ;PS_2.c: 643: ParityTyped = 2;
  9280  0684  3002               	movlw	2
  9281  0685  0023               	movlb	3	; select bank3
  9282  0686  00AF               	movwf	??_PS_2_Update^(0+384)
  9283  0687  082F               	movf	??_PS_2_Update^(0+384),w
  9284  0688  0020               	movlb	0	; select bank0
  9285  0689  00E9               	movwf	_ParityTyped
  9286                           
  9287                           ;PS_2.c: 644: UARTchar(temp, 0, 0);
  9288  068A  01AD               	clrf	UARTchar@NinethBit_override
  9289  068B  01AE               	clrf	UARTchar@NinethBit_override_data
  9290  068C  0025               	movlb	5	; select bank5
  9291  068D  0860               	movf	PS_2_Update@temp^(0+640),w
  9292  068E  319C  2455  3181   	fcall	_UARTchar
  9293  0691  2F82               	goto	l823
  9294  0692                     l6877:	
  9295                           ;PS_2.c: 645: }
  9296                           
  9297                           
  9298                           ;PS_2.c: 646: else if(temp == 'm' || temp == 'M')
  9299  0692  0025               	movlb	5	; select bank5
  9300  0693  0860               	movf	PS_2_Update@temp^(0+640),w
  9301  0694  3A6D               	xorlw	109
  9302  0695  1903               	skipnz
  9303  0696  2E9B               	goto	l6881
  9304  0697  0860               	movf	PS_2_Update@temp^(0+640),w
  9305  0698  3A4D               	xorlw	77
  9306  0699  1D03               	skipz
  9307  069A  2EA9               	goto	l6885
  9308  069B                     l6881:	
  9309                           
  9310                           ;PS_2.c: 647: {
  9311                           ;PS_2.c: 648: ParityTyped = 3;
  9312  069B  3003               	movlw	3
  9313  069C  0023               	movlb	3	; select bank3
  9314  069D  00AF               	movwf	??_PS_2_Update^(0+384)
  9315  069E  082F               	movf	??_PS_2_Update^(0+384),w
  9316  069F  0020               	movlb	0	; select bank0
  9317  06A0  00E9               	movwf	_ParityTyped
  9318                           
  9319                           ;PS_2.c: 649: UARTchar(temp, 0, 0);
  9320  06A1  01AD               	clrf	UARTchar@NinethBit_override
  9321  06A2  01AE               	clrf	UARTchar@NinethBit_override_data
  9322  06A3  0025               	movlb	5	; select bank5
  9323  06A4  0860               	movf	PS_2_Update@temp^(0+640),w
  9324  06A5  319C  2455  3181   	fcall	_UARTchar
  9325  06A8  2F82               	goto	l823
  9326  06A9                     l6885:	
  9327                           ;PS_2.c: 650: }
  9328                           
  9329                           
  9330                           ;PS_2.c: 651: else if(temp == 's' || temp == 'S')
  9331  06A9  0025               	movlb	5	; select bank5
  9332  06AA  0860               	movf	PS_2_Update@temp^(0+640),w
  9333  06AB  3A73               	xorlw	115
  9334  06AC  1903               	skipnz
  9335  06AD  2EB2               	goto	l6889
  9336  06AE  0860               	movf	PS_2_Update@temp^(0+640),w
  9337  06AF  3A53               	xorlw	83
  9338  06B0  1D03               	skipz
  9339  06B1  2EC0               	goto	l6893
  9340  06B2                     l6889:	
  9341                           
  9342                           ;PS_2.c: 652: {
  9343                           ;PS_2.c: 653: ParityTyped = 4;
  9344  06B2  3004               	movlw	4
  9345  06B3  0023               	movlb	3	; select bank3
  9346  06B4  00AF               	movwf	??_PS_2_Update^(0+384)
  9347  06B5  082F               	movf	??_PS_2_Update^(0+384),w
  9348  06B6  0020               	movlb	0	; select bank0
  9349  06B7  00E9               	movwf	_ParityTyped
  9350                           
  9351                           ;PS_2.c: 654: UARTchar(temp, 0, 0);
  9352  06B8  01AD               	clrf	UARTchar@NinethBit_override
  9353  06B9  01AE               	clrf	UARTchar@NinethBit_override_data
  9354  06BA  0025               	movlb	5	; select bank5
  9355  06BB  0860               	movf	PS_2_Update@temp^(0+640),w
  9356  06BC  319C  2455  3181   	fcall	_UARTchar
  9357  06BF  2F82               	goto	l823
  9358  06C0                     l6893:	
  9359                           ;PS_2.c: 655: }
  9360                           
  9361                           
  9362                           ;PS_2.c: 656: else if(temp == '\r')
  9363  06C0  0025               	movlb	5	; select bank5
  9364  06C1  0860               	movf	PS_2_Update@temp^(0+640),w
  9365  06C2  3A0D               	xorlw	13
  9366  06C3  1D03               	skipz
  9367  06C4  2F83               	goto	l6931
  9368                           
  9369                           ;PS_2.c: 657: {
  9370                           ;PS_2.c: 658: UARTstringWAIT("\r\n");
  9371  06C5  30F0               	movlw	low ((STR_11+17)| (0+32768))
  9372  06C6  0020               	movlb	0	; select bank0
  9373  06C7  00B4               	movwf	UARTstringWAIT@data
  9374  06C8  308C               	movlw	high ((STR_11+17)| (0+32768))
  9375  06C9  00B5               	movwf	UARTstringWAIT@data+1
  9376  06CA  319A  22E2  3181   	fcall	_UARTstringWAIT
  9377                           
  9378                           ;PS_2.c: 659: delayUS(10000);
  9379  06CD  3000               	movlw	0
  9380  06CE  0020               	movlb	0	; select bank0
  9381  06CF  00A8               	movwf	delayUS@US+3
  9382  06D0  3000               	movlw	0
  9383  06D1  00A7               	movwf	delayUS@US+2
  9384  06D2  3027               	movlw	39
  9385  06D3  00A6               	movwf	delayUS@US+1
  9386  06D4  3010               	movlw	16
  9387  06D5  00A5               	movwf	delayUS@US
  9388  06D6  319B  2315  3181   	fcall	_delayUS
  9389                           
  9390                           ;PS_2.c: 660: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9391  06D9  3000               	movlw	0
  9392  06DA  0023               	movlb	3	; select bank3
  9393  06DB  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9394  06DC  1D03               	skipz
  9395  06DD  2EE8               	goto	u9475
  9396  06DE  3000               	movlw	0
  9397  06DF  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9398  06E0  1D03               	skipz
  9399  06E1  2EE8               	goto	u9475
  9400  06E2  3009               	movlw	9
  9401  06E3  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9402  06E4  1D03               	skipz
  9403  06E5  2EE8               	goto	u9475
  9404  06E6  3060               	movlw	96
  9405  06E7  0220               	subwf	_BaudTyped^(0+384),w
  9406  06E8                     u9475:	
  9407  06E8  1C03               	skipc
  9408  06E9  2F6C               	goto	l6925
  9409  06EA  3000               	movlw	0
  9410  06EB  0223               	subwf	(_BaudTyped+3)^(0+384),w
  9411  06EC  1D03               	skipz
  9412  06ED  2EF8               	goto	u9485
  9413  06EE  3001               	movlw	1
  9414  06EF  0222               	subwf	(_BaudTyped+2)^(0+384),w
  9415  06F0  1D03               	skipz
  9416  06F1  2EF8               	goto	u9485
  9417  06F2  30C2               	movlw	194
  9418  06F3  0221               	subwf	(_BaudTyped+1)^(0+384),w
  9419  06F4  1D03               	skipz
  9420  06F5  2EF8               	goto	u9485
  9421  06F6  3001               	movlw	1
  9422  06F7  0220               	subwf	_BaudTyped^(0+384),w
  9423  06F8                     u9485:	
  9424  06F8  1803               	skipnc
  9425  06F9  2F6C               	goto	l6925
  9426                           
  9427                           ;PS_2.c: 661: {
  9428                           ;PS_2.c: 662: if(ParityTyped)
  9429  06FA  0020               	movlb	0	; select bank0
  9430  06FB  0869               	movf	_ParityTyped,w
  9431  06FC  1903               	btfsc	3,2
  9432  06FD  2F2F               	goto	l6919
  9433                           
  9434                           ;PS_2.c: 663: {
  9435                           ;PS_2.c: 664: switch (ParityTyped)
  9436  06FE  2F22               	goto	l6917
  9437  06FF                     l6907:	
  9438                           ;PS_2.c: 665: {
  9439                           ;PS_2.c: 666: case 1:
  9440                           
  9441                           
  9442                           ;PS_2.c: 667: sprintf(buf,"Baud will be set to %lu with Odd parity bit\r\n",BaudTyped);
  9443  06FF  30A0               	movlw	low PS_2_Update@buf
  9444  0700  00BD               	movwf	sprintf@sp
  9445  0701  3002               	movlw	high PS_2_Update@buf
  9446  0702  00BE               	movwf	sprintf@sp+1
  9447  0703  302A               	movlw	low (STR_29| (0+32768))
  9448  0704  00BF               	movwf	sprintf@f
  9449  0705  308A               	movlw	high (STR_29| (0+32768))
  9450  0706  2F36               	goto	L14
  9451  0707                     l6909:	
  9452                           ;PS_2.c: 669: case 2:
  9453                           
  9454                           ;PS_2.c: 668: break;
  9455                           
  9456                           
  9457                           ;PS_2.c: 670: sprintf(buf,"Baud will be set to %lu with Even parity bit\r\n",BaudTyped);
  9458  0707  30A0               	movlw	low PS_2_Update@buf
  9459  0708  0020               	movlb	0	; select bank0
  9460  0709  00BD               	movwf	sprintf@sp
  9461  070A  3002               	movlw	high PS_2_Update@buf
  9462  070B  00BE               	movwf	sprintf@sp+1
  9463  070C  30FB               	movlw	low (STR_30| (0+32768))
  9464  070D  00BF               	movwf	sprintf@f
  9465  070E  3089               	movlw	high (STR_30| (0+32768))
  9466  070F  2F36               	goto	L14
  9467  0710                     l6911:	
  9468                           ;PS_2.c: 672: case 3:
  9469                           
  9470                           ;PS_2.c: 671: break;
  9471                           
  9472                           
  9473                           ;PS_2.c: 673: sprintf(buf,"Baud will be set to %lu with Mark bit\r\n",BaudTyped);
  9474  0710  30A0               	movlw	low PS_2_Update@buf
  9475  0711  0020               	movlb	0	; select bank0
  9476  0712  00BD               	movwf	sprintf@sp
  9477  0713  3002               	movlw	high PS_2_Update@buf
  9478  0714  00BE               	movwf	sprintf@sp+1
  9479  0715  30AE               	movlw	low (STR_31| (0+32768))
  9480  0716  00BF               	movwf	sprintf@f
  9481  0717  308A               	movlw	high (STR_31| (0+32768))
  9482  0718  2F36               	goto	L14
  9483  0719                     l6913:	
  9484                           ;PS_2.c: 675: default:
  9485                           
  9486                           ;PS_2.c: 674: break;
  9487                           
  9488                           
  9489                           ;PS_2.c: 676: sprintf(buf,"Baud will be set to %lu with Space bit\r\n",BaudTyped);
  9490  0719  30A0               	movlw	low PS_2_Update@buf
  9491  071A  0020               	movlb	0	; select bank0
  9492  071B  00BD               	movwf	sprintf@sp
  9493  071C  3002               	movlw	high PS_2_Update@buf
  9494  071D  00BE               	movwf	sprintf@sp+1
  9495  071E  3085               	movlw	low (STR_32| (0+32768))
  9496  071F  00BF               	movwf	sprintf@f
  9497  0720  308A               	movlw	high (STR_32| (0+32768))
  9498  0721  2F36               	goto	L14
  9499  0722                     l6917:	
  9500                           ;PS_2.c: 678: }
  9501                           
  9502                           ;PS_2.c: 677: break;
  9503                           
  9504  0722  0020               	movlb	0	; select bank0
  9505  0723  0869               	movf	_ParityTyped,w
  9506                           
  9507                           ; Switch size 1, requested type "space"
  9508                           ; Number of cases is 3, Range of values is 1 to 3
  9509                           ; switch strategies available:
  9510                           ; Name         Instructions Cycles
  9511                           ; simple_byte           10     6 (average)
  9512                           ; direct_byte           15     9 (fixed)
  9513                           ; jumptable            263     9 (fixed)
  9514                           ;	Chosen strategy is simple_byte
  9515  0724  3A01               	xorlw	1	; case 1
  9516  0725  1903               	skipnz
  9517  0726  2EFF               	goto	l6907
  9518  0727  3A03               	xorlw	3	; case 2
  9519  0728  1903               	skipnz
  9520  0729  2F07               	goto	l6909
  9521  072A  3A01               	xorlw	1	; case 3
  9522  072B  1903               	skipnz
  9523  072C  2F10               	goto	l6911
  9524  072D  2F19               	goto	l6913
  9525                           
  9526                           ;PS_2.c: 679: }
  9527  072E  2F4A               	goto	l6921
  9528  072F                     l6919:	
  9529                           
  9530                           ;PS_2.c: 680: else
  9531                           ;PS_2.c: 681: {
  9532                           ;PS_2.c: 682: sprintf(buf,"Baud will be set to %lu with no parity bit\r\n",BaudTyped);
  9533  072F  30A0               	movlw	low PS_2_Update@buf
  9534  0730  00BD               	movwf	sprintf@sp
  9535  0731  3002               	movlw	high PS_2_Update@buf
  9536  0732  00BE               	movwf	sprintf@sp+1
  9537  0733  3058               	movlw	low (STR_33| (0+32768))
  9538  0734  00BF               	movwf	sprintf@f
  9539  0735  308A               	movlw	high (STR_33| (0+32768))
  9540  0736                     L14:	
  9541  0736  00C0               	movwf	sprintf@f+1
  9542  0737  0023               	movlb	3	; select bank3
  9543  0738  0823               	movf	(_BaudTyped+3)^(0+384),w
  9544  0739  0020               	movlb	0	; select bank0
  9545  073A  00C4               	movwf	?_sprintf+7
  9546  073B  0023               	movlb	3	; select bank3
  9547  073C  0822               	movf	(_BaudTyped+2)^(0+384),w
  9548  073D  0020               	movlb	0	; select bank0
  9549  073E  00C3               	movwf	?_sprintf+6
  9550  073F  0023               	movlb	3	; select bank3
  9551  0740  0821               	movf	(_BaudTyped+1)^(0+384),w
  9552  0741  0020               	movlb	0	; select bank0
  9553  0742  00C2               	movwf	?_sprintf+5
  9554  0743  0023               	movlb	3	; select bank3
  9555  0744  0820               	movf	_BaudTyped^(0+384),w
  9556  0745  0020               	movlb	0	; select bank0
  9557  0746  00C1               	movwf	?_sprintf+4
  9558  0747  3194  2400  3181   	fcall	_sprintf
  9559  074A                     l6921:	
  9560                           
  9561                           ;PS_2.c: 683: }
  9562                           ;PS_2.c: 684: UARTstringWAIT(buf);
  9563  074A  30A0               	movlw	low PS_2_Update@buf
  9564  074B  0020               	movlb	0	; select bank0
  9565  074C  00B4               	movwf	UARTstringWAIT@data
  9566  074D  3002               	movlw	high PS_2_Update@buf
  9567  074E  00B5               	movwf	UARTstringWAIT@data+1
  9568  074F  319A  22E2  3181   	fcall	_UARTstringWAIT
  9569                           
  9570                           ;PS_2.c: 685: SetBaud(BaudTyped, ParityTyped);
  9571  0752  0023               	movlb	3	; select bank3
  9572  0753  0823               	movf	(_BaudTyped+3)^(0+384),w
  9573  0754  0020               	movlb	0	; select bank0
  9574  0755  00D7               	movwf	SetBaud@Baud+3
  9575  0756  0023               	movlb	3	; select bank3
  9576  0757  0822               	movf	(_BaudTyped+2)^(0+384),w
  9577  0758  0020               	movlb	0	; select bank0
  9578  0759  00D6               	movwf	SetBaud@Baud+2
  9579  075A  0023               	movlb	3	; select bank3
  9580  075B  0821               	movf	(_BaudTyped+1)^(0+384),w
  9581  075C  0020               	movlb	0	; select bank0
  9582  075D  00D5               	movwf	SetBaud@Baud+1
  9583  075E  0023               	movlb	3	; select bank3
  9584  075F  0820               	movf	_BaudTyped^(0+384),w
  9585  0760  0020               	movlb	0	; select bank0
  9586  0761  00D4               	movwf	SetBaud@Baud
  9587  0762  0869               	movf	_ParityTyped,w
  9588  0763  0023               	movlb	3	; select bank3
  9589  0764  00AF               	movwf	??_PS_2_Update^(0+384)
  9590  0765  082F               	movf	??_PS_2_Update^(0+384),w
  9591  0766  0020               	movlb	0	; select bank0
  9592  0767  00D8               	movwf	SetBaud@Parity
  9593  0768  3194  24F4  3181   	fcall	_SetBaud
  9594                           
  9595                           ;PS_2.c: 686: }
  9596  076B  2F80               	goto	l6929
  9597  076C                     l6925:	
  9598                           
  9599                           ;PS_2.c: 687: else
  9600                           ;PS_2.c: 688: {
  9601                           ;PS_2.c: 689: UARTstringWAIT("Baud Out of Range\r\n");
  9602  076C  30CB               	movlw	low (STR_34| (0+32768))
  9603  076D  0020               	movlb	0	; select bank0
  9604  076E  00B4               	movwf	UARTstringWAIT@data
  9605  076F  308C               	movlw	high (STR_34| (0+32768))
  9606  0770  00B5               	movwf	UARTstringWAIT@data+1
  9607  0771  319A  22E2  3181   	fcall	_UARTstringWAIT
  9608                           
  9609                           ;PS_2.c: 690: delayUS(10000);
  9610  0774  3000               	movlw	0
  9611  0775  0020               	movlb	0	; select bank0
  9612  0776  00A8               	movwf	delayUS@US+3
  9613  0777  3000               	movlw	0
  9614  0778  00A7               	movwf	delayUS@US+2
  9615  0779  3027               	movlw	39
  9616  077A  00A6               	movwf	delayUS@US+1
  9617  077B  3010               	movlw	16
  9618  077C  00A5               	movwf	delayUS@US
  9619  077D  319B  2315  3181   	fcall	_delayUS
  9620  0780                     l6929:	
  9621                           
  9622                           ;PS_2.c: 691: }
  9623                           ;PS_2.c: 692: BAUDMODE=0;
  9624  0780  0022               	movlb	2	; select bank2
  9625  0781  01E5               	clrf	_BAUDMODE^(0+256)
  9626  0782                     l823:	
  9627  0782  0025               	movlb	5	; select bank5
  9628  0783                     l6931:	
  9629                           
  9630                           ;PS_2.c: 693: }
  9631                           ;PS_2.c: 694: }
  9632                           ;PS_2.c: 695: }
  9633                           ;PS_2.c: 696: }
  9634                           ;PS_2.c: 697: PS_2_Read_Data_First =0;
  9635  0783  0023               	movlb	3	; select bank3
  9636  0784  01A4               	clrf	_PS_2_Read_Data_First^(0+384)
  9637  0785  01A5               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9638                           
  9639                           ;PS_2.c: 698: PS_2_Read_Data_Second =0;
  9640  0786  01A8               	clrf	_PS_2_Read_Data_Second^(0+384)
  9641  0787  01A9               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9642                           
  9643                           ;PS_2.c: 699: PS_2_Read_Data_Third =0;
  9644  0788  01AA               	clrf	_PS_2_Read_Data_Third^(0+384)
  9645  0789  01AB               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9646                           
  9647                           ;PS_2.c: 700: PS_2_Read_Data_Forth =0;
  9648  078A  01A6               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9649  078B  01A7               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9650                           
  9651                           ;PS_2.c: 701: PS_2_Read_Data_FirstTEMP =0;
  9652  078C  0024               	movlb	4	; select bank4
  9653  078D  01A0               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9654  078E  01A1               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9655                           
  9656                           ;PS_2.c: 702: PS_2_Read_Data_SecondTEMP =0;
  9657  078F  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9658  0790  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9659                           
  9660                           ;PS_2.c: 703: PS_2_Read_Data_ThirdTEMP =0;
  9661  0791  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9662  0792  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9663                           
  9664                           ;PS_2.c: 704: PS_2_Read_Data_ForthTEMP =0;
  9665  0793  01A2               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9666  0794  01A3               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9667                           
  9668                           ;PS_2.c: 705: LATC &= ~0b00010000;
  9669  0795  30EF               	movlw	239
  9670  0796  0023               	movlb	3	; select bank3
  9671  0797  00AF               	movwf	??_PS_2_Update^(0+384)
  9672  0798  082F               	movf	??_PS_2_Update^(0+384),w
  9673  0799  0022               	movlb	2	; select bank2
  9674  079A  058E               	andwf	14,f	;volatile
  9675                           
  9676                           ;PS_2.c: 706: PIE1bits.RCIE = 1;
  9677  079B  0021               	movlb	1	; select bank1
  9678  079C  1691               	bsf	17,5	;volatile
  9679                           
  9680                           ;PS_2.c: 707: PS_2_ENABLE_INTERRUPT(0b00100000);
  9681  079D  3020               	movlw	32
  9682  079E  3199  217F         	fcall	_PS_2_ENABLE_INTERRUPT
  9683  07A0  0020               	movlb	0	; select bank0
  9684  07A1  0008               	return
  9685  07A2                     __end_of_PS_2_Update:	
  9686                           
  9687                           	psect	text13
  9688  1A1E                     __ptext13:	
  9689 ;; *************** function ___lmul *****************
  9690 ;; Defined at:
  9691 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9694 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  product         4   13[BANK0 ] unsigned long 
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  4    5[BANK0 ] unsigned long 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:       12 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    3
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_PS_2_Update
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           
  9721                           ;psect for function ___lmul
  9722  1A1E                     ___lmul:	
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9726  1A1E  3000               	movlw	0
  9727  1A1F  0020               	movlb	0	; select bank0
  9728  1A20  00B0               	movwf	___lmul@product+3
  9729  1A21  3000               	movlw	0
  9730  1A22  00AF               	movwf	___lmul@product+2
  9731  1A23  3000               	movlw	0
  9732  1A24  00AE               	movwf	___lmul@product+1
  9733  1A25  3000               	movlw	0
  9734  1A26  00AD               	movwf	___lmul@product
  9735  1A27                     l6413:	
  9736  1A27  1C25               	btfss	___lmul@multiplier,0
  9737  1A28  2A31               	goto	l6417
  9738  1A29  0829               	movf	___lmul@multiplicand,w
  9739  1A2A  07AD               	addwf	___lmul@product,f
  9740  1A2B  082A               	movf	___lmul@multiplicand+1,w
  9741  1A2C  3DAE               	addwfc	___lmul@product+1,f
  9742  1A2D  082B               	movf	___lmul@multiplicand+2,w
  9743  1A2E  3DAF               	addwfc	___lmul@product+2,f
  9744  1A2F  082C               	movf	___lmul@multiplicand+3,w
  9745  1A30  3DB0               	addwfc	___lmul@product+3,f
  9746  1A31                     l6417:	
  9747  1A31  3001               	movlw	1
  9748  1A32                     u8205:	
  9749  1A32  35A9               	lslf	___lmul@multiplicand,f
  9750  1A33  0DAA               	rlf	___lmul@multiplicand+1,f
  9751  1A34  0DAB               	rlf	___lmul@multiplicand+2,f
  9752  1A35  0DAC               	rlf	___lmul@multiplicand+3,f
  9753  1A36  0B89               	decfsz	9,f
  9754  1A37  2A32               	goto	u8205
  9755  1A38  3001               	movlw	1
  9756  1A39                     u8215:	
  9757  1A39  36A8               	lsrf	___lmul@multiplier+3,f
  9758  1A3A  0CA7               	rrf	___lmul@multiplier+2,f
  9759  1A3B  0CA6               	rrf	___lmul@multiplier+1,f
  9760  1A3C  0CA5               	rrf	___lmul@multiplier,f
  9761  1A3D  0B89               	decfsz	9,f
  9762  1A3E  2A39               	goto	u8215
  9763  1A3F  0828               	movf	___lmul@multiplier+3,w
  9764  1A40  0427               	iorwf	___lmul@multiplier+2,w
  9765  1A41  0426               	iorwf	___lmul@multiplier+1,w
  9766  1A42  0425               	iorwf	___lmul@multiplier,w
  9767  1A43  1D03               	skipz
  9768  1A44  2A27               	goto	l6413
  9769  1A45  0830               	movf	___lmul@product+3,w
  9770  1A46  00A8               	movwf	?___lmul+3
  9771  1A47  082F               	movf	___lmul@product+2,w
  9772  1A48  00A7               	movwf	?___lmul+2
  9773  1A49  082E               	movf	___lmul@product+1,w
  9774  1A4A  00A6               	movwf	?___lmul+1
  9775  1A4B  082D               	movf	___lmul@product,w
  9776  1A4C  00A5               	movwf	?___lmul
  9777  1A4D  0008               	return
  9778  1A4E                     __end_of___lmul:	
  9779                           
  9780                           	psect	text14
  9781  186E                     __ptext14:	
  9782 ;; *************** function _UART_send_break *****************
  9783 ;; Defined at:
  9784 ;;		line 248 in file "UART.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;		None               void
  9791 ;; Registers used:
  9792 ;;		wreg
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;Total ram usage:        0 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    3
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		_PS_2_Update
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           
  9813                           ;psect for function _UART_send_break
  9814  186E                     _UART_send_break:	
  9815                           
  9816                           ;UART.c: 250: TX1STA |= 0b00001000;
  9817                           
  9818                           ;incstack = 0
  9819                           ; Regs used in _UART_send_break: [wreg]
  9820  186E  0023               	movlb	3	; select bank3
  9821  186F  159E               	bsf	30,3	;volatile
  9822                           
  9823                           ;UART.c: 251: TXREG = 'd';
  9824  1870  3064               	movlw	100
  9825  1871  009A               	movwf	26	;volatile
  9826  1872  0008               	return
  9827  1873                     __end_of_UART_send_break:	
  9828                           
  9829                           	psect	text15
  9830  14F4                     __ptext15:	
  9831 ;; *************** function _SetBaud *****************
  9832 ;; Defined at:
  9833 ;;		line 286 in file "UART.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  Baud            4   52[BANK0 ] unsigned long 
  9836 ;;  Parity          1   56[BANK0 ] unsigned char 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9839 ;;  temp            4   58[BANK2 ] unsigned long 
  9840 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9841 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9842 ;;  i               1   62[BANK2 ] unsigned char 
  9843 ;; Return value:  Size  Location     Type
  9844 ;;		None               void
  9845 ;; Registers used:
  9846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9852 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;Total ram usage:       76 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    7
  9859 ;; This function calls:
  9860 ;;		_InitUART
  9861 ;;		_ReadBaud
  9862 ;;		_UARTstringWAIT
  9863 ;;		_WriteBaud
  9864 ;;		_delayUS
  9865 ;;		_sprintf
  9866 ;; This function is called by:
  9867 ;;		_PS_2_Update
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           
  9872                           ;psect for function _SetBaud
  9873  14F4                     _SetBaud:	
  9874                           
  9875                           ;UART.c: 288: unsigned char buf[50];
  9876                           ;UART.c: 289: unsigned long Baudtemp=0;
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9880  14F4  3000               	movlw	0
  9881  14F5  0022               	movlb	2	; select bank2
  9882  14F6  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9883  14F7  3000               	movlw	0
  9884  14F8  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9885  14F9  3000               	movlw	0
  9886  14FA  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9887  14FB  3000               	movlw	0
  9888  14FC  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9889                           
  9890                           ;UART.c: 290: unsigned long Paritytemp=0;
  9891  14FD  3000               	movlw	0
  9892  14FE  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9893  14FF  3000               	movlw	0
  9894  1500  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9895  1501  3000               	movlw	0
  9896  1502  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9897  1503  3000               	movlw	0
  9898  1504  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9899                           
  9900                           ;UART.c: 291: unsigned long temp;
  9901                           ;UART.c: 292: unsigned char i =0;
  9902  1505  01DE               	clrf	SetBaud@i^(0+256)
  9903                           
  9904                           ;UART.c: 294: WriteBaud((0x1800 >> 5), Baud, Parity);
  9905  1506  30C0               	movlw	192
  9906  1507  0020               	movlb	0	; select bank0
  9907  1508  00B6               	movwf	WriteBaud@row
  9908  1509  3000               	movlw	0
  9909  150A  00B7               	movwf	WriteBaud@row+1
  9910  150B  0857               	movf	SetBaud@Baud+3,w
  9911  150C  00BB               	movwf	WriteBaud@Baud+3
  9912  150D  0856               	movf	SetBaud@Baud+2,w
  9913  150E  00BA               	movwf	WriteBaud@Baud+2
  9914  150F  0855               	movf	SetBaud@Baud+1,w
  9915  1510  00B9               	movwf	WriteBaud@Baud+1
  9916  1511  0854               	movf	SetBaud@Baud,w
  9917  1512  00B8               	movwf	WriteBaud@Baud
  9918  1513  0858               	movf	SetBaud@Parity,w
  9919  1514  00D9               	movwf	??_SetBaud
  9920  1515  0859               	movf	??_SetBaud,w
  9921  1516  00BC               	movwf	WriteBaud@Parity
  9922  1517  3187  27A2  3194   	fcall	_WriteBaud
  9923                           
  9924                           ;UART.c: 295: temp = ReadBaud((0x1800 >> 5), 0);
  9925  151A  30C0               	movlw	192
  9926  151B  0020               	movlb	0	; select bank0
  9927  151C  00B7               	movwf	ReadBaud@row
  9928  151D  3000               	movlw	0
  9929  151E  00B8               	movwf	ReadBaud@row+1
  9930  151F  01B9               	clrf	ReadBaud@column
  9931  1520  319D  259C  3194   	fcall	_ReadBaud
  9932  1523  0020               	movlb	0	; select bank0
  9933  1524  083A               	movf	?_ReadBaud+3,w
  9934  1525  0022               	movlb	2	; select bank2
  9935  1526  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9936  1527  0020               	movlb	0	; select bank0
  9937  1528  0839               	movf	?_ReadBaud+2,w
  9938  1529  0022               	movlb	2	; select bank2
  9939  152A  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9940  152B  0020               	movlb	0	; select bank0
  9941  152C  0838               	movf	?_ReadBaud+1,w
  9942  152D  0022               	movlb	2	; select bank2
  9943  152E  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9944  152F  0020               	movlb	0	; select bank0
  9945  1530  0837               	movf	?_ReadBaud,w
  9946  1531  0022               	movlb	2	; select bank2
  9947  1532  00DA               	movwf	SetBaud@temp^(0+256)
  9948                           
  9949                           ;UART.c: 296: Baudtemp = temp & 0x000FFFFF;
  9950  1533  30FF               	movlw	255
  9951  1534  055A               	andwf	SetBaud@temp^(0+256),w
  9952  1535  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9953  1536  30FF               	movlw	255
  9954  1537  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9955  1538  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9956  1539  300F               	movlw	15
  9957  153A  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9958  153B  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9959  153C  3000               	movlw	0
  9960  153D  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9961  153E  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9962                           
  9963                           ;UART.c: 297: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9964  153F  085A               	movf	SetBaud@temp^(0+256),w
  9965  1540  0020               	movlb	0	; select bank0
  9966  1541  00D9               	movwf	??_SetBaud
  9967  1542  0022               	movlb	2	; select bank2
  9968  1543  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9969  1544  0020               	movlb	0	; select bank0
  9970  1545  00DA               	movwf	??_SetBaud+1
  9971  1546  0022               	movlb	2	; select bank2
  9972  1547  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9973  1548  0020               	movlb	0	; select bank0
  9974  1549  00DB               	movwf	??_SetBaud+2
  9975  154A  0022               	movlb	2	; select bank2
  9976  154B  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9977  154C  0020               	movlb	0	; select bank0
  9978  154D  00DC               	movwf	??_SetBaud+3
  9979  154E  3014               	movlw	20
  9980  154F                     u7875:	
  9981  154F  36DC               	lsrf	??_SetBaud+3,f
  9982  1550  0CDB               	rrf	??_SetBaud+2,f
  9983  1551  0CDA               	rrf	??_SetBaud+1,f
  9984  1552  0CD9               	rrf	??_SetBaud,f
  9985  1553  0B89               	decfsz	9,f
  9986  1554  2D4F               	goto	u7875
  9987  1555  0859               	movf	??_SetBaud,w
  9988  1556  390F               	andlw	15
  9989  1557  00DD               	movwf	??_SetBaud+4
  9990  1558  01DE               	clrf	??_SetBaud+5
  9991  1559  01DF               	clrf	??_SetBaud+6
  9992  155A  01E0               	clrf	??_SetBaud+7
  9993  155B  0860               	movf	??_SetBaud+7,w
  9994  155C  0022               	movlb	2	; select bank2
  9995  155D  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9996  155E  0020               	movlb	0	; select bank0
  9997  155F  085F               	movf	??_SetBaud+6,w
  9998  1560  0022               	movlb	2	; select bank2
  9999  1561  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
 10000  1562  0020               	movlb	0	; select bank0
 10001  1563  085E               	movf	??_SetBaud+5,w
 10002  1564  0022               	movlb	2	; select bank2
 10003  1565  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
 10004  1566  0020               	movlb	0	; select bank0
 10005  1567  085D               	movf	??_SetBaud+4,w
 10006  1568  0022               	movlb	2	; select bank2
 10007  1569  00D6               	movwf	SetBaud@Paritytemp^(0+256)
 10008                           
 10009                           ;UART.c: 299: InitUART(Baud, Parity);
 10010  156A  0020               	movlb	0	; select bank0
 10011  156B  0857               	movf	SetBaud@Baud+3,w
 10012  156C  00B6               	movwf	InitUART@Baud+3
 10013  156D  0856               	movf	SetBaud@Baud+2,w
 10014  156E  00B5               	movwf	InitUART@Baud+2
 10015  156F  0855               	movf	SetBaud@Baud+1,w
 10016  1570  00B4               	movwf	InitUART@Baud+1
 10017  1571  0854               	movf	SetBaud@Baud,w
 10018  1572  00B3               	movwf	InitUART@Baud
 10019  1573  0858               	movf	SetBaud@Parity,w
 10020  1574  00D9               	movwf	??_SetBaud
 10021  1575  0859               	movf	??_SetBaud,w
 10022  1576  00B7               	movwf	InitUART@parity
 10023  1577  3191  212D  3194   	fcall	_InitUART
 10024                           
 10025                           ;UART.c: 300: UARTstringWAIT("\r\n");
 10026  157A  30F0               	movlw	low ((STR_11+17)| (0+32768))
 10027  157B  0020               	movlb	0	; select bank0
 10028  157C  00B4               	movwf	UARTstringWAIT@data
 10029  157D  308C               	movlw	high ((STR_11+17)| (0+32768))
 10030  157E  00B5               	movwf	UARTstringWAIT@data+1
 10031  157F  319A  22E2  3194   	fcall	_UARTstringWAIT
 10032                           
 10033                           ;UART.c: 301: delayUS(10000);
 10034  1582  3000               	movlw	0
 10035  1583  0020               	movlb	0	; select bank0
 10036  1584  00A8               	movwf	delayUS@US+3
 10037  1585  3000               	movlw	0
 10038  1586  00A7               	movwf	delayUS@US+2
 10039  1587  3027               	movlw	39
 10040  1588  00A6               	movwf	delayUS@US+1
 10041  1589  3010               	movlw	16
 10042  158A  00A5               	movwf	delayUS@US
 10043  158B  319B  2315  3194   	fcall	_delayUS
 10044                           
 10045                           ;UART.c: 302: if((Baud != Baudtemp) || (Parity != Paritytemp))
 10046  158E  0022               	movlb	2	; select bank2
 10047  158F  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 10048  1590  0020               	movlb	0	; select bank0
 10049  1591  0657               	xorwf	SetBaud@Baud+3,w
 10050  1592  1D03               	skipz
 10051  1593  2DA4               	goto	u7885
 10052  1594  0022               	movlb	2	; select bank2
 10053  1595  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 10054  1596  0020               	movlb	0	; select bank0
 10055  1597  0656               	xorwf	SetBaud@Baud+2,w
 10056  1598  1D03               	skipz
 10057  1599  2DA4               	goto	u7885
 10058  159A  0022               	movlb	2	; select bank2
 10059  159B  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 10060  159C  0020               	movlb	0	; select bank0
 10061  159D  0655               	xorwf	SetBaud@Baud+1,w
 10062  159E  1D03               	skipz
 10063  159F  2DA4               	goto	u7885
 10064  15A0  0022               	movlb	2	; select bank2
 10065  15A1  0852               	movf	SetBaud@Baudtemp^(0+256),w
 10066  15A2  0020               	movlb	0	; select bank0
 10067  15A3  0654               	xorwf	SetBaud@Baud,w
 10068  15A4                     u7885:	
 10069  15A4  1D03               	skipz
 10070  15A5  2DC3               	goto	l6173
 10071  15A6  0858               	movf	SetBaud@Parity,w
 10072  15A7  00D9               	movwf	??_SetBaud
 10073  15A8  01DA               	clrf	??_SetBaud+1
 10074  15A9  01DB               	clrf	??_SetBaud+2
 10075  15AA  01DC               	clrf	??_SetBaud+3
 10076  15AB  0022               	movlb	2	; select bank2
 10077  15AC  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 10078  15AD  0020               	movlb	0	; select bank0
 10079  15AE  065C               	xorwf	??_SetBaud+3,w
 10080  15AF  1D03               	skipz
 10081  15B0  2DC1               	goto	u7895
 10082  15B1  0022               	movlb	2	; select bank2
 10083  15B2  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 10084  15B3  0020               	movlb	0	; select bank0
 10085  15B4  065B               	xorwf	??_SetBaud+2,w
 10086  15B5  1D03               	skipz
 10087  15B6  2DC1               	goto	u7895
 10088  15B7  0022               	movlb	2	; select bank2
 10089  15B8  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10090  15B9  0020               	movlb	0	; select bank0
 10091  15BA  065A               	xorwf	??_SetBaud+1,w
 10092  15BB  1D03               	skipz
 10093  15BC  2DC1               	goto	u7895
 10094  15BD  0022               	movlb	2	; select bank2
 10095  15BE  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10096  15BF  0020               	movlb	0	; select bank0
 10097  15C0  0659               	xorwf	??_SetBaud,w
 10098  15C1                     u7895:	
 10099  15C1  1903               	skipnz
 10100  15C2  2DD6               	goto	l6177
 10101  15C3                     l6173:	
 10102                           
 10103                           ;UART.c: 303: {
 10104                           ;UART.c: 304: UARTstringWAIT("Program Fail\r\n");
 10105  15C3  303C               	movlw	low (STR_19| (0+32768))
 10106  15C4  00B4               	movwf	UARTstringWAIT@data
 10107  15C5  308D               	movlw	high (STR_19| (0+32768))
 10108  15C6  00B5               	movwf	UARTstringWAIT@data+1
 10109  15C7  319A  22E2  3194   	fcall	_UARTstringWAIT
 10110                           
 10111                           ;UART.c: 305: delayUS(10000);
 10112  15CA  3000               	movlw	0
 10113  15CB  0020               	movlb	0	; select bank0
 10114  15CC  00A8               	movwf	delayUS@US+3
 10115  15CD  3000               	movlw	0
 10116  15CE  00A7               	movwf	delayUS@US+2
 10117  15CF  3027               	movlw	39
 10118  15D0  00A6               	movwf	delayUS@US+1
 10119  15D1  3010               	movlw	16
 10120  15D2  00A5               	movwf	delayUS@US
 10121  15D3  319B  2315  3194   	fcall	_delayUS
 10122  15D6                     l6177:	
 10123                           
 10124                           ;UART.c: 306: }
 10125                           ;UART.c: 309: for(i =0;i<10;i++)
 10126  15D6  0022               	movlb	2	; select bank2
 10127  15D7  01DE               	clrf	SetBaud@i^(0+256)
 10128  15D8  300A               	movlw	10
 10129  15D9  025E               	subwf	SetBaud@i^(0+256),w
 10130  15DA  1803               	btfsc	3,0
 10131  15DB  2E05               	goto	l6191
 10132  15DC                     l529:	
 10133                           
 10134                           ;UART.c: 310: {
 10135                           ;UART.c: 311: LATC |= 0b00010000;
 10136  15DC  160E               	bsf	14,4	;volatile
 10137                           
 10138                           ;UART.c: 312: delayUS(10000);
 10139  15DD  3000               	movlw	0
 10140  15DE  0020               	movlb	0	; select bank0
 10141  15DF  00A8               	movwf	delayUS@US+3
 10142  15E0  3000               	movlw	0
 10143  15E1  00A7               	movwf	delayUS@US+2
 10144  15E2  3027               	movlw	39
 10145  15E3  00A6               	movwf	delayUS@US+1
 10146  15E4  3010               	movlw	16
 10147  15E5  00A5               	movwf	delayUS@US
 10148  15E6  319B  2315  3194   	fcall	_delayUS
 10149                           
 10150                           ;UART.c: 313: LATC &= ~0b00010000;
 10151  15E9  30EF               	movlw	239
 10152  15EA  0020               	movlb	0	; select bank0
 10153  15EB  00D9               	movwf	??_SetBaud
 10154  15EC  0859               	movf	??_SetBaud,w
 10155  15ED  0022               	movlb	2	; select bank2
 10156  15EE  058E               	andwf	14,f	;volatile
 10157                           
 10158                           ;UART.c: 314: delayUS(10000);
 10159  15EF  3000               	movlw	0
 10160  15F0  0020               	movlb	0	; select bank0
 10161  15F1  00A8               	movwf	delayUS@US+3
 10162  15F2  3000               	movlw	0
 10163  15F3  00A7               	movwf	delayUS@US+2
 10164  15F4  3027               	movlw	39
 10165  15F5  00A6               	movwf	delayUS@US+1
 10166  15F6  3010               	movlw	16
 10167  15F7  00A5               	movwf	delayUS@US
 10168  15F8  319B  2315  3194   	fcall	_delayUS
 10169  15FB  3001               	movlw	1
 10170  15FC  0020               	movlb	0	; select bank0
 10171  15FD  00D9               	movwf	??_SetBaud
 10172  15FE  0859               	movf	??_SetBaud,w
 10173  15FF  0022               	movlb	2	; select bank2
 10174  1600  07DE               	addwf	SetBaud@i^(0+256),f
 10175  1601  300A               	movlw	10
 10176  1602  025E               	subwf	SetBaud@i^(0+256),w
 10177  1603  1C03               	skipc
 10178  1604  2DDC               	goto	l529
 10179  1605                     l6191:	
 10180                           
 10181                           ;UART.c: 315: }
 10182                           ;UART.c: 317: if(Parity)
 10183  1605  0020               	movlb	0	; select bank0
 10184  1606  0858               	movf	SetBaud@Parity,w
 10185  1607  1903               	btfsc	3,2
 10186  1608  2E3A               	goto	l6207
 10187                           
 10188                           ;UART.c: 318: {
 10189                           ;UART.c: 319: switch (Parity)
 10190  1609  2E2D               	goto	l6205
 10191  160A                     l6195:	
 10192                           ;UART.c: 320: {
 10193                           ;UART.c: 321: case 1:
 10194                           
 10195                           
 10196                           ;UART.c: 322: sprintf(buf,"Baud set to %lu with Odd parity bit\r\n",Baud);
 10197  160A  3020               	movlw	low SetBaud@buf
 10198  160B  00BD               	movwf	sprintf@sp
 10199  160C  3001               	movlw	high SetBaud@buf
 10200  160D  00BE               	movwf	sprintf@sp+1
 10201  160E  30FD               	movlw	low (STR_20| (0+32768))
 10202  160F  00BF               	movwf	sprintf@f
 10203  1610  308A               	movlw	high (STR_20| (0+32768))
 10204  1611  2E41               	goto	L15
 10205  1612                     l6197:	
 10206                           ;UART.c: 324: case 2:
 10207                           
 10208                           ;UART.c: 323: break;
 10209                           
 10210                           
 10211                           ;UART.c: 325: sprintf(buf,"Baud set to %lu with Even parity bit\r\n",Baud);
 10212  1612  3020               	movlw	low SetBaud@buf
 10213  1613  0020               	movlb	0	; select bank0
 10214  1614  00BD               	movwf	sprintf@sp
 10215  1615  3001               	movlw	high SetBaud@buf
 10216  1616  00BE               	movwf	sprintf@sp+1
 10217  1617  30D6               	movlw	low (STR_21| (0+32768))
 10218  1618  00BF               	movwf	sprintf@f
 10219  1619  308A               	movlw	high (STR_21| (0+32768))
 10220  161A  2E41               	goto	L15
 10221  161B                     l6199:	
 10222                           ;UART.c: 327: case 3:
 10223                           
 10224                           ;UART.c: 326: break;
 10225                           
 10226                           
 10227                           ;UART.c: 328: sprintf(buf,"Baud set to %lu with Mark bit\r\n",Baud);
 10228  161B  3020               	movlw	low SetBaud@buf
 10229  161C  0020               	movlb	0	; select bank0
 10230  161D  00BD               	movwf	sprintf@sp
 10231  161E  3001               	movlw	high SetBaud@buf
 10232  161F  00BE               	movwf	sprintf@sp+1
 10233  1620  3015               	movlw	low (STR_22| (0+32768))
 10234  1621  00BF               	movwf	sprintf@f
 10235  1622  308C               	movlw	high (STR_22| (0+32768))
 10236  1623  2E41               	goto	L15
 10237  1624                     l6201:	
 10238                           ;UART.c: 330: default:
 10239                           
 10240                           ;UART.c: 329: break;
 10241                           
 10242                           
 10243                           ;UART.c: 331: sprintf(buf,"Baud set to %lu with Space bit\r\n",Baud);
 10244  1624  3020               	movlw	low SetBaud@buf
 10245  1625  0020               	movlb	0	; select bank0
 10246  1626  00BD               	movwf	sprintf@sp
 10247  1627  3001               	movlw	high SetBaud@buf
 10248  1628  00BE               	movwf	sprintf@sp+1
 10249  1629  30D3               	movlw	low (STR_23| (0+32768))
 10250  162A  00BF               	movwf	sprintf@f
 10251  162B  308B               	movlw	high (STR_23| (0+32768))
 10252  162C  2E41               	goto	L15
 10253  162D                     l6205:	
 10254                           ;UART.c: 333: }
 10255                           
 10256                           ;UART.c: 332: break;
 10257                           
 10258  162D  0020               	movlb	0	; select bank0
 10259  162E  0858               	movf	SetBaud@Parity,w
 10260                           
 10261                           ; Switch size 1, requested type "space"
 10262                           ; Number of cases is 3, Range of values is 1 to 3
 10263                           ; switch strategies available:
 10264                           ; Name         Instructions Cycles
 10265                           ; simple_byte           10     6 (average)
 10266                           ; direct_byte           15     9 (fixed)
 10267                           ; jumptable            263     9 (fixed)
 10268                           ;	Chosen strategy is simple_byte
 10269  162F  3A01               	xorlw	1	; case 1
 10270  1630  1903               	skipnz
 10271  1631  2E0A               	goto	l6195
 10272  1632  3A03               	xorlw	3	; case 2
 10273  1633  1903               	skipnz
 10274  1634  2E12               	goto	l6197
 10275  1635  3A01               	xorlw	1	; case 3
 10276  1636  1903               	skipnz
 10277  1637  2E1B               	goto	l6199
 10278  1638  2E24               	goto	l6201
 10279                           
 10280                           ;UART.c: 334: }
 10281  1639  2E4D               	goto	l6209
 10282  163A                     l6207:	
 10283                           
 10284                           ;UART.c: 335: else
 10285                           ;UART.c: 336: {
 10286                           ;UART.c: 337: sprintf(buf,"Baud set to %lu with no parity bit\r\n",Baud);
 10287  163A  3020               	movlw	low SetBaud@buf
 10288  163B  00BD               	movwf	sprintf@sp
 10289  163C  3001               	movlw	high SetBaud@buf
 10290  163D  00BE               	movwf	sprintf@sp+1
 10291  163E  3023               	movlw	low (STR_24| (0+32768))
 10292  163F  00BF               	movwf	sprintf@f
 10293  1640  308B               	movlw	high (STR_24| (0+32768))
 10294  1641                     L15:	
 10295  1641  00C0               	movwf	sprintf@f+1
 10296  1642  0857               	movf	SetBaud@Baud+3,w
 10297  1643  00C4               	movwf	?_sprintf+7
 10298  1644  0856               	movf	SetBaud@Baud+2,w
 10299  1645  00C3               	movwf	?_sprintf+6
 10300  1646  0855               	movf	SetBaud@Baud+1,w
 10301  1647  00C2               	movwf	?_sprintf+5
 10302  1648  0854               	movf	SetBaud@Baud,w
 10303  1649  00C1               	movwf	?_sprintf+4
 10304  164A  3194  2400  3194   	fcall	_sprintf
 10305  164D                     l6209:	
 10306                           
 10307                           ;UART.c: 338: }
 10308                           ;UART.c: 339: UARTstringWAIT(buf);
 10309  164D  3020               	movlw	low SetBaud@buf
 10310  164E  0020               	movlb	0	; select bank0
 10311  164F  00B4               	movwf	UARTstringWAIT@data
 10312  1650  3001               	movlw	high SetBaud@buf
 10313  1651  00B5               	movwf	UARTstringWAIT@data+1
 10314  1652  319A  22E2  3194   	fcall	_UARTstringWAIT
 10315                           
 10316                           ;UART.c: 340: delayUS(10000);
 10317  1655  3000               	movlw	0
 10318  1656  0020               	movlb	0	; select bank0
 10319  1657  00A8               	movwf	delayUS@US+3
 10320  1658  3000               	movlw	0
 10321  1659  00A7               	movwf	delayUS@US+2
 10322  165A  3027               	movlw	39
 10323  165B  00A6               	movwf	delayUS@US+1
 10324  165C  3010               	movlw	16
 10325  165D  00A5               	movwf	delayUS@US
 10326  165E  319B  2315         	fcall	_delayUS
 10327  1660  0008               	return
 10328  1661                     __end_of_SetBaud:	
 10329                           
 10330                           	psect	text16
 10331  07A2                     __ptext16:	
 10332 ;; *************** function _WriteBaud *****************
 10333 ;; Defined at:
 10334 ;;		line 127 in file "FLASH.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  row             2   22[BANK0 ] unsigned int 
 10337 ;;  Baud            4   24[BANK0 ] unsigned long 
 10338 ;;  Parity          1   28[BANK0 ] unsigned char 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  temp            4   37[BANK0 ] unsigned long 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;		None               void
 10343 ;; Registers used:
 10344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10350 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;Total ram usage:       19 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    6
 10357 ;; This function calls:
 10358 ;;		_WriteFlash_Sequential
 10359 ;; This function is called by:
 10360 ;;		_SetBaud
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           
 10365                           ;psect for function _WriteBaud
 10366  07A2                     _WriteBaud:	
 10367                           
 10368                           ;FLASH.c: 129: unsigned long temp;
 10369                           ;FLASH.c: 130: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10370                           
 10371                           ;incstack = 0
 10372                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10373  07A2  0020               	movlb	0	; select bank0
 10374  07A3  083C               	movf	WriteBaud@Parity,w
 10375  07A4  3907               	andlw	7
 10376  07A5  00BD               	movwf	??_WriteBaud
 10377  07A6  01BE               	clrf	??_WriteBaud+1
 10378  07A7  01BF               	clrf	??_WriteBaud+2
 10379  07A8  01C0               	clrf	??_WriteBaud+3
 10380  07A9  3014               	movlw	20
 10381  07AA                     u7745:	
 10382  07AA  35BD               	lslf	??_WriteBaud,f
 10383  07AB  0DBE               	rlf	??_WriteBaud+1,f
 10384  07AC  0DBF               	rlf	??_WriteBaud+2,f
 10385  07AD  0DC0               	rlf	??_WriteBaud+3,f
 10386  07AE  0B89               	decfsz	9,f
 10387  07AF  2FAA               	goto	u7745
 10388  07B0  30FF               	movlw	255
 10389  07B1  0538               	andwf	WriteBaud@Baud,w
 10390  07B2  00C1               	movwf	??_WriteBaud+4
 10391  07B3  30FF               	movlw	255
 10392  07B4  0539               	andwf	WriteBaud@Baud+1,w
 10393  07B5  00C2               	movwf	??_WriteBaud+5
 10394  07B6  300F               	movlw	15
 10395  07B7  053A               	andwf	WriteBaud@Baud+2,w
 10396  07B8  00C3               	movwf	??_WriteBaud+6
 10397  07B9  3000               	movlw	0
 10398  07BA  053B               	andwf	WriteBaud@Baud+3,w
 10399  07BB  00C4               	movwf	??_WriteBaud+7
 10400  07BC  0841               	movf	??_WriteBaud+4,w
 10401  07BD  07BD               	addwf	??_WriteBaud,f
 10402  07BE  0842               	movf	??_WriteBaud+5,w
 10403  07BF  3DBE               	addwfc	??_WriteBaud+1,f
 10404  07C0  0843               	movf	??_WriteBaud+6,w
 10405  07C1  3DBF               	addwfc	??_WriteBaud+2,f
 10406  07C2  0844               	movf	??_WriteBaud+7,w
 10407  07C3  3DC0               	addwfc	??_WriteBaud+3,f
 10408  07C4  0840               	movf	??_WriteBaud+3,w
 10409  07C5  00C8               	movwf	WriteBaud@temp+3
 10410  07C6  083F               	movf	??_WriteBaud+2,w
 10411  07C7  00C7               	movwf	WriteBaud@temp+2
 10412  07C8  083E               	movf	??_WriteBaud+1,w
 10413  07C9  00C6               	movwf	WriteBaud@temp+1
 10414  07CA  083D               	movf	??_WriteBaud,w
 10415  07CB  00C5               	movwf	WriteBaud@temp
 10416                           
 10417                           ;FLASH.c: 131: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10418  07CC  30FF               	movlw	255
 10419  07CD  0545               	andwf	WriteBaud@temp,w
 10420  07CE  0022               	movlb	2	; select bank2
 10421  07CF  00ED               	movwf	(_MEM^(0+256)+2)
 10422  07D0  303F               	movlw	63
 10423  07D1  0020               	movlb	0	; select bank0
 10424  07D2  0546               	andwf	WriteBaud@temp+1,w
 10425  07D3  0022               	movlb	2	; select bank2
 10426  07D4  00EE               	movwf	((_MEM+1)^(0+256)+2)
 10427                           
 10428                           ;FLASH.c: 132: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10429  07D5  0020               	movlb	0	; select bank0
 10430  07D6  0845               	movf	WriteBaud@temp,w
 10431  07D7  00BD               	movwf	??_WriteBaud
 10432  07D8  0846               	movf	WriteBaud@temp+1,w
 10433  07D9  00BE               	movwf	??_WriteBaud+1
 10434  07DA  0847               	movf	WriteBaud@temp+2,w
 10435  07DB  00BF               	movwf	??_WriteBaud+2
 10436  07DC  0848               	movf	WriteBaud@temp+3,w
 10437  07DD  00C0               	movwf	??_WriteBaud+3
 10438  07DE  300E               	movlw	14
 10439  07DF                     u7755:	
 10440  07DF  36C0               	lsrf	??_WriteBaud+3,f
 10441  07E0  0CBF               	rrf	??_WriteBaud+2,f
 10442  07E1  0CBE               	rrf	??_WriteBaud+1,f
 10443  07E2  0CBD               	rrf	??_WriteBaud,f
 10444  07E3  0B89               	decfsz	9,f
 10445  07E4  2FDF               	goto	u7755
 10446  07E5  30FF               	movlw	255
 10447  07E6  053D               	andwf	??_WriteBaud,w
 10448  07E7  0022               	movlb	2	; select bank2
 10449  07E8  00EB               	movwf	_MEM^(0+256)
 10450  07E9  303F               	movlw	63
 10451  07EA  0020               	movlb	0	; select bank0
 10452  07EB  053E               	andwf	??_WriteBaud+1,w
 10453  07EC  0022               	movlb	2	; select bank2
 10454  07ED  00EC               	movwf	(_MEM+1)^(0+256)
 10455                           
 10456                           ;FLASH.c: 133: WriteFlash_Sequential(row, MEM, 2);
 10457  07EE  0020               	movlb	0	; select bank0
 10458  07EF  0837               	movf	WriteBaud@row+1,w
 10459  07F0  01B0               	clrf	WriteFlash_Sequential@row+1
 10460  07F1  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10461  07F2  0836               	movf	WriteBaud@row,w
 10462  07F3  01AF               	clrf	WriteFlash_Sequential@row
 10463  07F4  07AF               	addwf	WriteFlash_Sequential@row,f
 10464  07F5  306B               	movlw	_MEM& (0+255)
 10465  07F6  00BD               	movwf	??_WriteBaud
 10466  07F7  083D               	movf	??_WriteBaud,w
 10467  07F8  00B1               	movwf	WriteFlash_Sequential@buffer
 10468  07F9  3002               	movlw	2
 10469  07FA  00BE               	movwf	??_WriteBaud+1
 10470  07FB  083E               	movf	??_WriteBaud+1,w
 10471  07FC  00B2               	movwf	WriteFlash_Sequential@amount
 10472  07FD  3192  221B         	fcall	_WriteFlash_Sequential
 10473  07FF  0008               	return
 10474  0800                     __end_of_WriteBaud:	
 10475                           
 10476                           	psect	text17
 10477  121B                     __ptext17:	
 10478 ;; *************** function _WriteFlash_Sequential *****************
 10479 ;; Defined at:
 10480 ;;		line 73 in file "FLASH.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  row             2   15[BANK0 ] unsigned int 
 10483 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10484 ;;		 -> MEM(4), 
 10485 ;;  amount          1   18[BANK0 ] unsigned char 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10488 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10489 ;;  temp            2   67[BANK1 ] unsigned int 
 10490 ;;  i               1   70[BANK1 ] unsigned char 
 10491 ;;  spaces          1   69[BANK1 ] unsigned char 
 10492 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10493 ;;  tempL           1   65[BANK1 ] unsigned char 
 10494 ;;  tempH           1   64[BANK1 ] unsigned char 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;		None               void
 10497 ;; Registers used:
 10498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;Total ram usage:       78 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    5
 10511 ;; This function calls:
 10512 ;;		_BlockErase
 10513 ;;		_ReadFlash_2Byte
 10514 ;;		_UNLOCK
 10515 ;;		_delayUS
 10516 ;; This function is called by:
 10517 ;;		_WriteBaud
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _WriteFlash_Sequential
 10523  121B                     _WriteFlash_Sequential:	
 10524                           
 10525                           ;FLASH.c: 75: unsigned char spaces = 32;
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10529  121B  3020               	movlw	32
 10530  121C  0020               	movlb	0	; select bank0
 10531  121D  00B3               	movwf	??_WriteFlash_Sequential
 10532  121E  0833               	movf	??_WriteFlash_Sequential,w
 10533  121F  0021               	movlb	1	; select bank1
 10534  1220  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10535                           
 10536                           ;FLASH.c: 76: unsigned char tempH;
 10537                           ;FLASH.c: 77: unsigned char tempL;
 10538                           ;FLASH.c: 78: unsigned char i;
 10539                           ;FLASH.c: 79: unsigned int temp;
 10540                           ;FLASH.c: 80: unsigned char amountTemp =0;
 10541  1221  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10542                           
 10543                           ;FLASH.c: 81: unsigned char TempBufH[32];
 10544                           ;FLASH.c: 82: unsigned char TempBufL[32];
 10545                           ;FLASH.c: 84: for(i=0;i<spaces;i++)
 10546  1222  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10547  1223                     l5835:	
 10548  1223  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10549  1224  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10550  1225  1803               	btfsc	3,0
 10551  1226  2A94               	goto	l5837
 10552                           
 10553                           ;FLASH.c: 85: {
 10554                           ;FLASH.c: 86: amountTemp++;
 10555  1227  3001               	movlw	1
 10556  1228  0020               	movlb	0	; select bank0
 10557  1229  00B3               	movwf	??_WriteFlash_Sequential
 10558  122A  0833               	movf	??_WriteFlash_Sequential,w
 10559  122B  0021               	movlb	1	; select bank1
 10560  122C  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10561                           
 10562                           ;FLASH.c: 87: if(amountTemp <= amount)
 10563  122D  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10564  122E  0020               	movlb	0	; select bank0
 10565  122F  0232               	subwf	WriteFlash_Sequential@amount,w
 10566  1230  1C03               	skipc
 10567  1231  2A50               	goto	l5823
 10568                           
 10569                           ;FLASH.c: 88: {
 10570                           ;FLASH.c: 89: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10571  1232  0831               	movf	WriteFlash_Sequential@buffer,w
 10572  1233  0086               	movwf	6
 10573  1234  3001               	movlw	1	; select bank2/3
 10574  1235  0087               	movwf	7
 10575  1236  3F40               	moviw [0]fsr1
 10576  1237  00B3               	movwf	??_WriteFlash_Sequential
 10577  1238  3F41               	moviw [1]fsr1
 10578  1239  00B4               	movwf	??_WriteFlash_Sequential+1
 10579  123A  0834               	movf	??_WriteFlash_Sequential+1,w
 10580  123B  393F               	andlw	63
 10581  123C  00B5               	movwf	??_WriteFlash_Sequential+2
 10582  123D  0835               	movf	??_WriteFlash_Sequential+2,w
 10583  123E  0021               	movlb	1	; select bank1
 10584  123F  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10585                           
 10586                           ;FLASH.c: 90: tempL = (unsigned char)(*buffer & 0x00FF);
 10587  1240  0020               	movlb	0	; select bank0
 10588  1241  0831               	movf	WriteFlash_Sequential@buffer,w
 10589  1242  0086               	movwf	6
 10590  1243  3001               	movlw	1	; select bank2/3
 10591  1244  0087               	movwf	7
 10592  1245  0801               	movf	1,w
 10593  1246  00B3               	movwf	??_WriteFlash_Sequential
 10594  1247  0833               	movf	??_WriteFlash_Sequential,w
 10595  1248  0021               	movlb	1	; select bank1
 10596  1249  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10597                           
 10598                           ;FLASH.c: 91: buffer++;
 10599  124A  3002               	movlw	2
 10600  124B  0020               	movlb	0	; select bank0
 10601  124C  00B3               	movwf	??_WriteFlash_Sequential
 10602  124D  0833               	movf	??_WriteFlash_Sequential,w
 10603  124E  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10604                           
 10605                           ;FLASH.c: 92: }
 10606  124F  2A76               	goto	l5829
 10607  1250                     l5823:	
 10608                           
 10609                           ;FLASH.c: 93: else
 10610                           ;FLASH.c: 94: {
 10611                           ;FLASH.c: 96: temp = ReadFlash_2Byte(row, i);
 10612  1250  0830               	movf	WriteFlash_Sequential@row+1,w
 10613  1251  01A6               	clrf	ReadFlash_2Byte@row+1
 10614  1252  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10615  1253  082F               	movf	WriteFlash_Sequential@row,w
 10616  1254  01A5               	clrf	ReadFlash_2Byte@row
 10617  1255  07A5               	addwf	ReadFlash_2Byte@row,f
 10618  1256  0021               	movlb	1	; select bank1
 10619  1257  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10620  1258  0020               	movlb	0	; select bank0
 10621  1259  00B3               	movwf	??_WriteFlash_Sequential
 10622  125A  0833               	movf	??_WriteFlash_Sequential,w
 10623  125B  00A7               	movwf	ReadFlash_2Byte@column
 10624  125C  319A  22B0  3192   	fcall	_ReadFlash_2Byte
 10625  125F  0020               	movlb	0	; select bank0
 10626  1260  0826               	movf	?_ReadFlash_2Byte+1,w
 10627  1261  0021               	movlb	1	; select bank1
 10628  1262  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10629  1263  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10630  1264  0020               	movlb	0	; select bank0
 10631  1265  0825               	movf	?_ReadFlash_2Byte,w
 10632  1266  0021               	movlb	1	; select bank1
 10633  1267  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10634  1268  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10635                           
 10636                           ;FLASH.c: 97: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10637  1269  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10638  126A  393F               	andlw	63
 10639  126B  0020               	movlb	0	; select bank0
 10640  126C  00B3               	movwf	??_WriteFlash_Sequential
 10641  126D  0833               	movf	??_WriteFlash_Sequential,w
 10642  126E  0021               	movlb	1	; select bank1
 10643  126F  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10644                           
 10645                           ;FLASH.c: 98: tempL = (unsigned char)(temp & 0x00FF);
 10646  1270  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10647  1271  0020               	movlb	0	; select bank0
 10648  1272  00B3               	movwf	??_WriteFlash_Sequential
 10649  1273  0833               	movf	??_WriteFlash_Sequential,w
 10650  1274  0021               	movlb	1	; select bank1
 10651  1275  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10652  1276                     l5829:	
 10653                           
 10654                           ;FLASH.c: 99: }
 10655                           ;FLASH.c: 100: TempBufH[i] = tempH;
 10656  1276  0021               	movlb	1	; select bank1
 10657  1277  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10658  1278  0020               	movlb	0	; select bank0
 10659  1279  00B3               	movwf	??_WriteFlash_Sequential
 10660  127A  0021               	movlb	1	; select bank1
 10661  127B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10662  127C  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10663  127D  0086               	movwf	6
 10664  127E  0187               	clrf	7
 10665  127F  0020               	movlb	0	; select bank0
 10666  1280  0833               	movf	??_WriteFlash_Sequential,w
 10667  1281  0081               	movwf	1
 10668                           
 10669                           ;FLASH.c: 101: TempBufL[i] = tempL;
 10670  1282  0021               	movlb	1	; select bank1
 10671  1283  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10672  1284  0020               	movlb	0	; select bank0
 10673  1285  00B3               	movwf	??_WriteFlash_Sequential
 10674  1286  0021               	movlb	1	; select bank1
 10675  1287  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10676  1288  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10677  1289  0086               	movwf	6
 10678  128A  0187               	clrf	7
 10679  128B  0020               	movlb	0	; select bank0
 10680  128C  0833               	movf	??_WriteFlash_Sequential,w
 10681  128D  0081               	movwf	1
 10682  128E  3001               	movlw	1
 10683  128F  00B3               	movwf	??_WriteFlash_Sequential
 10684  1290  0833               	movf	??_WriteFlash_Sequential,w
 10685  1291  0021               	movlb	1	; select bank1
 10686  1292  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10687  1293  2A23               	goto	l5835
 10688  1294                     l5837:	
 10689                           
 10690                           ;FLASH.c: 102: }
 10691                           ;FLASH.c: 103: BlockErase(row);
 10692  1294  0020               	movlb	0	; select bank0
 10693  1295  0830               	movf	WriteFlash_Sequential@row+1,w
 10694  1296  01A6               	clrf	BlockErase@row+1
 10695  1297  07A6               	addwf	BlockErase@row+1,f
 10696  1298  082F               	movf	WriteFlash_Sequential@row,w
 10697  1299  01A5               	clrf	BlockErase@row
 10698  129A  07A5               	addwf	BlockErase@row,f
 10699  129B  319A  227F  3192   	fcall	_BlockErase
 10700                           
 10701                           ;FLASH.c: 104: delayUS(1000);
 10702  129E  3000               	movlw	0
 10703  129F  0020               	movlb	0	; select bank0
 10704  12A0  00A8               	movwf	delayUS@US+3
 10705  12A1  3000               	movlw	0
 10706  12A2  00A7               	movwf	delayUS@US+2
 10707  12A3  3003               	movlw	3
 10708  12A4  00A6               	movwf	delayUS@US+1
 10709  12A5  30E8               	movlw	232
 10710  12A6  00A5               	movwf	delayUS@US
 10711  12A7  319B  2315  3192   	fcall	_delayUS
 10712                           
 10713                           ;FLASH.c: 105: INTCON &= ~0x80;
 10714  12AA  307F               	movlw	127
 10715  12AB  0020               	movlb	0	; select bank0
 10716  12AC  00B3               	movwf	??_WriteFlash_Sequential
 10717  12AD  0833               	movf	??_WriteFlash_Sequential,w
 10718  12AE  058B               	andwf	11,f	;volatile
 10719                           
 10720                           ;FLASH.c: 106: PMCON1 |= 0b00000100;
 10721  12AF  0023               	movlb	3	; select bank3
 10722  12B0  1515               	bsf	21,2	;volatile
 10723                           
 10724                           ;FLASH.c: 107: PMCON1 &= ~0b01000000;
 10725  12B1  30BF               	movlw	191
 10726  12B2  0020               	movlb	0	; select bank0
 10727  12B3  00B3               	movwf	??_WriteFlash_Sequential
 10728  12B4  0833               	movf	??_WriteFlash_Sequential,w
 10729  12B5  0023               	movlb	3	; select bank3
 10730  12B6  0595               	andwf	21,f	;volatile
 10731                           
 10732                           ;FLASH.c: 108: PMCON1 &= ~0b00100000;
 10733  12B7  30DF               	movlw	223
 10734  12B8  0020               	movlb	0	; select bank0
 10735  12B9  00B3               	movwf	??_WriteFlash_Sequential
 10736  12BA  0833               	movf	??_WriteFlash_Sequential,w
 10737  12BB  0023               	movlb	3	; select bank3
 10738  12BC  0595               	andwf	21,f	;volatile
 10739                           
 10740                           ;FLASH.c: 109: PMCON1 &= ~0b00010000;
 10741  12BD  30EF               	movlw	239
 10742  12BE  0020               	movlb	0	; select bank0
 10743  12BF  00B3               	movwf	??_WriteFlash_Sequential
 10744  12C0  0833               	movf	??_WriteFlash_Sequential,w
 10745  12C1  0023               	movlb	3	; select bank3
 10746  12C2  0595               	andwf	21,f	;volatile
 10747                           
 10748                           ;FLASH.c: 110: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10749  12C3  0020               	movlb	0	; select bank0
 10750  12C4  0830               	movf	WriteFlash_Sequential@row+1,w
 10751  12C5  00B4               	movwf	??_WriteFlash_Sequential+1
 10752  12C6  082F               	movf	WriteFlash_Sequential@row,w
 10753  12C7  00B3               	movwf	??_WriteFlash_Sequential
 10754  12C8  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10755  12C9  0CB3               	rrf	??_WriteFlash_Sequential,f
 10756  12CA  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10757  12CB  0CB3               	rrf	??_WriteFlash_Sequential,f
 10758  12CC  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10759  12CD  0CB3               	rrf	??_WriteFlash_Sequential,f
 10760  12CE  0833               	movf	??_WriteFlash_Sequential,w
 10761  12CF  397F               	andlw	127
 10762  12D0  0023               	movlb	3	; select bank3
 10763  12D1  0092               	movwf	18	;volatile
 10764                           
 10765                           ;FLASH.c: 111: PMADRL = (unsigned char)((row & 0x007) << 5);
 10766  12D2  0020               	movlb	0	; select bank0
 10767  12D3  082F               	movf	WriteFlash_Sequential@row,w
 10768  12D4  3907               	andlw	7
 10769  12D5  00B3               	movwf	??_WriteFlash_Sequential
 10770  12D6  3004               	movlw	4
 10771  12D7                     u7415:	
 10772  12D7  35B3               	lslf	??_WriteFlash_Sequential,f
 10773  12D8  3EFF               	addlw	-1
 10774  12D9  1D03               	skipz
 10775  12DA  2AD7               	goto	u7415
 10776  12DB  3533               	lslf	??_WriteFlash_Sequential,w
 10777  12DC  0023               	movlb	3	; select bank3
 10778  12DD  0091               	movwf	17	;volatile
 10779                           
 10780                           ;FLASH.c: 113: for(i=0;i<spaces;i++)
 10781  12DE  0021               	movlb	1	; select bank1
 10782  12DF  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10783  12E0                     l5867:	
 10784  12E0  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10785  12E1  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10786  12E2  1803               	btfsc	3,0
 10787  12E3  2B05               	goto	l5869
 10788                           
 10789                           ;FLASH.c: 114: {
 10790                           ;FLASH.c: 115: PMDATH = TempBufH[i];
 10791  12E4  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10792  12E5  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10793  12E6  0086               	movwf	6
 10794  12E7  0187               	clrf	7
 10795  12E8  0801               	movf	1,w
 10796  12E9  0023               	movlb	3	; select bank3
 10797  12EA  0094               	movwf	20	;volatile
 10798                           
 10799                           ;FLASH.c: 116: PMDATL = TempBufL[i];
 10800  12EB  0021               	movlb	1	; select bank1
 10801  12EC  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10802  12ED  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10803  12EE  0086               	movwf	6
 10804  12EF  0187               	clrf	7
 10805  12F0  0801               	movf	1,w
 10806  12F1  0023               	movlb	3	; select bank3
 10807  12F2  0093               	movwf	19	;volatile
 10808                           
 10809                           ;FLASH.c: 117: __nop();
 10810  12F3  0000               	nop
 10811                           
 10812                           ;FLASH.c: 118: __nop();
 10813  12F4  0000               	nop
 10814                           
 10815                           ;FLASH.c: 119: UNLOCK();
 10816  12F5  3198  20AF  3192   	fcall	_UNLOCK
 10817                           
 10818                           ;FLASH.c: 120: PMADRL++;
 10819  12F8  3001               	movlw	1
 10820  12F9  0020               	movlb	0	; select bank0
 10821  12FA  00B3               	movwf	??_WriteFlash_Sequential
 10822  12FB  0833               	movf	??_WriteFlash_Sequential,w
 10823  12FC  0023               	movlb	3	; select bank3
 10824  12FD  0791               	addwf	17,f	;volatile
 10825  12FE  3001               	movlw	1
 10826  12FF  0020               	movlb	0	; select bank0
 10827  1300  00B3               	movwf	??_WriteFlash_Sequential
 10828  1301  0833               	movf	??_WriteFlash_Sequential,w
 10829  1302  0021               	movlb	1	; select bank1
 10830  1303  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10831  1304  2AE0               	goto	l5867
 10832  1305                     l5869:	
 10833                           
 10834                           ;FLASH.c: 122: }
 10835                           ;FLASH.c: 123: PMCON1 &= ~0b00000100;
 10836  1305  30FB               	movlw	251
 10837  1306  0020               	movlb	0	; select bank0
 10838  1307  00B3               	movwf	??_WriteFlash_Sequential
 10839  1308  0833               	movf	??_WriteFlash_Sequential,w
 10840  1309  0023               	movlb	3	; select bank3
 10841  130A  0595               	andwf	21,f	;volatile
 10842                           
 10843                           ;FLASH.c: 124: INTCON |= 0x80;
 10844  130B  178B               	bsf	11,7	;volatile
 10845  130C  0008               	return
 10846  130D                     __end_of_WriteFlash_Sequential:	
 10847                           
 10848                           	psect	text18
 10849  1A7F                     __ptext18:	
 10850 ;; *************** function _BlockErase *****************
 10851 ;; Defined at:
 10852 ;;		line 61 in file "FLASH.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;  row             2    5[BANK0 ] unsigned int 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;		None               void
 10859 ;; Registers used:
 10860 ;;		wreg, status,2, status,0, pclath, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;Total ram usage:        4 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    4
 10873 ;; This function calls:
 10874 ;;		_UNLOCK
 10875 ;; This function is called by:
 10876 ;;		_WriteFlash_Sequential
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           
 10881                           ;psect for function _BlockErase
 10882  1A7F                     _BlockErase:	
 10883                           
 10884                           ;FLASH.c: 63: INTCON &= ~0x80;
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10888  1A7F  307F               	movlw	127
 10889  1A80  0020               	movlb	0	; select bank0
 10890  1A81  00A7               	movwf	??_BlockErase
 10891  1A82  0827               	movf	??_BlockErase,w
 10892  1A83  058B               	andwf	11,f	;volatile
 10893                           
 10894                           ;FLASH.c: 64: PMCON1 &= ~0b01000000;
 10895  1A84  30BF               	movlw	191
 10896  1A85  00A7               	movwf	??_BlockErase
 10897  1A86  0827               	movf	??_BlockErase,w
 10898  1A87  0023               	movlb	3	; select bank3
 10899  1A88  0595               	andwf	21,f	;volatile
 10900                           
 10901                           ;FLASH.c: 65: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10902  1A89  0020               	movlb	0	; select bank0
 10903  1A8A  0826               	movf	BlockErase@row+1,w
 10904  1A8B  00A8               	movwf	??_BlockErase+1
 10905  1A8C  0825               	movf	BlockErase@row,w
 10906  1A8D  00A7               	movwf	??_BlockErase
 10907  1A8E  36A8               	lsrf	??_BlockErase+1,f
 10908  1A8F  0CA7               	rrf	??_BlockErase,f
 10909  1A90  36A8               	lsrf	??_BlockErase+1,f
 10910  1A91  0CA7               	rrf	??_BlockErase,f
 10911  1A92  36A8               	lsrf	??_BlockErase+1,f
 10912  1A93  0CA7               	rrf	??_BlockErase,f
 10913  1A94  0827               	movf	??_BlockErase,w
 10914  1A95  397F               	andlw	127
 10915  1A96  0023               	movlb	3	; select bank3
 10916  1A97  0092               	movwf	18	;volatile
 10917                           
 10918                           ;FLASH.c: 66: PMADRL = (unsigned char)((row & 0x007) << 5);
 10919  1A98  0020               	movlb	0	; select bank0
 10920  1A99  0825               	movf	BlockErase@row,w
 10921  1A9A  3907               	andlw	7
 10922  1A9B  00A7               	movwf	??_BlockErase
 10923  1A9C  3004               	movlw	4
 10924  1A9D                     u7265:	
 10925  1A9D  35A7               	lslf	??_BlockErase,f
 10926  1A9E  3EFF               	addlw	-1
 10927  1A9F  1D03               	skipz
 10928  1AA0  2A9D               	goto	u7265
 10929  1AA1  3527               	lslf	??_BlockErase,w
 10930  1AA2  0023               	movlb	3	; select bank3
 10931  1AA3  0091               	movwf	17	;volatile
 10932                           
 10933                           ;FLASH.c: 67: PMCON1 |= 0b00010000;
 10934  1AA4  1615               	bsf	21,4	;volatile
 10935                           
 10936                           ;FLASH.c: 68: PMCON1 |= 0b00000100;
 10937  1AA5  1515               	bsf	21,2	;volatile
 10938                           
 10939                           ;FLASH.c: 69: UNLOCK();
 10940  1AA6  3198  20AF         	fcall	_UNLOCK
 10941                           
 10942                           ;FLASH.c: 70: PMCON1 &= ~0b00000100;
 10943  1AA8  30FB               	movlw	251
 10944  1AA9  0020               	movlb	0	; select bank0
 10945  1AAA  00A7               	movwf	??_BlockErase
 10946  1AAB  0827               	movf	??_BlockErase,w
 10947  1AAC  0023               	movlb	3	; select bank3
 10948  1AAD  0595               	andwf	21,f	;volatile
 10949                           
 10950                           ;FLASH.c: 71: INTCON |= 0x80;
 10951  1AAE  178B               	bsf	11,7	;volatile
 10952  1AAF  0008               	return
 10953  1AB0                     __end_of_BlockErase:	
 10954                           
 10955                           	psect	text19
 10956  18AF                     __ptext19:	
 10957 ;; *************** function _UNLOCK *****************
 10958 ;; Defined at:
 10959 ;;		line 51 in file "FLASH.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;		None               void
 10966 ;; Registers used:
 10967 ;;		wreg
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;Total ram usage:        0 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    3
 10980 ;; This function calls:
 10981 ;;		Nothing
 10982 ;; This function is called by:
 10983 ;;		_BlockErase
 10984 ;;		_WriteFlash_Sequential
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           
 10989                           ;psect for function _UNLOCK
 10990  18AF                     _UNLOCK:	
 10991                           
 10992                           ;FLASH.c: 53: PMCON2 = 0x55;
 10993                           
 10994                           ;incstack = 0
 10995                           ; Regs used in _UNLOCK: [wreg]
 10996  18AF  3055               	movlw	85
 10997  18B0  0023               	movlb	3	; select bank3
 10998  18B1  0096               	movwf	22	;volatile
 10999                           
 11000                           ;FLASH.c: 54: PMCON2 = 0xAA;
 11001  18B2  30AA               	movlw	170
 11002  18B3  0096               	movwf	22	;volatile
 11003                           
 11004                           ;FLASH.c: 55: PMCON1 |= 0b00000010;
 11005  18B4  1495               	bsf	21,1	;volatile
 11006  18B5                     l978:	
 11007                           ;FLASH.c: 56: while(PMCON1 & 0b00000010);
 11008                           
 11009  18B5  1895               	btfsc	21,1	;volatile
 11010  18B6  28B5               	goto	l978
 11011                           
 11012                           ;FLASH.c: 57: __nop();
 11013  18B7  0000               	nop
 11014                           
 11015                           ;FLASH.c: 58: __nop();
 11016  18B8  0000               	nop
 11017  18B9  0008               	return
 11018  18BA                     __end_of_UNLOCK:	
 11019                           
 11020                           	psect	text20
 11021  1D47                     __ptext20:	
 11022 ;; *************** function _Reverse_Byte *****************
 11023 ;; Defined at:
 11024 ;;		line 314 in file "MISC.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  This            1    wreg     unsigned char 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  This            1    8[BANK0 ] unsigned char 
 11029 ;;  temp            1    7[BANK0 ] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;Total ram usage:        4 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    3
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_PS_2_Update
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function _Reverse_Byte
 11055  1D47                     _Reverse_Byte:	
 11056                           
 11057                           ;incstack = 0
 11058                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 11059                           ;Reverse_Byte@This stored from wreg
 11060  1D47  0020               	movlb	0	; select bank0
 11061  1D48  00A8               	movwf	Reverse_Byte@This
 11062                           
 11063                           ;MISC.c: 316: unsigned char temp=0;
 11064  1D49  01A7               	clrf	Reverse_Byte@temp
 11065                           
 11066                           ;MISC.c: 318: temp += (This & 0x01) << 7;
 11067  1D4A  0828               	movf	Reverse_Byte@This,w
 11068  1D4B  3901               	andlw	1
 11069  1D4C  00A5               	movwf	??_Reverse_Byte
 11070  1D4D  3006               	movlw	6
 11071  1D4E                     u7795:	
 11072  1D4E  35A5               	lslf	??_Reverse_Byte,f
 11073  1D4F  3EFF               	addlw	-1
 11074  1D50  1D03               	skipz
 11075  1D51  2D4E               	goto	u7795
 11076  1D52  3525               	lslf	??_Reverse_Byte,w
 11077  1D53  00A6               	movwf	??_Reverse_Byte+1
 11078  1D54  0826               	movf	??_Reverse_Byte+1,w
 11079  1D55  07A7               	addwf	Reverse_Byte@temp,f
 11080                           
 11081                           ;MISC.c: 319: temp += (This & 0x02) << 5;
 11082  1D56  0828               	movf	Reverse_Byte@This,w
 11083  1D57  3902               	andlw	2
 11084  1D58  00A5               	movwf	??_Reverse_Byte
 11085  1D59  3004               	movlw	4
 11086  1D5A                     u7805:	
 11087  1D5A  35A5               	lslf	??_Reverse_Byte,f
 11088  1D5B  3EFF               	addlw	-1
 11089  1D5C  1D03               	skipz
 11090  1D5D  2D5A               	goto	u7805
 11091  1D5E  3525               	lslf	??_Reverse_Byte,w
 11092  1D5F  00A6               	movwf	??_Reverse_Byte+1
 11093  1D60  0826               	movf	??_Reverse_Byte+1,w
 11094  1D61  07A7               	addwf	Reverse_Byte@temp,f
 11095                           
 11096                           ;MISC.c: 320: temp += (This & 0x04) << 3;
 11097  1D62  0828               	movf	Reverse_Byte@This,w
 11098  1D63  3904               	andlw	4
 11099  1D64  00A5               	movwf	??_Reverse_Byte
 11100  1D65  3002               	movlw	2
 11101  1D66                     u7815:	
 11102  1D66  35A5               	lslf	??_Reverse_Byte,f
 11103  1D67  3EFF               	addlw	-1
 11104  1D68  1D03               	skipz
 11105  1D69  2D66               	goto	u7815
 11106  1D6A  3525               	lslf	??_Reverse_Byte,w
 11107  1D6B  00A6               	movwf	??_Reverse_Byte+1
 11108  1D6C  0826               	movf	??_Reverse_Byte+1,w
 11109  1D6D  07A7               	addwf	Reverse_Byte@temp,f
 11110                           
 11111                           ;MISC.c: 321: temp += (This & 0x08) << 1;
 11112  1D6E  0828               	movf	Reverse_Byte@This,w
 11113  1D6F  3908               	andlw	8
 11114  1D70  0709               	addwf	9,w
 11115  1D71  00A5               	movwf	??_Reverse_Byte
 11116  1D72  0825               	movf	??_Reverse_Byte,w
 11117  1D73  07A7               	addwf	Reverse_Byte@temp,f
 11118                           
 11119                           ;MISC.c: 322: temp += (This & 0x10) >> 1;
 11120  1D74  3628               	lsrf	Reverse_Byte@This,w
 11121  1D75  3908               	andlw	8
 11122  1D76  00A5               	movwf	??_Reverse_Byte
 11123  1D77  0825               	movf	??_Reverse_Byte,w
 11124  1D78  07A7               	addwf	Reverse_Byte@temp,f
 11125                           
 11126                           ;MISC.c: 323: temp += (This & 0x20) >> 3;
 11127  1D79  0828               	movf	Reverse_Byte@This,w
 11128  1D7A  00A5               	movwf	??_Reverse_Byte
 11129  1D7B  3003               	movlw	3
 11130  1D7C                     u7825:	
 11131  1D7C  36A5               	lsrf	??_Reverse_Byte,f
 11132  1D7D  0B89               	decfsz	9,f
 11133  1D7E  2D7C               	goto	u7825
 11134  1D7F  0825               	movf	??_Reverse_Byte,w
 11135  1D80  3904               	andlw	4
 11136  1D81  00A6               	movwf	??_Reverse_Byte+1
 11137  1D82  0826               	movf	??_Reverse_Byte+1,w
 11138  1D83  07A7               	addwf	Reverse_Byte@temp,f
 11139                           
 11140                           ;MISC.c: 324: temp += (This & 0x40) >> 5;
 11141  1D84  0828               	movf	Reverse_Byte@This,w
 11142  1D85  00A5               	movwf	??_Reverse_Byte
 11143  1D86  3005               	movlw	5
 11144  1D87                     u7835:	
 11145  1D87  36A5               	lsrf	??_Reverse_Byte,f
 11146  1D88  0B89               	decfsz	9,f
 11147  1D89  2D87               	goto	u7835
 11148  1D8A  0825               	movf	??_Reverse_Byte,w
 11149  1D8B  3902               	andlw	2
 11150  1D8C  00A6               	movwf	??_Reverse_Byte+1
 11151  1D8D  0826               	movf	??_Reverse_Byte+1,w
 11152  1D8E  07A7               	addwf	Reverse_Byte@temp,f
 11153                           
 11154                           ;MISC.c: 325: temp += (This & 0x80) >> 7;
 11155  1D8F  0828               	movf	Reverse_Byte@This,w
 11156  1D90  00A5               	movwf	??_Reverse_Byte
 11157  1D91  3007               	movlw	7
 11158  1D92                     u7845:	
 11159  1D92  36A5               	lsrf	??_Reverse_Byte,f
 11160  1D93  0B89               	decfsz	9,f
 11161  1D94  2D92               	goto	u7845
 11162  1D95  0825               	movf	??_Reverse_Byte,w
 11163  1D96  3901               	andlw	1
 11164  1D97  00A6               	movwf	??_Reverse_Byte+1
 11165  1D98  0826               	movf	??_Reverse_Byte+1,w
 11166  1D99  07A7               	addwf	Reverse_Byte@temp,f
 11167                           
 11168                           ;MISC.c: 327: return temp;
 11169  1D9A  0827               	movf	Reverse_Byte@temp,w
 11170  1D9B  0008               	return
 11171  1D9C                     __end_of_Reverse_Byte:	
 11172                           
 11173                           	psect	text21
 11174  18E0                     __ptext21:	
 11175 ;; *************** function _ISNUMBER *****************
 11176 ;; Defined at:
 11177 ;;		line 330 in file "MISC.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;  ascii           1    wreg     unsigned char 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  ascii           1    5[BANK0 ] unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      unsigned char 
 11184 ;; Registers used:
 11185 ;;		wreg
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;Total ram usage:        1 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    3
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_PS_2_Update
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           
 11206                           ;psect for function _ISNUMBER
 11207  18E0                     _ISNUMBER:	
 11208                           
 11209                           ;incstack = 0
 11210                           ; Regs used in _ISNUMBER: [wreg]
 11211                           ;ISNUMBER@ascii stored from wreg
 11212  18E0  0020               	movlb	0	; select bank0
 11213  18E1  00A5               	movwf	ISNUMBER@ascii
 11214                           
 11215                           ;MISC.c: 332: if(ascii >= '0' && ascii <='9')
 11216  18E2  3030               	movlw	48
 11217  18E3  0225               	subwf	ISNUMBER@ascii,w
 11218  18E4  1C03               	skipc
 11219  18E5  28EC               	goto	l6147
 11220  18E6  303A               	movlw	58
 11221  18E7  0225               	subwf	ISNUMBER@ascii,w
 11222  18E8  1803               	skipnc
 11223  18E9  28EC               	goto	l6147
 11224                           
 11225                           ;MISC.c: 333: {
 11226                           ;MISC.c: 334: return 1;
 11227  18EA  3001               	movlw	1
 11228                           
 11229                           ;MISC.c: 335: }
 11230  18EB  0008               	return
 11231  18EC                     l6147:	
 11232                           
 11233                           ;MISC.c: 336: else
 11234                           ;MISC.c: 337: {
 11235                           ;MISC.c: 338: return 0;
 11236  18EC  3000               	movlw	0
 11237  18ED  0008               	return
 11238  18EE                     __end_of_ISNUMBER:	
 11239                           
 11240                           	psect	text22
 11241  196C                     __ptext22:	
 11242 ;; *************** function _Decode_Scan_Code_Shift *****************
 11243 ;; Defined at:
 11244 ;;		line 726 in file "PS_2.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  Code            1    wreg     unsigned char 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  Code            1    5[BANK0 ] unsigned char 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      unsigned char 
 11251 ;; Registers used:
 11252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;Total ram usage:        1 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    3
 11265 ;; This function calls:
 11266 ;;		Nothing
 11267 ;; This function is called by:
 11268 ;;		_PS_2_Update
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           
 11273                           ;psect for function _Decode_Scan_Code_Shift
 11274  196C                     _Decode_Scan_Code_Shift:	
 11275                           
 11276                           ;incstack = 0
 11277                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11278                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11279  196C  0020               	movlb	0	; select bank0
 11280  196D  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11281                           
 11282                           ;PS_2.c: 728: Code -= 13;
 11283  196E  300D               	movlw	13
 11284  196F  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11285                           
 11286                           ;PS_2.c: 729: if(Code <=112)
 11287  1970  3071               	movlw	113
 11288  1971  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11289  1972  1803               	skipnc
 11290  1973  297D               	goto	l6221
 11291                           
 11292                           ;PS_2.c: 730: {
 11293                           ;PS_2.c: 731: return ScanCodeSHIFT[Code];
 11294  1974  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11295  1975  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11296  1976  0084               	movwf	4
 11297  1977  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11298  1978  1803               	skipnc
 11299  1979  3E01               	addlw	1
 11300  197A  0085               	movwf	5
 11301  197B  0800               	movf	0,w	;code access
 11302                           
 11303                           ;PS_2.c: 732: }
 11304  197C  0008               	return
 11305  197D                     l6221:	
 11306                           
 11307                           ;PS_2.c: 733: else
 11308                           ;PS_2.c: 734: {
 11309                           ;PS_2.c: 735: return 0;
 11310  197D  3000               	movlw	0
 11311  197E  0008               	return
 11312  197F                     __end_of_Decode_Scan_Code_Shift:	
 11313                           
 11314                           	psect	text23
 11315  1959                     __ptext23:	
 11316 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11317 ;; Defined at:
 11318 ;;		line 741 in file "PS_2.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  Code            1    wreg     unsigned char 
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  Code            1    5[BANK0 ] unsigned char 
 11323 ;; Return value:  Size  Location     Type
 11324 ;;                  1    wreg      unsigned char 
 11325 ;; Registers used:
 11326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11327 ;; Tracked objects:
 11328 ;;		On entry : 0/0
 11329 ;;		On exit  : 0/0
 11330 ;;		Unchanged: 0/0
 11331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;Total ram usage:        1 bytes
 11337 ;; Hardware stack levels used:    1
 11338 ;; Hardware stack levels required when called:    3
 11339 ;; This function calls:
 11340 ;;		Nothing
 11341 ;; This function is called by:
 11342 ;;		_PS_2_Update
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           
 11347                           ;psect for function _Decode_Scan_Code_FunctionE0
 11348  1959                     _Decode_Scan_Code_FunctionE0:	
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11352                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11353  1959  0020               	movlb	0	; select bank0
 11354  195A  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11355                           
 11356                           ;PS_2.c: 743: Code -= 17;
 11357  195B  3011               	movlw	17
 11358  195C  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11359                           
 11360                           ;PS_2.c: 744: if(Code <=108)
 11361  195D  306D               	movlw	109
 11362  195E  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11363  195F  1803               	skipnc
 11364  1960  296A               	goto	l6383
 11365                           
 11366                           ;PS_2.c: 745: {
 11367                           ;PS_2.c: 746: return ScanCodeFunctionE0[Code];
 11368  1961  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11369  1962  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11370  1963  0084               	movwf	4
 11371  1964  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11372  1965  1803               	skipnc
 11373  1966  3E01               	addlw	1
 11374  1967  0085               	movwf	5
 11375  1968  0800               	movf	0,w	;code access
 11376                           
 11377                           ;PS_2.c: 747: }
 11378  1969  0008               	return
 11379  196A                     l6383:	
 11380                           
 11381                           ;PS_2.c: 748: else
 11382                           ;PS_2.c: 749: {
 11383                           ;PS_2.c: 750: return 0;
 11384  196A  3000               	movlw	0
 11385  196B  0008               	return
 11386  196C                     __end_of_Decode_Scan_Code_FunctionE0:	
 11387                           
 11388                           	psect	text24
 11389  18FE                     __ptext24:	
 11390 ;; *************** function _Decode_Scan_Code_Function *****************
 11391 ;; Defined at:
 11392 ;;		line 756 in file "PS_2.c"
 11393 ;; Parameters:    Size  Location     Type
 11394 ;;  Code            1    wreg     unsigned char 
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;  Code            1    5[BANK0 ] unsigned char 
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  1    wreg      unsigned char 
 11399 ;; Registers used:
 11400 ;;		wreg, fsr0l, fsr0h, pclath
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;Total ram usage:        1 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; Hardware stack levels required when called:    3
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		_PS_2_Update
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           
 11421                           ;psect for function _Decode_Scan_Code_Function
 11422  18FE                     _Decode_Scan_Code_Function:	
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11426                           ;Decode_Scan_Code_Function@Code stored from wreg
 11427  18FE  0020               	movlb	0	; select bank0
 11428  18FF  00A5               	movwf	Decode_Scan_Code_Function@Code
 11429                           
 11430                           ;PS_2.c: 758: if(Code <=131)
 11431  1900  3084               	movlw	132
 11432  1901  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11433  1902  1803               	skipnc
 11434  1903  290D               	goto	l6407
 11435                           
 11436                           ;PS_2.c: 759: {
 11437                           ;PS_2.c: 760: return ScanCodeFunctionNoE0[Code];
 11438  1904  0825               	movf	Decode_Scan_Code_Function@Code,w
 11439  1905  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11440  1906  0084               	movwf	4
 11441  1907  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11442  1908  1803               	skipnc
 11443  1909  3E01               	addlw	1
 11444  190A  0085               	movwf	5
 11445  190B  0800               	movf	0,w	;code access
 11446                           
 11447                           ;PS_2.c: 761: }
 11448  190C  0008               	return
 11449  190D                     l6407:	
 11450                           
 11451                           ;PS_2.c: 762: else
 11452                           ;PS_2.c: 763: {
 11453                           ;PS_2.c: 764: return 0;
 11454  190D  3000               	movlw	0
 11455  190E  0008               	return
 11456  190F                     __end_of_Decode_Scan_Code_Function:	
 11457                           
 11458                           	psect	text25
 11459  1946                     __ptext25:	
 11460 ;; *************** function _Decode_Scan_Code *****************
 11461 ;; Defined at:
 11462 ;;		line 712 in file "PS_2.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  Code            1    wreg     unsigned char 
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;  Code            1    5[BANK0 ] unsigned char 
 11467 ;; Return value:  Size  Location     Type
 11468 ;;                  1    wreg      unsigned char 
 11469 ;; Registers used:
 11470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : 0/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;Total ram usage:        1 bytes
 11481 ;; Hardware stack levels used:    1
 11482 ;; Hardware stack levels required when called:    3
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_PS_2_Update
 11487 ;; This function uses a non-reentrant model
 11488 ;;
 11489                           
 11490                           
 11491                           ;psect for function _Decode_Scan_Code
 11492  1946                     _Decode_Scan_Code:	
 11493                           
 11494                           ;incstack = 0
 11495                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11496                           ;Decode_Scan_Code@Code stored from wreg
 11497  1946  0020               	movlb	0	; select bank0
 11498  1947  00A5               	movwf	Decode_Scan_Code@Code
 11499                           
 11500                           ;PS_2.c: 714: Code -= 13;
 11501  1948  300D               	movlw	13
 11502  1949  02A5               	subwf	Decode_Scan_Code@Code,f
 11503                           
 11504                           ;PS_2.c: 715: if(Code <=112)
 11505  194A  3071               	movlw	113
 11506  194B  0225               	subwf	Decode_Scan_Code@Code,w
 11507  194C  1803               	skipnc
 11508  194D  2957               	goto	l6395
 11509                           
 11510                           ;PS_2.c: 716: {
 11511                           ;PS_2.c: 717: return ScanCode[Code];
 11512  194E  0825               	movf	Decode_Scan_Code@Code,w
 11513  194F  3E84               	addlw	low (_ScanCode| (0+32768))
 11514  1950  0084               	movwf	4
 11515  1951  3088               	movlw	high (_ScanCode| (0+32768))
 11516  1952  1803               	skipnc
 11517  1953  3E01               	addlw	1
 11518  1954  0085               	movwf	5
 11519  1955  0800               	movf	0,w	;code access
 11520                           
 11521                           ;PS_2.c: 718: }
 11522  1956  0008               	return
 11523  1957                     l6395:	
 11524                           
 11525                           ;PS_2.c: 719: else
 11526                           ;PS_2.c: 720: {
 11527                           ;PS_2.c: 721: return 0;
 11528  1957  3000               	movlw	0
 11529  1958  0008               	return
 11530  1959                     __end_of_Decode_Scan_Code:	
 11531                           
 11532                           	psect	text26
 11533  0D54                     __ptext26:	
 11534 ;; *************** function _Init_System *****************
 11535 ;; Defined at:
 11536 ;;		line 77 in file "user.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11541 ;;  Baud            4   65[BANK1 ] unsigned long 
 11542 ;;  temp            4   60[BANK1 ] unsigned long 
 11543 ;;  Parity          1   64[BANK1 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;		None               void
 11546 ;; Registers used:
 11547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       1      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:       70 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    6
 11560 ;; This function calls:
 11561 ;;		_InitUART
 11562 ;;		_ReadBaud
 11563 ;;		_UARTstringWAIT
 11564 ;;		_delayUS
 11565 ;;		_sprintf
 11566 ;; This function is called by:
 11567 ;;		_main
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           
 11572                           ;psect for function _Init_System
 11573  0D54                     _Init_System:	
 11574                           
 11575                           ;user.c: 79: unsigned long temp =0;
 11576                           
 11577                           ;incstack = 0
 11578                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11579  0D54  3000               	movlw	0
 11580  0D55  0021               	movlb	1	; select bank1
 11581  0D56  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11582  0D57  3000               	movlw	0
 11583  0D58  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11584  0D59  3000               	movlw	0
 11585  0D5A  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11586  0D5B  3000               	movlw	0
 11587  0D5C  00DC               	movwf	Init_System@temp^(0+128)
 11588                           
 11589                           ;user.c: 80: unsigned long Baud =0;
 11590  0D5D  3000               	movlw	0
 11591  0D5E  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11592  0D5F  3000               	movlw	0
 11593  0D60  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11594  0D61  3000               	movlw	0
 11595  0D62  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11596  0D63  3000               	movlw	0
 11597  0D64  00E1               	movwf	Init_System@Baud^(0+128)
 11598                           
 11599                           ;user.c: 81: unsigned char Parity =0;
 11600  0D65  01E0               	clrf	Init_System@Parity^(0+128)
 11601                           
 11602                           ;user.c: 82: unsigned char buf[60];
 11603                           ;user.c: 84: temp = ReadBaud((0x1800 >> 5),0);
 11604  0D66  30C0               	movlw	192
 11605  0D67  0020               	movlb	0	; select bank0
 11606  0D68  00B7               	movwf	ReadBaud@row
 11607  0D69  3000               	movlw	0
 11608  0D6A  00B8               	movwf	ReadBaud@row+1
 11609  0D6B  01B9               	clrf	ReadBaud@column
 11610  0D6C  319D  259C  318D   	fcall	_ReadBaud
 11611  0D6F  0020               	movlb	0	; select bank0
 11612  0D70  083A               	movf	?_ReadBaud+3,w
 11613  0D71  0021               	movlb	1	; select bank1
 11614  0D72  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11615  0D73  0020               	movlb	0	; select bank0
 11616  0D74  0839               	movf	?_ReadBaud+2,w
 11617  0D75  0021               	movlb	1	; select bank1
 11618  0D76  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11619  0D77  0020               	movlb	0	; select bank0
 11620  0D78  0838               	movf	?_ReadBaud+1,w
 11621  0D79  0021               	movlb	1	; select bank1
 11622  0D7A  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11623  0D7B  0020               	movlb	0	; select bank0
 11624  0D7C  0837               	movf	?_ReadBaud,w
 11625  0D7D  0021               	movlb	1	; select bank1
 11626  0D7E  00DC               	movwf	Init_System@temp^(0+128)
 11627                           
 11628                           ;user.c: 85: Baud = temp & 0x000FFFFF;
 11629  0D7F  30FF               	movlw	255
 11630  0D80  055C               	andwf	Init_System@temp^(0+128),w
 11631  0D81  00E1               	movwf	Init_System@Baud^(0+128)
 11632  0D82  30FF               	movlw	255
 11633  0D83  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11634  0D84  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11635  0D85  300F               	movlw	15
 11636  0D86  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11637  0D87  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11638  0D88  3000               	movlw	0
 11639  0D89  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11640  0D8A  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11641                           
 11642                           ;user.c: 86: Parity = temp & 0x00F00000;
 11643  0D8B  01E0               	clrf	Init_System@Parity^(0+128)
 11644                           
 11645                           ;user.c: 87: if(Baud <2400 || Baud > 115200)
 11646  0D8C  3000               	movlw	0
 11647  0D8D  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11648  0D8E  1D03               	skipz
 11649  0D8F  2D9A               	goto	u9735
 11650  0D90  3000               	movlw	0
 11651  0D91  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11652  0D92  1D03               	skipz
 11653  0D93  2D9A               	goto	u9735
 11654  0D94  3009               	movlw	9
 11655  0D95  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11656  0D96  1D03               	skipz
 11657  0D97  2D9A               	goto	u9735
 11658  0D98  3060               	movlw	96
 11659  0D99  0261               	subwf	Init_System@Baud^(0+128),w
 11660  0D9A                     u9735:	
 11661  0D9A  1C03               	skipc
 11662  0D9B  2DAC               	goto	l7083
 11663  0D9C  3000               	movlw	0
 11664  0D9D  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11665  0D9E  1D03               	skipz
 11666  0D9F  2DAA               	goto	u9745
 11667  0DA0  3001               	movlw	1
 11668  0DA1  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11669  0DA2  1D03               	skipz
 11670  0DA3  2DAA               	goto	u9745
 11671  0DA4  30C2               	movlw	194
 11672  0DA5  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11673  0DA6  1D03               	skipz
 11674  0DA7  2DAA               	goto	u9745
 11675  0DA8  3001               	movlw	1
 11676  0DA9  0261               	subwf	Init_System@Baud^(0+128),w
 11677  0DAA                     u9745:	
 11678  0DAA  1C03               	skipc
 11679  0DAB  2DB5               	goto	l7087
 11680  0DAC                     l7083:	
 11681                           
 11682                           ;user.c: 88: {
 11683                           ;user.c: 90: Baud = 9600;
 11684  0DAC  3000               	movlw	0
 11685  0DAD  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11686  0DAE  3000               	movlw	0
 11687  0DAF  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11688  0DB0  3025               	movlw	37
 11689  0DB1  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11690  0DB2  3080               	movlw	128
 11691  0DB3  00E1               	movwf	Init_System@Baud^(0+128)
 11692                           
 11693                           ;user.c: 91: Parity = 0;
 11694  0DB4  01E0               	clrf	Init_System@Parity^(0+128)
 11695  0DB5                     l7087:	
 11696                           
 11697                           ;user.c: 92: }
 11698                           ;user.c: 93: InitUART(Baud, Parity);
 11699  0DB5  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11700  0DB6  0020               	movlb	0	; select bank0
 11701  0DB7  00B6               	movwf	InitUART@Baud+3
 11702  0DB8  0021               	movlb	1	; select bank1
 11703  0DB9  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11704  0DBA  0020               	movlb	0	; select bank0
 11705  0DBB  00B5               	movwf	InitUART@Baud+2
 11706  0DBC  0021               	movlb	1	; select bank1
 11707  0DBD  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11708  0DBE  0020               	movlb	0	; select bank0
 11709  0DBF  00B4               	movwf	InitUART@Baud+1
 11710  0DC0  0021               	movlb	1	; select bank1
 11711  0DC1  0861               	movf	Init_System@Baud^(0+128),w
 11712  0DC2  0020               	movlb	0	; select bank0
 11713  0DC3  00B3               	movwf	InitUART@Baud
 11714  0DC4  0021               	movlb	1	; select bank1
 11715  0DC5  0860               	movf	Init_System@Parity^(0+128),w
 11716  0DC6  0020               	movlb	0	; select bank0
 11717  0DC7  00D4               	movwf	??_Init_System
 11718  0DC8  0854               	movf	??_Init_System,w
 11719  0DC9  00B7               	movwf	InitUART@parity
 11720  0DCA  3191  212D  318D   	fcall	_InitUART
 11721                           
 11722                           ;user.c: 94: UARTstringWAIT("\r\n");
 11723  0DCD  30F0               	movlw	low ((STR_11+17)| (0+32768))
 11724  0DCE  0020               	movlb	0	; select bank0
 11725  0DCF  00B4               	movwf	UARTstringWAIT@data
 11726  0DD0  308C               	movlw	high ((STR_11+17)| (0+32768))
 11727  0DD1  00B5               	movwf	UARTstringWAIT@data+1
 11728  0DD2  319A  22E2  318D   	fcall	_UARTstringWAIT
 11729                           
 11730                           ;user.c: 95: delayUS(10000);
 11731  0DD5  3000               	movlw	0
 11732  0DD6  0020               	movlb	0	; select bank0
 11733  0DD7  00A8               	movwf	delayUS@US+3
 11734  0DD8  3000               	movlw	0
 11735  0DD9  00A7               	movwf	delayUS@US+2
 11736  0DDA  3027               	movlw	39
 11737  0DDB  00A6               	movwf	delayUS@US+1
 11738  0DDC  3010               	movlw	16
 11739  0DDD  00A5               	movwf	delayUS@US
 11740  0DDE  319B  2315  318D   	fcall	_delayUS
 11741                           
 11742                           ;user.c: 96: if(Parity)
 11743  0DE1  0021               	movlb	1	; select bank1
 11744  0DE2  0860               	movf	Init_System@Parity^(0+128),w
 11745  0DE3  1903               	btfsc	3,2
 11746  0DE4  2E17               	goto	l7109
 11747                           
 11748                           ;user.c: 97: {
 11749                           ;user.c: 98: switch (Parity)
 11750  0DE5  2E0A               	goto	l7107
 11751  0DE6                     l7097:	
 11752                           ;user.c: 99: {
 11753                           ;user.c: 100: case 1:
 11754                           
 11755                           
 11756                           ;user.c: 101: sprintf(buf,"Baud is %lu with Odd parity bit\r\n",Baud);
 11757  0DE6  30A0               	movlw	low Init_System@buf
 11758  0DE7  0020               	movlb	0	; select bank0
 11759  0DE8  00BD               	movwf	sprintf@sp
 11760  0DE9  3000               	movlw	high Init_System@buf
 11761  0DEA  00BE               	movwf	sprintf@sp+1
 11762  0DEB  30B1               	movlw	low (STR_13| (0+32768))
 11763  0DEC  00BF               	movwf	sprintf@f
 11764  0DED  308B               	movlw	high (STR_13| (0+32768))
 11765  0DEE  2E1F               	goto	L16
 11766  0DEF                     l7099:	
 11767                           ;user.c: 103: case 2:
 11768                           
 11769                           ;user.c: 102: break;
 11770                           
 11771                           
 11772                           ;user.c: 104: sprintf(buf,"Baud is %lu with Even parity bit\r\n",Baud);
 11773  0DEF  30A0               	movlw	low Init_System@buf
 11774  0DF0  0020               	movlb	0	; select bank0
 11775  0DF1  00BD               	movwf	sprintf@sp
 11776  0DF2  3000               	movlw	high Init_System@buf
 11777  0DF3  00BE               	movwf	sprintf@sp+1
 11778  0DF4  306B               	movlw	low (STR_14| (0+32768))
 11779  0DF5  00BF               	movwf	sprintf@f
 11780  0DF6  308B               	movlw	high (STR_14| (0+32768))
 11781  0DF7  2E1F               	goto	L16
 11782  0DF8                     l7101:	
 11783                           ;user.c: 106: case 3:
 11784                           
 11785                           ;user.c: 105: break;
 11786                           
 11787                           
 11788                           ;user.c: 107: sprintf(buf,"Baud is %lu with Mark bit\r\n",Baud);
 11789  0DF8  30A0               	movlw	low Init_System@buf
 11790  0DF9  0020               	movlb	0	; select bank0
 11791  0DFA  00BD               	movwf	sprintf@sp
 11792  0DFB  3000               	movlw	high Init_System@buf
 11793  0DFC  00BE               	movwf	sprintf@sp+1
 11794  0DFD  3052               	movlw	low (STR_15| (0+32768))
 11795  0DFE  00BF               	movwf	sprintf@f
 11796  0DFF  308C               	movlw	high (STR_15| (0+32768))
 11797  0E00  2E1F               	goto	L16
 11798  0E01                     l7103:	
 11799                           ;user.c: 109: default:
 11800                           
 11801                           ;user.c: 108: break;
 11802                           
 11803                           
 11804                           ;user.c: 110: sprintf(buf,"Baud is %lu with Space bit\r\n",Baud);
 11805  0E01  30A0               	movlw	low Init_System@buf
 11806  0E02  0020               	movlb	0	; select bank0
 11807  0E03  00BD               	movwf	sprintf@sp
 11808  0E04  3000               	movlw	high Init_System@buf
 11809  0E05  00BE               	movwf	sprintf@sp+1
 11810  0E06  3035               	movlw	low (STR_16| (0+32768))
 11811  0E07  00BF               	movwf	sprintf@f
 11812  0E08  308C               	movlw	high (STR_16| (0+32768))
 11813  0E09  2E1F               	goto	L16
 11814  0E0A                     l7107:	
 11815                           ;user.c: 112: }
 11816                           
 11817                           ;user.c: 111: break;
 11818                           
 11819  0E0A  0021               	movlb	1	; select bank1
 11820  0E0B  0860               	movf	Init_System@Parity^(0+128),w
 11821                           
 11822                           ; Switch size 1, requested type "space"
 11823                           ; Number of cases is 3, Range of values is 1 to 3
 11824                           ; switch strategies available:
 11825                           ; Name         Instructions Cycles
 11826                           ; simple_byte           10     6 (average)
 11827                           ; direct_byte           15     9 (fixed)
 11828                           ; jumptable            263     9 (fixed)
 11829                           ;	Chosen strategy is simple_byte
 11830  0E0C  3A01               	xorlw	1	; case 1
 11831  0E0D  1903               	skipnz
 11832  0E0E  2DE6               	goto	l7097
 11833  0E0F  3A03               	xorlw	3	; case 2
 11834  0E10  1903               	skipnz
 11835  0E11  2DEF               	goto	l7099
 11836  0E12  3A01               	xorlw	1	; case 3
 11837  0E13  1903               	skipnz
 11838  0E14  2DF8               	goto	l7101
 11839  0E15  2E01               	goto	l7103
 11840                           
 11841                           ;user.c: 113: }
 11842  0E16  2E33               	goto	l7111
 11843  0E17                     l7109:	
 11844                           
 11845                           ;user.c: 114: else
 11846                           ;user.c: 115: {
 11847                           ;user.c: 116: sprintf(buf,"Baud is %lu with no parity bit\r\n",Baud);
 11848  0E17  30A0               	movlw	low Init_System@buf
 11849  0E18  0020               	movlb	0	; select bank0
 11850  0E19  00BD               	movwf	sprintf@sp
 11851  0E1A  3000               	movlw	high Init_System@buf
 11852  0E1B  00BE               	movwf	sprintf@sp+1
 11853  0E1C  30F4               	movlw	low (STR_17| (0+32768))
 11854  0E1D  00BF               	movwf	sprintf@f
 11855  0E1E  308B               	movlw	high (STR_17| (0+32768))
 11856  0E1F                     L16:	
 11857  0E1F  00C0               	movwf	sprintf@f+1
 11858  0E20  0021               	movlb	1	; select bank1
 11859  0E21  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11860  0E22  0020               	movlb	0	; select bank0
 11861  0E23  00C4               	movwf	?_sprintf+7
 11862  0E24  0021               	movlb	1	; select bank1
 11863  0E25  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11864  0E26  0020               	movlb	0	; select bank0
 11865  0E27  00C3               	movwf	?_sprintf+6
 11866  0E28  0021               	movlb	1	; select bank1
 11867  0E29  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11868  0E2A  0020               	movlb	0	; select bank0
 11869  0E2B  00C2               	movwf	?_sprintf+5
 11870  0E2C  0021               	movlb	1	; select bank1
 11871  0E2D  0861               	movf	Init_System@Baud^(0+128),w
 11872  0E2E  0020               	movlb	0	; select bank0
 11873  0E2F  00C1               	movwf	?_sprintf+4
 11874  0E30  3194  2400  318D   	fcall	_sprintf
 11875  0E33                     l7111:	
 11876                           
 11877                           ;user.c: 117: }
 11878                           ;user.c: 118: UARTstringWAIT(buf);
 11879  0E33  30A0               	movlw	low Init_System@buf
 11880  0E34  0020               	movlb	0	; select bank0
 11881  0E35  00B4               	movwf	UARTstringWAIT@data
 11882  0E36  3000               	movlw	high Init_System@buf
 11883  0E37  00B5               	movwf	UARTstringWAIT@data+1
 11884  0E38  319A  22E2  318D   	fcall	_UARTstringWAIT
 11885                           
 11886                           ;user.c: 119: delayUS(10000);
 11887  0E3B  3000               	movlw	0
 11888  0E3C  0020               	movlb	0	; select bank0
 11889  0E3D  00A8               	movwf	delayUS@US+3
 11890  0E3E  3000               	movlw	0
 11891  0E3F  00A7               	movwf	delayUS@US+2
 11892  0E40  3027               	movlw	39
 11893  0E41  00A6               	movwf	delayUS@US+1
 11894  0E42  3010               	movlw	16
 11895  0E43  00A5               	movwf	delayUS@US
 11896  0E44  319B  2315         	fcall	_delayUS
 11897                           
 11898                           ;user.c: 121: INTCON |= 0x08;
 11899  0E46  158B               	bsf	11,3	;volatile
 11900                           
 11901                           ;user.c: 122: INTCONbits.GIE = 1;
 11902  0E47  178B               	bsf	11,7	;volatile
 11903  0E48  0008               	return
 11904  0E49                     __end_of_Init_System:	
 11905                           
 11906                           	psect	text27
 11907  1400                     __ptext27:	
 11908 ;; *************** function _sprintf *****************
 11909 ;; Defined at:
 11910 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11913 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11914 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11915 ;;		 -> STR_33(45), STR_32(41), STR_31(40), STR_30(47), 
 11916 ;;		 -> STR_29(46), STR_24(37), STR_23(33), STR_22(32), 
 11917 ;;		 -> STR_21(39), STR_20(38), STR_17(33), STR_16(29), 
 11918 ;;		 -> STR_15(28), STR_14(35), STR_13(34), 
 11919 ;; Auto vars:     Size  Location     Type
 11920 ;;  _val            4   46[BANK0 ] struct .
 11921 ;;  prec            2   44[BANK0 ] int 
 11922 ;;  c               1   51[BANK0 ] char 
 11923 ;;  ap              1   50[BANK0 ] PTR void [1]
 11924 ;;		 -> ?_sprintf(2), 
 11925 ;;  flag            1   43[BANK0 ] unsigned char 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  2   29[BANK0 ] int 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11935 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;Total ram usage:       23 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    4
 11942 ;; This function calls:
 11943 ;;		___lldiv
 11944 ;;		___llmod
 11945 ;; This function is called by:
 11946 ;;		_Init_System
 11947 ;;		_SetBaud
 11948 ;;		_PS_2_Update
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           
 11953                           ;psect for function _sprintf
 11954  1400                     _sprintf:	
 11955                           
 11956                           ;doprnt.c: 494: va_list ap;
 11957                           ;doprnt.c: 499: signed char c;
 11958                           ;doprnt.c: 504: int prec;
 11959                           ;doprnt.c: 508: unsigned char flag;
 11960                           ;doprnt.c: 527: union {
 11961                           ;doprnt.c: 528: unsigned long _val;
 11962                           ;doprnt.c: 529: struct {
 11963                           ;doprnt.c: 530: const char * _cp;
 11964                           ;doprnt.c: 531: unsigned _len;
 11965                           ;doprnt.c: 532: } _str;
 11966                           ;doprnt.c: 533: } _val;
 11967                           ;doprnt.c: 542: *ap = __va_start();
 11968                           
 11969                           ;incstack = 0
 11970                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11971  1400  3041               	movlw	(?_sprintf+4)& (0+255)
 11972  1401  0020               	movlb	0	; select bank0
 11973  1402  00C5               	movwf	??_sprintf
 11974  1403  0845               	movf	??_sprintf,w
 11975  1404  00D2               	movwf	sprintf@ap
 11976  1405                     l6083:	
 11977                           ;doprnt.c: 545: while(c = *f++) {
 11978                           
 11979  1405  0840               	movf	sprintf@f+1,w
 11980  1406  00C6               	movwf	??_sprintf+1
 11981  1407  083F               	movf	sprintf@f,w
 11982  1408  00C5               	movwf	??_sprintf
 11983  1409  0ABF               	incf	sprintf@f,f
 11984  140A  1903               	skipnz
 11985  140B  0AC0               	incf	sprintf@f+1,f
 11986  140C  0845               	movf	??_sprintf,w
 11987  140D  0084               	movwf	4
 11988  140E  0846               	movf	??_sprintf+1,w
 11989  140F  0085               	movwf	5
 11990  1410  0800               	movf	0,w	;code access
 11991  1411  00C7               	movwf	??_sprintf+2
 11992  1412  0847               	movf	??_sprintf+2,w
 11993  1413  00D3               	movwf	sprintf@c
 11994  1414  08D3               	movf	sprintf@c,f
 11995  1415  1903               	btfsc	3,2
 11996  1416  2CEE               	goto	l6085
 11997                           
 11998                           ;doprnt.c: 547: if(c != '%')
 11999  1417  0853               	movf	sprintf@c,w
 12000  1418  3A25               	xorlw	37
 12001  1419  1903               	skipnz
 12002  141A  2C26               	goto	l6043
 12003                           
 12004                           ;doprnt.c: 549: {
 12005                           ;doprnt.c: 550: ((*sp++ = (c)));
 12006  141B  083D               	movf	sprintf@sp,w
 12007  141C  0086               	movwf	6
 12008  141D  083E               	movf	sprintf@sp+1,w
 12009  141E  0087               	movwf	7
 12010  141F  0853               	movf	sprintf@c,w
 12011  1420  0081               	movwf	1
 12012  1421  3001               	movlw	1
 12013  1422  07BD               	addwf	sprintf@sp,f
 12014  1423  3000               	movlw	0
 12015  1424  3DBE               	addwfc	sprintf@sp+1,f
 12016                           
 12017                           ;doprnt.c: 551: continue;
 12018  1425  2C05               	goto	l6083
 12019  1426                     l6043:	
 12020                           
 12021                           ;doprnt.c: 552: }
 12022                           ;doprnt.c: 557: flag = 0;
 12023  1426  01CB               	clrf	sprintf@flag
 12024                           
 12025                           ;doprnt.c: 644: switch(c = *f++) {
 12026                           
 12027                           ;doprnt.c: 642: loop:
 12028  1427  2C2F               	goto	l6049
 12029  1428                     l1071:	
 12030                           ;doprnt.c: 650: case 'l':
 12031                           
 12032                           ;doprnt.c: 647: goto alldone;
 12033                           
 12034                           ;doprnt.c: 646: case 0:
 12035                           
 12036                           
 12037                           ;doprnt.c: 652: flag |= 0x10;
 12038  1428  164B               	bsf	sprintf@flag,4
 12039                           
 12040                           ;doprnt.c: 653: goto loop;
 12041  1429  2C2F               	goto	l6049
 12042  142A                     l6045:	
 12043                           ;doprnt.c: 826: case 'u':
 12044                           
 12045                           ;doprnt.c: 822: continue;
 12046                           
 12047                           ;doprnt.c: 811: default:
 12048                           
 12049                           
 12050                           ;doprnt.c: 827: flag |= 0xC0;
 12051  142A  30C0               	movlw	192
 12052  142B  00C5               	movwf	??_sprintf
 12053  142C  0845               	movf	??_sprintf,w
 12054  142D  04CB               	iorwf	sprintf@flag,f
 12055                           
 12056                           ;doprnt.c: 831: }
 12057                           
 12058                           ;doprnt.c: 828: break;
 12059  142E  2C46               	goto	l1074
 12060  142F                     l6049:	
 12061  142F  0840               	movf	sprintf@f+1,w
 12062  1430  00C6               	movwf	??_sprintf+1
 12063  1431  083F               	movf	sprintf@f,w
 12064  1432  00C5               	movwf	??_sprintf
 12065  1433  0ABF               	incf	sprintf@f,f
 12066  1434  1903               	skipnz
 12067  1435  0AC0               	incf	sprintf@f+1,f
 12068  1436  0845               	movf	??_sprintf,w
 12069  1437  0084               	movwf	4
 12070  1438  0846               	movf	??_sprintf+1,w
 12071  1439  0085               	movwf	5
 12072  143A  0800               	movf	0,w	;code access
 12073  143B  00D3               	movwf	sprintf@c
 12074                           
 12075                           ; Switch size 1, requested type "space"
 12076                           ; Number of cases is 3, Range of values is 0 to 117
 12077                           ; switch strategies available:
 12078                           ; Name         Instructions Cycles
 12079                           ; simple_byte           10     6 (average)
 12080                           ; direct_byte          242     6 (fixed)
 12081                           ; jumptable            260     6 (fixed)
 12082                           ;	Chosen strategy is simple_byte
 12083  143C  3A00               	xorlw	0	; case 0
 12084  143D  1903               	skipnz
 12085  143E  2CEE               	goto	l6085
 12086  143F  3A6C               	xorlw	108	; case 108
 12087  1440  1903               	skipnz
 12088  1441  2C28               	goto	l1071
 12089  1442  3A19               	xorlw	25	; case 117
 12090  1443  1903               	skipnz
 12091  1444  2C2A               	goto	l6045
 12092  1445  2C05               	goto	l6083
 12093  1446                     l1074:	
 12094                           
 12095                           ;doprnt.c: 1282: {
 12096                           ;doprnt.c: 1290: if(flag & 0x10)
 12097  1446  1E4B               	btfss	sprintf@flag,4
 12098  1447  2C55               	goto	l6055
 12099                           
 12100                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12101  1448  0852               	movf	sprintf@ap,w
 12102  1449  0086               	movwf	6
 12103  144A  0187               	clrf	7
 12104  144B  3F40               	moviw [0]fsr1
 12105  144C  00CE               	movwf	sprintf@_val
 12106  144D  3F41               	moviw [1]fsr1
 12107  144E  00CF               	movwf	sprintf@_val+1
 12108  144F  3F42               	moviw [2]fsr1
 12109  1450  00D0               	movwf	sprintf@_val+2
 12110  1451  3F43               	moviw [3]fsr1
 12111  1452  00D1               	movwf	sprintf@_val+3
 12112  1453  3004               	movlw	4
 12113  1454  2C63               	goto	L17
 12114  1455                     l6055:	
 12115                           
 12116                           ;doprnt.c: 1292: else
 12117                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12118  1455  0852               	movf	sprintf@ap,w
 12119  1456  0086               	movwf	6
 12120  1457  0187               	clrf	7
 12121  1458  3F40               	moviw [0]fsr1
 12122  1459  00C5               	movwf	??_sprintf
 12123  145A  3F41               	moviw [1]fsr1
 12124  145B  00C6               	movwf	??_sprintf+1
 12125  145C  0845               	movf	??_sprintf,w
 12126  145D  00CE               	movwf	sprintf@_val
 12127  145E  0846               	movf	??_sprintf+1,w
 12128  145F  00CF               	movwf	sprintf@_val+1
 12129  1460  01D0               	clrf	sprintf@_val+2
 12130  1461  01D1               	clrf	sprintf@_val+3
 12131  1462  3002               	movlw	2
 12132  1463                     L17:	
 12133  1463  00C5               	movwf	??_sprintf
 12134  1464  0845               	movf	??_sprintf,w
 12135  1465  07D2               	addwf	sprintf@ap,f
 12136                           
 12137                           ;doprnt.c: 1296: }
 12138                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12139  1466  01D3               	clrf	sprintf@c
 12140  1467  0AD3               	incf	sprintf@c,f
 12141  1468  0853               	movf	sprintf@c,w
 12142  1469  3A0A               	xorlw	10
 12143  146A  1903               	btfsc	3,2
 12144  146B  2C99               	goto	l6073
 12145  146C                     l6065:	
 12146                           
 12147                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12148  146C  0853               	movf	sprintf@c,w
 12149  146D  00C5               	movwf	??_sprintf
 12150  146E  01C6               	clrf	??_sprintf+1
 12151  146F  35C5               	lslf	??_sprintf,f
 12152  1470  0DC6               	rlf	??_sprintf+1,f
 12153  1471  35C5               	lslf	??_sprintf,f
 12154  1472  0DC6               	rlf	??_sprintf+1,f
 12155  1473  30D3               	movlw	low (_dpowers| (0+32768))
 12156  1474  0745               	addwf	??_sprintf,w
 12157  1475  0084               	movwf	4
 12158  1476  3089               	movlw	high (_dpowers| (0+32768))
 12159  1477  3D46               	addwfc	??_sprintf+1,w
 12160  1478  0085               	movwf	5
 12161  1479  3F00               	moviw [0]fsr0
 12162  147A  00C7               	movwf	??_sprintf+2
 12163  147B  3F01               	moviw [1]fsr0
 12164  147C  00C8               	movwf	??_sprintf+3
 12165  147D  3F02               	moviw [2]fsr0
 12166  147E  00C9               	movwf	??_sprintf+4
 12167  147F  3F03               	moviw [3]fsr0
 12168  1480  00CA               	movwf	??_sprintf+5
 12169  1481  084A               	movf	??_sprintf+5,w
 12170  1482  0251               	subwf	sprintf@_val+3,w
 12171  1483  1D03               	skipz
 12172  1484  2C8F               	goto	u7705
 12173  1485  0849               	movf	??_sprintf+4,w
 12174  1486  0250               	subwf	sprintf@_val+2,w
 12175  1487  1D03               	skipz
 12176  1488  2C8F               	goto	u7705
 12177  1489  0848               	movf	??_sprintf+3,w
 12178  148A  024F               	subwf	sprintf@_val+1,w
 12179  148B  1D03               	skipz
 12180  148C  2C8F               	goto	u7705
 12181  148D  0847               	movf	??_sprintf+2,w
 12182  148E  024E               	subwf	sprintf@_val,w
 12183  148F                     u7705:	
 12184  148F  1C03               	btfss	3,0
 12185  1490  2C99               	goto	l6073
 12186                           
 12187                           ;doprnt.c: 1316: break;
 12188  1491  3001               	movlw	1
 12189  1492  00C5               	movwf	??_sprintf
 12190  1493  0845               	movf	??_sprintf,w
 12191  1494  07D3               	addwf	sprintf@c,f
 12192  1495  0853               	movf	sprintf@c,w
 12193  1496  3A0A               	xorlw	10
 12194  1497  1D03               	skipz
 12195  1498  2C6C               	goto	l6065
 12196  1499                     l6073:	
 12197                           
 12198                           ;doprnt.c: 1431: {
 12199                           ;doprnt.c: 1478: }
 12200                           ;doprnt.c: 1481: prec = c;
 12201  1499  0853               	movf	sprintf@c,w
 12202  149A  00CC               	movwf	sprintf@prec
 12203  149B  01CD               	clrf	sprintf@prec+1
 12204  149C  1BCC               	btfsc	sprintf@prec,7
 12205  149D  03CD               	decf	sprintf@prec+1,f
 12206  149E                     l6081:	
 12207                           ;doprnt.c: 1483: while(prec--) {
 12208                           
 12209  149E  30FF               	movlw	255
 12210  149F  07CC               	addwf	sprintf@prec,f
 12211  14A0  30FF               	movlw	255
 12212  14A1  3DCD               	addwfc	sprintf@prec+1,f
 12213  14A2  30FF               	movlw	255
 12214  14A3  064D               	xorwf	sprintf@prec+1,w
 12215  14A4  1D03               	skipz
 12216  14A5  2CA8               	goto	u7725
 12217  14A6  30FF               	movlw	255
 12218  14A7  064C               	xorwf	sprintf@prec,w
 12219  14A8                     u7725:	
 12220  14A8  1903               	btfsc	3,2
 12221  14A9  2C05               	goto	l6083
 12222                           
 12223                           ;doprnt.c: 1487: {
 12224                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12225  14AA  3000               	movlw	0
 12226  14AB  00B6               	movwf	___llmod@divisor+3
 12227  14AC  3000               	movlw	0
 12228  14AD  00B5               	movwf	___llmod@divisor+2
 12229  14AE  3000               	movlw	0
 12230  14AF  00B4               	movwf	___llmod@divisor+1
 12231  14B0  300A               	movlw	10
 12232  14B1  00B3               	movwf	___llmod@divisor
 12233  14B2  084D               	movf	sprintf@prec+1,w
 12234  14B3  0085               	movwf	5
 12235  14B4  084C               	movf	sprintf@prec,w
 12236  14B5  0084               	movwf	4
 12237  14B6  3584               	lslf	4,f
 12238  14B7  0D85               	rlf	5,f
 12239  14B8  3584               	lslf	4,f
 12240  14B9  0D85               	rlf	5,f
 12241  14BA  30D3               	movlw	low (_dpowers| (0+32768))
 12242  14BB  0784               	addwf	4,f
 12243  14BC  3089               	movlw	high (_dpowers| (0+32768))
 12244  14BD  3D85               	addwfc	5,f
 12245  14BE  3F00               	moviw [0]fsr0
 12246  14BF  00A5               	movwf	___lldiv@divisor
 12247  14C0  3F01               	moviw [1]fsr0
 12248  14C1  00A6               	movwf	___lldiv@divisor+1
 12249  14C2  3F02               	moviw [2]fsr0
 12250  14C3  00A7               	movwf	___lldiv@divisor+2
 12251  14C4  3F03               	moviw [3]fsr0
 12252  14C5  00A8               	movwf	___lldiv@divisor+3
 12253  14C6  0851               	movf	sprintf@_val+3,w
 12254  14C7  00AC               	movwf	___lldiv@dividend+3
 12255  14C8  0850               	movf	sprintf@_val+2,w
 12256  14C9  00AB               	movwf	___lldiv@dividend+2
 12257  14CA  084F               	movf	sprintf@_val+1,w
 12258  14CB  00AA               	movwf	___lldiv@dividend+1
 12259  14CC  084E               	movf	sprintf@_val,w
 12260  14CD  00A9               	movwf	___lldiv@dividend
 12261  14CE  319C  24F4  3194   	fcall	___lldiv
 12262  14D1  0020               	movlb	0	; select bank0
 12263  14D2  0828               	movf	?___lldiv+3,w
 12264  14D3  00BA               	movwf	___llmod@dividend+3
 12265  14D4  0827               	movf	?___lldiv+2,w
 12266  14D5  00B9               	movwf	___llmod@dividend+2
 12267  14D6  0826               	movf	?___lldiv+1,w
 12268  14D7  00B8               	movwf	___llmod@dividend+1
 12269  14D8  0825               	movf	?___lldiv,w
 12270  14D9  00B7               	movwf	___llmod@dividend
 12271  14DA  319B  23C8  3194   	fcall	___llmod
 12272  14DD  0020               	movlb	0	; select bank0
 12273  14DE  0833               	movf	?___llmod,w
 12274  14DF  3E30               	addlw	48
 12275  14E0  00C5               	movwf	??_sprintf
 12276  14E1  0845               	movf	??_sprintf,w
 12277  14E2  00D3               	movwf	sprintf@c
 12278                           
 12279                           ;doprnt.c: 1532: }
 12280                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12281  14E3  083D               	movf	sprintf@sp,w
 12282  14E4  0086               	movwf	6
 12283  14E5  083E               	movf	sprintf@sp+1,w
 12284  14E6  0087               	movwf	7
 12285  14E7  0853               	movf	sprintf@c,w
 12286  14E8  0081               	movwf	1
 12287  14E9  3001               	movlw	1
 12288  14EA  07BD               	addwf	sprintf@sp,f
 12289  14EB  3000               	movlw	0
 12290  14EC  3DBE               	addwfc	sprintf@sp+1,f
 12291  14ED  2C9E               	goto	l6081
 12292  14EE                     l6085:	
 12293                           ;doprnt.c: 1534: }
 12294                           ;doprnt.c: 1542: }
 12295                           ;doprnt.c: 1544: alldone:
 12296                           
 12297                           
 12298                           ;doprnt.c: 1547: *sp = 0;
 12299  14EE  083D               	movf	sprintf@sp,w
 12300  14EF  0086               	movwf	6
 12301  14F0  083E               	movf	sprintf@sp+1,w
 12302  14F1  0087               	movwf	7
 12303  14F2  0181               	clrf	1
 12304  14F3  0008               	return
 12305  14F4                     __end_of_sprintf:	
 12306                           ;doprnt.c: 1549: return 0;
 12307                           ;	Return value of _sprintf is never used
 12308                           
 12309                           
 12310                           	psect	text28
 12311  1BC8                     __ptext28:	
 12312 ;; *************** function ___llmod *****************
 12313 ;; Defined at:
 12314 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12315 ;; Parameters:    Size  Location     Type
 12316 ;;  divisor         4   19[BANK0 ] unsigned long 
 12317 ;;  dividend        4   23[BANK0 ] unsigned long 
 12318 ;; Auto vars:     Size  Location     Type
 12319 ;;  counter         1   28[BANK0 ] unsigned char 
 12320 ;; Return value:  Size  Location     Type
 12321 ;;                  4   19[BANK0 ] unsigned long 
 12322 ;; Registers used:
 12323 ;;		wreg, status,2, status,0
 12324 ;; Tracked objects:
 12325 ;;		On entry : 0/0
 12326 ;;		On exit  : 0/0
 12327 ;;		Unchanged: 0/0
 12328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12329 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;Total ram usage:       10 bytes
 12334 ;; Hardware stack levels used:    1
 12335 ;; Hardware stack levels required when called:    3
 12336 ;; This function calls:
 12337 ;;		Nothing
 12338 ;; This function is called by:
 12339 ;;		_sprintf
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           
 12344                           ;psect for function ___llmod
 12345  1BC8                     ___llmod:	
 12346                           
 12347                           ;incstack = 0
 12348                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12349  1BC8  0020               	movlb	0	; select bank0
 12350  1BC9  0836               	movf	___llmod@divisor+3,w
 12351  1BCA  0435               	iorwf	___llmod@divisor+2,w
 12352  1BCB  0434               	iorwf	___llmod@divisor+1,w
 12353  1BCC  0433               	iorwf	___llmod@divisor,w
 12354  1BCD  1903               	skipnz
 12355  1BCE  2C02               	goto	l5913
 12356  1BCF  01BC               	clrf	___llmod@counter
 12357  1BD0  0ABC               	incf	___llmod@counter,f
 12358  1BD1                     l5903:	
 12359  1BD1  1BB6               	btfsc	___llmod@divisor+3,7
 12360  1BD2  2BDF               	goto	l5905
 12361  1BD3  3001               	movlw	1
 12362  1BD4                     u7515:	
 12363  1BD4  35B3               	lslf	___llmod@divisor,f
 12364  1BD5  0DB4               	rlf	___llmod@divisor+1,f
 12365  1BD6  0DB5               	rlf	___llmod@divisor+2,f
 12366  1BD7  0DB6               	rlf	___llmod@divisor+3,f
 12367  1BD8  0B89               	decfsz	9,f
 12368  1BD9  2BD4               	goto	u7515
 12369  1BDA  3001               	movlw	1
 12370  1BDB  00BB               	movwf	??___llmod
 12371  1BDC  083B               	movf	??___llmod,w
 12372  1BDD  07BC               	addwf	___llmod@counter,f
 12373  1BDE  2BD1               	goto	l5903
 12374  1BDF                     l5905:	
 12375  1BDF  0836               	movf	___llmod@divisor+3,w
 12376  1BE0  023A               	subwf	___llmod@dividend+3,w
 12377  1BE1  1D03               	skipz
 12378  1BE2  2BED               	goto	u7535
 12379  1BE3  0835               	movf	___llmod@divisor+2,w
 12380  1BE4  0239               	subwf	___llmod@dividend+2,w
 12381  1BE5  1D03               	skipz
 12382  1BE6  2BED               	goto	u7535
 12383  1BE7  0834               	movf	___llmod@divisor+1,w
 12384  1BE8  0238               	subwf	___llmod@dividend+1,w
 12385  1BE9  1D03               	skipz
 12386  1BEA  2BED               	goto	u7535
 12387  1BEB  0833               	movf	___llmod@divisor,w
 12388  1BEC  0237               	subwf	___llmod@dividend,w
 12389  1BED                     u7535:	
 12390  1BED  1C03               	skipc
 12391  1BEE  2BF7               	goto	l5909
 12392  1BEF  0833               	movf	___llmod@divisor,w
 12393  1BF0  02B7               	subwf	___llmod@dividend,f
 12394  1BF1  0834               	movf	___llmod@divisor+1,w
 12395  1BF2  3BB8               	subwfb	___llmod@dividend+1,f
 12396  1BF3  0835               	movf	___llmod@divisor+2,w
 12397  1BF4  3BB9               	subwfb	___llmod@dividend+2,f
 12398  1BF5  0836               	movf	___llmod@divisor+3,w
 12399  1BF6  3BBA               	subwfb	___llmod@dividend+3,f
 12400  1BF7                     l5909:	
 12401  1BF7  3001               	movlw	1
 12402  1BF8                     u7545:	
 12403  1BF8  36B6               	lsrf	___llmod@divisor+3,f
 12404  1BF9  0CB5               	rrf	___llmod@divisor+2,f
 12405  1BFA  0CB4               	rrf	___llmod@divisor+1,f
 12406  1BFB  0CB3               	rrf	___llmod@divisor,f
 12407  1BFC  0B89               	decfsz	9,f
 12408  1BFD  2BF8               	goto	u7545
 12409  1BFE  3001               	movlw	1
 12410  1BFF  02BC               	subwf	___llmod@counter,f
 12411  1C00  1D03               	btfss	3,2
 12412  1C01  2BDF               	goto	l5905
 12413  1C02                     l5913:	
 12414  1C02  083A               	movf	___llmod@dividend+3,w
 12415  1C03  00B6               	movwf	?___llmod+3
 12416  1C04  0839               	movf	___llmod@dividend+2,w
 12417  1C05  00B5               	movwf	?___llmod+2
 12418  1C06  0838               	movf	___llmod@dividend+1,w
 12419  1C07  00B4               	movwf	?___llmod+1
 12420  1C08  0837               	movf	___llmod@dividend,w
 12421  1C09  00B3               	movwf	?___llmod
 12422  1C0A  0008               	return
 12423  1C0B                     __end_of___llmod:	
 12424                           
 12425                           	psect	text29
 12426  1AE2                     __ptext29:	
 12427 ;; *************** function _UARTstringWAIT *****************
 12428 ;; Defined at:
 12429 ;;		line 273 in file "UART.c"
 12430 ;; Parameters:    Size  Location     Type
 12431 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12432 ;;		 -> STR_34(20), PS_2_Update@buf(60), STR_28(3), STR_27(35), 
 12433 ;;		 -> STR_26(18), STR_25(3), SetBaud@buf(50), STR_19(15), 
 12434 ;;		 -> STR_18(3), Init_System@buf(60), STR_12(3), STR_11(20), 
 12435 ;;		 -> STR_10(19), STR_9(17), STR_8(22), STR_7(21), 
 12436 ;;		 -> STR_6(24), STR_5(35), STR_4(3), Version(4), 
 12437 ;;		 -> STR_3(19), STR_2(26), STR_1(3), 
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;		None
 12440 ;; Return value:  Size  Location     Type
 12441 ;;		None               void
 12442 ;; Registers used:
 12443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12449 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;Total ram usage:        4 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:    5
 12456 ;; This function calls:
 12457 ;;		_UARTchar
 12458 ;;		_delayUS
 12459 ;; This function is called by:
 12460 ;;		_main
 12461 ;;		_Init_System
 12462 ;;		_SetBaud
 12463 ;;		_PS_2_Update
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _UARTstringWAIT
 12469  1AE2                     _UARTstringWAIT:	
 12470  1AE2                     l517:	
 12471                           ;incstack = 0
 12472                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12473                           ;UART.c: 275: do
 12474                           
 12475                           
 12476                           ;UART.c: 276: {
 12477                           ;UART.c: 277: delayUS(5000);
 12478  1AE2  3000               	movlw	0
 12479  1AE3  0020               	movlb	0	; select bank0
 12480  1AE4  00A8               	movwf	delayUS@US+3
 12481  1AE5  3000               	movlw	0
 12482  1AE6  00A7               	movwf	delayUS@US+2
 12483  1AE7  3013               	movlw	19
 12484  1AE8  00A6               	movwf	delayUS@US+1
 12485  1AE9  3088               	movlw	136
 12486  1AEA  00A5               	movwf	delayUS@US
 12487  1AEB  319B  2315  319A   	fcall	_delayUS
 12488                           
 12489                           ;UART.c: 278: if(*data != 0)
 12490  1AEE  0020               	movlb	0	; select bank0
 12491  1AEF  0834               	movf	UARTstringWAIT@data,w
 12492  1AF0  0084               	movwf	4
 12493  1AF1  0835               	movf	UARTstringWAIT@data+1,w
 12494  1AF2  0085               	movwf	5
 12495  1AF3  0800               	movf	0,w	;code access
 12496  1AF4  3A00               	xorlw	0
 12497  1AF5  1903               	skipnz
 12498  1AF6  2B04               	goto	l5947
 12499                           
 12500                           ;UART.c: 279: {
 12501                           ;UART.c: 280: UARTchar(*data, 0, 0);
 12502  1AF7  01AD               	clrf	UARTchar@NinethBit_override
 12503  1AF8  01AE               	clrf	UARTchar@NinethBit_override_data
 12504  1AF9  0834               	movf	UARTstringWAIT@data,w
 12505  1AFA  0084               	movwf	4
 12506  1AFB  0835               	movf	UARTstringWAIT@data+1,w
 12507  1AFC  0085               	movwf	5
 12508  1AFD  0800               	movf	0,w	;code access
 12509  1AFE  319C  2455  319A   	fcall	_UARTchar
 12510  1B01                     l519:	
 12511                           ;UART.c: 281: while((!TX1STAbits.TRMT));
 12512                           
 12513  1B01  0023               	movlb	3	; select bank3
 12514  1B02  1C9E               	btfss	30,1	;volatile
 12515  1B03  2B01               	goto	l519
 12516  1B04                     l5947:	
 12517                           
 12518                           ;UART.c: 282: }
 12519                           ;UART.c: 283: } while( *data++);
 12520  1B04  0020               	movlb	0	; select bank0
 12521  1B05  0835               	movf	UARTstringWAIT@data+1,w
 12522  1B06  00B7               	movwf	??_UARTstringWAIT+1
 12523  1B07  0834               	movf	UARTstringWAIT@data,w
 12524  1B08  00B6               	movwf	??_UARTstringWAIT
 12525  1B09  0AB4               	incf	UARTstringWAIT@data,f
 12526  1B0A  1903               	skipnz
 12527  1B0B  0AB5               	incf	UARTstringWAIT@data+1,f
 12528  1B0C  0836               	movf	??_UARTstringWAIT,w
 12529  1B0D  0084               	movwf	4
 12530  1B0E  0837               	movf	??_UARTstringWAIT+1,w
 12531  1B0F  0085               	movwf	5
 12532  1B10  0800               	movf	0,w	;code access
 12533  1B11  3800               	iorlw	0
 12534  1B12  1903               	btfsc	3,2
 12535  1B13  0008               	return
 12536  1B14  2AE2               	goto	l517
 12537  1B15                     __end_of_UARTstringWAIT:	
 12538                           
 12539                           	psect	text30
 12540  1C55                     __ptext30:	
 12541 ;; *************** function _UARTchar *****************
 12542 ;; Defined at:
 12543 ;;		line 189 in file "UART.c"
 12544 ;; Parameters:    Size  Location     Type
 12545 ;;  data            1    wreg     unsigned char 
 12546 ;;  NinethBit_ov    1   13[BANK0 ] unsigned char 
 12547 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;  data            1   19[BANK0 ] unsigned char 
 12550 ;; Return value:  Size  Location     Type
 12551 ;;		None               void
 12552 ;; Registers used:
 12553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12559 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;Total ram usage:        7 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    4
 12566 ;; This function calls:
 12567 ;;		_CheckSum_byte
 12568 ;; This function is called by:
 12569 ;;		_UARTstringWAIT
 12570 ;;		_PS_2_Update
 12571 ;;		_UARTstring
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function _UARTchar
 12577  1C55                     _UARTchar:	
 12578                           
 12579                           ;incstack = 0
 12580                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12581                           ;UARTchar@data stored from wreg
 12582  1C55  0020               	movlb	0	; select bank0
 12583  1C56  00B3               	movwf	UARTchar@data
 12584                           
 12585                           ;UART.c: 192: if(TXSTAbits.TX9)
 12586  1C57  0023               	movlb	3	; select bank3
 12587  1C58  1F1E               	btfss	30,6	;volatile
 12588  1C59  2C9E               	goto	l5749
 12589                           
 12590                           ;UART.c: 193: {
 12591                           ;UART.c: 195: if(!NinethBit_override)
 12592  1C5A  0020               	movlb	0	; select bank0
 12593  1C5B  08AD               	movf	UARTchar@NinethBit_override,f
 12594  1C5C  1903               	btfsc	3,2
 12595  1C5D  2C86               	goto	l5745
 12596  1C5E  2C93               	goto	l5747
 12597  1C5F                     l5739:	
 12598                           ;UART.c: 199: {
 12599                           ;UART.c: 200: case 1:
 12600                           
 12601                           ;UART.c: 196: {
 12602                           ;UART.c: 198: switch (PARITY)
 12603                           
 12604                           
 12605                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12606  1C5F  0833               	movf	UARTchar@data,w
 12607  1C60  00AF               	movwf	??_UARTchar
 12608  1C61  01B0               	clrf	??_UARTchar+1
 12609  1C62  082F               	movf	??_UARTchar,w
 12610  1C63  00A5               	movwf	CheckSum_byte@This
 12611  1C64  0830               	movf	??_UARTchar+1,w
 12612  1C65  00A6               	movwf	CheckSum_byte@This+1
 12613  1C66  3003               	movlw	3
 12614  1C67  2C71               	goto	L20
 12615  1C68                     l5741:	
 12616                           ;UART.c: 203: case 2:
 12617                           
 12618                           ;UART.c: 202: break;
 12619                           
 12620                           
 12621                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12622  1C68  0020               	movlb	0	; select bank0
 12623  1C69  0833               	movf	UARTchar@data,w
 12624  1C6A  00AF               	movwf	??_UARTchar
 12625  1C6B  01B0               	clrf	??_UARTchar+1
 12626  1C6C  082F               	movf	??_UARTchar,w
 12627  1C6D  00A5               	movwf	CheckSum_byte@This
 12628  1C6E  0830               	movf	??_UARTchar+1,w
 12629  1C6F  00A6               	movwf	CheckSum_byte@This+1
 12630  1C70  3002               	movlw	2
 12631  1C71                     L20:	
 12632  1C71  00B1               	movwf	??_UARTchar+2
 12633  1C72  0831               	movf	??_UARTchar+2,w
 12634  1C73  00A7               	movwf	CheckSum_byte@Odd_Even
 12635  1C74  319A  224E  319C   	fcall	_CheckSum_byte
 12636  1C77  0020               	movlb	0	; select bank0
 12637  1C78  00B2               	movwf	??_UARTchar+3
 12638  1C79  0023               	movlb	3	; select bank3
 12639  1C7A  081E               	movf	30,w	;volatile
 12640  1C7B  0020               	movlb	0	; select bank0
 12641  1C7C  0632               	xorwf	??_UARTchar+3,w
 12642  1C7D  39FE               	andlw	-2
 12643  1C7E  0632               	xorwf	??_UARTchar+3,w
 12644  1C7F  2C9C               	goto	L19
 12645  1C80                     l491:	
 12646                           ;UART.c: 206: case 3:
 12647                           
 12648                           ;UART.c: 205: break;
 12649                           
 12650                           
 12651                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 12652  1C80  0023               	movlb	3	; select bank3
 12653  1C81  141E               	bsf	30,0	;volatile
 12654                           
 12655                           ;UART.c: 208: break;
 12656  1C82  2C9E               	goto	l5749
 12657  1C83                     l492:	
 12658                           ;UART.c: 209: default:
 12659                           
 12660                           
 12661                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 12662  1C83  0023               	movlb	3	; select bank3
 12663  1C84  101E               	bcf	30,0	;volatile
 12664                           
 12665                           ;UART.c: 212: }
 12666                           
 12667                           ;UART.c: 211: break;
 12668  1C85  2C9E               	goto	l5749
 12669  1C86                     l5745:	
 12670  1C86  0020               	movlb	0	; select bank0
 12671  1C87  0867               	movf	_PARITY,w
 12672                           
 12673                           ; Switch size 1, requested type "space"
 12674                           ; Number of cases is 3, Range of values is 1 to 3
 12675                           ; switch strategies available:
 12676                           ; Name         Instructions Cycles
 12677                           ; simple_byte           10     6 (average)
 12678                           ; direct_byte           15     9 (fixed)
 12679                           ; jumptable            263     9 (fixed)
 12680                           ;	Chosen strategy is simple_byte
 12681  1C88  3A01               	xorlw	1	; case 1
 12682  1C89  1903               	skipnz
 12683  1C8A  2C5F               	goto	l5739
 12684  1C8B  3A03               	xorlw	3	; case 2
 12685  1C8C  1903               	skipnz
 12686  1C8D  2C68               	goto	l5741
 12687  1C8E  3A01               	xorlw	1	; case 3
 12688  1C8F  1903               	skipnz
 12689  1C90  2C80               	goto	l491
 12690  1C91  2C83               	goto	l492
 12691                           
 12692                           ;UART.c: 213: }
 12693  1C92  2C9E               	goto	l5749
 12694  1C93                     l5747:	
 12695                           
 12696                           ;UART.c: 214: else
 12697                           ;UART.c: 215: {
 12698                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12699  1C93  3001               	movlw	1
 12700  1C94  052E               	andwf	UARTchar@NinethBit_override_data,w
 12701  1C95  00AF               	movwf	??_UARTchar
 12702  1C96  0023               	movlb	3	; select bank3
 12703  1C97  081E               	movf	30,w	;volatile
 12704  1C98  0020               	movlb	0	; select bank0
 12705  1C99  062F               	xorwf	??_UARTchar,w
 12706  1C9A  39FE               	andlw	-2
 12707  1C9B  062F               	xorwf	??_UARTchar,w
 12708  1C9C                     L19:	
 12709  1C9C  0023               	movlb	3	; select bank3
 12710  1C9D  009E               	movwf	30	;volatile
 12711  1C9E                     l5749:	
 12712                           
 12713                           ;UART.c: 217: }
 12714                           ;UART.c: 218: }
 12715                           ;UART.c: 219: TXREG = data;
 12716  1C9E  0020               	movlb	0	; select bank0
 12717  1C9F  0833               	movf	UARTchar@data,w
 12718  1CA0  0023               	movlb	3	; select bank3
 12719  1CA1  009A               	movwf	26	;volatile
 12720  1CA2  0008               	return
 12721  1CA3                     __end_of_UARTchar:	
 12722                           
 12723                           	psect	text31
 12724  1D9C                     __ptext31:	
 12725 ;; *************** function _ReadBaud *****************
 12726 ;; Defined at:
 12727 ;;		line 135 in file "FLASH.c"
 12728 ;; Parameters:    Size  Location     Type
 12729 ;;  row             2   23[BANK0 ] unsigned int 
 12730 ;;  column          1   25[BANK0 ] unsigned char 
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;  temp            4   35[BANK0 ] unsigned long 
 12733 ;; Return value:  Size  Location     Type
 12734 ;;                  4   23[BANK0 ] unsigned long 
 12735 ;; Registers used:
 12736 ;;		wreg, status,2, status,0, pclath, cstack
 12737 ;; Tracked objects:
 12738 ;;		On entry : 0/0
 12739 ;;		On exit  : 0/0
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;Total ram usage:       16 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    5
 12749 ;; This function calls:
 12750 ;;		_ReadFlash_4Byte
 12751 ;; This function is called by:
 12752 ;;		_Init_System
 12753 ;;		_SetBaud
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           
 12758                           ;psect for function _ReadBaud
 12759  1D9C                     _ReadBaud:	
 12760                           
 12761                           ;FLASH.c: 137: unsigned long temp;
 12762                           ;FLASH.c: 138: temp =(ReadFlash_4Byte(row, column));
 12763                           
 12764                           ;incstack = 0
 12765                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12766  1D9C  0020               	movlb	0	; select bank0
 12767  1D9D  0838               	movf	ReadBaud@row+1,w
 12768  1D9E  01AB               	clrf	ReadFlash_4Byte@row+1
 12769  1D9F  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12770  1DA0  0837               	movf	ReadBaud@row,w
 12771  1DA1  01AA               	clrf	ReadFlash_4Byte@row
 12772  1DA2  07AA               	addwf	ReadFlash_4Byte@row,f
 12773  1DA3  0839               	movf	ReadBaud@column,w
 12774  1DA4  00BB               	movwf	??_ReadBaud
 12775  1DA5  083B               	movf	??_ReadBaud,w
 12776  1DA6  00AC               	movwf	ReadFlash_4Byte@column
 12777  1DA7  319C  24A3  319D   	fcall	_ReadFlash_4Byte
 12778  1DAA  0020               	movlb	0	; select bank0
 12779  1DAB  082D               	movf	?_ReadFlash_4Byte+3,w
 12780  1DAC  00C6               	movwf	ReadBaud@temp+3
 12781  1DAD  082C               	movf	?_ReadFlash_4Byte+2,w
 12782  1DAE  00C5               	movwf	ReadBaud@temp+2
 12783  1DAF  082B               	movf	?_ReadFlash_4Byte+1,w
 12784  1DB0  00C4               	movwf	ReadBaud@temp+1
 12785  1DB1  082A               	movf	?_ReadFlash_4Byte,w
 12786  1DB2  00C3               	movwf	ReadBaud@temp
 12787                           
 12788                           ;FLASH.c: 139: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12789  1DB3  30FF               	movlw	255
 12790  1DB4  0543               	andwf	ReadBaud@temp,w
 12791  1DB5  0022               	movlb	2	; select bank2
 12792  1DB6  00ED               	movwf	(_MEM^(0+256)+2)
 12793  1DB7  303F               	movlw	63
 12794  1DB8  0020               	movlb	0	; select bank0
 12795  1DB9  0544               	andwf	ReadBaud@temp+1,w
 12796  1DBA  0022               	movlb	2	; select bank2
 12797  1DBB  00EE               	movwf	((_MEM+1)^(0+256)+2)
 12798                           
 12799                           ;FLASH.c: 140: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12800  1DBC  0020               	movlb	0	; select bank0
 12801  1DBD  0843               	movf	ReadBaud@temp,w
 12802  1DBE  00BB               	movwf	??_ReadBaud
 12803  1DBF  0844               	movf	ReadBaud@temp+1,w
 12804  1DC0  00BC               	movwf	??_ReadBaud+1
 12805  1DC1  0845               	movf	ReadBaud@temp+2,w
 12806  1DC2  00BD               	movwf	??_ReadBaud+2
 12807  1DC3  0846               	movf	ReadBaud@temp+3,w
 12808  1DC4  00BE               	movwf	??_ReadBaud+3
 12809  1DC5  300E               	movlw	14
 12810  1DC6                     u7635:	
 12811  1DC6  36BE               	lsrf	??_ReadBaud+3,f
 12812  1DC7  0CBD               	rrf	??_ReadBaud+2,f
 12813  1DC8  0CBC               	rrf	??_ReadBaud+1,f
 12814  1DC9  0CBB               	rrf	??_ReadBaud,f
 12815  1DCA  0B89               	decfsz	9,f
 12816  1DCB  2DC6               	goto	u7635
 12817  1DCC  30FF               	movlw	255
 12818  1DCD  053B               	andwf	??_ReadBaud,w
 12819  1DCE  0022               	movlb	2	; select bank2
 12820  1DCF  00EB               	movwf	_MEM^(0+256)
 12821  1DD0  303F               	movlw	63
 12822  1DD1  0020               	movlb	0	; select bank0
 12823  1DD2  053C               	andwf	??_ReadBaud+1,w
 12824  1DD3  0022               	movlb	2	; select bank2
 12825  1DD4  00EC               	movwf	(_MEM+1)^(0+256)
 12826                           
 12827                           ;FLASH.c: 141: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12828  1DD5  086D               	movf	(_MEM^(0+256)+2),w
 12829  1DD6  0020               	movlb	0	; select bank0
 12830  1DD7  00BB               	movwf	??_ReadBaud
 12831  1DD8  0022               	movlb	2	; select bank2
 12832  1DD9  086E               	movf	((_MEM+1)^(0+256)+2),w
 12833  1DDA  0020               	movlb	0	; select bank0
 12834  1DDB  00BC               	movwf	??_ReadBaud+1
 12835  1DDC  01BD               	clrf	??_ReadBaud+2
 12836  1DDD  01BE               	clrf	??_ReadBaud+3
 12837  1DDE  0022               	movlb	2	; select bank2
 12838  1DDF  086B               	movf	_MEM^(0+256),w
 12839  1DE0  0020               	movlb	0	; select bank0
 12840  1DE1  00BF               	movwf	??_ReadBaud+4
 12841  1DE2  0022               	movlb	2	; select bank2
 12842  1DE3  086C               	movf	(_MEM+1)^(0+256),w
 12843  1DE4  0020               	movlb	0	; select bank0
 12844  1DE5  00C0               	movwf	??_ReadBaud+5
 12845  1DE6  01C1               	clrf	??_ReadBaud+6
 12846  1DE7  01C2               	clrf	??_ReadBaud+7
 12847  1DE8  300C               	movlw	12
 12848  1DE9                     u7645:	
 12849  1DE9  35BF               	lslf	??_ReadBaud+4,f
 12850  1DEA  0DC0               	rlf	??_ReadBaud+5,f
 12851  1DEB  0DC1               	rlf	??_ReadBaud+6,f
 12852  1DEC  0DC2               	rlf	??_ReadBaud+7,f
 12853  1DED  0B89               	decfsz	9,f
 12854  1DEE  2DE9               	goto	u7645
 12855  1DEF  083F               	movf	??_ReadBaud+4,w
 12856  1DF0  07BB               	addwf	??_ReadBaud,f
 12857  1DF1  0840               	movf	??_ReadBaud+5,w
 12858  1DF2  3DBC               	addwfc	??_ReadBaud+1,f
 12859  1DF3  0841               	movf	??_ReadBaud+6,w
 12860  1DF4  3DBD               	addwfc	??_ReadBaud+2,f
 12861  1DF5  0842               	movf	??_ReadBaud+7,w
 12862  1DF6  3DBE               	addwfc	??_ReadBaud+3,f
 12863  1DF7  083E               	movf	??_ReadBaud+3,w
 12864  1DF8  00BA               	movwf	?_ReadBaud+3
 12865  1DF9  083D               	movf	??_ReadBaud+2,w
 12866  1DFA  00B9               	movwf	?_ReadBaud+2
 12867  1DFB  083C               	movf	??_ReadBaud+1,w
 12868  1DFC  00B8               	movwf	?_ReadBaud+1
 12869  1DFD  083B               	movf	??_ReadBaud,w
 12870  1DFE  00B7               	movwf	?_ReadBaud
 12871  1DFF  0008               	return
 12872  1E00                     __end_of_ReadBaud:	
 12873                           
 12874                           	psect	text32
 12875  1CA3                     __ptext32:	
 12876 ;; *************** function _ReadFlash_4Byte *****************
 12877 ;; Defined at:
 12878 ;;		line 43 in file "FLASH.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;  row             2   10[BANK0 ] unsigned int 
 12881 ;;  column          1   12[BANK0 ] unsigned char 
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;  temp            4   19[BANK0 ] unsigned long 
 12884 ;; Return value:  Size  Location     Type
 12885 ;;                  4   10[BANK0 ] unsigned long 
 12886 ;; Registers used:
 12887 ;;		wreg, status,2, status,0, pclath, cstack
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12893 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;Total ram usage:       13 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:    4
 12900 ;; This function calls:
 12901 ;;		_ReadFlash_2Byte
 12902 ;; This function is called by:
 12903 ;;		_ReadBaud
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _ReadFlash_4Byte
 12909  1CA3                     _ReadFlash_4Byte:	
 12910                           
 12911                           ;FLASH.c: 45: unsigned long temp =0;
 12912                           
 12913                           ;incstack = 0
 12914                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12915  1CA3  3000               	movlw	0
 12916  1CA4  0020               	movlb	0	; select bank0
 12917  1CA5  00B6               	movwf	ReadFlash_4Byte@temp+3
 12918  1CA6  3000               	movlw	0
 12919  1CA7  00B5               	movwf	ReadFlash_4Byte@temp+2
 12920  1CA8  3000               	movlw	0
 12921  1CA9  00B4               	movwf	ReadFlash_4Byte@temp+1
 12922  1CAA  3000               	movlw	0
 12923  1CAB  00B3               	movwf	ReadFlash_4Byte@temp
 12924                           
 12925                           ;FLASH.c: 46: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12926  1CAC  082B               	movf	ReadFlash_4Byte@row+1,w
 12927  1CAD  01A6               	clrf	ReadFlash_2Byte@row+1
 12928  1CAE  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12929  1CAF  082A               	movf	ReadFlash_4Byte@row,w
 12930  1CB0  01A5               	clrf	ReadFlash_2Byte@row
 12931  1CB1  07A5               	addwf	ReadFlash_2Byte@row,f
 12932  1CB2  082C               	movf	ReadFlash_4Byte@column,w
 12933  1CB3  00AE               	movwf	??_ReadFlash_4Byte
 12934  1CB4  082E               	movf	??_ReadFlash_4Byte,w
 12935  1CB5  00A7               	movwf	ReadFlash_2Byte@column
 12936  1CB6  319A  22B0  319C   	fcall	_ReadFlash_2Byte
 12937  1CB9  0020               	movlb	0	; select bank0
 12938  1CBA  0825               	movf	?_ReadFlash_2Byte,w
 12939  1CBB  00AF               	movwf	??_ReadFlash_4Byte+1
 12940  1CBC  0826               	movf	?_ReadFlash_2Byte+1,w
 12941  1CBD  00B0               	movwf	??_ReadFlash_4Byte+2
 12942  1CBE  01B1               	clrf	??_ReadFlash_4Byte+3
 12943  1CBF  01B2               	clrf	??_ReadFlash_4Byte+4
 12944  1CC0  3010               	movlw	16
 12945  1CC1                     u7385:	
 12946  1CC1  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12947  1CC2  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12948  1CC3  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12949  1CC4  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12950  1CC5  0B89               	decfsz	9,f
 12951  1CC6  2CC1               	goto	u7385
 12952  1CC7  0832               	movf	??_ReadFlash_4Byte+4,w
 12953  1CC8  00B6               	movwf	ReadFlash_4Byte@temp+3
 12954  1CC9  0831               	movf	??_ReadFlash_4Byte+3,w
 12955  1CCA  00B5               	movwf	ReadFlash_4Byte@temp+2
 12956  1CCB  0830               	movf	??_ReadFlash_4Byte+2,w
 12957  1CCC  00B4               	movwf	ReadFlash_4Byte@temp+1
 12958  1CCD  082F               	movf	??_ReadFlash_4Byte+1,w
 12959  1CCE  00B3               	movwf	ReadFlash_4Byte@temp
 12960                           
 12961                           ;FLASH.c: 47: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12962  1CCF  082B               	movf	ReadFlash_4Byte@row+1,w
 12963  1CD0  01A6               	clrf	ReadFlash_2Byte@row+1
 12964  1CD1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12965  1CD2  082A               	movf	ReadFlash_4Byte@row,w
 12966  1CD3  01A5               	clrf	ReadFlash_2Byte@row
 12967  1CD4  07A5               	addwf	ReadFlash_2Byte@row,f
 12968  1CD5  082C               	movf	ReadFlash_4Byte@column,w
 12969  1CD6  3E01               	addlw	1
 12970  1CD7  00AE               	movwf	??_ReadFlash_4Byte
 12971  1CD8  082E               	movf	??_ReadFlash_4Byte,w
 12972  1CD9  00A7               	movwf	ReadFlash_2Byte@column
 12973  1CDA  319A  22B0         	fcall	_ReadFlash_2Byte
 12974  1CDC  0020               	movlb	0	; select bank0
 12975  1CDD  0825               	movf	?_ReadFlash_2Byte,w
 12976  1CDE  00AF               	movwf	??_ReadFlash_4Byte+1
 12977  1CDF  0826               	movf	?_ReadFlash_2Byte+1,w
 12978  1CE0  00B0               	movwf	??_ReadFlash_4Byte+2
 12979  1CE1  01B1               	clrf	??_ReadFlash_4Byte+3
 12980  1CE2  01B2               	clrf	??_ReadFlash_4Byte+4
 12981  1CE3  082F               	movf	??_ReadFlash_4Byte+1,w
 12982  1CE4  04B3               	iorwf	ReadFlash_4Byte@temp,f
 12983  1CE5  0830               	movf	??_ReadFlash_4Byte+2,w
 12984  1CE6  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 12985  1CE7  0831               	movf	??_ReadFlash_4Byte+3,w
 12986  1CE8  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 12987  1CE9  0832               	movf	??_ReadFlash_4Byte+4,w
 12988  1CEA  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 12989                           
 12990                           ;FLASH.c: 48: return temp;
 12991  1CEB  0836               	movf	ReadFlash_4Byte@temp+3,w
 12992  1CEC  00AD               	movwf	?_ReadFlash_4Byte+3
 12993  1CED  0835               	movf	ReadFlash_4Byte@temp+2,w
 12994  1CEE  00AC               	movwf	?_ReadFlash_4Byte+2
 12995  1CEF  0834               	movf	ReadFlash_4Byte@temp+1,w
 12996  1CF0  00AB               	movwf	?_ReadFlash_4Byte+1
 12997  1CF1  0833               	movf	ReadFlash_4Byte@temp,w
 12998  1CF2  00AA               	movwf	?_ReadFlash_4Byte
 12999  1CF3  0008               	return
 13000  1CF4                     __end_of_ReadFlash_4Byte:	
 13001                           
 13002                           	psect	text33
 13003  1AB0                     __ptext33:	
 13004 ;; *************** function _ReadFlash_2Byte *****************
 13005 ;; Defined at:
 13006 ;;		line 31 in file "FLASH.c"
 13007 ;; Parameters:    Size  Location     Type
 13008 ;;  row             2    5[BANK0 ] unsigned int 
 13009 ;;  column          1    7[BANK0 ] unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;		None
 13012 ;; Return value:  Size  Location     Type
 13013 ;;                  2    5[BANK0 ] unsigned int 
 13014 ;; Registers used:
 13015 ;;		wreg, status,2, status,0
 13016 ;; Tracked objects:
 13017 ;;		On entry : 0/0
 13018 ;;		On exit  : 0/0
 13019 ;;		Unchanged: 0/0
 13020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13021 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;Total ram usage:        5 bytes
 13026 ;; Hardware stack levels used:    1
 13027 ;; Hardware stack levels required when called:    3
 13028 ;; This function calls:
 13029 ;;		Nothing
 13030 ;; This function is called by:
 13031 ;;		_ReadFlash_4Byte
 13032 ;;		_WriteFlash_Sequential
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           
 13037                           ;psect for function _ReadFlash_2Byte
 13038  1AB0                     _ReadFlash_2Byte:	
 13039                           
 13040                           ;FLASH.c: 33: PMCON1 &= ~0b01000000;
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 13044  1AB0  30BF               	movlw	191
 13045  1AB1  0020               	movlb	0	; select bank0
 13046  1AB2  00A8               	movwf	??_ReadFlash_2Byte
 13047  1AB3  0828               	movf	??_ReadFlash_2Byte,w
 13048  1AB4  0023               	movlb	3	; select bank3
 13049  1AB5  0595               	andwf	21,f	;volatile
 13050                           
 13051                           ;FLASH.c: 34: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 13052  1AB6  0020               	movlb	0	; select bank0
 13053  1AB7  0826               	movf	ReadFlash_2Byte@row+1,w
 13054  1AB8  00A9               	movwf	??_ReadFlash_2Byte+1
 13055  1AB9  0825               	movf	ReadFlash_2Byte@row,w
 13056  1ABA  00A8               	movwf	??_ReadFlash_2Byte
 13057  1ABB  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13058  1ABC  0CA8               	rrf	??_ReadFlash_2Byte,f
 13059  1ABD  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13060  1ABE  0CA8               	rrf	??_ReadFlash_2Byte,f
 13061  1ABF  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13062  1AC0  0CA8               	rrf	??_ReadFlash_2Byte,f
 13063  1AC1  0828               	movf	??_ReadFlash_2Byte,w
 13064  1AC2  397F               	andlw	127
 13065  1AC3  0023               	movlb	3	; select bank3
 13066  1AC4  0092               	movwf	18	;volatile
 13067                           
 13068                           ;FLASH.c: 35: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 13069  1AC5  0020               	movlb	0	; select bank0
 13070  1AC6  0825               	movf	ReadFlash_2Byte@row,w
 13071  1AC7  3907               	andlw	7
 13072  1AC8  00A8               	movwf	??_ReadFlash_2Byte
 13073  1AC9  3004               	movlw	4
 13074  1ACA                     u7245:	
 13075  1ACA  35A8               	lslf	??_ReadFlash_2Byte,f
 13076  1ACB  3EFF               	addlw	-1
 13077  1ACC  1D03               	skipz
 13078  1ACD  2ACA               	goto	u7245
 13079  1ACE  3528               	lslf	??_ReadFlash_2Byte,w
 13080  1ACF  0727               	addwf	ReadFlash_2Byte@column,w
 13081  1AD0  0023               	movlb	3	; select bank3
 13082  1AD1  0091               	movwf	17	;volatile
 13083                           
 13084                           ;FLASH.c: 36: PMCON1 |= 0b00000001;
 13085  1AD2  1415               	bsf	21,0	;volatile
 13086  1AD3                     l969:	
 13087                           ;FLASH.c: 37: while(PMCON1 & 0b00000001);
 13088                           
 13089  1AD3  1815               	btfsc	21,0	;volatile
 13090  1AD4  2AD3               	goto	l969
 13091                           
 13092                           ;FLASH.c: 38: __nop();
 13093  1AD5  0000               	nop
 13094                           
 13095                           ;FLASH.c: 39: __nop();
 13096  1AD6  0000               	nop
 13097                           
 13098                           ;FLASH.c: 40: return (PMDATL | (PMDATH << 8));
 13099  1AD7  0023               	movlb	3	; select bank3
 13100  1AD8  0814               	movf	20,w	;volatile
 13101  1AD9  0020               	movlb	0	; select bank0
 13102  1ADA  01A6               	clrf	?_ReadFlash_2Byte+1
 13103  1ADB  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13104  1ADC  0023               	movlb	3	; select bank3
 13105  1ADD  0813               	movf	19,w	;volatile
 13106  1ADE  0020               	movlb	0	; select bank0
 13107  1ADF  01A5               	clrf	?_ReadFlash_2Byte
 13108  1AE0  07A5               	addwf	?_ReadFlash_2Byte,f
 13109  1AE1  0008               	return
 13110  1AE2                     __end_of_ReadFlash_2Byte:	
 13111                           
 13112                           	psect	text34
 13113  112D                     __ptext34:	
 13114 ;; *************** function _InitUART *****************
 13115 ;; Defined at:
 13116 ;;		line 52 in file "UART.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;  Baud            4   19[BANK0 ] unsigned long 
 13119 ;;  parity          1   23[BANK0 ] unsigned char 
 13120 ;; Auto vars:     Size  Location     Type
 13121 ;;  temp            4   36[BANK0 ] unsigned long 
 13122 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13123 ;;  config          1   35[BANK0 ] unsigned char 
 13124 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13125 ;; Return value:  Size  Location     Type
 13126 ;;		None               void
 13127 ;; Registers used:
 13128 ;;		wreg, status,2, status,0, pclath, cstack
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13134 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;Total ram usage:       21 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    4
 13141 ;; This function calls:
 13142 ;;		_CloseUSART
 13143 ;;		_OpenUSART
 13144 ;;		_ReadUSART
 13145 ;;		___lldiv
 13146 ;;		_baudUSART
 13147 ;; This function is called by:
 13148 ;;		_Init_System
 13149 ;;		_SetBaud
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function _InitUART
 13155  112D                     _InitUART:	
 13156                           
 13157                           ;UART.c: 54: unsigned long temp;
 13158                           ;UART.c: 55: unsigned char config;
 13159                           ;UART.c: 56: unsigned int spbrg;
 13160                           ;UART.c: 57: unsigned char baudconfig;
 13161                           ;UART.c: 67: LATC |= 0b00000100;
 13162                           
 13163                           ;incstack = 0
 13164                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13165  112D  0022               	movlb	2	; select bank2
 13166  112E  150E               	bsf	14,2	;volatile
 13167                           
 13168                           ;UART.c: 68: PPSLOCK =0;
 13169  112F  003C               	movlb	28	; select bank28
 13170  1130  018F               	clrf	15	;volatile
 13171                           
 13172                           ;UART.c: 69: RC2PPS = 0b00000000;
 13173  1131  003D               	movlb	29	; select bank29
 13174  1132  01A2               	clrf	34	;volatile
 13175                           
 13176                           ;UART.c: 70: PPSLOCK =1;
 13177  1133  3001               	movlw	1
 13178  1134  003C               	movlb	28	; select bank28
 13179  1135  008F               	movwf	15	;volatile
 13180                           
 13181                           ;UART.c: 72: CloseUSART();
 13182  1136  3198  20D2  3191   	fcall	_CloseUSART
 13183                           
 13184                           ;UART.c: 73: config =0;
 13185  1139  0020               	movlb	0	; select bank0
 13186  113A  01C3               	clrf	InitUART@config
 13187                           
 13188                           ;UART.c: 74: baudconfig =0;
 13189  113B  01C2               	clrf	InitUART@baudconfig
 13190                           
 13191                           ;UART.c: 77: config |= 0b01000000;
 13192  113C  1743               	bsf	InitUART@config,6
 13193                           
 13194                           ;UART.c: 79: config |= 0b00001000;
 13195  113D  15C3               	bsf	InitUART@config,3
 13196                           
 13197                           ;UART.c: 80: config |= 0b00010000;
 13198  113E  1643               	bsf	InitUART@config,4
 13199                           
 13200                           ;UART.c: 81: PARITY = parity;
 13201  113F  0837               	movf	InitUART@parity,w
 13202  1140  00B8               	movwf	??_InitUART
 13203  1141  0838               	movf	??_InitUART,w
 13204  1142  00E7               	movwf	_PARITY
 13205                           
 13206                           ;UART.c: 82: BAUD = Baud;
 13207  1143  0836               	movf	InitUART@Baud+3,w
 13208  1144  0024               	movlb	4	; select bank4
 13209  1145  00AD               	movwf	(_BAUD+3)^(0+512)
 13210  1146  0020               	movlb	0	; select bank0
 13211  1147  0835               	movf	InitUART@Baud+2,w
 13212  1148  0024               	movlb	4	; select bank4
 13213  1149  00AC               	movwf	(_BAUD+2)^(0+512)
 13214  114A  0020               	movlb	0	; select bank0
 13215  114B  0834               	movf	InitUART@Baud+1,w
 13216  114C  0024               	movlb	4	; select bank4
 13217  114D  00AB               	movwf	(_BAUD+1)^(0+512)
 13218  114E  0020               	movlb	0	; select bank0
 13219  114F  0833               	movf	InitUART@Baud,w
 13220  1150  0024               	movlb	4	; select bank4
 13221  1151  00AA               	movwf	_BAUD^(0+512)
 13222                           
 13223                           ;UART.c: 83: if(parity)
 13224  1152  0020               	movlb	0	; select bank0
 13225  1153  0837               	movf	InitUART@parity,w
 13226  1154  1903               	btfsc	3,2
 13227  1155  2958               	goto	l5995
 13228                           
 13229                           ;UART.c: 84: {
 13230                           ;UART.c: 85: config |= 0b00000010;
 13231  1156  14C3               	bsf	InitUART@config,1
 13232                           
 13233                           ;UART.c: 86: }
 13234  1157  295C               	goto	l5997
 13235  1158                     l5995:	
 13236                           
 13237                           ;UART.c: 87: else
 13238                           ;UART.c: 88: {
 13239                           ;UART.c: 89: config &= ~0b00000010;
 13240  1158  30FD               	movlw	253
 13241  1159  00B8               	movwf	??_InitUART
 13242  115A  0838               	movf	??_InitUART,w
 13243  115B  05C3               	andwf	InitUART@config,f
 13244  115C                     l5997:	
 13245                           
 13246                           ;UART.c: 90: }
 13247                           ;UART.c: 91: baudconfig |= 0b00001000;
 13248  115C  15C2               	bsf	InitUART@baudconfig,3
 13249                           
 13250                           ;UART.c: 93: temp = (32000000L / Baud) - 1;
 13251  115D  0836               	movf	InitUART@Baud+3,w
 13252  115E  00A8               	movwf	___lldiv@divisor+3
 13253  115F  0835               	movf	InitUART@Baud+2,w
 13254  1160  00A7               	movwf	___lldiv@divisor+2
 13255  1161  0834               	movf	InitUART@Baud+1,w
 13256  1162  00A6               	movwf	___lldiv@divisor+1
 13257  1163  0833               	movf	InitUART@Baud,w
 13258  1164  00A5               	movwf	___lldiv@divisor
 13259  1165  3001               	movlw	1
 13260  1166  00AC               	movwf	___lldiv@dividend+3
 13261  1167  30E8               	movlw	232
 13262  1168  00AB               	movwf	___lldiv@dividend+2
 13263  1169  3048               	movlw	72
 13264  116A  00AA               	movwf	___lldiv@dividend+1
 13265  116B  3000               	movlw	0
 13266  116C  00A9               	movwf	___lldiv@dividend
 13267  116D  319C  24F4  3191   	fcall	___lldiv
 13268  1170  30FF               	movlw	255
 13269  1171  0020               	movlb	0	; select bank0
 13270  1172  0725               	addwf	?___lldiv,w
 13271  1173  00C4               	movwf	InitUART@temp
 13272  1174  30FF               	movlw	255
 13273  1175  3D26               	addwfc	?___lldiv+1,w
 13274  1176  00C5               	movwf	InitUART@temp+1
 13275  1177  30FF               	movlw	255
 13276  1178  3D27               	addwfc	?___lldiv+2,w
 13277  1179  00C6               	movwf	InitUART@temp+2
 13278  117A  30FF               	movlw	255
 13279  117B  3D28               	addwfc	?___lldiv+3,w
 13280  117C  00C7               	movwf	InitUART@temp+3
 13281                           
 13282                           ;UART.c: 94: temp = (temp >> 2) - 1;
 13283  117D  30FF               	movlw	255
 13284  117E  00B8               	movwf	??_InitUART
 13285  117F  30FF               	movlw	255
 13286  1180  00B9               	movwf	??_InitUART+1
 13287  1181  30FF               	movlw	255
 13288  1182  00BA               	movwf	??_InitUART+2
 13289  1183  30FF               	movlw	255
 13290  1184  00BB               	movwf	??_InitUART+3
 13291  1185  0844               	movf	InitUART@temp,w
 13292  1186  00BC               	movwf	??_InitUART+4
 13293  1187  0845               	movf	InitUART@temp+1,w
 13294  1188  00BD               	movwf	??_InitUART+5
 13295  1189  0846               	movf	InitUART@temp+2,w
 13296  118A  00BE               	movwf	??_InitUART+6
 13297  118B  0847               	movf	InitUART@temp+3,w
 13298  118C  00BF               	movwf	??_InitUART+7
 13299  118D  3002               	movlw	2
 13300  118E                     u7665:	
 13301  118E  36BF               	lsrf	??_InitUART+7,f
 13302  118F  0CBE               	rrf	??_InitUART+6,f
 13303  1190  0CBD               	rrf	??_InitUART+5,f
 13304  1191  0CBC               	rrf	??_InitUART+4,f
 13305  1192  0B89               	decfsz	9,f
 13306  1193  298E               	goto	u7665
 13307  1194  083C               	movf	??_InitUART+4,w
 13308  1195  07B8               	addwf	??_InitUART,f
 13309  1196  083D               	movf	??_InitUART+5,w
 13310  1197  3DB9               	addwfc	??_InitUART+1,f
 13311  1198  083E               	movf	??_InitUART+6,w
 13312  1199  3DBA               	addwfc	??_InitUART+2,f
 13313  119A  083F               	movf	??_InitUART+7,w
 13314  119B  3DBB               	addwfc	??_InitUART+3,f
 13315  119C  083B               	movf	??_InitUART+3,w
 13316  119D  00C7               	movwf	InitUART@temp+3
 13317  119E  083A               	movf	??_InitUART+2,w
 13318  119F  00C6               	movwf	InitUART@temp+2
 13319  11A0  0839               	movf	??_InitUART+1,w
 13320  11A1  00C5               	movwf	InitUART@temp+1
 13321  11A2  0838               	movf	??_InitUART,w
 13322  11A3  00C4               	movwf	InitUART@temp
 13323                           
 13324                           ;UART.c: 95: spbrg = (unsigned int)temp;
 13325  11A4  0845               	movf	InitUART@temp+1,w
 13326  11A5  01C1               	clrf	InitUART@spbrg+1
 13327  11A6  07C1               	addwf	InitUART@spbrg+1,f
 13328  11A7  0844               	movf	InitUART@temp,w
 13329  11A8  01C0               	clrf	InitUART@spbrg
 13330  11A9  07C0               	addwf	InitUART@spbrg,f
 13331                           
 13332                           ;UART.c: 97: RCSTAbits.CREN = 0;
 13333  11AA  0023               	movlb	3	; select bank3
 13334  11AB  121D               	bcf	29,4	;volatile
 13335                           
 13336                           ;UART.c: 98: OpenUSART(config, spbrg);
 13337  11AC  0020               	movlb	0	; select bank0
 13338  11AD  0841               	movf	InitUART@spbrg+1,w
 13339  11AE  01A6               	clrf	OpenUSART@spbrg+1
 13340  11AF  07A6               	addwf	OpenUSART@spbrg+1,f
 13341  11B0  0840               	movf	InitUART@spbrg,w
 13342  11B1  01A5               	clrf	OpenUSART@spbrg
 13343  11B2  07A5               	addwf	OpenUSART@spbrg,f
 13344  11B3  0843               	movf	InitUART@config,w
 13345  11B4  319B  234A  3191   	fcall	_OpenUSART
 13346                           
 13347                           ;UART.c: 99: baudUSART(baudconfig);
 13348  11B7  0020               	movlb	0	; select bank0
 13349  11B8  0842               	movf	InitUART@baudconfig,w
 13350  11B9  318D  254B  3191   	fcall	_baudUSART
 13351                           
 13352                           ;UART.c: 100: temp = ReadUSART();
 13353  11BC  3198  20BA  3191   	fcall	_ReadUSART
 13354  11BF  0020               	movlb	0	; select bank0
 13355  11C0  00B8               	movwf	??_InitUART
 13356  11C1  01B9               	clrf	??_InitUART+1
 13357  11C2  01BA               	clrf	??_InitUART+2
 13358  11C3  01BB               	clrf	??_InitUART+3
 13359  11C4  083B               	movf	??_InitUART+3,w
 13360  11C5  00C7               	movwf	InitUART@temp+3
 13361  11C6  083A               	movf	??_InitUART+2,w
 13362  11C7  00C6               	movwf	InitUART@temp+2
 13363  11C8  0839               	movf	??_InitUART+1,w
 13364  11C9  00C5               	movwf	InitUART@temp+1
 13365  11CA  0838               	movf	??_InitUART,w
 13366  11CB  00C4               	movwf	InitUART@temp
 13367                           
 13368                           ;UART.c: 101: temp = ReadUSART();
 13369  11CC  3198  20BA  3191   	fcall	_ReadUSART
 13370  11CF  0020               	movlb	0	; select bank0
 13371  11D0  00B8               	movwf	??_InitUART
 13372  11D1  01B9               	clrf	??_InitUART+1
 13373  11D2  01BA               	clrf	??_InitUART+2
 13374  11D3  01BB               	clrf	??_InitUART+3
 13375  11D4  083B               	movf	??_InitUART+3,w
 13376  11D5  00C7               	movwf	InitUART@temp+3
 13377  11D6  083A               	movf	??_InitUART+2,w
 13378  11D7  00C6               	movwf	InitUART@temp+2
 13379  11D8  0839               	movf	??_InitUART+1,w
 13380  11D9  00C5               	movwf	InitUART@temp+1
 13381  11DA  0838               	movf	??_InitUART,w
 13382  11DB  00C4               	movwf	InitUART@temp
 13383                           
 13384                           ;UART.c: 102: temp = ReadUSART();
 13385  11DC  3198  20BA  3191   	fcall	_ReadUSART
 13386  11DF  0020               	movlb	0	; select bank0
 13387  11E0  00B8               	movwf	??_InitUART
 13388  11E1  01B9               	clrf	??_InitUART+1
 13389  11E2  01BA               	clrf	??_InitUART+2
 13390  11E3  01BB               	clrf	??_InitUART+3
 13391  11E4  083B               	movf	??_InitUART+3,w
 13392  11E5  00C7               	movwf	InitUART@temp+3
 13393  11E6  083A               	movf	??_InitUART+2,w
 13394  11E7  00C6               	movwf	InitUART@temp+2
 13395  11E8  0839               	movf	??_InitUART+1,w
 13396  11E9  00C5               	movwf	InitUART@temp+1
 13397  11EA  0838               	movf	??_InitUART,w
 13398  11EB  00C4               	movwf	InitUART@temp
 13399                           
 13400                           ;UART.c: 103: temp = ReadUSART();
 13401  11EC  3198  20BA  3191   	fcall	_ReadUSART
 13402  11EF  0020               	movlb	0	; select bank0
 13403  11F0  00B8               	movwf	??_InitUART
 13404  11F1  01B9               	clrf	??_InitUART+1
 13405  11F2  01BA               	clrf	??_InitUART+2
 13406  11F3  01BB               	clrf	??_InitUART+3
 13407  11F4  083B               	movf	??_InitUART+3,w
 13408  11F5  00C7               	movwf	InitUART@temp+3
 13409  11F6  083A               	movf	??_InitUART+2,w
 13410  11F7  00C6               	movwf	InitUART@temp+2
 13411  11F8  0839               	movf	??_InitUART+1,w
 13412  11F9  00C5               	movwf	InitUART@temp+1
 13413  11FA  0838               	movf	??_InitUART,w
 13414  11FB  00C4               	movwf	InitUART@temp
 13415                           
 13416                           ;UART.c: 104: temp = ReadUSART();
 13417  11FC  3198  20BA         	fcall	_ReadUSART
 13418  11FE  0020               	movlb	0	; select bank0
 13419  11FF  00B8               	movwf	??_InitUART
 13420  1200  01B9               	clrf	??_InitUART+1
 13421  1201  01BA               	clrf	??_InitUART+2
 13422  1202  01BB               	clrf	??_InitUART+3
 13423  1203  083B               	movf	??_InitUART+3,w
 13424  1204  00C7               	movwf	InitUART@temp+3
 13425  1205  083A               	movf	??_InitUART+2,w
 13426  1206  00C6               	movwf	InitUART@temp+2
 13427  1207  0839               	movf	??_InitUART+1,w
 13428  1208  00C5               	movwf	InitUART@temp+1
 13429  1209  0838               	movf	??_InitUART,w
 13430  120A  00C4               	movwf	InitUART@temp
 13431                           
 13432                           ;UART.c: 106: PPSLOCK =0;
 13433  120B  003C               	movlb	28	; select bank28
 13434  120C  018F               	clrf	15	;volatile
 13435                           
 13436                           ;UART.c: 107: RC2PPS = 0b00010100;
 13437  120D  3014               	movlw	20
 13438  120E  003D               	movlb	29	; select bank29
 13439  120F  00A2               	movwf	34	;volatile
 13440                           
 13441                           ;UART.c: 108: CKPPS = 0b00010010;
 13442  1210  3012               	movlw	18
 13443  1211  003C               	movlb	28	; select bank28
 13444  1212  00A5               	movwf	37	;volatile
 13445                           
 13446                           ;UART.c: 109: RXPPS = 0b00010101;
 13447  1213  3015               	movlw	21
 13448  1214  00A4               	movwf	36	;volatile
 13449                           
 13450                           ;UART.c: 110: PPSLOCK =1;
 13451  1215  3001               	movlw	1
 13452  1216  008F               	movwf	15	;volatile
 13453                           
 13454                           ;UART.c: 112: PIR1bits.RCIF = 0;
 13455  1217  0020               	movlb	0	; select bank0
 13456  1218  1291               	bcf	17,5	;volatile
 13457                           
 13458                           ;UART.c: 113: INTCONbits.PEIE = 1;
 13459  1219  170B               	bsf	11,6	;volatile
 13460  121A  0008               	return
 13461  121B                     __end_of_InitUART:	
 13462                           
 13463                           	psect	text35
 13464  0D4B                     __ptext35:	
 13465 ;; *************** function _baudUSART *****************
 13466 ;; Defined at:
 13467 ;;		line 116 in file "UART.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;  baudconfig      1    wreg     unsigned char 
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13472 ;; Return value:  Size  Location     Type
 13473 ;;		None               void
 13474 ;; Registers used:
 13475 ;;		wreg, status,2
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;Total ram usage:        1 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:    3
 13488 ;; This function calls:
 13489 ;;		Nothing
 13490 ;; This function is called by:
 13491 ;;		_InitUART
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           
 13496                           ;psect for function _baudUSART
 13497  0D4B                     _baudUSART:	
 13498                           
 13499                           ;incstack = 0
 13500                           ; Regs used in _baudUSART: [wreg+status,2]
 13501                           ;baudUSART@baudconfig stored from wreg
 13502  0D4B  0020               	movlb	0	; select bank0
 13503  0D4C  00A5               	movwf	baudUSART@baudconfig
 13504                           
 13505                           ;UART.c: 118: BAUD1CON =0;
 13506  0D4D  0023               	movlb	3	; select bank3
 13507  0D4E  019F               	clrf	31	;volatile
 13508                           
 13509                           ;UART.c: 119: BAUD1CON = baudconfig;
 13510  0D4F  0020               	movlb	0	; select bank0
 13511  0D50  0825               	movf	baudUSART@baudconfig,w
 13512  0D51  0023               	movlb	3	; select bank3
 13513  0D52  009F               	movwf	31	;volatile
 13514  0D53  0008               	return
 13515  0D54                     __end_of_baudUSART:	
 13516                           
 13517                           	psect	text36
 13518  1CF4                     __ptext36:	
 13519 ;; *************** function ___lldiv *****************
 13520 ;; Defined at:
 13521 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  divisor         4    5[BANK0 ] unsigned long 
 13524 ;;  dividend        4    9[BANK0 ] unsigned long 
 13525 ;; Auto vars:     Size  Location     Type
 13526 ;;  quotient        4   14[BANK0 ] unsigned long 
 13527 ;;  counter         1   18[BANK0 ] unsigned char 
 13528 ;; Return value:  Size  Location     Type
 13529 ;;                  4    5[BANK0 ] unsigned long 
 13530 ;; Registers used:
 13531 ;;		wreg, status,2, status,0
 13532 ;; Tracked objects:
 13533 ;;		On entry : 0/0
 13534 ;;		On exit  : 0/0
 13535 ;;		Unchanged: 0/0
 13536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13537 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;Total ram usage:       14 bytes
 13542 ;; Hardware stack levels used:    1
 13543 ;; Hardware stack levels required when called:    3
 13544 ;; This function calls:
 13545 ;;		Nothing
 13546 ;; This function is called by:
 13547 ;;		_InitUART
 13548 ;;		_sprintf
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552                           
 13553                           ;psect for function ___lldiv
 13554  1CF4                     ___lldiv:	
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13558  1CF4  3000               	movlw	0
 13559  1CF5  0020               	movlb	0	; select bank0
 13560  1CF6  00B1               	movwf	___lldiv@quotient+3
 13561  1CF7  3000               	movlw	0
 13562  1CF8  00B0               	movwf	___lldiv@quotient+2
 13563  1CF9  3000               	movlw	0
 13564  1CFA  00AF               	movwf	___lldiv@quotient+1
 13565  1CFB  3000               	movlw	0
 13566  1CFC  00AE               	movwf	___lldiv@quotient
 13567  1CFD  0828               	movf	___lldiv@divisor+3,w
 13568  1CFE  0427               	iorwf	___lldiv@divisor+2,w
 13569  1CFF  0426               	iorwf	___lldiv@divisor+1,w
 13570  1D00  0425               	iorwf	___lldiv@divisor,w
 13571  1D01  1903               	skipnz
 13572  1D02  2D3E               	goto	l5893
 13573  1D03  01B2               	clrf	___lldiv@counter
 13574  1D04  0AB2               	incf	___lldiv@counter,f
 13575  1D05                     l5879:	
 13576  1D05  1BA8               	btfsc	___lldiv@divisor+3,7
 13577  1D06  2D13               	goto	l5881
 13578  1D07  3001               	movlw	1
 13579  1D08                     u7445:	
 13580  1D08  35A5               	lslf	___lldiv@divisor,f
 13581  1D09  0DA6               	rlf	___lldiv@divisor+1,f
 13582  1D0A  0DA7               	rlf	___lldiv@divisor+2,f
 13583  1D0B  0DA8               	rlf	___lldiv@divisor+3,f
 13584  1D0C  0B89               	decfsz	9,f
 13585  1D0D  2D08               	goto	u7445
 13586  1D0E  3001               	movlw	1
 13587  1D0F  00AD               	movwf	??___lldiv
 13588  1D10  082D               	movf	??___lldiv,w
 13589  1D11  07B2               	addwf	___lldiv@counter,f
 13590  1D12  2D05               	goto	l5879
 13591  1D13                     l5881:	
 13592  1D13  3001               	movlw	1
 13593  1D14                     u7465:	
 13594  1D14  35AE               	lslf	___lldiv@quotient,f
 13595  1D15  0DAF               	rlf	___lldiv@quotient+1,f
 13596  1D16  0DB0               	rlf	___lldiv@quotient+2,f
 13597  1D17  0DB1               	rlf	___lldiv@quotient+3,f
 13598  1D18  0B89               	decfsz	9,f
 13599  1D19  2D14               	goto	u7465
 13600  1D1A  0828               	movf	___lldiv@divisor+3,w
 13601  1D1B  022C               	subwf	___lldiv@dividend+3,w
 13602  1D1C  1D03               	skipz
 13603  1D1D  2D28               	goto	u7475
 13604  1D1E  0827               	movf	___lldiv@divisor+2,w
 13605  1D1F  022B               	subwf	___lldiv@dividend+2,w
 13606  1D20  1D03               	skipz
 13607  1D21  2D28               	goto	u7475
 13608  1D22  0826               	movf	___lldiv@divisor+1,w
 13609  1D23  022A               	subwf	___lldiv@dividend+1,w
 13610  1D24  1D03               	skipz
 13611  1D25  2D28               	goto	u7475
 13612  1D26  0825               	movf	___lldiv@divisor,w
 13613  1D27  0229               	subwf	___lldiv@dividend,w
 13614  1D28                     u7475:	
 13615  1D28  1C03               	skipc
 13616  1D29  2D33               	goto	l5889
 13617  1D2A  0825               	movf	___lldiv@divisor,w
 13618  1D2B  02A9               	subwf	___lldiv@dividend,f
 13619  1D2C  0826               	movf	___lldiv@divisor+1,w
 13620  1D2D  3BAA               	subwfb	___lldiv@dividend+1,f
 13621  1D2E  0827               	movf	___lldiv@divisor+2,w
 13622  1D2F  3BAB               	subwfb	___lldiv@dividend+2,f
 13623  1D30  0828               	movf	___lldiv@divisor+3,w
 13624  1D31  3BAC               	subwfb	___lldiv@dividend+3,f
 13625  1D32  142E               	bsf	___lldiv@quotient,0
 13626  1D33                     l5889:	
 13627  1D33  3001               	movlw	1
 13628  1D34                     u7485:	
 13629  1D34  36A8               	lsrf	___lldiv@divisor+3,f
 13630  1D35  0CA7               	rrf	___lldiv@divisor+2,f
 13631  1D36  0CA6               	rrf	___lldiv@divisor+1,f
 13632  1D37  0CA5               	rrf	___lldiv@divisor,f
 13633  1D38  0B89               	decfsz	9,f
 13634  1D39  2D34               	goto	u7485
 13635  1D3A  3001               	movlw	1
 13636  1D3B  02B2               	subwf	___lldiv@counter,f
 13637  1D3C  1D03               	btfss	3,2
 13638  1D3D  2D13               	goto	l5881
 13639  1D3E                     l5893:	
 13640  1D3E  0831               	movf	___lldiv@quotient+3,w
 13641  1D3F  00A8               	movwf	?___lldiv+3
 13642  1D40  0830               	movf	___lldiv@quotient+2,w
 13643  1D41  00A7               	movwf	?___lldiv+2
 13644  1D42  082F               	movf	___lldiv@quotient+1,w
 13645  1D43  00A6               	movwf	?___lldiv+1
 13646  1D44  082E               	movf	___lldiv@quotient,w
 13647  1D45  00A5               	movwf	?___lldiv
 13648  1D46  0008               	return
 13649  1D47                     __end_of___lldiv:	
 13650                           
 13651                           	psect	text37
 13652  18BA                     __ptext37:	
 13653 ;; *************** function _ReadUSART *****************
 13654 ;; Defined at:
 13655 ;;		line 234 in file "UART.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;		None
 13658 ;; Auto vars:     Size  Location     Type
 13659 ;;  data            1    6[BANK0 ] unsigned char 
 13660 ;; Return value:  Size  Location     Type
 13661 ;;                  1    wreg      unsigned char 
 13662 ;; Registers used:
 13663 ;;		wreg
 13664 ;; Tracked objects:
 13665 ;;		On entry : 0/0
 13666 ;;		On exit  : 0/0
 13667 ;;		Unchanged: 0/0
 13668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;Total ram usage:        2 bytes
 13674 ;; Hardware stack levels used:    1
 13675 ;; Hardware stack levels required when called:    3
 13676 ;; This function calls:
 13677 ;;		Nothing
 13678 ;; This function is called by:
 13679 ;;		_InitUART
 13680 ;; This function uses a non-reentrant model
 13681 ;;
 13682                           
 13683                           
 13684                           ;psect for function _ReadUSART
 13685  18BA                     _ReadUSART:	
 13686                           
 13687                           ;UART.c: 236: char data;
 13688                           ;UART.c: 238: if(RCSTAbits.FERR)
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _ReadUSART: [wreg]
 13692  18BA  0023               	movlb	3	; select bank3
 13693  18BB  191D               	btfsc	29,2	;volatile
 13694                           
 13695                           ;UART.c: 240: if(RCSTAbits.OERR)
 13696  18BC  1C9D               	btfss	29,1	;volatile
 13697  18BD  28BF               	goto	l5729
 13698                           
 13699                           ;UART.c: 241: RCSTAbits.CREN = 0;
 13700  18BE  121D               	bcf	29,4	;volatile
 13701  18BF                     l5729:	
 13702                           
 13703                           ;UART.c: 243: data = RCREG;
 13704  18BF  0819               	movf	25,w	;volatile
 13705  18C0  0020               	movlb	0	; select bank0
 13706  18C1  00A5               	movwf	??_ReadUSART
 13707  18C2  0825               	movf	??_ReadUSART,w
 13708  18C3  00A6               	movwf	ReadUSART@data
 13709                           
 13710                           ;UART.c: 245: return (data);
 13711  18C4  0826               	movf	ReadUSART@data,w
 13712  18C5  0008               	return
 13713  18C6                     __end_of_ReadUSART:	
 13714                           
 13715                           	psect	text38
 13716  1B4A                     __ptext38:	
 13717 ;; *************** function _OpenUSART *****************
 13718 ;; Defined at:
 13719 ;;		line 122 in file "UART.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  config          1    wreg     unsigned char 
 13722 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  config          1    7[BANK0 ] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg, status,2
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        3 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    3
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		_InitUART
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function _OpenUSART
 13750  1B4A                     _OpenUSART:	
 13751                           
 13752                           ;incstack = 0
 13753                           ; Regs used in _OpenUSART: [wreg+status,2]
 13754                           ;OpenUSART@config stored from wreg
 13755  1B4A  0020               	movlb	0	; select bank0
 13756  1B4B  00A7               	movwf	OpenUSART@config
 13757                           
 13758                           ;UART.c: 124: TX1STA = 0;
 13759  1B4C  0023               	movlb	3	; select bank3
 13760  1B4D  019E               	clrf	30	;volatile
 13761                           
 13762                           ;UART.c: 125: RC1STA = 0;
 13763  1B4E  019D               	clrf	29	;volatile
 13764                           
 13765                           ;UART.c: 127: if(config&0x01)
 13766  1B4F  0020               	movlb	0	; select bank0
 13767  1B50  1C27               	btfss	OpenUSART@config,0
 13768  1B51  2B54               	goto	l5761
 13769                           
 13770                           ;UART.c: 128: {
 13771                           ;UART.c: 129: TX1STAbits.SYNC = 1;
 13772  1B52  0023               	movlb	3	; select bank3
 13773  1B53  161E               	bsf	30,4	;volatile
 13774  1B54                     l5761:	
 13775                           
 13776                           ;UART.c: 130: }
 13777                           ;UART.c: 132: if(config&0x02)
 13778  1B54  0020               	movlb	0	; select bank0
 13779  1B55  1CA7               	btfss	OpenUSART@config,1
 13780  1B56  2B5A               	goto	l5765
 13781                           
 13782                           ;UART.c: 133: {
 13783                           ;UART.c: 134: TX1STAbits.TX9 = 1;
 13784  1B57  0023               	movlb	3	; select bank3
 13785  1B58  171E               	bsf	30,6	;volatile
 13786                           
 13787                           ;UART.c: 135: RC1STAbits.RX9 = 1;
 13788  1B59  171D               	bsf	29,6	;volatile
 13789  1B5A                     l5765:	
 13790                           
 13791                           ;UART.c: 136: }
 13792                           ;UART.c: 138: if(config&0x04)
 13793  1B5A  0020               	movlb	0	; select bank0
 13794  1B5B  1D27               	btfss	OpenUSART@config,2
 13795  1B5C  2B5F               	goto	l5769
 13796                           
 13797                           ;UART.c: 139: {
 13798                           ;UART.c: 140: TX1STAbits.CSRC = 1;
 13799  1B5D  0023               	movlb	3	; select bank3
 13800  1B5E  179E               	bsf	30,7	;volatile
 13801  1B5F                     l5769:	
 13802                           
 13803                           ;UART.c: 141: }
 13804                           ;UART.c: 143: if(config&0x08)
 13805  1B5F  0020               	movlb	0	; select bank0
 13806  1B60  1DA7               	btfss	OpenUSART@config,3
 13807  1B61  2B65               	goto	l474
 13808                           
 13809                           ;UART.c: 144: {
 13810                           ;UART.c: 145: RC1STAbits.CREN = 1;
 13811  1B62  0023               	movlb	3	; select bank3
 13812  1B63  161D               	bsf	29,4	;volatile
 13813                           
 13814                           ;UART.c: 146: }
 13815  1B64  2B67               	goto	l5773
 13816  1B65                     l474:	
 13817                           
 13818                           ;UART.c: 147: else
 13819                           ;UART.c: 148: {
 13820                           ;UART.c: 149: RC1STAbits.SREN = 1;
 13821  1B65  0023               	movlb	3	; select bank3
 13822  1B66  169D               	bsf	29,5	;volatile
 13823  1B67                     l5773:	
 13824                           
 13825                           ;UART.c: 150: }
 13826                           ;UART.c: 152: if(config&0x10)
 13827  1B67  0020               	movlb	0	; select bank0
 13828  1B68  1E27               	btfss	OpenUSART@config,4
 13829  1B69  2B6C               	goto	l5779
 13830                           
 13831                           ;UART.c: 153: {
 13832                           ;UART.c: 154: TX1STAbits.BRGH = 1;
 13833  1B6A  0023               	movlb	3	; select bank3
 13834  1B6B  151E               	bsf	30,2	;volatile
 13835  1B6C                     l5779:	
 13836                           ;UART.c: 158: {
 13837                           
 13838                           
 13839                           ;UART.c: 160: }
 13840                           ;UART.c: 162: if(config&0x40)
 13841  1B6C  0020               	movlb	0	; select bank0
 13842  1B6D  1F27               	btfss	OpenUSART@config,6
 13843  1B6E  2B73               	goto	l478
 13844                           
 13845                           ;UART.c: 163: {
 13846                           ;UART.c: 164: PIR1bits.RCIF = 0;
 13847  1B6F  1291               	bcf	17,5	;volatile
 13848                           
 13849                           ;UART.c: 165: PIE1bits.RCIE = 1;
 13850  1B70  0021               	movlb	1	; select bank1
 13851  1B71  1691               	bsf	17,5	;volatile
 13852                           
 13853                           ;UART.c: 166: }
 13854  1B72  2B75               	goto	l5783
 13855  1B73                     l478:	
 13856                           
 13857                           ;UART.c: 167: else
 13858                           ;UART.c: 168: {
 13859                           ;UART.c: 169: PIE1bits.RCIE = 0;
 13860  1B73  0021               	movlb	1	; select bank1
 13861  1B74  1291               	bcf	17,5	;volatile
 13862  1B75                     l5783:	
 13863                           
 13864                           ;UART.c: 170: }
 13865                           ;UART.c: 172: if(config&0x80)
 13866  1B75  0020               	movlb	0	; select bank0
 13867  1B76  1FA7               	btfss	OpenUSART@config,7
 13868  1B77  2B7C               	goto	l480
 13869                           
 13870                           ;UART.c: 173: {
 13871                           ;UART.c: 174: PIR1bits.TXIF = 0;
 13872  1B78  1211               	bcf	17,4	;volatile
 13873                           
 13874                           ;UART.c: 175: PIE1bits.TXIE = 1;
 13875  1B79  0021               	movlb	1	; select bank1
 13876  1B7A  1611               	bsf	17,4	;volatile
 13877                           
 13878                           ;UART.c: 176: }
 13879  1B7B  2B7E               	goto	l5787
 13880  1B7C                     l480:	
 13881                           
 13882                           ;UART.c: 177: else
 13883                           ;UART.c: 178: {
 13884                           ;UART.c: 179: PIE1bits.TXIE = 0;
 13885  1B7C  0021               	movlb	1	; select bank1
 13886  1B7D  1211               	bcf	17,4	;volatile
 13887  1B7E                     l5787:	
 13888                           
 13889                           ;UART.c: 180: }
 13890                           ;UART.c: 182: SPBRG = spbrg;
 13891  1B7E  0020               	movlb	0	; select bank0
 13892  1B7F  0825               	movf	OpenUSART@spbrg,w
 13893  1B80  0023               	movlb	3	; select bank3
 13894  1B81  009B               	movwf	27	;volatile
 13895                           
 13896                           ;UART.c: 183: SPBRGH = spbrg >> 8;
 13897  1B82  0020               	movlb	0	; select bank0
 13898  1B83  0826               	movf	OpenUSART@spbrg+1,w
 13899  1B84  0023               	movlb	3	; select bank3
 13900  1B85  009C               	movwf	28	;volatile
 13901                           
 13902                           ;UART.c: 185: TX1STAbits.TXEN = 1;
 13903  1B86  169E               	bsf	30,5	;volatile
 13904                           
 13905                           ;UART.c: 186: RC1STAbits.SPEN = 1;
 13906  1B87  179D               	bsf	29,7	;volatile
 13907  1B88  0008               	return
 13908  1B89                     __end_of_OpenUSART:	
 13909                           
 13910                           	psect	text39
 13911  18D2                     __ptext39:	
 13912 ;; *************** function _CloseUSART *****************
 13913 ;; Defined at:
 13914 ;;		line 45 in file "UART.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;		None
 13917 ;; Auto vars:     Size  Location     Type
 13918 ;;		None
 13919 ;; Return value:  Size  Location     Type
 13920 ;;		None               void
 13921 ;; Registers used:
 13922 ;;		wreg, status,2, status,0
 13923 ;; Tracked objects:
 13924 ;;		On entry : 0/0
 13925 ;;		On exit  : 0/0
 13926 ;;		Unchanged: 0/0
 13927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;Total ram usage:        1 bytes
 13933 ;; Hardware stack levels used:    1
 13934 ;; Hardware stack levels required when called:    3
 13935 ;; This function calls:
 13936 ;;		Nothing
 13937 ;; This function is called by:
 13938 ;;		_InitUART
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           
 13943                           ;psect for function _CloseUSART
 13944  18D2                     _CloseUSART:	
 13945                           
 13946                           ;UART.c: 47: RCSTA&=0b01001111;
 13947                           
 13948                           ;incstack = 0
 13949                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13950  18D2  304F               	movlw	79
 13951  18D3  0020               	movlb	0	; select bank0
 13952  18D4  00A5               	movwf	??_CloseUSART
 13953  18D5  0825               	movf	??_CloseUSART,w
 13954  18D6  0023               	movlb	3	; select bank3
 13955  18D7  059D               	andwf	29,f	;volatile
 13956                           
 13957                           ;UART.c: 48: TX1STAbits.TXEN=0;
 13958  18D8  129E               	bcf	30,5	;volatile
 13959                           
 13960                           ;UART.c: 49: PIE1&=0b11001111;
 13961  18D9  30CF               	movlw	207
 13962  18DA  0020               	movlb	0	; select bank0
 13963  18DB  00A5               	movwf	??_CloseUSART
 13964  18DC  0825               	movf	??_CloseUSART,w
 13965  18DD  0021               	movlb	1	; select bank1
 13966  18DE  0591               	andwf	17,f	;volatile
 13967  18DF  0008               	return
 13968  18E0                     __end_of_CloseUSART:	
 13969                           
 13970                           	psect	text40
 13971  130D                     __ptext40:	
 13972 ;; *************** function _Init_PS_2_Send *****************
 13973 ;; Defined at:
 13974 ;;		line 925 in file "PS_2.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;		None
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;		None
 13979 ;; Return value:  Size  Location     Type
 13980 ;;                  1    wreg      unsigned char 
 13981 ;; Registers used:
 13982 ;;		wreg, status,2, status,0, pclath, cstack
 13983 ;; Tracked objects:
 13984 ;;		On entry : 0/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;Total ram usage:        0 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    5
 13995 ;; This function calls:
 13996 ;;		_PS_2_DISABLE_INTERRUPT
 13997 ;;		_PS_2_ENABLE_INTERRUPT
 13998 ;;		_Send_PS2
 13999 ;;		_delayUS
 14000 ;; This function is called by:
 14001 ;;		_main
 14002 ;; This function uses a non-reentrant model
 14003 ;;
 14004                           
 14005                           
 14006                           ;psect for function _Init_PS_2_Send
 14007  130D                     _Init_PS_2_Send:	
 14008                           
 14009                           ;PS_2.c: 927: PS_2_DISABLE_INTERRUPT(0b00100000);
 14010                           
 14011                           ;incstack = 0
 14012                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 14013  130D  3020               	movlw	32
 14014  130E  3199  21AC  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 14015                           
 14016                           ;PS_2.c: 930: if(Send_PS2(0xED))
 14017  1311  30ED               	movlw	237
 14018  1312  3196  2661  3193   	fcall	_Send_PS2
 14019  1315  3A00               	xorlw	0
 14020  1316  1903               	skipnz
 14021  1317  2B1A               	goto	l7165
 14022                           
 14023                           ;PS_2.c: 931: {
 14024                           ;PS_2.c: 932: return 0;
 14025  1318  3000               	movlw	0
 14026  1319  0008               	return
 14027  131A                     l7165:	
 14028                           
 14029                           ;PS_2.c: 933: }
 14030                           ;PS_2.c: 934: delayUS(100);
 14031  131A  3000               	movlw	0
 14032  131B  0020               	movlb	0	; select bank0
 14033  131C  00A8               	movwf	delayUS@US+3
 14034  131D  3000               	movlw	0
 14035  131E  00A7               	movwf	delayUS@US+2
 14036  131F  3000               	movlw	0
 14037  1320  00A6               	movwf	delayUS@US+1
 14038  1321  3064               	movlw	100
 14039  1322  00A5               	movwf	delayUS@US
 14040  1323  319B  2315  3193   	fcall	_delayUS
 14041                           
 14042                           ;PS_2.c: 935: if(Send_PS2(0x01))
 14043  1326  3001               	movlw	1
 14044  1327  3196  2661  3193   	fcall	_Send_PS2
 14045  132A  3A00               	xorlw	0
 14046  132B  1903               	skipnz
 14047  132C  2B2F               	goto	l7171
 14048                           
 14049                           ;PS_2.c: 936: {
 14050                           ;PS_2.c: 937: return 0;
 14051  132D  3000               	movlw	0
 14052  132E  0008               	return
 14053  132F                     l7171:	
 14054                           
 14055                           ;PS_2.c: 938: }
 14056                           ;PS_2.c: 939: delayUS(5000);
 14057  132F  3000               	movlw	0
 14058  1330  0020               	movlb	0	; select bank0
 14059  1331  00A8               	movwf	delayUS@US+3
 14060  1332  3000               	movlw	0
 14061  1333  00A7               	movwf	delayUS@US+2
 14062  1334  3013               	movlw	19
 14063  1335  00A6               	movwf	delayUS@US+1
 14064  1336  3088               	movlw	136
 14065  1337  00A5               	movwf	delayUS@US
 14066  1338  319B  2315  3193   	fcall	_delayUS
 14067                           
 14068                           ;PS_2.c: 942: if(Send_PS2(0xED))
 14069  133B  30ED               	movlw	237
 14070  133C  3196  2661  3193   	fcall	_Send_PS2
 14071  133F  3A00               	xorlw	0
 14072  1340  1903               	skipnz
 14073  1341  2B44               	goto	l7177
 14074                           
 14075                           ;PS_2.c: 943: {
 14076                           ;PS_2.c: 944: return 0;
 14077  1342  3000               	movlw	0
 14078  1343  0008               	return
 14079  1344                     l7177:	
 14080                           
 14081                           ;PS_2.c: 945: }
 14082                           ;PS_2.c: 946: delayUS(100);
 14083  1344  3000               	movlw	0
 14084  1345  0020               	movlb	0	; select bank0
 14085  1346  00A8               	movwf	delayUS@US+3
 14086  1347  3000               	movlw	0
 14087  1348  00A7               	movwf	delayUS@US+2
 14088  1349  3000               	movlw	0
 14089  134A  00A6               	movwf	delayUS@US+1
 14090  134B  3064               	movlw	100
 14091  134C  00A5               	movwf	delayUS@US
 14092  134D  319B  2315  3193   	fcall	_delayUS
 14093                           
 14094                           ;PS_2.c: 947: if(Send_PS2(0x04))
 14095  1350  3004               	movlw	4
 14096  1351  3196  2661  3193   	fcall	_Send_PS2
 14097  1354  3A00               	xorlw	0
 14098  1355  1903               	skipnz
 14099  1356  2B59               	goto	l7183
 14100                           
 14101                           ;PS_2.c: 948: {
 14102                           ;PS_2.c: 949: return 0;
 14103  1357  3000               	movlw	0
 14104  1358  0008               	return
 14105  1359                     l7183:	
 14106                           
 14107                           ;PS_2.c: 950: }
 14108                           ;PS_2.c: 951: delayUS(5000);
 14109  1359  3000               	movlw	0
 14110  135A  0020               	movlb	0	; select bank0
 14111  135B  00A8               	movwf	delayUS@US+3
 14112  135C  3000               	movlw	0
 14113  135D  00A7               	movwf	delayUS@US+2
 14114  135E  3013               	movlw	19
 14115  135F  00A6               	movwf	delayUS@US+1
 14116  1360  3088               	movlw	136
 14117  1361  00A5               	movwf	delayUS@US
 14118  1362  319B  2315  3193   	fcall	_delayUS
 14119                           
 14120                           ;PS_2.c: 954: if(Send_PS2(0xED))
 14121  1365  30ED               	movlw	237
 14122  1366  3196  2661  3193   	fcall	_Send_PS2
 14123  1369  3A00               	xorlw	0
 14124  136A  1903               	skipnz
 14125  136B  2B6E               	goto	l7189
 14126                           
 14127                           ;PS_2.c: 955: {
 14128                           ;PS_2.c: 956: return 0;
 14129  136C  3000               	movlw	0
 14130  136D  0008               	return
 14131  136E                     l7189:	
 14132                           
 14133                           ;PS_2.c: 957: }
 14134                           ;PS_2.c: 958: delayUS(1000);
 14135  136E  3000               	movlw	0
 14136  136F  0020               	movlb	0	; select bank0
 14137  1370  00A8               	movwf	delayUS@US+3
 14138  1371  3000               	movlw	0
 14139  1372  00A7               	movwf	delayUS@US+2
 14140  1373  3003               	movlw	3
 14141  1374  00A6               	movwf	delayUS@US+1
 14142  1375  30E8               	movlw	232
 14143  1376  00A5               	movwf	delayUS@US
 14144  1377  319B  2315  3193   	fcall	_delayUS
 14145                           
 14146                           ;PS_2.c: 959: if(Send_PS2(0x02))
 14147  137A  3002               	movlw	2
 14148  137B  3196  2661  3193   	fcall	_Send_PS2
 14149  137E  3A00               	xorlw	0
 14150  137F  1903               	skipnz
 14151  1380  2B83               	goto	l7195
 14152                           
 14153                           ;PS_2.c: 960: {
 14154                           ;PS_2.c: 961: return 0;
 14155  1381  3000               	movlw	0
 14156  1382  0008               	return
 14157  1383                     l7195:	
 14158                           
 14159                           ;PS_2.c: 962: }
 14160                           ;PS_2.c: 963: delayUS(5000);
 14161  1383  3000               	movlw	0
 14162  1384  0020               	movlb	0	; select bank0
 14163  1385  00A8               	movwf	delayUS@US+3
 14164  1386  3000               	movlw	0
 14165  1387  00A7               	movwf	delayUS@US+2
 14166  1388  3013               	movlw	19
 14167  1389  00A6               	movwf	delayUS@US+1
 14168  138A  3088               	movlw	136
 14169  138B  00A5               	movwf	delayUS@US
 14170  138C  319B  2315  3193   	fcall	_delayUS
 14171                           
 14172                           ;PS_2.c: 966: if(Send_PS2(0xED))
 14173  138F  30ED               	movlw	237
 14174  1390  3196  2661  3193   	fcall	_Send_PS2
 14175  1393  3A00               	xorlw	0
 14176  1394  1903               	skipnz
 14177  1395  2B98               	goto	l7201
 14178                           
 14179                           ;PS_2.c: 967: {
 14180                           ;PS_2.c: 968: return 0;
 14181  1396  3000               	movlw	0
 14182  1397  0008               	return
 14183  1398                     l7201:	
 14184                           
 14185                           ;PS_2.c: 969: }
 14186                           ;PS_2.c: 970: delayUS(100);
 14187  1398  3000               	movlw	0
 14188  1399  0020               	movlb	0	; select bank0
 14189  139A  00A8               	movwf	delayUS@US+3
 14190  139B  3000               	movlw	0
 14191  139C  00A7               	movwf	delayUS@US+2
 14192  139D  3000               	movlw	0
 14193  139E  00A6               	movwf	delayUS@US+1
 14194  139F  3064               	movlw	100
 14195  13A0  00A5               	movwf	delayUS@US
 14196  13A1  319B  2315  3193   	fcall	_delayUS
 14197                           
 14198                           ;PS_2.c: 971: if(Send_PS2(0x00))
 14199  13A4  3000               	movlw	0
 14200  13A5  3196  2661  3193   	fcall	_Send_PS2
 14201  13A8  3A00               	xorlw	0
 14202  13A9  1903               	skipnz
 14203  13AA  2BAD               	goto	l7207
 14204                           
 14205                           ;PS_2.c: 972: {
 14206                           ;PS_2.c: 973: return 0;
 14207  13AB  3000               	movlw	0
 14208  13AC  0008               	return
 14209  13AD                     l7207:	
 14210                           
 14211                           ;PS_2.c: 974: }
 14212                           ;PS_2.c: 977: if(Send_PS2(0xf4))
 14213  13AD  30F4               	movlw	244
 14214  13AE  3196  2661  3193   	fcall	_Send_PS2
 14215  13B1  3A00               	xorlw	0
 14216  13B2  1903               	skipnz
 14217  13B3  2BB6               	goto	l7213
 14218                           
 14219                           ;PS_2.c: 978: {
 14220                           ;PS_2.c: 979: return 0;
 14221  13B4  3000               	movlw	0
 14222  13B5  0008               	return
 14223  13B6                     l7213:	
 14224                           
 14225                           ;PS_2.c: 980: }
 14226                           ;PS_2.c: 983: if(Send_PS2(0xf4))
 14227  13B6  30F4               	movlw	244
 14228  13B7  3196  2661  3193   	fcall	_Send_PS2
 14229  13BA  3A00               	xorlw	0
 14230  13BB  1903               	skipnz
 14231  13BC  2BBF               	goto	l7219
 14232                           
 14233                           ;PS_2.c: 984: {
 14234                           ;PS_2.c: 985: return 0;
 14235  13BD  3000               	movlw	0
 14236  13BE  0008               	return
 14237  13BF                     l7219:	
 14238                           
 14239                           ;PS_2.c: 986: }
 14240                           ;PS_2.c: 989: if(Send_PS2(0xf0))
 14241  13BF  30F0               	movlw	240
 14242  13C0  3196  2661  3193   	fcall	_Send_PS2
 14243  13C3  3A00               	xorlw	0
 14244  13C4  1903               	skipnz
 14245  13C5  2BC8               	goto	l7225
 14246                           
 14247                           ;PS_2.c: 990: {
 14248                           ;PS_2.c: 991: return 0;
 14249  13C6  3000               	movlw	0
 14250  13C7  0008               	return
 14251  13C8                     l7225:	
 14252                           
 14253                           ;PS_2.c: 992: }
 14254                           ;PS_2.c: 993: delayUS(100);
 14255  13C8  3000               	movlw	0
 14256  13C9  0020               	movlb	0	; select bank0
 14257  13CA  00A8               	movwf	delayUS@US+3
 14258  13CB  3000               	movlw	0
 14259  13CC  00A7               	movwf	delayUS@US+2
 14260  13CD  3000               	movlw	0
 14261  13CE  00A6               	movwf	delayUS@US+1
 14262  13CF  3064               	movlw	100
 14263  13D0  00A5               	movwf	delayUS@US
 14264  13D1  319B  2315  3193   	fcall	_delayUS
 14265                           
 14266                           ;PS_2.c: 994: if(Send_PS2(0x02))
 14267  13D4  3002               	movlw	2
 14268  13D5  3196  2661  3193   	fcall	_Send_PS2
 14269  13D8  3A00               	xorlw	0
 14270  13D9  1903               	skipnz
 14271  13DA  2BDD               	goto	l7231
 14272                           
 14273                           ;PS_2.c: 995: {
 14274                           ;PS_2.c: 996: return 0;
 14275  13DB  3000               	movlw	0
 14276  13DC  0008               	return
 14277  13DD                     l7231:	
 14278                           
 14279                           ;PS_2.c: 997: }
 14280                           ;PS_2.c: 1000: if(Send_PS2(0xf3))
 14281  13DD  30F3               	movlw	243
 14282  13DE  3196  2661  3193   	fcall	_Send_PS2
 14283  13E1  3A00               	xorlw	0
 14284  13E2  1903               	skipnz
 14285  13E3  2BE6               	goto	l7237
 14286                           
 14287                           ;PS_2.c: 1001: {
 14288                           ;PS_2.c: 1002: return 0;
 14289  13E4  3000               	movlw	0
 14290  13E5  0008               	return
 14291  13E6                     l7237:	
 14292                           
 14293                           ;PS_2.c: 1003: }
 14294                           ;PS_2.c: 1004: delayUS(100);
 14295  13E6  3000               	movlw	0
 14296  13E7  0020               	movlb	0	; select bank0
 14297  13E8  00A8               	movwf	delayUS@US+3
 14298  13E9  3000               	movlw	0
 14299  13EA  00A7               	movwf	delayUS@US+2
 14300  13EB  3000               	movlw	0
 14301  13EC  00A6               	movwf	delayUS@US+1
 14302  13ED  3064               	movlw	100
 14303  13EE  00A5               	movwf	delayUS@US
 14304  13EF  319B  2315  3193   	fcall	_delayUS
 14305                           
 14306                           ;PS_2.c: 1005: if(Send_PS2(0x2F))
 14307  13F2  302F               	movlw	47
 14308  13F3  3196  2661  3193   	fcall	_Send_PS2
 14309  13F6  3A00               	xorlw	0
 14310  13F7  1903               	skipnz
 14311  13F8  2BFB               	goto	l7243
 14312                           
 14313                           ;PS_2.c: 1006: {
 14314                           ;PS_2.c: 1007: return 0;
 14315  13F9  3000               	movlw	0
 14316  13FA  0008               	return
 14317  13FB                     l7243:	
 14318                           
 14319                           ;PS_2.c: 1008: }
 14320                           ;PS_2.c: 1010: PS_2_ENABLE_INTERRUPT(0b00100000);
 14321  13FB  3020               	movlw	32
 14322  13FC  3199  217F         	fcall	_PS_2_ENABLE_INTERRUPT
 14323                           
 14324                           ;PS_2.c: 1011: return 1;
 14325  13FE  3001               	movlw	1
 14326  13FF  0008               	return
 14327  1400                     __end_of_Init_PS_2_Send:	
 14328                           
 14329                           	psect	text41
 14330  1661                     __ptext41:	
 14331 ;; *************** function _Send_PS2 *****************
 14332 ;; Defined at:
 14333 ;;		line 769 in file "PS_2.c"
 14334 ;; Parameters:    Size  Location     Type
 14335 ;;  command         1    wreg     unsigned char 
 14336 ;; Auto vars:     Size  Location     Type
 14337 ;;  command         1   20[BANK0 ] unsigned char 
 14338 ;;  timeout         2   22[BANK0 ] unsigned int 
 14339 ;;  i               1   21[BANK0 ] unsigned char 
 14340 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14341 ;; Return value:  Size  Location     Type
 14342 ;;                  1    wreg      unsigned char 
 14343 ;; Registers used:
 14344 ;;		wreg, status,2, status,0, pclath, cstack
 14345 ;; Tracked objects:
 14346 ;;		On entry : 0/0
 14347 ;;		On exit  : 0/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;Total ram usage:        9 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    4
 14357 ;; This function calls:
 14358 ;;		_CheckSum_byte
 14359 ;;		_Clock_TRIS
 14360 ;;		_Data_TRIS
 14361 ;;		_PS_2_ENABLE_INTERRUPT
 14362 ;;		_READ_PS_2_PIN
 14363 ;;		_delayUS
 14364 ;; This function is called by:
 14365 ;;		_PS_2_Update
 14366 ;;		_Init_PS_2_Send
 14367 ;;		_Keyboard_Connected
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           
 14372                           ;psect for function _Send_PS2
 14373  1661                     _Send_PS2:	
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14377                           ;Send_PS2@command stored from wreg
 14378  1661  0020               	movlb	0	; select bank0
 14379  1662  00B4               	movwf	Send_PS2@command
 14380                           
 14381                           ;PS_2.c: 771: unsigned char i=0;
 14382  1663  01B5               	clrf	Send_PS2@i
 14383                           
 14384                           ;PS_2.c: 772: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14385  1664  0834               	movf	Send_PS2@command,w
 14386  1665  00AF               	movwf	??_Send_PS2
 14387  1666  01B0               	clrf	??_Send_PS2+1
 14388  1667  082F               	movf	??_Send_PS2,w
 14389  1668  00A5               	movwf	CheckSum_byte@This
 14390  1669  0830               	movf	??_Send_PS2+1,w
 14391  166A  00A6               	movwf	CheckSum_byte@This+1
 14392  166B  3003               	movlw	3
 14393  166C  00B1               	movwf	??_Send_PS2+2
 14394  166D  0831               	movf	??_Send_PS2+2,w
 14395  166E  00A7               	movwf	CheckSum_byte@Odd_Even
 14396  166F  319A  224E  3196   	fcall	_CheckSum_byte
 14397  1672  0020               	movlb	0	; select bank0
 14398  1673  00B2               	movwf	??_Send_PS2+3
 14399  1674  0832               	movf	??_Send_PS2+3,w
 14400  1675  00B3               	movwf	Send_PS2@oddparity
 14401                           
 14402                           ;PS_2.c: 773: unsigned int timeout =0;
 14403  1676  01B6               	clrf	Send_PS2@timeout
 14404  1677  01B7               	clrf	Send_PS2@timeout+1
 14405                           
 14406                           ;PS_2.c: 775: Clock_TRIS(0);
 14407  1678  3000               	movlw	0
 14408  1679  3198  2099  3196   	fcall	_Clock_TRIS
 14409                           
 14410                           ;PS_2.c: 776: Data_TRIS(0);
 14411  167C  3000               	movlw	0
 14412  167D  3198  20A4  3196   	fcall	_Data_TRIS
 14413                           
 14414                           ;PS_2.c: 777: LATA &= ~0b00100000;
 14415  1680  30DF               	movlw	223
 14416  1681  0020               	movlb	0	; select bank0
 14417  1682  00AF               	movwf	??_Send_PS2
 14418  1683  082F               	movf	??_Send_PS2,w
 14419  1684  0022               	movlb	2	; select bank2
 14420  1685  058C               	andwf	12,f	;volatile
 14421                           
 14422                           ;PS_2.c: 778: delayUS(300);
 14423  1686  3000               	movlw	0
 14424  1687  0020               	movlb	0	; select bank0
 14425  1688  00A8               	movwf	delayUS@US+3
 14426  1689  3000               	movlw	0
 14427  168A  00A7               	movwf	delayUS@US+2
 14428  168B  3001               	movlw	1
 14429  168C  00A6               	movwf	delayUS@US+1
 14430  168D  302C               	movlw	44
 14431  168E  00A5               	movwf	delayUS@US
 14432  168F  319B  2315  3196   	fcall	_delayUS
 14433                           
 14434                           ;PS_2.c: 779: LATA &= ~0b00010000;
 14435  1692  30EF               	movlw	239
 14436  1693  0020               	movlb	0	; select bank0
 14437  1694  00AF               	movwf	??_Send_PS2
 14438  1695  082F               	movf	??_Send_PS2,w
 14439  1696  0022               	movlb	2	; select bank2
 14440  1697  058C               	andwf	12,f	;volatile
 14441                           
 14442                           ;PS_2.c: 780: delayUS(20);
 14443  1698  3000               	movlw	0
 14444  1699  0020               	movlb	0	; select bank0
 14445  169A  00A8               	movwf	delayUS@US+3
 14446  169B  3000               	movlw	0
 14447  169C  00A7               	movwf	delayUS@US+2
 14448  169D  3000               	movlw	0
 14449  169E  00A6               	movwf	delayUS@US+1
 14450  169F  3014               	movlw	20
 14451  16A0  00A5               	movwf	delayUS@US
 14452  16A1  319B  2315  3196   	fcall	_delayUS
 14453                           
 14454                           ;PS_2.c: 781: Clock_TRIS(1);
 14455  16A4  3001               	movlw	1
 14456  16A5  3198  2099  3196   	fcall	_Clock_TRIS
 14457                           
 14458                           ;PS_2.c: 782: timeout=0;
 14459  16A8  0020               	movlb	0	; select bank0
 14460  16A9  01B6               	clrf	Send_PS2@timeout
 14461  16AA  01B7               	clrf	Send_PS2@timeout+1
 14462  16AB                     l6249:	
 14463                           ;PS_2.c: 783: while(READ_PS_2_PIN(0b00100000))
 14464                           
 14465  16AB  3020               	movlw	32
 14466  16AC  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14467  16AF  3800               	iorlw	0
 14468  16B0  1903               	btfsc	3,2
 14469  16B1  2EC8               	goto	l6251
 14470                           
 14471                           ;PS_2.c: 784: {
 14472                           ;PS_2.c: 785: __nop();
 14473  16B2  0000               	nop
 14474                           
 14475                           ;PS_2.c: 786: timeout++;
 14476  16B3  3001               	movlw	1
 14477  16B4  0020               	movlb	0	; select bank0
 14478  16B5  07B6               	addwf	Send_PS2@timeout,f
 14479  16B6  3000               	movlw	0
 14480  16B7  3DB7               	addwfc	Send_PS2@timeout+1,f
 14481                           
 14482                           ;PS_2.c: 787: if(timeout > 15000)
 14483  16B8  303A               	movlw	58
 14484  16B9  0237               	subwf	Send_PS2@timeout+1,w
 14485  16BA  3099               	movlw	153
 14486  16BB  1903               	skipnz
 14487  16BC  0236               	subwf	Send_PS2@timeout,w
 14488  16BD  1C03               	skipc
 14489  16BE  2EAB               	goto	l6249
 14490                           
 14491                           ;PS_2.c: 788: {
 14492                           ;PS_2.c: 789: Clock_TRIS(1);
 14493  16BF  3001               	movlw	1
 14494  16C0  3198  2099  3196   	fcall	_Clock_TRIS
 14495                           
 14496                           ;PS_2.c: 790: Data_TRIS(1);
 14497  16C3  3001               	movlw	1
 14498  16C4  3198  20A4         	fcall	_Data_TRIS
 14499                           
 14500                           ;PS_2.c: 791: return 1;
 14501  16C6  3001               	movlw	1
 14502  16C7  0008               	return
 14503  16C8                     l6251:	
 14504                           
 14505                           ;PS_2.c: 792: }
 14506                           ;PS_2.c: 793: }
 14507                           ;PS_2.c: 794: for(i=0;i<8;i++)
 14508  16C8  0020               	movlb	0	; select bank0
 14509  16C9  01B5               	clrf	Send_PS2@i
 14510  16CA  3008               	movlw	8
 14511  16CB  0235               	subwf	Send_PS2@i,w
 14512  16CC  1803               	btfsc	3,0
 14513  16CD  2F24               	goto	l885
 14514  16CE                     l884:	
 14515                           
 14516                           ;PS_2.c: 795: {
 14517                           ;PS_2.c: 796: if(command & 0x1)
 14518  16CE  1C34               	btfss	Send_PS2@command,0
 14519  16CF  2ED3               	goto	l6259
 14520                           
 14521                           ;PS_2.c: 797: {
 14522                           ;PS_2.c: 798: LATA |= 0b00010000;
 14523  16D0  0022               	movlb	2	; select bank2
 14524  16D1  160C               	bsf	12,4	;volatile
 14525                           
 14526                           ;PS_2.c: 799: }
 14527  16D2  2ED9               	goto	l6261
 14528  16D3                     l6259:	
 14529                           
 14530                           ;PS_2.c: 800: else
 14531                           ;PS_2.c: 801: {
 14532                           ;PS_2.c: 802: LATA &= ~0b00010000;
 14533  16D3  30EF               	movlw	239
 14534  16D4  0020               	movlb	0	; select bank0
 14535  16D5  00AF               	movwf	??_Send_PS2
 14536  16D6  082F               	movf	??_Send_PS2,w
 14537  16D7  0022               	movlb	2	; select bank2
 14538  16D8  058C               	andwf	12,f	;volatile
 14539  16D9                     l6261:	
 14540                           
 14541                           ;PS_2.c: 803: }
 14542                           ;PS_2.c: 804: command >> = 1;
 14543  16D9  1003               	clrc
 14544  16DA  0020               	movlb	0	; select bank0
 14545  16DB  0CB4               	rrf	Send_PS2@command,f
 14546                           
 14547                           ;PS_2.c: 805: timeout=0;
 14548  16DC  01B6               	clrf	Send_PS2@timeout
 14549  16DD  01B7               	clrf	Send_PS2@timeout+1
 14550  16DE                     l6273:	
 14551                           ;PS_2.c: 806: while(!READ_PS_2_PIN(0b00100000))
 14552                           
 14553  16DE  3020               	movlw	32
 14554  16DF  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14555  16E2  3A00               	xorlw	0
 14556  16E3  1D03               	btfss	3,2
 14557  16E4  2EFB               	goto	l6275
 14558                           
 14559                           ;PS_2.c: 807: {
 14560                           ;PS_2.c: 808: __nop();
 14561  16E5  0000               	nop
 14562                           
 14563                           ;PS_2.c: 809: timeout++;
 14564  16E6  3001               	movlw	1
 14565  16E7  0020               	movlb	0	; select bank0
 14566  16E8  07B6               	addwf	Send_PS2@timeout,f
 14567  16E9  3000               	movlw	0
 14568  16EA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14569                           
 14570                           ;PS_2.c: 810: if(timeout > 15000)
 14571  16EB  303A               	movlw	58
 14572  16EC  0237               	subwf	Send_PS2@timeout+1,w
 14573  16ED  3099               	movlw	153
 14574  16EE  1903               	skipnz
 14575  16EF  0236               	subwf	Send_PS2@timeout,w
 14576  16F0  1C03               	skipc
 14577  16F1  2EDE               	goto	l6273
 14578                           
 14579                           ;PS_2.c: 811: {
 14580                           ;PS_2.c: 812: Clock_TRIS(1);
 14581  16F2  3001               	movlw	1
 14582  16F3  3198  2099  3196   	fcall	_Clock_TRIS
 14583                           
 14584                           ;PS_2.c: 813: Data_TRIS(1);
 14585  16F6  3001               	movlw	1
 14586  16F7  3198  20A4         	fcall	_Data_TRIS
 14587                           
 14588                           ;PS_2.c: 814: return 1;
 14589  16F9  3001               	movlw	1
 14590  16FA  0008               	return
 14591  16FB                     l6275:	
 14592                           
 14593                           ;PS_2.c: 815: }
 14594                           ;PS_2.c: 816: }
 14595                           ;PS_2.c: 817: timeout=0;
 14596  16FB  0020               	movlb	0	; select bank0
 14597  16FC  01B6               	clrf	Send_PS2@timeout
 14598  16FD  01B7               	clrf	Send_PS2@timeout+1
 14599  16FE                     l6285:	
 14600                           ;PS_2.c: 818: while(READ_PS_2_PIN(0b00100000))
 14601                           
 14602  16FE  3020               	movlw	32
 14603  16FF  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14604  1702  3800               	iorlw	0
 14605  1703  1903               	btfsc	3,2
 14606  1704  2F1B               	goto	l6287
 14607                           
 14608                           ;PS_2.c: 819: {
 14609                           ;PS_2.c: 820: __nop();
 14610  1705  0000               	nop
 14611                           
 14612                           ;PS_2.c: 821: timeout++;
 14613  1706  3001               	movlw	1
 14614  1707  0020               	movlb	0	; select bank0
 14615  1708  07B6               	addwf	Send_PS2@timeout,f
 14616  1709  3000               	movlw	0
 14617  170A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14618                           
 14619                           ;PS_2.c: 822: if(timeout > 15000)
 14620  170B  303A               	movlw	58
 14621  170C  0237               	subwf	Send_PS2@timeout+1,w
 14622  170D  3099               	movlw	153
 14623  170E  1903               	skipnz
 14624  170F  0236               	subwf	Send_PS2@timeout,w
 14625  1710  1C03               	skipc
 14626  1711  2EFE               	goto	l6285
 14627                           
 14628                           ;PS_2.c: 823: {
 14629                           ;PS_2.c: 824: Clock_TRIS(1);
 14630  1712  3001               	movlw	1
 14631  1713  3198  2099  3196   	fcall	_Clock_TRIS
 14632                           
 14633                           ;PS_2.c: 825: Data_TRIS(1);
 14634  1716  3001               	movlw	1
 14635  1717  3198  20A4         	fcall	_Data_TRIS
 14636                           
 14637                           ;PS_2.c: 826: return 1;
 14638  1719  3001               	movlw	1
 14639  171A  0008               	return
 14640  171B                     l6287:	
 14641  171B  3001               	movlw	1
 14642  171C  0020               	movlb	0	; select bank0
 14643  171D  00AF               	movwf	??_Send_PS2
 14644  171E  082F               	movf	??_Send_PS2,w
 14645  171F  07B5               	addwf	Send_PS2@i,f
 14646  1720  3008               	movlw	8
 14647  1721  0235               	subwf	Send_PS2@i,w
 14648  1722  1C03               	skipc
 14649  1723  2ECE               	goto	l884
 14650  1724                     l885:	
 14651                           
 14652                           ;PS_2.c: 827: }
 14653                           ;PS_2.c: 828: }
 14654                           ;PS_2.c: 829: }
 14655                           ;PS_2.c: 831: if(oddparity & 0x1)
 14656  1724  1C33               	btfss	Send_PS2@oddparity,0
 14657  1725  2F29               	goto	l6293
 14658                           
 14659                           ;PS_2.c: 832: {
 14660                           ;PS_2.c: 833: LATA |= 0b00010000;
 14661  1726  0022               	movlb	2	; select bank2
 14662  1727  160C               	bsf	12,4	;volatile
 14663                           
 14664                           ;PS_2.c: 834: }
 14665  1728  2F2F               	goto	l6295
 14666  1729                     l6293:	
 14667                           
 14668                           ;PS_2.c: 835: else
 14669                           ;PS_2.c: 836: {
 14670                           ;PS_2.c: 837: LATA &= ~0b00010000;
 14671  1729  30EF               	movlw	239
 14672  172A  0020               	movlb	0	; select bank0
 14673  172B  00AF               	movwf	??_Send_PS2
 14674  172C  082F               	movf	??_Send_PS2,w
 14675  172D  0022               	movlb	2	; select bank2
 14676  172E  058C               	andwf	12,f	;volatile
 14677  172F                     l6295:	
 14678                           
 14679                           ;PS_2.c: 838: }
 14680                           ;PS_2.c: 839: timeout=0;
 14681  172F  0020               	movlb	0	; select bank0
 14682  1730  01B6               	clrf	Send_PS2@timeout
 14683  1731  01B7               	clrf	Send_PS2@timeout+1
 14684  1732                     l6305:	
 14685                           ;PS_2.c: 840: while(!READ_PS_2_PIN(0b00100000))
 14686                           
 14687  1732  3020               	movlw	32
 14688  1733  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14689  1736  3A00               	xorlw	0
 14690  1737  1D03               	btfss	3,2
 14691  1738  2F4F               	goto	l6307
 14692                           
 14693                           ;PS_2.c: 841: {
 14694                           ;PS_2.c: 842: __nop();
 14695  1739  0000               	nop
 14696                           
 14697                           ;PS_2.c: 843: timeout++;
 14698  173A  3001               	movlw	1
 14699  173B  0020               	movlb	0	; select bank0
 14700  173C  07B6               	addwf	Send_PS2@timeout,f
 14701  173D  3000               	movlw	0
 14702  173E  3DB7               	addwfc	Send_PS2@timeout+1,f
 14703                           
 14704                           ;PS_2.c: 844: if(timeout > 15000)
 14705  173F  303A               	movlw	58
 14706  1740  0237               	subwf	Send_PS2@timeout+1,w
 14707  1741  3099               	movlw	153
 14708  1742  1903               	skipnz
 14709  1743  0236               	subwf	Send_PS2@timeout,w
 14710  1744  1C03               	skipc
 14711  1745  2F32               	goto	l6305
 14712                           
 14713                           ;PS_2.c: 845: {
 14714                           ;PS_2.c: 846: Clock_TRIS(1);
 14715  1746  3001               	movlw	1
 14716  1747  3198  2099  3196   	fcall	_Clock_TRIS
 14717                           
 14718                           ;PS_2.c: 847: Data_TRIS(1);
 14719  174A  3001               	movlw	1
 14720  174B  3198  20A4         	fcall	_Data_TRIS
 14721                           
 14722                           ;PS_2.c: 848: return 1;
 14723  174D  3001               	movlw	1
 14724  174E  0008               	return
 14725  174F                     l6307:	
 14726                           
 14727                           ;PS_2.c: 849: }
 14728                           ;PS_2.c: 850: }
 14729                           ;PS_2.c: 851: timeout=0;
 14730  174F  0020               	movlb	0	; select bank0
 14731  1750  01B6               	clrf	Send_PS2@timeout
 14732  1751  01B7               	clrf	Send_PS2@timeout+1
 14733  1752                     l6317:	
 14734                           ;PS_2.c: 852: while(READ_PS_2_PIN(0b00100000))
 14735                           
 14736  1752  3020               	movlw	32
 14737  1753  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14738  1756  3800               	iorlw	0
 14739  1757  1903               	btfsc	3,2
 14740  1758  2F6F               	goto	l6319
 14741                           
 14742                           ;PS_2.c: 853: {
 14743                           ;PS_2.c: 854: __nop();
 14744  1759  0000               	nop
 14745                           
 14746                           ;PS_2.c: 855: timeout++;
 14747  175A  3001               	movlw	1
 14748  175B  0020               	movlb	0	; select bank0
 14749  175C  07B6               	addwf	Send_PS2@timeout,f
 14750  175D  3000               	movlw	0
 14751  175E  3DB7               	addwfc	Send_PS2@timeout+1,f
 14752                           
 14753                           ;PS_2.c: 856: if(timeout > 15000)
 14754  175F  303A               	movlw	58
 14755  1760  0237               	subwf	Send_PS2@timeout+1,w
 14756  1761  3099               	movlw	153
 14757  1762  1903               	skipnz
 14758  1763  0236               	subwf	Send_PS2@timeout,w
 14759  1764  1C03               	skipc
 14760  1765  2F52               	goto	l6317
 14761                           
 14762                           ;PS_2.c: 857: {
 14763                           ;PS_2.c: 858: Clock_TRIS(1);
 14764  1766  3001               	movlw	1
 14765  1767  3198  2099  3196   	fcall	_Clock_TRIS
 14766                           
 14767                           ;PS_2.c: 859: Data_TRIS(1);
 14768  176A  3001               	movlw	1
 14769  176B  3198  20A4         	fcall	_Data_TRIS
 14770                           
 14771                           ;PS_2.c: 860: return 1;
 14772  176D  3001               	movlw	1
 14773  176E  0008               	return
 14774  176F                     l6319:	
 14775                           
 14776                           ;PS_2.c: 861: }
 14777                           ;PS_2.c: 862: }
 14778                           ;PS_2.c: 864: Data_TRIS(1);
 14779  176F  3001               	movlw	1
 14780  1770  3198  20A4  3196   	fcall	_Data_TRIS
 14781                           
 14782                           ;PS_2.c: 866: timeout=0;
 14783  1773  0020               	movlb	0	; select bank0
 14784  1774  01B6               	clrf	Send_PS2@timeout
 14785  1775  01B7               	clrf	Send_PS2@timeout+1
 14786  1776                     l6331:	
 14787                           ;PS_2.c: 867: while(READ_PS_2_PIN(0b00010000))
 14788                           
 14789  1776  3010               	movlw	16
 14790  1777  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14791  177A  3800               	iorlw	0
 14792  177B  1903               	btfsc	3,2
 14793  177C  2F93               	goto	l6333
 14794                           
 14795                           ;PS_2.c: 868: {
 14796                           ;PS_2.c: 869: __nop();
 14797  177D  0000               	nop
 14798                           
 14799                           ;PS_2.c: 870: timeout++;
 14800  177E  3001               	movlw	1
 14801  177F  0020               	movlb	0	; select bank0
 14802  1780  07B6               	addwf	Send_PS2@timeout,f
 14803  1781  3000               	movlw	0
 14804  1782  3DB7               	addwfc	Send_PS2@timeout+1,f
 14805                           
 14806                           ;PS_2.c: 871: if(timeout > 15000)
 14807  1783  303A               	movlw	58
 14808  1784  0237               	subwf	Send_PS2@timeout+1,w
 14809  1785  3099               	movlw	153
 14810  1786  1903               	skipnz
 14811  1787  0236               	subwf	Send_PS2@timeout,w
 14812  1788  1C03               	skipc
 14813  1789  2F76               	goto	l6331
 14814                           
 14815                           ;PS_2.c: 872: {
 14816                           ;PS_2.c: 873: Clock_TRIS(1);
 14817  178A  3001               	movlw	1
 14818  178B  3198  2099  3196   	fcall	_Clock_TRIS
 14819                           
 14820                           ;PS_2.c: 874: Data_TRIS(1);
 14821  178E  3001               	movlw	1
 14822  178F  3198  20A4         	fcall	_Data_TRIS
 14823                           
 14824                           ;PS_2.c: 875: return 1;
 14825  1791  3001               	movlw	1
 14826  1792  0008               	return
 14827  1793                     l6333:	
 14828                           
 14829                           ;PS_2.c: 876: }
 14830                           ;PS_2.c: 877: }
 14831                           ;PS_2.c: 878: timeout=0;
 14832  1793  0020               	movlb	0	; select bank0
 14833  1794  01B6               	clrf	Send_PS2@timeout
 14834  1795  01B7               	clrf	Send_PS2@timeout+1
 14835  1796                     l6343:	
 14836                           ;PS_2.c: 879: while(READ_PS_2_PIN(0b00100000))
 14837                           
 14838  1796  3020               	movlw	32
 14839  1797  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14840  179A  3800               	iorlw	0
 14841  179B  1903               	btfsc	3,2
 14842  179C  2FB3               	goto	l6345
 14843                           
 14844                           ;PS_2.c: 880: {
 14845                           ;PS_2.c: 881: __nop();
 14846  179D  0000               	nop
 14847                           
 14848                           ;PS_2.c: 882: timeout++;
 14849  179E  3001               	movlw	1
 14850  179F  0020               	movlb	0	; select bank0
 14851  17A0  07B6               	addwf	Send_PS2@timeout,f
 14852  17A1  3000               	movlw	0
 14853  17A2  3DB7               	addwfc	Send_PS2@timeout+1,f
 14854                           
 14855                           ;PS_2.c: 883: if(timeout > 15000)
 14856  17A3  303A               	movlw	58
 14857  17A4  0237               	subwf	Send_PS2@timeout+1,w
 14858  17A5  3099               	movlw	153
 14859  17A6  1903               	skipnz
 14860  17A7  0236               	subwf	Send_PS2@timeout,w
 14861  17A8  1C03               	skipc
 14862  17A9  2F96               	goto	l6343
 14863                           
 14864                           ;PS_2.c: 884: {
 14865                           ;PS_2.c: 885: Clock_TRIS(1);
 14866  17AA  3001               	movlw	1
 14867  17AB  3198  2099  3196   	fcall	_Clock_TRIS
 14868                           
 14869                           ;PS_2.c: 886: Data_TRIS(1);
 14870  17AE  3001               	movlw	1
 14871  17AF  3198  20A4         	fcall	_Data_TRIS
 14872                           
 14873                           ;PS_2.c: 887: return 1;
 14874  17B1  3001               	movlw	1
 14875  17B2  0008               	return
 14876  17B3                     l6345:	
 14877                           
 14878                           ;PS_2.c: 888: }
 14879                           ;PS_2.c: 889: }
 14880                           ;PS_2.c: 890: timeout=0;
 14881  17B3  0020               	movlb	0	; select bank0
 14882  17B4  01B6               	clrf	Send_PS2@timeout
 14883  17B5  01B7               	clrf	Send_PS2@timeout+1
 14884  17B6                     l6355:	
 14885                           ;PS_2.c: 891: while(!READ_PS_2_PIN(0b00010000))
 14886                           
 14887  17B6  3010               	movlw	16
 14888  17B7  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14889  17BA  3A00               	xorlw	0
 14890  17BB  1D03               	btfss	3,2
 14891  17BC  2FD3               	goto	l6357
 14892                           
 14893                           ;PS_2.c: 892: {
 14894                           ;PS_2.c: 893: __nop();
 14895  17BD  0000               	nop
 14896                           
 14897                           ;PS_2.c: 894: timeout++;
 14898  17BE  3001               	movlw	1
 14899  17BF  0020               	movlb	0	; select bank0
 14900  17C0  07B6               	addwf	Send_PS2@timeout,f
 14901  17C1  3000               	movlw	0
 14902  17C2  3DB7               	addwfc	Send_PS2@timeout+1,f
 14903                           
 14904                           ;PS_2.c: 895: if(timeout > 15000)
 14905  17C3  303A               	movlw	58
 14906  17C4  0237               	subwf	Send_PS2@timeout+1,w
 14907  17C5  3099               	movlw	153
 14908  17C6  1903               	skipnz
 14909  17C7  0236               	subwf	Send_PS2@timeout,w
 14910  17C8  1C03               	skipc
 14911  17C9  2FB6               	goto	l6355
 14912                           
 14913                           ;PS_2.c: 896: {
 14914                           ;PS_2.c: 897: Clock_TRIS(1);
 14915  17CA  3001               	movlw	1
 14916  17CB  3198  2099  3196   	fcall	_Clock_TRIS
 14917                           
 14918                           ;PS_2.c: 898: Data_TRIS(1);
 14919  17CE  3001               	movlw	1
 14920  17CF  3198  20A4         	fcall	_Data_TRIS
 14921                           
 14922                           ;PS_2.c: 899: return 1;
 14923  17D1  3001               	movlw	1
 14924  17D2  0008               	return
 14925  17D3                     l6357:	
 14926                           
 14927                           ;PS_2.c: 900: }
 14928                           ;PS_2.c: 901: }
 14929                           ;PS_2.c: 902: timeout=0;
 14930  17D3  0020               	movlb	0	; select bank0
 14931  17D4  01B6               	clrf	Send_PS2@timeout
 14932  17D5  01B7               	clrf	Send_PS2@timeout+1
 14933  17D6                     l6367:	
 14934                           ;PS_2.c: 903: while(!READ_PS_2_PIN(0b00100000))
 14935                           
 14936  17D6  3020               	movlw	32
 14937  17D7  3199  2121  3196   	fcall	_READ_PS_2_PIN
 14938  17DA  3A00               	xorlw	0
 14939  17DB  1D03               	btfss	3,2
 14940  17DC  2FF3               	goto	l6369
 14941                           
 14942                           ;PS_2.c: 904: {
 14943                           ;PS_2.c: 905: __nop();
 14944  17DD  0000               	nop
 14945                           
 14946                           ;PS_2.c: 906: timeout++;
 14947  17DE  3001               	movlw	1
 14948  17DF  0020               	movlb	0	; select bank0
 14949  17E0  07B6               	addwf	Send_PS2@timeout,f
 14950  17E1  3000               	movlw	0
 14951  17E2  3DB7               	addwfc	Send_PS2@timeout+1,f
 14952                           
 14953                           ;PS_2.c: 907: if(timeout > 15000)
 14954  17E3  303A               	movlw	58
 14955  17E4  0237               	subwf	Send_PS2@timeout+1,w
 14956  17E5  3099               	movlw	153
 14957  17E6  1903               	skipnz
 14958  17E7  0236               	subwf	Send_PS2@timeout,w
 14959  17E8  1C03               	skipc
 14960  17E9  2FD6               	goto	l6367
 14961                           
 14962                           ;PS_2.c: 908: {
 14963                           ;PS_2.c: 909: Clock_TRIS(1);
 14964  17EA  3001               	movlw	1
 14965  17EB  3198  2099  3196   	fcall	_Clock_TRIS
 14966                           
 14967                           ;PS_2.c: 910: Data_TRIS(1);
 14968  17EE  3001               	movlw	1
 14969  17EF  3198  20A4         	fcall	_Data_TRIS
 14970                           
 14971                           ;PS_2.c: 911: return 1;
 14972  17F1  3001               	movlw	1
 14973  17F2  0008               	return
 14974  17F3                     l6369:	
 14975                           
 14976                           ;PS_2.c: 912: }
 14977                           ;PS_2.c: 913: }
 14978                           ;PS_2.c: 916: Clock_TRIS(1);
 14979  17F3  3001               	movlw	1
 14980  17F4  3198  2099  3196   	fcall	_Clock_TRIS
 14981                           
 14982                           ;PS_2.c: 917: Data_TRIS(1);
 14983  17F7  3001               	movlw	1
 14984  17F8  3198  20A4  3196   	fcall	_Data_TRIS
 14985                           
 14986                           ;PS_2.c: 918: PS_2_ENABLE_INTERRUPT(0b00100000);
 14987  17FB  3020               	movlw	32
 14988  17FC  3199  217F         	fcall	_PS_2_ENABLE_INTERRUPT
 14989                           
 14990                           ;PS_2.c: 919: return 0;
 14991  17FE  3000               	movlw	0
 14992  17FF  0008               	return
 14993  1800                     __end_of_Send_PS2:	
 14994                           
 14995                           	psect	text42
 14996  1B15                     __ptext42:	
 14997 ;; *************** function _delayUS *****************
 14998 ;; Defined at:
 14999 ;;		line 41 in file "MISC.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;  US              4    5[BANK0 ] long 
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;  i               4   10[BANK0 ] long 
 15004 ;;  j               1   14[BANK0 ] unsigned char 
 15005 ;; Return value:  Size  Location     Type
 15006 ;;		None               void
 15007 ;; Registers used:
 15008 ;;		wreg, status,2, status,0
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15014 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;Total ram usage:       10 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    3
 15021 ;; This function calls:
 15022 ;;		Nothing
 15023 ;; This function is called by:
 15024 ;;		_main
 15025 ;;		_Init_System
 15026 ;;		_UARTstringWAIT
 15027 ;;		_SetBaud
 15028 ;;		_PS_2_Update
 15029 ;;		_Send_PS2
 15030 ;;		_Init_PS_2_Send
 15031 ;;		_Keyboard_Connected
 15032 ;;		_WriteFlash_Sequential
 15033 ;;		_InternalADC_Read
 15034 ;;		_UART_send_break_timed
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           
 15039                           ;psect for function _delayUS
 15040  1B15                     _delayUS:	
 15041                           
 15042                           ;MISC.c: 43: long i;
 15043                           ;MISC.c: 44: unsigned char j;
 15044                           ;MISC.c: 45: for(i=0;i<US;i+=6)
 15045                           
 15046                           ;incstack = 0
 15047                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 15048  1B15  3000               	movlw	0
 15049  1B16  0020               	movlb	0	; select bank0
 15050  1B17  00AD               	movwf	delayUS@i+3
 15051  1B18  3000               	movlw	0
 15052  1B19  00AC               	movwf	delayUS@i+2
 15053  1B1A  3000               	movlw	0
 15054  1B1B  00AB               	movwf	delayUS@i+1
 15055  1B1C  3000               	movlw	0
 15056  1B1D  00AA               	movwf	delayUS@i
 15057  1B1E                     l264:	
 15058  1B1E  082D               	movf	delayUS@i+3,w
 15059  1B1F  3A80               	xorlw	128
 15060  1B20  00A9               	movwf	??_delayUS
 15061  1B21  0828               	movf	delayUS@US+3,w
 15062  1B22  3A80               	xorlw	128
 15063  1B23  0229               	subwf	??_delayUS,w
 15064  1B24  1D03               	skipz
 15065  1B25  2B30               	goto	u7163
 15066  1B26  0827               	movf	delayUS@US+2,w
 15067  1B27  022C               	subwf	delayUS@i+2,w
 15068  1B28  1D03               	skipz
 15069  1B29  2B30               	goto	u7163
 15070  1B2A  0826               	movf	delayUS@US+1,w
 15071  1B2B  022B               	subwf	delayUS@i+1,w
 15072  1B2C  1D03               	skipz
 15073  1B2D  2B30               	goto	u7163
 15074  1B2E  0825               	movf	delayUS@US,w
 15075  1B2F  022A               	subwf	delayUS@i,w
 15076  1B30                     u7163:	
 15077  1B30  1803               	btfsc	3,0
 15078  1B31  0008               	return
 15079                           
 15080                           ;MISC.c: 46: {
 15081                           ;MISC.c: 47: for(j=0;j<32;j++)
 15082  1B32  01AE               	clrf	delayUS@j
 15083  1B33  3020               	movlw	32
 15084  1B34  022E               	subwf	delayUS@j,w
 15085  1B35  1803               	btfsc	3,0
 15086  1B36  2B41               	goto	l5665
 15087  1B37                     l266:	
 15088                           
 15089                           ;MISC.c: 48: {
 15090                           ;MISC.c: 49: __nop();
 15091  1B37  0000               	nop
 15092  1B38  3001               	movlw	1
 15093  1B39  0020               	movlb	0	; select bank0
 15094  1B3A  00A9               	movwf	??_delayUS
 15095  1B3B  0829               	movf	??_delayUS,w
 15096  1B3C  07AE               	addwf	delayUS@j,f
 15097  1B3D  3020               	movlw	32
 15098  1B3E  022E               	subwf	delayUS@j,w
 15099  1B3F  1C03               	skipc
 15100  1B40  2B37               	goto	l266
 15101  1B41                     l5665:	
 15102  1B41  3006               	movlw	6
 15103  1B42  07AA               	addwf	delayUS@i,f
 15104  1B43  3000               	movlw	0
 15105  1B44  3DAB               	addwfc	delayUS@i+1,f
 15106  1B45  3000               	movlw	0
 15107  1B46  3DAC               	addwfc	delayUS@i+2,f
 15108  1B47  3000               	movlw	0
 15109  1B48  3DAD               	addwfc	delayUS@i+3,f
 15110  1B49  2B1E               	goto	l264
 15111  1B4A                     __end_of_delayUS:	
 15112                           
 15113                           	psect	text43
 15114  1921                     __ptext43:	
 15115 ;; *************** function _READ_PS_2_PIN *****************
 15116 ;; Defined at:
 15117 ;;		line 171 in file "PS_2.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  DATA_CLK        1    wreg     unsigned char 
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15122 ;; Return value:  Size  Location     Type
 15123 ;;                  1    wreg      unsigned char 
 15124 ;; Registers used:
 15125 ;;		wreg
 15126 ;; Tracked objects:
 15127 ;;		On entry : 0/0
 15128 ;;		On exit  : 0/0
 15129 ;;		Unchanged: 0/0
 15130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;Total ram usage:        1 bytes
 15136 ;; Hardware stack levels used:    1
 15137 ;; Hardware stack levels required when called:    3
 15138 ;; This function calls:
 15139 ;;		Nothing
 15140 ;; This function is called by:
 15141 ;;		_Send_PS2
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           
 15146                           ;psect for function _READ_PS_2_PIN
 15147  1921                     _READ_PS_2_PIN:	
 15148                           
 15149                           ;incstack = 0
 15150                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15151                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15152  1921  0020               	movlb	0	; select bank0
 15153  1922  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15154                           
 15155                           ;PS_2.c: 173: if(DATA_CLK == 0b00100000)
 15156  1923  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15157  1924  3A20               	xorlw	32
 15158  1925  1D03               	skipz
 15159  1926  292D               	goto	l682
 15160                           
 15161                           ;PS_2.c: 174: {
 15162                           ;PS_2.c: 176: if((PORTA & 0b00100000) == 0b00100000)
 15163  1927  1E8C               	btfss	12,5	;volatile
 15164  1928  292B               	goto	l5927
 15165                           
 15166                           ;PS_2.c: 177: {
 15167                           ;PS_2.c: 178: return (1);
 15168  1929  3001               	movlw	1
 15169                           
 15170                           ;PS_2.c: 179: }
 15171  192A  0008               	return
 15172  192B                     l5927:	
 15173                           
 15174                           ;PS_2.c: 180: else
 15175                           ;PS_2.c: 181: {
 15176                           ;PS_2.c: 182: return 0;
 15177  192B  3000               	movlw	0
 15178                           
 15179                           ;PS_2.c: 183: }
 15180                           ;PS_2.c: 184: }
 15181  192C  0008               	return
 15182  192D                     l682:	
 15183                           
 15184                           ;PS_2.c: 185: else
 15185                           ;PS_2.c: 186: {
 15186                           ;PS_2.c: 188: if((PORTA & 0b00010000) == 0b00010000)
 15187  192D  1E0C               	btfss	12,4	;volatile
 15188  192E  2931               	goto	l5937
 15189                           
 15190                           ;PS_2.c: 189: {
 15191                           ;PS_2.c: 190: return (1);
 15192  192F  3001               	movlw	1
 15193                           
 15194                           ;PS_2.c: 191: }
 15195  1930  0008               	return
 15196  1931                     l5937:	
 15197                           
 15198                           ;PS_2.c: 192: else
 15199                           ;PS_2.c: 193: {
 15200                           ;PS_2.c: 194: return 0;
 15201  1931  3000               	movlw	0
 15202  1932  0008               	return
 15203  1933                     __end_of_READ_PS_2_PIN:	
 15204                           
 15205                           	psect	text44
 15206  197F                     __ptext44:	
 15207 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15208 ;; Defined at:
 15209 ;;		line 150 in file "PS_2.c"
 15210 ;; Parameters:    Size  Location     Type
 15211 ;;  DATA_CLK        1    wreg     unsigned char 
 15212 ;; Auto vars:     Size  Location     Type
 15213 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15214 ;; Return value:  Size  Location     Type
 15215 ;;		None               void
 15216 ;; Registers used:
 15217 ;;		wreg, status,2, status,0
 15218 ;; Tracked objects:
 15219 ;;		On entry : 0/0
 15220 ;;		On exit  : 0/0
 15221 ;;		Unchanged: 0/0
 15222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;Total ram usage:        2 bytes
 15228 ;; Hardware stack levels used:    1
 15229 ;; Hardware stack levels required when called:    3
 15230 ;; This function calls:
 15231 ;;		Nothing
 15232 ;; This function is called by:
 15233 ;;		_main
 15234 ;;		_PS_2_Update
 15235 ;;		_Send_PS2
 15236 ;;		_Init_PS_2_Send
 15237 ;;		_Keyboard_Connected
 15238 ;; This function uses a non-reentrant model
 15239 ;;
 15240                           
 15241                           
 15242                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15243  197F                     _PS_2_ENABLE_INTERRUPT:	
 15244                           
 15245                           ;incstack = 0
 15246                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15247                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15248  197F  0020               	movlb	0	; select bank0
 15249  1980  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15250                           
 15251                           ;PS_2.c: 152: if(DATA_CLK == 0b00100000)
 15252  1981  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15253  1982  3A20               	xorlw	32
 15254  1983  1D03               	skipz
 15255  1984  298C               	goto	l5955
 15256                           
 15257                           ;PS_2.c: 153: {
 15258                           ;PS_2.c: 156: IOCAF &= ~0b00100000;
 15259  1985  30DF               	movlw	223
 15260  1986  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15261  1987  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15262  1988  0027               	movlb	7	; select bank7
 15263  1989  0593               	andwf	19,f	;volatile
 15264                           
 15265                           ;PS_2.c: 157: IOCAN |= 0b00100000;
 15266  198A  1692               	bsf	18,5	;volatile
 15267                           
 15268                           ;PS_2.c: 159: }
 15269  198B  0008               	return
 15270  198C                     l5955:	
 15271                           
 15272                           ;PS_2.c: 160: else
 15273                           ;PS_2.c: 161: {
 15274                           ;PS_2.c: 164: IOCAF &= ~0b00010000;
 15275  198C  30EF               	movlw	239
 15276  198D  0020               	movlb	0	; select bank0
 15277  198E  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15278  198F  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15279  1990  0027               	movlb	7	; select bank7
 15280  1991  0593               	andwf	19,f	;volatile
 15281                           
 15282                           ;PS_2.c: 165: IOCAN |= 0b00010000;
 15283  1992  1612               	bsf	18,4	;volatile
 15284  1993  0008               	return
 15285  1994                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15286                           
 15287                           	psect	text45
 15288  18A4                     __ptext45:	
 15289 ;; *************** function _Data_TRIS *****************
 15290 ;; Defined at:
 15291 ;;		line 99 in file "PS_2.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  direction       1    wreg     unsigned char 
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;  direction       1    5[BANK0 ] unsigned char 
 15296 ;; Return value:  Size  Location     Type
 15297 ;;		None               void
 15298 ;; Registers used:
 15299 ;;		wreg, status,2, status,0
 15300 ;; Tracked objects:
 15301 ;;		On entry : 0/0
 15302 ;;		On exit  : 0/0
 15303 ;;		Unchanged: 0/0
 15304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;Total ram usage:        1 bytes
 15310 ;; Hardware stack levels used:    1
 15311 ;; Hardware stack levels required when called:    3
 15312 ;; This function calls:
 15313 ;;		Nothing
 15314 ;; This function is called by:
 15315 ;;		_PS_2_INIT
 15316 ;;		_Send_PS2
 15317 ;; This function uses a non-reentrant model
 15318 ;;
 15319                           
 15320                           
 15321                           ;psect for function _Data_TRIS
 15322  18A4                     _Data_TRIS:	
 15323                           
 15324                           ;incstack = 0
 15325                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15326                           ;Data_TRIS@direction stored from wreg
 15327  18A4  0020               	movlb	0	; select bank0
 15328  18A5  00A5               	movwf	Data_TRIS@direction
 15329                           
 15330                           ;PS_2.c: 101: if(direction == 0)
 15331  18A6  08A5               	movf	Data_TRIS@direction,f
 15332  18A7  1D03               	skipz
 15333  18A8  28AC               	goto	l662
 15334                           
 15335                           ;PS_2.c: 102: {
 15336                           ;PS_2.c: 103: TRISAbits.TRISA4 = 0;
 15337  18A9  0021               	movlb	1	; select bank1
 15338  18AA  120C               	bcf	12,4	;volatile
 15339                           
 15340                           ;PS_2.c: 104: }
 15341  18AB  0008               	return
 15342  18AC                     l662:	
 15343                           
 15344                           ;PS_2.c: 105: else
 15345                           ;PS_2.c: 106: {
 15346                           ;PS_2.c: 107: TRISAbits.TRISA4 = 1;
 15347  18AC  0021               	movlb	1	; select bank1
 15348  18AD  160C               	bsf	12,4	;volatile
 15349  18AE  0008               	return
 15350  18AF                     __end_of_Data_TRIS:	
 15351                           
 15352                           	psect	text46
 15353  1899                     __ptext46:	
 15354 ;; *************** function _Clock_TRIS *****************
 15355 ;; Defined at:
 15356 ;;		line 86 in file "PS_2.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;  direction       1    wreg     unsigned char 
 15359 ;; Auto vars:     Size  Location     Type
 15360 ;;  direction       1    5[BANK0 ] unsigned char 
 15361 ;; Return value:  Size  Location     Type
 15362 ;;		None               void
 15363 ;; Registers used:
 15364 ;;		wreg, status,2, status,0
 15365 ;; Tracked objects:
 15366 ;;		On entry : 0/0
 15367 ;;		On exit  : 0/0
 15368 ;;		Unchanged: 0/0
 15369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;Total ram usage:        1 bytes
 15375 ;; Hardware stack levels used:    1
 15376 ;; Hardware stack levels required when called:    3
 15377 ;; This function calls:
 15378 ;;		Nothing
 15379 ;; This function is called by:
 15380 ;;		_PS_2_INIT
 15381 ;;		_Send_PS2
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _Clock_TRIS
 15387  1899                     _Clock_TRIS:	
 15388                           
 15389                           ;incstack = 0
 15390                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15391                           ;Clock_TRIS@direction stored from wreg
 15392  1899  0020               	movlb	0	; select bank0
 15393  189A  00A5               	movwf	Clock_TRIS@direction
 15394                           
 15395                           ;PS_2.c: 88: if(direction == 0)
 15396  189B  08A5               	movf	Clock_TRIS@direction,f
 15397  189C  1D03               	skipz
 15398  189D  28A1               	goto	l657
 15399                           
 15400                           ;PS_2.c: 89: {
 15401                           ;PS_2.c: 90: TRISAbits.TRISA5 = 0;
 15402  189E  0021               	movlb	1	; select bank1
 15403  189F  128C               	bcf	12,5	;volatile
 15404                           
 15405                           ;PS_2.c: 91: }
 15406  18A0  0008               	return
 15407  18A1                     l657:	
 15408                           
 15409                           ;PS_2.c: 92: else
 15410                           ;PS_2.c: 93: {
 15411                           ;PS_2.c: 94: TRISAbits.TRISA5 = 1;
 15412  18A1  0021               	movlb	1	; select bank1
 15413  18A2  168C               	bsf	12,5	;volatile
 15414  18A3  0008               	return
 15415  18A4                     __end_of_Clock_TRIS:	
 15416                           
 15417                           	psect	text47
 15418  1A4E                     __ptext47:	
 15419 ;; *************** function _CheckSum_byte *****************
 15420 ;; Defined at:
 15421 ;;		line 282 in file "MISC.c"
 15422 ;; Parameters:    Size  Location     Type
 15423 ;;  This            2    5[BANK0 ] unsigned int 
 15424 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15425 ;; Auto vars:     Size  Location     Type
 15426 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15427 ;;  i               1   12[BANK0 ] unsigned char 
 15428 ;;  Parity          1   11[BANK0 ] unsigned char 
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      unsigned char 
 15431 ;; Registers used:
 15432 ;;		wreg, status,2, status,0
 15433 ;; Tracked objects:
 15434 ;;		On entry : 0/0
 15435 ;;		On exit  : 0/0
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15438 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15442 ;;Total ram usage:        8 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    3
 15445 ;; This function calls:
 15446 ;;		Nothing
 15447 ;; This function is called by:
 15448 ;;		_UARTchar
 15449 ;;		_PS_2_Update
 15450 ;;		_Send_PS2
 15451 ;; This function uses a non-reentrant model
 15452 ;;
 15453                           
 15454                           
 15455                           ;psect for function _CheckSum_byte
 15456  1A4E                     _CheckSum_byte:	
 15457                           
 15458                           ;MISC.c: 284: char i = 0;
 15459                           
 15460                           ;incstack = 0
 15461                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15462  1A4E  0020               	movlb	0	; select bank0
 15463  1A4F  01AC               	clrf	CheckSum_byte@i
 15464                           
 15465                           ;MISC.c: 285: unsigned char Parity = 0;
 15466  1A50  01AB               	clrf	CheckSum_byte@Parity
 15467                           
 15468                           ;MISC.c: 286: unsigned int ThisTemp = This;
 15469  1A51  0826               	movf	CheckSum_byte@This+1,w
 15470  1A52  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15471  1A53  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15472  1A54  0825               	movf	CheckSum_byte@This,w
 15473  1A55  01A9               	clrf	CheckSum_byte@ThisTemp
 15474  1A56  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15475                           
 15476                           ;MISC.c: 288: for (i =0; i<8; i++)
 15477  1A57  01AC               	clrf	CheckSum_byte@i
 15478  1A58  3008               	movlw	8
 15479  1A59  022C               	subwf	CheckSum_byte@i,w
 15480  1A5A  1803               	btfsc	3,0
 15481  1A5B  2A6F               	goto	l5681
 15482  1A5C                     l378:	
 15483                           
 15484                           ;MISC.c: 289: {
 15485                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 15486  1A5C  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15487  1A5D  2A62               	goto	l380
 15488                           
 15489                           ;MISC.c: 291: {
 15490                           ;MISC.c: 292: Parity++;
 15491  1A5E  3001               	movlw	1
 15492  1A5F  00A8               	movwf	??_CheckSum_byte
 15493  1A60  0828               	movf	??_CheckSum_byte,w
 15494  1A61  07AB               	addwf	CheckSum_byte@Parity,f
 15495  1A62                     l380:	
 15496                           
 15497                           ;MISC.c: 293: }
 15498                           ;MISC.c: 294: ThisTemp >>= 1;
 15499  1A62  3001               	movlw	1
 15500  1A63                     u7195:	
 15501  1A63  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15502  1A64  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15503  1A65  0B89               	decfsz	9,f
 15504  1A66  2A63               	goto	u7195
 15505  1A67  3001               	movlw	1
 15506  1A68  00A8               	movwf	??_CheckSum_byte
 15507  1A69  0828               	movf	??_CheckSum_byte,w
 15508  1A6A  07AC               	addwf	CheckSum_byte@i,f
 15509  1A6B  3008               	movlw	8
 15510  1A6C  022C               	subwf	CheckSum_byte@i,w
 15511  1A6D  1C03               	skipc
 15512  1A6E  2A5C               	goto	l378
 15513  1A6F                     l5681:	
 15514                           
 15515                           ;MISC.c: 295: }
 15516                           ;MISC.c: 296: if(Odd_Even == 3)
 15517  1A6F  0827               	movf	CheckSum_byte@Odd_Even,w
 15518  1A70  3A03               	xorlw	3
 15519  1A71  1D03               	skipz
 15520  1A72  2A79               	goto	l381
 15521                           
 15522                           ;MISC.c: 297: {
 15523                           ;MISC.c: 298: if(Parity % 2 == 0)
 15524  1A73  182B               	btfsc	CheckSum_byte@Parity,0
 15525  1A74  2A77               	goto	l5689
 15526                           
 15527                           ;MISC.c: 299: {
 15528                           ;MISC.c: 300: return 1;
 15529  1A75  3001               	movlw	1
 15530  1A76  0008               	return
 15531  1A77                     l5689:	
 15532                           
 15533                           ;MISC.c: 301: }
 15534                           ;MISC.c: 302: return 0;
 15535  1A77  3000               	movlw	0
 15536                           
 15537                           ;MISC.c: 303: }
 15538  1A78  0008               	return
 15539  1A79                     l381:	
 15540                           
 15541                           ;MISC.c: 304: else
 15542                           ;MISC.c: 305: {
 15543                           ;MISC.c: 306: if(Parity % 2 == 1)
 15544  1A79  1C2B               	btfss	CheckSum_byte@Parity,0
 15545  1A7A  2A7D               	goto	l5699
 15546                           
 15547                           ;MISC.c: 307: {
 15548                           ;MISC.c: 308: return 1;
 15549  1A7B  3001               	movlw	1
 15550  1A7C  0008               	return
 15551  1A7D                     l5699:	
 15552                           
 15553                           ;MISC.c: 309: }
 15554                           ;MISC.c: 310: return 0;
 15555  1A7D  3000               	movlw	0
 15556  1A7E  0008               	return
 15557  1A7F                     __end_of_CheckSum_byte:	
 15558                           
 15559                           	psect	text48
 15560  19AC                     __ptext48:	
 15561 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15562 ;; Defined at:
 15563 ;;		line 131 in file "PS_2.c"
 15564 ;; Parameters:    Size  Location     Type
 15565 ;;  DATA_CLK        1    wreg     unsigned char 
 15566 ;; Auto vars:     Size  Location     Type
 15567 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15568 ;; Return value:  Size  Location     Type
 15569 ;;		None               void
 15570 ;; Registers used:
 15571 ;;		wreg, status,2, status,0
 15572 ;; Tracked objects:
 15573 ;;		On entry : 0/0
 15574 ;;		On exit  : 0/0
 15575 ;;		Unchanged: 0/0
 15576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15581 ;;Total ram usage:        2 bytes
 15582 ;; Hardware stack levels used:    1
 15583 ;; Hardware stack levels required when called:    3
 15584 ;; This function calls:
 15585 ;;		Nothing
 15586 ;; This function is called by:
 15587 ;;		_main
 15588 ;;		_PS_2_Update
 15589 ;;		_Init_PS_2_Send
 15590 ;;		_Keyboard_Connected
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594                           
 15595                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15596  19AC                     _PS_2_DISABLE_INTERRUPT:	
 15597                           
 15598                           ;incstack = 0
 15599                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15600                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15601  19AC  0020               	movlb	0	; select bank0
 15602  19AD  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15603                           
 15604                           ;PS_2.c: 133: if(DATA_CLK == 0b00100000)
 15605  19AE  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15606  19AF  3A20               	xorlw	32
 15607  19B0  1D03               	skipz
 15608  19B1  29BE               	goto	l6113
 15609                           
 15610                           ;PS_2.c: 134: {
 15611                           ;PS_2.c: 137: IOCAN &= ~0b00100000;
 15612  19B2  30DF               	movlw	223
 15613  19B3  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15614  19B4  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15615  19B5  0027               	movlb	7	; select bank7
 15616  19B6  0592               	andwf	18,f	;volatile
 15617                           
 15618                           ;PS_2.c: 138: IOCAF &= ~0b00100000;
 15619  19B7  30DF               	movlw	223
 15620  19B8  0020               	movlb	0	; select bank0
 15621  19B9  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15622  19BA  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15623  19BB  0027               	movlb	7	; select bank7
 15624  19BC  0593               	andwf	19,f	;volatile
 15625                           
 15626                           ;PS_2.c: 139: }
 15627  19BD  0008               	return
 15628  19BE                     l6113:	
 15629                           
 15630                           ;PS_2.c: 140: else
 15631                           ;PS_2.c: 141: {
 15632                           ;PS_2.c: 144: IOCAN &= ~0b00010000;
 15633  19BE  30EF               	movlw	239
 15634  19BF  0020               	movlb	0	; select bank0
 15635  19C0  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15636  19C1  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15637  19C2  0027               	movlb	7	; select bank7
 15638  19C3  0592               	andwf	18,f	;volatile
 15639                           
 15640                           ;PS_2.c: 145: IOCAF &= ~0b00010000;
 15641  19C4  30EF               	movlw	239
 15642  19C5  0020               	movlb	0	; select bank0
 15643  19C6  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15644  19C7  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15645  19C8  0027               	movlb	7	; select bank7
 15646  19C9  0593               	andwf	19,f	;volatile
 15647  19CA  0008               	return
 15648  19CB                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15649                           
 15650                           	psect	text49
 15651  19CB                     __ptext49:	
 15652 ;; *************** function _InitApp *****************
 15653 ;; Defined at:
 15654 ;;		line 50 in file "user.c"
 15655 ;; Parameters:    Size  Location     Type
 15656 ;;		None
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;		None
 15659 ;; Return value:  Size  Location     Type
 15660 ;;		None               void
 15661 ;; Registers used:
 15662 ;;		wreg, status,2
 15663 ;; Tracked objects:
 15664 ;;		On entry : 0/0
 15665 ;;		On exit  : 0/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;Total ram usage:        0 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    3
 15675 ;; This function calls:
 15676 ;;		Nothing
 15677 ;; This function is called by:
 15678 ;;		_main
 15679 ;; This function uses a non-reentrant model
 15680 ;;
 15681                           
 15682                           
 15683                           ;psect for function _InitApp
 15684  19CB                     _InitApp:	
 15685                           
 15686                           ;user.c: 52: LATC =0;
 15687                           
 15688                           ;incstack = 0
 15689                           ; Regs used in _InitApp: [wreg+status,2]
 15690  19CB  0022               	movlb	2	; select bank2
 15691  19CC  018E               	clrf	14	;volatile
 15692                           
 15693                           ;user.c: 53: LATA =0;
 15694  19CD  018C               	clrf	12	;volatile
 15695                           
 15696                           ;user.c: 54: TRISCbits.TRISC2 = 0;
 15697  19CE  0021               	movlb	1	; select bank1
 15698  19CF  110E               	bcf	14,2	;volatile
 15699                           
 15700                           ;user.c: 55: TRISCbits.TRISC1 = 0;
 15701  19D0  108E               	bcf	14,1	;volatile
 15702                           
 15703                           ;user.c: 56: TRISCbits.TRISC3 = 0;
 15704  19D1  118E               	bcf	14,3	;volatile
 15705                           
 15706                           ;user.c: 57: TRISCbits.TRISC4 = 0;
 15707  19D2  120E               	bcf	14,4	;volatile
 15708                           
 15709                           ;user.c: 58: TRISAbits.TRISA2 = 1;
 15710  19D3  150C               	bsf	12,2	;volatile
 15711                           
 15712                           ;user.c: 59: TRISCbits.TRISC0 = 0;
 15713  19D4  100E               	bcf	14,0	;volatile
 15714                           
 15715                           ;user.c: 62: LATC |= 0b00000010;
 15716  19D5  0022               	movlb	2	; select bank2
 15717  19D6  148E               	bsf	14,1	;volatile
 15718                           
 15719                           ;user.c: 63: PPSLOCK =0;
 15720  19D7  003C               	movlb	28	; select bank28
 15721  19D8  018F               	clrf	15	;volatile
 15722                           
 15723                           ;user.c: 64: RC2PPS = 0b00010100;
 15724  19D9  3014               	movlw	20
 15725  19DA  003D               	movlb	29	; select bank29
 15726  19DB  00A2               	movwf	34	;volatile
 15727                           
 15728                           ;user.c: 65: CKPPS = 0b00010010;
 15729  19DC  3012               	movlw	18
 15730  19DD  003C               	movlb	28	; select bank28
 15731  19DE  00A5               	movwf	37	;volatile
 15732                           
 15733                           ;user.c: 66: RXPPS = 0b00010101;
 15734  19DF  3015               	movlw	21
 15735  19E0  00A4               	movwf	36	;volatile
 15736                           
 15737                           ;user.c: 67: PPSLOCK =1;
 15738  19E1  3001               	movlw	1
 15739  19E2  008F               	movwf	15	;volatile
 15740                           
 15741                           ;user.c: 69: ANSELA &= ~0xFF;
 15742  19E3  0023               	movlb	3	; select bank3
 15743  19E4  018C               	clrf	12	;volatile
 15744                           
 15745                           ;user.c: 70: ANSELA |= 0b00000100;
 15746  19E5  150C               	bsf	12,2	;volatile
 15747                           
 15748                           ;user.c: 71: ANSELC &= ~0xFF;
 15749  19E6  018E               	clrf	14	;volatile
 15750                           
 15751                           ;user.c: 72: OPTION_REGbits.nWPUEN = 0;
 15752  19E7  0021               	movlb	1	; select bank1
 15753  19E8  1395               	bcf	21,7	;volatile
 15754                           
 15755                           ;user.c: 73: WPUC = 0b00100000;
 15756  19E9  3020               	movlw	32
 15757  19EA  0024               	movlb	4	; select bank4
 15758  19EB  008E               	movwf	14	;volatile
 15759                           
 15760                           ;user.c: 74: WPUA = 0;
 15761  19EC  018C               	clrf	12	;volatile
 15762  19ED  0008               	return
 15763  19EE                     __end_of_InitApp:	
 15764                           
 15765                           	psect	text50
 15766  190F                     __ptext50:	
 15767 ;; *************** function _ConfigureOscillator *****************
 15768 ;; Defined at:
 15769 ;;		line 18 in file "system.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;		None
 15772 ;; Auto vars:     Size  Location     Type
 15773 ;;		None
 15774 ;; Return value:  Size  Location     Type
 15775 ;;		None               void
 15776 ;; Registers used:
 15777 ;;		wreg, status,2, status,0
 15778 ;; Tracked objects:
 15779 ;;		On entry : 0/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;Total ram usage:        1 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:    3
 15790 ;; This function calls:
 15791 ;;		Nothing
 15792 ;; This function is called by:
 15793 ;;		_main
 15794 ;; This function uses a non-reentrant model
 15795 ;;
 15796                           
 15797                           
 15798                           ;psect for function _ConfigureOscillator
 15799  190F                     _ConfigureOscillator:	
 15800                           
 15801                           ;system.c: 26: OSCCON= 0b11110000;
 15802                           
 15803                           ;incstack = 0
 15804                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15805  190F  30F0               	movlw	240
 15806  1910  0021               	movlb	1	; select bank1
 15807  1911  0099               	movwf	25	;volatile
 15808  1912                     l5141:	
 15809                           ;system.c: 27: while(!(OSCSTAT & HFIOFS));
 15810                           
 15811  1912  3000               	movlw	0
 15812  1913  181A               	btfsc	26,0	;volatile
 15813  1914  3001               	movlw	1
 15814  1915  051A               	andwf	26,w	;volatile
 15815  1916  1903               	btfsc	3,2
 15816  1917  2912               	goto	l5141
 15817  1918                     l5143:	
 15818                           ;system.c: 28: while(!(OSCSTAT & = 0b01000000));
 15819                           
 15820  1918  3040               	movlw	64
 15821  1919  0020               	movlb	0	; select bank0
 15822  191A  00A5               	movwf	??_ConfigureOscillator
 15823  191B  0825               	movf	??_ConfigureOscillator,w
 15824  191C  0021               	movlb	1	; select bank1
 15825  191D  059A               	andwf	26,f	;volatile
 15826  191E  1D03               	btfss	3,2
 15827  191F  0008               	return
 15828  1920  2918               	goto	l5143
 15829  1921                     __end_of_ConfigureOscillator:	
 15830                           
 15831                           	psect	intentry
 15832  0004                     __pintentry:	
 15833 ;; *************** function _isr *****************
 15834 ;; Defined at:
 15835 ;;		line 52 in file "interrupts.c"
 15836 ;; Parameters:    Size  Location     Type
 15837 ;;		None
 15838 ;; Auto vars:     Size  Location     Type
 15839 ;;  rx              1    4[BANK0 ] unsigned char 
 15840 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15841 ;; Return value:  Size  Location     Type
 15842 ;;		None               void
 15843 ;; Registers used:
 15844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15845 ;; Tracked objects:
 15846 ;;		On entry : 0/0
 15847 ;;		On exit  : 0/0
 15848 ;;		Unchanged: 0/0
 15849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;Total ram usage:        4 bytes
 15855 ;; Hardware stack levels used:    1
 15856 ;; Hardware stack levels required when called:    2
 15857 ;; This function calls:
 15858 ;;		i1_READ_PS_2_PIN
 15859 ;;		i1_ReadUSART
 15860 ;;		i1_UART_send_break
 15861 ;;		i1_UARTchar
 15862 ;; This function is called by:
 15863 ;;		Interrupt level 1
 15864 ;; This function uses a non-reentrant model
 15865 ;;
 15866                           
 15867  0004                     _isr:	
 15868                           
 15869                           ;incstack = 0
 15870                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15871  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15872  0005  3180               	pagesel	$
 15873  0006  0020               	movlb	0	; select bank0
 15874  0007  087F               	movf	127,w
 15875  0008  00A2               	movwf	??_isr+1
 15876                           
 15877                           ;interrupts.c: 54: unsigned char rx;
 15878                           ;interrupts.c: 55: unsigned char Rx_fault =0;
 15879  0009  01A3               	clrf	isr@Rx_fault
 15880                           
 15881                           ;interrupts.c: 57: if(IOCAF & 0b00100000)
 15882  000A  0027               	movlb	7	; select bank7
 15883  000B  1E93               	btfss	19,5	;volatile
 15884  000C  287C               	goto	i1l61
 15885                           
 15886                           ;interrupts.c: 58: {
 15887                           ;interrupts.c: 60: LATC |= 0b00010000;
 15888  000D  0022               	movlb	2	; select bank2
 15889  000E  160E               	bsf	14,4	;volatile
 15890                           
 15891                           ;interrupts.c: 61: if(PS_2_bits <44)
 15892  000F  302C               	movlw	44
 15893  0010  0020               	movlb	0	; select bank0
 15894  0011  0268               	subwf	_PS_2_bits,w
 15895  0012  1803               	skipnc
 15896  0013  287A               	goto	i1l5493
 15897                           
 15898                           ;interrupts.c: 62: {
 15899                           ;interrupts.c: 63: if(PS_2_bits <11 )
 15900  0014  300B               	movlw	11
 15901  0015  0268               	subwf	_PS_2_bits,w
 15902  0016  1803               	skipnc
 15903  0017  2830               	goto	i1l5467
 15904                           
 15905                           ;interrupts.c: 64: {
 15906                           ;interrupts.c: 65: PS_2_Read_Data_FirstTEMP <<= 1;
 15907  0018  3001               	movlw	1
 15908  0019  0024               	movlb	4	; select bank4
 15909  001A                     u681_25:	
 15910  001A  35A0               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15911  001B  0DA1               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15912  001C  0B89               	decfsz	9,f
 15913  001D  281A               	goto	u681_25
 15914                           
 15915                           ;interrupts.c: 66: if(READ_PS_2_PIN(0b00010000))
 15916  001E  3010               	movlw	16
 15917  001F  3199  2133  3180   	fcall	i1_READ_PS_2_PIN
 15918  0022  3A00               	xorlw	0
 15919  0023  1903               	skipnz
 15920  0024  282A               	goto	i1l5463
 15921                           
 15922                           ;interrupts.c: 67: {
 15923                           ;interrupts.c: 68: PS_2_Read_Data_FirstTEMP++;
 15924  0025  3001               	movlw	1
 15925  0026  0024               	movlb	4	; select bank4
 15926  0027  07A0               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15927  0028  3000               	movlw	0
 15928  0029  3DA1               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15929  002A                     i1l5463:	
 15930                           
 15931                           ;interrupts.c: 69: }
 15932                           ;interrupts.c: 70: PS_2_Read_Data_SecondTEMP = 0;
 15933  002A  0024               	movlb	4	; select bank4
 15934  002B  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15935  002C  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15936                           
 15937                           ;interrupts.c: 71: PS_2_Read_Data_ThirdTEMP = 0;
 15938  002D  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15939  002E  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15940                           
 15941                           ;interrupts.c: 72: }
 15942  002F  2872               	goto	i1l5489
 15943  0030                     i1l5467:	
 15944                           
 15945                           ;interrupts.c: 73: else if(PS_2_bits <22 )
 15946  0030  3016               	movlw	22
 15947  0031  0020               	movlb	0	; select bank0
 15948  0032  0268               	subwf	_PS_2_bits,w
 15949  0033  1803               	skipnc
 15950  0034  2848               	goto	i1l5475
 15951                           
 15952                           ;interrupts.c: 74: {
 15953                           ;interrupts.c: 75: PS_2_Read_Data_SecondTEMP <<= 1;
 15954  0035  3001               	movlw	1
 15955  0036  0024               	movlb	4	; select bank4
 15956  0037                     u684_25:	
 15957  0037  35A4               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15958  0038  0DA5               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15959  0039  0B89               	decfsz	9,f
 15960  003A  2837               	goto	u684_25
 15961                           
 15962                           ;interrupts.c: 76: if(READ_PS_2_PIN(0b00010000))
 15963  003B  3010               	movlw	16
 15964  003C  3199  2133  3180   	fcall	i1_READ_PS_2_PIN
 15965  003F  3A00               	xorlw	0
 15966  0040  1903               	skipnz
 15967  0041  2872               	goto	i1l5489
 15968                           
 15969                           ;interrupts.c: 77: {
 15970                           ;interrupts.c: 78: PS_2_Read_Data_SecondTEMP++;
 15971  0042  3001               	movlw	1
 15972  0043  0024               	movlb	4	; select bank4
 15973  0044  07A4               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15974  0045  3000               	movlw	0
 15975  0046  3DA5               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15976                           
 15977                           ;interrupts.c: 79: }
 15978                           ;interrupts.c: 80: }
 15979  0047  2872               	goto	i1l5489
 15980  0048                     i1l5475:	
 15981                           
 15982                           ;interrupts.c: 81: else if(PS_2_bits <33 )
 15983  0048  3021               	movlw	33
 15984  0049  0020               	movlb	0	; select bank0
 15985  004A  0268               	subwf	_PS_2_bits,w
 15986  004B  1803               	skipnc
 15987  004C  2860               	goto	i1l5483
 15988                           
 15989                           ;interrupts.c: 82: {
 15990                           ;interrupts.c: 83: PS_2_Read_Data_ThirdTEMP <<= 1;
 15991  004D  3001               	movlw	1
 15992  004E  0024               	movlb	4	; select bank4
 15993  004F                     u687_25:	
 15994  004F  35A6               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15995  0050  0DA7               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15996  0051  0B89               	decfsz	9,f
 15997  0052  284F               	goto	u687_25
 15998                           
 15999                           ;interrupts.c: 84: if(READ_PS_2_PIN(0b00010000))
 16000  0053  3010               	movlw	16
 16001  0054  3199  2133  3180   	fcall	i1_READ_PS_2_PIN
 16002  0057  3A00               	xorlw	0
 16003  0058  1903               	skipnz
 16004  0059  2872               	goto	i1l5489
 16005                           
 16006                           ;interrupts.c: 85: {
 16007                           ;interrupts.c: 86: PS_2_Read_Data_ThirdTEMP++;
 16008  005A  3001               	movlw	1
 16009  005B  0024               	movlb	4	; select bank4
 16010  005C  07A6               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16011  005D  3000               	movlw	0
 16012  005E  3DA7               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16013                           
 16014                           ;interrupts.c: 87: }
 16015                           ;interrupts.c: 88: }
 16016  005F  2872               	goto	i1l5489
 16017  0060                     i1l5483:	
 16018                           
 16019                           ;interrupts.c: 89: else
 16020                           ;interrupts.c: 90: {
 16021                           ;interrupts.c: 91: PS_2_Read_Data_ForthTEMP <<= 1;
 16022  0060  3001               	movlw	1
 16023  0061  0024               	movlb	4	; select bank4
 16024  0062                     u689_25:	
 16025  0062  35A2               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16026  0063  0DA3               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16027  0064  0B89               	decfsz	9,f
 16028  0065  2862               	goto	u689_25
 16029                           
 16030                           ;interrupts.c: 92: if(READ_PS_2_PIN(0b00010000))
 16031  0066  3010               	movlw	16
 16032  0067  3199  2133  3180   	fcall	i1_READ_PS_2_PIN
 16033  006A  3A00               	xorlw	0
 16034  006B  1903               	skipnz
 16035  006C  2872               	goto	i1l5489
 16036                           
 16037                           ;interrupts.c: 93: {
 16038                           ;interrupts.c: 94: PS_2_Read_Data_ForthTEMP++;
 16039  006D  3001               	movlw	1
 16040  006E  0024               	movlb	4	; select bank4
 16041  006F  07A2               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16042  0070  3000               	movlw	0
 16043  0071  3DA3               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16044  0072                     i1l5489:	
 16045                           
 16046                           ;interrupts.c: 95: }
 16047                           ;interrupts.c: 96: }
 16048                           ;interrupts.c: 97: PS_2_bits++;
 16049  0072  3001               	movlw	1
 16050  0073  0020               	movlb	0	; select bank0
 16051  0074  00A1               	movwf	??_isr
 16052  0075  0821               	movf	??_isr,w
 16053  0076  07E8               	addwf	_PS_2_bits,f
 16054                           
 16055                           ;interrupts.c: 98: Read_Timer = 0;
 16056  0077  0022               	movlb	2	; select bank2
 16057  0078  01E9               	clrf	_Read_Timer^(0+256)
 16058  0079  01EA               	clrf	(_Read_Timer+1)^(0+256)
 16059  007A                     i1l5493:	
 16060                           
 16061                           ;interrupts.c: 99: }
 16062                           ;interrupts.c: 100: IOCAF &= ~0b00100000;
 16063  007A  30DF               	movlw	223
 16064  007B  287F               	goto	L21
 16065  007C                     i1l61:	
 16066                           ;interrupts.c: 101: }
 16067                           
 16068                           
 16069                           ;interrupts.c: 102: else if (IOCAF & 0b00010000)
 16070  007C  1E13               	btfss	19,4	;volatile
 16071  007D  2885               	goto	i1l74
 16072                           
 16073                           ;interrupts.c: 103: {
 16074                           ;interrupts.c: 104: IOCAF &= ~0b00010000;
 16075  007E  30EF               	movlw	239
 16076  007F                     L21:	
 16077  007F  0020               	movlb	0	; select bank0
 16078  0080  00A1               	movwf	??_isr
 16079  0081  0821               	movf	??_isr,w
 16080  0082  0027               	movlb	7	; select bank7
 16081  0083  0593               	andwf	19,f	;volatile
 16082                           
 16083                           ;interrupts.c: 105: }
 16084  0084  28D3               	goto	i1l87
 16085  0085                     i1l74:	
 16086                           
 16087                           ;interrupts.c: 106: else if (PIR1bits.RCIF)
 16088  0085  0020               	movlb	0	; select bank0
 16089  0086  1E91               	btfss	17,5	;volatile
 16090  0087  28B5               	goto	i1l76
 16091                           
 16092                           ;interrupts.c: 107: {
 16093                           ;interrupts.c: 109: LATC |= 0b00001000;
 16094  0088  0022               	movlb	2	; select bank2
 16095  0089  158E               	bsf	14,3	;volatile
 16096                           
 16097                           ;interrupts.c: 110: SinLEDtimer = 0;
 16098  008A  01E3               	clrf	_SinLEDtimer^(0+256)
 16099  008B  01E4               	clrf	(_SinLEDtimer+1)^(0+256)
 16100                           
 16101                           ;interrupts.c: 111: Rx_fault = 0;
 16102  008C  0020               	movlb	0	; select bank0
 16103  008D  01A3               	clrf	isr@Rx_fault
 16104                           
 16105                           ;interrupts.c: 112: if(RC1STAbits.FERR)
 16106  008E  0023               	movlb	3	; select bank3
 16107  008F  1D1D               	btfss	29,2	;volatile
 16108  0090  2894               	goto	i1l5505
 16109                           
 16110                           ;interrupts.c: 113: {
 16111                           ;interrupts.c: 114: Rx_fault =1;
 16112  0091  0020               	movlb	0	; select bank0
 16113  0092  01A3               	clrf	isr@Rx_fault
 16114  0093  0AA3               	incf	isr@Rx_fault,f
 16115  0094                     i1l5505:	
 16116                           
 16117                           ;interrupts.c: 115: }
 16118                           ;interrupts.c: 116: rx = ReadUSART();
 16119  0094  3198  208E  3180   	fcall	i1_ReadUSART
 16120  0097  0020               	movlb	0	; select bank0
 16121  0098  00A1               	movwf	??_isr
 16122  0099  0821               	movf	??_isr,w
 16123  009A  00A4               	movwf	isr@rx
 16124                           
 16125                           ;interrupts.c: 117: if(Rx_fault == 1)
 16126  009B  0823               	movf	isr@Rx_fault,w
 16127  009C  3A01               	xorlw	1
 16128  009D  1D03               	skipz
 16129  009E  28A6               	goto	i1l5513
 16130                           
 16131                           ;interrupts.c: 118: {
 16132                           ;interrupts.c: 119: if(rx == 0)
 16133  009F  08A4               	movf	isr@rx,f
 16134  00A0  1D03               	skipz
 16135  00A1  28B2               	goto	i1l5515
 16136                           
 16137                           ;interrupts.c: 120: {
 16138                           ;interrupts.c: 121: UART_send_break();
 16139  00A2  3198  2069  3180   	fcall	i1_UART_send_break
 16140                           
 16141                           ;interrupts.c: 122: }
 16142                           ;interrupts.c: 123: }
 16143  00A5  28B2               	goto	i1l5515
 16144  00A6                     i1l5513:	
 16145                           
 16146                           ;interrupts.c: 124: else
 16147                           ;interrupts.c: 125: {
 16148                           ;interrupts.c: 126: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16149  00A6  01F8               	clrf	i1UARTchar@NinethBit_override
 16150  00A7  0AF8               	incf	i1UARTchar@NinethBit_override,f
 16151  00A8  3000               	movlw	0
 16152  00A9  0023               	movlb	3	; select bank3
 16153  00AA  181D               	btfsc	29,0	;volatile
 16154  00AB  3001               	movlw	1
 16155  00AC  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16156  00AD  0020               	movlb	0	; select bank0
 16157  00AE  0824               	movf	isr@rx,w
 16158  00AF  319C  240B  3180   	fcall	i1_UARTchar
 16159  00B2                     i1l5515:	
 16160                           
 16161                           ;interrupts.c: 127: }
 16162                           ;interrupts.c: 128: PIR1bits.RCIF = 0;
 16163  00B2  0020               	movlb	0	; select bank0
 16164  00B3  1291               	bcf	17,5	;volatile
 16165                           
 16166                           ;interrupts.c: 129: }
 16167  00B4  28D3               	goto	i1l87
 16168  00B5                     i1l76:	
 16169                           
 16170                           ;interrupts.c: 130: else if(PIR1bits.TMR2IF)
 16171  00B5  1C91               	btfss	17,1	;volatile
 16172  00B6  28D3               	goto	i1l87
 16173                           
 16174                           ;interrupts.c: 131: {
 16175                           ;interrupts.c: 133: PIE1bits.TMR2IE = 0;
 16176  00B7  0021               	movlb	1	; select bank1
 16177  00B8  1091               	bcf	17,1	;volatile
 16178                           
 16179                           ;interrupts.c: 134: blinkdelay++;LATC ^= 0b00000010;
 16180  00B9  3001               	movlw	1
 16181  00BA  0020               	movlb	0	; select bank0
 16182  00BB  00A1               	movwf	??_isr
 16183  00BC  0821               	movf	??_isr,w
 16184  00BD  0021               	movlb	1	; select bank1
 16185  00BE  07EA               	addwf	_blinkdelay^(0+128),f
 16186  00BF  3002               	movlw	2
 16187  00C0  0020               	movlb	0	; select bank0
 16188  00C1  00A1               	movwf	??_isr
 16189  00C2  0821               	movf	??_isr,w
 16190  00C3  0022               	movlb	2	; select bank2
 16191  00C4  068E               	xorwf	14,f	;volatile
 16192                           
 16193                           ;interrupts.c: 135: if(blinkdelay > 4)
 16194  00C5  3005               	movlw	5
 16195  00C6  0021               	movlb	1	; select bank1
 16196  00C7  026A               	subwf	_blinkdelay^(0+128),w
 16197  00C8  1C03               	skipc
 16198  00C9  28D1               	goto	i1l5529
 16199                           
 16200                           ;interrupts.c: 136: {
 16201                           ;interrupts.c: 137: if(Alarm)
 16202  00CA  0868               	movf	_Alarm^(0+128),w
 16203  00CB  1D03               	skipz
 16204                           
 16205                           ;interrupts.c: 138: {
 16206                           ;interrupts.c: 140: }
 16207  00CC  28CF               	goto	i1l5527
 16208                           
 16209                           ;interrupts.c: 141: else
 16210                           ;interrupts.c: 142: {
 16211                           ;interrupts.c: 143: LATC |= 0b00000010;
 16212  00CD  0022               	movlb	2	; select bank2
 16213  00CE  148E               	bsf	14,1	;volatile
 16214  00CF                     i1l5527:	
 16215                           
 16216                           ;interrupts.c: 144: }
 16217                           ;interrupts.c: 145: blinkdelay =0;
 16218  00CF  0021               	movlb	1	; select bank1
 16219  00D0  01EA               	clrf	_blinkdelay^(0+128)
 16220  00D1                     i1l5529:	
 16221                           
 16222                           ;interrupts.c: 146: }
 16223                           ;interrupts.c: 147: PIR1bits.TMR2IF =0;
 16224  00D1  0020               	movlb	0	; select bank0
 16225  00D2  1091               	bcf	17,1	;volatile
 16226  00D3                     i1l87:	
 16227                           ;interrupts.c: 150: else
 16228                           ;interrupts.c: 151: {
 16229                           
 16230                           ;interrupts.c: 149: }
 16231                           
 16232  00D3  0020               	movlb	0	; select bank0
 16233  00D4  0822               	movf	??_isr+1,w
 16234  00D5  00FF               	movwf	127
 16235  00D6  107E               	bcf	126,0	;clear compiler interrupt flag
 16236  00D7  0009               	retfie
 16237  00D8                     __end_of_isr:	
 16238                           
 16239                           	psect	text52
 16240  1C0B                     __ptext52:	
 16241 ;; *************** function i1_UARTchar *****************
 16242 ;; Defined at:
 16243 ;;		line 189 in file "UART.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  data            1    wreg     unsigned char 
 16246 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 16247 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;  data            1    0[BANK0 ] unsigned char 
 16250 ;; Return value:  Size  Location     Type
 16251 ;;		None               void
 16252 ;; Registers used:
 16253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;Total ram usage:        7 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    1
 16266 ;; This function calls:
 16267 ;;		i1_CheckSum_byte
 16268 ;; This function is called by:
 16269 ;;		_isr
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           
 16274                           ;psect for function i1_UARTchar
 16275  1C0B                     i1_UARTchar:	
 16276                           
 16277                           ;incstack = 0
 16278                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16279                           ;i1UARTchar@data stored from wreg
 16280  1C0B  0020               	movlb	0	; select bank0
 16281  1C0C  00A0               	movwf	i1UARTchar@data
 16282                           
 16283                           ;UART.c: 192: if(TXSTAbits.TX9)
 16284  1C0D  0023               	movlb	3	; select bank3
 16285  1C0E  1F1E               	btfss	30,6	;volatile
 16286  1C0F  2C50               	goto	i1l5407
 16287                           
 16288                           ;UART.c: 193: {
 16289                           ;UART.c: 195: if(!NinethBit_override)
 16290  1C10  08F8               	movf	i1UARTchar@NinethBit_override,f
 16291  1C11  1903               	btfsc	3,2
 16292  1C12  2C3A               	goto	i1l5403
 16293  1C13  2C47               	goto	i1l5405
 16294  1C14                     i1l5397:	
 16295                           ;UART.c: 199: {
 16296                           ;UART.c: 200: case 1:
 16297                           
 16298                           ;UART.c: 196: {
 16299                           ;UART.c: 198: switch (PARITY)
 16300                           
 16301                           
 16302                           ;UART.c: 201: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16303  1C14  0020               	movlb	0	; select bank0
 16304  1C15  0820               	movf	i1UARTchar@data,w
 16305  1C16  00FA               	movwf	??i1_UARTchar
 16306  1C17  01FB               	clrf	??i1_UARTchar+1
 16307  1C18  087A               	movf	??i1_UARTchar,w
 16308  1C19  00F0               	movwf	i1CheckSum_byte@This
 16309  1C1A  087B               	movf	??i1_UARTchar+1,w
 16310  1C1B  00F1               	movwf	i1CheckSum_byte@This+1
 16311  1C1C  3003               	movlw	3
 16312  1C1D  2C27               	goto	L24
 16313  1C1E                     i1l5399:	
 16314                           ;UART.c: 203: case 2:
 16315                           
 16316                           ;UART.c: 202: break;
 16317                           
 16318                           
 16319                           ;UART.c: 204: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16320  1C1E  0020               	movlb	0	; select bank0
 16321  1C1F  0820               	movf	i1UARTchar@data,w
 16322  1C20  00FA               	movwf	??i1_UARTchar
 16323  1C21  01FB               	clrf	??i1_UARTchar+1
 16324  1C22  087A               	movf	??i1_UARTchar,w
 16325  1C23  00F0               	movwf	i1CheckSum_byte@This
 16326  1C24  087B               	movf	??i1_UARTchar+1,w
 16327  1C25  00F1               	movwf	i1CheckSum_byte@This+1
 16328  1C26  3002               	movlw	2
 16329  1C27                     L24:	
 16330  1C27  00FC               	movwf	??i1_UARTchar+2
 16331  1C28  087C               	movf	??i1_UARTchar+2,w
 16332  1C29  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16333  1C2A  3199  21EE  319C   	fcall	i1_CheckSum_byte
 16334  1C2D  00FD               	movwf	??i1_UARTchar+3
 16335  1C2E  0023               	movlb	3	; select bank3
 16336  1C2F  081E               	movf	30,w	;volatile
 16337  1C30  067D               	xorwf	??i1_UARTchar+3,w
 16338  1C31  39FE               	andlw	-2
 16339  1C32  067D               	xorwf	??i1_UARTchar+3,w
 16340  1C33  2C4F               	goto	L23
 16341  1C34                     i1l491:	
 16342                           ;UART.c: 206: case 3:
 16343                           
 16344                           ;UART.c: 205: break;
 16345                           
 16346                           
 16347                           ;UART.c: 207: TXSTAbits.TX9D = 1;
 16348  1C34  0023               	movlb	3	; select bank3
 16349  1C35  141E               	bsf	30,0	;volatile
 16350                           
 16351                           ;UART.c: 208: break;
 16352  1C36  2C50               	goto	i1l5407
 16353  1C37                     i1l492:	
 16354                           ;UART.c: 209: default:
 16355                           
 16356                           
 16357                           ;UART.c: 210: TXSTAbits.TX9D = 0;
 16358  1C37  0023               	movlb	3	; select bank3
 16359  1C38  101E               	bcf	30,0	;volatile
 16360                           
 16361                           ;UART.c: 212: }
 16362                           
 16363                           ;UART.c: 211: break;
 16364  1C39  2C50               	goto	i1l5407
 16365  1C3A                     i1l5403:	
 16366  1C3A  0020               	movlb	0	; select bank0
 16367  1C3B  0867               	movf	_PARITY,w
 16368                           
 16369                           ; Switch size 1, requested type "space"
 16370                           ; Number of cases is 3, Range of values is 1 to 3
 16371                           ; switch strategies available:
 16372                           ; Name         Instructions Cycles
 16373                           ; simple_byte           10     6 (average)
 16374                           ; direct_byte           15     9 (fixed)
 16375                           ; jumptable            263     9 (fixed)
 16376                           ;	Chosen strategy is simple_byte
 16377  1C3C  3A01               	xorlw	1	; case 1
 16378  1C3D  1903               	skipnz
 16379  1C3E  2C14               	goto	i1l5397
 16380  1C3F  3A03               	xorlw	3	; case 2
 16381  1C40  1903               	skipnz
 16382  1C41  2C1E               	goto	i1l5399
 16383  1C42  3A01               	xorlw	1	; case 3
 16384  1C43  1903               	skipnz
 16385  1C44  2C34               	goto	i1l491
 16386  1C45  2C37               	goto	i1l492
 16387                           
 16388                           ;UART.c: 213: }
 16389  1C46  2C50               	goto	i1l5407
 16390  1C47                     i1l5405:	
 16391                           
 16392                           ;UART.c: 214: else
 16393                           ;UART.c: 215: {
 16394                           ;UART.c: 216: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16395  1C47  3001               	movlw	1
 16396  1C48  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16397  1C49  00FA               	movwf	??i1_UARTchar
 16398  1C4A  0023               	movlb	3	; select bank3
 16399  1C4B  081E               	movf	30,w	;volatile
 16400  1C4C  067A               	xorwf	??i1_UARTchar,w
 16401  1C4D  39FE               	andlw	-2
 16402  1C4E  067A               	xorwf	??i1_UARTchar,w
 16403  1C4F                     L23:	
 16404  1C4F  009E               	movwf	30	;volatile
 16405  1C50                     i1l5407:	
 16406                           
 16407                           ;UART.c: 217: }
 16408                           ;UART.c: 218: }
 16409                           ;UART.c: 219: TXREG = data;
 16410  1C50  0020               	movlb	0	; select bank0
 16411  1C51  0820               	movf	i1UARTchar@data,w
 16412  1C52  0023               	movlb	3	; select bank3
 16413  1C53  009A               	movwf	26	;volatile
 16414  1C54  0008               	return
 16415  1C55                     __end_ofi1_UARTchar:	
 16416                           
 16417                           	psect	text53
 16418  19EE                     __ptext53:	
 16419 ;; *************** function i1_CheckSum_byte *****************
 16420 ;; Defined at:
 16421 ;;		line 282 in file "MISC.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;  This            2    0[COMMON] unsigned int 
 16424 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16427 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16428 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16429 ;; Return value:  Size  Location     Type
 16430 ;;                  1    wreg      unsigned char 
 16431 ;; Registers used:
 16432 ;;		wreg, status,2, status,0
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16438 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;Total ram usage:        8 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; This function calls:
 16445 ;;		Nothing
 16446 ;; This function is called by:
 16447 ;;		i1_UARTchar
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function i1_CheckSum_byte
 16453  19EE                     i1_CheckSum_byte:	
 16454                           
 16455                           ;MISC.c: 284: char i = 0;
 16456                           
 16457                           ;incstack = 0
 16458                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16459  19EE  01F7               	clrf	i1CheckSum_byte@i
 16460                           
 16461                           ;MISC.c: 285: unsigned char Parity = 0;
 16462  19EF  01F6               	clrf	i1CheckSum_byte@Parity
 16463                           
 16464                           ;MISC.c: 286: unsigned int ThisTemp = This;
 16465  19F0  0871               	movf	i1CheckSum_byte@This+1,w
 16466  19F1  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16467  19F2  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16468  19F3  0870               	movf	i1CheckSum_byte@This,w
 16469  19F4  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16470  19F5  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16471                           
 16472                           ;MISC.c: 288: for (i =0; i<8; i++)
 16473  19F6  01F7               	clrf	i1CheckSum_byte@i
 16474  19F7  3008               	movlw	8
 16475  19F8  0277               	subwf	i1CheckSum_byte@i,w
 16476  19F9  1803               	btfsc	3,0
 16477  19FA  2A0E               	goto	i1l5117
 16478  19FB                     i1l378:	
 16479                           
 16480                           ;MISC.c: 289: {
 16481                           ;MISC.c: 290: if((ThisTemp & 0x01) == 1)
 16482  19FB  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16483  19FC  2A01               	goto	i1l380
 16484                           
 16485                           ;MISC.c: 291: {
 16486                           ;MISC.c: 292: Parity++;
 16487  19FD  3001               	movlw	1
 16488  19FE  00F3               	movwf	??i1_CheckSum_byte
 16489  19FF  0873               	movf	??i1_CheckSum_byte,w
 16490  1A00  07F6               	addwf	i1CheckSum_byte@Parity,f
 16491  1A01                     i1l380:	
 16492                           
 16493                           ;MISC.c: 293: }
 16494                           ;MISC.c: 294: ThisTemp >>= 1;
 16495  1A01  3001               	movlw	1
 16496  1A02                     u640_25:	
 16497  1A02  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16498  1A03  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16499  1A04  0B89               	decfsz	9,f
 16500  1A05  2A02               	goto	u640_25
 16501  1A06  3001               	movlw	1
 16502  1A07  00F3               	movwf	??i1_CheckSum_byte
 16503  1A08  0873               	movf	??i1_CheckSum_byte,w
 16504  1A09  07F7               	addwf	i1CheckSum_byte@i,f
 16505  1A0A  3008               	movlw	8
 16506  1A0B  0277               	subwf	i1CheckSum_byte@i,w
 16507  1A0C  1C03               	skipc
 16508  1A0D  29FB               	goto	i1l378
 16509  1A0E                     i1l5117:	
 16510                           
 16511                           ;MISC.c: 295: }
 16512                           ;MISC.c: 296: if(Odd_Even == 3)
 16513  1A0E  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16514  1A0F  3A03               	xorlw	3
 16515  1A10  1D03               	skipz
 16516  1A11  2A18               	goto	i1l381
 16517                           
 16518                           ;MISC.c: 297: {
 16519                           ;MISC.c: 298: if(Parity % 2 == 0)
 16520  1A12  1876               	btfsc	i1CheckSum_byte@Parity,0
 16521  1A13  2A16               	goto	i1l5125
 16522                           
 16523                           ;MISC.c: 299: {
 16524                           ;MISC.c: 300: return 1;
 16525  1A14  3001               	movlw	1
 16526  1A15  0008               	return
 16527  1A16                     i1l5125:	
 16528                           
 16529                           ;MISC.c: 301: }
 16530                           ;MISC.c: 302: return 0;
 16531  1A16  3000               	movlw	0
 16532                           
 16533                           ;MISC.c: 303: }
 16534  1A17  0008               	return
 16535  1A18                     i1l381:	
 16536                           
 16537                           ;MISC.c: 304: else
 16538                           ;MISC.c: 305: {
 16539                           ;MISC.c: 306: if(Parity % 2 == 1)
 16540  1A18  1C76               	btfss	i1CheckSum_byte@Parity,0
 16541  1A19  2A1C               	goto	i1l5135
 16542                           
 16543                           ;MISC.c: 307: {
 16544                           ;MISC.c: 308: return 1;
 16545  1A1A  3001               	movlw	1
 16546  1A1B  0008               	return
 16547  1A1C                     i1l5135:	
 16548                           
 16549                           ;MISC.c: 309: }
 16550                           ;MISC.c: 310: return 0;
 16551  1A1C  3000               	movlw	0
 16552  1A1D  0008               	return
 16553  1A1E                     __end_ofi1_CheckSum_byte:	
 16554                           
 16555                           	psect	text54
 16556  1869                     __ptext54:	
 16557 ;; *************** function i1_UART_send_break *****************
 16558 ;; Defined at:
 16559 ;;		line 248 in file "UART.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;		None
 16562 ;; Auto vars:     Size  Location     Type
 16563 ;;		None
 16564 ;; Return value:  Size  Location     Type
 16565 ;;		None               void
 16566 ;; Registers used:
 16567 ;;		wreg
 16568 ;; Tracked objects:
 16569 ;;		On entry : 0/0
 16570 ;;		On exit  : 0/0
 16571 ;;		Unchanged: 0/0
 16572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;Total ram usage:        0 bytes
 16578 ;; Hardware stack levels used:    1
 16579 ;; This function calls:
 16580 ;;		Nothing
 16581 ;; This function is called by:
 16582 ;;		_isr
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function i1_UART_send_break
 16588  1869                     i1_UART_send_break:	
 16589                           
 16590                           ;UART.c: 250: TX1STA |= 0b00001000;
 16591                           
 16592                           ;incstack = 0
 16593                           ; Regs used in i1_UART_send_break: [wreg]
 16594  1869  0023               	movlb	3	; select bank3
 16595  186A  159E               	bsf	30,3	;volatile
 16596                           
 16597                           ;UART.c: 251: TXREG = 'd';
 16598  186B  3064               	movlw	100
 16599  186C  009A               	movwf	26	;volatile
 16600  186D  0008               	return
 16601  186E                     __end_ofi1_UART_send_break:	
 16602                           
 16603                           	psect	text55
 16604  188E                     __ptext55:	
 16605 ;; *************** function i1_ReadUSART *****************
 16606 ;; Defined at:
 16607 ;;		line 234 in file "UART.c"
 16608 ;; Parameters:    Size  Location     Type
 16609 ;;		None
 16610 ;; Auto vars:     Size  Location     Type
 16611 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;                  1    wreg      unsigned char 
 16614 ;; Registers used:
 16615 ;;		wreg
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;Total ram usage:        2 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; This function calls:
 16628 ;;		Nothing
 16629 ;; This function is called by:
 16630 ;;		_isr
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           
 16635                           ;psect for function i1_ReadUSART
 16636  188E                     i1_ReadUSART:	
 16637                           
 16638                           ;UART.c: 236: char data;
 16639                           ;UART.c: 238: if(RCSTAbits.FERR)
 16640                           
 16641                           ;incstack = 0
 16642                           ; Regs used in i1_ReadUSART: [wreg]
 16643  188E  0023               	movlb	3	; select bank3
 16644  188F  191D               	btfsc	29,2	;volatile
 16645                           
 16646                           ;UART.c: 240: if(RCSTAbits.OERR)
 16647  1890  1C9D               	btfss	29,1	;volatile
 16648  1891  2893               	goto	i1l5415
 16649                           
 16650                           ;UART.c: 241: RCSTAbits.CREN = 0;
 16651  1892  121D               	bcf	29,4	;volatile
 16652  1893                     i1l5415:	
 16653                           
 16654                           ;UART.c: 243: data = RCREG;
 16655  1893  0819               	movf	25,w	;volatile
 16656  1894  00F0               	movwf	??i1_ReadUSART
 16657  1895  0870               	movf	??i1_ReadUSART,w
 16658  1896  00F1               	movwf	i1ReadUSART@data
 16659                           
 16660                           ;UART.c: 245: return (data);
 16661  1897  0871               	movf	i1ReadUSART@data,w
 16662  1898  0008               	return
 16663  1899                     __end_ofi1_ReadUSART:	
 16664                           
 16665                           	psect	text56
 16666  1933                     __ptext56:	
 16667 ;; *************** function i1_READ_PS_2_PIN *****************
 16668 ;; Defined at:
 16669 ;;		line 171 in file "PS_2.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;  DATA_CLK        1    wreg     unsigned char 
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;                  1    wreg      unsigned char 
 16676 ;; Registers used:
 16677 ;;		wreg
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        1 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; This function calls:
 16690 ;;		Nothing
 16691 ;; This function is called by:
 16692 ;;		_isr
 16693 ;; This function uses a non-reentrant model
 16694 ;;
 16695                           
 16696                           
 16697                           ;psect for function i1_READ_PS_2_PIN
 16698  1933                     i1_READ_PS_2_PIN:	
 16699                           
 16700                           ;incstack = 0
 16701                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16702                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16703  1933  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16704                           
 16705                           ;PS_2.c: 173: if(DATA_CLK == 0b00100000)
 16706  1934  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16707  1935  3A20               	xorlw	32
 16708  1936  1D03               	skipz
 16709  1937  293F               	goto	i1l682
 16710                           
 16711                           ;PS_2.c: 174: {
 16712                           ;PS_2.c: 176: if((PORTA & 0b00100000) == 0b00100000)
 16713  1938  0020               	movlb	0	; select bank0
 16714  1939  1E8C               	btfss	12,5	;volatile
 16715  193A  293D               	goto	i1l5433
 16716                           
 16717                           ;PS_2.c: 177: {
 16718                           ;PS_2.c: 178: return (1);
 16719  193B  3001               	movlw	1
 16720                           
 16721                           ;PS_2.c: 179: }
 16722  193C  0008               	return
 16723  193D                     i1l5433:	
 16724                           
 16725                           ;PS_2.c: 180: else
 16726                           ;PS_2.c: 181: {
 16727                           ;PS_2.c: 182: return 0;
 16728  193D  3000               	movlw	0
 16729                           
 16730                           ;PS_2.c: 183: }
 16731                           ;PS_2.c: 184: }
 16732  193E  0008               	return
 16733  193F                     i1l682:	
 16734                           
 16735                           ;PS_2.c: 185: else
 16736                           ;PS_2.c: 186: {
 16737                           ;PS_2.c: 188: if((PORTA & 0b00010000) == 0b00010000)
 16738  193F  0020               	movlb	0	; select bank0
 16739  1940  1E0C               	btfss	12,4	;volatile
 16740  1941  2944               	goto	i1l5443
 16741                           
 16742                           ;PS_2.c: 189: {
 16743                           ;PS_2.c: 190: return (1);
 16744  1942  3001               	movlw	1
 16745                           
 16746                           ;PS_2.c: 191: }
 16747  1943  0008               	return
 16748  1944                     i1l5443:	
 16749                           
 16750                           ;PS_2.c: 192: else
 16751                           ;PS_2.c: 193: {
 16752                           ;PS_2.c: 194: return 0;
 16753  1944  3000               	movlw	0
 16754  1945  0008               	return
 16755  1946                     __end_ofi1_READ_PS_2_PIN:	
 16756  007E                     btemp	set	126	;btemp
 16757  007E                     pic14e$flags	set	126
 16758  007E                     wtemp	set	126
 16759  007E                     wtemp0	set	126
 16760  0080                     wtemp1	set	128
 16761  0082                     wtemp2	set	130
 16762  0084                     wtemp3	set	132
 16763  0086                     wtemp4	set	134
 16764  0088                     wtemp5	set	136
 16765  007F                     wtemp6	set	127
 16766  007E                     ttemp	set	126
 16767  007E                     ttemp0	set	126
 16768  0081                     ttemp1	set	129
 16769  0084                     ttemp2	set	132
 16770  0087                     ttemp3	set	135
 16771  007F                     ttemp4	set	127
 16772  007E                     ltemp	set	126
 16773  007E                     ltemp0	set	126
 16774  0082                     ltemp1	set	130
 16775  0086                     ltemp2	set	134
 16776  0080                     ltemp3	set	128


Data Sizes:
    Strings     848
    Constant    507
    Data        14
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      18
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_33(CODE[45]), STR_32(CODE[41]), STR_31(CODE[40]), STR_30(CODE[47]), 
		 -> STR_29(CODE[46]), STR_24(CODE[37]), STR_23(CODE[33]), STR_22(CODE[32]), 
		 -> STR_21(CODE[39]), STR_20(CODE[38]), STR_17(CODE[33]), STR_16(CODE[29]), 
		 -> STR_15(CODE[28]), STR_14(CODE[35]), STR_13(CODE[34]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1072$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK2[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[20]), PS_2_Update@buf(BANK5[60]), STR_28(CODE[3]), STR_27(CODE[35]), 
		 -> STR_26(CODE[18]), STR_25(CODE[3]), SetBaud@buf(BANK2[50]), STR_19(CODE[15]), 
		 -> STR_18(CODE[3]), Init_System@buf(BANK1[60]), STR_12(CODE[3]), STR_11(CODE[20]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[22]), STR_7(CODE[21]), 
		 -> STR_6(CODE[24]), STR_5(CODE[35]), STR_4(CODE[3]), Version(BANK4[4]), 
		 -> STR_3(CODE[19]), STR_2(CODE[26]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  155698
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11524
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3016
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   57306
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   49257
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   23495
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5131
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4742
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         70    70      0   17839
                                             52 BANK0      1     1      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    3357
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    7944
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3095
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    7978
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    4931
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2985
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     542
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                  i1_UART_send_break
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     427
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      12      13       22.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jan 21 13:19:00 2015

              _PS_2_DISABLE_INTERRUPT 19AC                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 0028                     ??_ReadFlash_4Byte 002E  
                                   _i 00EB                          ___fldiv@cntr 0045  
                        ___fldiv@sign 0047                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l170 0FE7                                   l158 0E5D  
                                 l264 1B1E                                   l266 1B37  
                                 l380 1A62                                   l381 1A79  
                                 l517 1AE2                                   l519 1B01  
                                 l480 1B7C                                   l529 15DC  
                                 l378 1A5C                                   l474 1B65  
                                 l491 1C80                                   l811 0518  
                                 l492 1C83                                   l662 18AC  
                                 l478 1B73                                   l823 0782  
                                 l831 0670                                   l657 18A1  
                                 l682 192D                                   l667 18FB  
                                 l774 042A                                   l884 16CE  
                                 l885 1724                                   l969 1AD3  
                                 l978 18B5                                   _MEM 016B  
                                 _PR2 001B                                   _isr 0004  
                        __CFG_BORV$LO 0000                                   wreg 0009  
                        ___flmul@cntr 005A                          ___flmul@sign 005B  
          __end_of_ScanCodeFunctionE0 09D3                         ___flpack@sign 002A  
                                l1033 1B97                                  l1036 1BBC  
                                l1071 1428                                  l1074 1446  
                                l1252 1EB6                                  l1246 1E9C  
                                l5141 1912                                  l5143 1918  
                                l6113 19BE                                  l6201 1624  
                                l7001 1FB9                                  l6043 1426  
                                l6045 142A                                  l7101 0DF8  
                                l6221 197D                                  l6205 162D  
                                l7021 1076                                  l6055 1455  
                                l7103 0E01                                  l7111 0E33  
                                l6207 163A                                  l7007 1FD9  
                                l6305 1732                                  l7201 1398  
                                l6081 149E                                  l6073 1499  
                                l6065 146C                                  l6049 142F  
                                l6209 164D                                  l6331 1776  
                                l6307 174F                                  l6251 16C8  
                                l6083 1405                                  l7107 0E0A  
                                l6147 18EC                                  l7051 10F5  
                                l7043 10DF                                  l7027 1090  
                                l6333 1793                                  l6317 1752  
                                l6261 16D9                                  l7213 13B6  
                                l6085 14EE                                  l7109 0E17  
                                l6173 15C3                                  l6413 1A27  
                                l6343 1796                                  l6319 176F  
                                l7231 13DD                                  l7207 13AD  
                                l6407 190D                                  l6191 1605  
                                l7143 1023                                  l7055 10FF  
                                l7039 10D5                                  l5375 1E2A  
                                l7311 0EFF                                  l6345 17B3  
                                l6273 16DE                                  l6249 16AB  
                                l7225 13C8                                  l6177 15D6  
                                l6417 1A31                                  l6505 024C  
                                l7145 104F                                  l6433 1E79  
                                l6355 17B6                                  l6275 16FB  
                                l6259 16D3                                  l7243 13FB  
                                l7219 13BF                                  l7171 132F  
                                l7083 0DAC                                  l6195 160A  
                                l6611 0386                                  l6603 0378  
                                l6531 02CF                                  l6507 0252  
                                l7155 1059                                  l6443 1EA1  
                                l6435 1E84                                  l5379 1E53  
                                l7331 0F80                                  l6357 17D3  
                                l6293 1729                                  l6285 16FE  
                                l7237 13E6                                  l7165 131A  
                                l5741 1C68                                  l6197 1612  
                                l6605 0366                                  l6517 02AC  
                                l6461 0126                                  l6445 1EAA  
                                l6437 1E89                                  l6429 1E70  
                                l7333 0F84                                  l7309 0EF9  
                                l6367 17D6                                  l6295 172F  
                                l6287 171B                                  l7183 1359  
                                l5903 1BD1                                  l7087 0DB5  
                                l6383 196A                                  l5823 1250  
                                l6199 161B                                  l6631 039C  
                                l6615 038F                                  l6607 037E  
                                l6551 02FF                                  l6703 0462  
                                l6519 02B4                                  l6463 0128  
                                l7351 0FFC                                  l7327 0F5A  
                                l7319 0F1E                                  l5681 1A6F  
                                l5665 1B41                                  l6369 17F3  
                                l7177 1344                                  l5761 1B54  
                                l5729 18BF                                  l5745 1C86  
                                l5905 1BDF                                  l5913 1C02  
                                l7097 0DE6                                  l6641 03CA  
                                l6633 03B4                                  l6481 0192  
                                l7345 0FE9                                  l7195 1383  
                                l5739 1C5F                                  l5747 1C93  
                                l7099 0DEF                                  l6395 1957  
                                l5835 1223                                  l6731 04A1  
                                l6715 047D                                  l6643 03B5  
                                l6563 031B                                  l6483 0194  
                                l7339 0FD1                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 0015                                  l7189 136E  
                                l5773 1B67                                  l5765 1B5A  
                                l5749 1C9E                                  l5909 1BF7  
                                l5837 1294                                  l5829 1276  
                                l6741 04A2                                  l6629 03AE  
                                l6645 03D0                                  l6581 0348  
                                l6493 01EE                                  l7349 0FF8  
                                l5927 192B                                  l5783 1B75  
                                l6911 0710                                  l6751 04D1  
                                l6727 049B                                  l6743 04BE  
                                l6655 03E6                                  l6639 03C7  
                                l6591 035F                                  l6575 0338  
                                l6671 0409                                  l6559 0312  
                                l6567 0324                                  l6495 01F2  
                                l7287 0E87                                  l5689 1A77  
                                l5937 1931                                  l5769 1B5F  
                                l5881 1D13                                  l6913 0719  
                                l6921 074A                                  l6817 0598  
                                l6737 04B4                                  l6729 0489  
                                l6681 0421                                  l6665 03FF  
                                l6657 03D4                                  l6593 034D  
                                l5699 1A7D                                  l5955 198C  
                                l5787 1B7E                                  l5779 1B6C  
                                l5947 1B04                                  l5867 12E0  
                                l6907 06FF                                  l6843 05DF  
                                l6931 0783                                  l6827 05CB  
                                l6755 04DD                                  l6747 04C7  
                                l6739 04B8                                  l6691 0436  
                                l6667 0403                                  l6659 03EC  
                                l6595 0365                                  l5893 1D3E  
                                l5869 1305                                  l6909 0707  
                                l6917 0722                                  l6925 076C  
                                l6837 05D3                                  l6781 0527  
                                l6677 0417                                  l6669 03ED  
                                l5879 1D05                                  l6919 072F  
                                l6863 0667                                  l6855 0610  
                                l6767 04FF                                  l5889 1D33  
                                l6929 0780                                  l6881 069B  
                                l6873 0684                                  l6777 0519  
                                _BAUD 022A                                  l5995 1158  
                                l6699 0442                                  l5997 115C  
                                l6893 06C0                                  l6885 06A9  
                                l6877 0692                                  l6869 067B  
                                l6797 053F                                  l6789 0533  
                                l6983 1F5A                                  l6889 06B2  
                                l6989 1F74                                  _ECHO 00E9  
                                STR_1 0CF0                                  STR_2 0C6E  
                                STR_3 0D06                                  STR_4 0CF0  
                                STR_5 0B8E                                  STR_6 0C88  
                                STR_7 0CB6                                  STR_8 0CA0  
                                STR_9 0D2B                                  _LATA 010C  
                                _LATC 010E                                  _LALT 0066  
       __end_of_PS_2_ENABLE_INTERRUPT 1994                                  _PIE1 0091  
                                i1l61 007C                                  i1l74 0085  
                                u7163 1B30                                  i1l76 00B5  
                                u7245 1ACA                                  u8205 1A32  
                                i1l87 00D3                                  u7415 12D7  
                                u8215 1A39                                  _RALT 006A  
                                u7265 1A9D                                  u7195 1A63  
                                u7515 1BD4                                  u7445 1D08  
                                u8405 01D2                                  u8325 1EBE  
                                u7535 1BED                                  u8255 1E7E  
                                u7465 1D14                                  u7385 1CC1  
                                u7545 1BF8                                  u7705 148F  
                                u8425 0230                                  u7475 1D28  
                                u7635 1DC6                                  u8275 1E96  
                                u7485 1D34                                  u7645 1DE9  
                                u7725 14A8                                  u7805 1D5A  
                                u8445 0290                                  u7815 1D66  
                                u8295 1EA4                                  u7665 118E  
                                u7825 1D7C                                  u7745 07AA  
                                u8385 0176                                  u7835 1D87  
                                u7755 07DF                                  u9515 1B9D  
                                u7845 1D92                                  u9705 1100  
                                u7795 1D4E                                  u7875 154F  
                                u9475 06E8                                  u9555 1F82  
                                u9715 1107                                  u9635 109E  
                                u7885 15A4                                  u9485 06F8  
                                u9565 1F95                                  u9645 10B1  
                                u9735 0D9A                                  u7895 15C1  
                                u9575 1FBA                                  u9745 0DAA  
                                u9585 1FCE                                  u9665 10E0  
                                u9595 1FDA                                  u9675 10E7  
                                u9785 103A                                  _WPUA 020C  
                                _WPUC 020E                          __CFG_WRT$OFF 0000  
                                _main 0E49                    UARTstringWAIT@data 0034  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                   baudUSART@baudconfig 0025  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 0156                                  start 00D8  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0028  
           WriteFlash_Sequential@temp 00E3                      Reverse_Byte@temp 0027  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1A7F  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                     __end_of_InitApp 19EE                       __end_of_SetBaud 1661  
                          _Clock_TRIS 1899                         ??_Init_System 0054  
              __size_of_READ_PS_2_PIN 0012                                 ??_isr 0021  
                      _Init_PS_2_Send 130D                     ??i1_READ_PS_2_PIN 0070  
     UARTchar@NinethBit_override_data 002E     i1UARTchar@NinethBit_override_data 0079  
               ??_INIT_PS_2_INTERRUPT 0025             _Decode_Scan_Code_Function 18FE  
                         ReadBaud@row 0037       WriteFlash_Sequential@amountTemp 00E2  
                       ??_ReadVoltage 0060                            _CloseUSART 18D2  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0030  
                     __end_of___fldiv 2000                                 STR_10 0CF3  
                               STR_11 0CDF                                 STR_12 0CF0  
                               STR_20 0AFD                                 STR_13 0BB1  
                               STR_21 0AD6                                 STR_22 0C15  
                               STR_14 0B6B                                 STR_30 09FB  
                               STR_15 0C52                                 STR_23 0BD3  
                               STR_31 0AAE                                 STR_16 0C35  
                               STR_24 0B23                                 STR_32 0A85  
                               STR_25 0CF0                                 STR_17 0BF4  
                               STR_33 0A58                         __CFG_WDTE$OFF 0000  
                               STR_18 0CF0                                 STR_26 0D19  
                               STR_34 0CCB                                 STR_19 0D3C  
                               STR_27 0B48                                 STR_28 0CF0  
                               STR_29 0A2A                       __end_of___flmul 112D  
                    __end_of_ISNUMBER 18EE                       __end_of___lldiv 1D47  
                               _CKPPS 0E25                       __end_of___llmod 1C0B  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l380 1A01                                 i1l381 1A18  
                               i1l378 19FB                                 i1l491 1C34  
                               i1l492 1C37                                 i1l682 193F  
                               _RCREG 0199                                 _RCSTA 019D  
                               _SPBRG 019B                  _PS_2_Read_Data_First 01A4  
                               _PORTA 000C                  _PS_2_Read_Data_Forth 01A6  
                        InitUART@Baud 0033                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 190F  
                               _Alarm 00E8                  _PS_2_Read_Data_Third 01AA  
                     __end_of_delayUS 1B4A                      _InternalADC_Read 1B89  
                 ___lmul@multiplicand 0029                        __CFG_FCMEN$OFF 0000  
          __end_of_Keyboard_Connected 105B                          InitUART@temp 0044  
               _WriteFlash_Sequential 121B                 ReadFlash_2Byte@column 0027  
                    __end_of_UARTchar 1CA3                            SetBaud@buf 0120  
                     __end_of_dpowers 09FB                    __size_of_PS_2_INIT 000C  
                               main@i 00E7                                 isr@rx 0024  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 0033                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 14F4                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 197F                         _ScanCodeSHIFT 08F5  
                     _UART_send_break 186E                       __initialization 00DA  
              __end_of_Init_PS_2_Send 1400                    __size_of_Data_TRIS 000B  
                        __end_of_main 1000                      __end_of_InitUART 121B  
                          _Read_Timer 0169                      ??_UARTstringWAIT 0036  
                         isr@Rx_fault 0023                      __end_of_ReadBaud 1E00  
          __end_of_DisableInternalADC 1886                      __end_of_ScanCode 08F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 1800  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 0E49  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 1F3F  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                   __size_ofi1_UARTchar 004A  
                    ___llmod@dividend 0037                                _ADRESH 009C  
                              _ADRESL 009B                      __end_of___flpack 1ED1  
                       _READ_PS_2_PIN 1921                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l5125 1A16  
                              i1l5117 1A0E                                i1l5135 1A1C  
                              i1l5403 1C3A                                i1l5405 1C47  
                              i1l5415 1893                                i1l5407 1C50  
                              i1l5433 193D                                i1l5513 00A6  
                              i1l5505 0094                                i1l5443 1944  
                              i1l5515 00B2                                i1l5527 00CF  
                              i1l5463 002A                                i1l5529 00D1  
                              i1l5483 0060                                i1l5475 0048  
                              i1l5467 0030                                i1l5397 1C14  
                              i1l5493 007A                                i1l5399 1C1E  
                              i1l5489 0072                                _INTCON 000B  
                              _FVRCON 0117                                _PARITY 0067  
                              _PMADRH 0192                                _PMADRL 0191  
                    __end_of___lwtofl 19AC                                _PMDATH 0194  
                              _PMDATL 0193                                _PMCON1 0195  
                              _PMCON2 0196                    __size_of_ReadUSART 000C  
                              u640_25 1A02                                _OSCCON 0099  
                              u681_25 001A                                u684_25 0037  
                              u687_25 004F                                _SPBRGH 019C  
                              u689_25 0062                                _TX1STA 019E  
                              _UNLOCK 18AF                 _PS_2_Read_Data_Second 01A8  
                           ??_InitApp 0025                 ??_ConfigureOscillator 0025  
                              _Delete 0166                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 0059                           ?_BlockErase 0025  
                       InitUART@spbrg 0040                           SetBaud@Baud 0054  
                  __size_of_OpenUSART 003F                       ?_Init_PS_2_Send 0070  
                              ___flge 1E00                     ?_Decode_Scan_Code 0070  
                              ___lmul 1A1E                             ??___fldiv 003C  
                      __CFG_STVREN$ON 0000                             ??___flmul 0050  
                           ??___lldiv 002D                           ?_Clock_TRIS 0070  
                           ??___llmod 003B                           SetBaud@temp 015A  
                   __end_of_PS_2_INIT 18D2                    ??_Decode_Scan_Code 0025  
                        ?i1_ReadUSART 0070                             ??_delayUS 0029  
__size_of_Decode_Scan_Code_FunctionE0 0013                           ?_CloseUSART 0070  
              ?_WriteFlash_Sequential 002F                       SetBaud@Baudtemp 0152  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18AF  
                           ??_sprintf 0045               i1READ_PS_2_PIN@DATA_CLK 0070  
                          ___flge@ff1 0025                            ___flge@ff2 0029  
                        ?_PS_2_Update 0070               __end_of_UART_send_break 1873  
                     _ReadFlash_2Byte 1AB0                       _ReadFlash_4Byte 1CA3  
                          ___fldiv@f1 0038                            ___fldiv@f2 0034  
                          ___fldiv@f3 0041               __end_of__initialization 0113  
                  __size_of_WriteBaud 005E                            ___flmul@f1 0048  
                          ___flmul@f2 004C                        PS_2_Update@buf 02A0  
             ?_PS_2_DISABLE_INTERRUPT 0070                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                        __pcstackCOMMON 0070  
                        __pidataBANK2 1000                          __pidataBANK4 1886  
                           ?_UARTchar 002D                    InitUART@baudconfig 0042  
                         _Init_System 0D54                     __end_of_ReadUSART 18C6  
                          ___lwtofl@c 002F                           _ReadVoltage 1ED1  
                     ReadVoltage@temp 00A4                          WriteBaud@row 0036  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 0033  
                       ReadUSART@data 0026                           _SinLEDtimer 0163  
  __size_of_Decode_Scan_Code_Function 0011                     __end_of_OpenUSART 1B89  
                 __size_of_BlockErase 0031                       WriteBaud@Parity 003C  
                   Send_PS2@oddparity 0033                            __pbssBANK0 0066  
                          __pbssBANK1 00E8                            __pbssBANK2 015F  
                          __pbssBANK3 01A0                            __pbssBANK4 0220  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 0033  
                           ?_ReadBaud 0037        __end_of_PS_2_DISABLE_INTERRUPT 19CB  
                  ReadVoltage@voltage 00A0                               ?_UNLOCK 0070  
                     i1_READ_PS_2_PIN 1933                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0025  
                _ScanCodeFunctionNoE0 0800              __end_of_InternalADC_Read 1BC8  
                  _ScanCodeFunctionE0 0966                         _CheckSum_byte 1A4E  
                          __pmaintext 0E49                          ??i1_UARTchar 007A  
                         _ParityTyped 0069                         BlockErase@row 0025  
                             ?___flge 0025                               ?___lmul 0025  
                 i1CheckSum_byte@This 0070                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 002F  
                          _blinkdelay 00EA                             ?___flpack 0025  
                      ___lmul@product 002D                 i1CheckSum_byte@Parity 0076  
                           ?___lwtofl 002F                     __end_of_WriteBaud 0800  
                     ??_READ_PS_2_PIN 0025                     __end_of_baudUSART 0D54  
             __end_of_ReadFlash_2Byte 1AE2               __end_of_ReadFlash_4Byte 1CF4  
                             _OSCSTAT 009A                   Clock_TRIS@direction 0025  
                             _PPSLOCK 0E0F                    __end_ofi1_UARTchar 1C55  
                          ??_InitUART 0038                            ??_ReadBaud 003B  
               READ_PS_2_PIN@DATA_CLK 0025                      ?_UART_send_break 0070  
               _PS_2_ENABLE_INTERRUPT 197F                       __size_of_UNLOCK 000B  
                             _InitApp 19CB                            ??_Send_PS2 002F  
                  _Keyboard_Connected 1006                               _SetBaud 14F4  
                      InitUART@config 0043                        ?_CheckSum_byte 0025  
         __end_of_INIT_PS_2_INTERRUPT 18FE                        InitUART@parity 0037  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0025  
                             _Version 022E                       __size_of___flge 0066  
                             ___fldiv 1F3F                       __size_of___lmul 0030  
                             ___flmul 105B                   ?_Keyboard_Connected 0070  
                             ___lldiv 1CF4                               ___llmod 1BC8  
                          ??___flpack 002B                               _delayUS 1B15  
                             __ptext1 1E00                               __ptext2 1ED1  
                             __ptext3 1994                               __ptext4 105B  
                             __ptext5 1F3F                               __ptext6 1E66  
                             __ptext7 1B89                               __ptext8 187F  
                             __ptext9 18C6                            ??___lwtofl 0033  
                __size_ofi1_ReadUSART 000B                               _dpowers 09D3  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00D4           WriteFlash_Sequential@amount 0032  
         WriteFlash_Sequential@buffer 0031                    _DisableInternalADC 187F  
         WriteFlash_Sequential@spaces 00E5               __end_ofi1_READ_PS_2_PIN 1946  
                ??_Keyboard_Connected 0061                               _sprintf 1400  
                             clrloop0 187A                  end_of_initialization 0113  
                     i1ReadUSART@data 0071                               init_ram 1873  
                 ?_DisableInternalADC 0070                               initloop 1874  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 068B                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 0220  
                     i1_CheckSum_byte 19EE               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0222                             _PS_2_INIT 18C6  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 0068  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1AB0           __end_of_ConfigureOscillator 1921  
              ?_PS_2_ENABLE_INTERRUPT 0070                    __end_of_Clock_TRIS 18A4  
                         ___flmul@exp 0055                             _BaudTyped 01A0  
                           _Data_TRIS 18A4                       PS_2_Update@temp 02E0  
                           _CapsCount 01AC                             _Caps_Lock 01AD  
            _PS_2_Read_Data_ThirdTEMP 0226                       ??_CheckSum_byte 0028  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 18BA                    __end_of_CloseUSART 18E0  
       ??_Decode_Scan_Code_FunctionE0 0025                     __size_of_ISNUMBER 000E  
                      __end_of___flge 1E66                 CheckSum_byte@Odd_Even 0027  
                        ?_Init_System 0070                        __end_of___lmul 1A4E  
                   __size_of_UARTchar 004E                          ?_ReadVoltage 005C  
                          ?_PS_2_INIT 0070                             Send_PS2@i 0035  
         INIT_PS_2_INTERRUPT@DATA_CLK 0025                   start_initialization 00DA  
                           _ReadUSART 18BA               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0029                           __end_of_isr 00D8  
                       WriteBaud@Baud 0038                  __end_of_Reverse_Byte 1D9C  
                    ?i1_READ_PS_2_PIN 0070              ??_Decode_Scan_Code_Shift 0025  
                       WriteBaud@temp 0045                             _OpenUSART 1B4A  
                          ?_Data_TRIS 0070                              ??_UNLOCK 0025  
                     ___llmod@divisor 0033                     __size_of_InitUART 00EE  
                     ___llmod@counter 003C                     __size_of_ReadBaud 0064  
                           _Shift_Key 01AE               __end_ofi1_CheckSum_byte 1A1E  
                   ?_InternalADC_Read 002F                     __size_of_Send_PS2 019F  
                            ??___flge 002D                              ??___lmul 002D  
           _PS_2_Read_Data_SecondTEMP 0224                    ??_InternalADC_Read 0031  
                         __pdataBANK2 0169                           __pdataBANK4 022A  
                   __size_of___flpack 006B                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtofl 0018  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01AF  
                       __pcstackBANK5 02A0                             _WriteBaud 07A2  
                 __end_of__stringdata 0D4B                    ReadFlash_2Byte@row 0025  
                           _baudUSART 0D4B                    ReadFlash_4Byte@row 002A  
                          ?_OpenUSART 0025                           sprintf@_val 004E  
                         sprintf@flag 004B                           sprintf@prec 004C  
                            ?_InitApp 0070                 __end_of_ScanCodeSHIFT 0966  
     Decode_Scan_Code_FunctionE0@Code 0025                              ?_SetBaud 0054  
                      ReadBaud@column 0039                              ?___fldiv 0034  
                            ?___flmul 0048                              ?___lldiv 0025  
                            ?___llmod 0033                      __CFG_PPS1WAY$OFF 0000  
       WriteFlash_Sequential@TempBufH 00A0         WriteFlash_Sequential@TempBufL 00C0  
                            ?_delayUS 0025                WriteFlash_Sequential@i 00E6  
          Decode_Scan_Code_Shift@Code 0025                              _BAUD1CON 019F  
                         ??_PS_2_INIT 0026                              _BAUDMODE 0165  
                    _Decode_Scan_Code 1946                            ?_WriteBaud 0036  
               __end_of_READ_PS_2_PIN 1933                              ?_sprintf 003D  
          UARTchar@NinethBit_override 002D                       _PS_2_Update$850 02DE  
                     _PS_2_Update$851 02DF                       _PS_2_Update$848 02DC  
                     _PS_2_Update$849 02DD                            ?_baudUSART 0070  
                           delayUS@US 0025       __size_of_Decode_Scan_Code_Shift 0013  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0025  
          WriteFlash_Sequential@tempH 00E0            WriteFlash_Sequential@tempL 00E1  
                   i1_UART_send_break 1869                             clear_ram0 1879  
                            _PIE1bits 0091                              _ISNUMBER 18E0  
                  ?i1_UART_send_break 0070                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              __size_of_UART_send_break 0005  
            WriteFlash_Sequential@row 002F                              _UARTchar 1C55  
                       ??i1_ReadUSART 0070                   ??i1_UART_send_break 0070  
                            _LControl 0167          __size_of_INIT_PS_2_INTERRUPT 0010  
                         __stringdata 09FB                  __size_of_Init_System 00F5  
      __size_of_WriteFlash_Sequential 00F2         __end_of_WriteFlash_Sequential 130D  
               __size_of_Reverse_Byte 0055                        _UARTstringWAIT 1AE2  
                         ??_ReadUSART 0025                  __size_of_ReadVoltage 006E  
                            _RControl 0168              ??_PS_2_DISABLE_INTERRUPT 0025  
             ??_PS_2_ENABLE_INTERRUPT 0025                     ___lmul@multiplier 0025  
         __size_of_Keyboard_Connected 0055                              SetBaud@i 015E  
                       ??_PS_2_Update 01AF                              _InitUART 112D  
           __end_ofi1_UART_send_break 186E                              _ReadBaud 1D9C  
                         ??_OpenUSART 0027                              _ScanCode 0884  
                     OpenUSART@config 0027     __end_of_Decode_Scan_Code_Function 190F  
                            _Send_PS2 1661                      __size_of_InitApp 0023  
                    __size_of_SetBaud 016D                          _Reverse_Byte 1D47  
                    __size_of___fldiv 00C1                      __size_of___flmul 00D2  
              _Decode_Scan_Code_Shift 196C                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                              ___flpack 1E66  
                       SetBaud@Parity 0058                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1B15  
                            ___lwtofl 1994                       Send_PS2@command 0034  
                 __end_ofi1_ReadUSART 1899                           ??_WriteBaud 003D  
                     Send_PS2@timeout 0036                         ISNUMBER@ascii 0025  
                            __ptext10 18EE                              __ptext11 1006  
                            __ptext20 1D47                              __ptext12 0117  
                            __ptext21 18E0                              __ptext13 1A1E  
                            __ptext30 1C55                              __ptext22 196C  
                            __ptext14 186E                              __ptext31 1D9C  
                            __ptext23 1959                              __ptext15 14F4  
                            __ptext40 130D                              __ptext32 1CA3  
                            __ptext24 18FE                              __ptext16 07A2  
                            __ptext41 1661                              __ptext33 1AB0  
                            __ptext25 1946                              __ptext17 121B  
                            __ptext50 190F                              __ptext42 1B15  
                            __ptext34 112D                              __ptext26 0D54  
                            __ptext18 1A7F                              __ptext43 1921  
                            __ptext35 0D4B                              __ptext27 1400  
                            __ptext19 18AF                              __ptext52 1C0B  
                            __ptext44 197F                              __ptext36 1CF4  
                            __ptext28 1BC8                              __ptext53 19EE  
                            __ptext45 18A4                              __ptext37 18BA  
                            __ptext29 1AE2                              __ptext54 1869  
                            __ptext46 1899                              __ptext38 1B4A  
                            __ptext55 188E                              __ptext47 1A4E  
                            __ptext39 18D2                              __ptext56 1933  
                            __ptext48 19AC                              __ptext49 19CB  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0026                           ??_baudUSART 0025  
                    __size_of_sprintf 00F4                   Keyboard_Connected@i 0061  
                       __size_of_main 01B7              __size_of_ReadFlash_2Byte 0032  
            __size_of_ReadFlash_4Byte 0051                              delayUS@i 002A  
                            delayUS@j 002E                          _pwrLEDtoggle 0228  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1A7F  
                 __end_of_PS_2_Update 07A2                            _RC1STAbits 019D  
                      CheckSum_byte@i 002C               __size_of_Init_PS_2_Send 00F3  
                   ??_UART_send_break 0025                 ___flmul@f3_as_product 0056  
                     ?_UARTstringWAIT 0034                   CheckSum_byte@Parity 002B  
                          _INTCONbits 000B             __size_of_InternalADC_Read 003F  
                      OpenUSART@spbrg 0025                          UARTchar@data 0033  
        i1UARTchar@NinethBit_override 0078                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 001F                              intlevel1 0000  
                           sprintf@ap 0052                             sprintf@sp 003D  
          __size_ofi1_UART_send_break 0005                      ___lldiv@dividend 0029  
 __end_of_Decode_Scan_Code_FunctionE0 196C           _Decode_Scan_Code_FunctionE0 1959  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 015F  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 1959  
                          i1_UARTchar 1C0B                           i1_ReadUSART 188E  
                            sprintf@c 0053                              sprintf@f 003F  
                    ___lldiv@quotient 002E                  Decode_Scan_Code@Code 0025  
                   Init_System@Parity 00E0                            _TX1STAbits 019E  
                   CheckSum_byte@This 0025                        i1UARTchar@data 0020  
                         _PS_2_Update 0117                   _INIT_PS_2_INTERRUPT 18EE  
         ??_Decode_Scan_Code_Function 0025                       Init_System@Baud 00E1  
                     Init_System@temp 00DC                        Init_System@buf 00A0  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
