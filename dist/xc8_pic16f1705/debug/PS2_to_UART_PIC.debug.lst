

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jan 29 09:54:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	text45,local,class=CODE,merge=1,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	dabs	1,0x7E,2
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000E                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  011C                     	;# 
   139  018C                     	;# 
   140  018E                     	;# 
   141  0191                     	;# 
   142  0191                     	;# 
   143  0192                     	;# 
   144  0193                     	;# 
   145  0193                     	;# 
   146  0194                     	;# 
   147  0195                     	;# 
   148  0196                     	;# 
   149  0197                     	;# 
   150  0199                     	;# 
   151  0199                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019A                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019C                     	;# 
   164  019D                     	;# 
   165  019D                     	;# 
   166  019D                     	;# 
   167  019E                     	;# 
   168  019E                     	;# 
   169  019E                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  019F                     	;# 
   174  019F                     	;# 
   175  020C                     	;# 
   176  020E                     	;# 
   177  0211                     	;# 
   178  0211                     	;# 
   179  0212                     	;# 
   180  0212                     	;# 
   181  0213                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0214                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0215                     	;# 
   188  0215                     	;# 
   189  0216                     	;# 
   190  0216                     	;# 
   191  0217                     	;# 
   192  0217                     	;# 
   193  028C                     	;# 
   194  028E                     	;# 
   195  0291                     	;# 
   196  0291                     	;# 
   197  0292                     	;# 
   198  0293                     	;# 
   199  0293                     	;# 
   200  0298                     	;# 
   201  0298                     	;# 
   202  0299                     	;# 
   203  029A                     	;# 
   204  029A                     	;# 
   205  029E                     	;# 
   206  030C                     	;# 
   207  030E                     	;# 
   208  038C                     	;# 
   209  038E                     	;# 
   210  0391                     	;# 
   211  0392                     	;# 
   212  0393                     	;# 
   213  0397                     	;# 
   214  0398                     	;# 
   215  0399                     	;# 
   216  0415                     	;# 
   217  0416                     	;# 
   218  0417                     	;# 
   219  041C                     	;# 
   220  041D                     	;# 
   221  041E                     	;# 
   222  0511                     	;# 
   223  0515                     	;# 
   224  0617                     	;# 
   225  0618                     	;# 
   226  0619                     	;# 
   227  0619                     	;# 
   228  061A                     	;# 
   229  061B                     	;# 
   230  061C                     	;# 
   231  061C                     	;# 
   232  0691                     	;# 
   233  0692                     	;# 
   234  0693                     	;# 
   235  0694                     	;# 
   236  0695                     	;# 
   237  0696                     	;# 
   238  0697                     	;# 
   239  0698                     	;# 
   240  0699                     	;# 
   241  069A                     	;# 
   242  069B                     	;# 
   243  069C                     	;# 
   244  069D                     	;# 
   245  069E                     	;# 
   246  069F                     	;# 
   247  0E0F                     	;# 
   248  0E10                     	;# 
   249  0E11                     	;# 
   250  0E12                     	;# 
   251  0E13                     	;# 
   252  0E14                     	;# 
   253  0E15                     	;# 
   254  0E17                     	;# 
   255  0E20                     	;# 
   256  0E21                     	;# 
   257  0E22                     	;# 
   258  0E24                     	;# 
   259  0E25                     	;# 
   260  0E28                     	;# 
   261  0E29                     	;# 
   262  0E2A                     	;# 
   263  0E2B                     	;# 
   264  0E90                     	;# 
   265  0E91                     	;# 
   266  0E92                     	;# 
   267  0E94                     	;# 
   268  0E95                     	;# 
   269  0EA0                     	;# 
   270  0EA1                     	;# 
   271  0EA2                     	;# 
   272  0EA3                     	;# 
   273  0EA4                     	;# 
   274  0EA5                     	;# 
   275  0F0F                     	;# 
   276  0F10                     	;# 
   277  0F11                     	;# 
   278  0F12                     	;# 
   279  0F13                     	;# 
   280  0F14                     	;# 
   281  0F15                     	;# 
   282  0F16                     	;# 
   283  0F17                     	;# 
   284  0F18                     	;# 
   285  0F19                     	;# 
   286  0F1A                     	;# 
   287  0F1B                     	;# 
   288  0F1C                     	;# 
   289  0F1D                     	;# 
   290  0F1E                     	;# 
   291  0F1F                     	;# 
   292  0F20                     	;# 
   293  0F21                     	;# 
   294  0F22                     	;# 
   295  0F23                     	;# 
   296  0F24                     	;# 
   297  0F25                     	;# 
   298  0F26                     	;# 
   299  0F27                     	;# 
   300  0F28                     	;# 
   301  0F29                     	;# 
   302  0F2A                     	;# 
   303  0F2B                     	;# 
   304  0F2C                     	;# 
   305  0F2D                     	;# 
   306  0F9E                     	;# 
   307  0FE4                     	;# 
   308  0FE5                     	;# 
   309  0FE6                     	;# 
   310  0FE7                     	;# 
   311  0FE8                     	;# 
   312  0FE9                     	;# 
   313  0FEA                     	;# 
   314  0FEB                     	;# 
   315  0FED                     	;# 
   316  0FEE                     	;# 
   317  0FEF                     	;# 
   318  0000                     	;# 
   319  0001                     	;# 
   320  0002                     	;# 
   321  0003                     	;# 
   322  0004                     	;# 
   323  0005                     	;# 
   324  0006                     	;# 
   325  0007                     	;# 
   326  0008                     	;# 
   327  0009                     	;# 
   328  000A                     	;# 
   329  000B                     	;# 
   330  000C                     	;# 
   331  000E                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0015                     	;# 
   336  0016                     	;# 
   337  0016                     	;# 
   338  0017                     	;# 
   339  0018                     	;# 
   340  0019                     	;# 
   341  001A                     	;# 
   342  001B                     	;# 
   343  001C                     	;# 
   344  008C                     	;# 
   345  008E                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  011C                     	;# 
   373  018C                     	;# 
   374  018E                     	;# 
   375  0191                     	;# 
   376  0191                     	;# 
   377  0192                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0197                     	;# 
   384  0199                     	;# 
   385  0199                     	;# 
   386  0199                     	;# 
   387  019A                     	;# 
   388  019A                     	;# 
   389  019A                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019C                     	;# 
   396  019C                     	;# 
   397  019C                     	;# 
   398  019D                     	;# 
   399  019D                     	;# 
   400  019D                     	;# 
   401  019E                     	;# 
   402  019E                     	;# 
   403  019E                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  020C                     	;# 
   410  020E                     	;# 
   411  0211                     	;# 
   412  0211                     	;# 
   413  0212                     	;# 
   414  0212                     	;# 
   415  0213                     	;# 
   416  0213                     	;# 
   417  0214                     	;# 
   418  0214                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  028C                     	;# 
   428  028E                     	;# 
   429  0291                     	;# 
   430  0291                     	;# 
   431  0292                     	;# 
   432  0293                     	;# 
   433  0293                     	;# 
   434  0298                     	;# 
   435  0298                     	;# 
   436  0299                     	;# 
   437  029A                     	;# 
   438  029A                     	;# 
   439  029E                     	;# 
   440  030C                     	;# 
   441  030E                     	;# 
   442  038C                     	;# 
   443  038E                     	;# 
   444  0391                     	;# 
   445  0392                     	;# 
   446  0393                     	;# 
   447  0397                     	;# 
   448  0398                     	;# 
   449  0399                     	;# 
   450  0415                     	;# 
   451  0416                     	;# 
   452  0417                     	;# 
   453  041C                     	;# 
   454  041D                     	;# 
   455  041E                     	;# 
   456  0511                     	;# 
   457  0515                     	;# 
   458  0617                     	;# 
   459  0618                     	;# 
   460  0619                     	;# 
   461  0619                     	;# 
   462  061A                     	;# 
   463  061B                     	;# 
   464  061C                     	;# 
   465  061C                     	;# 
   466  0691                     	;# 
   467  0692                     	;# 
   468  0693                     	;# 
   469  0694                     	;# 
   470  0695                     	;# 
   471  0696                     	;# 
   472  0697                     	;# 
   473  0698                     	;# 
   474  0699                     	;# 
   475  069A                     	;# 
   476  069B                     	;# 
   477  069C                     	;# 
   478  069D                     	;# 
   479  069E                     	;# 
   480  069F                     	;# 
   481  0E0F                     	;# 
   482  0E10                     	;# 
   483  0E11                     	;# 
   484  0E12                     	;# 
   485  0E13                     	;# 
   486  0E14                     	;# 
   487  0E15                     	;# 
   488  0E17                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E24                     	;# 
   493  0E25                     	;# 
   494  0E28                     	;# 
   495  0E29                     	;# 
   496  0E2A                     	;# 
   497  0E2B                     	;# 
   498  0E90                     	;# 
   499  0E91                     	;# 
   500  0E92                     	;# 
   501  0E94                     	;# 
   502  0E95                     	;# 
   503  0EA0                     	;# 
   504  0EA1                     	;# 
   505  0EA2                     	;# 
   506  0EA3                     	;# 
   507  0EA4                     	;# 
   508  0EA5                     	;# 
   509  0F0F                     	;# 
   510  0F10                     	;# 
   511  0F11                     	;# 
   512  0F12                     	;# 
   513  0F13                     	;# 
   514  0F14                     	;# 
   515  0F15                     	;# 
   516  0F16                     	;# 
   517  0F17                     	;# 
   518  0F18                     	;# 
   519  0F19                     	;# 
   520  0F1A                     	;# 
   521  0F1B                     	;# 
   522  0F1C                     	;# 
   523  0F1D                     	;# 
   524  0F1E                     	;# 
   525  0F1F                     	;# 
   526  0F20                     	;# 
   527  0F21                     	;# 
   528  0F22                     	;# 
   529  0F23                     	;# 
   530  0F24                     	;# 
   531  0F25                     	;# 
   532  0F26                     	;# 
   533  0F27                     	;# 
   534  0F28                     	;# 
   535  0F29                     	;# 
   536  0F2A                     	;# 
   537  0F2B                     	;# 
   538  0F2C                     	;# 
   539  0F2D                     	;# 
   540  0F9E                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE9                     	;# 
   547  0FEA                     	;# 
   548  0FEB                     	;# 
   549  0FED                     	;# 
   550  0FEE                     	;# 
   551  0FEF                     	;# 
   552  0000                     	;# 
   553  0001                     	;# 
   554  0002                     	;# 
   555  0003                     	;# 
   556  0004                     	;# 
   557  0005                     	;# 
   558  0006                     	;# 
   559  0007                     	;# 
   560  0008                     	;# 
   561  0009                     	;# 
   562  000A                     	;# 
   563  000B                     	;# 
   564  000C                     	;# 
   565  000E                     	;# 
   566  0011                     	;# 
   567  0012                     	;# 
   568  0013                     	;# 
   569  0015                     	;# 
   570  0016                     	;# 
   571  0016                     	;# 
   572  0017                     	;# 
   573  0018                     	;# 
   574  0019                     	;# 
   575  001A                     	;# 
   576  001B                     	;# 
   577  001C                     	;# 
   578  008C                     	;# 
   579  008E                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0095                     	;# 
   584  0096                     	;# 
   585  0097                     	;# 
   586  0098                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  009F                     	;# 
   595  010C                     	;# 
   596  010E                     	;# 
   597  0111                     	;# 
   598  0112                     	;# 
   599  0113                     	;# 
   600  0114                     	;# 
   601  0115                     	;# 
   602  0116                     	;# 
   603  0117                     	;# 
   604  0118                     	;# 
   605  0119                     	;# 
   606  011C                     	;# 
   607  018C                     	;# 
   608  018E                     	;# 
   609  0191                     	;# 
   610  0191                     	;# 
   611  0192                     	;# 
   612  0193                     	;# 
   613  0193                     	;# 
   614  0194                     	;# 
   615  0195                     	;# 
   616  0196                     	;# 
   617  0197                     	;# 
   618  0199                     	;# 
   619  0199                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019A                     	;# 
   623  019A                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019C                     	;# 
   630  019C                     	;# 
   631  019C                     	;# 
   632  019D                     	;# 
   633  019D                     	;# 
   634  019D                     	;# 
   635  019E                     	;# 
   636  019E                     	;# 
   637  019E                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  019F                     	;# 
   641  019F                     	;# 
   642  019F                     	;# 
   643  020C                     	;# 
   644  020E                     	;# 
   645  0211                     	;# 
   646  0211                     	;# 
   647  0212                     	;# 
   648  0212                     	;# 
   649  0213                     	;# 
   650  0213                     	;# 
   651  0214                     	;# 
   652  0214                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  028C                     	;# 
   662  028E                     	;# 
   663  0291                     	;# 
   664  0291                     	;# 
   665  0292                     	;# 
   666  0293                     	;# 
   667  0293                     	;# 
   668  0298                     	;# 
   669  0298                     	;# 
   670  0299                     	;# 
   671  029A                     	;# 
   672  029A                     	;# 
   673  029E                     	;# 
   674  030C                     	;# 
   675  030E                     	;# 
   676  038C                     	;# 
   677  038E                     	;# 
   678  0391                     	;# 
   679  0392                     	;# 
   680  0393                     	;# 
   681  0397                     	;# 
   682  0398                     	;# 
   683  0399                     	;# 
   684  0415                     	;# 
   685  0416                     	;# 
   686  0417                     	;# 
   687  041C                     	;# 
   688  041D                     	;# 
   689  041E                     	;# 
   690  0511                     	;# 
   691  0515                     	;# 
   692  0617                     	;# 
   693  0618                     	;# 
   694  0619                     	;# 
   695  0619                     	;# 
   696  061A                     	;# 
   697  061B                     	;# 
   698  061C                     	;# 
   699  061C                     	;# 
   700  0691                     	;# 
   701  0692                     	;# 
   702  0693                     	;# 
   703  0694                     	;# 
   704  0695                     	;# 
   705  0696                     	;# 
   706  0697                     	;# 
   707  0698                     	;# 
   708  0699                     	;# 
   709  069A                     	;# 
   710  069B                     	;# 
   711  069C                     	;# 
   712  069D                     	;# 
   713  069E                     	;# 
   714  069F                     	;# 
   715  0E0F                     	;# 
   716  0E10                     	;# 
   717  0E11                     	;# 
   718  0E12                     	;# 
   719  0E13                     	;# 
   720  0E14                     	;# 
   721  0E15                     	;# 
   722  0E17                     	;# 
   723  0E20                     	;# 
   724  0E21                     	;# 
   725  0E22                     	;# 
   726  0E24                     	;# 
   727  0E25                     	;# 
   728  0E28                     	;# 
   729  0E29                     	;# 
   730  0E2A                     	;# 
   731  0E2B                     	;# 
   732  0E90                     	;# 
   733  0E91                     	;# 
   734  0E92                     	;# 
   735  0E94                     	;# 
   736  0E95                     	;# 
   737  0EA0                     	;# 
   738  0EA1                     	;# 
   739  0EA2                     	;# 
   740  0EA3                     	;# 
   741  0EA4                     	;# 
   742  0EA5                     	;# 
   743  0F0F                     	;# 
   744  0F10                     	;# 
   745  0F11                     	;# 
   746  0F12                     	;# 
   747  0F13                     	;# 
   748  0F14                     	;# 
   749  0F15                     	;# 
   750  0F16                     	;# 
   751  0F17                     	;# 
   752  0F18                     	;# 
   753  0F19                     	;# 
   754  0F1A                     	;# 
   755  0F1B                     	;# 
   756  0F1C                     	;# 
   757  0F1D                     	;# 
   758  0F1E                     	;# 
   759  0F1F                     	;# 
   760  0F20                     	;# 
   761  0F21                     	;# 
   762  0F22                     	;# 
   763  0F23                     	;# 
   764  0F24                     	;# 
   765  0F25                     	;# 
   766  0F26                     	;# 
   767  0F27                     	;# 
   768  0F28                     	;# 
   769  0F29                     	;# 
   770  0F2A                     	;# 
   771  0F2B                     	;# 
   772  0F2C                     	;# 
   773  0F2D                     	;# 
   774  0F9E                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000E                     	;# 
   800  0011                     	;# 
   801  0012                     	;# 
   802  0013                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  008C                     	;# 
   813  008E                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0095                     	;# 
   818  0096                     	;# 
   819  0097                     	;# 
   820  0098                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  009F                     	;# 
   829  010C                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  011C                     	;# 
   841  018C                     	;# 
   842  018E                     	;# 
   843  0191                     	;# 
   844  0191                     	;# 
   845  0192                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0194                     	;# 
   849  0195                     	;# 
   850  0196                     	;# 
   851  0197                     	;# 
   852  0199                     	;# 
   853  0199                     	;# 
   854  0199                     	;# 
   855  019A                     	;# 
   856  019A                     	;# 
   857  019A                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019C                     	;# 
   864  019C                     	;# 
   865  019C                     	;# 
   866  019D                     	;# 
   867  019D                     	;# 
   868  019D                     	;# 
   869  019E                     	;# 
   870  019E                     	;# 
   871  019E                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  019F                     	;# 
   876  019F                     	;# 
   877  020C                     	;# 
   878  020E                     	;# 
   879  0211                     	;# 
   880  0211                     	;# 
   881  0212                     	;# 
   882  0212                     	;# 
   883  0213                     	;# 
   884  0213                     	;# 
   885  0214                     	;# 
   886  0214                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  028C                     	;# 
   896  028E                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0293                     	;# 
   902  0298                     	;# 
   903  0298                     	;# 
   904  0299                     	;# 
   905  029A                     	;# 
   906  029A                     	;# 
   907  029E                     	;# 
   908  030C                     	;# 
   909  030E                     	;# 
   910  038C                     	;# 
   911  038E                     	;# 
   912  0391                     	;# 
   913  0392                     	;# 
   914  0393                     	;# 
   915  0397                     	;# 
   916  0398                     	;# 
   917  0399                     	;# 
   918  0415                     	;# 
   919  0416                     	;# 
   920  0417                     	;# 
   921  041C                     	;# 
   922  041D                     	;# 
   923  041E                     	;# 
   924  0511                     	;# 
   925  0515                     	;# 
   926  0617                     	;# 
   927  0618                     	;# 
   928  0619                     	;# 
   929  0619                     	;# 
   930  061A                     	;# 
   931  061B                     	;# 
   932  061C                     	;# 
   933  061C                     	;# 
   934  0691                     	;# 
   935  0692                     	;# 
   936  0693                     	;# 
   937  0694                     	;# 
   938  0695                     	;# 
   939  0696                     	;# 
   940  0697                     	;# 
   941  0698                     	;# 
   942  0699                     	;# 
   943  069A                     	;# 
   944  069B                     	;# 
   945  069C                     	;# 
   946  069D                     	;# 
   947  069E                     	;# 
   948  069F                     	;# 
   949  0E0F                     	;# 
   950  0E10                     	;# 
   951  0E11                     	;# 
   952  0E12                     	;# 
   953  0E13                     	;# 
   954  0E14                     	;# 
   955  0E15                     	;# 
   956  0E17                     	;# 
   957  0E20                     	;# 
   958  0E21                     	;# 
   959  0E22                     	;# 
   960  0E24                     	;# 
   961  0E25                     	;# 
   962  0E28                     	;# 
   963  0E29                     	;# 
   964  0E2A                     	;# 
   965  0E2B                     	;# 
   966  0E90                     	;# 
   967  0E91                     	;# 
   968  0E92                     	;# 
   969  0E94                     	;# 
   970  0E95                     	;# 
   971  0EA0                     	;# 
   972  0EA1                     	;# 
   973  0EA2                     	;# 
   974  0EA3                     	;# 
   975  0EA4                     	;# 
   976  0EA5                     	;# 
   977  0F0F                     	;# 
   978  0F10                     	;# 
   979  0F11                     	;# 
   980  0F12                     	;# 
   981  0F13                     	;# 
   982  0F14                     	;# 
   983  0F15                     	;# 
   984  0F16                     	;# 
   985  0F17                     	;# 
   986  0F18                     	;# 
   987  0F19                     	;# 
   988  0F1A                     	;# 
   989  0F1B                     	;# 
   990  0F1C                     	;# 
   991  0F1D                     	;# 
   992  0F1E                     	;# 
   993  0F1F                     	;# 
   994  0F20                     	;# 
   995  0F21                     	;# 
   996  0F22                     	;# 
   997  0F23                     	;# 
   998  0F24                     	;# 
   999  0F25                     	;# 
  1000  0F26                     	;# 
  1001  0F27                     	;# 
  1002  0F28                     	;# 
  1003  0F29                     	;# 
  1004  0F2A                     	;# 
  1005  0F2B                     	;# 
  1006  0F2C                     	;# 
  1007  0F2D                     	;# 
  1008  0F9E                     	;# 
  1009  0FE4                     	;# 
  1010  0FE5                     	;# 
  1011  0FE6                     	;# 
  1012  0FE7                     	;# 
  1013  0FE8                     	;# 
  1014  0FE9                     	;# 
  1015  0FEA                     	;# 
  1016  0FEB                     	;# 
  1017  0FED                     	;# 
  1018  0FEE                     	;# 
  1019  0FEF                     	;# 
  1020  0000                     	;# 
  1021  0001                     	;# 
  1022  0002                     	;# 
  1023  0003                     	;# 
  1024  0004                     	;# 
  1025  0005                     	;# 
  1026  0006                     	;# 
  1027  0007                     	;# 
  1028  0008                     	;# 
  1029  0009                     	;# 
  1030  000A                     	;# 
  1031  000B                     	;# 
  1032  000C                     	;# 
  1033  000E                     	;# 
  1034  0011                     	;# 
  1035  0012                     	;# 
  1036  0013                     	;# 
  1037  0015                     	;# 
  1038  0016                     	;# 
  1039  0016                     	;# 
  1040  0017                     	;# 
  1041  0018                     	;# 
  1042  0019                     	;# 
  1043  001A                     	;# 
  1044  001B                     	;# 
  1045  001C                     	;# 
  1046  008C                     	;# 
  1047  008E                     	;# 
  1048  0091                     	;# 
  1049  0092                     	;# 
  1050  0093                     	;# 
  1051  0095                     	;# 
  1052  0096                     	;# 
  1053  0097                     	;# 
  1054  0098                     	;# 
  1055  0099                     	;# 
  1056  009A                     	;# 
  1057  009B                     	;# 
  1058  009B                     	;# 
  1059  009C                     	;# 
  1060  009D                     	;# 
  1061  009E                     	;# 
  1062  009F                     	;# 
  1063  010C                     	;# 
  1064  010E                     	;# 
  1065  0111                     	;# 
  1066  0112                     	;# 
  1067  0113                     	;# 
  1068  0114                     	;# 
  1069  0115                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  0118                     	;# 
  1073  0119                     	;# 
  1074  011C                     	;# 
  1075  018C                     	;# 
  1076  018E                     	;# 
  1077  0191                     	;# 
  1078  0191                     	;# 
  1079  0192                     	;# 
  1080  0193                     	;# 
  1081  0193                     	;# 
  1082  0194                     	;# 
  1083  0195                     	;# 
  1084  0196                     	;# 
  1085  0197                     	;# 
  1086  0199                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  019A                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019C                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019D                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  020C                     	;# 
  1112  020E                     	;# 
  1113  0211                     	;# 
  1114  0211                     	;# 
  1115  0212                     	;# 
  1116  0212                     	;# 
  1117  0213                     	;# 
  1118  0213                     	;# 
  1119  0214                     	;# 
  1120  0214                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0216                     	;# 
  1126  0216                     	;# 
  1127  0217                     	;# 
  1128  0217                     	;# 
  1129  028C                     	;# 
  1130  028E                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  029A                     	;# 
  1141  029E                     	;# 
  1142  030C                     	;# 
  1143  030E                     	;# 
  1144  038C                     	;# 
  1145  038E                     	;# 
  1146  0391                     	;# 
  1147  0392                     	;# 
  1148  0393                     	;# 
  1149  0397                     	;# 
  1150  0398                     	;# 
  1151  0399                     	;# 
  1152  0415                     	;# 
  1153  0416                     	;# 
  1154  0417                     	;# 
  1155  041C                     	;# 
  1156  041D                     	;# 
  1157  041E                     	;# 
  1158  0511                     	;# 
  1159  0515                     	;# 
  1160  0617                     	;# 
  1161  0618                     	;# 
  1162  0619                     	;# 
  1163  0619                     	;# 
  1164  061A                     	;# 
  1165  061B                     	;# 
  1166  061C                     	;# 
  1167  061C                     	;# 
  1168  0691                     	;# 
  1169  0692                     	;# 
  1170  0693                     	;# 
  1171  0694                     	;# 
  1172  0695                     	;# 
  1173  0696                     	;# 
  1174  0697                     	;# 
  1175  0698                     	;# 
  1176  0699                     	;# 
  1177  069A                     	;# 
  1178  069B                     	;# 
  1179  069C                     	;# 
  1180  069D                     	;# 
  1181  069E                     	;# 
  1182  069F                     	;# 
  1183  0E0F                     	;# 
  1184  0E10                     	;# 
  1185  0E11                     	;# 
  1186  0E12                     	;# 
  1187  0E13                     	;# 
  1188  0E14                     	;# 
  1189  0E15                     	;# 
  1190  0E17                     	;# 
  1191  0E20                     	;# 
  1192  0E21                     	;# 
  1193  0E22                     	;# 
  1194  0E24                     	;# 
  1195  0E25                     	;# 
  1196  0E28                     	;# 
  1197  0E29                     	;# 
  1198  0E2A                     	;# 
  1199  0E2B                     	;# 
  1200  0E90                     	;# 
  1201  0E91                     	;# 
  1202  0E92                     	;# 
  1203  0E94                     	;# 
  1204  0E95                     	;# 
  1205  0EA0                     	;# 
  1206  0EA1                     	;# 
  1207  0EA2                     	;# 
  1208  0EA3                     	;# 
  1209  0EA4                     	;# 
  1210  0EA5                     	;# 
  1211  0F0F                     	;# 
  1212  0F10                     	;# 
  1213  0F11                     	;# 
  1214  0F12                     	;# 
  1215  0F13                     	;# 
  1216  0F14                     	;# 
  1217  0F15                     	;# 
  1218  0F16                     	;# 
  1219  0F17                     	;# 
  1220  0F18                     	;# 
  1221  0F19                     	;# 
  1222  0F1A                     	;# 
  1223  0F1B                     	;# 
  1224  0F1C                     	;# 
  1225  0F1D                     	;# 
  1226  0F1E                     	;# 
  1227  0F1F                     	;# 
  1228  0F20                     	;# 
  1229  0F21                     	;# 
  1230  0F22                     	;# 
  1231  0F23                     	;# 
  1232  0F24                     	;# 
  1233  0F25                     	;# 
  1234  0F26                     	;# 
  1235  0F27                     	;# 
  1236  0F28                     	;# 
  1237  0F29                     	;# 
  1238  0F2A                     	;# 
  1239  0F2B                     	;# 
  1240  0F2C                     	;# 
  1241  0F2D                     	;# 
  1242  0F9E                     	;# 
  1243  0FE4                     	;# 
  1244  0FE5                     	;# 
  1245  0FE6                     	;# 
  1246  0FE7                     	;# 
  1247  0FE8                     	;# 
  1248  0FE9                     	;# 
  1249  0FEA                     	;# 
  1250  0FEB                     	;# 
  1251  0FED                     	;# 
  1252  0FEE                     	;# 
  1253  0FEF                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0008                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000E                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0016                     	;# 
  1274  0017                     	;# 
  1275  0018                     	;# 
  1276  0019                     	;# 
  1277  001A                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  008C                     	;# 
  1281  008E                     	;# 
  1282  0091                     	;# 
  1283  0092                     	;# 
  1284  0093                     	;# 
  1285  0095                     	;# 
  1286  0096                     	;# 
  1287  0097                     	;# 
  1288  0098                     	;# 
  1289  0099                     	;# 
  1290  009A                     	;# 
  1291  009B                     	;# 
  1292  009B                     	;# 
  1293  009C                     	;# 
  1294  009D                     	;# 
  1295  009E                     	;# 
  1296  009F                     	;# 
  1297  010C                     	;# 
  1298  010E                     	;# 
  1299  0111                     	;# 
  1300  0112                     	;# 
  1301  0113                     	;# 
  1302  0114                     	;# 
  1303  0115                     	;# 
  1304  0116                     	;# 
  1305  0117                     	;# 
  1306  0118                     	;# 
  1307  0119                     	;# 
  1308  011C                     	;# 
  1309  018C                     	;# 
  1310  018E                     	;# 
  1311  0191                     	;# 
  1312  0191                     	;# 
  1313  0192                     	;# 
  1314  0193                     	;# 
  1315  0193                     	;# 
  1316  0194                     	;# 
  1317  0195                     	;# 
  1318  0196                     	;# 
  1319  0197                     	;# 
  1320  0199                     	;# 
  1321  0199                     	;# 
  1322  0199                     	;# 
  1323  019A                     	;# 
  1324  019A                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019D                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019E                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  019F                     	;# 
  1344  019F                     	;# 
  1345  020C                     	;# 
  1346  020E                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  028C                     	;# 
  1364  028E                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  029A                     	;# 
  1375  029E                     	;# 
  1376  030C                     	;# 
  1377  030E                     	;# 
  1378  038C                     	;# 
  1379  038E                     	;# 
  1380  0391                     	;# 
  1381  0392                     	;# 
  1382  0393                     	;# 
  1383  0397                     	;# 
  1384  0398                     	;# 
  1385  0399                     	;# 
  1386  0415                     	;# 
  1387  0416                     	;# 
  1388  0417                     	;# 
  1389  041C                     	;# 
  1390  041D                     	;# 
  1391  041E                     	;# 
  1392  0511                     	;# 
  1393  0515                     	;# 
  1394  0617                     	;# 
  1395  0618                     	;# 
  1396  0619                     	;# 
  1397  0619                     	;# 
  1398  061A                     	;# 
  1399  061B                     	;# 
  1400  061C                     	;# 
  1401  061C                     	;# 
  1402  0691                     	;# 
  1403  0692                     	;# 
  1404  0693                     	;# 
  1405  0694                     	;# 
  1406  0695                     	;# 
  1407  0696                     	;# 
  1408  0697                     	;# 
  1409  0698                     	;# 
  1410  0699                     	;# 
  1411  069A                     	;# 
  1412  069B                     	;# 
  1413  069C                     	;# 
  1414  069D                     	;# 
  1415  069E                     	;# 
  1416  069F                     	;# 
  1417  0E0F                     	;# 
  1418  0E10                     	;# 
  1419  0E11                     	;# 
  1420  0E12                     	;# 
  1421  0E13                     	;# 
  1422  0E14                     	;# 
  1423  0E15                     	;# 
  1424  0E17                     	;# 
  1425  0E20                     	;# 
  1426  0E21                     	;# 
  1427  0E22                     	;# 
  1428  0E24                     	;# 
  1429  0E25                     	;# 
  1430  0E28                     	;# 
  1431  0E29                     	;# 
  1432  0E2A                     	;# 
  1433  0E2B                     	;# 
  1434  0E90                     	;# 
  1435  0E91                     	;# 
  1436  0E92                     	;# 
  1437  0E94                     	;# 
  1438  0E95                     	;# 
  1439  0EA0                     	;# 
  1440  0EA1                     	;# 
  1441  0EA2                     	;# 
  1442  0EA3                     	;# 
  1443  0EA4                     	;# 
  1444  0EA5                     	;# 
  1445  0F0F                     	;# 
  1446  0F10                     	;# 
  1447  0F11                     	;# 
  1448  0F12                     	;# 
  1449  0F13                     	;# 
  1450  0F14                     	;# 
  1451  0F15                     	;# 
  1452  0F16                     	;# 
  1453  0F17                     	;# 
  1454  0F18                     	;# 
  1455  0F19                     	;# 
  1456  0F1A                     	;# 
  1457  0F1B                     	;# 
  1458  0F1C                     	;# 
  1459  0F1D                     	;# 
  1460  0F1E                     	;# 
  1461  0F1F                     	;# 
  1462  0F20                     	;# 
  1463  0F21                     	;# 
  1464  0F22                     	;# 
  1465  0F23                     	;# 
  1466  0F24                     	;# 
  1467  0F25                     	;# 
  1468  0F26                     	;# 
  1469  0F27                     	;# 
  1470  0F28                     	;# 
  1471  0F29                     	;# 
  1472  0F2A                     	;# 
  1473  0F2B                     	;# 
  1474  0F2C                     	;# 
  1475  0F2D                     	;# 
  1476  0F9E                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000E                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0013                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008E                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0093                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0098                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  009F                     	;# 
  1531  010C                     	;# 
  1532  010E                     	;# 
  1533  0111                     	;# 
  1534  0112                     	;# 
  1535  0113                     	;# 
  1536  0114                     	;# 
  1537  0115                     	;# 
  1538  0116                     	;# 
  1539  0117                     	;# 
  1540  0118                     	;# 
  1541  0119                     	;# 
  1542  011C                     	;# 
  1543  018C                     	;# 
  1544  018E                     	;# 
  1545  0191                     	;# 
  1546  0191                     	;# 
  1547  0192                     	;# 
  1548  0193                     	;# 
  1549  0193                     	;# 
  1550  0194                     	;# 
  1551  0195                     	;# 
  1552  0196                     	;# 
  1553  0197                     	;# 
  1554  0199                     	;# 
  1555  0199                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019A                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019D                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019E                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  020C                     	;# 
  1580  020E                     	;# 
  1581  0211                     	;# 
  1582  0211                     	;# 
  1583  0212                     	;# 
  1584  0212                     	;# 
  1585  0213                     	;# 
  1586  0213                     	;# 
  1587  0214                     	;# 
  1588  0214                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0216                     	;# 
  1594  0216                     	;# 
  1595  0217                     	;# 
  1596  0217                     	;# 
  1597  028C                     	;# 
  1598  028E                     	;# 
  1599  0291                     	;# 
  1600  0291                     	;# 
  1601  0292                     	;# 
  1602  0293                     	;# 
  1603  0293                     	;# 
  1604  0298                     	;# 
  1605  0298                     	;# 
  1606  0299                     	;# 
  1607  029A                     	;# 
  1608  029A                     	;# 
  1609  029E                     	;# 
  1610  030C                     	;# 
  1611  030E                     	;# 
  1612  038C                     	;# 
  1613  038E                     	;# 
  1614  0391                     	;# 
  1615  0392                     	;# 
  1616  0393                     	;# 
  1617  0397                     	;# 
  1618  0398                     	;# 
  1619  0399                     	;# 
  1620  0415                     	;# 
  1621  0416                     	;# 
  1622  0417                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  0511                     	;# 
  1627  0515                     	;# 
  1628  0617                     	;# 
  1629  0618                     	;# 
  1630  0619                     	;# 
  1631  0619                     	;# 
  1632  061A                     	;# 
  1633  061B                     	;# 
  1634  061C                     	;# 
  1635  061C                     	;# 
  1636  0691                     	;# 
  1637  0692                     	;# 
  1638  0693                     	;# 
  1639  0694                     	;# 
  1640  0695                     	;# 
  1641  0696                     	;# 
  1642  0697                     	;# 
  1643  0698                     	;# 
  1644  0699                     	;# 
  1645  069A                     	;# 
  1646  069B                     	;# 
  1647  069C                     	;# 
  1648  069D                     	;# 
  1649  069E                     	;# 
  1650  069F                     	;# 
  1651  0E0F                     	;# 
  1652  0E10                     	;# 
  1653  0E11                     	;# 
  1654  0E12                     	;# 
  1655  0E13                     	;# 
  1656  0E14                     	;# 
  1657  0E15                     	;# 
  1658  0E17                     	;# 
  1659  0E20                     	;# 
  1660  0E21                     	;# 
  1661  0E22                     	;# 
  1662  0E24                     	;# 
  1663  0E25                     	;# 
  1664  0E28                     	;# 
  1665  0E29                     	;# 
  1666  0E2A                     	;# 
  1667  0E2B                     	;# 
  1668  0E90                     	;# 
  1669  0E91                     	;# 
  1670  0E92                     	;# 
  1671  0E94                     	;# 
  1672  0E95                     	;# 
  1673  0EA0                     	;# 
  1674  0EA1                     	;# 
  1675  0EA2                     	;# 
  1676  0EA3                     	;# 
  1677  0EA4                     	;# 
  1678  0EA5                     	;# 
  1679  0F0F                     	;# 
  1680  0F10                     	;# 
  1681  0F11                     	;# 
  1682  0F12                     	;# 
  1683  0F13                     	;# 
  1684  0F14                     	;# 
  1685  0F15                     	;# 
  1686  0F16                     	;# 
  1687  0F17                     	;# 
  1688  0F18                     	;# 
  1689  0F19                     	;# 
  1690  0F1A                     	;# 
  1691  0F1B                     	;# 
  1692  0F1C                     	;# 
  1693  0F1D                     	;# 
  1694  0F1E                     	;# 
  1695  0F1F                     	;# 
  1696  0F20                     	;# 
  1697  0F21                     	;# 
  1698  0F22                     	;# 
  1699  0F23                     	;# 
  1700  0F24                     	;# 
  1701  0F25                     	;# 
  1702  0F26                     	;# 
  1703  0F27                     	;# 
  1704  0F28                     	;# 
  1705  0F29                     	;# 
  1706  0F2A                     	;# 
  1707  0F2B                     	;# 
  1708  0F2C                     	;# 
  1709  0F2D                     	;# 
  1710  0F9E                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000E                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0013                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008E                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0093                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0098                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  009F                     	;# 
  1765  010C                     	;# 
  1766  010E                     	;# 
  1767  0111                     	;# 
  1768  0112                     	;# 
  1769  0113                     	;# 
  1770  0114                     	;# 
  1771  0115                     	;# 
  1772  0116                     	;# 
  1773  0117                     	;# 
  1774  0118                     	;# 
  1775  0119                     	;# 
  1776  011C                     	;# 
  1777  018C                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  0199                     	;# 
  1790  0199                     	;# 
  1791  019A                     	;# 
  1792  019A                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019B                     	;# 
  1799  019C                     	;# 
  1800  019C                     	;# 
  1801  019C                     	;# 
  1802  019D                     	;# 
  1803  019D                     	;# 
  1804  019D                     	;# 
  1805  019E                     	;# 
  1806  019E                     	;# 
  1807  019E                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  019F                     	;# 
  1811  019F                     	;# 
  1812  019F                     	;# 
  1813  020C                     	;# 
  1814  020E                     	;# 
  1815  0211                     	;# 
  1816  0211                     	;# 
  1817  0212                     	;# 
  1818  0212                     	;# 
  1819  0213                     	;# 
  1820  0213                     	;# 
  1821  0214                     	;# 
  1822  0214                     	;# 
  1823  0215                     	;# 
  1824  0215                     	;# 
  1825  0215                     	;# 
  1826  0215                     	;# 
  1827  0216                     	;# 
  1828  0216                     	;# 
  1829  0217                     	;# 
  1830  0217                     	;# 
  1831  028C                     	;# 
  1832  028E                     	;# 
  1833  0291                     	;# 
  1834  0291                     	;# 
  1835  0292                     	;# 
  1836  0293                     	;# 
  1837  0293                     	;# 
  1838  0298                     	;# 
  1839  0298                     	;# 
  1840  0299                     	;# 
  1841  029A                     	;# 
  1842  029A                     	;# 
  1843  029E                     	;# 
  1844  030C                     	;# 
  1845  030E                     	;# 
  1846  038C                     	;# 
  1847  038E                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  0393                     	;# 
  1851  0397                     	;# 
  1852  0398                     	;# 
  1853  0399                     	;# 
  1854  0415                     	;# 
  1855  0416                     	;# 
  1856  0417                     	;# 
  1857  041C                     	;# 
  1858  041D                     	;# 
  1859  041E                     	;# 
  1860  0511                     	;# 
  1861  0515                     	;# 
  1862  0617                     	;# 
  1863  0618                     	;# 
  1864  0619                     	;# 
  1865  0619                     	;# 
  1866  061A                     	;# 
  1867  061B                     	;# 
  1868  061C                     	;# 
  1869  061C                     	;# 
  1870  0691                     	;# 
  1871  0692                     	;# 
  1872  0693                     	;# 
  1873  0694                     	;# 
  1874  0695                     	;# 
  1875  0696                     	;# 
  1876  0697                     	;# 
  1877  0698                     	;# 
  1878  0699                     	;# 
  1879  069A                     	;# 
  1880  069B                     	;# 
  1881  069C                     	;# 
  1882  069D                     	;# 
  1883  069E                     	;# 
  1884  069F                     	;# 
  1885  0E0F                     	;# 
  1886  0E10                     	;# 
  1887  0E11                     	;# 
  1888  0E12                     	;# 
  1889  0E13                     	;# 
  1890  0E14                     	;# 
  1891  0E15                     	;# 
  1892  0E17                     	;# 
  1893  0E20                     	;# 
  1894  0E21                     	;# 
  1895  0E22                     	;# 
  1896  0E24                     	;# 
  1897  0E25                     	;# 
  1898  0E28                     	;# 
  1899  0E29                     	;# 
  1900  0E2A                     	;# 
  1901  0E2B                     	;# 
  1902  0E90                     	;# 
  1903  0E91                     	;# 
  1904  0E92                     	;# 
  1905  0E94                     	;# 
  1906  0E95                     	;# 
  1907  0EA0                     	;# 
  1908  0EA1                     	;# 
  1909  0EA2                     	;# 
  1910  0EA3                     	;# 
  1911  0EA4                     	;# 
  1912  0EA5                     	;# 
  1913  0F0F                     	;# 
  1914  0F10                     	;# 
  1915  0F11                     	;# 
  1916  0F12                     	;# 
  1917  0F13                     	;# 
  1918  0F14                     	;# 
  1919  0F15                     	;# 
  1920  0F16                     	;# 
  1921  0F17                     	;# 
  1922  0F18                     	;# 
  1923  0F19                     	;# 
  1924  0F1A                     	;# 
  1925  0F1B                     	;# 
  1926  0F1C                     	;# 
  1927  0F1D                     	;# 
  1928  0F1E                     	;# 
  1929  0F1F                     	;# 
  1930  0F20                     	;# 
  1931  0F21                     	;# 
  1932  0F22                     	;# 
  1933  0F23                     	;# 
  1934  0F24                     	;# 
  1935  0F25                     	;# 
  1936  0F26                     	;# 
  1937  0F27                     	;# 
  1938  0F28                     	;# 
  1939  0F29                     	;# 
  1940  0F2A                     	;# 
  1941  0F2B                     	;# 
  1942  0F2C                     	;# 
  1943  0F2D                     	;# 
  1944  0F9E                     	;# 
  1945  0FE4                     	;# 
  1946  0FE5                     	;# 
  1947  0FE6                     	;# 
  1948  0FE7                     	;# 
  1949  0FE8                     	;# 
  1950  0FE9                     	;# 
  1951  0FEA                     	;# 
  1952  0FEB                     	;# 
  1953  0FED                     	;# 
  1954  0FEE                     	;# 
  1955  0FEF                     	;# 
  1956  0000                     	;# 
  1957  0001                     	;# 
  1958  0002                     	;# 
  1959  0003                     	;# 
  1960  0004                     	;# 
  1961  0005                     	;# 
  1962  0006                     	;# 
  1963  0007                     	;# 
  1964  0008                     	;# 
  1965  0009                     	;# 
  1966  000A                     	;# 
  1967  000B                     	;# 
  1968  000C                     	;# 
  1969  000E                     	;# 
  1970  0011                     	;# 
  1971  0012                     	;# 
  1972  0013                     	;# 
  1973  0015                     	;# 
  1974  0016                     	;# 
  1975  0016                     	;# 
  1976  0017                     	;# 
  1977  0018                     	;# 
  1978  0019                     	;# 
  1979  001A                     	;# 
  1980  001B                     	;# 
  1981  001C                     	;# 
  1982  008C                     	;# 
  1983  008E                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0093                     	;# 
  1987  0095                     	;# 
  1988  0096                     	;# 
  1989  0097                     	;# 
  1990  0098                     	;# 
  1991  0099                     	;# 
  1992  009A                     	;# 
  1993  009B                     	;# 
  1994  009B                     	;# 
  1995  009C                     	;# 
  1996  009D                     	;# 
  1997  009E                     	;# 
  1998  009F                     	;# 
  1999  010C                     	;# 
  2000  010E                     	;# 
  2001  0111                     	;# 
  2002  0112                     	;# 
  2003  0113                     	;# 
  2004  0114                     	;# 
  2005  0115                     	;# 
  2006  0116                     	;# 
  2007  0117                     	;# 
  2008  0118                     	;# 
  2009  0119                     	;# 
  2010  011C                     	;# 
  2011  018C                     	;# 
  2012  018E                     	;# 
  2013  0191                     	;# 
  2014  0191                     	;# 
  2015  0192                     	;# 
  2016  0193                     	;# 
  2017  0193                     	;# 
  2018  0194                     	;# 
  2019  0195                     	;# 
  2020  0196                     	;# 
  2021  0197                     	;# 
  2022  0199                     	;# 
  2023  0199                     	;# 
  2024  0199                     	;# 
  2025  019A                     	;# 
  2026  019A                     	;# 
  2027  019A                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019B                     	;# 
  2032  019B                     	;# 
  2033  019C                     	;# 
  2034  019C                     	;# 
  2035  019C                     	;# 
  2036  019D                     	;# 
  2037  019D                     	;# 
  2038  019D                     	;# 
  2039  019E                     	;# 
  2040  019E                     	;# 
  2041  019E                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  019F                     	;# 
  2045  019F                     	;# 
  2046  019F                     	;# 
  2047  020C                     	;# 
  2048  020E                     	;# 
  2049  0211                     	;# 
  2050  0211                     	;# 
  2051  0212                     	;# 
  2052  0212                     	;# 
  2053  0213                     	;# 
  2054  0213                     	;# 
  2055  0214                     	;# 
  2056  0214                     	;# 
  2057  0215                     	;# 
  2058  0215                     	;# 
  2059  0215                     	;# 
  2060  0215                     	;# 
  2061  0216                     	;# 
  2062  0216                     	;# 
  2063  0217                     	;# 
  2064  0217                     	;# 
  2065  028C                     	;# 
  2066  028E                     	;# 
  2067  0291                     	;# 
  2068  0291                     	;# 
  2069  0292                     	;# 
  2070  0293                     	;# 
  2071  0293                     	;# 
  2072  0298                     	;# 
  2073  0298                     	;# 
  2074  0299                     	;# 
  2075  029A                     	;# 
  2076  029A                     	;# 
  2077  029E                     	;# 
  2078  030C                     	;# 
  2079  030E                     	;# 
  2080  038C                     	;# 
  2081  038E                     	;# 
  2082  0391                     	;# 
  2083  0392                     	;# 
  2084  0393                     	;# 
  2085  0397                     	;# 
  2086  0398                     	;# 
  2087  0399                     	;# 
  2088  0415                     	;# 
  2089  0416                     	;# 
  2090  0417                     	;# 
  2091  041C                     	;# 
  2092  041D                     	;# 
  2093  041E                     	;# 
  2094  0511                     	;# 
  2095  0515                     	;# 
  2096  0617                     	;# 
  2097  0618                     	;# 
  2098  0619                     	;# 
  2099  0619                     	;# 
  2100  061A                     	;# 
  2101  061B                     	;# 
  2102  061C                     	;# 
  2103  061C                     	;# 
  2104  0691                     	;# 
  2105  0692                     	;# 
  2106  0693                     	;# 
  2107  0694                     	;# 
  2108  0695                     	;# 
  2109  0696                     	;# 
  2110  0697                     	;# 
  2111  0698                     	;# 
  2112  0699                     	;# 
  2113  069A                     	;# 
  2114  069B                     	;# 
  2115  069C                     	;# 
  2116  069D                     	;# 
  2117  069E                     	;# 
  2118  069F                     	;# 
  2119  0E0F                     	;# 
  2120  0E10                     	;# 
  2121  0E11                     	;# 
  2122  0E12                     	;# 
  2123  0E13                     	;# 
  2124  0E14                     	;# 
  2125  0E15                     	;# 
  2126  0E17                     	;# 
  2127  0E20                     	;# 
  2128  0E21                     	;# 
  2129  0E22                     	;# 
  2130  0E24                     	;# 
  2131  0E25                     	;# 
  2132  0E28                     	;# 
  2133  0E29                     	;# 
  2134  0E2A                     	;# 
  2135  0E2B                     	;# 
  2136  0E90                     	;# 
  2137  0E91                     	;# 
  2138  0E92                     	;# 
  2139  0E94                     	;# 
  2140  0E95                     	;# 
  2141  0EA0                     	;# 
  2142  0EA1                     	;# 
  2143  0EA2                     	;# 
  2144  0EA3                     	;# 
  2145  0EA4                     	;# 
  2146  0EA5                     	;# 
  2147  0F0F                     	;# 
  2148  0F10                     	;# 
  2149  0F11                     	;# 
  2150  0F12                     	;# 
  2151  0F13                     	;# 
  2152  0F14                     	;# 
  2153  0F15                     	;# 
  2154  0F16                     	;# 
  2155  0F17                     	;# 
  2156  0F18                     	;# 
  2157  0F19                     	;# 
  2158  0F1A                     	;# 
  2159  0F1B                     	;# 
  2160  0F1C                     	;# 
  2161  0F1D                     	;# 
  2162  0F1E                     	;# 
  2163  0F1F                     	;# 
  2164  0F20                     	;# 
  2165  0F21                     	;# 
  2166  0F22                     	;# 
  2167  0F23                     	;# 
  2168  0F24                     	;# 
  2169  0F25                     	;# 
  2170  0F26                     	;# 
  2171  0F27                     	;# 
  2172  0F28                     	;# 
  2173  0F29                     	;# 
  2174  0F2A                     	;# 
  2175  0F2B                     	;# 
  2176  0F2C                     	;# 
  2177  0F2D                     	;# 
  2178  0F9E                     	;# 
  2179  0FE4                     	;# 
  2180  0FE5                     	;# 
  2181  0FE6                     	;# 
  2182  0FE7                     	;# 
  2183  0FE8                     	;# 
  2184  0FE9                     	;# 
  2185  0FEA                     	;# 
  2186  0FEB                     	;# 
  2187  0FED                     	;# 
  2188  0FEE                     	;# 
  2189  0FEF                     	;# 
  2190  0000                     	;# 
  2191  0001                     	;# 
  2192  0002                     	;# 
  2193  0003                     	;# 
  2194  0004                     	;# 
  2195  0005                     	;# 
  2196  0006                     	;# 
  2197  0007                     	;# 
  2198  0008                     	;# 
  2199  0009                     	;# 
  2200  000A                     	;# 
  2201  000B                     	;# 
  2202  000C                     	;# 
  2203  000E                     	;# 
  2204  0011                     	;# 
  2205  0012                     	;# 
  2206  0013                     	;# 
  2207  0015                     	;# 
  2208  0016                     	;# 
  2209  0016                     	;# 
  2210  0017                     	;# 
  2211  0018                     	;# 
  2212  0019                     	;# 
  2213  001A                     	;# 
  2214  001B                     	;# 
  2215  001C                     	;# 
  2216  008C                     	;# 
  2217  008E                     	;# 
  2218  0091                     	;# 
  2219  0092                     	;# 
  2220  0093                     	;# 
  2221  0095                     	;# 
  2222  0096                     	;# 
  2223  0097                     	;# 
  2224  0098                     	;# 
  2225  0099                     	;# 
  2226  009A                     	;# 
  2227  009B                     	;# 
  2228  009B                     	;# 
  2229  009C                     	;# 
  2230  009D                     	;# 
  2231  009E                     	;# 
  2232  009F                     	;# 
  2233  010C                     	;# 
  2234  010E                     	;# 
  2235  0111                     	;# 
  2236  0112                     	;# 
  2237  0113                     	;# 
  2238  0114                     	;# 
  2239  0115                     	;# 
  2240  0116                     	;# 
  2241  0117                     	;# 
  2242  0118                     	;# 
  2243  0119                     	;# 
  2244  011C                     	;# 
  2245  018C                     	;# 
  2246  018E                     	;# 
  2247  0191                     	;# 
  2248  0191                     	;# 
  2249  0192                     	;# 
  2250  0193                     	;# 
  2251  0193                     	;# 
  2252  0194                     	;# 
  2253  0195                     	;# 
  2254  0196                     	;# 
  2255  0197                     	;# 
  2256  0199                     	;# 
  2257  0199                     	;# 
  2258  0199                     	;# 
  2259  019A                     	;# 
  2260  019A                     	;# 
  2261  019A                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019C                     	;# 
  2268  019C                     	;# 
  2269  019C                     	;# 
  2270  019D                     	;# 
  2271  019D                     	;# 
  2272  019D                     	;# 
  2273  019E                     	;# 
  2274  019E                     	;# 
  2275  019E                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  020C                     	;# 
  2282  020E                     	;# 
  2283  0211                     	;# 
  2284  0211                     	;# 
  2285  0212                     	;# 
  2286  0212                     	;# 
  2287  0213                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0216                     	;# 
  2296  0216                     	;# 
  2297  0217                     	;# 
  2298  0217                     	;# 
  2299  028C                     	;# 
  2300  028E                     	;# 
  2301  0291                     	;# 
  2302  0291                     	;# 
  2303  0292                     	;# 
  2304  0293                     	;# 
  2305  0293                     	;# 
  2306  0298                     	;# 
  2307  0298                     	;# 
  2308  0299                     	;# 
  2309  029A                     	;# 
  2310  029A                     	;# 
  2311  029E                     	;# 
  2312  030C                     	;# 
  2313  030E                     	;# 
  2314  038C                     	;# 
  2315  038E                     	;# 
  2316  0391                     	;# 
  2317  0392                     	;# 
  2318  0393                     	;# 
  2319  0397                     	;# 
  2320  0398                     	;# 
  2321  0399                     	;# 
  2322  0415                     	;# 
  2323  0416                     	;# 
  2324  0417                     	;# 
  2325  041C                     	;# 
  2326  041D                     	;# 
  2327  041E                     	;# 
  2328  0511                     	;# 
  2329  0515                     	;# 
  2330  0617                     	;# 
  2331  0618                     	;# 
  2332  0619                     	;# 
  2333  0619                     	;# 
  2334  061A                     	;# 
  2335  061B                     	;# 
  2336  061C                     	;# 
  2337  061C                     	;# 
  2338  0691                     	;# 
  2339  0692                     	;# 
  2340  0693                     	;# 
  2341  0694                     	;# 
  2342  0695                     	;# 
  2343  0696                     	;# 
  2344  0697                     	;# 
  2345  0698                     	;# 
  2346  0699                     	;# 
  2347  069A                     	;# 
  2348  069B                     	;# 
  2349  069C                     	;# 
  2350  069D                     	;# 
  2351  069E                     	;# 
  2352  069F                     	;# 
  2353  0E0F                     	;# 
  2354  0E10                     	;# 
  2355  0E11                     	;# 
  2356  0E12                     	;# 
  2357  0E13                     	;# 
  2358  0E14                     	;# 
  2359  0E15                     	;# 
  2360  0E17                     	;# 
  2361  0E20                     	;# 
  2362  0E21                     	;# 
  2363  0E22                     	;# 
  2364  0E24                     	;# 
  2365  0E25                     	;# 
  2366  0E28                     	;# 
  2367  0E29                     	;# 
  2368  0E2A                     	;# 
  2369  0E2B                     	;# 
  2370  0E90                     	;# 
  2371  0E91                     	;# 
  2372  0E92                     	;# 
  2373  0E94                     	;# 
  2374  0E95                     	;# 
  2375  0EA0                     	;# 
  2376  0EA1                     	;# 
  2377  0EA2                     	;# 
  2378  0EA3                     	;# 
  2379  0EA4                     	;# 
  2380  0EA5                     	;# 
  2381  0F0F                     	;# 
  2382  0F10                     	;# 
  2383  0F11                     	;# 
  2384  0F12                     	;# 
  2385  0F13                     	;# 
  2386  0F14                     	;# 
  2387  0F15                     	;# 
  2388  0F16                     	;# 
  2389  0F17                     	;# 
  2390  0F18                     	;# 
  2391  0F19                     	;# 
  2392  0F1A                     	;# 
  2393  0F1B                     	;# 
  2394  0F1C                     	;# 
  2395  0F1D                     	;# 
  2396  0F1E                     	;# 
  2397  0F1F                     	;# 
  2398  0F20                     	;# 
  2399  0F21                     	;# 
  2400  0F22                     	;# 
  2401  0F23                     	;# 
  2402  0F24                     	;# 
  2403  0F25                     	;# 
  2404  0F26                     	;# 
  2405  0F27                     	;# 
  2406  0F28                     	;# 
  2407  0F29                     	;# 
  2408  0F2A                     	;# 
  2409  0F2B                     	;# 
  2410  0F2C                     	;# 
  2411  0F2D                     	;# 
  2412  0F9E                     	;# 
  2413  0FE4                     	;# 
  2414  0FE5                     	;# 
  2415  0FE6                     	;# 
  2416  0FE7                     	;# 
  2417  0FE8                     	;# 
  2418  0FE9                     	;# 
  2419  0FEA                     	;# 
  2420  0FEB                     	;# 
  2421  0FED                     	;# 
  2422  0FEE                     	;# 
  2423  0FEF                     	;# 
  2424  0000                     	;# 
  2425  0001                     	;# 
  2426  0002                     	;# 
  2427  0003                     	;# 
  2428  0004                     	;# 
  2429  0005                     	;# 
  2430  0006                     	;# 
  2431  0007                     	;# 
  2432  0008                     	;# 
  2433  0009                     	;# 
  2434  000A                     	;# 
  2435  000B                     	;# 
  2436  000C                     	;# 
  2437  000E                     	;# 
  2438  0011                     	;# 
  2439  0012                     	;# 
  2440  0013                     	;# 
  2441  0015                     	;# 
  2442  0016                     	;# 
  2443  0016                     	;# 
  2444  0017                     	;# 
  2445  0018                     	;# 
  2446  0019                     	;# 
  2447  001A                     	;# 
  2448  001B                     	;# 
  2449  001C                     	;# 
  2450  008C                     	;# 
  2451  008E                     	;# 
  2452  0091                     	;# 
  2453  0092                     	;# 
  2454  0093                     	;# 
  2455  0095                     	;# 
  2456  0096                     	;# 
  2457  0097                     	;# 
  2458  0098                     	;# 
  2459  0099                     	;# 
  2460  009A                     	;# 
  2461  009B                     	;# 
  2462  009B                     	;# 
  2463  009C                     	;# 
  2464  009D                     	;# 
  2465  009E                     	;# 
  2466  009F                     	;# 
  2467  010C                     	;# 
  2468  010E                     	;# 
  2469  0111                     	;# 
  2470  0112                     	;# 
  2471  0113                     	;# 
  2472  0114                     	;# 
  2473  0115                     	;# 
  2474  0116                     	;# 
  2475  0117                     	;# 
  2476  0118                     	;# 
  2477  0119                     	;# 
  2478  011C                     	;# 
  2479  018C                     	;# 
  2480  018E                     	;# 
  2481  0191                     	;# 
  2482  0191                     	;# 
  2483  0192                     	;# 
  2484  0193                     	;# 
  2485  0193                     	;# 
  2486  0194                     	;# 
  2487  0195                     	;# 
  2488  0196                     	;# 
  2489  0197                     	;# 
  2490  0199                     	;# 
  2491  0199                     	;# 
  2492  0199                     	;# 
  2493  019A                     	;# 
  2494  019A                     	;# 
  2495  019A                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019B                     	;# 
  2499  019B                     	;# 
  2500  019B                     	;# 
  2501  019C                     	;# 
  2502  019C                     	;# 
  2503  019C                     	;# 
  2504  019D                     	;# 
  2505  019D                     	;# 
  2506  019D                     	;# 
  2507  019E                     	;# 
  2508  019E                     	;# 
  2509  019E                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  019F                     	;# 
  2513  019F                     	;# 
  2514  019F                     	;# 
  2515  020C                     	;# 
  2516  020E                     	;# 
  2517  0211                     	;# 
  2518  0211                     	;# 
  2519  0212                     	;# 
  2520  0212                     	;# 
  2521  0213                     	;# 
  2522  0213                     	;# 
  2523  0214                     	;# 
  2524  0214                     	;# 
  2525  0215                     	;# 
  2526  0215                     	;# 
  2527  0215                     	;# 
  2528  0215                     	;# 
  2529  0216                     	;# 
  2530  0216                     	;# 
  2531  0217                     	;# 
  2532  0217                     	;# 
  2533  028C                     	;# 
  2534  028E                     	;# 
  2535  0291                     	;# 
  2536  0291                     	;# 
  2537  0292                     	;# 
  2538  0293                     	;# 
  2539  0293                     	;# 
  2540  0298                     	;# 
  2541  0298                     	;# 
  2542  0299                     	;# 
  2543  029A                     	;# 
  2544  029A                     	;# 
  2545  029E                     	;# 
  2546  030C                     	;# 
  2547  030E                     	;# 
  2548  038C                     	;# 
  2549  038E                     	;# 
  2550  0391                     	;# 
  2551  0392                     	;# 
  2552  0393                     	;# 
  2553  0397                     	;# 
  2554  0398                     	;# 
  2555  0399                     	;# 
  2556  0415                     	;# 
  2557  0416                     	;# 
  2558  0417                     	;# 
  2559  041C                     	;# 
  2560  041D                     	;# 
  2561  041E                     	;# 
  2562  0511                     	;# 
  2563  0515                     	;# 
  2564  0617                     	;# 
  2565  0618                     	;# 
  2566  0619                     	;# 
  2567  0619                     	;# 
  2568  061A                     	;# 
  2569  061B                     	;# 
  2570  061C                     	;# 
  2571  061C                     	;# 
  2572  0691                     	;# 
  2573  0692                     	;# 
  2574  0693                     	;# 
  2575  0694                     	;# 
  2576  0695                     	;# 
  2577  0696                     	;# 
  2578  0697                     	;# 
  2579  0698                     	;# 
  2580  0699                     	;# 
  2581  069A                     	;# 
  2582  069B                     	;# 
  2583  069C                     	;# 
  2584  069D                     	;# 
  2585  069E                     	;# 
  2586  069F                     	;# 
  2587  0E0F                     	;# 
  2588  0E10                     	;# 
  2589  0E11                     	;# 
  2590  0E12                     	;# 
  2591  0E13                     	;# 
  2592  0E14                     	;# 
  2593  0E15                     	;# 
  2594  0E17                     	;# 
  2595  0E20                     	;# 
  2596  0E21                     	;# 
  2597  0E22                     	;# 
  2598  0E24                     	;# 
  2599  0E25                     	;# 
  2600  0E28                     	;# 
  2601  0E29                     	;# 
  2602  0E2A                     	;# 
  2603  0E2B                     	;# 
  2604  0E90                     	;# 
  2605  0E91                     	;# 
  2606  0E92                     	;# 
  2607  0E94                     	;# 
  2608  0E95                     	;# 
  2609  0EA0                     	;# 
  2610  0EA1                     	;# 
  2611  0EA2                     	;# 
  2612  0EA3                     	;# 
  2613  0EA4                     	;# 
  2614  0EA5                     	;# 
  2615  0F0F                     	;# 
  2616  0F10                     	;# 
  2617  0F11                     	;# 
  2618  0F12                     	;# 
  2619  0F13                     	;# 
  2620  0F14                     	;# 
  2621  0F15                     	;# 
  2622  0F16                     	;# 
  2623  0F17                     	;# 
  2624  0F18                     	;# 
  2625  0F19                     	;# 
  2626  0F1A                     	;# 
  2627  0F1B                     	;# 
  2628  0F1C                     	;# 
  2629  0F1D                     	;# 
  2630  0F1E                     	;# 
  2631  0F1F                     	;# 
  2632  0F20                     	;# 
  2633  0F21                     	;# 
  2634  0F22                     	;# 
  2635  0F23                     	;# 
  2636  0F24                     	;# 
  2637  0F25                     	;# 
  2638  0F26                     	;# 
  2639  0F27                     	;# 
  2640  0F28                     	;# 
  2641  0F29                     	;# 
  2642  0F2A                     	;# 
  2643  0F2B                     	;# 
  2644  0F2C                     	;# 
  2645  0F2D                     	;# 
  2646  0F9E                     	;# 
  2647  0FE4                     	;# 
  2648  0FE5                     	;# 
  2649  0FE6                     	;# 
  2650  0FE7                     	;# 
  2651  0FE8                     	;# 
  2652  0FE9                     	;# 
  2653  0FEA                     	;# 
  2654  0FEB                     	;# 
  2655  0FED                     	;# 
  2656  0FEE                     	;# 
  2657  0FEF                     	;# 
  2658                           
  2659                           	psect	idataBANK1
  2660  0003                     __pidataBANK1:	
  2661                           
  2662                           ;initializer for _No_Keyboard
  2663  0003  3401               	retlw	1
  2664                           
  2665                           	psect	idataBANK2
  2666  1001                     __pidataBANK2:	
  2667                           
  2668                           ;initializer for _No_Keyboard_old
  2669  1001  3401               	retlw	1
  2670                           
  2671                           	psect	idataBANK4
  2672  192A                     __pidataBANK4:	
  2673                           
  2674                           ;initializer for _BAUD
  2675  192A  3480               	retlw	128
  2676  192B  3425               	retlw	37
  2677  192C  3400               	retlw	0
  2678  192D  3400               	retlw	0
  2679                           
  2680                           ;initializer for _Read_Timer
  2681  192E  3414               	retlw	20
  2682  192F  3400               	retlw	0
  2683                           
  2684                           ;initializer for _MEM
  2685  1930  3400               	retlw	0
  2686  1931  3400               	retlw	0
  2687  1932  3480               	retlw	128
  2688  1933  3425               	retlw	37
  2689                           
  2690                           ;initializer for _Version
  2691  1934  3431               	retlw	49
  2692  1935  342E               	retlw	46
  2693  1936  3432               	retlw	50
  2694  1937  3400               	retlw	0
  2695                           
  2696                           	psect	stringtext
  2697  0800                     __pstringtext:	
  2698  0800                     _ScanCodeFunctionNoE0:	
  2699  0800  3400               	retlw	0
  2700  0801  3411               	retlw	17
  2701  0802  3400               	retlw	0
  2702  0803  340C               	retlw	12
  2703  0804  340A               	retlw	10
  2704  0805  3406               	retlw	6
  2705  0806  3407               	retlw	7
  2706  0807  3414               	retlw	20
  2707  0808  3400               	retlw	0
  2708  0809  3412               	retlw	18
  2709  080A  3410               	retlw	16
  2710  080B  340E               	retlw	14
  2711  080C  340B               	retlw	11
  2712  080D  3400               	retlw	0
  2713  080E  3400               	retlw	0
  2714  080F  3400               	retlw	0
  2715  0810  3400               	retlw	0
  2716  0811  341C               	retlw	28
  2717  0812  3400               	retlw	0
  2718  0813  3400               	retlw	0
  2719  0814  341A               	retlw	26
  2720  0815  3400               	retlw	0
  2721  0816  3400               	retlw	0
  2722  0817  3400               	retlw	0
  2723  0818  3400               	retlw	0
  2724  0819  3400               	retlw	0
  2725  081A  3400               	retlw	0
  2726  081B  3400               	retlw	0
  2727  081C  3400               	retlw	0
  2728  081D  3400               	retlw	0
  2729  081E  3400               	retlw	0
  2730  081F  3400               	retlw	0
  2731  0820  3400               	retlw	0
  2732  0821  3400               	retlw	0
  2733  0822  3400               	retlw	0
  2734  0823  3400               	retlw	0
  2735  0824  3400               	retlw	0
  2736  0825  3400               	retlw	0
  2737  0826  3400               	retlw	0
  2738  0827  3400               	retlw	0
  2739  0828  3400               	retlw	0
  2740  0829  3400               	retlw	0
  2741  082A  3400               	retlw	0
  2742  082B  3400               	retlw	0
  2743  082C  3400               	retlw	0
  2744  082D  3400               	retlw	0
  2745  082E  3400               	retlw	0
  2746  082F  3400               	retlw	0
  2747  0830  3400               	retlw	0
  2748  0831  3400               	retlw	0
  2749  0832  3400               	retlw	0
  2750  0833  3400               	retlw	0
  2751  0834  3400               	retlw	0
  2752  0835  3400               	retlw	0
  2753  0836  3400               	retlw	0
  2754  0837  3400               	retlw	0
  2755  0838  3400               	retlw	0
  2756  0839  3400               	retlw	0
  2757  083A  3400               	retlw	0
  2758  083B  3400               	retlw	0
  2759  083C  3400               	retlw	0
  2760  083D  3400               	retlw	0
  2761  083E  3400               	retlw	0
  2762  083F  3400               	retlw	0
  2763  0840  3400               	retlw	0
  2764  0841  3400               	retlw	0
  2765  0842  3400               	retlw	0
  2766  0843  3400               	retlw	0
  2767  0844  3400               	retlw	0
  2768  0845  3400               	retlw	0
  2769  0846  3400               	retlw	0
  2770  0847  3400               	retlw	0
  2771  0848  3400               	retlw	0
  2772  0849  3400               	retlw	0
  2773  084A  3400               	retlw	0
  2774  084B  3400               	retlw	0
  2775  084C  3400               	retlw	0
  2776  084D  3400               	retlw	0
  2777  084E  3400               	retlw	0
  2778  084F  3400               	retlw	0
  2779  0850  3400               	retlw	0
  2780  0851  3400               	retlw	0
  2781  0852  3400               	retlw	0
  2782  0853  3400               	retlw	0
  2783  0854  3400               	retlw	0
  2784  0855  3400               	retlw	0
  2785  0856  3400               	retlw	0
  2786  0857  3400               	retlw	0
  2787  0858  3400               	retlw	0
  2788  0859  3400               	retlw	0
  2789  085A  3400               	retlw	0
  2790  085B  3400               	retlw	0
  2791  085C  3400               	retlw	0
  2792  085D  3400               	retlw	0
  2793  085E  3400               	retlw	0
  2794  085F  3400               	retlw	0
  2795  0860  3400               	retlw	0
  2796  0861  3400               	retlw	0
  2797  0862  3400               	retlw	0
  2798  0863  3400               	retlw	0
  2799  0864  3400               	retlw	0
  2800  0865  3400               	retlw	0
  2801  0866  3400               	retlw	0
  2802  0867  3400               	retlw	0
  2803  0868  3400               	retlw	0
  2804  0869  3400               	retlw	0
  2805  086A  3400               	retlw	0
  2806  086B  3400               	retlw	0
  2807  086C  3400               	retlw	0
  2808  086D  3400               	retlw	0
  2809  086E  3400               	retlw	0
  2810  086F  3400               	retlw	0
  2811  0870  3400               	retlw	0
  2812  0871  3400               	retlw	0
  2813  0872  3400               	retlw	0
  2814  0873  3400               	retlw	0
  2815  0874  3400               	retlw	0
  2816  0875  3400               	retlw	0
  2817  0876  3400               	retlw	0
  2818  0877  3400               	retlw	0
  2819  0878  3413               	retlw	19
  2820  0879  3400               	retlw	0
  2821  087A  3400               	retlw	0
  2822  087B  3400               	retlw	0
  2823  087C  3400               	retlw	0
  2824  087D  3400               	retlw	0
  2825  087E  3400               	retlw	0
  2826  087F  3400               	retlw	0
  2827  0880  3400               	retlw	0
  2828  0881  3400               	retlw	0
  2829  0882  3400               	retlw	0
  2830  0883  340F               	retlw	15
  2831  0884                     __end_of_ScanCodeFunctionNoE0:	
  2832  0884                     _ScanCode:	
  2833  0884  3409               	retlw	9
  2834  0885  3460               	retlw	96
  2835  0886  3400               	retlw	0
  2836  0887  3400               	retlw	0
  2837  0888  3400               	retlw	0
  2838  0889  3400               	retlw	0
  2839  088A  3400               	retlw	0
  2840  088B  3400               	retlw	0
  2841  088C  3471               	retlw	113
  2842  088D  3431               	retlw	49
  2843  088E  3400               	retlw	0
  2844  088F  3400               	retlw	0
  2845  0890  3400               	retlw	0
  2846  0891  347A               	retlw	122
  2847  0892  3473               	retlw	115
  2848  0893  3461               	retlw	97
  2849  0894  3477               	retlw	119
  2850  0895  3432               	retlw	50
  2851  0896  3400               	retlw	0
  2852  0897  3400               	retlw	0
  2853  0898  3463               	retlw	99
  2854  0899  3478               	retlw	120
  2855  089A  3464               	retlw	100
  2856  089B  3465               	retlw	101
  2857  089C  3434               	retlw	52
  2858  089D  3433               	retlw	51
  2859  089E  3400               	retlw	0
  2860  089F  3400               	retlw	0
  2861  08A0  3420               	retlw	32
  2862  08A1  3476               	retlw	118
  2863  08A2  3466               	retlw	102
  2864  08A3  3474               	retlw	116
  2865  08A4  3472               	retlw	114
  2866  08A5  3435               	retlw	53
  2867  08A6  3400               	retlw	0
  2868  08A7  3400               	retlw	0
  2869  08A8  346E               	retlw	110
  2870  08A9  3462               	retlw	98
  2871  08AA  3468               	retlw	104
  2872  08AB  3467               	retlw	103
  2873  08AC  3479               	retlw	121
  2874  08AD  3436               	retlw	54
  2875  08AE  3400               	retlw	0
  2876  08AF  3400               	retlw	0
  2877  08B0  3400               	retlw	0
  2878  08B1  346D               	retlw	109
  2879  08B2  346A               	retlw	106
  2880  08B3  3475               	retlw	117
  2881  08B4  3437               	retlw	55
  2882  08B5  3438               	retlw	56
  2883  08B6  3400               	retlw	0
  2884  08B7  3400               	retlw	0
  2885  08B8  342C               	retlw	44
  2886  08B9  346B               	retlw	107
  2887  08BA  3469               	retlw	105
  2888  08BB  346F               	retlw	111
  2889  08BC  3430               	retlw	48
  2890  08BD  3439               	retlw	57
  2891  08BE  3400               	retlw	0
  2892  08BF  3400               	retlw	0
  2893  08C0  342E               	retlw	46
  2894  08C1  342F               	retlw	47
  2895  08C2  346C               	retlw	108
  2896  08C3  343B               	retlw	59
  2897  08C4  3470               	retlw	112
  2898  08C5  342D               	retlw	45
  2899  08C6  3400               	retlw	0
  2900  08C7  3400               	retlw	0
  2901  08C8  3400               	retlw	0
  2902  08C9  3427               	retlw	39
  2903  08CA  3400               	retlw	0
  2904  08CB  345B               	retlw	91
  2905  08CC  343D               	retlw	61
  2906  08CD  3400               	retlw	0
  2907  08CE  3400               	retlw	0
  2908  08CF  3400               	retlw	0
  2909  08D0  3400               	retlw	0
  2910  08D1  340D               	retlw	13
  2911  08D2  345D               	retlw	93
  2912  08D3  3400               	retlw	0
  2913  08D4  345C               	retlw	92
  2914  08D5  3400               	retlw	0
  2915  08D6  3400               	retlw	0
  2916  08D7  3400               	retlw	0
  2917  08D8  3400               	retlw	0
  2918  08D9  3400               	retlw	0
  2919  08DA  3400               	retlw	0
  2920  08DB  3400               	retlw	0
  2921  08DC  3400               	retlw	0
  2922  08DD  3408               	retlw	8
  2923  08DE  3400               	retlw	0
  2924  08DF  3400               	retlw	0
  2925  08E0  3431               	retlw	49
  2926  08E1  3400               	retlw	0
  2927  08E2  3434               	retlw	52
  2928  08E3  3437               	retlw	55
  2929  08E4  3400               	retlw	0
  2930  08E5  3400               	retlw	0
  2931  08E6  3400               	retlw	0
  2932  08E7  3430               	retlw	48
  2933  08E8  342E               	retlw	46
  2934  08E9  3432               	retlw	50
  2935  08EA  3435               	retlw	53
  2936  08EB  3436               	retlw	54
  2937  08EC  3438               	retlw	56
  2938  08ED  341B               	retlw	27
  2939  08EE  3400               	retlw	0
  2940  08EF  3400               	retlw	0
  2941  08F0  342B               	retlw	43
  2942  08F1  3433               	retlw	51
  2943  08F2  342D               	retlw	45
  2944  08F3  342A               	retlw	42
  2945  08F4  3439               	retlw	57
  2946  08F5                     __end_of_ScanCode:	
  2947  08F5                     _ScanCodeSHIFT:	
  2948  08F5  3409               	retlw	9
  2949  08F6  347E               	retlw	126
  2950  08F7  3400               	retlw	0
  2951  08F8  3400               	retlw	0
  2952  08F9  3400               	retlw	0
  2953  08FA  3400               	retlw	0
  2954  08FB  3400               	retlw	0
  2955  08FC  3400               	retlw	0
  2956  08FD  3451               	retlw	81
  2957  08FE  3421               	retlw	33
  2958  08FF  3400               	retlw	0
  2959  0900  3400               	retlw	0
  2960  0901  3400               	retlw	0
  2961  0902  345A               	retlw	90
  2962  0903  3453               	retlw	83
  2963  0904  3441               	retlw	65
  2964  0905  3457               	retlw	87
  2965  0906  3440               	retlw	64
  2966  0907  3400               	retlw	0
  2967  0908  3400               	retlw	0
  2968  0909  3443               	retlw	67
  2969  090A  3458               	retlw	88
  2970  090B  3444               	retlw	68
  2971  090C  3445               	retlw	69
  2972  090D  3424               	retlw	36
  2973  090E  3423               	retlw	35
  2974  090F  3400               	retlw	0
  2975  0910  3400               	retlw	0
  2976  0911  3420               	retlw	32
  2977  0912  3456               	retlw	86
  2978  0913  3446               	retlw	70
  2979  0914  3454               	retlw	84
  2980  0915  3452               	retlw	82
  2981  0916  3425               	retlw	37
  2982  0917  3400               	retlw	0
  2983  0918  3400               	retlw	0
  2984  0919  344E               	retlw	78
  2985  091A  3442               	retlw	66
  2986  091B  3448               	retlw	72
  2987  091C  3447               	retlw	71
  2988  091D  3459               	retlw	89
  2989  091E  345E               	retlw	94
  2990  091F  3400               	retlw	0
  2991  0920  3400               	retlw	0
  2992  0921  3400               	retlw	0
  2993  0922  344D               	retlw	77
  2994  0923  344A               	retlw	74
  2995  0924  3455               	retlw	85
  2996  0925  3426               	retlw	38
  2997  0926  342A               	retlw	42
  2998  0927  3400               	retlw	0
  2999  0928  3400               	retlw	0
  3000  0929  343C               	retlw	60
  3001  092A  344B               	retlw	75
  3002  092B  3449               	retlw	73
  3003  092C  344F               	retlw	79
  3004  092D  3429               	retlw	41
  3005  092E  3428               	retlw	40
  3006  092F  3400               	retlw	0
  3007  0930  3400               	retlw	0
  3008  0931  343E               	retlw	62
  3009  0932  343F               	retlw	63
  3010  0933  344C               	retlw	76
  3011  0934  343A               	retlw	58
  3012  0935  3450               	retlw	80
  3013  0936  345F               	retlw	95
  3014  0937  3400               	retlw	0
  3015  0938  3400               	retlw	0
  3016  0939  3400               	retlw	0
  3017  093A  3422               	retlw	34
  3018  093B  3400               	retlw	0
  3019  093C  347B               	retlw	123
  3020  093D  342B               	retlw	43
  3021  093E  3400               	retlw	0
  3022  093F  3400               	retlw	0
  3023  0940  3400               	retlw	0
  3024  0941  3400               	retlw	0
  3025  0942  340D               	retlw	13
  3026  0943  347D               	retlw	125
  3027  0944  3400               	retlw	0
  3028  0945  347C               	retlw	124
  3029  0946  3400               	retlw	0
  3030  0947  3400               	retlw	0
  3031  0948  3400               	retlw	0
  3032  0949  3400               	retlw	0
  3033  094A  3400               	retlw	0
  3034  094B  3400               	retlw	0
  3035  094C  3400               	retlw	0
  3036  094D  3400               	retlw	0
  3037  094E  3408               	retlw	8
  3038  094F  3400               	retlw	0
  3039  0950  3400               	retlw	0
  3040  0951  3431               	retlw	49
  3041  0952  3400               	retlw	0
  3042  0953  3434               	retlw	52
  3043  0954  3437               	retlw	55
  3044  0955  3400               	retlw	0
  3045  0956  3400               	retlw	0
  3046  0957  3400               	retlw	0
  3047  0958  3430               	retlw	48
  3048  0959  342E               	retlw	46
  3049  095A  3432               	retlw	50
  3050  095B  3435               	retlw	53
  3051  095C  3436               	retlw	54
  3052  095D  3438               	retlw	56
  3053  095E  341B               	retlw	27
  3054  095F  3400               	retlw	0
  3055  0960  3400               	retlw	0
  3056  0961  342B               	retlw	43
  3057  0962  3433               	retlw	51
  3058  0963  342D               	retlw	45
  3059  0964  342A               	retlw	42
  3060  0965  3439               	retlw	57
  3061  0966                     __end_of_ScanCodeSHIFT:	
  3062  0966                     _ScanCodeFunctionE0:	
  3063  0966  341E               	retlw	30
  3064  0967  3400               	retlw	0
  3065  0968  3400               	retlw	0
  3066  0969  341F               	retlw	31
  3067  096A  3400               	retlw	0
  3068  096B  3400               	retlw	0
  3069  096C  3400               	retlw	0
  3070  096D  3400               	retlw	0
  3071  096E  3400               	retlw	0
  3072  096F  3400               	retlw	0
  3073  0970  3400               	retlw	0
  3074  0971  3400               	retlw	0
  3075  0972  3400               	retlw	0
  3076  0973  3400               	retlw	0
  3077  0974  3419               	retlw	25
  3078  0975  3400               	retlw	0
  3079  0976  3400               	retlw	0
  3080  0977  3400               	retlw	0
  3081  0978  3400               	retlw	0
  3082  0979  3400               	retlw	0
  3083  097A  3400               	retlw	0
  3084  097B  3400               	retlw	0
  3085  097C  341D               	retlw	29
  3086  097D  3400               	retlw	0
  3087  097E  3400               	retlw	0
  3088  097F  3400               	retlw	0
  3089  0980  3400               	retlw	0
  3090  0981  3400               	retlw	0
  3091  0982  3400               	retlw	0
  3092  0983  3400               	retlw	0
  3093  0984  3400               	retlw	0
  3094  0985  3400               	retlw	0
  3095  0986  3400               	retlw	0
  3096  0987  3400               	retlw	0
  3097  0988  3400               	retlw	0
  3098  0989  3400               	retlw	0
  3099  098A  3400               	retlw	0
  3100  098B  3400               	retlw	0
  3101  098C  3400               	retlw	0
  3102  098D  3400               	retlw	0
  3103  098E  3400               	retlw	0
  3104  098F  3400               	retlw	0
  3105  0990  3400               	retlw	0
  3106  0991  3400               	retlw	0
  3107  0992  3400               	retlw	0
  3108  0993  3400               	retlw	0
  3109  0994  3400               	retlw	0
  3110  0995  3400               	retlw	0
  3111  0996  3400               	retlw	0
  3112  0997  3400               	retlw	0
  3113  0998  3400               	retlw	0
  3114  0999  3400               	retlw	0
  3115  099A  3400               	retlw	0
  3116  099B  3400               	retlw	0
  3117  099C  3400               	retlw	0
  3118  099D  3400               	retlw	0
  3119  099E  3400               	retlw	0
  3120  099F  342F               	retlw	47
  3121  09A0  3400               	retlw	0
  3122  09A1  3400               	retlw	0
  3123  09A2  3400               	retlw	0
  3124  09A3  3400               	retlw	0
  3125  09A4  3400               	retlw	0
  3126  09A5  3400               	retlw	0
  3127  09A6  3400               	retlw	0
  3128  09A7  3400               	retlw	0
  3129  09A8  3400               	retlw	0
  3130  09A9  3400               	retlw	0
  3131  09AA  3400               	retlw	0
  3132  09AB  3400               	retlw	0
  3133  09AC  3400               	retlw	0
  3134  09AD  3400               	retlw	0
  3135  09AE  3400               	retlw	0
  3136  09AF  340D               	retlw	13
  3137  09B0  3400               	retlw	0
  3138  09B1  3400               	retlw	0
  3139  09B2  3400               	retlw	0
  3140  09B3  3400               	retlw	0
  3141  09B4  3400               	retlw	0
  3142  09B5  3400               	retlw	0
  3143  09B6  3400               	retlw	0
  3144  09B7  3400               	retlw	0
  3145  09B8  3400               	retlw	0
  3146  09B9  3400               	retlw	0
  3147  09BA  3400               	retlw	0
  3148  09BB  3400               	retlw	0
  3149  09BC  3400               	retlw	0
  3150  09BD  3400               	retlw	0
  3151  09BE  3401               	retlw	1
  3152  09BF  3400               	retlw	0
  3153  09C0  3403               	retlw	3
  3154  09C1  3416               	retlw	22
  3155  09C2  3400               	retlw	0
  3156  09C3  3400               	retlw	0
  3157  09C4  3400               	retlw	0
  3158  09C5  3415               	retlw	21
  3159  09C6  347F               	retlw	127
  3160  09C7  3404               	retlw	4
  3161  09C8  3400               	retlw	0
  3162  09C9  3405               	retlw	5
  3163  09CA  3402               	retlw	2
  3164  09CB  3400               	retlw	0
  3165  09CC  3400               	retlw	0
  3166  09CD  3400               	retlw	0
  3167  09CE  3400               	retlw	0
  3168  09CF  3418               	retlw	24
  3169  09D0  3400               	retlw	0
  3170  09D1  3400               	retlw	0
  3171  09D2  3417               	retlw	23
  3172  09D3                     __end_of_ScanCodeFunctionE0:	
  3173  09D3                     _dpowers:	
  3174  09D3  3401               	retlw	1
  3175  09D4  3400               	retlw	0
  3176  09D5  3400               	retlw	0
  3177  09D6  3400               	retlw	0
  3178  09D7  340A               	retlw	10
  3179  09D8  3400               	retlw	0
  3180  09D9  3400               	retlw	0
  3181  09DA  3400               	retlw	0
  3182  09DB  3464               	retlw	100
  3183  09DC  3400               	retlw	0
  3184  09DD  3400               	retlw	0
  3185  09DE  3400               	retlw	0
  3186  09DF  34E8               	retlw	232
  3187  09E0  3403               	retlw	3
  3188  09E1  3400               	retlw	0
  3189  09E2  3400               	retlw	0
  3190  09E3  3410               	retlw	16
  3191  09E4  3427               	retlw	39
  3192  09E5  3400               	retlw	0
  3193  09E6  3400               	retlw	0
  3194  09E7  34A0               	retlw	160
  3195  09E8  3486               	retlw	134
  3196  09E9  3401               	retlw	1
  3197  09EA  3400               	retlw	0
  3198  09EB  3440               	retlw	64
  3199  09EC  3442               	retlw	66
  3200  09ED  340F               	retlw	15
  3201  09EE  3400               	retlw	0
  3202  09EF  3480               	retlw	128
  3203  09F0  3496               	retlw	150
  3204  09F1  3498               	retlw	152
  3205  09F2  3400               	retlw	0
  3206  09F3  3400               	retlw	0
  3207  09F4  34E1               	retlw	225
  3208  09F5  34F5               	retlw	245
  3209  09F6  3405               	retlw	5
  3210  09F7  3400               	retlw	0
  3211  09F8  34CA               	retlw	202
  3212  09F9  349A               	retlw	154
  3213  09FA  343B               	retlw	59
  3214  09FB                     __end_of_dpowers:	
  3215  000B                     _INTCON	set	11
  3216  000B                     _INTCONbits	set	11
  3217  0011                     _PIR1bits	set	17
  3218  000C                     _PORTA	set	12
  3219  001B                     _PR2	set	27
  3220  001C                     _T2CON	set	28
  3221  001C                     _T2CONbits	set	28
  3222  009D                     _ADCON0	set	157
  3223  009E                     _ADCON1	set	158
  3224  009F                     _ADCON2	set	159
  3225  009C                     _ADRESH	set	156
  3226  009B                     _ADRESL	set	155
  3227  0095                     _OPTION_REGbits	set	149
  3228  0099                     _OSCCON	set	153
  3229  009A                     _OSCSTAT	set	154
  3230  0091                     _PIE1	set	145
  3231  0091                     _PIE1bits	set	145
  3232  008C                     _TRISAbits	set	140
  3233  008E                     _TRISCbits	set	142
  3234  04D0                     _HFIOFS	set	1232
  3235  0117                     _FVRCON	set	279
  3236  010C                     _LATA	set	268
  3237  010E                     _LATC	set	270
  3238  018C                     _ANSELA	set	396
  3239  018E                     _ANSELC	set	398
  3240  019F                     _BAUD1CON	set	415
  3241  0192                     _PMADRH	set	402
  3242  0191                     _PMADRL	set	401
  3243  0195                     _PMCON1	set	405
  3244  0196                     _PMCON2	set	406
  3245  0194                     _PMDATH	set	404
  3246  0193                     _PMDATL	set	403
  3247  019D                     _RC1STA	set	413
  3248  019D                     _RC1STAbits	set	413
  3249  0199                     _RCREG	set	409
  3250  019D                     _RCSTA	set	413
  3251  019D                     _RCSTAbits	set	413
  3252  019B                     _SPBRG	set	411
  3253  019C                     _SPBRGH	set	412
  3254  019E                     _TX1STA	set	414
  3255  019E                     _TX1STAbits	set	414
  3256  019A                     _TXREG	set	410
  3257  019E                     _TXSTAbits	set	414
  3258  020C                     _WPUA	set	524
  3259  020E                     _WPUC	set	526
  3260  029A                     _CCP2CONbits	set	666
  3261  0393                     _IOCAF	set	915
  3262  0392                     _IOCAN	set	914
  3263  0391                     _IOCAP	set	913
  3264  0E25                     _CKPPS	set	3621
  3265  0E0F                     _PPSLOCK	set	3599
  3266  0E24                     _RXPPS	set	3620
  3267  0EA2                     _RC2PPS	set	3746
  3268  09FB                     __stringdata:	
  3269  09FB                     STR_32:	
  3270  09FB  344B               	retlw	75	;'K'
  3271  09FC  3465               	retlw	101	;'e'
  3272  09FD  3479               	retlw	121	;'y'
  3273  09FE  3442               	retlw	66	;'B'
  3274  09FF  346F               	retlw	111	;'o'
  3275  0A00  3461               	retlw	97	;'a'
  3276  0A01  3472               	retlw	114	;'r'
  3277  0A02  3464               	retlw	100	;'d'
  3278  0A03  3420               	retlw	32	;' '
  3279  0A04  3452               	retlw	82	;'R'
  3280  0A05  3465               	retlw	101	;'e'
  3281  0A06  3473               	retlw	115	;'s'
  3282  0A07  3465               	retlw	101	;'e'
  3283  0A08  3474               	retlw	116	;'t'
  3284  0A09  3420               	retlw	32	;' '
  3285  0A0A  3474               	retlw	116	;'t'
  3286  0A0B  346F               	retlw	111	;'o'
  3287  0A0C  3420               	retlw	32	;' '
  3288  0A0D  3439               	retlw	57	;'9'
  3289  0A0E  3436               	retlw	54	;'6'
  3290  0A0F  3430               	retlw	48	;'0'
  3291  0A10  3430               	retlw	48	;'0'
  3292  0A11  3420               	retlw	32	;' '
  3293  0A12  3477               	retlw	119	;'w'
  3294  0A13  3469               	retlw	105	;'i'
  3295  0A14  3474               	retlw	116	;'t'
  3296  0A15  3468               	retlw	104	;'h'
  3297  0A16  3420               	retlw	32	;' '
  3298  0A17  346E               	retlw	110	;'n'
  3299  0A18  346F               	retlw	111	;'o'
  3300  0A19  3420               	retlw	32	;' '
  3301  0A1A  3470               	retlw	112	;'p'
  3302  0A1B  3461               	retlw	97	;'a'
  3303  0A1C  3472               	retlw	114	;'r'
  3304  0A1D  3469               	retlw	105	;'i'
  3305  0A1E  3474               	retlw	116	;'t'
  3306  0A1F  3479               	retlw	121	;'y'
  3307  0A20  3420               	retlw	32	;' '
  3308  0A21  3462               	retlw	98	;'b'
  3309  0A22  3469               	retlw	105	;'i'
  3310  0A23  3474               	retlw	116	;'t'
  3311  0A24  340D               	retlw	13
  3312  0A25  340A               	retlw	10
  3313  0A26  3400               	retlw	0
  3314  0A27                     STR_5:	
  3315  0A27  3454               	retlw	84	;'T'
  3316  0A28  346F               	retlw	111	;'o'
  3317  0A29  3420               	retlw	32	;' '
  3318  0A2A  3443               	retlw	67	;'C'
  3319  0A2B  3468               	retlw	104	;'h'
  3320  0A2C  3461               	retlw	97	;'a'
  3321  0A2D  346E               	retlw	110	;'n'
  3322  0A2E  3467               	retlw	103	;'g'
  3323  0A2F  3465               	retlw	101	;'e'
  3324  0A30  3420               	retlw	32	;' '
  3325  0A31  3442               	retlw	66	;'B'
  3326  0A32  3441               	retlw	65	;'A'
  3327  0A33  3455               	retlw	85	;'U'
  3328  0A34  3444               	retlw	68	;'D'
  3329  0A35  3420               	retlw	32	;' '
  3330  0A36  3468               	retlw	104	;'h'
  3331  0A37  3469               	retlw	105	;'i'
  3332  0A38  3474               	retlw	116	;'t'
  3333  0A39  3420               	retlw	32	;' '
  3334  0A3A  3422               	retlw	34	;'"'
  3335  0A3B  3443               	retlw	67	;'C'
  3336  0A3C  344E               	retlw	78	;'N'
  3337  0A3D  3454               	retlw	84	;'T'
  3338  0A3E  3420               	retlw	32	;' '
  3339  0A3F  342B               	retlw	43	;'+'
  3340  0A40  3420               	retlw	32	;' '
  3341  0A41  3441               	retlw	65	;'A'
  3342  0A42  344C               	retlw	76	;'L'
  3343  0A43  3454               	retlw	84	;'T'
  3344  0A44  3420               	retlw	32	;' '
  3345  0A45  342B               	retlw	43	;'+'
  3346  0A46  3420               	retlw	32	;' '
  3347  0A47  3444               	retlw	68	;'D'
  3348  0A48  3445               	retlw	69	;'E'
  3349  0A49  344C               	retlw	76	;'L'
  3350  0A4A  3422               	retlw	34	;'"'
  3351  0A4B  340D               	retlw	13
  3352  0A4C  340A               	retlw	10
  3353  0A4D  3400               	retlw	0
  3354  0A4E                     STR_34:	
  3355  0A4E  344B               	retlw	75	;'K'
  3356  0A4F  3465               	retlw	101	;'e'
  3357  0A50  3479               	retlw	121	;'y'
  3358  0A51  3442               	retlw	66	;'B'
  3359  0A52  346F               	retlw	111	;'o'
  3360  0A53  3461               	retlw	97	;'a'
  3361  0A54  3472               	retlw	114	;'r'
  3362  0A55  3464               	retlw	100	;'d'
  3363  0A56  3420               	retlw	32	;' '
  3364  0A57  3442               	retlw	66	;'B'
  3365  0A58  3461               	retlw	97	;'a'
  3366  0A59  3475               	retlw	117	;'u'
  3367  0A5A  3464               	retlw	100	;'d'
  3368  0A5B  3420               	retlw	32	;' '
  3369  0A5C  3477               	retlw	119	;'w'
  3370  0A5D  3469               	retlw	105	;'i'
  3371  0A5E  346C               	retlw	108	;'l'
  3372  0A5F  346C               	retlw	108	;'l'
  3373  0A60  3420               	retlw	32	;' '
  3374  0A61  3462               	retlw	98	;'b'
  3375  0A62  3465               	retlw	101	;'e'
  3376  0A63  3420               	retlw	32	;' '
  3377  0A64  3473               	retlw	115	;'s'
  3378  0A65  3465               	retlw	101	;'e'
  3379  0A66  3474               	retlw	116	;'t'
  3380  0A67  3420               	retlw	32	;' '
  3381  0A68  3474               	retlw	116	;'t'
  3382  0A69  346F               	retlw	111	;'o'
  3383  0A6A  3420               	retlw	32	;' '
  3384  0A6B  3425               	retlw	37	;'%'
  3385  0A6C  346C               	retlw	108	;'l'
  3386  0A6D  3475               	retlw	117	;'u'
  3387  0A6E  3400               	retlw	0
  3388  0A6F                     STR_40:	
  3389  0A6F  344B               	retlw	75	;'K'
  3390  0A70  3465               	retlw	101	;'e'
  3391  0A71  3479               	retlw	121	;'y'
  3392  0A72  3442               	retlw	66	;'B'
  3393  0A73  346F               	retlw	111	;'o'
  3394  0A74  3461               	retlw	97	;'a'
  3395  0A75  3472               	retlw	114	;'r'
  3396  0A76  3464               	retlw	100	;'d'
  3397  0A77  3420               	retlw	32	;' '
  3398  0A78  3442               	retlw	66	;'B'
  3399  0A79  3461               	retlw	97	;'a'
  3400  0A7A  3475               	retlw	117	;'u'
  3401  0A7B  3464               	retlw	100	;'d'
  3402  0A7C  3420               	retlw	32	;' '
  3403  0A7D  344F               	retlw	79	;'O'
  3404  0A7E  3475               	retlw	117	;'u'
  3405  0A7F  3474               	retlw	116	;'t'
  3406  0A80  3420               	retlw	32	;' '
  3407  0A81  346F               	retlw	111	;'o'
  3408  0A82  3466               	retlw	102	;'f'
  3409  0A83  3420               	retlw	32	;' '
  3410  0A84  3452               	retlw	82	;'R'
  3411  0A85  3461               	retlw	97	;'a'
  3412  0A86  346E               	retlw	110	;'n'
  3413  0A87  3467               	retlw	103	;'g'
  3414  0A88  3465               	retlw	101	;'e'
  3415  0A89  340D               	retlw	13
  3416  0A8A  340A               	retlw	10
  3417  0A8B  3400               	retlw	0
  3418  0A8C                     STR_2:	
  3419  0A8C  3450               	retlw	80	;'P'
  3420  0A8D  3453               	retlw	83	;'S'
  3421  0A8E  342F               	retlw	47	;'/'
  3422  0A8F  3432               	retlw	50	;'2'
  3423  0A90  3420               	retlw	32	;' '
  3424  0A91  344B               	retlw	75	;'K'
  3425  0A92  3465               	retlw	101	;'e'
  3426  0A93  3479               	retlw	121	;'y'
  3427  0A94  3462               	retlw	98	;'b'
  3428  0A95  346F               	retlw	111	;'o'
  3429  0A96  3461               	retlw	97	;'a'
  3430  0A97  3472               	retlw	114	;'r'
  3431  0A98  3464               	retlw	100	;'d'
  3432  0A99  3420               	retlw	32	;' '
  3433  0A9A  3474               	retlw	116	;'t'
  3434  0A9B  346F               	retlw	111	;'o'
  3435  0A9C  3420               	retlw	32	;' '
  3436  0A9D  3452               	retlw	82	;'R'
  3437  0A9E  3453               	retlw	83	;'S'
  3438  0A9F  342D               	retlw	45	;'-'
  3439  0AA0  3432               	retlw	50	;'2'
  3440  0AA1  3433               	retlw	51	;'3'
  3441  0AA2  3432               	retlw	50	;'2'
  3442  0AA3  340D               	retlw	13
  3443  0AA4  340A               	retlw	10
  3444  0AA5  3400               	retlw	0
  3445  0AA6                     STR_23:	
  3446  0AA6  344B               	retlw	75	;'K'
  3447  0AA7  3465               	retlw	101	;'e'
  3448  0AA8  3479               	retlw	121	;'y'
  3449  0AA9  3442               	retlw	66	;'B'
  3450  0AAA  346F               	retlw	111	;'o'
  3451  0AAB  3461               	retlw	97	;'a'
  3452  0AAC  3472               	retlw	114	;'r'
  3453  0AAD  3464               	retlw	100	;'d'
  3454  0AAE  3420               	retlw	32	;' '
  3455  0AAF  3450               	retlw	80	;'P'
  3456  0AB0  3472               	retlw	114	;'r'
  3457  0AB1  346F               	retlw	111	;'o'
  3458  0AB2  3467               	retlw	103	;'g'
  3459  0AB3  3472               	retlw	114	;'r'
  3460  0AB4  3461               	retlw	97	;'a'
  3461  0AB5  346D               	retlw	109	;'m'
  3462  0AB6  3420               	retlw	32	;' '
  3463  0AB7  3446               	retlw	70	;'F'
  3464  0AB8  3461               	retlw	97	;'a'
  3465  0AB9  3469               	retlw	105	;'i'
  3466  0ABA  346C               	retlw	108	;'l'
  3467  0ABB  340D               	retlw	13
  3468  0ABC  340A               	retlw	10
  3469  0ABD  3400               	retlw	0
  3470  0ABE                     STR_18:	
  3471  0ABE  3420               	retlw	32	;' '
  3472  0ABF  3477               	retlw	119	;'w'
  3473  0AC0  3469               	retlw	105	;'i'
  3474  0AC1  3474               	retlw	116	;'t'
  3475  0AC2  3468               	retlw	104	;'h'
  3476  0AC3  3420               	retlw	32	;' '
  3477  0AC4  3445               	retlw	69	;'E'
  3478  0AC5  3476               	retlw	118	;'v'
  3479  0AC6  3465               	retlw	101	;'e'
  3480  0AC7  346E               	retlw	110	;'n'
  3481  0AC8  3420               	retlw	32	;' '
  3482  0AC9  3470               	retlw	112	;'p'
  3483  0ACA  3461               	retlw	97	;'a'
  3484  0ACB  3472               	retlw	114	;'r'
  3485  0ACC  3469               	retlw	105	;'i'
  3486  0ACD  3474               	retlw	116	;'t'
  3487  0ACE  3479               	retlw	121	;'y'
  3488  0ACF  3420               	retlw	32	;' '
  3489  0AD0  3462               	retlw	98	;'b'
  3490  0AD1  3469               	retlw	105	;'i'
  3491  0AD2  3474               	retlw	116	;'t'
  3492  0AD3  340D               	retlw	13
  3493  0AD4  340A               	retlw	10
  3494  0AD5  3400               	retlw	0
  3495  0AD6                     STR_6:	
  3496  0AD6  344E               	retlw	78	;'N'
  3497  0AD7  346F               	retlw	111	;'o'
  3498  0AD8  3420               	retlw	32	;' '
  3499  0AD9  344B               	retlw	75	;'K'
  3500  0ADA  3465               	retlw	101	;'e'
  3501  0ADB  3479               	retlw	121	;'y'
  3502  0ADC  3462               	retlw	98	;'b'
  3503  0ADD  346F               	retlw	111	;'o'
  3504  0ADE  3461               	retlw	97	;'a'
  3505  0ADF  3472               	retlw	114	;'r'
  3506  0AE0  3464               	retlw	100	;'d'
  3507  0AE1  3420               	retlw	32	;' '
  3508  0AE2  3463               	retlw	99	;'c'
  3509  0AE3  346F               	retlw	111	;'o'
  3510  0AE4  346E               	retlw	110	;'n'
  3511  0AE5  346E               	retlw	110	;'n'
  3512  0AE6  3465               	retlw	101	;'e'
  3513  0AE7  3463               	retlw	99	;'c'
  3514  0AE8  3474               	retlw	116	;'t'
  3515  0AE9  3465               	retlw	101	;'e'
  3516  0AEA  3464               	retlw	100	;'d'
  3517  0AEB  340D               	retlw	13
  3518  0AEC  340A               	retlw	10
  3519  0AED  3400               	retlw	0
  3520  0AEE                     STR_17:	
  3521  0AEE  3420               	retlw	32	;' '
  3522  0AEF  3477               	retlw	119	;'w'
  3523  0AF0  3469               	retlw	105	;'i'
  3524  0AF1  3474               	retlw	116	;'t'
  3525  0AF2  3468               	retlw	104	;'h'
  3526  0AF3  3420               	retlw	32	;' '
  3527  0AF4  344F               	retlw	79	;'O'
  3528  0AF5  3464               	retlw	100	;'d'
  3529  0AF6  3464               	retlw	100	;'d'
  3530  0AF7  3420               	retlw	32	;' '
  3531  0AF8  3470               	retlw	112	;'p'
  3532  0AF9  3461               	retlw	97	;'a'
  3533  0AFA  3472               	retlw	114	;'r'
  3534  0AFB  3469               	retlw	105	;'i'
  3535  0AFC  3474               	retlw	116	;'t'
  3536  0AFD  3479               	retlw	121	;'y'
  3537  0AFE  3420               	retlw	32	;' '
  3538  0AFF  3462               	retlw	98	;'b'
  3539  0B00  3469               	retlw	105	;'i'
  3540  0B01  3474               	retlw	116	;'t'
  3541  0B02  340D               	retlw	13
  3542  0B03  340A               	retlw	10
  3543  0B04  3400               	retlw	0
  3544  0B05                     STR_8:	
  3545  0B05  3449               	retlw	73	;'I'
  3546  0B06  346E               	retlw	110	;'n'
  3547  0B07  3469               	retlw	105	;'i'
  3548  0B08  3474               	retlw	116	;'t'
  3549  0B09  3469               	retlw	105	;'i'
  3550  0B0A  3461               	retlw	97	;'a'
  3551  0B0B  346C               	retlw	108	;'l'
  3552  0B0C  3469               	retlw	105	;'i'
  3553  0B0D  347A               	retlw	122	;'z'
  3554  0B0E  3461               	retlw	97	;'a'
  3555  0B0F  3474               	retlw	116	;'t'
  3556  0B10  3469               	retlw	105	;'i'
  3557  0B11  346F               	retlw	111	;'o'
  3558  0B12  346E               	retlw	110	;'n'
  3559  0B13  3420               	retlw	32	;' '
  3560  0B14  3446               	retlw	70	;'F'
  3561  0B15  3461               	retlw	97	;'a'
  3562  0B16  3469               	retlw	105	;'i'
  3563  0B17  346C               	retlw	108	;'l'
  3564  0B18  340D               	retlw	13
  3565  0B19  340A               	retlw	10
  3566  0B1A  3400               	retlw	0
  3567  0B1B                     STR_16:	
  3568  0B1B  344B               	retlw	75	;'K'
  3569  0B1C  3465               	retlw	101	;'e'
  3570  0B1D  3479               	retlw	121	;'y'
  3571  0B1E  3442               	retlw	66	;'B'
  3572  0B1F  346F               	retlw	111	;'o'
  3573  0B20  3461               	retlw	97	;'a'
  3574  0B21  3472               	retlw	114	;'r'
  3575  0B22  3464               	retlw	100	;'d'
  3576  0B23  3420               	retlw	32	;' '
  3577  0B24  3442               	retlw	66	;'B'
  3578  0B25  3461               	retlw	97	;'a'
  3579  0B26  3475               	retlw	117	;'u'
  3580  0B27  3464               	retlw	100	;'d'
  3581  0B28  3420               	retlw	32	;' '
  3582  0B29  3469               	retlw	105	;'i'
  3583  0B2A  3473               	retlw	115	;'s'
  3584  0B2B  3420               	retlw	32	;' '
  3585  0B2C  3425               	retlw	37	;'%'
  3586  0B2D  346C               	retlw	108	;'l'
  3587  0B2E  3475               	retlw	117	;'u'
  3588  0B2F  3400               	retlw	0
  3589  0B30                     STR_7:	
  3590  0B30  344B               	retlw	75	;'K'
  3591  0B31  3465               	retlw	101	;'e'
  3592  0B32  3479               	retlw	121	;'y'
  3593  0B33  3462               	retlw	98	;'b'
  3594  0B34  346F               	retlw	111	;'o'
  3595  0B35  3461               	retlw	97	;'a'
  3596  0B36  3472               	retlw	114	;'r'
  3597  0B37  3464               	retlw	100	;'d'
  3598  0B38  3420               	retlw	32	;' '
  3599  0B39  3443               	retlw	67	;'C'
  3600  0B3A  346F               	retlw	111	;'o'
  3601  0B3B  346E               	retlw	110	;'n'
  3602  0B3C  346E               	retlw	110	;'n'
  3603  0B3D  3465               	retlw	101	;'e'
  3604  0B3E  3463               	retlw	99	;'c'
  3605  0B3F  3474               	retlw	116	;'t'
  3606  0B40  3465               	retlw	101	;'e'
  3607  0B41  3464               	retlw	100	;'d'
  3608  0B42  340D               	retlw	13
  3609  0B43  340A               	retlw	10
  3610  0B44  3400               	retlw	0
  3611  0B45                     STR_11:	
  3612  0B45  3456               	retlw	86	;'V'
  3613  0B46  346F               	retlw	111	;'o'
  3614  0B47  346C               	retlw	108	;'l'
  3615  0B48  3474               	retlw	116	;'t'
  3616  0B49  3461               	retlw	97	;'a'
  3617  0B4A  3467               	retlw	103	;'g'
  3618  0B4B  3465               	retlw	101	;'e'
  3619  0B4C  3420               	retlw	32	;' '
  3620  0B4D  3474               	retlw	116	;'t'
  3621  0B4E  346F               	retlw	111	;'o'
  3622  0B4F  346F               	retlw	111	;'o'
  3623  0B50  3420               	retlw	32	;' '
  3624  0B51  3448               	retlw	72	;'H'
  3625  0B52  3469               	retlw	105	;'i'
  3626  0B53  3467               	retlw	103	;'g'
  3627  0B54  3468               	retlw	104	;'h'
  3628  0B55  3421               	retlw	33	;'!'
  3629  0B56  340D               	retlw	13
  3630  0B57  340A               	retlw	10
  3631  0B58  3400               	retlw	0
  3632  0B59                     STR_10:	
  3633  0B59  3456               	retlw	86	;'V'
  3634  0B5A  346F               	retlw	111	;'o'
  3635  0B5B  346C               	retlw	108	;'l'
  3636  0B5C  3474               	retlw	116	;'t'
  3637  0B5D  3461               	retlw	97	;'a'
  3638  0B5E  3467               	retlw	103	;'g'
  3639  0B5F  3465               	retlw	101	;'e'
  3640  0B60  3420               	retlw	32	;' '
  3641  0B61  3474               	retlw	116	;'t'
  3642  0B62  346F               	retlw	111	;'o'
  3643  0B63  346F               	retlw	111	;'o'
  3644  0B64  3420               	retlw	32	;' '
  3645  0B65  344C               	retlw	76	;'L'
  3646  0B66  346F               	retlw	111	;'o'
  3647  0B67  3477               	retlw	119	;'w'
  3648  0B68  3421               	retlw	33	;'!'
  3649  0B69  340D               	retlw	13
  3650  0B6A  340A               	retlw	10
  3651  0B6B  3400               	retlw	0
  3652  0B6C                     STR_3:	
  3653  0B6C  3446               	retlw	70	;'F'
  3654  0B6D  3469               	retlw	105	;'i'
  3655  0B6E  3472               	retlw	114	;'r'
  3656  0B6F  346D               	retlw	109	;'m'
  3657  0B70  3477               	retlw	119	;'w'
  3658  0B71  3461               	retlw	97	;'a'
  3659  0B72  3472               	retlw	114	;'r'
  3660  0B73  3465               	retlw	101	;'e'
  3661  0B74  3420               	retlw	32	;' '
  3662  0B75  3456               	retlw	86	;'V'
  3663  0B76  3465               	retlw	101	;'e'
  3664  0B77  3472               	retlw	114	;'r'
  3665  0B78  3473               	retlw	115	;'s'
  3666  0B79  3469               	retlw	105	;'i'
  3667  0B7A  346F               	retlw	111	;'o'
  3668  0B7B  346E               	retlw	110	;'n'
  3669  0B7C  343A               	retlw	58	;':'
  3670  0B7D  3420               	retlw	32	;' '
  3671  0B7E  3400               	retlw	0
  3672  0B7F                     STR_31:	
  3673  0B7F  3445               	retlw	69	;'E'
  3674  0B80  346E               	retlw	110	;'n'
  3675  0B81  3474               	retlw	116	;'t'
  3676  0B82  3465               	retlw	101	;'e'
  3677  0B83  3472               	retlw	114	;'r'
  3678  0B84  3420               	retlw	32	;' '
  3679  0B85  3442               	retlw	66	;'B'
  3680  0B86  3461               	retlw	97	;'a'
  3681  0B87  3475               	retlw	117	;'u'
  3682  0B88  3464               	retlw	100	;'d'
  3683  0B89  3420               	retlw	32	;' '
  3684  0B8A  3472               	retlw	114	;'r'
  3685  0B8B  3461               	retlw	97	;'a'
  3686  0B8C  3474               	retlw	116	;'t'
  3687  0B8D  3465               	retlw	101	;'e'
  3688  0B8E  340D               	retlw	13
  3689  0B8F  340A               	retlw	10
  3690  0B90  3400               	retlw	0
  3691  0B91                     STR_20:	
  3692  0B91  3420               	retlw	32	;' '
  3693  0B92  3477               	retlw	119	;'w'
  3694  0B93  3469               	retlw	105	;'i'
  3695  0B94  3474               	retlw	116	;'t'
  3696  0B95  3468               	retlw	104	;'h'
  3697  0B96  3420               	retlw	32	;' '
  3698  0B97  3453               	retlw	83	;'S'
  3699  0B98  3470               	retlw	112	;'p'
  3700  0B99  3461               	retlw	97	;'a'
  3701  0B9A  3463               	retlw	99	;'c'
  3702  0B9B  3465               	retlw	101	;'e'
  3703  0B9C  3420               	retlw	32	;' '
  3704  0B9D  3462               	retlw	98	;'b'
  3705  0B9E  3469               	retlw	105	;'i'
  3706  0B9F  3474               	retlw	116	;'t'
  3707  0BA0  340D               	retlw	13
  3708  0BA1  340A               	retlw	10
  3709  0BA2  3400               	retlw	0
  3710  0BA3                     STR_19:	
  3711  0BA3  3420               	retlw	32	;' '
  3712  0BA4  3477               	retlw	119	;'w'
  3713  0BA5  3469               	retlw	105	;'i'
  3714  0BA6  3474               	retlw	116	;'t'
  3715  0BA7  3468               	retlw	104	;'h'
  3716  0BA8  3420               	retlw	32	;' '
  3717  0BA9  344D               	retlw	77	;'M'
  3718  0BAA  3461               	retlw	97	;'a'
  3719  0BAB  3472               	retlw	114	;'r'
  3720  0BAC  346B               	retlw	107	;'k'
  3721  0BAD  3420               	retlw	32	;' '
  3722  0BAE  3462               	retlw	98	;'b'
  3723  0BAF  3469               	retlw	105	;'i'
  3724  0BB0  3474               	retlw	116	;'t'
  3725  0BB1  340D               	retlw	13
  3726  0BB2  340A               	retlw	10
  3727  0BB3  3400               	retlw	0
  3728  0BB4                     STR_9:	
  3729  0BB4  344B               	retlw	75	;'K'
  3730  0BB5  3465               	retlw	101	;'e'
  3731  0BB6  3479               	retlw	121	;'y'
  3732  0BB7  3462               	retlw	98	;'b'
  3733  0BB8  346F               	retlw	111	;'o'
  3734  0BB9  3461               	retlw	97	;'a'
  3735  0BBA  3472               	retlw	114	;'r'
  3736  0BBB  3464               	retlw	100	;'d'
  3737  0BBC  3420               	retlw	32	;' '
  3738  0BBD  3450               	retlw	80	;'P'
  3739  0BBE  3461               	retlw	97	;'a'
  3740  0BBF  3473               	retlw	115	;'s'
  3741  0BC0  3473               	retlw	115	;'s'
  3742  0BC1  3421               	retlw	33	;'!'
  3743  0BC2  340D               	retlw	13
  3744  0BC3  340A               	retlw	10
  3745  0BC4  3400               	retlw	0
  3746  0BC5                     __end_of__stringdata:	
  3747                           
  3748                           ; #config settings
  3749  0000                     
  3750                           	psect	cinit
  3751  00E3                     start_initialization:	
  3752  00E3                     __initialization:	
  3753                           
  3754                           ; Clear objects allocated to BANK0
  3755  00E3  01E6               	clrf	__pbssBANK0& (0+127)
  3756  00E4  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3757  00E5  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3758  00E6  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3759  00E7  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3760                           
  3761                           ; Clear objects allocated to BANK1
  3762  00E8  0021               	movlb	1	; select bank1
  3763  00E9  01E8               	clrf	__pbssBANK1& (0+127)
  3764  00EA  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3765  00EB  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3766                           
  3767                           ; Clear objects allocated to BANK2
  3768  00EC  305F               	movlw	low __pbssBANK2
  3769  00ED  0084               	movwf	4
  3770  00EE  3001               	movlw	high __pbssBANK2
  3771  00EF  0085               	movwf	5
  3772  00F0  300F               	movlw	15
  3773  00F1  3198  20B8  3180   	fcall	clear_ram0
  3774                           
  3775                           ; Clear objects allocated to BANK3
  3776  00F4  30A0               	movlw	low __pbssBANK3
  3777  00F5  0084               	movwf	4
  3778  00F6  3001               	movlw	high __pbssBANK3
  3779  00F7  0085               	movwf	5
  3780  00F8  300F               	movlw	15
  3781  00F9  3198  20B8  3180   	fcall	clear_ram0
  3782                           
  3783                           ; Clear objects allocated to BANK4
  3784  00FC  302E               	movlw	low __pbssBANK4
  3785  00FD  0084               	movwf	4
  3786  00FE  3002               	movlw	high __pbssBANK4
  3787  00FF  0085               	movwf	5
  3788  0100  300C               	movlw	12
  3789  0101  3198  20B8  3180   	fcall	clear_ram0
  3790                           
  3791                           ; Initialize objects allocated to BANK1
  3792  0104  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  3793  0107  00EB               	movwf	__pdataBANK1& (0+127)
  3794                           
  3795                           ; Initialize objects allocated to BANK2
  3796  0108  0022               	movlb	2	; select bank2
  3797  0109  3190  2001  3180   	fcall	__pidataBANK2	;fetch initializer
  3798  010C  00EE               	movwf	__pdataBANK2& (0+127)
  3799                           
  3800                           ; Initialize objects allocated to BANK4
  3801  010D  302A               	movlw	low __pidataBANK4
  3802  010E  0084               	movwf	4
  3803  010F  3099               	movlw	(high __pidataBANK4)| (0+128)
  3804  0110  0085               	movwf	5
  3805  0111  3020               	movlw	low __pdataBANK4
  3806  0112  0086               	movwf	6
  3807  0113  3002               	movlw	high __pdataBANK4
  3808  0114  0087               	movwf	7
  3809  0115  300E               	movlw	14
  3810  0116  3198  20B2         	fcall	init_ram
  3811  0118                     end_of_initialization:	
  3812                           ;End of C runtime variable initialization code
  3813                           
  3814  0118                     __end_of__initialization:	
  3815  0118  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3816  0119  0020               	movlb	0
  3817  011A  318E  2E08         	ljmp	_main	;jump to C main() function
  3818                           
  3819                           	psect	bssBANK0
  3820  0066                     __pbssBANK0:	
  3821  0066                     _BaudTyped:	
  3822  0066                     	ds	4
  3823  006A                     _PS_2_bits:	
  3824  006A                     	ds	1
  3825                           
  3826                           	psect	bssBANK1
  3827  00E8                     __pbssBANK1:	
  3828  00E8                     _Alarm:	
  3829  00E8                     	ds	1
  3830  00E9                     _ECHO:	
  3831  00E9                     	ds	1
  3832  00EA                     _PARITY:	
  3833  00EA                     	ds	1
  3834                           
  3835                           	psect	dataBANK1
  3836  00EB                     __pdataBANK1:	
  3837  00EB                     _No_Keyboard:	
  3838  00EB                     	ds	1
  3839                           
  3840                           	psect	bssBANK2
  3841  015F                     __pbssBANK2:	
  3842  015F                     _BatteryVoltage:	
  3843  015F                     	ds	4
  3844  0163                     _BAUDMODE:	
  3845  0163                     	ds	1
  3846  0164                     _Caps_Lock_Key:	
  3847  0164                     	ds	1
  3848  0165                     _Caps_Lock_Key_old:	
  3849  0165                     	ds	1
  3850  0166                     _Delete:	
  3851  0166                     	ds	1
  3852  0167                     _LALT:	
  3853  0167                     	ds	1
  3854  0168                     _LControl:	
  3855  0168                     	ds	1
  3856  0169                     _Left_Shift_Key_old:	
  3857  0169                     	ds	1
  3858  016A                     _RControl:	
  3859  016A                     	ds	1
  3860  016B                     _Right_Shift_Key_old:	
  3861  016B                     	ds	1
  3862  016C                     _blinkdelay:	
  3863  016C                     	ds	1
  3864  016D                     _i:	
  3865  016D                     	ds	1
  3866                           
  3867                           	psect	dataBANK2
  3868  016E                     __pdataBANK2:	
  3869  016E                     _No_Keyboard_old:	
  3870  016E                     	ds	1
  3871                           
  3872                           	psect	bssBANK3
  3873  01A0                     __pbssBANK3:	
  3874  01A0                     _PS_2_Read_Data_First:	
  3875  01A0                     	ds	2
  3876  01A2                     _PS_2_Read_Data_Forth:	
  3877  01A2                     	ds	2
  3878  01A4                     _PS_2_Read_Data_Second:	
  3879  01A4                     	ds	2
  3880  01A6                     _PS_2_Read_Data_Third:	
  3881  01A6                     	ds	2
  3882  01A8                     _CapsCount:	
  3883  01A8                     	ds	1
  3884  01A9                     _Caps_Lock:	
  3885  01A9                     	ds	1
  3886  01AA                     _Left_Shift_Key:	
  3887  01AA                     	ds	1
  3888  01AB                     _ParityTyped:	
  3889  01AB                     	ds	1
  3890  01AC                     _RALT:	
  3891  01AC                     	ds	1
  3892  01AD                     _Right_Shift_Key:	
  3893  01AD                     	ds	1
  3894  01AE                     _Shift_Key:	
  3895  01AE                     	ds	1
  3896                           
  3897                           	psect	bssBANK4
  3898  022E                     __pbssBANK4:	
  3899  022E                     _PS_2_Read_Data_FirstTEMP:	
  3900  022E                     	ds	2
  3901  0230                     _PS_2_Read_Data_ForthTEMP:	
  3902  0230                     	ds	2
  3903  0232                     _PS_2_Read_Data_SecondTEMP:	
  3904  0232                     	ds	2
  3905  0234                     _PS_2_Read_Data_ThirdTEMP:	
  3906  0234                     	ds	2
  3907  0236                     _SinLEDtimer:	
  3908  0236                     	ds	2
  3909  0238                     _pwrLEDtoggle:	
  3910  0238                     	ds	2
  3911                           
  3912                           	psect	dataBANK4
  3913  0220                     __pdataBANK4:	
  3914  0220                     _BAUD:	
  3915  0220                     	ds	4
  3916  0224                     _Read_Timer:	
  3917  0224                     	ds	2
  3918  0226                     _MEM:	
  3919  0226                     	ds	4
  3920  022A                     _Version:	
  3921  022A                     	ds	4
  3922                           
  3923                           	psect	clrtext
  3924  18B8                     clear_ram0:	
  3925                           ;	Called with FSR0 containing the base address, and
  3926                           ;	WREG with the size to clear
  3927                           
  3928  18B8  0064               	clrwdt	;clear the watchdog before getting into this loop
  3929  18B9                     clrloop0:	
  3930  18B9  0180               	clrf	0	;clear RAM location pointed to by FSR
  3931  18BA  3101               	addfsr 0,1
  3932  18BB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3933  18BC  28B9               	goto	clrloop0	;have we reached the end yet?
  3934  18BD  3400               	retlw	0	;all done for this memory range, return
  3935                           
  3936                           	psect	inittext
  3937  18B2                     init_ram:	
  3938  18B2  00FE               	movwf	126
  3939  18B3                     initloop:	
  3940  18B3  0012               	moviw fsr0++
  3941  18B4  001E               	movwi fsr1++
  3942  18B5  0BFE               	decfsz	126,f
  3943  18B6  28B3               	goto	initloop
  3944  18B7  3400               	retlw	0
  3945                           
  3946                           	psect	cstackBANK5
  3947  02A0                     __pcstackBANK5:	
  3948  02A0                     PS_2_Update@buf:	
  3949                           
  3950                           ; 60 bytes @ 0x0
  3951  02A0                     	ds	60
  3952  02DC                     _PS_2_Update$824:	
  3953                           
  3954                           ; 1 bytes @ 0x3C
  3955  02DC                     	ds	1
  3956  02DD                     _PS_2_Update$825:	
  3957                           
  3958                           ; 1 bytes @ 0x3D
  3959  02DD                     	ds	1
  3960  02DE                     _PS_2_Update$826:	
  3961                           
  3962                           ; 1 bytes @ 0x3E
  3963  02DE                     	ds	1
  3964  02DF                     _PS_2_Update$827:	
  3965                           
  3966                           ; 1 bytes @ 0x3F
  3967  02DF                     	ds	1
  3968  02E0                     PS_2_Update@temp:	
  3969                           
  3970                           ; 1 bytes @ 0x40
  3971  02E0                     	ds	1
  3972                           
  3973                           	psect	cstackBANK3
  3974  01AF                     __pcstackBANK3:	
  3975  01AF                     ??_PS_2_Update:	
  3976                           
  3977                           ; 0 bytes @ 0x0
  3978  01AF                     	ds	9
  3979                           
  3980                           	psect	cstackBANK2
  3981  0120                     __pcstackBANK2:	
  3982  0120                     SetBaud@buf:	
  3983                           
  3984                           ; 50 bytes @ 0x0
  3985  0120                     	ds	50
  3986  0152                     SetBaud@Baudtemp:	
  3987                           
  3988                           ; 4 bytes @ 0x32
  3989  0152                     	ds	4
  3990  0156                     SetBaud@Paritytemp:	
  3991                           
  3992                           ; 4 bytes @ 0x36
  3993  0156                     	ds	4
  3994  015A                     SetBaud@temp:	
  3995                           
  3996                           ; 4 bytes @ 0x3A
  3997  015A                     	ds	4
  3998  015E                     SetBaud@i:	
  3999                           
  4000                           ; 1 bytes @ 0x3E
  4001  015E                     	ds	1
  4002                           
  4003                           	psect	cstackBANK1
  4004  00A0                     __pcstackBANK1:	
  4005  00A0                     ReadVoltage@voltage:	
  4006  00A0                     WriteFlash_Sequential@TempBufH:	
  4007                           ; 4 bytes @ 0x0
  4008                           
  4009  00A0                     Init_System@buf:	
  4010                           ; 32 bytes @ 0x0
  4011                           
  4012                           
  4013                           ; 60 bytes @ 0x0
  4014  00A0                     	ds	4
  4015  00A4                     ReadVoltage@temp:	
  4016                           
  4017                           ; 2 bytes @ 0x4
  4018  00A4                     	ds	28
  4019  00C0                     WriteFlash_Sequential@TempBufL:	
  4020                           
  4021                           ; 32 bytes @ 0x20
  4022  00C0                     	ds	28
  4023  00DC                     Init_System@temp:	
  4024                           
  4025                           ; 4 bytes @ 0x3C
  4026  00DC                     	ds	4
  4027  00E0                     Init_System@Parity:	
  4028  00E0                     WriteFlash_Sequential@tempH:	
  4029                           ; 1 bytes @ 0x40
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x40
  4033  00E0                     	ds	1
  4034  00E1                     WriteFlash_Sequential@tempL:	
  4035  00E1                     Init_System@Baud:	
  4036                           ; 1 bytes @ 0x41
  4037                           
  4038                           
  4039                           ; 4 bytes @ 0x41
  4040  00E1                     	ds	1
  4041  00E2                     WriteFlash_Sequential@amountTemp:	
  4042                           
  4043                           ; 1 bytes @ 0x42
  4044  00E2                     	ds	1
  4045  00E3                     WriteFlash_Sequential@temp:	
  4046                           
  4047                           ; 2 bytes @ 0x43
  4048  00E3                     	ds	2
  4049  00E5                     WriteFlash_Sequential@spaces:	
  4050                           
  4051                           ; 1 bytes @ 0x45
  4052  00E5                     	ds	1
  4053  00E6                     WriteFlash_Sequential@i:	
  4054                           
  4055                           ; 1 bytes @ 0x46
  4056  00E6                     	ds	1
  4057  00E7                     main@i:	
  4058                           
  4059                           ; 1 bytes @ 0x47
  4060  00E7                     	ds	1
  4061                           
  4062                           	psect	cstackCOMMON
  4063  0070                     __pcstackCOMMON:	
  4064  0070                     ?_ConfigureOscillator:	
  4065  0070                     ?_InitApp:	
  4066                           ; 0 bytes @ 0x0
  4067                           
  4068  0070                     ?_Init_System:	
  4069                           ; 0 bytes @ 0x0
  4070                           
  4071  0070                     ?_PS_2_INIT:	
  4072                           ; 0 bytes @ 0x0
  4073                           
  4074  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4075                           ; 0 bytes @ 0x0
  4076                           
  4077  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4078                           ; 0 bytes @ 0x0
  4079                           
  4080  0070                     ?_PS_2_Update:	
  4081                           ; 0 bytes @ 0x0
  4082                           
  4083  0070                     ?_baudUSART:	
  4084                           ; 0 bytes @ 0x0
  4085                           
  4086  0070                     ?_Clock_TRIS:	
  4087                           ; 0 bytes @ 0x0
  4088                           
  4089  0070                     ?_Data_TRIS:	
  4090                           ; 0 bytes @ 0x0
  4091                           
  4092  0070                     ?_INIT_PS_2_INTERRUPT:	
  4093                           ; 0 bytes @ 0x0
  4094                           
  4095  0070                     ?_DisableInternalADC:	
  4096                           ; 0 bytes @ 0x0
  4097                           
  4098  0070                     ?_isr:	
  4099                           ; 0 bytes @ 0x0
  4100                           
  4101  0070                     ?_main:	
  4102                           ; 0 bytes @ 0x0
  4103                           
  4104  0070                     ?_CloseUSART:	
  4105                           ; 0 bytes @ 0x0
  4106                           
  4107  0070                     ?_UNLOCK:	
  4108                           ; 0 bytes @ 0x0
  4109                           
  4110  0070                     ?i1_delayUS:	
  4111                           ; 0 bytes @ 0x0
  4112                           
  4113  0070                     ??i1_ReadUSART:	
  4114                           ; 0 bytes @ 0x0
  4115                           
  4116  0070                     ??i1_READ_PS_2_PIN:	
  4117                           ; 0 bytes @ 0x0
  4118                           
  4119  0070                     ?_READ_PS_2_PIN:	
  4120                           ; 0 bytes @ 0x0
  4121                           
  4122  0070                     ?_ReadUSART:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_Keyboard_Connected:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ?_Init_PS_2_Send:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_Decode_Scan_Code_Shift:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_Send_PS2:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_Decode_Scan_Code:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ?_Decode_Scan_Code_Function:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_Reverse_Byte:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ?_ISNUMBER:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?i1_CheckSum_byte:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?i1_ReadUSART:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?i1_READ_PS_2_PIN:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     i1CheckSum_byte@This:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     i1delayUS@US:	
  4168                           ; 2 bytes @ 0x0
  4169                           
  4170                           
  4171                           ; 4 bytes @ 0x0
  4172  0070                     	ds	1
  4173  0071                     i1ReadUSART@data:	
  4174                           
  4175                           ; 1 bytes @ 0x1
  4176  0071                     	ds	1
  4177  0072                     i1CheckSum_byte@Odd_Even:	
  4178                           
  4179                           ; 1 bytes @ 0x2
  4180  0072                     	ds	1
  4181  0073                     ??i1_CheckSum_byte:	
  4182                           
  4183                           ; 0 bytes @ 0x3
  4184  0073                     	ds	1
  4185  0074                     ??i1_delayUS:	
  4186  0074                     i1CheckSum_byte@ThisTemp:	
  4187                           ; 0 bytes @ 0x4
  4188                           
  4189                           
  4190                           ; 2 bytes @ 0x4
  4191  0074                     	ds	1
  4192  0075                     i1delayUS@i:	
  4193                           
  4194                           ; 4 bytes @ 0x5
  4195  0075                     	ds	1
  4196  0076                     i1CheckSum_byte@Parity:	
  4197                           
  4198                           ; 1 bytes @ 0x6
  4199  0076                     	ds	1
  4200  0077                     i1CheckSum_byte@i:	
  4201                           
  4202                           ; 1 bytes @ 0x7
  4203  0077                     	ds	1
  4204  0078                     ?i1_UARTchar:	
  4205  0078                     i1UARTchar@override:	
  4206                           ; 0 bytes @ 0x8
  4207                           
  4208                           
  4209                           ; 1 bytes @ 0x8
  4210  0078                     	ds	1
  4211  0079                     i1delayUS@j:	
  4212  0079                     i1UARTchar@NinethBit_override_data:	
  4213                           ; 1 bytes @ 0x9
  4214                           
  4215                           
  4216                           ; 1 bytes @ 0x9
  4217  0079                     	ds	1
  4218  007A                     ??i1_UARTchar:	
  4219  007A                     ?i1_UART_send_break_timed:	
  4220                           ; 0 bytes @ 0xA
  4221                           
  4222  007A                     i1UART_send_break_timed@US:	
  4223                           ; 0 bytes @ 0xA
  4224                           
  4225                           
  4226                           ; 2 bytes @ 0xA
  4227  007A                     	ds	2
  4228  007C                     ??i1_UART_send_break_timed:	
  4229                           
  4230                           ; 0 bytes @ 0xC
  4231  007C                     	ds	2
  4232                           
  4233                           	psect	cstackBANK0
  4234  0020                     __pcstackBANK0:	
  4235  0020                     i1UARTchar@data:	
  4236                           
  4237                           ; 1 bytes @ 0x0
  4238  0020                     	ds	1
  4239  0021                     ??_isr:	
  4240                           
  4241                           ; 0 bytes @ 0x1
  4242  0021                     	ds	2
  4243  0023                     isr@Rx_fault:	
  4244                           
  4245                           ; 1 bytes @ 0x3
  4246  0023                     	ds	1
  4247  0024                     isr@rx:	
  4248                           
  4249                           ; 1 bytes @ 0x4
  4250  0024                     	ds	1
  4251  0025                     ??_READ_PS_2_PIN:	
  4252  0025                     ??_ReadUSART:	
  4253                           ; 0 bytes @ 0x5
  4254                           
  4255  0025                     ??_ConfigureOscillator:	
  4256                           ; 0 bytes @ 0x5
  4257                           
  4258  0025                     ??_InitApp:	
  4259                           ; 0 bytes @ 0x5
  4260                           
  4261  0025                     ?_delayUS:	
  4262                           ; 0 bytes @ 0x5
  4263                           
  4264  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4265                           ; 0 bytes @ 0x5
  4266                           
  4267  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4268                           ; 0 bytes @ 0x5
  4269                           
  4270  0025                     ?_OpenUSART:	
  4271                           ; 0 bytes @ 0x5
  4272                           
  4273  0025                     ??_baudUSART:	
  4274                           ; 0 bytes @ 0x5
  4275                           
  4276  0025                     ??_Clock_TRIS:	
  4277                           ; 0 bytes @ 0x5
  4278                           
  4279  0025                     ??_Data_TRIS:	
  4280                           ; 0 bytes @ 0x5
  4281                           
  4282  0025                     ??_INIT_PS_2_INTERRUPT:	
  4283                           ; 0 bytes @ 0x5
  4284                           
  4285  0025                     ??_Decode_Scan_Code_Shift:	
  4286                           ; 0 bytes @ 0x5
  4287                           
  4288  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4289                           ; 0 bytes @ 0x5
  4290                           
  4291  0025                     ??_Decode_Scan_Code:	
  4292                           ; 0 bytes @ 0x5
  4293                           
  4294  0025                     ??_Decode_Scan_Code_Function:	
  4295                           ; 0 bytes @ 0x5
  4296                           
  4297  0025                     ??_DisableInternalADC:	
  4298                           ; 0 bytes @ 0x5
  4299                           
  4300  0025                     ??_Reverse_Byte:	
  4301                           ; 0 bytes @ 0x5
  4302                           
  4303  0025                     ??_ISNUMBER:	
  4304                           ; 0 bytes @ 0x5
  4305                           
  4306  0025                     ??_CloseUSART:	
  4307                           ; 0 bytes @ 0x5
  4308                           
  4309  0025                     ??_UNLOCK:	
  4310                           ; 0 bytes @ 0x5
  4311                           
  4312  0025                     ?_BlockErase:	
  4313                           ; 0 bytes @ 0x5
  4314                           
  4315  0025                     ?___flge:	
  4316                           ; 0 bytes @ 0x5
  4317                           
  4318  0025                     ?_CheckSum_byte:	
  4319                           ; 1 bit 
  4320                           
  4321  0025                     ?_ReadFlash_2Byte:	
  4322                           ; 1 bytes @ 0x5
  4323                           
  4324  0025                     ?___flpack:	
  4325                           ; 2 bytes @ 0x5
  4326                           
  4327  0025                     ?___lmul:	
  4328                           ; 4 bytes @ 0x5
  4329                           
  4330  0025                     ?___lldiv:	
  4331                           ; 4 bytes @ 0x5
  4332                           
  4333  0025                     ISNUMBER@ascii:	
  4334                           ; 4 bytes @ 0x5
  4335                           
  4336  0025                     baudUSART@baudconfig:	
  4337                           ; 1 bytes @ 0x5
  4338                           
  4339  0025                     Clock_TRIS@direction:	
  4340                           ; 1 bytes @ 0x5
  4341                           
  4342  0025                     Data_TRIS@direction:	
  4343                           ; 1 bytes @ 0x5
  4344                           
  4345  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4346                           ; 1 bytes @ 0x5
  4347                           
  4348  0025                     READ_PS_2_PIN@DATA_CLK:	
  4349                           ; 1 bytes @ 0x5
  4350                           
  4351  0025                     Decode_Scan_Code@Code:	
  4352                           ; 1 bytes @ 0x5
  4353                           
  4354  0025                     Decode_Scan_Code_Shift@Code:	
  4355                           ; 1 bytes @ 0x5
  4356                           
  4357  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4358                           ; 1 bytes @ 0x5
  4359                           
  4360  0025                     Decode_Scan_Code_Function@Code:	
  4361                           ; 1 bytes @ 0x5
  4362                           
  4363  0025                     CheckSum_byte@This:	
  4364                           ; 1 bytes @ 0x5
  4365                           
  4366  0025                     OpenUSART@spbrg:	
  4367                           ; 2 bytes @ 0x5
  4368                           
  4369  0025                     ReadFlash_2Byte@row:	
  4370                           ; 2 bytes @ 0x5
  4371                           
  4372  0025                     BlockErase@row:	
  4373                           ; 2 bytes @ 0x5
  4374                           
  4375  0025                     delayUS@US:	
  4376                           ; 2 bytes @ 0x5
  4377                           
  4378  0025                     ___lmul@multiplier:	
  4379                           ; 4 bytes @ 0x5
  4380                           
  4381  0025                     ___flpack@arg:	
  4382                           ; 4 bytes @ 0x5
  4383                           
  4384  0025                     ___flge@ff1:	
  4385                           ; 4 bytes @ 0x5
  4386                           
  4387  0025                     ___lldiv@divisor:	
  4388                           ; 4 bytes @ 0x5
  4389                           
  4390                           
  4391                           ; 4 bytes @ 0x5
  4392  0025                     	ds	1
  4393  0026                     ??_PS_2_INIT:	
  4394  0026                     ReadUSART@data:	
  4395                           ; 0 bytes @ 0x6
  4396                           
  4397  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4398                           ; 1 bytes @ 0x6
  4399                           
  4400  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4401                           ; 1 bytes @ 0x6
  4402                           
  4403                           
  4404                           ; 1 bytes @ 0x6
  4405  0026                     	ds	1
  4406  0027                     ??_OpenUSART:	
  4407  0027                     ??_BlockErase:	
  4408                           ; 0 bytes @ 0x7
  4409                           
  4410  0027                     CheckSum_byte@Odd_Even:	
  4411                           ; 0 bytes @ 0x7
  4412                           
  4413  0027                     Reverse_Byte@temp:	
  4414                           ; 1 bytes @ 0x7
  4415                           
  4416  0027                     OpenUSART@config:	
  4417                           ; 1 bytes @ 0x7
  4418                           
  4419  0027                     ReadFlash_2Byte@column:	
  4420                           ; 1 bytes @ 0x7
  4421                           
  4422                           
  4423                           ; 1 bytes @ 0x7
  4424  0027                     	ds	1
  4425  0028                     ??_CheckSum_byte:	
  4426  0028                     ??_ReadFlash_2Byte:	
  4427                           ; 0 bytes @ 0x8
  4428                           
  4429  0028                     Reverse_Byte@This:	
  4430                           ; 0 bytes @ 0x8
  4431                           
  4432                           
  4433                           ; 1 bytes @ 0x8
  4434  0028                     	ds	1
  4435  0029                     ??_delayUS:	
  4436  0029                     ___flpack@exp:	
  4437                           ; 0 bytes @ 0x9
  4438                           
  4439  0029                     CheckSum_byte@ThisTemp:	
  4440                           ; 1 bytes @ 0x9
  4441                           
  4442  0029                     ___lmul@multiplicand:	
  4443                           ; 2 bytes @ 0x9
  4444                           
  4445  0029                     ___flge@ff2:	
  4446                           ; 4 bytes @ 0x9
  4447                           
  4448  0029                     ___lldiv@dividend:	
  4449                           ; 4 bytes @ 0x9
  4450                           
  4451                           
  4452                           ; 4 bytes @ 0x9
  4453  0029                     	ds	1
  4454  002A                     ?_ReadFlash_4Byte:	
  4455  002A                     ___flpack@sign:	
  4456                           ; 4 bytes @ 0xA
  4457                           
  4458  002A                     ReadFlash_4Byte@row:	
  4459                           ; 1 bytes @ 0xA
  4460                           
  4461  002A                     delayUS@i:	
  4462                           ; 2 bytes @ 0xA
  4463                           
  4464                           
  4465                           ; 4 bytes @ 0xA
  4466  002A                     	ds	1
  4467  002B                     ??___flpack:	
  4468  002B                     CheckSum_byte@Parity:	
  4469                           ; 0 bytes @ 0xB
  4470                           
  4471                           
  4472                           ; 1 bytes @ 0xB
  4473  002B                     	ds	1
  4474  002C                     CheckSum_byte@i:	
  4475  002C                     ReadFlash_4Byte@column:	
  4476                           ; 1 bytes @ 0xC
  4477                           
  4478                           
  4479                           ; 1 bytes @ 0xC
  4480  002C                     	ds	1
  4481  002D                     ?_UARTchar:	
  4482  002D                     ??___lmul:	
  4483                           ; 0 bytes @ 0xD
  4484                           
  4485  002D                     ??___flge:	
  4486                           ; 0 bytes @ 0xD
  4487                           
  4488  002D                     ??___lldiv:	
  4489                           ; 0 bytes @ 0xD
  4490                           
  4491  002D                     UARTchar@override:	
  4492                           ; 0 bytes @ 0xD
  4493                           
  4494  002D                     ___lmul@product:	
  4495                           ; 1 bytes @ 0xD
  4496                           
  4497                           
  4498                           ; 4 bytes @ 0xD
  4499  002D                     	ds	1
  4500  002E                     ??_ReadFlash_4Byte:	
  4501  002E                     delayUS@j:	
  4502                           ; 0 bytes @ 0xE
  4503                           
  4504  002E                     UARTchar@NinethBit_override_data:	
  4505                           ; 1 bytes @ 0xE
  4506                           
  4507  002E                     ___lldiv@quotient:	
  4508                           ; 1 bytes @ 0xE
  4509                           
  4510                           
  4511                           ; 4 bytes @ 0xE
  4512  002E                     	ds	1
  4513  002F                     ?_UART_send_break_timed:	
  4514  002F                     ??_UARTchar:	
  4515                           ; 0 bytes @ 0xF
  4516                           
  4517  002F                     ??_Send_PS2:	
  4518                           ; 0 bytes @ 0xF
  4519                           
  4520  002F                     ?_WriteFlash_Sequential:	
  4521                           ; 0 bytes @ 0xF
  4522                           
  4523  002F                     ?_InternalADC_Read:	
  4524                           ; 0 bytes @ 0xF
  4525                           
  4526  002F                     ?___lwtofl:	
  4527                           ; 2 bytes @ 0xF
  4528                           
  4529  002F                     UART_send_break_timed@US:	
  4530                           ; 4 bytes @ 0xF
  4531                           
  4532  002F                     WriteFlash_Sequential@row:	
  4533                           ; 2 bytes @ 0xF
  4534                           
  4535  002F                     ___lwtofl@c:	
  4536                           ; 2 bytes @ 0xF
  4537                           
  4538                           
  4539                           ; 2 bytes @ 0xF
  4540  002F                     	ds	2
  4541  0031                     ??_UART_send_break_timed:	
  4542  0031                     ??_InternalADC_Read:	
  4543                           ; 0 bytes @ 0x11
  4544                           
  4545  0031                     WriteFlash_Sequential@buffer:	
  4546                           ; 0 bytes @ 0x11
  4547                           
  4548                           
  4549                           ; 1 bytes @ 0x11
  4550  0031                     	ds	1
  4551  0032                     WriteFlash_Sequential@amount:	
  4552  0032                     ___lldiv@counter:	
  4553                           ; 1 bytes @ 0x12
  4554                           
  4555                           
  4556                           ; 1 bytes @ 0x12
  4557  0032                     	ds	1
  4558  0033                     ?_InitUART:	
  4559  0033                     ??_WriteFlash_Sequential:	
  4560                           ; 0 bytes @ 0x13
  4561                           
  4562  0033                     ??___lwtofl:	
  4563                           ; 0 bytes @ 0x13
  4564                           
  4565  0033                     ?___llmod:	
  4566                           ; 0 bytes @ 0x13
  4567                           
  4568  0033                     UARTchar@data:	
  4569                           ; 4 bytes @ 0x13
  4570                           
  4571  0033                     Send_PS2@oddparity:	
  4572                           ; 1 bytes @ 0x13
  4573                           
  4574  0033                     InternalADC_Read@channel:	
  4575                           ; 1 bytes @ 0x13
  4576                           
  4577  0033                     InitUART@Baud:	
  4578                           ; 1 bytes @ 0x13
  4579                           
  4580  0033                     ReadFlash_4Byte@temp:	
  4581                           ; 4 bytes @ 0x13
  4582                           
  4583  0033                     ___llmod@divisor:	
  4584                           ; 4 bytes @ 0x13
  4585                           
  4586                           
  4587                           ; 4 bytes @ 0x13
  4588  0033                     	ds	1
  4589  0034                     ?_UARTstringWAIT:	
  4590  0034                     ?___fldiv:	
  4591                           ; 0 bytes @ 0x14
  4592                           
  4593  0034                     Send_PS2@command:	
  4594                           ; 4 bytes @ 0x14
  4595                           
  4596  0034                     UARTstringWAIT@data:	
  4597                           ; 1 bytes @ 0x14
  4598                           
  4599  0034                     ___fldiv@f2:	
  4600                           ; 2 bytes @ 0x14
  4601                           
  4602                           
  4603                           ; 4 bytes @ 0x14
  4604  0034                     	ds	1
  4605  0035                     Send_PS2@i:	
  4606                           
  4607                           ; 1 bytes @ 0x15
  4608  0035                     	ds	1
  4609  0036                     ??_UARTstringWAIT:	
  4610  0036                     ?_WriteBaud:	
  4611                           ; 0 bytes @ 0x16
  4612                           
  4613  0036                     Send_PS2@timeout:	
  4614                           ; 0 bytes @ 0x16
  4615                           
  4616  0036                     WriteBaud@row:	
  4617                           ; 2 bytes @ 0x16
  4618                           
  4619                           
  4620                           ; 2 bytes @ 0x16
  4621  0036                     	ds	1
  4622  0037                     ?_ReadBaud:	
  4623  0037                     InitUART@parity:	
  4624                           ; 4 bytes @ 0x17
  4625                           
  4626  0037                     ReadBaud@row:	
  4627                           ; 1 bytes @ 0x17
  4628                           
  4629  0037                     ___llmod@dividend:	
  4630                           ; 2 bytes @ 0x17
  4631                           
  4632                           
  4633                           ; 4 bytes @ 0x17
  4634  0037                     	ds	1
  4635  0038                     ??_Init_PS_2_Send:	
  4636  0038                     ??_InitUART:	
  4637                           ; 0 bytes @ 0x18
  4638                           
  4639  0038                     WriteBaud@Baud:	
  4640                           ; 0 bytes @ 0x18
  4641                           
  4642  0038                     ___fldiv@f1:	
  4643                           ; 4 bytes @ 0x18
  4644                           
  4645                           
  4646                           ; 4 bytes @ 0x18
  4647  0038                     	ds	1
  4648  0039                     ReadBaud@column:	
  4649                           
  4650                           ; 1 bytes @ 0x19
  4651  0039                     	ds	2
  4652  003B                     ??_ReadBaud:	
  4653  003B                     ??___llmod:	
  4654                           ; 0 bytes @ 0x1B
  4655                           
  4656                           
  4657                           ; 0 bytes @ 0x1B
  4658  003B                     	ds	1
  4659  003C                     ??___fldiv:	
  4660  003C                     WriteBaud@Parity:	
  4661                           ; 0 bytes @ 0x1C
  4662                           
  4663  003C                     ___llmod@counter:	
  4664                           ; 1 bytes @ 0x1C
  4665                           
  4666                           
  4667                           ; 1 bytes @ 0x1C
  4668  003C                     	ds	1
  4669  003D                     ??_WriteBaud:	
  4670  003D                     ?_sprintf:	
  4671                           ; 0 bytes @ 0x1D
  4672                           
  4673  003D                     sprintf@sp:	
  4674                           ; 2 bytes @ 0x1D
  4675                           
  4676                           
  4677                           ; 2 bytes @ 0x1D
  4678  003D                     	ds	2
  4679  003F                     sprintf@f:	
  4680                           
  4681                           ; 2 bytes @ 0x1F
  4682  003F                     	ds	1
  4683  0040                     InitUART@spbrg:	
  4684                           
  4685                           ; 2 bytes @ 0x20
  4686  0040                     	ds	1
  4687  0041                     ___fldiv@f3:	
  4688                           
  4689                           ; 4 bytes @ 0x21
  4690  0041                     	ds	1
  4691  0042                     InitUART@baudconfig:	
  4692                           
  4693                           ; 1 bytes @ 0x22
  4694  0042                     	ds	1
  4695  0043                     InitUART@config:	
  4696  0043                     ReadBaud@temp:	
  4697                           ; 1 bytes @ 0x23
  4698                           
  4699                           
  4700                           ; 4 bytes @ 0x23
  4701  0043                     	ds	1
  4702  0044                     InitUART@temp:	
  4703                           
  4704                           ; 4 bytes @ 0x24
  4705  0044                     	ds	1
  4706  0045                     ??_sprintf:	
  4707  0045                     ___fldiv@cntr:	
  4708                           ; 0 bytes @ 0x25
  4709                           
  4710  0045                     WriteBaud@temp:	
  4711                           ; 1 bytes @ 0x25
  4712                           
  4713                           
  4714                           ; 4 bytes @ 0x25
  4715  0045                     	ds	1
  4716  0046                     ___fldiv@exp:	
  4717                           
  4718                           ; 1 bytes @ 0x26
  4719  0046                     	ds	1
  4720  0047                     ___fldiv@sign:	
  4721                           
  4722                           ; 1 bytes @ 0x27
  4723  0047                     	ds	1
  4724  0048                     ?___flmul:	
  4725  0048                     ___flmul@f1:	
  4726                           ; 4 bytes @ 0x28
  4727                           
  4728                           
  4729                           ; 4 bytes @ 0x28
  4730  0048                     	ds	3
  4731  004B                     sprintf@flag:	
  4732                           
  4733                           ; 1 bytes @ 0x2B
  4734  004B                     	ds	1
  4735  004C                     sprintf@prec:	
  4736  004C                     ___flmul@f2:	
  4737                           ; 2 bytes @ 0x2C
  4738                           
  4739                           
  4740                           ; 4 bytes @ 0x2C
  4741  004C                     	ds	2
  4742  004E                     sprintf@_val:	
  4743                           
  4744                           ; 4 bytes @ 0x2E
  4745  004E                     	ds	2
  4746  0050                     ??___flmul:	
  4747                           
  4748                           ; 0 bytes @ 0x30
  4749  0050                     	ds	2
  4750  0052                     sprintf@ap:	
  4751                           
  4752                           ; 1 bytes @ 0x32
  4753  0052                     	ds	1
  4754  0053                     sprintf@c:	
  4755                           
  4756                           ; 1 bytes @ 0x33
  4757  0053                     	ds	1
  4758  0054                     ??_Init_System:	
  4759  0054                     ?_SetBaud:	
  4760                           ; 0 bytes @ 0x34
  4761                           
  4762  0054                     SetBaud@Baud:	
  4763                           ; 0 bytes @ 0x34
  4764                           
  4765                           
  4766                           ; 4 bytes @ 0x34
  4767  0054                     	ds	1
  4768  0055                     ___flmul@exp:	
  4769                           
  4770                           ; 1 bytes @ 0x35
  4771  0055                     	ds	1
  4772  0056                     ___flmul@f3_as_product:	
  4773                           
  4774                           ; 4 bytes @ 0x36
  4775  0056                     	ds	2
  4776  0058                     SetBaud@Parity:	
  4777                           
  4778                           ; 1 bytes @ 0x38
  4779  0058                     	ds	1
  4780  0059                     ??_SetBaud:	
  4781                           
  4782                           ; 0 bytes @ 0x39
  4783  0059                     	ds	1
  4784  005A                     ___flmul@cntr:	
  4785                           
  4786                           ; 1 bytes @ 0x3A
  4787  005A                     	ds	1
  4788  005B                     ___flmul@sign:	
  4789                           
  4790                           ; 1 bytes @ 0x3B
  4791  005B                     	ds	1
  4792  005C                     ?_ReadVoltage:	
  4793                           
  4794                           ; 4 bytes @ 0x3C
  4795  005C                     	ds	4
  4796  0060                     ??_ReadVoltage:	
  4797                           
  4798                           ; 0 bytes @ 0x40
  4799  0060                     	ds	1
  4800  0061                     ??_Keyboard_Connected:	
  4801  0061                     Keyboard_Connected@i:	
  4802                           ; 0 bytes @ 0x41
  4803                           
  4804                           
  4805                           ; 4 bytes @ 0x41
  4806  0061                     	ds	4
  4807  0065                     ??_main:	
  4808                           
  4809                           ; 0 bytes @ 0x45
  4810  0065                     	ds	1
  4811                           
  4812                           	psect	maintext
  4813  0E08                     __pmaintext:	
  4814 ;;
  4815 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4816 ;;
  4817 ;; *************** function _main *****************
  4818 ;; Defined at:
  4819 ;;		line 106 in file "main.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  i               1   71[BANK1 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;		None               void
  4826 ;; Registers used:
  4827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 17F/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;Total ram usage:        2 bytes
  4838 ;; Hardware stack levels required when called:   10
  4839 ;; This function calls:
  4840 ;;		_ConfigureOscillator
  4841 ;;		_InitApp
  4842 ;;		_Init_PS_2_Send
  4843 ;;		_Init_System
  4844 ;;		_Keyboard_Connected
  4845 ;;		_PS_2_DISABLE_INTERRUPT
  4846 ;;		_PS_2_ENABLE_INTERRUPT
  4847 ;;		_PS_2_INIT
  4848 ;;		_PS_2_Update
  4849 ;;		_ReadVoltage
  4850 ;;		_UARTstringWAIT
  4851 ;;		___flge
  4852 ;;		_delayUS
  4853 ;; This function is called by:
  4854 ;;		Startup code after reset
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           
  4859                           ;psect for function _main
  4860  0E08                     _main:	
  4861                           
  4862                           ;main.c: 108: unsigned char i=0;
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4866  0E08  0021               	movlb	1	; select bank1
  4867  0E09  01E7               	clrf	main@i^(0+128)
  4868                           
  4869                           ;main.c: 110: ConfigureOscillator();
  4870  0E0A  3199  2159  318E   	fcall	_ConfigureOscillator
  4871                           
  4872                           ;main.c: 111: InitApp();
  4873  0E0D  3187  27DC  318E   	fcall	_InitApp
  4874                           
  4875                           ;main.c: 112: Init_System();
  4876  0E10  3195  2593  318E   	fcall	_Init_System
  4877                           
  4878                           ;main.c: 113: PS_2_INIT();
  4879  0E13  3199  2102  318E   	fcall	_PS_2_INIT
  4880                           
  4881                           ;main.c: 116: for(i =0;i<10;i++)
  4882  0E16  0021               	movlb	1	; select bank1
  4883  0E17  01E7               	clrf	main@i^(0+128)
  4884  0E18  300A               	movlw	10
  4885  0E19  0267               	subwf	main@i^(0+128),w
  4886  0E1A  1803               	btfsc	3,0
  4887  0E1B  2E46               	goto	l7337
  4888  0E1C                     l164:	
  4889                           
  4890                           ;main.c: 117: {
  4891                           ;main.c: 118: LATC |= 0b00010000;
  4892  0E1C  0022               	movlb	2	; select bank2
  4893  0E1D  160E               	bsf	14,4	;volatile
  4894                           
  4895                           ;main.c: 119: delayUS(10000);
  4896  0E1E  3000               	movlw	0
  4897  0E1F  0020               	movlb	0	; select bank0
  4898  0E20  00A8               	movwf	delayUS@US+3
  4899  0E21  3000               	movlw	0
  4900  0E22  00A7               	movwf	delayUS@US+2
  4901  0E23  3027               	movlw	39
  4902  0E24  00A6               	movwf	delayUS@US+1
  4903  0E25  3010               	movlw	16
  4904  0E26  00A5               	movwf	delayUS@US
  4905  0E27  3190  2002  318E   	fcall	_delayUS
  4906                           
  4907                           ;main.c: 120: LATC &= ~0b00010000;
  4908  0E2A  30EF               	movlw	239
  4909  0E2B  0020               	movlb	0	; select bank0
  4910  0E2C  00E5               	movwf	??_main
  4911  0E2D  0865               	movf	??_main,w
  4912  0E2E  0022               	movlb	2	; select bank2
  4913  0E2F  058E               	andwf	14,f	;volatile
  4914                           
  4915                           ;main.c: 121: delayUS(10000);
  4916  0E30  3000               	movlw	0
  4917  0E31  0020               	movlb	0	; select bank0
  4918  0E32  00A8               	movwf	delayUS@US+3
  4919  0E33  3000               	movlw	0
  4920  0E34  00A7               	movwf	delayUS@US+2
  4921  0E35  3027               	movlw	39
  4922  0E36  00A6               	movwf	delayUS@US+1
  4923  0E37  3010               	movlw	16
  4924  0E38  00A5               	movwf	delayUS@US
  4925  0E39  3190  2002  318E   	fcall	_delayUS
  4926  0E3C  3001               	movlw	1
  4927  0E3D  0020               	movlb	0	; select bank0
  4928  0E3E  00E5               	movwf	??_main
  4929  0E3F  0865               	movf	??_main,w
  4930  0E40  0021               	movlb	1	; select bank1
  4931  0E41  07E7               	addwf	main@i^(0+128),f
  4932  0E42  300A               	movlw	10
  4933  0E43  0267               	subwf	main@i^(0+128),w
  4934  0E44  1C03               	skipc
  4935  0E45  2E1C               	goto	l164
  4936  0E46                     l7337:	
  4937                           
  4938                           ;main.c: 122: }
  4939                           ;main.c: 124: PS_2_DISABLE_INTERRUPT(0b00100000);
  4940  0E46  3020               	movlw	32
  4941  0E47  3199  21DE  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  4942                           
  4943                           ;main.c: 126: UARTstringWAIT("\r\n");
  4944  0E4A  3056               	movlw	low ((STR_11+17)| (0+32768))
  4945  0E4B  0020               	movlb	0	; select bank0
  4946  0E4C  00B4               	movwf	UARTstringWAIT@data
  4947  0E4D  308B               	movlw	high ((STR_11+17)| (0+32768))
  4948  0E4E  00B5               	movwf	UARTstringWAIT@data+1
  4949  0E4F  319B  2370  318E   	fcall	_UARTstringWAIT
  4950                           
  4951                           ;main.c: 127: delayUS(10000);
  4952  0E52  3000               	movlw	0
  4953  0E53  0020               	movlb	0	; select bank0
  4954  0E54  00A8               	movwf	delayUS@US+3
  4955  0E55  3000               	movlw	0
  4956  0E56  00A7               	movwf	delayUS@US+2
  4957  0E57  3027               	movlw	39
  4958  0E58  00A6               	movwf	delayUS@US+1
  4959  0E59  3010               	movlw	16
  4960  0E5A  00A5               	movwf	delayUS@US
  4961  0E5B  3190  2002  318E   	fcall	_delayUS
  4962                           
  4963                           ;main.c: 128: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  4964  0E5E  308C               	movlw	low (STR_2| (0+32768))
  4965  0E5F  0020               	movlb	0	; select bank0
  4966  0E60  00B4               	movwf	UARTstringWAIT@data
  4967  0E61  308A               	movlw	high (STR_2| (0+32768))
  4968  0E62  00B5               	movwf	UARTstringWAIT@data+1
  4969  0E63  319B  2370  318E   	fcall	_UARTstringWAIT
  4970                           
  4971                           ;main.c: 129: delayUS(5000);
  4972  0E66  3000               	movlw	0
  4973  0E67  0020               	movlb	0	; select bank0
  4974  0E68  00A8               	movwf	delayUS@US+3
  4975  0E69  3000               	movlw	0
  4976  0E6A  00A7               	movwf	delayUS@US+2
  4977  0E6B  3013               	movlw	19
  4978  0E6C  00A6               	movwf	delayUS@US+1
  4979  0E6D  3088               	movlw	136
  4980  0E6E  00A5               	movwf	delayUS@US
  4981  0E6F  3190  2002  318E   	fcall	_delayUS
  4982                           
  4983                           ;main.c: 130: UARTstringWAIT("Firmware Version: ");
  4984  0E72  306C               	movlw	low (STR_3| (0+32768))
  4985  0E73  0020               	movlb	0	; select bank0
  4986  0E74  00B4               	movwf	UARTstringWAIT@data
  4987  0E75  308B               	movlw	high (STR_3| (0+32768))
  4988  0E76  00B5               	movwf	UARTstringWAIT@data+1
  4989  0E77  319B  2370  318E   	fcall	_UARTstringWAIT
  4990                           
  4991                           ;main.c: 131: UARTstringWAIT(Version);
  4992  0E7A  302A               	movlw	low _Version
  4993  0E7B  0020               	movlb	0	; select bank0
  4994  0E7C  00B4               	movwf	UARTstringWAIT@data
  4995  0E7D  3002               	movlw	high _Version
  4996  0E7E  00B5               	movwf	UARTstringWAIT@data+1
  4997  0E7F  319B  2370  318E   	fcall	_UARTstringWAIT
  4998                           
  4999                           ;main.c: 132: UARTstringWAIT("\r\n");
  5000  0E82  3056               	movlw	low ((STR_11+17)| (0+32768))
  5001  0E83  0020               	movlb	0	; select bank0
  5002  0E84  00B4               	movwf	UARTstringWAIT@data
  5003  0E85  308B               	movlw	high ((STR_11+17)| (0+32768))
  5004  0E86  00B5               	movwf	UARTstringWAIT@data+1
  5005  0E87  319B  2370  318E   	fcall	_UARTstringWAIT
  5006                           
  5007                           ;main.c: 133: delayUS(5000);
  5008  0E8A  3000               	movlw	0
  5009  0E8B  0020               	movlb	0	; select bank0
  5010  0E8C  00A8               	movwf	delayUS@US+3
  5011  0E8D  3000               	movlw	0
  5012  0E8E  00A7               	movwf	delayUS@US+2
  5013  0E8F  3013               	movlw	19
  5014  0E90  00A6               	movwf	delayUS@US+1
  5015  0E91  3088               	movlw	136
  5016  0E92  00A5               	movwf	delayUS@US
  5017  0E93  3190  2002  318E   	fcall	_delayUS
  5018                           
  5019                           ;main.c: 134: UARTstringWAIT("To Change BAUD hit \"CNT + ALT + DEL\"\r\n");
  5020  0E96  3027               	movlw	low (STR_5| (0+32768))
  5021  0E97  0020               	movlb	0	; select bank0
  5022  0E98  00B4               	movwf	UARTstringWAIT@data
  5023  0E99  308A               	movlw	high (STR_5| (0+32768))
  5024  0E9A  00B5               	movwf	UARTstringWAIT@data+1
  5025  0E9B  319B  2370  318E   	fcall	_UARTstringWAIT
  5026                           
  5027                           ;main.c: 135: delayUS(10000);
  5028  0E9E  3000               	movlw	0
  5029  0E9F  0020               	movlb	0	; select bank0
  5030  0EA0  00A8               	movwf	delayUS@US+3
  5031  0EA1  3000               	movlw	0
  5032  0EA2  00A7               	movwf	delayUS@US+2
  5033  0EA3  3027               	movlw	39
  5034  0EA4  00A6               	movwf	delayUS@US+1
  5035  0EA5  3010               	movlw	16
  5036  0EA6  00A5               	movwf	delayUS@US
  5037  0EA7  3190  2002  318E   	fcall	_delayUS
  5038                           
  5039                           ;main.c: 138: if(!Keyboard_Connected())
  5040  0EAA  319D  2562  318E   	fcall	_Keyboard_Connected
  5041  0EAD  3800               	iorlw	0
  5042  0EAE  1D03               	skipz
  5043  0EAF  2EBD               	goto	l7365
  5044                           
  5045                           ;main.c: 139: {
  5046                           ;main.c: 140: No_Keyboard =1;
  5047  0EB0  0021               	movlb	1	; select bank1
  5048  0EB1  01EB               	clrf	_No_Keyboard^(0+128)
  5049  0EB2  0AEB               	incf	_No_Keyboard^(0+128),f
  5050                           
  5051                           ;main.c: 141: if(!Keyboard_Connected())
  5052  0EB3  319D  2562  318E   	fcall	_Keyboard_Connected
  5053  0EB6  3800               	iorlw	0
  5054  0EB7  1D03               	skipz
  5055  0EB8  2EBD               	goto	l7365
  5056                           
  5057                           ;main.c: 142: {
  5058                           ;main.c: 143: No_Keyboard =1;
  5059  0EB9  0021               	movlb	1	; select bank1
  5060  0EBA  01EB               	clrf	_No_Keyboard^(0+128)
  5061  0EBB  0AEB               	incf	_No_Keyboard^(0+128),f
  5062                           
  5063                           ;main.c: 144: }
  5064  0EBC  2EBF               	goto	l7367
  5065  0EBD                     l7365:	
  5066                           ;main.c: 148: }
  5067                           ;main.c: 149: }
  5068                           
  5069                           ;main.c: 145: else
  5070                           ;main.c: 146: {
  5071                           ;main.c: 147: No_Keyboard = 0;
  5072                           
  5073                           
  5074                           ;main.c: 150: else
  5075                           ;main.c: 151: {
  5076                           ;main.c: 152: No_Keyboard =0;
  5077  0EBD  0021               	movlb	1	; select bank1
  5078  0EBE  01EB               	clrf	_No_Keyboard^(0+128)
  5079  0EBF                     l7367:	
  5080                           
  5081                           ;main.c: 153: }
  5082                           ;main.c: 155: if(No_Keyboard)
  5083  0EBF  086B               	movf	_No_Keyboard^(0+128),w
  5084  0EC0  1903               	btfsc	3,2
  5085  0EC1  2EC7               	goto	l7371
  5086                           
  5087                           ;main.c: 156: {
  5088                           ;main.c: 157: UARTstringWAIT("No Keyboard connected\r\n");
  5089  0EC2  30D6               	movlw	low (STR_6| (0+32768))
  5090  0EC3  0020               	movlb	0	; select bank0
  5091  0EC4  00B4               	movwf	UARTstringWAIT@data
  5092  0EC5  308A               	movlw	high (STR_6| (0+32768))
  5093  0EC6  2EEA               	goto	L2
  5094  0EC7                     l7371:	
  5095                           ;main.c: 158: }
  5096                           
  5097                           
  5098                           ;main.c: 159: else
  5099                           ;main.c: 160: {
  5100                           ;main.c: 161: UARTstringWAIT("Keyboard Connected\r\n");
  5101  0EC7  3030               	movlw	low (STR_7| (0+32768))
  5102  0EC8  0020               	movlb	0	; select bank0
  5103  0EC9  00B4               	movwf	UARTstringWAIT@data
  5104  0ECA  308B               	movlw	high (STR_7| (0+32768))
  5105  0ECB  00B5               	movwf	UARTstringWAIT@data+1
  5106  0ECC  319B  2370  318E   	fcall	_UARTstringWAIT
  5107                           
  5108                           ;main.c: 162: if(!Init_PS_2_Send())
  5109  0ECF  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5110  0ED2  3800               	iorlw	0
  5111  0ED3  1D03               	skipz
  5112  0ED4  2EE6               	goto	l7379
  5113                           
  5114                           ;main.c: 163: {
  5115                           ;main.c: 164: delayUS(10000);
  5116  0ED5  3000               	movlw	0
  5117  0ED6  0020               	movlb	0	; select bank0
  5118  0ED7  00A8               	movwf	delayUS@US+3
  5119  0ED8  3000               	movlw	0
  5120  0ED9  00A7               	movwf	delayUS@US+2
  5121  0EDA  3027               	movlw	39
  5122  0EDB  00A6               	movwf	delayUS@US+1
  5123  0EDC  3010               	movlw	16
  5124  0EDD  00A5               	movwf	delayUS@US
  5125  0EDE  3190  2002  318E   	fcall	_delayUS
  5126                           
  5127                           ;main.c: 165: UARTstringWAIT("Initialization Fail\r\n");
  5128  0EE1  3005               	movlw	low (STR_8| (0+32768))
  5129  0EE2  0020               	movlb	0	; select bank0
  5130  0EE3  00B4               	movwf	UARTstringWAIT@data
  5131  0EE4  308B               	movlw	high (STR_8| (0+32768))
  5132  0EE5  2EEA               	goto	L2
  5133  0EE6                     l7379:	
  5134                           ;main.c: 166: }
  5135                           
  5136                           
  5137                           ;main.c: 167: else
  5138                           ;main.c: 168: {
  5139                           ;main.c: 169: UARTstringWAIT("Keyboard Pass!\r\n");
  5140  0EE6  30B4               	movlw	low (STR_9| (0+32768))
  5141  0EE7  0020               	movlb	0	; select bank0
  5142  0EE8  00B4               	movwf	UARTstringWAIT@data
  5143  0EE9  308B               	movlw	high (STR_9| (0+32768))
  5144  0EEA                     L2:	
  5145  0EEA  00B5               	movwf	UARTstringWAIT@data+1
  5146  0EEB  319B  2370  318E   	fcall	_UARTstringWAIT
  5147                           
  5148                           ;main.c: 170: }
  5149                           ;main.c: 171: }
  5150                           ;main.c: 172: BatteryVoltage = ReadVoltage();
  5151  0EEE  318B  23DD  318E   	fcall	_ReadVoltage
  5152  0EF1  0020               	movlb	0	; select bank0
  5153  0EF2  085F               	movf	?_ReadVoltage+3,w
  5154  0EF3  0022               	movlb	2	; select bank2
  5155  0EF4  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5156  0EF5  0020               	movlb	0	; select bank0
  5157  0EF6  085E               	movf	?_ReadVoltage+2,w
  5158  0EF7  0022               	movlb	2	; select bank2
  5159  0EF8  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5160  0EF9  0020               	movlb	0	; select bank0
  5161  0EFA  085D               	movf	?_ReadVoltage+1,w
  5162  0EFB  0022               	movlb	2	; select bank2
  5163  0EFC  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5164  0EFD  0020               	movlb	0	; select bank0
  5165  0EFE  085C               	movf	?_ReadVoltage,w
  5166  0EFF  0022               	movlb	2	; select bank2
  5167  0F00  00DF               	movwf	_BatteryVoltage^(0+256)
  5168                           
  5169                           ;main.c: 173: if(BatteryVoltage < 5.85 )
  5170  0F01  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5171  0F02  0020               	movlb	0	; select bank0
  5172  0F03  00A8               	movwf	___flge@ff1+3
  5173  0F04  0022               	movlb	2	; select bank2
  5174  0F05  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5175  0F06  0020               	movlb	0	; select bank0
  5176  0F07  00A7               	movwf	___flge@ff1+2
  5177  0F08  0022               	movlb	2	; select bank2
  5178  0F09  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5179  0F0A  0020               	movlb	0	; select bank0
  5180  0F0B  00A6               	movwf	___flge@ff1+1
  5181  0F0C  0022               	movlb	2	; select bank2
  5182  0F0D  085F               	movf	_BatteryVoltage^(0+256),w
  5183  0F0E  0020               	movlb	0	; select bank0
  5184  0F0F  00A5               	movwf	___flge@ff1
  5185  0F10  3040               	movlw	64
  5186  0F11  00AC               	movwf	___flge@ff2+3
  5187  0F12  30BB               	movlw	187
  5188  0F13  00AB               	movwf	___flge@ff2+2
  5189  0F14  3033               	movlw	51
  5190  0F15  00AA               	movwf	___flge@ff2+1
  5191  0F16  3033               	movlw	51
  5192  0F17  00A9               	movwf	___flge@ff2
  5193  0F18  319F  272F  318E   	fcall	___flge
  5194  0F1B  1803               	btfsc	3,0
  5195  0F1C  2F22               	goto	l7387
  5196                           
  5197                           ;main.c: 174: {
  5198                           ;main.c: 175: UARTstringWAIT("Voltage too Low!\r\n");
  5199  0F1D  3059               	movlw	low (STR_10| (0+32768))
  5200  0F1E  0020               	movlb	0	; select bank0
  5201  0F1F  00B4               	movwf	UARTstringWAIT@data
  5202  0F20  308B               	movlw	high (STR_10| (0+32768))
  5203  0F21  2F44               	goto	L3
  5204  0F22                     l7387:	
  5205                           ;main.c: 176: }
  5206                           
  5207                           
  5208                           ;main.c: 177: else if (BatteryVoltage > 20.0)
  5209  0F22  3041               	movlw	65
  5210  0F23  0020               	movlb	0	; select bank0
  5211  0F24  00A8               	movwf	___flge@ff1+3
  5212  0F25  30A0               	movlw	160
  5213  0F26  00A7               	movwf	___flge@ff1+2
  5214  0F27  3000               	movlw	0
  5215  0F28  00A6               	movwf	___flge@ff1+1
  5216  0F29  3000               	movlw	0
  5217  0F2A  00A5               	movwf	___flge@ff1
  5218  0F2B  0022               	movlb	2	; select bank2
  5219  0F2C  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5220  0F2D  0020               	movlb	0	; select bank0
  5221  0F2E  00AC               	movwf	___flge@ff2+3
  5222  0F2F  0022               	movlb	2	; select bank2
  5223  0F30  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5224  0F31  0020               	movlb	0	; select bank0
  5225  0F32  00AB               	movwf	___flge@ff2+2
  5226  0F33  0022               	movlb	2	; select bank2
  5227  0F34  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5228  0F35  0020               	movlb	0	; select bank0
  5229  0F36  00AA               	movwf	___flge@ff2+1
  5230  0F37  0022               	movlb	2	; select bank2
  5231  0F38  085F               	movf	_BatteryVoltage^(0+256),w
  5232  0F39  0020               	movlb	0	; select bank0
  5233  0F3A  00A9               	movwf	___flge@ff2
  5234  0F3B  319F  272F  318E   	fcall	___flge
  5235  0F3E  1803               	btfsc	3,0
  5236  0F3F  2F48               	goto	l7391
  5237                           
  5238                           ;main.c: 178: {
  5239                           ;main.c: 179: UARTstringWAIT("Voltage too High!\r\n");
  5240  0F40  3045               	movlw	low (STR_11| (0+32768))
  5241  0F41  0020               	movlb	0	; select bank0
  5242  0F42  00B4               	movwf	UARTstringWAIT@data
  5243  0F43  308B               	movlw	high (STR_11| (0+32768))
  5244  0F44                     L3:	
  5245  0F44  00B5               	movwf	UARTstringWAIT@data+1
  5246  0F45  319B  2370  318E   	fcall	_UARTstringWAIT
  5247  0F48                     l7391:	
  5248                           
  5249                           ;main.c: 180: }
  5250                           ;main.c: 181: PS_2_ENABLE_INTERRUPT(0b00100000);
  5251  0F48  3020               	movlw	32
  5252  0F49  3199  21C9  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5253  0F4C                     L1:	
  5254                           
  5255                           ;main.c: 182: No_Keyboard_old = No_Keyboard;
  5256  0F4C  0021               	movlb	1	; select bank1
  5257  0F4D  086B               	movf	_No_Keyboard^(0+128),w
  5258  0F4E  0020               	movlb	0	; select bank0
  5259  0F4F  00E5               	movwf	??_main
  5260  0F50  0865               	movf	??_main,w
  5261  0F51  0022               	movlb	2	; select bank2
  5262  0F52  00EE               	movwf	_No_Keyboard_old^(0+256)
  5263                           
  5264                           ;main.c: 185: {
  5265                           ;main.c: 186: PS_2_Update();
  5266                           
  5267                           ;main.c: 184: while(1)
  5268  0F53  3181  211C  318E   	fcall	_PS_2_Update
  5269                           
  5270                           ;main.c: 187: if(No_Keyboard == 0 && No_Keyboard_old == 1)
  5271  0F56  0021               	movlb	1	; select bank1
  5272  0F57  08EB               	movf	_No_Keyboard^(0+128),f
  5273  0F58  1D03               	skipz
  5274  0F59  2F86               	goto	l7411
  5275  0F5A  0022               	movlb	2	; select bank2
  5276  0F5B  086E               	movf	_No_Keyboard_old^(0+256),w
  5277  0F5C  3A01               	xorlw	1
  5278  0F5D  1D03               	skipz
  5279  0F5E  2F86               	goto	l7411
  5280                           
  5281                           ;main.c: 188: {
  5282                           ;main.c: 189: UARTstringWAIT("Keyboard Connected\r\n");
  5283  0F5F  3030               	movlw	low (STR_7| (0+32768))
  5284  0F60  0020               	movlb	0	; select bank0
  5285  0F61  00B4               	movwf	UARTstringWAIT@data
  5286  0F62  308B               	movlw	high (STR_7| (0+32768))
  5287  0F63  00B5               	movwf	UARTstringWAIT@data+1
  5288  0F64  319B  2370  318E   	fcall	_UARTstringWAIT
  5289                           
  5290                           ;main.c: 190: if(!Init_PS_2_Send())
  5291  0F67  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5292  0F6A  3800               	iorlw	0
  5293  0F6B  1D03               	skipz
  5294  0F6C  2F7E               	goto	l7409
  5295                           
  5296                           ;main.c: 191: {
  5297                           ;main.c: 192: delayUS(10000);
  5298  0F6D  3000               	movlw	0
  5299  0F6E  0020               	movlb	0	; select bank0
  5300  0F6F  00A8               	movwf	delayUS@US+3
  5301  0F70  3000               	movlw	0
  5302  0F71  00A7               	movwf	delayUS@US+2
  5303  0F72  3027               	movlw	39
  5304  0F73  00A6               	movwf	delayUS@US+1
  5305  0F74  3010               	movlw	16
  5306  0F75  00A5               	movwf	delayUS@US
  5307  0F76  3190  2002  318E   	fcall	_delayUS
  5308                           
  5309                           ;main.c: 193: UARTstringWAIT("Initialization Fail\r\n");
  5310  0F79  3005               	movlw	low (STR_8| (0+32768))
  5311  0F7A  0020               	movlb	0	; select bank0
  5312  0F7B  00B4               	movwf	UARTstringWAIT@data
  5313  0F7C  308B               	movlw	high (STR_8| (0+32768))
  5314  0F7D  2F82               	goto	L4
  5315  0F7E                     l7409:	
  5316                           ;main.c: 194: }
  5317                           
  5318                           
  5319                           ;main.c: 195: else
  5320                           ;main.c: 196: {
  5321                           ;main.c: 197: UARTstringWAIT("Keyboard Pass!\r\n");
  5322  0F7E  30B4               	movlw	low (STR_9| (0+32768))
  5323  0F7F  0020               	movlb	0	; select bank0
  5324  0F80  00B4               	movwf	UARTstringWAIT@data
  5325  0F81  308B               	movlw	high (STR_9| (0+32768))
  5326  0F82                     L4:	
  5327  0F82  00B5               	movwf	UARTstringWAIT@data+1
  5328  0F83  319B  2370  318E   	fcall	_UARTstringWAIT
  5329  0F86                     l7411:	
  5330                           
  5331                           ;main.c: 198: }
  5332                           ;main.c: 199: }
  5333                           ;main.c: 200: BatteryVoltage = ReadVoltage();
  5334  0F86  318B  23DD  318E   	fcall	_ReadVoltage
  5335  0F89  0020               	movlb	0	; select bank0
  5336  0F8A  085F               	movf	?_ReadVoltage+3,w
  5337  0F8B  0022               	movlb	2	; select bank2
  5338  0F8C  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5339  0F8D  0020               	movlb	0	; select bank0
  5340  0F8E  085E               	movf	?_ReadVoltage+2,w
  5341  0F8F  0022               	movlb	2	; select bank2
  5342  0F90  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5343  0F91  0020               	movlb	0	; select bank0
  5344  0F92  085D               	movf	?_ReadVoltage+1,w
  5345  0F93  0022               	movlb	2	; select bank2
  5346  0F94  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5347  0F95  0020               	movlb	0	; select bank0
  5348  0F96  085C               	movf	?_ReadVoltage,w
  5349  0F97  0022               	movlb	2	; select bank2
  5350  0F98  00DF               	movwf	_BatteryVoltage^(0+256)
  5351                           
  5352                           ;main.c: 201: if(BatteryVoltage < 5.85 || BatteryVoltage > 20.0)
  5353  0F99  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5354  0F9A  0020               	movlb	0	; select bank0
  5355  0F9B  00A8               	movwf	___flge@ff1+3
  5356  0F9C  0022               	movlb	2	; select bank2
  5357  0F9D  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5358  0F9E  0020               	movlb	0	; select bank0
  5359  0F9F  00A7               	movwf	___flge@ff1+2
  5360  0FA0  0022               	movlb	2	; select bank2
  5361  0FA1  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5362  0FA2  0020               	movlb	0	; select bank0
  5363  0FA3  00A6               	movwf	___flge@ff1+1
  5364  0FA4  0022               	movlb	2	; select bank2
  5365  0FA5  085F               	movf	_BatteryVoltage^(0+256),w
  5366  0FA6  0020               	movlb	0	; select bank0
  5367  0FA7  00A5               	movwf	___flge@ff1
  5368  0FA8  3040               	movlw	64
  5369  0FA9  00AC               	movwf	___flge@ff2+3
  5370  0FAA  30BB               	movlw	187
  5371  0FAB  00AB               	movwf	___flge@ff2+2
  5372  0FAC  3033               	movlw	51
  5373  0FAD  00AA               	movwf	___flge@ff2+1
  5374  0FAE  3033               	movlw	51
  5375  0FAF  00A9               	movwf	___flge@ff2
  5376  0FB0  319F  272F  318E   	fcall	___flge
  5377  0FB3  1C03               	btfss	3,0
  5378  0FB4  2FD3               	goto	l7417
  5379  0FB5  3041               	movlw	65
  5380  0FB6  0020               	movlb	0	; select bank0
  5381  0FB7  00A8               	movwf	___flge@ff1+3
  5382  0FB8  30A0               	movlw	160
  5383  0FB9  00A7               	movwf	___flge@ff1+2
  5384  0FBA  3000               	movlw	0
  5385  0FBB  00A6               	movwf	___flge@ff1+1
  5386  0FBC  3000               	movlw	0
  5387  0FBD  00A5               	movwf	___flge@ff1
  5388  0FBE  0022               	movlb	2	; select bank2
  5389  0FBF  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5390  0FC0  0020               	movlb	0	; select bank0
  5391  0FC1  00AC               	movwf	___flge@ff2+3
  5392  0FC2  0022               	movlb	2	; select bank2
  5393  0FC3  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5394  0FC4  0020               	movlb	0	; select bank0
  5395  0FC5  00AB               	movwf	___flge@ff2+2
  5396  0FC6  0022               	movlb	2	; select bank2
  5397  0FC7  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5398  0FC8  0020               	movlb	0	; select bank0
  5399  0FC9  00AA               	movwf	___flge@ff2+1
  5400  0FCA  0022               	movlb	2	; select bank2
  5401  0FCB  085F               	movf	_BatteryVoltage^(0+256),w
  5402  0FCC  0020               	movlb	0	; select bank0
  5403  0FCD  00A9               	movwf	___flge@ff2
  5404  0FCE  319F  272F  318E   	fcall	___flge
  5405  0FD1  1803               	btfsc	3,0
  5406  0FD2  2FE9               	goto	l181
  5407  0FD3                     l7417:	
  5408                           
  5409                           ;main.c: 202: {
  5410                           ;main.c: 203: pwrLEDtoggle++;
  5411  0FD3  3001               	movlw	1
  5412  0FD4  0024               	movlb	4	; select bank4
  5413  0FD5  07B8               	addwf	_pwrLEDtoggle^(0+512),f
  5414  0FD6  3000               	movlw	0
  5415  0FD7  3DB9               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5416                           
  5417                           ;main.c: 204: if(pwrLEDtoggle > 1000)
  5418  0FD8  3003               	movlw	3
  5419  0FD9  0239               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5420  0FDA  30E9               	movlw	233
  5421  0FDB  1903               	skipnz
  5422  0FDC  0238               	subwf	_pwrLEDtoggle^(0+512),w
  5423  0FDD  1C03               	skipc
  5424  0FDE  2FEB               	goto	l7423
  5425                           
  5426                           ;main.c: 205: {
  5427                           ;main.c: 206: LATC ^= 0b00000010;
  5428  0FDF  3002               	movlw	2
  5429  0FE0  0020               	movlb	0	; select bank0
  5430  0FE1  00E5               	movwf	??_main
  5431  0FE2  0865               	movf	??_main,w
  5432  0FE3  0022               	movlb	2	; select bank2
  5433  0FE4  068E               	xorwf	14,f	;volatile
  5434                           
  5435                           ;main.c: 207: pwrLEDtoggle = 0;
  5436  0FE5  0024               	movlb	4	; select bank4
  5437  0FE6  01B8               	clrf	_pwrLEDtoggle^(0+512)
  5438  0FE7  01B9               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5439                           
  5440                           ;main.c: 208: }
  5441                           ;main.c: 209: }
  5442  0FE8  2FEB               	goto	l7423
  5443  0FE9                     l181:	
  5444                           
  5445                           ;main.c: 210: else
  5446                           ;main.c: 211: {
  5447                           ;main.c: 212: LATC |= 0b00000010;
  5448  0FE9  0022               	movlb	2	; select bank2
  5449  0FEA  148E               	bsf	14,1	;volatile
  5450  0FEB                     l7423:	
  5451                           
  5452                           ;main.c: 213: }
  5453                           ;main.c: 214: if(SinLEDtimer >= 100)
  5454  0FEB  3000               	movlw	0
  5455  0FEC  0024               	movlb	4	; select bank4
  5456  0FED  0237               	subwf	(_SinLEDtimer+1)^(0+512),w
  5457  0FEE  3064               	movlw	100
  5458  0FEF  1903               	skipnz
  5459  0FF0  0236               	subwf	_SinLEDtimer^(0+512),w
  5460  0FF1  1C03               	skipc
  5461  0FF2  2FFA               	goto	l7427
  5462                           
  5463                           ;main.c: 215: {
  5464                           ;main.c: 216: LATC &= ~0b00001000;
  5465  0FF3  30F7               	movlw	247
  5466  0FF4  0020               	movlb	0	; select bank0
  5467  0FF5  00E5               	movwf	??_main
  5468  0FF6  0865               	movf	??_main,w
  5469  0FF7  0022               	movlb	2	; select bank2
  5470  0FF8  058E               	andwf	14,f	;volatile
  5471                           
  5472                           ;main.c: 217: }
  5473  0FF9  2F4C               	goto	L1
  5474  0FFA                     l7427:	
  5475                           
  5476                           ;main.c: 218: else
  5477                           ;main.c: 219: {
  5478                           ;main.c: 220: SinLEDtimer++;
  5479  0FFA  3001               	movlw	1
  5480  0FFB  0024               	movlb	4	; select bank4
  5481  0FFC  07B6               	addwf	_SinLEDtimer^(0+512),f
  5482  0FFD  3000               	movlw	0
  5483  0FFE  3DB7               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5484  0FFF  2F4C               	goto	L1
  5485  1000                     __end_of_main:	
  5486                           ;main.c: 221: }
  5487                           ;main.c: 222: No_Keyboard_old = No_Keyboard;
  5488                           
  5489                           
  5490                           	psect	text1
  5491  1F2F                     __ptext1:	
  5492 ;; *************** function ___flge *****************
  5493 ;; Defined at:
  5494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  ff1             4    5[BANK0 ] unsigned char 
  5497 ;;  ff2             4    9[BANK0 ] unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5509 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;Total ram usage:       16 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    3
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_main
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function ___flge
  5525  1F2F                     ___flge:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5529  1F2F  0020               	movlb	0	; select bank0
  5530  1F30  1FA8               	btfss	___flge@ff1+3,7
  5531  1F31  2F59               	goto	l5319
  5532  1F32  3000               	movlw	0
  5533  1F33  00AD               	movwf	??___flge
  5534  1F34  3000               	movlw	0
  5535  1F35  00AE               	movwf	??___flge+1
  5536  1F36  3000               	movlw	0
  5537  1F37  00AF               	movwf	??___flge+2
  5538  1F38  3080               	movlw	128
  5539  1F39  00B0               	movwf	??___flge+3
  5540  1F3A  0925               	comf	___flge@ff1,w
  5541  1F3B  00B1               	movwf	??___flge+4
  5542  1F3C  0926               	comf	___flge@ff1+1,w
  5543  1F3D  00B2               	movwf	??___flge+5
  5544  1F3E  0927               	comf	___flge@ff1+2,w
  5545  1F3F  00B3               	movwf	??___flge+6
  5546  1F40  0928               	comf	___flge@ff1+3,w
  5547  1F41  00B4               	movwf	??___flge+7
  5548  1F42  0AB1               	incf	??___flge+4,f
  5549  1F43  1903               	skipnz
  5550  1F44  0AB2               	incf	??___flge+5,f
  5551  1F45  1903               	skipnz
  5552  1F46  0AB3               	incf	??___flge+6,f
  5553  1F47  1903               	skipnz
  5554  1F48  0AB4               	incf	??___flge+7,f
  5555  1F49  0831               	movf	??___flge+4,w
  5556  1F4A  07AD               	addwf	??___flge,f
  5557  1F4B  0832               	movf	??___flge+5,w
  5558  1F4C  3DAE               	addwfc	??___flge+1,f
  5559  1F4D  0833               	movf	??___flge+6,w
  5560  1F4E  3DAF               	addwfc	??___flge+2,f
  5561  1F4F  0834               	movf	??___flge+7,w
  5562  1F50  3DB0               	addwfc	??___flge+3,f
  5563  1F51  0830               	movf	??___flge+3,w
  5564  1F52  00A8               	movwf	___flge@ff1+3
  5565  1F53  082F               	movf	??___flge+2,w
  5566  1F54  00A7               	movwf	___flge@ff1+2
  5567  1F55  082E               	movf	??___flge+1,w
  5568  1F56  00A6               	movwf	___flge@ff1+1
  5569  1F57  082D               	movf	??___flge,w
  5570  1F58  00A5               	movwf	___flge@ff1
  5571  1F59                     l5319:	
  5572  1F59  1FAC               	btfss	___flge@ff2+3,7
  5573  1F5A  2F82               	goto	l5323
  5574  1F5B  3000               	movlw	0
  5575  1F5C  00AD               	movwf	??___flge
  5576  1F5D  3000               	movlw	0
  5577  1F5E  00AE               	movwf	??___flge+1
  5578  1F5F  3000               	movlw	0
  5579  1F60  00AF               	movwf	??___flge+2
  5580  1F61  3080               	movlw	128
  5581  1F62  00B0               	movwf	??___flge+3
  5582  1F63  0929               	comf	___flge@ff2,w
  5583  1F64  00B1               	movwf	??___flge+4
  5584  1F65  092A               	comf	___flge@ff2+1,w
  5585  1F66  00B2               	movwf	??___flge+5
  5586  1F67  092B               	comf	___flge@ff2+2,w
  5587  1F68  00B3               	movwf	??___flge+6
  5588  1F69  092C               	comf	___flge@ff2+3,w
  5589  1F6A  00B4               	movwf	??___flge+7
  5590  1F6B  0AB1               	incf	??___flge+4,f
  5591  1F6C  1903               	skipnz
  5592  1F6D  0AB2               	incf	??___flge+5,f
  5593  1F6E  1903               	skipnz
  5594  1F6F  0AB3               	incf	??___flge+6,f
  5595  1F70  1903               	skipnz
  5596  1F71  0AB4               	incf	??___flge+7,f
  5597  1F72  0831               	movf	??___flge+4,w
  5598  1F73  07AD               	addwf	??___flge,f
  5599  1F74  0832               	movf	??___flge+5,w
  5600  1F75  3DAE               	addwfc	??___flge+1,f
  5601  1F76  0833               	movf	??___flge+6,w
  5602  1F77  3DAF               	addwfc	??___flge+2,f
  5603  1F78  0834               	movf	??___flge+7,w
  5604  1F79  3DB0               	addwfc	??___flge+3,f
  5605  1F7A  0830               	movf	??___flge+3,w
  5606  1F7B  00AC               	movwf	___flge@ff2+3
  5607  1F7C  082F               	movf	??___flge+2,w
  5608  1F7D  00AB               	movwf	___flge@ff2+2
  5609  1F7E  082E               	movf	??___flge+1,w
  5610  1F7F  00AA               	movwf	___flge@ff2+1
  5611  1F80  082D               	movf	??___flge,w
  5612  1F81  00A9               	movwf	___flge@ff2
  5613  1F82                     l5323:	
  5614  1F82  3080               	movlw	128
  5615  1F83  06A8               	xorwf	___flge@ff1+3,f
  5616  1F84  3080               	movlw	128
  5617  1F85  06AC               	xorwf	___flge@ff2+3,f
  5618  1F86  082C               	movf	___flge@ff2+3,w
  5619  1F87  0228               	subwf	___flge@ff1+3,w
  5620  1F88  1D03               	skipz
  5621  1F89  0008               	return
  5622  1F8A  082B               	movf	___flge@ff2+2,w
  5623  1F8B  0227               	subwf	___flge@ff1+2,w
  5624  1F8C  1D03               	skipz
  5625  1F8D  0008               	return
  5626  1F8E  082A               	movf	___flge@ff2+1,w
  5627  1F8F  0226               	subwf	___flge@ff1+1,w
  5628  1F90  1D03               	skipz
  5629  1F91  0008               	return
  5630  1F92  0829               	movf	___flge@ff2,w
  5631  1F93  0225               	subwf	___flge@ff1,w
  5632  1F94  0008               	return
  5633  1F95                     __end_of___flge:	
  5634                           
  5635                           	psect	text2
  5636  0BDD                     __ptext2:	
  5637 ;; *************** function _ReadVoltage *****************
  5638 ;; Defined at:
  5639 ;;		line 64 in file "ADC.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;		None
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  voltage         4    0[BANK1 ] unsigned char 
  5644 ;;  temp            2    4[BANK1 ] unsigned int 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  4   60[BANK0 ] unsigned int 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5654 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;Total ram usage:       11 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    5
  5661 ;; This function calls:
  5662 ;;		_DisableInternalADC
  5663 ;;		_InternalADC_Read
  5664 ;;		___fldiv
  5665 ;;		___flmul
  5666 ;;		___lwtofl
  5667 ;; This function is called by:
  5668 ;;		_main
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _ReadVoltage
  5674  0BDD                     _ReadVoltage:	
  5675                           
  5676                           ;ADC.c: 66: unsigned int temp;
  5677                           ;ADC.c: 67: double voltage;
  5678                           ;ADC.c: 68: LATC &= ~0b00000001;
  5679                           
  5680                           ;incstack = 0
  5681                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5682  0BDD  30FE               	movlw	254
  5683  0BDE  0020               	movlb	0	; select bank0
  5684  0BDF  00E0               	movwf	??_ReadVoltage
  5685  0BE0  0860               	movf	??_ReadVoltage,w
  5686  0BE1  0022               	movlb	2	; select bank2
  5687  0BE2  058E               	andwf	14,f	;volatile
  5688                           
  5689                           ;ADC.c: 69: temp = InternalADC_Read(2);
  5690  0BE3  3002               	movlw	2
  5691  0BE4  319C  2425  318B   	fcall	_InternalADC_Read
  5692  0BE7  0020               	movlb	0	; select bank0
  5693  0BE8  0830               	movf	?_InternalADC_Read+1,w
  5694  0BE9  0021               	movlb	1	; select bank1
  5695  0BEA  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5696  0BEB  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5697  0BEC  0020               	movlb	0	; select bank0
  5698  0BED  082F               	movf	?_InternalADC_Read,w
  5699  0BEE  0021               	movlb	1	; select bank1
  5700  0BEF  01A4               	clrf	ReadVoltage@temp^(0+128)
  5701  0BF0  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5702                           
  5703                           ;ADC.c: 70: DisableInternalADC();
  5704  0BF1  3198  20BE  318B   	fcall	_DisableInternalADC
  5705                           
  5706                           ;ADC.c: 71: LATC |= 0b00000001;
  5707  0BF4  0022               	movlb	2	; select bank2
  5708  0BF5  140E               	bsf	14,0	;volatile
  5709                           
  5710                           ;ADC.c: 75: if((FVRCON & 0x03) == 0x03)
  5711  0BF6  3003               	movlw	3
  5712  0BF7  0517               	andwf	23,w	;volatile
  5713  0BF8  0020               	movlb	0	; select bank0
  5714  0BF9  00E0               	movwf	??_ReadVoltage
  5715  0BFA  0860               	movf	??_ReadVoltage,w
  5716  0BFB  3A03               	xorlw	3
  5717  0BFC  1D03               	skipz
  5718  0BFD  2C05               	goto	l7303
  5719                           
  5720                           ;ADC.c: 76: {
  5721                           ;ADC.c: 78: temp <<= 2;
  5722  0BFE  3002               	movlw	2
  5723  0BFF  0021               	movlb	1	; select bank1
  5724  0C00                     u10165:	
  5725  0C00  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5726  0C01  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5727  0C02  0B89               	decfsz	9,f
  5728  0C03  2C00               	goto	u10165
  5729                           
  5730                           ;ADC.c: 79: }
  5731  0C04  2C14               	goto	l7307
  5732  0C05                     l7303:	
  5733                           
  5734                           ;ADC.c: 80: else if((FVRCON & 0x03) == 0x02)
  5735  0C05  3003               	movlw	3
  5736  0C06  0022               	movlb	2	; select bank2
  5737  0C07  0517               	andwf	23,w	;volatile
  5738  0C08  0020               	movlb	0	; select bank0
  5739  0C09  00E0               	movwf	??_ReadVoltage
  5740  0C0A  0860               	movf	??_ReadVoltage,w
  5741  0C0B  3A02               	xorlw	2
  5742  0C0C  1D03               	skipz
  5743  0C0D  2C14               	goto	l7307
  5744                           
  5745                           ;ADC.c: 81: {
  5746                           ;ADC.c: 83: temp <<= 1;
  5747  0C0E  3001               	movlw	1
  5748  0C0F  0021               	movlb	1	; select bank1
  5749  0C10                     u10185:	
  5750  0C10  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5751  0C11  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5752  0C12  0B89               	decfsz	9,f
  5753  0C13  2C10               	goto	u10185
  5754  0C14                     l7307:	
  5755                           
  5756                           ;ADC.c: 84: }
  5757                           ;ADC.c: 85: voltage = ((double)temp / 1000) * 5.7;
  5758  0C14  3040               	movlw	64
  5759  0C15  0020               	movlb	0	; select bank0
  5760  0C16  00CB               	movwf	___flmul@f1+3
  5761  0C17  30B6               	movlw	182
  5762  0C18  00CA               	movwf	___flmul@f1+2
  5763  0C19  3066               	movlw	102
  5764  0C1A  00C9               	movwf	___flmul@f1+1
  5765  0C1B  3066               	movlw	102
  5766  0C1C  00C8               	movwf	___flmul@f1
  5767  0C1D  3044               	movlw	68
  5768  0C1E  00B7               	movwf	___fldiv@f2+3
  5769  0C1F  307A               	movlw	122
  5770  0C20  00B6               	movwf	___fldiv@f2+2
  5771  0C21  3000               	movlw	0
  5772  0C22  00B5               	movwf	___fldiv@f2+1
  5773  0C23  3000               	movlw	0
  5774  0C24  00B4               	movwf	___fldiv@f2
  5775  0C25  0021               	movlb	1	; select bank1
  5776  0C26  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5777  0C27  0020               	movlb	0	; select bank0
  5778  0C28  01B0               	clrf	___lwtofl@c+1
  5779  0C29  07B0               	addwf	___lwtofl@c+1,f
  5780  0C2A  0021               	movlb	1	; select bank1
  5781  0C2B  0824               	movf	ReadVoltage@temp^(0+128),w
  5782  0C2C  0020               	movlb	0	; select bank0
  5783  0C2D  01AF               	clrf	___lwtofl@c
  5784  0C2E  07AF               	addwf	___lwtofl@c,f
  5785  0C2F  318B  23C5  318B   	fcall	___lwtofl
  5786  0C32  0020               	movlb	0	; select bank0
  5787  0C33  0832               	movf	?___lwtofl+3,w
  5788  0C34  00BB               	movwf	___fldiv@f1+3
  5789  0C35  0831               	movf	?___lwtofl+2,w
  5790  0C36  00BA               	movwf	___fldiv@f1+2
  5791  0C37  0830               	movf	?___lwtofl+1,w
  5792  0C38  00B9               	movwf	___fldiv@f1+1
  5793  0C39  082F               	movf	?___lwtofl,w
  5794  0C3A  00B8               	movwf	___fldiv@f1
  5795  0C3B  3190  2037  318B   	fcall	___fldiv
  5796  0C3E  0020               	movlb	0	; select bank0
  5797  0C3F  0837               	movf	?___fldiv+3,w
  5798  0C40  00CF               	movwf	___flmul@f2+3
  5799  0C41  0836               	movf	?___fldiv+2,w
  5800  0C42  00CE               	movwf	___flmul@f2+2
  5801  0C43  0835               	movf	?___fldiv+1,w
  5802  0C44  00CD               	movwf	___flmul@f2+1
  5803  0C45  0834               	movf	?___fldiv,w
  5804  0C46  00CC               	movwf	___flmul@f2
  5805  0C47  3190  20F8         	fcall	___flmul
  5806  0C49  0020               	movlb	0	; select bank0
  5807  0C4A  084B               	movf	?___flmul+3,w
  5808  0C4B  0021               	movlb	1	; select bank1
  5809  0C4C  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5810  0C4D  0020               	movlb	0	; select bank0
  5811  0C4E  084A               	movf	?___flmul+2,w
  5812  0C4F  0021               	movlb	1	; select bank1
  5813  0C50  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5814  0C51  0020               	movlb	0	; select bank0
  5815  0C52  0849               	movf	?___flmul+1,w
  5816  0C53  0021               	movlb	1	; select bank1
  5817  0C54  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5818  0C55  0020               	movlb	0	; select bank0
  5819  0C56  0848               	movf	?___flmul,w
  5820  0C57  0021               	movlb	1	; select bank1
  5821  0C58  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5822                           
  5823                           ;ADC.c: 86: return voltage;
  5824  0C59  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5825  0C5A  0020               	movlb	0	; select bank0
  5826  0C5B  00DF               	movwf	?_ReadVoltage+3
  5827  0C5C  0021               	movlb	1	; select bank1
  5828  0C5D  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5829  0C5E  0020               	movlb	0	; select bank0
  5830  0C5F  00DE               	movwf	?_ReadVoltage+2
  5831  0C60  0021               	movlb	1	; select bank1
  5832  0C61  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5833  0C62  0020               	movlb	0	; select bank0
  5834  0C63  00DD               	movwf	?_ReadVoltage+1
  5835  0C64  0021               	movlb	1	; select bank1
  5836  0C65  0820               	movf	ReadVoltage@voltage^(0+128),w
  5837  0C66  0020               	movlb	0	; select bank0
  5838  0C67  00DC               	movwf	?_ReadVoltage
  5839  0C68  0008               	return
  5840  0C69                     __end_of_ReadVoltage:	
  5841                           
  5842                           	psect	text3
  5843  0BC5                     __ptext3:	
  5844 ;; *************** function ___lwtofl *****************
  5845 ;; Defined at:
  5846 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  c               2   15[BANK0 ] unsigned int 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;		None
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  4   15[BANK0 ] unsigned int 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, pclath, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5864 ;;Total ram usage:        5 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    4
  5867 ;; This function calls:
  5868 ;;		___flpack
  5869 ;; This function is called by:
  5870 ;;		_ReadVoltage
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function ___lwtofl
  5876  0BC5                     ___lwtofl:	
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5880  0BC5  0020               	movlb	0	; select bank0
  5881  0BC6  082F               	movf	___lwtofl@c,w
  5882  0BC7  00A5               	movwf	___flpack@arg
  5883  0BC8  0830               	movf	___lwtofl@c+1,w
  5884  0BC9  00A6               	movwf	___flpack@arg+1
  5885  0BCA  01A7               	clrf	___flpack@arg+2
  5886  0BCB  01A8               	clrf	___flpack@arg+3
  5887  0BCC  3096               	movlw	150
  5888  0BCD  00B3               	movwf	??___lwtofl
  5889  0BCE  0833               	movf	??___lwtofl,w
  5890  0BCF  00A9               	movwf	___flpack@exp
  5891  0BD0  01AA               	clrf	___flpack@sign
  5892  0BD1  319F  2795         	fcall	___flpack
  5893  0BD3  0020               	movlb	0	; select bank0
  5894  0BD4  0828               	movf	?___flpack+3,w
  5895  0BD5  00B2               	movwf	?___lwtofl+3
  5896  0BD6  0827               	movf	?___flpack+2,w
  5897  0BD7  00B1               	movwf	?___lwtofl+2
  5898  0BD8  0826               	movf	?___flpack+1,w
  5899  0BD9  00B0               	movwf	?___lwtofl+1
  5900  0BDA  0825               	movf	?___flpack,w
  5901  0BDB  00AF               	movwf	?___lwtofl
  5902  0BDC  0008               	return
  5903  0BDD                     __end_of___lwtofl:	
  5904                           
  5905                           	psect	text4
  5906  10F8                     __ptext4:	
  5907 ;; *************** function ___flmul *****************
  5908 ;; Defined at:
  5909 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  f1              4   40[BANK0 ] unsigned int 
  5912 ;;  f2              4   44[BANK0 ] unsigned int 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5915 ;;  sign            1   59[BANK0 ] unsigned char 
  5916 ;;  cntr            1   58[BANK0 ] unsigned char 
  5917 ;;  exp             1   53[BANK0 ] unsigned char 
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  4   40[BANK0 ] unsigned char 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2, status,0, pclath, cstack
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5927 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;Total ram usage:       20 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; Hardware stack levels required when called:    4
  5934 ;; This function calls:
  5935 ;;		___flpack
  5936 ;; This function is called by:
  5937 ;;		_ReadVoltage
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           
  5942                           ;psect for function ___flmul
  5943  10F8                     ___flmul:	
  5944                           
  5945                           ;incstack = 0
  5946                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5947  10F8  0020               	movlb	0	; select bank0
  5948  10F9  0848               	movf	___flmul@f1,w
  5949  10FA  00D0               	movwf	??___flmul
  5950  10FB  0849               	movf	___flmul@f1+1,w
  5951  10FC  00D1               	movwf	??___flmul+1
  5952  10FD  084A               	movf	___flmul@f1+2,w
  5953  10FE  00D2               	movwf	??___flmul+2
  5954  10FF  084B               	movf	___flmul@f1+3,w
  5955  1100  00D3               	movwf	??___flmul+3
  5956  1101  1003               	clrc
  5957  1102  0D52               	rlf	??___flmul+2,w
  5958  1103  0D53               	rlf	??___flmul+3,w
  5959  1104  00D4               	movwf	??___flmul+4
  5960  1105  0854               	movf	??___flmul+4,w
  5961  1106  00D5               	movwf	___flmul@exp
  5962  1107  08D5               	movf	___flmul@exp,f
  5963  1108  1D03               	skipz
  5964  1109  2913               	goto	l7063
  5965  110A  3000               	movlw	0
  5966  110B  00CB               	movwf	?___flmul+3
  5967  110C  3000               	movlw	0
  5968  110D  00CA               	movwf	?___flmul+2
  5969  110E  3000               	movlw	0
  5970  110F  00C9               	movwf	?___flmul+1
  5971  1110  3000               	movlw	0
  5972  1111  00C8               	movwf	?___flmul
  5973  1112  0008               	return
  5974  1113                     l7063:	
  5975  1113  084C               	movf	___flmul@f2,w
  5976  1114  00D0               	movwf	??___flmul
  5977  1115  084D               	movf	___flmul@f2+1,w
  5978  1116  00D1               	movwf	??___flmul+1
  5979  1117  084E               	movf	___flmul@f2+2,w
  5980  1118  00D2               	movwf	??___flmul+2
  5981  1119  084F               	movf	___flmul@f2+3,w
  5982  111A  00D3               	movwf	??___flmul+3
  5983  111B  1003               	clrc
  5984  111C  0D52               	rlf	??___flmul+2,w
  5985  111D  0D53               	rlf	??___flmul+3,w
  5986  111E  00D4               	movwf	??___flmul+4
  5987  111F  0854               	movf	??___flmul+4,w
  5988  1120  00DB               	movwf	___flmul@sign
  5989  1121  08DB               	movf	___flmul@sign,f
  5990  1122  1D03               	skipz
  5991  1123  292D               	goto	l7069
  5992  1124  3000               	movlw	0
  5993  1125  00CB               	movwf	?___flmul+3
  5994  1126  3000               	movlw	0
  5995  1127  00CA               	movwf	?___flmul+2
  5996  1128  3000               	movlw	0
  5997  1129  00C9               	movwf	?___flmul+1
  5998  112A  3000               	movlw	0
  5999  112B  00C8               	movwf	?___flmul
  6000  112C  0008               	return
  6001  112D                     l7069:	
  6002  112D  085B               	movf	___flmul@sign,w
  6003  112E  3E7B               	addlw	123
  6004  112F  00D0               	movwf	??___flmul
  6005  1130  0850               	movf	??___flmul,w
  6006  1131  07D5               	addwf	___flmul@exp,f
  6007  1132  0848               	movf	___flmul@f1,w
  6008  1133  00D0               	movwf	??___flmul
  6009  1134  0849               	movf	___flmul@f1+1,w
  6010  1135  00D1               	movwf	??___flmul+1
  6011  1136  084A               	movf	___flmul@f1+2,w
  6012  1137  00D2               	movwf	??___flmul+2
  6013  1138  084B               	movf	___flmul@f1+3,w
  6014  1139  00D3               	movwf	??___flmul+3
  6015  113A  3018               	movlw	24
  6016  113B                     u9835:	
  6017  113B  36D3               	lsrf	??___flmul+3,f
  6018  113C  0CD2               	rrf	??___flmul+2,f
  6019  113D  0CD1               	rrf	??___flmul+1,f
  6020  113E  0CD0               	rrf	??___flmul,f
  6021  113F  0B89               	decfsz	9,f
  6022  1140  293B               	goto	u9835
  6023  1141  0850               	movf	??___flmul,w
  6024  1142  00D4               	movwf	??___flmul+4
  6025  1143  0854               	movf	??___flmul+4,w
  6026  1144  00DB               	movwf	___flmul@sign
  6027  1145  084C               	movf	___flmul@f2,w
  6028  1146  00D0               	movwf	??___flmul
  6029  1147  084D               	movf	___flmul@f2+1,w
  6030  1148  00D1               	movwf	??___flmul+1
  6031  1149  084E               	movf	___flmul@f2+2,w
  6032  114A  00D2               	movwf	??___flmul+2
  6033  114B  084F               	movf	___flmul@f2+3,w
  6034  114C  00D3               	movwf	??___flmul+3
  6035  114D  3018               	movlw	24
  6036  114E                     u9845:	
  6037  114E  36D3               	lsrf	??___flmul+3,f
  6038  114F  0CD2               	rrf	??___flmul+2,f
  6039  1150  0CD1               	rrf	??___flmul+1,f
  6040  1151  0CD0               	rrf	??___flmul,f
  6041  1152  0B89               	decfsz	9,f
  6042  1153  294E               	goto	u9845
  6043  1154  0850               	movf	??___flmul,w
  6044  1155  00D4               	movwf	??___flmul+4
  6045  1156  0854               	movf	??___flmul+4,w
  6046  1157  06DB               	xorwf	___flmul@sign,f
  6047  1158  3080               	movlw	128
  6048  1159  00D0               	movwf	??___flmul
  6049  115A  0850               	movf	??___flmul,w
  6050  115B  05DB               	andwf	___flmul@sign,f
  6051  115C  17CA               	bsf	___flmul@f1+2,7
  6052  115D  17CE               	bsf	___flmul@f2+2,7
  6053  115E  30FF               	movlw	255
  6054  115F  05CC               	andwf	___flmul@f2,f
  6055  1160  30FF               	movlw	255
  6056  1161  05CD               	andwf	___flmul@f2+1,f
  6057  1162  30FF               	movlw	255
  6058  1163  05CE               	andwf	___flmul@f2+2,f
  6059  1164  3000               	movlw	0
  6060  1165  05CF               	andwf	___flmul@f2+3,f
  6061  1166  3000               	movlw	0
  6062  1167  00D9               	movwf	___flmul@f3_as_product+3
  6063  1168  3000               	movlw	0
  6064  1169  00D8               	movwf	___flmul@f3_as_product+2
  6065  116A  3000               	movlw	0
  6066  116B  00D7               	movwf	___flmul@f3_as_product+1
  6067  116C  3000               	movlw	0
  6068  116D  00D6               	movwf	___flmul@f3_as_product
  6069  116E  3007               	movlw	7
  6070  116F  00D0               	movwf	??___flmul
  6071  1170  0850               	movf	??___flmul,w
  6072  1171  00DA               	movwf	___flmul@cntr
  6073  1172                     l7081:	
  6074  1172  1C48               	btfss	___flmul@f1,0
  6075  1173  297C               	goto	l7085
  6076  1174  084C               	movf	___flmul@f2,w
  6077  1175  07D6               	addwf	___flmul@f3_as_product,f
  6078  1176  084D               	movf	___flmul@f2+1,w
  6079  1177  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6080  1178  084E               	movf	___flmul@f2+2,w
  6081  1179  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6082  117A  084F               	movf	___flmul@f2+3,w
  6083  117B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6084  117C                     l7085:	
  6085  117C  3001               	movlw	1
  6086  117D                     u9865:	
  6087  117D  36CB               	lsrf	___flmul@f1+3,f
  6088  117E  0CCA               	rrf	___flmul@f1+2,f
  6089  117F  0CC9               	rrf	___flmul@f1+1,f
  6090  1180  0CC8               	rrf	___flmul@f1,f
  6091  1181  0B89               	decfsz	9,f
  6092  1182  297D               	goto	u9865
  6093  1183  3001               	movlw	1
  6094  1184                     u9875:	
  6095  1184  35CC               	lslf	___flmul@f2,f
  6096  1185  0DCD               	rlf	___flmul@f2+1,f
  6097  1186  0DCE               	rlf	___flmul@f2+2,f
  6098  1187  0DCF               	rlf	___flmul@f2+3,f
  6099  1188  0B89               	decfsz	9,f
  6100  1189  2984               	goto	u9875
  6101  118A  3001               	movlw	1
  6102  118B  02DA               	subwf	___flmul@cntr,f
  6103  118C  1D03               	btfss	3,2
  6104  118D  2972               	goto	l7081
  6105  118E  3011               	movlw	17
  6106  118F  00D0               	movwf	??___flmul
  6107  1190  0850               	movf	??___flmul,w
  6108  1191  00DA               	movwf	___flmul@cntr
  6109  1192                     l7093:	
  6110  1192  1C48               	btfss	___flmul@f1,0
  6111  1193  299C               	goto	l7097
  6112  1194  084C               	movf	___flmul@f2,w
  6113  1195  07D6               	addwf	___flmul@f3_as_product,f
  6114  1196  084D               	movf	___flmul@f2+1,w
  6115  1197  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6116  1198  084E               	movf	___flmul@f2+2,w
  6117  1199  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6118  119A  084F               	movf	___flmul@f2+3,w
  6119  119B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6120  119C                     l7097:	
  6121  119C  3001               	movlw	1
  6122  119D                     u9905:	
  6123  119D  36CB               	lsrf	___flmul@f1+3,f
  6124  119E  0CCA               	rrf	___flmul@f1+2,f
  6125  119F  0CC9               	rrf	___flmul@f1+1,f
  6126  11A0  0CC8               	rrf	___flmul@f1,f
  6127  11A1  0B89               	decfsz	9,f
  6128  11A2  299D               	goto	u9905
  6129  11A3  3001               	movlw	1
  6130  11A4                     u9915:	
  6131  11A4  36D9               	lsrf	___flmul@f3_as_product+3,f
  6132  11A5  0CD8               	rrf	___flmul@f3_as_product+2,f
  6133  11A6  0CD7               	rrf	___flmul@f3_as_product+1,f
  6134  11A7  0CD6               	rrf	___flmul@f3_as_product,f
  6135  11A8  0B89               	decfsz	9,f
  6136  11A9  29A4               	goto	u9915
  6137  11AA  3001               	movlw	1
  6138  11AB  02DA               	subwf	___flmul@cntr,f
  6139  11AC  1D03               	btfss	3,2
  6140  11AD  2992               	goto	l7093
  6141  11AE  0859               	movf	___flmul@f3_as_product+3,w
  6142  11AF  00A8               	movwf	___flpack@arg+3
  6143  11B0  0858               	movf	___flmul@f3_as_product+2,w
  6144  11B1  00A7               	movwf	___flpack@arg+2
  6145  11B2  0857               	movf	___flmul@f3_as_product+1,w
  6146  11B3  00A6               	movwf	___flpack@arg+1
  6147  11B4  0856               	movf	___flmul@f3_as_product,w
  6148  11B5  00A5               	movwf	___flpack@arg
  6149  11B6  0855               	movf	___flmul@exp,w
  6150  11B7  00D0               	movwf	??___flmul
  6151  11B8  0850               	movf	??___flmul,w
  6152  11B9  00A9               	movwf	___flpack@exp
  6153  11BA  085B               	movf	___flmul@sign,w
  6154  11BB  00D1               	movwf	??___flmul+1
  6155  11BC  0851               	movf	??___flmul+1,w
  6156  11BD  00AA               	movwf	___flpack@sign
  6157  11BE  319F  2795         	fcall	___flpack
  6158  11C0  0020               	movlb	0	; select bank0
  6159  11C1  0828               	movf	?___flpack+3,w
  6160  11C2  00CB               	movwf	?___flmul+3
  6161  11C3  0827               	movf	?___flpack+2,w
  6162  11C4  00CA               	movwf	?___flmul+2
  6163  11C5  0826               	movf	?___flpack+1,w
  6164  11C6  00C9               	movwf	?___flmul+1
  6165  11C7  0825               	movf	?___flpack,w
  6166  11C8  00C8               	movwf	?___flmul
  6167  11C9  0008               	return
  6168  11CA                     __end_of___flmul:	
  6169                           
  6170                           	psect	text5
  6171  1037                     __ptext5:	
  6172 ;; *************** function ___fldiv *****************
  6173 ;; Defined at:
  6174 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  f2              4   20[BANK0 ] unsigned char 
  6177 ;;  f1              4   24[BANK0 ] unsigned char 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;  f3              4   33[BANK0 ] unsigned char 
  6180 ;;  sign            1   39[BANK0 ] unsigned char 
  6181 ;;  exp             1   38[BANK0 ] unsigned char 
  6182 ;;  cntr            1   37[BANK0 ] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  4   20[BANK0 ] unsigned char 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:       20 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    4
  6199 ;; This function calls:
  6200 ;;		___flpack
  6201 ;; This function is called by:
  6202 ;;		_ReadVoltage
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function ___fldiv
  6208  1037                     ___fldiv:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6212  1037  0020               	movlb	0	; select bank0
  6213  1038  0838               	movf	___fldiv@f1,w
  6214  1039  00BC               	movwf	??___fldiv
  6215  103A  0839               	movf	___fldiv@f1+1,w
  6216  103B  00BD               	movwf	??___fldiv+1
  6217  103C  083A               	movf	___fldiv@f1+2,w
  6218  103D  00BE               	movwf	??___fldiv+2
  6219  103E  083B               	movf	___fldiv@f1+3,w
  6220  103F  00BF               	movwf	??___fldiv+3
  6221  1040  1003               	clrc
  6222  1041  0D3E               	rlf	??___fldiv+2,w
  6223  1042  0D3F               	rlf	??___fldiv+3,w
  6224  1043  00C0               	movwf	??___fldiv+4
  6225  1044  0840               	movf	??___fldiv+4,w
  6226  1045  00C6               	movwf	___fldiv@exp
  6227  1046  08C6               	movf	___fldiv@exp,f
  6228  1047  1D03               	skipz
  6229  1048  2852               	goto	l7025
  6230  1049  3000               	movlw	0
  6231  104A  00B7               	movwf	?___fldiv+3
  6232  104B  3000               	movlw	0
  6233  104C  00B6               	movwf	?___fldiv+2
  6234  104D  3000               	movlw	0
  6235  104E  00B5               	movwf	?___fldiv+1
  6236  104F  3000               	movlw	0
  6237  1050  00B4               	movwf	?___fldiv
  6238  1051  0008               	return
  6239  1052                     l7025:	
  6240  1052  0834               	movf	___fldiv@f2,w
  6241  1053  00BC               	movwf	??___fldiv
  6242  1054  0835               	movf	___fldiv@f2+1,w
  6243  1055  00BD               	movwf	??___fldiv+1
  6244  1056  0836               	movf	___fldiv@f2+2,w
  6245  1057  00BE               	movwf	??___fldiv+2
  6246  1058  0837               	movf	___fldiv@f2+3,w
  6247  1059  00BF               	movwf	??___fldiv+3
  6248  105A  1003               	clrc
  6249  105B  0D3E               	rlf	??___fldiv+2,w
  6250  105C  0D3F               	rlf	??___fldiv+3,w
  6251  105D  00C0               	movwf	??___fldiv+4
  6252  105E  0840               	movf	??___fldiv+4,w
  6253  105F  00C7               	movwf	___fldiv@sign
  6254  1060  08C7               	movf	___fldiv@sign,f
  6255  1061  1D03               	skipz
  6256  1062  286C               	goto	l7031
  6257  1063  3000               	movlw	0
  6258  1064  00B7               	movwf	?___fldiv+3
  6259  1065  3000               	movlw	0
  6260  1066  00B6               	movwf	?___fldiv+2
  6261  1067  3000               	movlw	0
  6262  1068  00B5               	movwf	?___fldiv+1
  6263  1069  3000               	movlw	0
  6264  106A  00B4               	movwf	?___fldiv
  6265  106B  0008               	return
  6266  106C                     l7031:	
  6267  106C  3089               	movlw	137
  6268  106D  0747               	addwf	___fldiv@sign,w
  6269  106E  00BC               	movwf	??___fldiv
  6270  106F  083C               	movf	??___fldiv,w
  6271  1070  02C6               	subwf	___fldiv@exp,f
  6272  1071  0838               	movf	___fldiv@f1,w
  6273  1072  00BC               	movwf	??___fldiv
  6274  1073  0839               	movf	___fldiv@f1+1,w
  6275  1074  00BD               	movwf	??___fldiv+1
  6276  1075  083A               	movf	___fldiv@f1+2,w
  6277  1076  00BE               	movwf	??___fldiv+2
  6278  1077  083B               	movf	___fldiv@f1+3,w
  6279  1078  00BF               	movwf	??___fldiv+3
  6280  1079  3018               	movlw	24
  6281  107A                     u9755:	
  6282  107A  36BF               	lsrf	??___fldiv+3,f
  6283  107B  0CBE               	rrf	??___fldiv+2,f
  6284  107C  0CBD               	rrf	??___fldiv+1,f
  6285  107D  0CBC               	rrf	??___fldiv,f
  6286  107E  0B89               	decfsz	9,f
  6287  107F  287A               	goto	u9755
  6288  1080  083C               	movf	??___fldiv,w
  6289  1081  00C0               	movwf	??___fldiv+4
  6290  1082  0840               	movf	??___fldiv+4,w
  6291  1083  00C7               	movwf	___fldiv@sign
  6292  1084  0834               	movf	___fldiv@f2,w
  6293  1085  00BC               	movwf	??___fldiv
  6294  1086  0835               	movf	___fldiv@f2+1,w
  6295  1087  00BD               	movwf	??___fldiv+1
  6296  1088  0836               	movf	___fldiv@f2+2,w
  6297  1089  00BE               	movwf	??___fldiv+2
  6298  108A  0837               	movf	___fldiv@f2+3,w
  6299  108B  00BF               	movwf	??___fldiv+3
  6300  108C  3018               	movlw	24
  6301  108D                     u9765:	
  6302  108D  36BF               	lsrf	??___fldiv+3,f
  6303  108E  0CBE               	rrf	??___fldiv+2,f
  6304  108F  0CBD               	rrf	??___fldiv+1,f
  6305  1090  0CBC               	rrf	??___fldiv,f
  6306  1091  0B89               	decfsz	9,f
  6307  1092  288D               	goto	u9765
  6308  1093  083C               	movf	??___fldiv,w
  6309  1094  00C0               	movwf	??___fldiv+4
  6310  1095  0840               	movf	??___fldiv+4,w
  6311  1096  06C7               	xorwf	___fldiv@sign,f
  6312  1097  3080               	movlw	128
  6313  1098  00BC               	movwf	??___fldiv
  6314  1099  083C               	movf	??___fldiv,w
  6315  109A  05C7               	andwf	___fldiv@sign,f
  6316  109B  17BA               	bsf	___fldiv@f1+2,7
  6317  109C  30FF               	movlw	255
  6318  109D  05B8               	andwf	___fldiv@f1,f
  6319  109E  30FF               	movlw	255
  6320  109F  05B9               	andwf	___fldiv@f1+1,f
  6321  10A0  30FF               	movlw	255
  6322  10A1  05BA               	andwf	___fldiv@f1+2,f
  6323  10A2  3000               	movlw	0
  6324  10A3  05BB               	andwf	___fldiv@f1+3,f
  6325  10A4  17B6               	bsf	___fldiv@f2+2,7
  6326  10A5  30FF               	movlw	255
  6327  10A6  05B4               	andwf	___fldiv@f2,f
  6328  10A7  30FF               	movlw	255
  6329  10A8  05B5               	andwf	___fldiv@f2+1,f
  6330  10A9  30FF               	movlw	255
  6331  10AA  05B6               	andwf	___fldiv@f2+2,f
  6332  10AB  3000               	movlw	0
  6333  10AC  05B7               	andwf	___fldiv@f2+3,f
  6334  10AD  3020               	movlw	32
  6335  10AE  00BC               	movwf	??___fldiv
  6336  10AF  083C               	movf	??___fldiv,w
  6337  10B0  00C5               	movwf	___fldiv@cntr
  6338  10B1                     l7043:	
  6339  10B1  3001               	movlw	1
  6340  10B2                     u9775:	
  6341  10B2  35C1               	lslf	___fldiv@f3,f
  6342  10B3  0DC2               	rlf	___fldiv@f3+1,f
  6343  10B4  0DC3               	rlf	___fldiv@f3+2,f
  6344  10B5  0DC4               	rlf	___fldiv@f3+3,f
  6345  10B6  0B89               	decfsz	9,f
  6346  10B7  28B2               	goto	u9775
  6347  10B8  0837               	movf	___fldiv@f2+3,w
  6348  10B9  023B               	subwf	___fldiv@f1+3,w
  6349  10BA  1D03               	skipz
  6350  10BB  28C6               	goto	u9785
  6351  10BC  0836               	movf	___fldiv@f2+2,w
  6352  10BD  023A               	subwf	___fldiv@f1+2,w
  6353  10BE  1D03               	skipz
  6354  10BF  28C6               	goto	u9785
  6355  10C0  0835               	movf	___fldiv@f2+1,w
  6356  10C1  0239               	subwf	___fldiv@f1+1,w
  6357  10C2  1D03               	skipz
  6358  10C3  28C6               	goto	u9785
  6359  10C4  0834               	movf	___fldiv@f2,w
  6360  10C5  0238               	subwf	___fldiv@f1,w
  6361  10C6                     u9785:	
  6362  10C6  1C03               	skipc
  6363  10C7  28D1               	goto	l7049
  6364  10C8  0834               	movf	___fldiv@f2,w
  6365  10C9  02B8               	subwf	___fldiv@f1,f
  6366  10CA  0835               	movf	___fldiv@f2+1,w
  6367  10CB  3BB9               	subwfb	___fldiv@f1+1,f
  6368  10CC  0836               	movf	___fldiv@f2+2,w
  6369  10CD  3BBA               	subwfb	___fldiv@f1+2,f
  6370  10CE  0837               	movf	___fldiv@f2+3,w
  6371  10CF  3BBB               	subwfb	___fldiv@f1+3,f
  6372  10D0  1441               	bsf	___fldiv@f3,0
  6373  10D1                     l7049:	
  6374  10D1  3001               	movlw	1
  6375  10D2                     u9795:	
  6376  10D2  35B8               	lslf	___fldiv@f1,f
  6377  10D3  0DB9               	rlf	___fldiv@f1+1,f
  6378  10D4  0DBA               	rlf	___fldiv@f1+2,f
  6379  10D5  0DBB               	rlf	___fldiv@f1+3,f
  6380  10D6  0B89               	decfsz	9,f
  6381  10D7  28D2               	goto	u9795
  6382  10D8  3001               	movlw	1
  6383  10D9  02C5               	subwf	___fldiv@cntr,f
  6384  10DA  1D03               	btfss	3,2
  6385  10DB  28B1               	goto	l7043
  6386  10DC  0844               	movf	___fldiv@f3+3,w
  6387  10DD  00A8               	movwf	___flpack@arg+3
  6388  10DE  0843               	movf	___fldiv@f3+2,w
  6389  10DF  00A7               	movwf	___flpack@arg+2
  6390  10E0  0842               	movf	___fldiv@f3+1,w
  6391  10E1  00A6               	movwf	___flpack@arg+1
  6392  10E2  0841               	movf	___fldiv@f3,w
  6393  10E3  00A5               	movwf	___flpack@arg
  6394  10E4  0846               	movf	___fldiv@exp,w
  6395  10E5  00BC               	movwf	??___fldiv
  6396  10E6  083C               	movf	??___fldiv,w
  6397  10E7  00A9               	movwf	___flpack@exp
  6398  10E8  0847               	movf	___fldiv@sign,w
  6399  10E9  00BD               	movwf	??___fldiv+1
  6400  10EA  083D               	movf	??___fldiv+1,w
  6401  10EB  00AA               	movwf	___flpack@sign
  6402  10EC  319F  2795         	fcall	___flpack
  6403  10EE  0020               	movlb	0	; select bank0
  6404  10EF  0828               	movf	?___flpack+3,w
  6405  10F0  00B7               	movwf	?___fldiv+3
  6406  10F1  0827               	movf	?___flpack+2,w
  6407  10F2  00B6               	movwf	?___fldiv+2
  6408  10F3  0826               	movf	?___flpack+1,w
  6409  10F4  00B5               	movwf	?___fldiv+1
  6410  10F5  0825               	movf	?___flpack,w
  6411  10F6  00B4               	movwf	?___fldiv
  6412  10F7  0008               	return
  6413  10F8                     __end_of___fldiv:	
  6414                           
  6415                           	psect	text6
  6416  1F95                     __ptext6:	
  6417 ;; *************** function ___flpack *****************
  6418 ;; Defined at:
  6419 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  arg             4    5[BANK0 ] unsigned long 
  6422 ;;  exp             1    9[BANK0 ] unsigned char 
  6423 ;;  sign            1   10[BANK0 ] unsigned char 
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;		None
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  4    5[BANK0 ] unsigned char 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6435 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;Total ram usage:       10 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    3
  6442 ;; This function calls:
  6443 ;;		Nothing
  6444 ;; This function is called by:
  6445 ;;		___fldiv
  6446 ;;		___flmul
  6447 ;;		___lwtofl
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           
  6452                           ;psect for function ___flpack
  6453  1F95                     ___flpack:	
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6457  1F95  0020               	movlb	0	; select bank0
  6458  1F96  0829               	movf	___flpack@exp,w
  6459  1F97  1903               	btfsc	3,2
  6460  1F98  2F9F               	goto	l6423
  6461  1F99  0828               	movf	___flpack@arg+3,w
  6462  1F9A  0427               	iorwf	___flpack@arg+2,w
  6463  1F9B  0426               	iorwf	___flpack@arg+1,w
  6464  1F9C  0425               	iorwf	___flpack@arg,w
  6465  1F9D  1D03               	skipz
  6466  1F9E  2FB3               	goto	l6429
  6467  1F9F                     l6423:	
  6468  1F9F  3000               	movlw	0
  6469  1FA0  00A8               	movwf	?___flpack+3
  6470  1FA1  3000               	movlw	0
  6471  1FA2  00A7               	movwf	?___flpack+2
  6472  1FA3  3000               	movlw	0
  6473  1FA4  00A6               	movwf	?___flpack+1
  6474  1FA5  3000               	movlw	0
  6475  1FA6  00A5               	movwf	?___flpack
  6476  1FA7  0008               	return
  6477  1FA8                     l6427:	
  6478  1FA8  3001               	movlw	1
  6479  1FA9  00AB               	movwf	??___flpack
  6480  1FAA  082B               	movf	??___flpack,w
  6481  1FAB  07A9               	addwf	___flpack@exp,f
  6482  1FAC  3001               	movlw	1
  6483  1FAD                     u8355:	
  6484  1FAD  36A8               	lsrf	___flpack@arg+3,f
  6485  1FAE  0CA7               	rrf	___flpack@arg+2,f
  6486  1FAF  0CA6               	rrf	___flpack@arg+1,f
  6487  1FB0  0CA5               	rrf	___flpack@arg,f
  6488  1FB1  0B89               	decfsz	9,f
  6489  1FB2  2FAD               	goto	u8355
  6490  1FB3                     l6429:	
  6491  1FB3  30FE               	movlw	254
  6492  1FB4  0528               	andwf	___flpack@arg+3,w
  6493  1FB5  1903               	btfsc	3,2
  6494  1FB6  2FCB               	goto	l1186
  6495  1FB7  2FA8               	goto	l6427
  6496  1FB8                     l6431:	
  6497  1FB8  3001               	movlw	1
  6498  1FB9  00AB               	movwf	??___flpack
  6499  1FBA  082B               	movf	??___flpack,w
  6500  1FBB  07A9               	addwf	___flpack@exp,f
  6501  1FBC  3001               	movlw	1
  6502  1FBD  07A5               	addwf	___flpack@arg,f
  6503  1FBE  3000               	movlw	0
  6504  1FBF  3DA6               	addwfc	___flpack@arg+1,f
  6505  1FC0  3000               	movlw	0
  6506  1FC1  3DA7               	addwfc	___flpack@arg+2,f
  6507  1FC2  3000               	movlw	0
  6508  1FC3  3DA8               	addwfc	___flpack@arg+3,f
  6509  1FC4  3001               	movlw	1
  6510  1FC5                     u8375:	
  6511  1FC5  36A8               	lsrf	___flpack@arg+3,f
  6512  1FC6  0CA7               	rrf	___flpack@arg+2,f
  6513  1FC7  0CA6               	rrf	___flpack@arg+1,f
  6514  1FC8  0CA5               	rrf	___flpack@arg,f
  6515  1FC9  0B89               	decfsz	9,f
  6516  1FCA  2FC5               	goto	u8375
  6517  1FCB                     l1186:	
  6518  1FCB  30FF               	movlw	255
  6519  1FCC  0528               	andwf	___flpack@arg+3,w
  6520  1FCD  1903               	btfsc	3,2
  6521  1FCE  2FD9               	goto	l6439
  6522  1FCF  2FB8               	goto	l6431
  6523  1FD0                     l6437:	
  6524  1FD0  3001               	movlw	1
  6525  1FD1  02A9               	subwf	___flpack@exp,f
  6526  1FD2  3001               	movlw	1
  6527  1FD3                     u8395:	
  6528  1FD3  35A5               	lslf	___flpack@arg,f
  6529  1FD4  0DA6               	rlf	___flpack@arg+1,f
  6530  1FD5  0DA7               	rlf	___flpack@arg+2,f
  6531  1FD6  0DA8               	rlf	___flpack@arg+3,f
  6532  1FD7  0B89               	decfsz	9,f
  6533  1FD8  2FD3               	goto	u8395
  6534  1FD9                     l6439:	
  6535  1FD9  1FA7               	btfss	___flpack@arg+2,7
  6536  1FDA  2FD0               	goto	l6437
  6537  1FDB  1829               	btfsc	___flpack@exp,0
  6538  1FDC  2FE5               	goto	l1192
  6539  1FDD  30FF               	movlw	255
  6540  1FDE  05A5               	andwf	___flpack@arg,f
  6541  1FDF  30FF               	movlw	255
  6542  1FE0  05A6               	andwf	___flpack@arg+1,f
  6543  1FE1  307F               	movlw	127
  6544  1FE2  05A7               	andwf	___flpack@arg+2,f
  6545  1FE3  30FF               	movlw	255
  6546  1FE4  05A8               	andwf	___flpack@arg+3,f
  6547  1FE5                     l1192:	
  6548  1FE5  1003               	clrc
  6549  1FE6  0CA9               	rrf	___flpack@exp,f
  6550  1FE7  0829               	movf	___flpack@exp,w
  6551  1FE8  00AB               	movwf	??___flpack
  6552  1FE9  01AC               	clrf	??___flpack+1
  6553  1FEA  01AD               	clrf	??___flpack+2
  6554  1FEB  01AE               	clrf	??___flpack+3
  6555  1FEC  3018               	movlw	24
  6556  1FED                     u8425:	
  6557  1FED  35AB               	lslf	??___flpack,f
  6558  1FEE  0DAC               	rlf	??___flpack+1,f
  6559  1FEF  0DAD               	rlf	??___flpack+2,f
  6560  1FF0  0DAE               	rlf	??___flpack+3,f
  6561  1FF1  0B89               	decfsz	9,f
  6562  1FF2  2FED               	goto	u8425
  6563  1FF3  082B               	movf	??___flpack,w
  6564  1FF4  04A5               	iorwf	___flpack@arg,f
  6565  1FF5  082C               	movf	??___flpack+1,w
  6566  1FF6  04A6               	iorwf	___flpack@arg+1,f
  6567  1FF7  082D               	movf	??___flpack+2,w
  6568  1FF8  04A7               	iorwf	___flpack@arg+2,f
  6569  1FF9  082E               	movf	??___flpack+3,w
  6570  1FFA  04A8               	iorwf	___flpack@arg+3,f
  6571  1FFB  082A               	movf	___flpack@sign,w
  6572  1FFC  1903               	btfsc	3,2
  6573  1FFD  0008               	return
  6574  1FFE  17A8               	bsf	___flpack@arg+3,7
  6575  1FFF  0008               	return
  6576  2000                     __end_of___flpack:	
  6577                           
  6578                           	psect	text7
  6579  1C25                     __ptext7:	
  6580 ;; *************** function _InternalADC_Read *****************
  6581 ;; Defined at:
  6582 ;;		line 94 in file "ADC.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  channel         1    wreg     unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  channel         1   19[BANK0 ] unsigned char 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;                  2   15[BANK0 ] unsigned int 
  6589 ;; Registers used:
  6590 ;;		wreg, status,2, status,0, pclath, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:        5 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    4
  6603 ;; This function calls:
  6604 ;;		_delayUS
  6605 ;; This function is called by:
  6606 ;;		_ReadVoltage
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _InternalADC_Read
  6612  1C25                     _InternalADC_Read:	
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6616                           ;InternalADC_Read@channel stored from wreg
  6617  1C25  0020               	movlb	0	; select bank0
  6618  1C26  00B3               	movwf	InternalADC_Read@channel
  6619                           
  6620                           ;ADC.c: 96: ADCON0 =0;
  6621  1C27  0021               	movlb	1	; select bank1
  6622  1C28  019D               	clrf	29	;volatile
  6623                           
  6624                           ;ADC.c: 97: ADCON1 =0;
  6625  1C29  019E               	clrf	30	;volatile
  6626                           
  6627                           ;ADC.c: 98: ADCON1 |= 0b01010000;
  6628  1C2A  3050               	movlw	80
  6629  1C2B  0020               	movlb	0	; select bank0
  6630  1C2C  00B1               	movwf	??_InternalADC_Read
  6631  1C2D  0831               	movf	??_InternalADC_Read,w
  6632  1C2E  0021               	movlb	1	; select bank1
  6633  1C2F  049E               	iorwf	30,f	;volatile
  6634                           
  6635                           ;ADC.c: 99: FVRCON |= 0b10000000;
  6636  1C30  0022               	movlb	2	; select bank2
  6637  1C31  1797               	bsf	23,7	;volatile
  6638                           
  6639                           ;ADC.c: 100: FVRCON |= 0b00000011;
  6640  1C32  3003               	movlw	3
  6641  1C33  0020               	movlb	0	; select bank0
  6642  1C34  00B1               	movwf	??_InternalADC_Read
  6643  1C35  0831               	movf	??_InternalADC_Read,w
  6644  1C36  0022               	movlb	2	; select bank2
  6645  1C37  0497               	iorwf	23,f	;volatile
  6646  1C38                     l970:	
  6647                           ;ADC.c: 101: while(!(FVRCON & 0b01000000));
  6648                           
  6649  1C38  1F17               	btfss	23,6	;volatile
  6650  1C39  2C38               	goto	l970
  6651                           
  6652                           ;ADC.c: 102: ADCON0 |= (channel << 2);
  6653  1C3A  0020               	movlb	0	; select bank0
  6654  1C3B  0833               	movf	InternalADC_Read@channel,w
  6655  1C3C  00B1               	movwf	??_InternalADC_Read
  6656  1C3D  3001               	movlw	1
  6657  1C3E                     u9715:	
  6658  1C3E  35B1               	lslf	??_InternalADC_Read,f
  6659  1C3F  3EFF               	addlw	-1
  6660  1C40  1D03               	skipz
  6661  1C41  2C3E               	goto	u9715
  6662  1C42  3531               	lslf	??_InternalADC_Read,w
  6663  1C43  00B2               	movwf	??_InternalADC_Read+1
  6664  1C44  0832               	movf	??_InternalADC_Read+1,w
  6665  1C45  0021               	movlb	1	; select bank1
  6666  1C46  049D               	iorwf	29,f	;volatile
  6667                           
  6668                           ;ADC.c: 103: ADCON1 |= 0b10000011;
  6669  1C47  3083               	movlw	131
  6670  1C48  0020               	movlb	0	; select bank0
  6671  1C49  00B1               	movwf	??_InternalADC_Read
  6672  1C4A  0831               	movf	??_InternalADC_Read,w
  6673  1C4B  0021               	movlb	1	; select bank1
  6674  1C4C  049E               	iorwf	30,f	;volatile
  6675                           
  6676                           ;ADC.c: 104: ADCON0 |= 0b00000001;
  6677  1C4D  141D               	bsf	29,0	;volatile
  6678                           
  6679                           ;ADC.c: 105: (PIE1bits.ADIE=0);
  6680  1C4E  1311               	bcf	17,6	;volatile
  6681                           
  6682                           ;ADC.c: 106: delayUS(5);
  6683  1C4F  3000               	movlw	0
  6684  1C50  0020               	movlb	0	; select bank0
  6685  1C51  00A8               	movwf	delayUS@US+3
  6686  1C52  3000               	movlw	0
  6687  1C53  00A7               	movwf	delayUS@US+2
  6688  1C54  3000               	movlw	0
  6689  1C55  00A6               	movwf	delayUS@US+1
  6690  1C56  3005               	movlw	5
  6691  1C57  00A5               	movwf	delayUS@US
  6692  1C58  3190  2002  319C   	fcall	_delayUS
  6693                           
  6694                           ;ADC.c: 107: ADCON0 |= 0b00000010;
  6695  1C5B  0021               	movlb	1	; select bank1
  6696  1C5C  149D               	bsf	29,1	;volatile
  6697  1C5D                     l973:	
  6698                           ;ADC.c: 108: while(ADCON0 & 0b00000010);
  6699                           
  6700  1C5D  189D               	btfsc	29,1	;volatile
  6701  1C5E  2C5D               	goto	l973
  6702                           
  6703                           ;ADC.c: 109: return ((ADRESH << 8) + ADRESL);
  6704  1C5F  081C               	movf	28,w	;volatile
  6705  1C60  0020               	movlb	0	; select bank0
  6706  1C61  01B0               	clrf	?_InternalADC_Read+1
  6707  1C62  07B0               	addwf	?_InternalADC_Read+1,f
  6708  1C63  0021               	movlb	1	; select bank1
  6709  1C64  081B               	movf	27,w	;volatile
  6710  1C65  0020               	movlb	0	; select bank0
  6711  1C66  01AF               	clrf	?_InternalADC_Read
  6712  1C67  07AF               	addwf	?_InternalADC_Read,f
  6713  1C68  0008               	return
  6714  1C69                     __end_of_InternalADC_Read:	
  6715                           
  6716                           	psect	text8
  6717  18BE                     __ptext8:	
  6718 ;; *************** function _DisableInternalADC *****************
  6719 ;; Defined at:
  6720 ;;		line 117 in file "ADC.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, status,2, status,0
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        1 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_ReadVoltage
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _DisableInternalADC
  6750  18BE                     _DisableInternalADC:	
  6751                           
  6752                           ;ADC.c: 119: ADCON0 &= ~0b00000001;
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6756  18BE  30FE               	movlw	254
  6757  18BF  0020               	movlb	0	; select bank0
  6758  18C0  00A5               	movwf	??_DisableInternalADC
  6759  18C1  0825               	movf	??_DisableInternalADC,w
  6760  18C2  0021               	movlb	1	; select bank1
  6761  18C3  059D               	andwf	29,f	;volatile
  6762  18C4  0008               	return
  6763  18C5                     __end_of_DisableInternalADC:	
  6764                           
  6765                           	psect	text9
  6766  1902                     __ptext9:	
  6767 ;; *************** function _PS_2_INIT *****************
  6768 ;; Defined at:
  6769 ;;		line 105 in file "PS_2.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;		None
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;		None
  6774 ;; Return value:  Size  Location     Type
  6775 ;;		None               void
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, pclath, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;Total ram usage:        0 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    4
  6790 ;; This function calls:
  6791 ;;		_Clock_TRIS
  6792 ;;		_Data_TRIS
  6793 ;;		_INIT_PS_2_INTERRUPT
  6794 ;; This function is called by:
  6795 ;;		_main
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function _PS_2_INIT
  6801  1902                     _PS_2_INIT:	
  6802                           
  6803                           ;PS_2.c: 108: Clock_TRIS(1);
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6807  1902  3001               	movlw	1
  6808  1903  3198  20E1  3199   	fcall	_Clock_TRIS
  6809                           
  6810                           ;PS_2.c: 109: Data_TRIS(1);
  6811  1906  3001               	movlw	1
  6812  1907  3198  20EC  3199   	fcall	_Data_TRIS
  6813                           
  6814                           ;PS_2.c: 110: INIT_PS_2_INTERRUPT(0b00100000);
  6815  190A  3020               	movlw	32
  6816  190B  3199  2138         	fcall	_INIT_PS_2_INTERRUPT
  6817  190D  0008               	return
  6818  190E                     __end_of_PS_2_INIT:	
  6819                           
  6820                           	psect	text10
  6821  1938                     __ptext10:	
  6822 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6823 ;; Defined at:
  6824 ;;		line 153 in file "PS_2.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  DATA_CLK        1    wreg     unsigned char 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;		None               void
  6831 ;; Registers used:
  6832 ;;		wreg, status,2
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;Total ram usage:        1 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    3
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		_PS_2_INIT
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           
  6853                           ;psect for function _INIT_PS_2_INTERRUPT
  6854  1938                     _INIT_PS_2_INTERRUPT:	
  6855                           
  6856                           ;incstack = 0
  6857                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6858                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6859  1938  0020               	movlb	0	; select bank0
  6860  1939  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6861                           
  6862                           ;PS_2.c: 155: IOCAP =0;
  6863  193A  0027               	movlb	7	; select bank7
  6864  193B  0191               	clrf	17	;volatile
  6865                           
  6866                           ;PS_2.c: 156: IOCAN =0;
  6867  193C  0192               	clrf	18	;volatile
  6868                           
  6869                           ;PS_2.c: 157: if(DATA_CLK == 0b00100000)
  6870  193D  0020               	movlb	0	; select bank0
  6871  193E  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6872  193F  3A20               	xorlw	32
  6873  1940  1D03               	skipz
  6874  1941  2945               	goto	l588
  6875                           
  6876                           ;PS_2.c: 158: {
  6877                           ;PS_2.c: 161: IOCAN |= 0b00100000;
  6878  1942  0027               	movlb	7	; select bank7
  6879  1943  1692               	bsf	18,5	;volatile
  6880                           
  6881                           ;PS_2.c: 162: }
  6882  1944  0008               	return
  6883  1945                     l588:	
  6884                           
  6885                           ;PS_2.c: 163: else
  6886                           ;PS_2.c: 164: {
  6887                           ;PS_2.c: 167: IOCAN |= 0b00010000;
  6888  1945  0027               	movlb	7	; select bank7
  6889  1946  1612               	bsf	18,4	;volatile
  6890  1947  0008               	return
  6891  1948                     __end_of_INIT_PS_2_INTERRUPT:	
  6892                           
  6893                           	psect	text11
  6894  1D62                     __ptext11:	
  6895 ;; *************** function _Keyboard_Connected *****************
  6896 ;; Defined at:
  6897 ;;		line 1141 in file "PS_2.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  i               4   65[BANK0 ] unsigned long 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      unsigned char 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;Total ram usage:        4 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    9
  6918 ;; This function calls:
  6919 ;;		_PS_2_DISABLE_INTERRUPT
  6920 ;;		_PS_2_ENABLE_INTERRUPT
  6921 ;;		_PS_2_Update
  6922 ;;		_Send_PS2
  6923 ;;		_delayUS
  6924 ;; This function is called by:
  6925 ;;		_main
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           
  6930                           ;psect for function _Keyboard_Connected
  6931  1D62                     _Keyboard_Connected:	
  6932                           
  6933                           ;PS_2.c: 1143: unsigned long i=0;
  6934                           
  6935                           ;incstack = 0
  6936                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6937  1D62  3000               	movlw	0
  6938  1D63  0020               	movlb	0	; select bank0
  6939  1D64  00E4               	movwf	Keyboard_Connected@i+3
  6940  1D65  3000               	movlw	0
  6941  1D66  00E3               	movwf	Keyboard_Connected@i+2
  6942  1D67  3000               	movlw	0
  6943  1D68  00E2               	movwf	Keyboard_Connected@i+1
  6944  1D69  3000               	movlw	0
  6945  1D6A  00E1               	movwf	Keyboard_Connected@i
  6946                           
  6947                           ;PS_2.c: 1144: ECHO =0;
  6948  1D6B  0021               	movlb	1	; select bank1
  6949  1D6C  01E9               	clrf	_ECHO^(0+128)	;volatile
  6950                           
  6951                           ;PS_2.c: 1145: Send_PS2(0xEE);
  6952  1D6D  30EE               	movlw	238
  6953  1D6E  318C  2469  319D   	fcall	_Send_PS2
  6954                           
  6955                           ;PS_2.c: 1146: PS_2_ENABLE_INTERRUPT(0b00100000);
  6956  1D71  3020               	movlw	32
  6957  1D72  3199  21C9  319D   	fcall	_PS_2_ENABLE_INTERRUPT
  6958                           
  6959                           ;PS_2.c: 1147: for(i=0;i<5000;i++)
  6960  1D75  3000               	movlw	0
  6961  1D76  0020               	movlb	0	; select bank0
  6962  1D77  00E4               	movwf	Keyboard_Connected@i+3
  6963  1D78  3000               	movlw	0
  6964  1D79  00E3               	movwf	Keyboard_Connected@i+2
  6965  1D7A  3000               	movlw	0
  6966  1D7B  00E2               	movwf	Keyboard_Connected@i+1
  6967  1D7C  3000               	movlw	0
  6968  1D7D  00E1               	movwf	Keyboard_Connected@i
  6969  1D7E  2D88               	goto	L6
  6970  1D7F                     l7187:	
  6971                           ;PS_2.c: 1152: {
  6972                           ;PS_2.c: 1153: break;
  6973                           
  6974  1D7F  3001               	movlw	1
  6975  1D80  0020               	movlb	0	; select bank0
  6976  1D81  07E1               	addwf	Keyboard_Connected@i,f
  6977  1D82  3000               	movlw	0
  6978  1D83  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6979  1D84  3000               	movlw	0
  6980  1D85  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6981  1D86  3000               	movlw	0
  6982  1D87  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6983  1D88                     L6:	
  6984  1D88  3000               	movlw	0
  6985  1D89  0264               	subwf	Keyboard_Connected@i+3,w
  6986  1D8A  1D03               	skipz
  6987  1D8B  2D96               	goto	u9995
  6988  1D8C  3000               	movlw	0
  6989  1D8D  0263               	subwf	Keyboard_Connected@i+2,w
  6990  1D8E  1D03               	skipz
  6991  1D8F  2D96               	goto	u9995
  6992  1D90  3013               	movlw	19
  6993  1D91  0262               	subwf	Keyboard_Connected@i+1,w
  6994  1D92  1D03               	skipz
  6995  1D93  2D96               	goto	u9995
  6996  1D94  3088               	movlw	136
  6997  1D95  0261               	subwf	Keyboard_Connected@i,w
  6998  1D96                     u9995:	
  6999  1D96  1803               	btfsc	3,0
  7000  1D97  2DAB               	goto	l7189
  7001                           
  7002                           ;PS_2.c: 1148: {
  7003                           ;PS_2.c: 1149: PS_2_Update();
  7004  1D98  3181  211C  319D   	fcall	_PS_2_Update
  7005                           
  7006                           ;PS_2.c: 1150: delayUS(10);
  7007  1D9B  3000               	movlw	0
  7008  1D9C  0020               	movlb	0	; select bank0
  7009  1D9D  00A8               	movwf	delayUS@US+3
  7010  1D9E  3000               	movlw	0
  7011  1D9F  00A7               	movwf	delayUS@US+2
  7012  1DA0  3000               	movlw	0
  7013  1DA1  00A6               	movwf	delayUS@US+1
  7014  1DA2  300A               	movlw	10
  7015  1DA3  00A5               	movwf	delayUS@US
  7016  1DA4  3190  2002  319D   	fcall	_delayUS
  7017                           
  7018                           ;PS_2.c: 1151: if(ECHO)
  7019  1DA7  0021               	movlb	1	; select bank1
  7020  1DA8  0869               	movf	_ECHO^(0+128),w	;volatile
  7021  1DA9  1903               	btfsc	3,2
  7022  1DAA  2D7F               	goto	l7187
  7023  1DAB                     l7189:	
  7024                           
  7025                           ;PS_2.c: 1154: }
  7026                           ;PS_2.c: 1155: }
  7027                           ;PS_2.c: 1156: PS_2_DISABLE_INTERRUPT(0b00100000);
  7028  1DAB  3020               	movlw	32
  7029  1DAC  3199  21DE  319D   	fcall	_PS_2_DISABLE_INTERRUPT
  7030                           
  7031                           ;PS_2.c: 1157: if(ECHO)
  7032  1DAF  0021               	movlb	1	; select bank1
  7033  1DB0  0869               	movf	_ECHO^(0+128),w	;volatile
  7034  1DB1  1903               	btfsc	3,2
  7035  1DB2  2DB5               	goto	l7199
  7036                           
  7037                           ;PS_2.c: 1158: {
  7038                           ;PS_2.c: 1159: return 1;
  7039  1DB3  3001               	movlw	1
  7040                           
  7041                           ;PS_2.c: 1160: }
  7042  1DB4  0008               	return
  7043  1DB5                     l7199:	
  7044                           
  7045                           ;PS_2.c: 1161: else
  7046                           ;PS_2.c: 1162: {
  7047                           ;PS_2.c: 1163: return 0;
  7048  1DB5  3000               	movlw	0
  7049  1DB6  0008               	return
  7050  1DB7                     __end_of_Keyboard_Connected:	
  7051                           
  7052                           	psect	text12
  7053  011C                     __ptext12:	
  7054 ;; *************** function _PS_2_Update *****************
  7055 ;; Defined at:
  7056 ;;		line 259 in file "PS_2.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;		None
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  buf            60    0[BANK5 ] unsigned char [60]
  7061 ;;  temp            1   64[BANK5 ] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;		None               void
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  7073 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  7075 ;;Total ram usage:       74 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    8
  7078 ;; This function calls:
  7079 ;;		_CheckSum_byte
  7080 ;;		_Decode_Scan_Code
  7081 ;;		_Decode_Scan_Code_Function
  7082 ;;		_Decode_Scan_Code_FunctionE0
  7083 ;;		_Decode_Scan_Code_Shift
  7084 ;;		_ISNUMBER
  7085 ;;		_PS_2_DISABLE_INTERRUPT
  7086 ;;		_PS_2_ENABLE_INTERRUPT
  7087 ;;		_Reverse_Byte
  7088 ;;		_Send_PS2
  7089 ;;		_SetBaud
  7090 ;;		_UART_send_break_timed
  7091 ;;		_UARTchar
  7092 ;;		_UARTstringWAIT
  7093 ;;		___lmul
  7094 ;;		_delayUS
  7095 ;;		_sprintf
  7096 ;; This function is called by:
  7097 ;;		_main
  7098 ;;		_Keyboard_Connected
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           
  7103                           ;psect for function _PS_2_Update
  7104  011C                     _PS_2_Update:	
  7105                           
  7106                           ;PS_2.c: 261: unsigned char temp =0;
  7107                           
  7108                           ;incstack = 0
  7109                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7110  011C  0025               	movlb	5	; select bank5
  7111  011D  01E0               	clrf	PS_2_Update@temp^(0+640)
  7112                           
  7113                           ;PS_2.c: 262: unsigned char buf[60];
  7114                           ;PS_2.c: 264: if(Read_Timer < 20)
  7115  011E  3000               	movlw	0
  7116  011F  0024               	movlb	4	; select bank4
  7117  0120  0225               	subwf	(_Read_Timer+1)^(0+512),w
  7118  0121  3014               	movlw	20
  7119  0122  1903               	skipnz
  7120  0123  0224               	subwf	_Read_Timer^(0+512),w
  7121  0124  1803               	skipnc
  7122  0125  292B               	goto	l6455
  7123                           
  7124                           ;PS_2.c: 265: {
  7125                           ;PS_2.c: 266: Read_Timer++;
  7126  0126  3001               	movlw	1
  7127  0127  07A4               	addwf	_Read_Timer^(0+512),f
  7128  0128  3000               	movlw	0
  7129  0129  3DA5               	addwfc	(_Read_Timer+1)^(0+512),f
  7130                           
  7131                           ;PS_2.c: 267: }
  7132  012A  292D               	goto	l6457
  7133  012B                     l6455:	
  7134                           
  7135                           ;PS_2.c: 268: else
  7136                           ;PS_2.c: 269: {
  7137                           ;PS_2.c: 270: PS_2_bits = 0;
  7138  012B  0020               	movlb	0	; select bank0
  7139  012C  01EA               	clrf	_PS_2_bits
  7140  012D                     l6457:	
  7141                           
  7142                           ;PS_2.c: 271: }
  7143                           ;PS_2.c: 273: if(Read_Timer == 20 && PS_2_bits != 0)
  7144  012D  3014               	movlw	20
  7145  012E  0024               	movlb	4	; select bank4
  7146  012F  0624               	xorwf	_Read_Timer^(0+512),w
  7147  0130  0425               	iorwf	(_Read_Timer+1)^(0+512),w
  7148  0131  1D03               	skipz
  7149  0132  0008               	return
  7150  0133  0020               	movlb	0	; select bank0
  7151  0134  086A               	movf	_PS_2_bits,w
  7152  0135  1903               	btfsc	3,2
  7153  0136  0008               	return
  7154                           
  7155                           ;PS_2.c: 274: {
  7156                           ;PS_2.c: 276: PS_2_DISABLE_INTERRUPT(0b00100000);
  7157  0137  3020               	movlw	32
  7158  0138  3199  21DE  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7159                           
  7160                           ;PS_2.c: 277: PIE1bits.RCIE = 0;
  7161  013B  0021               	movlb	1	; select bank1
  7162  013C  1291               	bcf	17,5	;volatile
  7163                           
  7164                           ;PS_2.c: 279: if(PS_2_bits >= 11)
  7165  013D  300B               	movlw	11
  7166  013E  0020               	movlb	0	; select bank0
  7167  013F  026A               	subwf	_PS_2_bits,w
  7168  0140  1C03               	skipc
  7169  0141  299C               	goto	l6479
  7170                           
  7171                           ;PS_2.c: 280: {
  7172                           ;PS_2.c: 283: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7173  0142  0024               	movlb	4	; select bank4
  7174  0143  082F               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7175  0144  0023               	movlb	3	; select bank3
  7176  0145  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7177  0146  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7178  0147  0024               	movlb	4	; select bank4
  7179  0148  082E               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7180  0149  0023               	movlb	3	; select bank3
  7181  014A  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7182  014B  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7183                           
  7184                           ;PS_2.c: 284: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7185  014C  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7186  014D  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7187  014E  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7188  014F  00AF               	movwf	??_PS_2_Update^(0+384)
  7189  0150  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7190  0151  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7191  0152  3001               	movlw	1
  7192  0153  052F               	andwf	??_PS_2_Update^(0+384),w
  7193  0154  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7194  0155  3000               	movlw	0
  7195  0156  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7196  0157  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7197  0158  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7198  0159  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7199  015A  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7200  015B  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7201  015C  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7202  015D  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7203  015E  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7204  015F  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7205  0160  30FF               	movlw	255
  7206  0161  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7207  0162  0020               	movlb	0	; select bank0
  7208  0163  00A5               	movwf	CheckSum_byte@This
  7209  0164  3000               	movlw	0
  7210  0165  0023               	movlb	3	; select bank3
  7211  0166  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7212  0167  0020               	movlb	0	; select bank0
  7213  0168  00A6               	movwf	CheckSum_byte@This+1
  7214  0169  3003               	movlw	3
  7215  016A  0023               	movlb	3	; select bank3
  7216  016B  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7217  016C  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7218  016D  0020               	movlb	0	; select bank0
  7219  016E  00A7               	movwf	CheckSum_byte@Odd_Even
  7220  016F  319A  22A9  3181   	fcall	_CheckSum_byte
  7221  0172  0023               	movlb	3	; select bank3
  7222  0173  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7223  0174  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7224  0175  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7225  0176  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7226  0177  1D03               	skipz
  7227  0178  297B               	goto	u8485
  7228  0179  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7229  017A  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7230  017B                     u8485:	
  7231  017B  1D03               	skipz
  7232  017C  2999               	goto	l6477
  7233                           
  7234                           ;PS_2.c: 285: {
  7235                           ;PS_2.c: 287: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7236  017D  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7237  017E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7238  017F  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7239  0180  00AF               	movwf	??_PS_2_Update^(0+384)
  7240  0181  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7241  0182  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7242  0183  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7243  0184  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7244  0185  30FF               	movlw	255
  7245  0186  052F               	andwf	??_PS_2_Update^(0+384),w
  7246  0187  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7247  0188  3000               	movlw	0
  7248  0189  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7249  018A  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7250                           
  7251                           ;PS_2.c: 288: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7252  018B  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7253  018C  319D  250D  3181   	fcall	_Reverse_Byte
  7254  018F  0023               	movlb	3	; select bank3
  7255  0190  00AF               	movwf	??_PS_2_Update^(0+384)
  7256  0191  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7257  0192  082F               	movf	??_PS_2_Update^(0+384),w
  7258  0193  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7259  0194  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7260  0195  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7261                           
  7262                           ;PS_2.c: 289: No_Keyboard = 0;
  7263  0196  0021               	movlb	1	; select bank1
  7264  0197  01EB               	clrf	_No_Keyboard^(0+128)
  7265                           
  7266                           ;PS_2.c: 290: }
  7267  0198  299C               	goto	l6479
  7268  0199                     l6477:	
  7269                           
  7270                           ;PS_2.c: 291: else
  7271                           ;PS_2.c: 292: {
  7272                           ;PS_2.c: 294: PS_2_Read_Data_First =0;
  7273  0199  0023               	movlb	3	; select bank3
  7274  019A  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7275  019B  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7276  019C                     l6479:	
  7277                           
  7278                           ;PS_2.c: 295: }
  7279                           ;PS_2.c: 296: }
  7280                           ;PS_2.c: 297: if(PS_2_bits >= (22))
  7281  019C  3016               	movlw	22
  7282  019D  0020               	movlb	0	; select bank0
  7283  019E  026A               	subwf	_PS_2_bits,w
  7284  019F  1C03               	skipc
  7285  01A0  29FD               	goto	l6493
  7286                           
  7287                           ;PS_2.c: 298: {
  7288                           ;PS_2.c: 301: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7289  01A1  0024               	movlb	4	; select bank4
  7290  01A2  0833               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7291  01A3  0023               	movlb	3	; select bank3
  7292  01A4  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7293  01A5  07A5               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7294  01A6  0024               	movlb	4	; select bank4
  7295  01A7  0832               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7296  01A8  0023               	movlb	3	; select bank3
  7297  01A9  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7298  01AA  07A4               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7299                           
  7300                           ;PS_2.c: 302: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7301  01AB  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7302  01AC  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7303  01AD  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7304  01AE  00AF               	movwf	??_PS_2_Update^(0+384)
  7305  01AF  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7306  01B0  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7307  01B1  3001               	movlw	1
  7308  01B2  052F               	andwf	??_PS_2_Update^(0+384),w
  7309  01B3  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7310  01B4  3000               	movlw	0
  7311  01B5  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7312  01B6  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7313  01B7  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7314  01B8  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7315  01B9  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7316  01BA  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7317  01BB  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7318  01BC  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7319  01BD  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7320  01BE  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7321  01BF  30FF               	movlw	255
  7322  01C0  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7323  01C1  0020               	movlb	0	; select bank0
  7324  01C2  00A5               	movwf	CheckSum_byte@This
  7325  01C3  3000               	movlw	0
  7326  01C4  0023               	movlb	3	; select bank3
  7327  01C5  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7328  01C6  0020               	movlb	0	; select bank0
  7329  01C7  00A6               	movwf	CheckSum_byte@This+1
  7330  01C8  3003               	movlw	3
  7331  01C9  0023               	movlb	3	; select bank3
  7332  01CA  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7333  01CB  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7334  01CC  0020               	movlb	0	; select bank0
  7335  01CD  00A7               	movwf	CheckSum_byte@Odd_Even
  7336  01CE  319A  22A9  3181   	fcall	_CheckSum_byte
  7337  01D1  0023               	movlb	3	; select bank3
  7338  01D2  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7339  01D3  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7340  01D4  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7341  01D5  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7342  01D6  1D03               	skipz
  7343  01D7  29DA               	goto	u8505
  7344  01D8  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7345  01D9  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7346  01DA                     u8505:	
  7347  01DA  1D03               	skipz
  7348  01DB  29F8               	goto	l6491
  7349                           
  7350                           ;PS_2.c: 303: {
  7351                           ;PS_2.c: 305: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7352  01DC  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7353  01DD  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7354  01DE  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7355  01DF  00AF               	movwf	??_PS_2_Update^(0+384)
  7356  01E0  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7357  01E1  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7358  01E2  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7359  01E3  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7360  01E4  30FF               	movlw	255
  7361  01E5  052F               	andwf	??_PS_2_Update^(0+384),w
  7362  01E6  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7363  01E7  3000               	movlw	0
  7364  01E8  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7365  01E9  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7366                           
  7367                           ;PS_2.c: 306: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7368  01EA  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7369  01EB  319D  250D  3181   	fcall	_Reverse_Byte
  7370  01EE  0023               	movlb	3	; select bank3
  7371  01EF  00AF               	movwf	??_PS_2_Update^(0+384)
  7372  01F0  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7373  01F1  082F               	movf	??_PS_2_Update^(0+384),w
  7374  01F2  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7375  01F3  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7376  01F4  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7377                           
  7378                           ;PS_2.c: 307: No_Keyboard = 0;
  7379  01F5  0021               	movlb	1	; select bank1
  7380  01F6  01EB               	clrf	_No_Keyboard^(0+128)
  7381                           
  7382                           ;PS_2.c: 308: }
  7383  01F7  29FD               	goto	l6493
  7384  01F8                     l6491:	
  7385                           
  7386                           ;PS_2.c: 309: else
  7387                           ;PS_2.c: 310: {
  7388                           ;PS_2.c: 312: PS_2_Read_Data_First =0;
  7389  01F8  0023               	movlb	3	; select bank3
  7390  01F9  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7391  01FA  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7392                           
  7393                           ;PS_2.c: 313: PS_2_Read_Data_Second =0;
  7394  01FB  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7395  01FC  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7396  01FD                     l6493:	
  7397                           
  7398                           ;PS_2.c: 314: }
  7399                           ;PS_2.c: 315: }
  7400                           ;PS_2.c: 316: if(PS_2_bits >= (33))
  7401  01FD  3021               	movlw	33
  7402  01FE  0020               	movlb	0	; select bank0
  7403  01FF  026A               	subwf	_PS_2_bits,w
  7404  0200  1C03               	skipc
  7405  0201  2A60               	goto	l6507
  7406                           
  7407                           ;PS_2.c: 317: {
  7408                           ;PS_2.c: 320: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7409  0202  0024               	movlb	4	; select bank4
  7410  0203  0835               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7411  0204  0023               	movlb	3	; select bank3
  7412  0205  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7413  0206  07A7               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7414  0207  0024               	movlb	4	; select bank4
  7415  0208  0834               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7416  0209  0023               	movlb	3	; select bank3
  7417  020A  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7418  020B  07A6               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7419                           
  7420                           ;PS_2.c: 321: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7421  020C  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7422  020D  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7423  020E  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7424  020F  00AF               	movwf	??_PS_2_Update^(0+384)
  7425  0210  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7426  0211  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7427  0212  3001               	movlw	1
  7428  0213  052F               	andwf	??_PS_2_Update^(0+384),w
  7429  0214  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7430  0215  3000               	movlw	0
  7431  0216  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7432  0217  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7433  0218  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7434  0219  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7435  021A  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7436  021B  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7437  021C  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7438  021D  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7439  021E  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7440  021F  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7441  0220  30FF               	movlw	255
  7442  0221  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7443  0222  0020               	movlb	0	; select bank0
  7444  0223  00A5               	movwf	CheckSum_byte@This
  7445  0224  3000               	movlw	0
  7446  0225  0023               	movlb	3	; select bank3
  7447  0226  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7448  0227  0020               	movlb	0	; select bank0
  7449  0228  00A6               	movwf	CheckSum_byte@This+1
  7450  0229  3003               	movlw	3
  7451  022A  0023               	movlb	3	; select bank3
  7452  022B  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7453  022C  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7454  022D  0020               	movlb	0	; select bank0
  7455  022E  00A7               	movwf	CheckSum_byte@Odd_Even
  7456  022F  319A  22A9  3181   	fcall	_CheckSum_byte
  7457  0232  0023               	movlb	3	; select bank3
  7458  0233  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7459  0234  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7460  0235  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7461  0236  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7462  0237  1D03               	skipz
  7463  0238  2A3B               	goto	u8525
  7464  0239  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7465  023A  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7466  023B                     u8525:	
  7467  023B  1D03               	skipz
  7468  023C  2A59               	goto	l6505
  7469                           
  7470                           ;PS_2.c: 322: {
  7471                           ;PS_2.c: 324: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7472  023D  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7473  023E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7474  023F  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7475  0240  00AF               	movwf	??_PS_2_Update^(0+384)
  7476  0241  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7477  0242  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7478  0243  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7479  0244  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7480  0245  30FF               	movlw	255
  7481  0246  052F               	andwf	??_PS_2_Update^(0+384),w
  7482  0247  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7483  0248  3000               	movlw	0
  7484  0249  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7485  024A  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7486                           
  7487                           ;PS_2.c: 325: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7488  024B  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7489  024C  319D  250D  3181   	fcall	_Reverse_Byte
  7490  024F  0023               	movlb	3	; select bank3
  7491  0250  00AF               	movwf	??_PS_2_Update^(0+384)
  7492  0251  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7493  0252  082F               	movf	??_PS_2_Update^(0+384),w
  7494  0253  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7495  0254  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7496  0255  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7497                           
  7498                           ;PS_2.c: 326: No_Keyboard = 0;
  7499  0256  0021               	movlb	1	; select bank1
  7500  0257  01EB               	clrf	_No_Keyboard^(0+128)
  7501                           
  7502                           ;PS_2.c: 327: }
  7503  0258  2A60               	goto	l6507
  7504  0259                     l6505:	
  7505                           
  7506                           ;PS_2.c: 328: else
  7507                           ;PS_2.c: 329: {
  7508                           ;PS_2.c: 331: PS_2_Read_Data_First =0;
  7509  0259  0023               	movlb	3	; select bank3
  7510  025A  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7511  025B  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7512                           
  7513                           ;PS_2.c: 332: PS_2_Read_Data_Second =0;
  7514  025C  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7515  025D  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7516                           
  7517                           ;PS_2.c: 333: PS_2_Read_Data_Third =0;
  7518  025E  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7519  025F  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7520  0260                     l6507:	
  7521                           
  7522                           ;PS_2.c: 334: }
  7523                           ;PS_2.c: 335: }
  7524                           ;PS_2.c: 336: if(PS_2_bits >= (44))
  7525  0260  302C               	movlw	44
  7526  0261  0020               	movlb	0	; select bank0
  7527  0262  026A               	subwf	_PS_2_bits,w
  7528  0263  1C03               	skipc
  7529  0264  2AC5               	goto	l6521
  7530                           
  7531                           ;PS_2.c: 337: {
  7532                           ;PS_2.c: 340: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7533  0265  0024               	movlb	4	; select bank4
  7534  0266  0831               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7535  0267  0023               	movlb	3	; select bank3
  7536  0268  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7537  0269  07A3               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7538  026A  0024               	movlb	4	; select bank4
  7539  026B  0830               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7540  026C  0023               	movlb	3	; select bank3
  7541  026D  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7542  026E  07A2               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7543                           
  7544                           ;PS_2.c: 341: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7545  026F  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7546  0270  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7547  0271  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7548  0272  00AF               	movwf	??_PS_2_Update^(0+384)
  7549  0273  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7550  0274  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7551  0275  3001               	movlw	1
  7552  0276  052F               	andwf	??_PS_2_Update^(0+384),w
  7553  0277  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7554  0278  3000               	movlw	0
  7555  0279  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7556  027A  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7557  027B  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7558  027C  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7559  027D  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7560  027E  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7561  027F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7562  0280  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7563  0281  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7564  0282  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7565  0283  30FF               	movlw	255
  7566  0284  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7567  0285  0020               	movlb	0	; select bank0
  7568  0286  00A5               	movwf	CheckSum_byte@This
  7569  0287  3000               	movlw	0
  7570  0288  0023               	movlb	3	; select bank3
  7571  0289  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7572  028A  0020               	movlb	0	; select bank0
  7573  028B  00A6               	movwf	CheckSum_byte@This+1
  7574  028C  3003               	movlw	3
  7575  028D  0023               	movlb	3	; select bank3
  7576  028E  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7577  028F  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7578  0290  0020               	movlb	0	; select bank0
  7579  0291  00A7               	movwf	CheckSum_byte@Odd_Even
  7580  0292  319A  22A9  3181   	fcall	_CheckSum_byte
  7581  0295  0023               	movlb	3	; select bank3
  7582  0296  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7583  0297  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7584  0298  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7585  0299  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7586  029A  1D03               	skipz
  7587  029B  2A9E               	goto	u8545
  7588  029C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7589  029D  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7590  029E                     u8545:	
  7591  029E  1D03               	skipz
  7592  029F  2ABC               	goto	l6519
  7593                           
  7594                           ;PS_2.c: 342: {
  7595                           ;PS_2.c: 344: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7596  02A0  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7597  02A1  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7598  02A2  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7599  02A3  00AF               	movwf	??_PS_2_Update^(0+384)
  7600  02A4  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7601  02A5  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7602  02A6  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7603  02A7  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7604  02A8  30FF               	movlw	255
  7605  02A9  052F               	andwf	??_PS_2_Update^(0+384),w
  7606  02AA  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7607  02AB  3000               	movlw	0
  7608  02AC  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7609  02AD  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7610                           
  7611                           ;PS_2.c: 345: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7612  02AE  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7613  02AF  319D  250D  3181   	fcall	_Reverse_Byte
  7614  02B2  0023               	movlb	3	; select bank3
  7615  02B3  00AF               	movwf	??_PS_2_Update^(0+384)
  7616  02B4  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7617  02B5  082F               	movf	??_PS_2_Update^(0+384),w
  7618  02B6  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7619  02B7  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7620  02B8  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7621                           
  7622                           ;PS_2.c: 346: No_Keyboard = 0;
  7623  02B9  0021               	movlb	1	; select bank1
  7624  02BA  01EB               	clrf	_No_Keyboard^(0+128)
  7625                           
  7626                           ;PS_2.c: 347: }
  7627  02BB  2AC5               	goto	l6521
  7628  02BC                     l6519:	
  7629                           
  7630                           ;PS_2.c: 348: else
  7631                           ;PS_2.c: 349: {
  7632                           ;PS_2.c: 351: PS_2_Read_Data_First =0;
  7633  02BC  0023               	movlb	3	; select bank3
  7634  02BD  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7635  02BE  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7636                           
  7637                           ;PS_2.c: 352: PS_2_Read_Data_Second =0;
  7638  02BF  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7639  02C0  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7640                           
  7641                           ;PS_2.c: 353: PS_2_Read_Data_Third =0;
  7642  02C1  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7643  02C2  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7644                           
  7645                           ;PS_2.c: 354: PS_2_Read_Data_Forth =0;
  7646  02C3  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7647  02C4  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7648  02C5                     l6521:	
  7649                           
  7650                           ;PS_2.c: 355: }
  7651                           ;PS_2.c: 356: }
  7652                           ;PS_2.c: 358: if(PS_2_Read_Data_Forth)
  7653  02C5  0023               	movlb	3	; select bank3
  7654  02C6  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7655  02C7  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7656  02C8  1903               	skipnz
  7657  02C9  2AE0               	goto	l6533
  7658                           
  7659                           ;PS_2.c: 359: {
  7660                           ;PS_2.c: 360: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7661                           ;PS_2.c: 361: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7662  02CA  30F0               	movlw	240
  7663  02CB  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7664  02CC  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7665  02CD  1903               	skipnz
  7666  02CE  2C15               	goto	l6665
  7667  02CF  30F0               	movlw	240
  7668  02D0  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7669  02D1  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7670  02D2  1903               	skipnz
  7671  02D3  2C15               	goto	l6665
  7672  02D4  30F0               	movlw	240
  7673  02D5  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7674  02D6  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7675  02D7  1903               	skipnz
  7676  02D8  2C15               	goto	l6665
  7677  02D9  30F0               	movlw	240
  7678  02DA  0622               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7679  02DB  0423               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7680  02DC  1903               	skipnz
  7681  02DD  2C15               	goto	l6665
  7682                           
  7683                           ;PS_2.c: 362: {
  7684                           ;PS_2.c: 364: __nop();
  7685  02DE  0000               	nop
  7686                           
  7687                           ;PS_2.c: 365: }
  7688                           ;PS_2.c: 366: }
  7689  02DF  2C15               	goto	l6665
  7690  02E0                     l6533:	
  7691                           
  7692                           ;PS_2.c: 367: else if(PS_2_Read_Data_Third)
  7693  02E0  0023               	movlb	3	; select bank3
  7694  02E1  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7695  02E2  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7696  02E3  1903               	skipnz
  7697  02E4  2B35               	goto	l6569
  7698                           
  7699                           ;PS_2.c: 368: {
  7700                           ;PS_2.c: 370: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7701                           ;PS_2.c: 371: PS_2_Read_Data_First != 0xE0 &&
  7702                           ;PS_2.c: 372: PS_2_Read_Data_Second != 0xE0 &&
  7703                           ;PS_2.c: 373: PS_2_Read_Data_Third != 0xE0)
  7704  02E5  30F0               	movlw	240
  7705  02E6  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7706  02E7  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7707  02E8  1D03               	skipz
  7708  02E9  2B10               	goto	l6553
  7709  02EA  30F0               	movlw	240
  7710  02EB  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7711  02EC  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7712  02ED  1903               	skipnz
  7713  02EE  2B10               	goto	l6553
  7714  02EF  30E0               	movlw	224
  7715  02F0  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7716  02F1  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7717  02F2  1903               	skipnz
  7718  02F3  2B10               	goto	l6553
  7719  02F4  30E0               	movlw	224
  7720  02F5  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7721  02F6  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7722  02F7  1903               	skipnz
  7723  02F8  2B10               	goto	l6553
  7724  02F9  30E0               	movlw	224
  7725  02FA  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7726  02FB  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7727  02FC  1903               	skipnz
  7728  02FD  2B10               	goto	l6553
  7729                           
  7730                           ;PS_2.c: 374: {
  7731                           ;PS_2.c: 376: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7732  02FE  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7733  02FF  3199  21B6  3181   	fcall	_Decode_Scan_Code_Shift
  7734  0302  3A00               	xorlw	0
  7735  0303  1903               	skipnz
  7736  0304  2B10               	goto	l6553
  7737                           
  7738                           ;PS_2.c: 377: {
  7739                           ;PS_2.c: 379: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7740  0305  0023               	movlb	3	; select bank3
  7741  0306  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7742  0307  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7743  0308  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7744  0309  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7745  030A  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7746  030B  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7747                           
  7748                           ;PS_2.c: 380: PS_2_Read_Data_Second = 0;
  7749  030C  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7750  030D  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7751                           
  7752                           ;PS_2.c: 381: PS_2_Read_Data_Third = 0;
  7753  030E  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7754  030F  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7755  0310                     l6553:	
  7756                           
  7757                           ;PS_2.c: 382: }
  7758                           ;PS_2.c: 383: }
  7759                           ;PS_2.c: 384: if(PS_2_Read_Data_First == 0xE0)
  7760  0310  30E0               	movlw	224
  7761  0311  0023               	movlb	3	; select bank3
  7762  0312  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7763  0313  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7764  0314  1D03               	skipz
  7765  0315  2C15               	goto	l6665
  7766                           
  7767                           ;PS_2.c: 385: {
  7768                           ;PS_2.c: 386: if(PS_2_Read_Data_Second == 0xF0)
  7769  0316  30F0               	movlw	240
  7770  0317  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7771  0318  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7772  0319  1D03               	skipz
  7773  031A  2C15               	goto	l6665
  7774                           
  7775                           ;PS_2.c: 387: {
  7776                           ;PS_2.c: 388: if(PS_2_Read_Data_Third == 0x11 )
  7777  031B  3011               	movlw	17
  7778  031C  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7779  031D  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7780  031E  1D03               	skipz
  7781  031F  2B23               	goto	l6561
  7782                           
  7783                           ;PS_2.c: 389: {
  7784                           ;PS_2.c: 390: LALT = 0;
  7785  0320  0022               	movlb	2	; select bank2
  7786  0321  01E7               	clrf	_LALT^(0+256)
  7787                           
  7788                           ;PS_2.c: 391: }
  7789  0322  2C15               	goto	l6665
  7790  0323                     l6561:	
  7791                           
  7792                           ;PS_2.c: 392: else if(PS_2_Read_Data_Third == 0x14 )
  7793  0323  3014               	movlw	20
  7794  0324  0023               	movlb	3	; select bank3
  7795  0325  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7796  0326  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7797  0327  1D03               	skipz
  7798  0328  2B2C               	goto	l6565
  7799                           
  7800                           ;PS_2.c: 393: {
  7801                           ;PS_2.c: 394: LControl = 0;
  7802  0329  0022               	movlb	2	; select bank2
  7803  032A  01E8               	clrf	_LControl^(0+256)
  7804                           
  7805                           ;PS_2.c: 395: }
  7806  032B  2C15               	goto	l6665
  7807  032C                     l6565:	
  7808                           
  7809                           ;PS_2.c: 396: else if(PS_2_Read_Data_Third == 0x71 )
  7810  032C  3071               	movlw	113
  7811  032D  0023               	movlb	3	; select bank3
  7812  032E  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7813  032F  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7814  0330  1D03               	skipz
  7815  0331  2C15               	goto	l6665
  7816                           
  7817                           ;PS_2.c: 397: {
  7818                           ;PS_2.c: 398: Delete = 0;
  7819  0332  0022               	movlb	2	; select bank2
  7820  0333  01E6               	clrf	_Delete^(0+256)
  7821                           
  7822                           ;PS_2.c: 399: }
  7823                           ;PS_2.c: 400: }
  7824                           ;PS_2.c: 401: }
  7825                           ;PS_2.c: 402: }
  7826  0334  2C15               	goto	l6665
  7827  0335                     l6569:	
  7828                           
  7829                           ;PS_2.c: 403: else if(PS_2_Read_Data_Second)
  7830  0335  0023               	movlb	3	; select bank3
  7831  0336  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7832  0337  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7833  0338  1903               	skipnz
  7834  0339  2C15               	goto	l6665
  7835                           
  7836                           ;PS_2.c: 404: {
  7837                           ;PS_2.c: 406: if(PS_2_Read_Data_First == 0xF0)
  7838  033A  30F0               	movlw	240
  7839  033B  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7840  033C  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7841  033D  1D03               	skipz
  7842  033E  2BBA               	goto	l6633
  7843                           
  7844                           ;PS_2.c: 407: {
  7845                           ;PS_2.c: 409: if(PS_2_Read_Data_Second == 0x12)
  7846  033F  3012               	movlw	18
  7847  0340  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7848  0341  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7849  0342  1D03               	skipz
  7850  0343  2B46               	goto	l6577
  7851                           
  7852                           ;PS_2.c: 410: {
  7853                           ;PS_2.c: 411: Right_Shift_Key =0;
  7854  0344  01AD               	clrf	_Right_Shift_Key^(0+384)
  7855                           
  7856                           ;PS_2.c: 412: }
  7857  0345  2B5B               	goto	l6589
  7858  0346                     l6577:	
  7859                           
  7860                           ;PS_2.c: 413: else if(PS_2_Read_Data_Second == 0x59)
  7861  0346  3059               	movlw	89
  7862  0347  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7863  0348  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7864  0349  1D03               	skipz
  7865  034A  2B4D               	goto	l6581
  7866                           
  7867                           ;PS_2.c: 414: {
  7868                           ;PS_2.c: 415: Left_Shift_Key =0;
  7869  034B  01AA               	clrf	_Left_Shift_Key^(0+384)
  7870                           
  7871                           ;PS_2.c: 416: }
  7872  034C  2B5B               	goto	l6589
  7873  034D                     l6581:	
  7874                           
  7875                           ;PS_2.c: 417: else if(PS_2_Read_Data_Second == 0x14)
  7876  034D  3014               	movlw	20
  7877  034E  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7878  034F  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7879  0350  1D03               	skipz
  7880  0351  2B55               	goto	l6585
  7881                           
  7882                           ;PS_2.c: 418: {
  7883                           ;PS_2.c: 419: RControl =0;
  7884  0352  0022               	movlb	2	; select bank2
  7885  0353  01EA               	clrf	_RControl^(0+256)
  7886                           
  7887                           ;PS_2.c: 420: }
  7888  0354  2B5B               	goto	l6589
  7889  0355                     l6585:	
  7890                           
  7891                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x11 )
  7892  0355  3011               	movlw	17
  7893  0356  0023               	movlb	3	; select bank3
  7894  0357  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7895  0358  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7896  0359  1903               	btfsc	3,2
  7897                           
  7898                           ;PS_2.c: 422: {
  7899                           ;PS_2.c: 423: RALT =0;
  7900  035A  01AC               	clrf	_RALT^(0+384)
  7901  035B                     l6589:	
  7902                           
  7903                           ;PS_2.c: 424: }
  7904                           ;PS_2.c: 425: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7905  035B  3059               	movlw	89
  7906  035C  0023               	movlb	3	; select bank3
  7907  035D  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7908  035E  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7909  035F  1903               	skipnz
  7910  0360  2B66               	goto	l6593
  7911  0361  3012               	movlw	18
  7912  0362  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7913  0363  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7914  0364  1D03               	skipz
  7915  0365  2BB2               	goto	l6629
  7916  0366                     l6593:	
  7917                           
  7918                           ;PS_2.c: 426: {
  7919                           ;PS_2.c: 427: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7920  0366  08AD               	movf	_Right_Shift_Key^(0+384),f
  7921  0367  1D03               	skipz
  7922  0368  2C15               	goto	l6665
  7923  0369  08AA               	movf	_Left_Shift_Key^(0+384),f
  7924  036A  1D03               	skipz
  7925  036B  2C15               	goto	l6665
  7926                           
  7927                           ;PS_2.c: 428: {
  7928                           ;PS_2.c: 429: if(!Send_PS2(0xED))
  7929  036C  30ED               	movlw	237
  7930  036D  318C  2469  3181   	fcall	_Send_PS2
  7931  0370  3800               	iorlw	0
  7932  0371  1D03               	skipz
  7933  0372  2B7C               	goto	l6603
  7934                           
  7935                           ;PS_2.c: 430: {
  7936                           ;PS_2.c: 431: if(!Send_PS2(0x00))
  7937  0373  3000               	movlw	0
  7938  0374  318C  2469  3181   	fcall	_Send_PS2
  7939  0377  3800               	iorlw	0
  7940  0378  1D03               	skipz
  7941  0379  2B7C               	goto	l6603
  7942                           
  7943                           ;PS_2.c: 432: {
  7944                           ;PS_2.c: 433: Shift_Key = 0;
  7945  037A  0023               	movlb	3	; select bank3
  7946  037B  01AE               	clrf	_Shift_Key^(0+384)
  7947  037C                     l6603:	
  7948                           
  7949                           ;PS_2.c: 434: }
  7950                           ;PS_2.c: 435: }
  7951                           ;PS_2.c: 436: if(Caps_Lock)
  7952  037C  0023               	movlb	3	; select bank3
  7953  037D  0829               	movf	_Caps_Lock^(0+384),w
  7954  037E  1903               	btfsc	3,2
  7955  037F  2B99               	goto	l6617
  7956                           
  7957                           ;PS_2.c: 437: {
  7958                           ;PS_2.c: 438: CapsCount=0;
  7959  0380  01A8               	clrf	_CapsCount^(0+384)
  7960  0381                     l6615:	
  7961                           ;PS_2.c: 439: while(CapsCount<10)
  7962                           
  7963  0381  300A               	movlw	10
  7964  0382  0228               	subwf	_CapsCount^(0+384),w
  7965  0383  1803               	btfsc	3,0
  7966  0384  2C15               	goto	l6665
  7967                           
  7968                           ;PS_2.c: 440: {
  7969                           ;PS_2.c: 441: if(!Send_PS2(0xED))
  7970  0385  30ED               	movlw	237
  7971  0386  318C  2469  3181   	fcall	_Send_PS2
  7972  0389  3800               	iorlw	0
  7973  038A  1D03               	skipz
  7974  038B  2B93               	goto	l6613
  7975                           
  7976                           ;PS_2.c: 442: {
  7977                           ;PS_2.c: 443: if(!Send_PS2(0x04))
  7978  038C  3004               	movlw	4
  7979  038D  318C  2469  3181   	fcall	_Send_PS2
  7980  0390  3800               	iorlw	0
  7981  0391  1903               	btfsc	3,2
  7982  0392  2C15               	goto	l6665
  7983  0393                     l6613:	
  7984                           ;PS_2.c: 444: {
  7985                           ;PS_2.c: 445: break;
  7986                           
  7987                           
  7988                           ;PS_2.c: 446: }
  7989                           ;PS_2.c: 447: }
  7990                           ;PS_2.c: 448: CapsCount++;
  7991  0393  3001               	movlw	1
  7992  0394  0023               	movlb	3	; select bank3
  7993  0395  00AF               	movwf	??_PS_2_Update^(0+384)
  7994  0396  082F               	movf	??_PS_2_Update^(0+384),w
  7995  0397  07A8               	addwf	_CapsCount^(0+384),f
  7996  0398  2B81               	goto	l6615
  7997  0399                     l6617:	
  7998                           ;PS_2.c: 449: }
  7999                           ;PS_2.c: 450: }
  8000                           
  8001                           
  8002                           ;PS_2.c: 451: else
  8003                           ;PS_2.c: 452: {
  8004                           ;PS_2.c: 453: CapsCount=0;
  8005  0399  01A8               	clrf	_CapsCount^(0+384)
  8006  039A                     l6627:	
  8007                           ;PS_2.c: 454: while(CapsCount<10)
  8008                           
  8009  039A  300A               	movlw	10
  8010  039B  0228               	subwf	_CapsCount^(0+384),w
  8011  039C  1803               	btfsc	3,0
  8012  039D  2C15               	goto	l6665
  8013                           
  8014                           ;PS_2.c: 455: {
  8015                           ;PS_2.c: 456: if(!Send_PS2(0xED))
  8016  039E  30ED               	movlw	237
  8017  039F  318C  2469  3181   	fcall	_Send_PS2
  8018  03A2  3800               	iorlw	0
  8019  03A3  1D03               	skipz
  8020  03A4  2BAC               	goto	l6625
  8021                           
  8022                           ;PS_2.c: 457: {
  8023                           ;PS_2.c: 458: if(!Send_PS2(0x00))
  8024  03A5  3000               	movlw	0
  8025  03A6  318C  2469  3181   	fcall	_Send_PS2
  8026  03A9  3800               	iorlw	0
  8027  03AA  1903               	btfsc	3,2
  8028  03AB  2C15               	goto	l6665
  8029  03AC                     l6625:	
  8030                           ;PS_2.c: 459: {
  8031                           ;PS_2.c: 460: break;
  8032                           
  8033                           
  8034                           ;PS_2.c: 461: }
  8035                           ;PS_2.c: 462: }
  8036                           ;PS_2.c: 463: CapsCount++;
  8037  03AC  3001               	movlw	1
  8038  03AD  0023               	movlb	3	; select bank3
  8039  03AE  00AF               	movwf	??_PS_2_Update^(0+384)
  8040  03AF  082F               	movf	??_PS_2_Update^(0+384),w
  8041  03B0  07A8               	addwf	_CapsCount^(0+384),f
  8042  03B1  2B9A               	goto	l6627
  8043  03B2                     l6629:	
  8044                           ;PS_2.c: 464: }
  8045                           ;PS_2.c: 465: }
  8046                           ;PS_2.c: 466: }
  8047                           ;PS_2.c: 467: }
  8048                           
  8049                           
  8050                           ;PS_2.c: 468: else if(PS_2_Read_Data_Second == 0x58)
  8051  03B2  3058               	movlw	88
  8052  03B3  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8053  03B4  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8054  03B5  1D03               	skipz
  8055  03B6  2C15               	goto	l6665
  8056                           
  8057                           ;PS_2.c: 469: {
  8058                           ;PS_2.c: 470: Caps_Lock_Key = 0;
  8059  03B7  0022               	movlb	2	; select bank2
  8060  03B8  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8061                           
  8062                           ;PS_2.c: 471: }
  8063                           ;PS_2.c: 472: }
  8064  03B9  2C15               	goto	l6665
  8065  03BA                     l6633:	
  8066                           
  8067                           ;PS_2.c: 473: else if(PS_2_Read_Data_First == 0xE0)
  8068  03BA  30E0               	movlw	224
  8069  03BB  0023               	movlb	3	; select bank3
  8070  03BC  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8071  03BD  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8072  03BE  1D03               	skipz
  8073  03BF  2C15               	goto	l6665
  8074                           
  8075                           ;PS_2.c: 474: {
  8076                           ;PS_2.c: 476: if(PS_2_Read_Data_Second == 0x11 )
  8077  03C0  3011               	movlw	17
  8078  03C1  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8079  03C2  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8080  03C3  1D03               	skipz
  8081  03C4  2BC9               	goto	l6639
  8082                           
  8083                           ;PS_2.c: 477: {
  8084                           ;PS_2.c: 478: LALT = 1;
  8085  03C5  0022               	movlb	2	; select bank2
  8086  03C6  01E7               	clrf	_LALT^(0+256)
  8087  03C7  0AE7               	incf	_LALT^(0+256),f
  8088                           
  8089                           ;PS_2.c: 479: }
  8090  03C8  2BDC               	goto	l673
  8091  03C9                     l6639:	
  8092                           
  8093                           ;PS_2.c: 480: else if(PS_2_Read_Data_Second == 0x14 )
  8094  03C9  3014               	movlw	20
  8095  03CA  0023               	movlb	3	; select bank3
  8096  03CB  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8097  03CC  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8098  03CD  1D03               	skipz
  8099  03CE  2BD3               	goto	l6643
  8100                           
  8101                           ;PS_2.c: 481: {
  8102                           ;PS_2.c: 482: LControl = 1;
  8103  03CF  0022               	movlb	2	; select bank2
  8104  03D0  01E8               	clrf	_LControl^(0+256)
  8105  03D1  0AE8               	incf	_LControl^(0+256),f
  8106                           
  8107                           ;PS_2.c: 483: }
  8108  03D2  2BDC               	goto	l673
  8109  03D3                     l6643:	
  8110                           
  8111                           ;PS_2.c: 484: else if(PS_2_Read_Data_Second == 0x71 )
  8112  03D3  3071               	movlw	113
  8113  03D4  0023               	movlb	3	; select bank3
  8114  03D5  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8115  03D6  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8116  03D7  1D03               	skipz
  8117  03D8  2BDC               	goto	l673
  8118                           
  8119                           ;PS_2.c: 485: {
  8120                           ;PS_2.c: 486: Delete = 1;
  8121  03D9  0022               	movlb	2	; select bank2
  8122  03DA  01E6               	clrf	_Delete^(0+256)
  8123  03DB  0AE6               	incf	_Delete^(0+256),f
  8124  03DC                     l673:	
  8125                           
  8126                           ;PS_2.c: 487: }
  8127                           ;PS_2.c: 488: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8128  03DC  0025               	movlb	5	; select bank5
  8129  03DD  01DC               	clrf	_PS_2_Update$824^(0+640)
  8130  03DE  0ADC               	incf	_PS_2_Update$824^(0+640),f
  8131  03DF  0022               	movlb	2	; select bank2
  8132  03E0  08E7               	movf	_LALT^(0+256),f
  8133  03E1  1D03               	skipz
  8134  03E2  2BE9               	goto	l6653
  8135  03E3  0023               	movlb	3	; select bank3
  8136  03E4  08AC               	movf	_RALT^(0+384),f
  8137  03E5  1D03               	skipz
  8138  03E6  2BE9               	goto	l6653
  8139  03E7  0025               	movlb	5	; select bank5
  8140  03E8  01DC               	clrf	_PS_2_Update$824^(0+640)
  8141  03E9                     l6653:	
  8142  03E9  0025               	movlb	5	; select bank5
  8143  03EA  01DD               	clrf	_PS_2_Update$825^(0+640)
  8144  03EB  0ADD               	incf	_PS_2_Update$825^(0+640),f
  8145  03EC  0022               	movlb	2	; select bank2
  8146  03ED  08EA               	movf	_RControl^(0+256),f
  8147  03EE  1D03               	skipz
  8148  03EF  2BF5               	goto	l6661
  8149  03F0  08E8               	movf	_LControl^(0+256),f
  8150  03F1  1D03               	skipz
  8151  03F2  2BF5               	goto	l6661
  8152  03F3  0025               	movlb	5	; select bank5
  8153  03F4  01DD               	clrf	_PS_2_Update$825^(0+640)
  8154  03F5                     l6661:	
  8155  03F5  0022               	movlb	2	; select bank2
  8156  03F6  0866               	movf	_Delete^(0+256),w
  8157  03F7  0023               	movlb	3	; select bank3
  8158  03F8  00AF               	movwf	??_PS_2_Update^(0+384)
  8159  03F9  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8160  03FA  0025               	movlb	5	; select bank5
  8161  03FB  085D               	movf	_PS_2_Update$825^(0+640),w
  8162  03FC  075C               	addwf	_PS_2_Update$824^(0+640),w
  8163  03FD  0023               	movlb	3	; select bank3
  8164  03FE  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8165  03FF  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8166  0400  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8167  0401  082F               	movf	??_PS_2_Update^(0+384),w
  8168  0402  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8169  0403  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8170  0404  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8171  0405  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8172  0406  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8173  0407  3003               	movlw	3
  8174  0408  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8175  0409  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8176  040A  1903               	skipnz
  8177  040B  2C15               	goto	l6665
  8178                           
  8179                           ;PS_2.c: 489: {
  8180                           ;PS_2.c: 491: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8181  040C  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  8182  040D  3199  21A3  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8183  0410  0023               	movlb	3	; select bank3
  8184  0411  00AF               	movwf	??_PS_2_Update^(0+384)
  8185  0412  082F               	movf	??_PS_2_Update^(0+384),w
  8186  0413  0025               	movlb	5	; select bank5
  8187  0414  00E0               	movwf	PS_2_Update@temp^(0+640)
  8188  0415                     l6665:	
  8189                           
  8190                           ;PS_2.c: 492: }
  8191                           ;PS_2.c: 493: }
  8192                           ;PS_2.c: 494: }
  8193                           ;PS_2.c: 495: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8194                           ;PS_2.c: 496: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8195  0415  0023               	movlb	3	; select bank3
  8196  0416  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8197  0417  0420               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8198  0418  1903               	skipnz
  8199  0419  2D6E               	goto	l6815
  8200  041A  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8201  041B  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8202  041C  1D03               	skipz
  8203  041D  2D6E               	goto	l6815
  8204  041E  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8205  041F  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8206  0420  1D03               	skipz
  8207  0421  2D6E               	goto	l6815
  8208  0422  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8209  0423  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8210  0424  1D03               	skipz
  8211  0425  2D6E               	goto	l6815
  8212                           
  8213                           ;PS_2.c: 497: {
  8214                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x12)
  8215  0426  3012               	movlw	18
  8216  0427  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8217  0428  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8218  0429  1D03               	skipz
  8219  042A  2C2E               	goto	l6677
  8220                           
  8221                           ;PS_2.c: 500: {
  8222                           ;PS_2.c: 501: Right_Shift_Key = 1;
  8223  042B  01AD               	clrf	_Right_Shift_Key^(0+384)
  8224  042C  0AAD               	incf	_Right_Shift_Key^(0+384),f
  8225                           
  8226                           ;PS_2.c: 502: }
  8227  042D  2C35               	goto	l6681
  8228  042E                     l6677:	
  8229                           
  8230                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x59)
  8231  042E  3059               	movlw	89
  8232  042F  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8233  0430  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8234  0431  1D03               	skipz
  8235  0432  2C35               	goto	l6681
  8236                           
  8237                           ;PS_2.c: 504: {
  8238                           ;PS_2.c: 505: Left_Shift_Key = 1;
  8239  0433  01AA               	clrf	_Left_Shift_Key^(0+384)
  8240  0434  0AAA               	incf	_Left_Shift_Key^(0+384),f
  8241  0435                     l6681:	
  8242                           
  8243                           ;PS_2.c: 506: }
  8244                           ;PS_2.c: 507: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8245  0435  082D               	movf	_Right_Shift_Key^(0+384),w
  8246  0436  3A01               	xorlw	1
  8247  0437  1D03               	skipz
  8248  0438  2C3D               	goto	l6685
  8249  0439  0022               	movlb	2	; select bank2
  8250  043A  086B               	movf	_Right_Shift_Key_old^(0+256),w
  8251  043B  1903               	btfsc	3,2
  8252  043C  2C46               	goto	l6689
  8253  043D                     l6685:	
  8254  043D  0023               	movlb	3	; select bank3
  8255  043E  082A               	movf	_Left_Shift_Key^(0+384),w
  8256  043F  3A01               	xorlw	1
  8257  0440  1D03               	skipz
  8258  0441  2C86               	goto	l6717
  8259  0442  0022               	movlb	2	; select bank2
  8260  0443  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8261  0444  1D03               	skipz
  8262  0445  2C86               	goto	l6717
  8263  0446                     l6689:	
  8264                           
  8265                           ;PS_2.c: 508: {
  8266                           ;PS_2.c: 510: if(!Send_PS2(0xED))
  8267  0446  30ED               	movlw	237
  8268  0447  318C  2469  3181   	fcall	_Send_PS2
  8269  044A  3800               	iorlw	0
  8270  044B  1D03               	skipz
  8271  044C  2C86               	goto	l6717
  8272                           
  8273                           ;PS_2.c: 511: {
  8274                           ;PS_2.c: 512: if(Caps_Lock)
  8275  044D  0023               	movlb	3	; select bank3
  8276  044E  0829               	movf	_Caps_Lock^(0+384),w
  8277  044F  1903               	btfsc	3,2
  8278  0450  2C6A               	goto	l6705
  8279                           
  8280                           ;PS_2.c: 513: {
  8281                           ;PS_2.c: 514: CapsCount=0;
  8282  0451  01A8               	clrf	_CapsCount^(0+384)
  8283  0452                     l6703:	
  8284                           ;PS_2.c: 515: while(CapsCount<10)
  8285                           
  8286  0452  300A               	movlw	10
  8287  0453  0228               	subwf	_CapsCount^(0+384),w
  8288  0454  1803               	btfsc	3,0
  8289  0455  2C86               	goto	l6717
  8290                           
  8291                           ;PS_2.c: 516: {
  8292                           ;PS_2.c: 517: if(!Send_PS2(0xED))
  8293  0456  30ED               	movlw	237
  8294  0457  318C  2469  3181   	fcall	_Send_PS2
  8295  045A  3800               	iorlw	0
  8296  045B  1D03               	skipz
  8297  045C  2C64               	goto	l6701
  8298                           
  8299                           ;PS_2.c: 518: {
  8300                           ;PS_2.c: 519: if(!Send_PS2(0x05))
  8301  045D  3005               	movlw	5
  8302  045E  318C  2469  3181   	fcall	_Send_PS2
  8303  0461  3800               	iorlw	0
  8304  0462  1903               	btfsc	3,2
  8305  0463  2C83               	goto	l6711
  8306  0464                     l6701:	
  8307                           ;PS_2.c: 522: break;
  8308                           
  8309                           ;PS_2.c: 520: {
  8310                           ;PS_2.c: 521: Shift_Key = 1;
  8311                           
  8312                           
  8313                           ;PS_2.c: 523: }
  8314                           ;PS_2.c: 524: }
  8315                           ;PS_2.c: 525: CapsCount++;
  8316  0464  3001               	movlw	1
  8317  0465  0023               	movlb	3	; select bank3
  8318  0466  00AF               	movwf	??_PS_2_Update^(0+384)
  8319  0467  082F               	movf	??_PS_2_Update^(0+384),w
  8320  0468  07A8               	addwf	_CapsCount^(0+384),f
  8321  0469  2C52               	goto	l6703
  8322  046A                     l6705:	
  8323                           ;PS_2.c: 526: }
  8324                           ;PS_2.c: 527: }
  8325                           
  8326                           
  8327                           ;PS_2.c: 528: else
  8328                           ;PS_2.c: 529: {
  8329                           ;PS_2.c: 530: CapsCount=0;
  8330  046A  01A8               	clrf	_CapsCount^(0+384)
  8331                           
  8332                           ;PS_2.c: 531: while(CapsCount<10)
  8333  046B  2C71               	goto	l6715
  8334  046C                     l6713:	
  8335                           ;PS_2.c: 538: break;
  8336                           
  8337                           
  8338                           ;PS_2.c: 539: }
  8339                           ;PS_2.c: 540: }
  8340                           ;PS_2.c: 541: CapsCount++;
  8341  046C  3001               	movlw	1
  8342  046D  0023               	movlb	3	; select bank3
  8343  046E  00AF               	movwf	??_PS_2_Update^(0+384)
  8344  046F  082F               	movf	??_PS_2_Update^(0+384),w
  8345  0470  07A8               	addwf	_CapsCount^(0+384),f
  8346  0471                     l6715:	
  8347  0471  300A               	movlw	10
  8348  0472  0228               	subwf	_CapsCount^(0+384),w
  8349  0473  1803               	btfsc	3,0
  8350  0474  2C86               	goto	l6717
  8351                           
  8352                           ;PS_2.c: 532: {
  8353                           ;PS_2.c: 533: if(!Send_PS2(0xED))
  8354  0475  30ED               	movlw	237
  8355  0476  318C  2469  3181   	fcall	_Send_PS2
  8356  0479  3800               	iorlw	0
  8357  047A  1D03               	skipz
  8358  047B  2C6C               	goto	l6713
  8359                           
  8360                           ;PS_2.c: 534: {
  8361                           ;PS_2.c: 535: if(!Send_PS2(0x01))
  8362  047C  3001               	movlw	1
  8363  047D  318C  2469  3181   	fcall	_Send_PS2
  8364  0480  3800               	iorlw	0
  8365  0481  1D03               	skipz
  8366  0482  2C6C               	goto	l6713
  8367  0483                     l6711:	
  8368                           
  8369                           ;PS_2.c: 536: {
  8370                           ;PS_2.c: 537: Shift_Key = 1;
  8371  0483  0023               	movlb	3	; select bank3
  8372  0484  01AE               	clrf	_Shift_Key^(0+384)
  8373  0485  0AAE               	incf	_Shift_Key^(0+384),f
  8374  0486                     l6717:	
  8375                           
  8376                           ;PS_2.c: 542: }
  8377                           ;PS_2.c: 543: }
  8378                           ;PS_2.c: 544: }
  8379                           ;PS_2.c: 545: }
  8380                           ;PS_2.c: 546: if(PS_2_Read_Data_First == 0x14 )
  8381  0486  3014               	movlw	20
  8382  0487  0023               	movlb	3	; select bank3
  8383  0488  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8384  0489  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8385  048A  1D03               	skipz
  8386  048B  2C90               	goto	l6721
  8387                           
  8388                           ;PS_2.c: 547: {
  8389                           ;PS_2.c: 548: RControl = 1;
  8390  048C  0022               	movlb	2	; select bank2
  8391  048D  01EA               	clrf	_RControl^(0+256)
  8392  048E  0AEA               	incf	_RControl^(0+256),f
  8393                           
  8394                           ;PS_2.c: 549: }
  8395  048F  2D6E               	goto	l6815
  8396  0490                     l6721:	
  8397                           
  8398                           ;PS_2.c: 550: else if(PS_2_Read_Data_First == 0x11 )
  8399  0490  3011               	movlw	17
  8400  0491  0023               	movlb	3	; select bank3
  8401  0492  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8402  0493  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8403  0494  1D03               	skipz
  8404  0495  2C99               	goto	l6725
  8405                           
  8406                           ;PS_2.c: 551: {
  8407                           ;PS_2.c: 552: RALT = 1;
  8408  0496  01AC               	clrf	_RALT^(0+384)
  8409  0497  0AAC               	incf	_RALT^(0+384),f
  8410                           
  8411                           ;PS_2.c: 553: }
  8412  0498  2D6E               	goto	l6815
  8413  0499                     l6725:	
  8414                           
  8415                           ;PS_2.c: 554: else if(PS_2_Read_Data_First == 0xEE )
  8416  0499  30EE               	movlw	238
  8417  049A  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8418  049B  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8419  049C  1D03               	skipz
  8420  049D  2CA4               	goto	l6729
  8421                           
  8422                           ;PS_2.c: 555: {
  8423                           ;PS_2.c: 556: ECHO = 1;
  8424  049E  3001               	movlw	1
  8425  049F  00AF               	movwf	??_PS_2_Update^(0+384)
  8426  04A0  082F               	movf	??_PS_2_Update^(0+384),w
  8427  04A1  0021               	movlb	1	; select bank1
  8428  04A2  00E9               	movwf	_ECHO^(0+128)	;volatile
  8429                           
  8430                           ;PS_2.c: 557: }
  8431  04A3  2D6E               	goto	l6815
  8432  04A4                     l6729:	
  8433                           
  8434                           ;PS_2.c: 558: else if(PS_2_Read_Data_First == 0x58)
  8435  04A4  3058               	movlw	88
  8436  04A5  0023               	movlb	3	; select bank3
  8437  04A6  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8438  04A7  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8439  04A8  1D03               	skipz
  8440  04A9  2D25               	goto	l6789
  8441                           
  8442                           ;PS_2.c: 559: {
  8443                           ;PS_2.c: 560: Caps_Lock_Key = 1;
  8444  04AA  0022               	movlb	2	; select bank2
  8445  04AB  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8446  04AC  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8447                           
  8448                           ;PS_2.c: 561: if(Caps_Lock_Key_old == 0)
  8449  04AD  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8450  04AE  1D03               	skipz
  8451  04AF  2D6E               	goto	l6815
  8452                           
  8453                           ;PS_2.c: 562: {
  8454                           ;PS_2.c: 563: if(Caps_Lock)
  8455  04B0  0023               	movlb	3	; select bank3
  8456  04B1  0829               	movf	_Caps_Lock^(0+384),w
  8457  04B2  1903               	btfsc	3,2
  8458  04B3  2CEC               	goto	l6763
  8459                           
  8460                           ;PS_2.c: 564: {
  8461                           ;PS_2.c: 565: if(Shift_Key)
  8462  04B4  082E               	movf	_Shift_Key^(0+384),w
  8463  04B5  1903               	btfsc	3,2
  8464  04B6  2CD0               	goto	l6751
  8465                           
  8466                           ;PS_2.c: 566: {
  8467                           ;PS_2.c: 567: CapsCount=0;
  8468  04B7  01A8               	clrf	_CapsCount^(0+384)
  8469  04B8                     l6749:	
  8470                           ;PS_2.c: 568: while(CapsCount<10)
  8471                           
  8472  04B8  300A               	movlw	10
  8473  04B9  0228               	subwf	_CapsCount^(0+384),w
  8474  04BA  1803               	btfsc	3,0
  8475  04BB  2D6E               	goto	l6815
  8476                           
  8477                           ;PS_2.c: 569: {
  8478                           ;PS_2.c: 570: if(!Send_PS2(0xED))
  8479  04BC  30ED               	movlw	237
  8480  04BD  318C  2469  3181   	fcall	_Send_PS2
  8481  04C0  3800               	iorlw	0
  8482  04C1  1D03               	skipz
  8483  04C2  2CCA               	goto	l6747
  8484                           
  8485                           ;PS_2.c: 571: {
  8486                           ;PS_2.c: 572: if(!Send_PS2(0x01))
  8487  04C3  3001               	movlw	1
  8488  04C4  318C  2469  3181   	fcall	_Send_PS2
  8489  04C7  3800               	iorlw	0
  8490  04C8  1903               	btfsc	3,2
  8491  04C9  2CE3               	goto	l6757
  8492  04CA                     l6747:	
  8493                           ;PS_2.c: 575: break;
  8494                           
  8495                           ;PS_2.c: 573: {
  8496                           ;PS_2.c: 574: Caps_Lock =0;
  8497                           
  8498                           
  8499                           ;PS_2.c: 576: }
  8500                           ;PS_2.c: 577: }
  8501                           ;PS_2.c: 578: CapsCount++;
  8502  04CA  3001               	movlw	1
  8503  04CB  0023               	movlb	3	; select bank3
  8504  04CC  00AF               	movwf	??_PS_2_Update^(0+384)
  8505  04CD  082F               	movf	??_PS_2_Update^(0+384),w
  8506  04CE  07A8               	addwf	_CapsCount^(0+384),f
  8507  04CF  2CB8               	goto	l6749
  8508  04D0                     l6751:	
  8509                           ;PS_2.c: 579: }
  8510                           ;PS_2.c: 580: }
  8511                           
  8512                           
  8513                           ;PS_2.c: 581: else
  8514                           ;PS_2.c: 582: {
  8515                           ;PS_2.c: 583: CapsCount=0;
  8516  04D0  01A8               	clrf	_CapsCount^(0+384)
  8517  04D1                     l6761:	
  8518                           ;PS_2.c: 584: while(CapsCount<10)
  8519                           
  8520  04D1  300A               	movlw	10
  8521  04D2  0228               	subwf	_CapsCount^(0+384),w
  8522  04D3  1803               	btfsc	3,0
  8523  04D4  2D6E               	goto	l6815
  8524                           
  8525                           ;PS_2.c: 585: {
  8526                           ;PS_2.c: 586: if(!Send_PS2(0xED))
  8527  04D5  30ED               	movlw	237
  8528  04D6  318C  2469  3181   	fcall	_Send_PS2
  8529  04D9  3800               	iorlw	0
  8530  04DA  1D03               	skipz
  8531  04DB  2CE6               	goto	l6759
  8532                           
  8533                           ;PS_2.c: 587: {
  8534                           ;PS_2.c: 588: if(!Send_PS2(0x00))
  8535  04DC  3000               	movlw	0
  8536  04DD  318C  2469  3181   	fcall	_Send_PS2
  8537  04E0  3800               	iorlw	0
  8538  04E1  1D03               	skipz
  8539  04E2  2CE6               	goto	l6759
  8540  04E3                     l6757:	
  8541                           
  8542                           ;PS_2.c: 589: {
  8543                           ;PS_2.c: 590: Caps_Lock =0;
  8544  04E3  0023               	movlb	3	; select bank3
  8545  04E4  01A9               	clrf	_Caps_Lock^(0+384)
  8546                           
  8547                           ;PS_2.c: 591: break;
  8548  04E5  2D6E               	goto	l6815
  8549  04E6                     l6759:	
  8550                           
  8551                           ;PS_2.c: 592: }
  8552                           ;PS_2.c: 593: }
  8553                           ;PS_2.c: 594: CapsCount++;
  8554  04E6  3001               	movlw	1
  8555  04E7  0023               	movlb	3	; select bank3
  8556  04E8  00AF               	movwf	??_PS_2_Update^(0+384)
  8557  04E9  082F               	movf	??_PS_2_Update^(0+384),w
  8558  04EA  07A8               	addwf	_CapsCount^(0+384),f
  8559  04EB  2CD1               	goto	l6761
  8560  04EC                     l6763:	
  8561                           ;PS_2.c: 595: }
  8562                           ;PS_2.c: 596: }
  8563                           ;PS_2.c: 597: }
  8564                           
  8565                           
  8566                           ;PS_2.c: 598: else
  8567                           ;PS_2.c: 599: {
  8568                           ;PS_2.c: 600: if(Shift_Key)
  8569  04EC  082E               	movf	_Shift_Key^(0+384),w
  8570  04ED  1903               	btfsc	3,2
  8571  04EE  2D08               	goto	l6777
  8572                           
  8573                           ;PS_2.c: 601: {
  8574                           ;PS_2.c: 602: CapsCount=0;
  8575  04EF  01A8               	clrf	_CapsCount^(0+384)
  8576  04F0                     l6775:	
  8577                           ;PS_2.c: 603: while(CapsCount<10)
  8578                           
  8579  04F0  300A               	movlw	10
  8580  04F1  0228               	subwf	_CapsCount^(0+384),w
  8581  04F2  1803               	btfsc	3,0
  8582  04F3  2D6E               	goto	l6815
  8583                           
  8584                           ;PS_2.c: 604: {
  8585                           ;PS_2.c: 605: if(!Send_PS2(0xED))
  8586  04F4  30ED               	movlw	237
  8587  04F5  318C  2469  3181   	fcall	_Send_PS2
  8588  04F8  3800               	iorlw	0
  8589  04F9  1D03               	skipz
  8590  04FA  2D02               	goto	l6773
  8591                           
  8592                           ;PS_2.c: 606: {
  8593                           ;PS_2.c: 607: if(!Send_PS2(0x05))
  8594  04FB  3005               	movlw	5
  8595  04FC  318C  2469  3181   	fcall	_Send_PS2
  8596  04FF  3800               	iorlw	0
  8597  0500  1903               	btfsc	3,2
  8598  0501  2D1B               	goto	l6783
  8599  0502                     l6773:	
  8600                           ;PS_2.c: 610: break;
  8601                           
  8602                           ;PS_2.c: 608: {
  8603                           ;PS_2.c: 609: Caps_Lock =1;
  8604                           
  8605                           
  8606                           ;PS_2.c: 611: }
  8607                           ;PS_2.c: 612: }
  8608                           ;PS_2.c: 613: CapsCount++;
  8609  0502  3001               	movlw	1
  8610  0503  0023               	movlb	3	; select bank3
  8611  0504  00AF               	movwf	??_PS_2_Update^(0+384)
  8612  0505  082F               	movf	??_PS_2_Update^(0+384),w
  8613  0506  07A8               	addwf	_CapsCount^(0+384),f
  8614  0507  2CF0               	goto	l6775
  8615  0508                     l6777:	
  8616                           ;PS_2.c: 614: }
  8617                           ;PS_2.c: 615: }
  8618                           
  8619                           
  8620                           ;PS_2.c: 616: else
  8621                           ;PS_2.c: 617: {
  8622                           ;PS_2.c: 618: CapsCount=0;
  8623  0508  01A8               	clrf	_CapsCount^(0+384)
  8624  0509                     l6787:	
  8625                           ;PS_2.c: 619: while(CapsCount<10)
  8626                           
  8627  0509  300A               	movlw	10
  8628  050A  0228               	subwf	_CapsCount^(0+384),w
  8629  050B  1803               	btfsc	3,0
  8630  050C  2D6E               	goto	l6815
  8631                           
  8632                           ;PS_2.c: 620: {
  8633                           ;PS_2.c: 621: if(!Send_PS2(0xED))
  8634  050D  30ED               	movlw	237
  8635  050E  318C  2469  3181   	fcall	_Send_PS2
  8636  0511  3800               	iorlw	0
  8637  0512  1D03               	skipz
  8638  0513  2D1F               	goto	l6785
  8639                           
  8640                           ;PS_2.c: 622: {
  8641                           ;PS_2.c: 623: if(!Send_PS2(0x04))
  8642  0514  3004               	movlw	4
  8643  0515  318C  2469  3181   	fcall	_Send_PS2
  8644  0518  3800               	iorlw	0
  8645  0519  1D03               	skipz
  8646  051A  2D1F               	goto	l6785
  8647  051B                     l6783:	
  8648                           
  8649                           ;PS_2.c: 624: {
  8650                           ;PS_2.c: 625: Caps_Lock =1;
  8651  051B  0023               	movlb	3	; select bank3
  8652  051C  01A9               	clrf	_Caps_Lock^(0+384)
  8653  051D  0AA9               	incf	_Caps_Lock^(0+384),f
  8654                           
  8655                           ;PS_2.c: 626: break;
  8656  051E  2D6E               	goto	l6815
  8657  051F                     l6785:	
  8658                           
  8659                           ;PS_2.c: 627: }
  8660                           ;PS_2.c: 628: }
  8661                           ;PS_2.c: 629: CapsCount++;
  8662  051F  3001               	movlw	1
  8663  0520  0023               	movlb	3	; select bank3
  8664  0521  00AF               	movwf	??_PS_2_Update^(0+384)
  8665  0522  082F               	movf	??_PS_2_Update^(0+384),w
  8666  0523  07A8               	addwf	_CapsCount^(0+384),f
  8667  0524  2D09               	goto	l6787
  8668  0525                     l6789:	
  8669                           ;PS_2.c: 630: }
  8670                           ;PS_2.c: 631: }
  8671                           ;PS_2.c: 632: }
  8672                           ;PS_2.c: 633: }
  8673                           ;PS_2.c: 635: }
  8674                           
  8675                           
  8676                           ;PS_2.c: 636: else
  8677                           ;PS_2.c: 637: {
  8678                           ;PS_2.c: 638: if(Shift_Key ==1)
  8679  0525  082E               	movf	_Shift_Key^(0+384),w
  8680  0526  3A01               	xorlw	1
  8681  0527  1D03               	skipz
  8682  0528  2D46               	goto	l6801
  8683                           
  8684                           ;PS_2.c: 639: {
  8685                           ;PS_2.c: 641: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8686  0529  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8687  052A  3199  21B6  3181   	fcall	_Decode_Scan_Code_Shift
  8688  052D  0023               	movlb	3	; select bank3
  8689  052E  00AF               	movwf	??_PS_2_Update^(0+384)
  8690  052F  082F               	movf	??_PS_2_Update^(0+384),w
  8691  0530  0025               	movlb	5	; select bank5
  8692  0531  00E0               	movwf	PS_2_Update@temp^(0+640)
  8693                           
  8694                           ;PS_2.c: 642: if(Caps_Lock)
  8695  0532  0023               	movlb	3	; select bank3
  8696  0533  0829               	movf	_Caps_Lock^(0+384),w
  8697  0534  1903               	btfsc	3,2
  8698  0535  2D60               	goto	l6811
  8699                           
  8700                           ;PS_2.c: 643: {
  8701                           ;PS_2.c: 645: if(temp >= 'A' && temp <= 'Z')
  8702  0536  3041               	movlw	65
  8703  0537  0025               	movlb	5	; select bank5
  8704  0538  0260               	subwf	PS_2_Update@temp^(0+640),w
  8705  0539  1C03               	skipc
  8706  053A  2D5F               	goto	l743
  8707  053B  305B               	movlw	91
  8708  053C  0260               	subwf	PS_2_Update@temp^(0+640),w
  8709  053D  1803               	skipnc
  8710  053E  2D5F               	goto	l743
  8711                           
  8712                           ;PS_2.c: 646: {
  8713                           ;PS_2.c: 647: temp += 32;
  8714  053F  3020               	movlw	32
  8715  0540  0023               	movlb	3	; select bank3
  8716  0541  00AF               	movwf	??_PS_2_Update^(0+384)
  8717  0542  082F               	movf	??_PS_2_Update^(0+384),w
  8718  0543  0025               	movlb	5	; select bank5
  8719  0544  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8720  0545  2D5F               	goto	l743
  8721  0546                     l6801:	
  8722                           ;PS_2.c: 648: }
  8723                           ;PS_2.c: 649: }
  8724                           ;PS_2.c: 650: }
  8725                           
  8726                           
  8727                           ;PS_2.c: 651: else
  8728                           ;PS_2.c: 652: {
  8729                           ;PS_2.c: 653: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8730  0546  0023               	movlb	3	; select bank3
  8731  0547  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8732  0548  3199  2190  3181   	fcall	_Decode_Scan_Code
  8733  054B  0023               	movlb	3	; select bank3
  8734  054C  00AF               	movwf	??_PS_2_Update^(0+384)
  8735  054D  082F               	movf	??_PS_2_Update^(0+384),w
  8736  054E  0025               	movlb	5	; select bank5
  8737  054F  00E0               	movwf	PS_2_Update@temp^(0+640)
  8738                           
  8739                           ;PS_2.c: 654: if(Caps_Lock)
  8740  0550  0023               	movlb	3	; select bank3
  8741  0551  0829               	movf	_Caps_Lock^(0+384),w
  8742  0552  1903               	btfsc	3,2
  8743  0553  2D60               	goto	l6811
  8744                           
  8745                           ;PS_2.c: 655: {
  8746                           ;PS_2.c: 657: if(temp >= 'a' && temp <= 'z')
  8747  0554  3061               	movlw	97
  8748  0555  0025               	movlb	5	; select bank5
  8749  0556  0260               	subwf	PS_2_Update@temp^(0+640),w
  8750  0557  1C03               	skipc
  8751  0558  2D5F               	goto	l743
  8752  0559  307B               	movlw	123
  8753  055A  0260               	subwf	PS_2_Update@temp^(0+640),w
  8754  055B  1803               	skipnc
  8755  055C  2D5F               	goto	l743
  8756                           
  8757                           ;PS_2.c: 658: {
  8758                           ;PS_2.c: 659: temp -= 32;
  8759  055D  3020               	movlw	32
  8760  055E  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8761  055F                     l743:	
  8762  055F  0023               	movlb	3	; select bank3
  8763  0560                     l6811:	
  8764                           
  8765                           ;PS_2.c: 660: }
  8766                           ;PS_2.c: 661: }
  8767                           ;PS_2.c: 662: }
  8768                           ;PS_2.c: 663: if(!temp)
  8769  0560  0025               	movlb	5	; select bank5
  8770  0561  08E0               	movf	PS_2_Update@temp^(0+640),f
  8771  0562  1D03               	skipz
  8772  0563  2D6E               	goto	l6815
  8773                           
  8774                           ;PS_2.c: 664: {
  8775                           ;PS_2.c: 666: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8776  0564  0023               	movlb	3	; select bank3
  8777  0565  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8778  0566  3199  2148  3181   	fcall	_Decode_Scan_Code_Function
  8779  0569  0023               	movlb	3	; select bank3
  8780  056A  00AF               	movwf	??_PS_2_Update^(0+384)
  8781  056B  082F               	movf	??_PS_2_Update^(0+384),w
  8782  056C  0025               	movlb	5	; select bank5
  8783  056D  00E0               	movwf	PS_2_Update@temp^(0+640)
  8784  056E                     l6815:	
  8785                           
  8786                           ;PS_2.c: 667: }
  8787                           ;PS_2.c: 668: }
  8788                           ;PS_2.c: 669: }
  8789                           ;PS_2.c: 670: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8790  056E  0025               	movlb	5	; select bank5
  8791  056F  01DE               	clrf	_PS_2_Update$826^(0+640)
  8792  0570  0ADE               	incf	_PS_2_Update$826^(0+640),f
  8793  0571  0022               	movlb	2	; select bank2
  8794  0572  08E7               	movf	_LALT^(0+256),f
  8795  0573  1D03               	skipz
  8796  0574  2D7B               	goto	l6823
  8797  0575  0023               	movlb	3	; select bank3
  8798  0576  08AC               	movf	_RALT^(0+384),f
  8799  0577  1D03               	skipz
  8800  0578  2D7B               	goto	l6823
  8801  0579  0025               	movlb	5	; select bank5
  8802  057A  01DE               	clrf	_PS_2_Update$826^(0+640)
  8803  057B                     l6823:	
  8804  057B  0025               	movlb	5	; select bank5
  8805  057C  01DF               	clrf	_PS_2_Update$827^(0+640)
  8806  057D  0ADF               	incf	_PS_2_Update$827^(0+640),f
  8807  057E  0022               	movlb	2	; select bank2
  8808  057F  08EA               	movf	_RControl^(0+256),f
  8809  0580  1D03               	skipz
  8810  0581  2D87               	goto	l6831
  8811  0582  08E8               	movf	_LControl^(0+256),f
  8812  0583  1D03               	skipz
  8813  0584  2D87               	goto	l6831
  8814  0585  0025               	movlb	5	; select bank5
  8815  0586  01DF               	clrf	_PS_2_Update$827^(0+640)
  8816  0587                     l6831:	
  8817  0587  0022               	movlb	2	; select bank2
  8818  0588  0866               	movf	_Delete^(0+256),w
  8819  0589  0023               	movlb	3	; select bank3
  8820  058A  00AF               	movwf	??_PS_2_Update^(0+384)
  8821  058B  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8822  058C  0025               	movlb	5	; select bank5
  8823  058D  085F               	movf	_PS_2_Update$827^(0+640),w
  8824  058E  075E               	addwf	_PS_2_Update$826^(0+640),w
  8825  058F  0023               	movlb	3	; select bank3
  8826  0590  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8827  0591  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8828  0592  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8829  0593  082F               	movf	??_PS_2_Update^(0+384),w
  8830  0594  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8831  0595  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8832  0596  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8833  0597  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8834  0598  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8835  0599  3003               	movlw	3
  8836  059A  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8837  059B  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8838  059C  1D03               	skipz
  8839  059D  2E13               	goto	l6871
  8840                           
  8841                           ;PS_2.c: 671: {
  8842                           ;PS_2.c: 673: UARTstringWAIT("\r\n");
  8843  059E  3056               	movlw	low ((STR_11+17)| (0+32768))
  8844  059F  0020               	movlb	0	; select bank0
  8845  05A0  00B4               	movwf	UARTstringWAIT@data
  8846  05A1  308B               	movlw	high ((STR_11+17)| (0+32768))
  8847  05A2  00B5               	movwf	UARTstringWAIT@data+1
  8848  05A3  319B  2370  3181   	fcall	_UARTstringWAIT
  8849                           
  8850                           ;PS_2.c: 674: delayUS(10000);
  8851  05A6  3000               	movlw	0
  8852  05A7  0020               	movlb	0	; select bank0
  8853  05A8  00A8               	movwf	delayUS@US+3
  8854  05A9  3000               	movlw	0
  8855  05AA  00A7               	movwf	delayUS@US+2
  8856  05AB  3027               	movlw	39
  8857  05AC  00A6               	movwf	delayUS@US+1
  8858  05AD  3010               	movlw	16
  8859  05AE  00A5               	movwf	delayUS@US
  8860  05AF  3190  2002  3181   	fcall	_delayUS
  8861                           
  8862                           ;PS_2.c: 675: if(!BAUDMODE)
  8863  05B2  0022               	movlb	2	; select bank2
  8864  05B3  08E3               	movf	_BAUDMODE^(0+256),f
  8865  05B4  1D03               	skipz
  8866  05B5  2DE0               	goto	l6851
  8867                           
  8868                           ;PS_2.c: 676: {
  8869                           ;PS_2.c: 677: BaudTyped =0;
  8870  05B6  3000               	movlw	0
  8871  05B7  0020               	movlb	0	; select bank0
  8872  05B8  00E9               	movwf	_BaudTyped+3
  8873  05B9  3000               	movlw	0
  8874  05BA  00E8               	movwf	_BaudTyped+2
  8875  05BB  3000               	movlw	0
  8876  05BC  00E7               	movwf	_BaudTyped+1
  8877  05BD  3000               	movlw	0
  8878  05BE  00E6               	movwf	_BaudTyped
  8879                           
  8880                           ;PS_2.c: 678: ParityTyped =0;
  8881  05BF  0023               	movlb	3	; select bank3
  8882  05C0  01AB               	clrf	_ParityTyped^(0+384)
  8883                           
  8884                           ;PS_2.c: 679: BAUDMODE = 1;
  8885  05C1  0022               	movlb	2	; select bank2
  8886  05C2  01E3               	clrf	_BAUDMODE^(0+256)
  8887  05C3  0AE3               	incf	_BAUDMODE^(0+256),f
  8888                           
  8889                           ;PS_2.c: 680: UARTstringWAIT("Enter Baud rate\r\n");
  8890  05C4  307F               	movlw	low (STR_31| (0+32768))
  8891  05C5  0020               	movlb	0	; select bank0
  8892  05C6  00B4               	movwf	UARTstringWAIT@data
  8893  05C7  308B               	movlw	high (STR_31| (0+32768))
  8894  05C8  00B5               	movwf	UARTstringWAIT@data+1
  8895  05C9  319B  2370  3181   	fcall	_UARTstringWAIT
  8896                           
  8897                           ;PS_2.c: 681: delayUS(10000);
  8898  05CC  3000               	movlw	0
  8899  05CD  0020               	movlb	0	; select bank0
  8900  05CE  00A8               	movwf	delayUS@US+3
  8901  05CF  3000               	movlw	0
  8902  05D0  00A7               	movwf	delayUS@US+2
  8903  05D1  3027               	movlw	39
  8904  05D2  00A6               	movwf	delayUS@US+1
  8905  05D3  3010               	movlw	16
  8906  05D4  00A5               	movwf	delayUS@US
  8907  05D5  3190  2002  3181   	fcall	_delayUS
  8908                           
  8909                           ;PS_2.c: 682: UARTchar('>' , 0, 0);
  8910  05D8  0020               	movlb	0	; select bank0
  8911  05D9  01AD               	clrf	UARTchar@override
  8912  05DA  01AE               	clrf	UARTchar@NinethBit_override_data
  8913  05DB  303E               	movlw	62
  8914  05DC  319E  260F  3181   	fcall	_UARTchar
  8915                           
  8916                           ;PS_2.c: 684: }
  8917  05DF  2E0B               	goto	l6861
  8918  05E0                     l6851:	
  8919                           
  8920                           ;PS_2.c: 685: else
  8921                           ;PS_2.c: 686: {
  8922                           ;PS_2.c: 687: BaudTyped = 9600;
  8923  05E0  3000               	movlw	0
  8924  05E1  0020               	movlb	0	; select bank0
  8925  05E2  00E9               	movwf	_BaudTyped+3
  8926  05E3  3000               	movlw	0
  8927  05E4  00E8               	movwf	_BaudTyped+2
  8928  05E5  3025               	movlw	37
  8929  05E6  00E7               	movwf	_BaudTyped+1
  8930  05E7  3080               	movlw	128
  8931  05E8  00E6               	movwf	_BaudTyped
  8932                           
  8933                           ;PS_2.c: 688: UARTstringWAIT("KeyBoard Reset to 9600 with no parity bit\r\n");
  8934  05E9  30FB               	movlw	low (STR_32| (0+32768))
  8935  05EA  00B4               	movwf	UARTstringWAIT@data
  8936  05EB  3089               	movlw	high (STR_32| (0+32768))
  8937  05EC  00B5               	movwf	UARTstringWAIT@data+1
  8938  05ED  319B  2370  3181   	fcall	_UARTstringWAIT
  8939                           
  8940                           ;PS_2.c: 689: delayUS(10000);
  8941  05F0  3000               	movlw	0
  8942  05F1  0020               	movlb	0	; select bank0
  8943  05F2  00A8               	movwf	delayUS@US+3
  8944  05F3  3000               	movlw	0
  8945  05F4  00A7               	movwf	delayUS@US+2
  8946  05F5  3027               	movlw	39
  8947  05F6  00A6               	movwf	delayUS@US+1
  8948  05F7  3010               	movlw	16
  8949  05F8  00A5               	movwf	delayUS@US
  8950  05F9  3190  2002  3181   	fcall	_delayUS
  8951                           
  8952                           ;PS_2.c: 690: SetBaud(BaudTyped, 0);
  8953  05FC  0020               	movlb	0	; select bank0
  8954  05FD  0869               	movf	_BaudTyped+3,w
  8955  05FE  00D7               	movwf	SetBaud@Baud+3
  8956  05FF  0868               	movf	_BaudTyped+2,w
  8957  0600  00D6               	movwf	SetBaud@Baud+2
  8958  0601  0867               	movf	_BaudTyped+1,w
  8959  0602  00D5               	movwf	SetBaud@Baud+1
  8960  0603  0866               	movf	_BaudTyped,w
  8961  0604  00D4               	movwf	SetBaud@Baud
  8962  0605  01D8               	clrf	SetBaud@Parity
  8963  0606  3196  269B  3181   	fcall	_SetBaud
  8964                           
  8965                           ;PS_2.c: 691: BAUDMODE = 0;
  8966  0609  0022               	movlb	2	; select bank2
  8967  060A  01E3               	clrf	_BAUDMODE^(0+256)
  8968  060B                     l6861:	
  8969                           
  8970                           ;PS_2.c: 692: }
  8971                           ;PS_2.c: 693: RControl =0;
  8972  060B  0022               	movlb	2	; select bank2
  8973  060C  01EA               	clrf	_RControl^(0+256)
  8974                           
  8975                           ;PS_2.c: 694: LControl =0;
  8976  060D  01E8               	clrf	_LControl^(0+256)
  8977                           
  8978                           ;PS_2.c: 695: LALT =0;
  8979  060E  01E7               	clrf	_LALT^(0+256)
  8980                           
  8981                           ;PS_2.c: 696: RALT =0;
  8982  060F  0023               	movlb	3	; select bank3
  8983  0610  01AC               	clrf	_RALT^(0+384)
  8984                           
  8985                           ;PS_2.c: 697: Delete =0;
  8986  0611  0022               	movlb	2	; select bank2
  8987  0612  01E6               	clrf	_Delete^(0+256)
  8988  0613                     l6871:	
  8989                           
  8990                           ;PS_2.c: 698: }
  8991                           ;PS_2.c: 699: if(temp)
  8992  0613  0025               	movlb	5	; select bank5
  8993  0614  0860               	movf	PS_2_Update@temp^(0+640),w
  8994  0615  1903               	btfsc	3,2
  8995  0616  2FAA               	goto	l6967
  8996                           
  8997                           ;PS_2.c: 700: {
  8998                           ;PS_2.c: 702: if(temp == 0x01)
  8999  0617  0860               	movf	PS_2_Update@temp^(0+640),w
  9000  0618  3A01               	xorlw	1
  9001  0619  1D03               	skipz
  9002  061A  2E24               	goto	l6877
  9003                           
  9004                           ;PS_2.c: 703: {
  9005                           ;PS_2.c: 706: UART_send_break_timed(100000);
  9006  061B  30A0               	movlw	160
  9007  061C  0020               	movlb	0	; select bank0
  9008  061D  00AF               	movwf	UART_send_break_timed@US
  9009  061E  3086               	movlw	134
  9010  061F  00B0               	movwf	UART_send_break_timed@US+1
  9011  0620  319A  2222  3181   	fcall	_UART_send_break_timed
  9012  0623  2FA9               	goto	l755
  9013  0624                     l6877:	
  9014                           ;PS_2.c: 707: }
  9015                           
  9016                           
  9017                           ;PS_2.c: 708: else
  9018                           ;PS_2.c: 709: {
  9019                           ;PS_2.c: 710: if(!BAUDMODE)
  9020  0624  0022               	movlb	2	; select bank2
  9021  0625  08E3               	movf	_BAUDMODE^(0+256),f
  9022  0626  1D03               	skipz
  9023  0627  2E55               	goto	l6889
  9024                           
  9025                           ;PS_2.c: 711: {
  9026                           ;PS_2.c: 712: UARTchar(temp, 0, 0);
  9027  0628  0020               	movlb	0	; select bank0
  9028  0629  01AD               	clrf	UARTchar@override
  9029  062A  01AE               	clrf	UARTchar@NinethBit_override_data
  9030  062B  0025               	movlb	5	; select bank5
  9031  062C  0860               	movf	PS_2_Update@temp^(0+640),w
  9032  062D  319E  260F  3181   	fcall	_UARTchar
  9033                           
  9034                           ;PS_2.c: 713: if(temp == '\r')
  9035  0630  0025               	movlb	5	; select bank5
  9036  0631  0860               	movf	PS_2_Update@temp^(0+640),w
  9037  0632  3A0D               	xorlw	13
  9038  0633  1D03               	skipz
  9039  0634  2FAA               	goto	l6967
  9040                           
  9041                           ;PS_2.c: 714: {
  9042                           ;PS_2.c: 715: delayUS(5000);
  9043  0635  3000               	movlw	0
  9044  0636  0020               	movlb	0	; select bank0
  9045  0637  00A8               	movwf	delayUS@US+3
  9046  0638  3000               	movlw	0
  9047  0639  00A7               	movwf	delayUS@US+2
  9048  063A  3013               	movlw	19
  9049  063B  00A6               	movwf	delayUS@US+1
  9050  063C  3088               	movlw	136
  9051  063D  00A5               	movwf	delayUS@US
  9052  063E  3190  2002  3181   	fcall	_delayUS
  9053                           
  9054                           ;PS_2.c: 716: UARTchar('\n', 0, 0);
  9055  0641  0020               	movlb	0	; select bank0
  9056  0642  01AD               	clrf	UARTchar@override
  9057  0643  01AE               	clrf	UARTchar@NinethBit_override_data
  9058  0644  300A               	movlw	10
  9059  0645  319E  260F  3181   	fcall	_UARTchar
  9060                           
  9061                           ;PS_2.c: 717: delayUS(10000);
  9062  0648  3000               	movlw	0
  9063  0649  0020               	movlb	0	; select bank0
  9064  064A  00A8               	movwf	delayUS@US+3
  9065  064B  3000               	movlw	0
  9066  064C  00A7               	movwf	delayUS@US+2
  9067  064D  3027               	movlw	39
  9068  064E  00A6               	movwf	delayUS@US+1
  9069  064F  3010               	movlw	16
  9070  0650  00A5               	movwf	delayUS@US
  9071  0651  3190  2002  3181   	fcall	_delayUS
  9072  0654  2FA9               	goto	l755
  9073  0655                     l6889:	
  9074                           ;PS_2.c: 718: }
  9075                           ;PS_2.c: 719: }
  9076                           
  9077                           
  9078                           ;PS_2.c: 720: else
  9079                           ;PS_2.c: 721: {
  9080                           ;PS_2.c: 722: if(ISNUMBER(temp))
  9081  0655  0025               	movlb	5	; select bank5
  9082  0656  0860               	movf	PS_2_Update@temp^(0+640),w
  9083  0657  3199  211C  3181   	fcall	_ISNUMBER
  9084  065A  3A00               	xorlw	0
  9085  065B  1903               	skipnz
  9086  065C  2EA3               	goto	l6897
  9087                           
  9088                           ;PS_2.c: 723: {
  9089                           ;PS_2.c: 724: BaudTyped*=10;
  9090  065D  3000               	movlw	0
  9091  065E  0020               	movlb	0	; select bank0
  9092  065F  00A8               	movwf	___lmul@multiplier+3
  9093  0660  3000               	movlw	0
  9094  0661  00A7               	movwf	___lmul@multiplier+2
  9095  0662  3000               	movlw	0
  9096  0663  00A6               	movwf	___lmul@multiplier+1
  9097  0664  300A               	movlw	10
  9098  0665  00A5               	movwf	___lmul@multiplier
  9099  0666  0869               	movf	_BaudTyped+3,w
  9100  0667  00AC               	movwf	___lmul@multiplicand+3
  9101  0668  0868               	movf	_BaudTyped+2,w
  9102  0669  00AB               	movwf	___lmul@multiplicand+2
  9103  066A  0867               	movf	_BaudTyped+1,w
  9104  066B  00AA               	movwf	___lmul@multiplicand+1
  9105  066C  0866               	movf	_BaudTyped,w
  9106  066D  00A9               	movwf	___lmul@multiplicand
  9107  066E  319A  2279  3181   	fcall	___lmul
  9108  0671  0020               	movlb	0	; select bank0
  9109  0672  0828               	movf	?___lmul+3,w
  9110  0673  00E9               	movwf	_BaudTyped+3
  9111  0674  0827               	movf	?___lmul+2,w
  9112  0675  00E8               	movwf	_BaudTyped+2
  9113  0676  0826               	movf	?___lmul+1,w
  9114  0677  00E7               	movwf	_BaudTyped+1
  9115  0678  0825               	movf	?___lmul,w
  9116  0679  00E6               	movwf	_BaudTyped
  9117                           
  9118                           ;PS_2.c: 725: BaudTyped += temp - 48;
  9119  067A  0025               	movlb	5	; select bank5
  9120  067B  0860               	movf	PS_2_Update@temp^(0+640),w
  9121  067C  3ED0               	addlw	208
  9122  067D  0023               	movlb	3	; select bank3
  9123  067E  00AF               	movwf	??_PS_2_Update^(0+384)
  9124  067F  30FF               	movlw	255
  9125  0680  1803               	skipnc
  9126  0681  3000               	movlw	0
  9127  0682  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9128  0683  082F               	movf	??_PS_2_Update^(0+384),w
  9129  0684  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9130  0685  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9131  0686  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9132  0687  3000               	movlw	0
  9133  0688  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9134  0689  30FF               	movlw	255
  9135  068A  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9136  068B  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9137  068C  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9138  068D  0020               	movlb	0	; select bank0
  9139  068E  07E6               	addwf	_BaudTyped,f
  9140  068F  0023               	movlb	3	; select bank3
  9141  0690  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9142  0691  0020               	movlb	0	; select bank0
  9143  0692  3DE7               	addwfc	_BaudTyped+1,f
  9144  0693  0023               	movlb	3	; select bank3
  9145  0694  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9146  0695  0020               	movlb	0	; select bank0
  9147  0696  3DE8               	addwfc	_BaudTyped+2,f
  9148  0697  0023               	movlb	3	; select bank3
  9149  0698  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9150  0699  0020               	movlb	0	; select bank0
  9151  069A  3DE9               	addwfc	_BaudTyped+3,f
  9152                           
  9153                           ;PS_2.c: 726: UARTchar(temp, 0, 0);
  9154  069B  01AD               	clrf	UARTchar@override
  9155  069C  01AE               	clrf	UARTchar@NinethBit_override_data
  9156  069D  0025               	movlb	5	; select bank5
  9157  069E  0860               	movf	PS_2_Update@temp^(0+640),w
  9158  069F  319E  260F  3181   	fcall	_UARTchar
  9159  06A2  2FA9               	goto	l755
  9160  06A3                     l6897:	
  9161                           ;PS_2.c: 727: }
  9162                           
  9163                           
  9164                           ;PS_2.c: 728: else if(temp == 'o' || temp == 'O')
  9165  06A3  0025               	movlb	5	; select bank5
  9166  06A4  0860               	movf	PS_2_Update@temp^(0+640),w
  9167  06A5  3A6F               	xorlw	111
  9168  06A6  1903               	skipnz
  9169  06A7  2EAC               	goto	l763
  9170  06A8  0860               	movf	PS_2_Update@temp^(0+640),w
  9171  06A9  3A4F               	xorlw	79
  9172  06AA  1D03               	skipz
  9173  06AB  2EB8               	goto	l6903
  9174  06AC                     l763:	
  9175                           
  9176                           ;PS_2.c: 729: {
  9177                           ;PS_2.c: 730: ParityTyped = 1;
  9178  06AC  0023               	movlb	3	; select bank3
  9179  06AD  01AB               	clrf	_ParityTyped^(0+384)
  9180  06AE  0AAB               	incf	_ParityTyped^(0+384),f
  9181                           
  9182                           ;PS_2.c: 731: UARTchar(temp, 0, 0);
  9183  06AF  0020               	movlb	0	; select bank0
  9184  06B0  01AD               	clrf	UARTchar@override
  9185  06B1  01AE               	clrf	UARTchar@NinethBit_override_data
  9186  06B2  0025               	movlb	5	; select bank5
  9187  06B3  0860               	movf	PS_2_Update@temp^(0+640),w
  9188  06B4  319E  260F  3181   	fcall	_UARTchar
  9189  06B7  2FA9               	goto	l755
  9190  06B8                     l6903:	
  9191                           ;PS_2.c: 732: }
  9192                           
  9193                           
  9194                           ;PS_2.c: 733: else if(temp == 'e' || temp == 'E')
  9195  06B8  0025               	movlb	5	; select bank5
  9196  06B9  0860               	movf	PS_2_Update@temp^(0+640),w
  9197  06BA  3A65               	xorlw	101
  9198  06BB  1903               	skipnz
  9199  06BC  2EC1               	goto	l6907
  9200  06BD  0860               	movf	PS_2_Update@temp^(0+640),w
  9201  06BE  3A45               	xorlw	69
  9202  06BF  1D03               	skipz
  9203  06C0  2ECF               	goto	l6911
  9204  06C1                     l6907:	
  9205                           
  9206                           ;PS_2.c: 734: {
  9207                           ;PS_2.c: 735: ParityTyped = 2;
  9208  06C1  3002               	movlw	2
  9209  06C2  0023               	movlb	3	; select bank3
  9210  06C3  00AF               	movwf	??_PS_2_Update^(0+384)
  9211  06C4  082F               	movf	??_PS_2_Update^(0+384),w
  9212  06C5  00AB               	movwf	_ParityTyped^(0+384)
  9213                           
  9214                           ;PS_2.c: 736: UARTchar(temp, 0, 0);
  9215  06C6  0020               	movlb	0	; select bank0
  9216  06C7  01AD               	clrf	UARTchar@override
  9217  06C8  01AE               	clrf	UARTchar@NinethBit_override_data
  9218  06C9  0025               	movlb	5	; select bank5
  9219  06CA  0860               	movf	PS_2_Update@temp^(0+640),w
  9220  06CB  319E  260F  3181   	fcall	_UARTchar
  9221  06CE  2FA9               	goto	l755
  9222  06CF                     l6911:	
  9223                           ;PS_2.c: 737: }
  9224                           
  9225                           
  9226                           ;PS_2.c: 738: else if(temp == 'm' || temp == 'M')
  9227  06CF  0025               	movlb	5	; select bank5
  9228  06D0  0860               	movf	PS_2_Update@temp^(0+640),w
  9229  06D1  3A6D               	xorlw	109
  9230  06D2  1903               	skipnz
  9231  06D3  2ED8               	goto	l6915
  9232  06D4  0860               	movf	PS_2_Update@temp^(0+640),w
  9233  06D5  3A4D               	xorlw	77
  9234  06D6  1D03               	skipz
  9235  06D7  2EE6               	goto	l6919
  9236  06D8                     l6915:	
  9237                           
  9238                           ;PS_2.c: 739: {
  9239                           ;PS_2.c: 740: ParityTyped = 3;
  9240  06D8  3003               	movlw	3
  9241  06D9  0023               	movlb	3	; select bank3
  9242  06DA  00AF               	movwf	??_PS_2_Update^(0+384)
  9243  06DB  082F               	movf	??_PS_2_Update^(0+384),w
  9244  06DC  00AB               	movwf	_ParityTyped^(0+384)
  9245                           
  9246                           ;PS_2.c: 741: UARTchar(temp, 0, 0);
  9247  06DD  0020               	movlb	0	; select bank0
  9248  06DE  01AD               	clrf	UARTchar@override
  9249  06DF  01AE               	clrf	UARTchar@NinethBit_override_data
  9250  06E0  0025               	movlb	5	; select bank5
  9251  06E1  0860               	movf	PS_2_Update@temp^(0+640),w
  9252  06E2  319E  260F  3181   	fcall	_UARTchar
  9253  06E5  2FA9               	goto	l755
  9254  06E6                     l6919:	
  9255                           ;PS_2.c: 742: }
  9256                           
  9257                           
  9258                           ;PS_2.c: 743: else if(temp == 's' || temp == 'S')
  9259  06E6  0025               	movlb	5	; select bank5
  9260  06E7  0860               	movf	PS_2_Update@temp^(0+640),w
  9261  06E8  3A73               	xorlw	115
  9262  06E9  1903               	skipnz
  9263  06EA  2EEF               	goto	l6923
  9264  06EB  0860               	movf	PS_2_Update@temp^(0+640),w
  9265  06EC  3A53               	xorlw	83
  9266  06ED  1D03               	skipz
  9267  06EE  2EFD               	goto	l6927
  9268  06EF                     l6923:	
  9269                           
  9270                           ;PS_2.c: 744: {
  9271                           ;PS_2.c: 745: ParityTyped = 4;
  9272  06EF  3004               	movlw	4
  9273  06F0  0023               	movlb	3	; select bank3
  9274  06F1  00AF               	movwf	??_PS_2_Update^(0+384)
  9275  06F2  082F               	movf	??_PS_2_Update^(0+384),w
  9276  06F3  00AB               	movwf	_ParityTyped^(0+384)
  9277                           
  9278                           ;PS_2.c: 746: UARTchar(temp, 0, 0);
  9279  06F4  0020               	movlb	0	; select bank0
  9280  06F5  01AD               	clrf	UARTchar@override
  9281  06F6  01AE               	clrf	UARTchar@NinethBit_override_data
  9282  06F7  0025               	movlb	5	; select bank5
  9283  06F8  0860               	movf	PS_2_Update@temp^(0+640),w
  9284  06F9  319E  260F  3181   	fcall	_UARTchar
  9285  06FC  2FA9               	goto	l755
  9286  06FD                     l6927:	
  9287                           ;PS_2.c: 747: }
  9288                           
  9289                           
  9290                           ;PS_2.c: 748: else if(temp == '\r')
  9291  06FD  0025               	movlb	5	; select bank5
  9292  06FE  0860               	movf	PS_2_Update@temp^(0+640),w
  9293  06FF  3A0D               	xorlw	13
  9294  0700  1D03               	skipz
  9295  0701  2FAA               	goto	l6967
  9296                           
  9297                           ;PS_2.c: 749: {
  9298                           ;PS_2.c: 750: UARTstringWAIT("\r\n");
  9299  0702  3056               	movlw	low ((STR_11+17)| (0+32768))
  9300  0703  0020               	movlb	0	; select bank0
  9301  0704  00B4               	movwf	UARTstringWAIT@data
  9302  0705  308B               	movlw	high ((STR_11+17)| (0+32768))
  9303  0706  00B5               	movwf	UARTstringWAIT@data+1
  9304  0707  319B  2370  3181   	fcall	_UARTstringWAIT
  9305                           
  9306                           ;PS_2.c: 751: delayUS(10000);
  9307  070A  3000               	movlw	0
  9308  070B  0020               	movlb	0	; select bank0
  9309  070C  00A8               	movwf	delayUS@US+3
  9310  070D  3000               	movlw	0
  9311  070E  00A7               	movwf	delayUS@US+2
  9312  070F  3027               	movlw	39
  9313  0710  00A6               	movwf	delayUS@US+1
  9314  0711  3010               	movlw	16
  9315  0712  00A5               	movwf	delayUS@US
  9316  0713  3190  2002  3181   	fcall	_delayUS
  9317                           
  9318                           ;PS_2.c: 752: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9319  0716  3000               	movlw	0
  9320  0717  0020               	movlb	0	; select bank0
  9321  0718  0269               	subwf	_BaudTyped+3,w
  9322  0719  1D03               	skipz
  9323  071A  2F25               	goto	u9675
  9324  071B  3000               	movlw	0
  9325  071C  0268               	subwf	_BaudTyped+2,w
  9326  071D  1D03               	skipz
  9327  071E  2F25               	goto	u9675
  9328  071F  3009               	movlw	9
  9329  0720  0267               	subwf	_BaudTyped+1,w
  9330  0721  1D03               	skipz
  9331  0722  2F25               	goto	u9675
  9332  0723  3060               	movlw	96
  9333  0724  0266               	subwf	_BaudTyped,w
  9334  0725                     u9675:	
  9335  0725  1C03               	skipc
  9336  0726  2F93               	goto	l6961
  9337  0727  3000               	movlw	0
  9338  0728  0269               	subwf	_BaudTyped+3,w
  9339  0729  1D03               	skipz
  9340  072A  2F35               	goto	u9685
  9341  072B  3001               	movlw	1
  9342  072C  0268               	subwf	_BaudTyped+2,w
  9343  072D  1D03               	skipz
  9344  072E  2F35               	goto	u9685
  9345  072F  30C2               	movlw	194
  9346  0730  0267               	subwf	_BaudTyped+1,w
  9347  0731  1D03               	skipz
  9348  0732  2F35               	goto	u9685
  9349  0733  3001               	movlw	1
  9350  0734  0266               	subwf	_BaudTyped,w
  9351  0735                     u9685:	
  9352  0735  1803               	skipnc
  9353  0736  2F93               	goto	l6961
  9354                           
  9355                           ;PS_2.c: 753: {
  9356                           ;PS_2.c: 754: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
  9357  0737  30A0               	movlw	low PS_2_Update@buf
  9358  0738  00BD               	movwf	sprintf@sp
  9359  0739  3002               	movlw	high PS_2_Update@buf
  9360  073A  00BE               	movwf	sprintf@sp+1
  9361  073B  304E               	movlw	low (STR_34| (0+32768))
  9362  073C  00BF               	movwf	sprintf@f
  9363  073D  308A               	movlw	high (STR_34| (0+32768))
  9364  073E  00C0               	movwf	sprintf@f+1
  9365  073F  0869               	movf	_BaudTyped+3,w
  9366  0740  00C4               	movwf	?_sprintf+7
  9367  0741  0868               	movf	_BaudTyped+2,w
  9368  0742  00C3               	movwf	?_sprintf+6
  9369  0743  0867               	movf	_BaudTyped+1,w
  9370  0744  00C2               	movwf	?_sprintf+5
  9371  0745  0866               	movf	_BaudTyped,w
  9372  0746  00C1               	movwf	?_sprintf+4
  9373  0747  3194  249F  3181   	fcall	_sprintf
  9374                           
  9375                           ;PS_2.c: 755: UARTstringWAIT(buf);
  9376  074A  30A0               	movlw	low PS_2_Update@buf
  9377  074B  0020               	movlb	0	; select bank0
  9378  074C  00B4               	movwf	UARTstringWAIT@data
  9379  074D  3002               	movlw	high PS_2_Update@buf
  9380  074E  00B5               	movwf	UARTstringWAIT@data+1
  9381  074F  319B  2370  3181   	fcall	_UARTstringWAIT
  9382                           
  9383                           ;PS_2.c: 756: if(ParityTyped)
  9384  0752  0023               	movlb	3	; select bank3
  9385  0753  082B               	movf	_ParityTyped^(0+384),w
  9386  0754  1903               	btfsc	3,2
  9387  0755  2F78               	goto	l6957
  9388                           
  9389                           ;PS_2.c: 757: {
  9390                           ;PS_2.c: 758: switch (ParityTyped)
  9391  0756  2F6B               	goto	l6955
  9392  0757                     l6945:	
  9393                           ;PS_2.c: 759: {
  9394                           ;PS_2.c: 760: case 1:
  9395                           
  9396                           
  9397                           ;PS_2.c: 761: UARTstringWAIT(" with Odd parity bit\r\n");
  9398  0757  30EE               	movlw	low (STR_17| (0+32768))
  9399  0758  0020               	movlb	0	; select bank0
  9400  0759  00B4               	movwf	UARTstringWAIT@data
  9401  075A  308A               	movlw	high (STR_17| (0+32768))
  9402  075B  2F7C               	goto	L16
  9403  075C                     l6947:	
  9404                           ;PS_2.c: 763: case 2:
  9405                           
  9406                           ;PS_2.c: 762: break;
  9407                           
  9408                           
  9409                           ;PS_2.c: 764: UARTstringWAIT(" with Even parity bit\r\n");
  9410  075C  30BE               	movlw	low (STR_18| (0+32768))
  9411  075D  0020               	movlb	0	; select bank0
  9412  075E  00B4               	movwf	UARTstringWAIT@data
  9413  075F  308A               	movlw	high (STR_18| (0+32768))
  9414  0760  2F7C               	goto	L16
  9415  0761                     l6949:	
  9416                           ;PS_2.c: 766: case 3:
  9417                           
  9418                           ;PS_2.c: 765: break;
  9419                           
  9420                           
  9421                           ;PS_2.c: 767: UARTstringWAIT(" with Mark bit\r\n");
  9422  0761  30A3               	movlw	low (STR_19| (0+32768))
  9423  0762  0020               	movlb	0	; select bank0
  9424  0763  00B4               	movwf	UARTstringWAIT@data
  9425  0764  308B               	movlw	high (STR_19| (0+32768))
  9426  0765  2F7C               	goto	L16
  9427  0766                     l6951:	
  9428                           ;PS_2.c: 769: default:
  9429                           
  9430                           ;PS_2.c: 768: break;
  9431                           
  9432                           
  9433                           ;PS_2.c: 770: UARTstringWAIT(" with Space bit\r\n");
  9434  0766  3091               	movlw	low (STR_20| (0+32768))
  9435  0767  0020               	movlb	0	; select bank0
  9436  0768  00B4               	movwf	UARTstringWAIT@data
  9437  0769  308B               	movlw	high (STR_20| (0+32768))
  9438  076A  2F7C               	goto	L16
  9439  076B                     l6955:	
  9440                           ;PS_2.c: 772: }
  9441                           
  9442                           ;PS_2.c: 771: break;
  9443                           
  9444  076B  0023               	movlb	3	; select bank3
  9445  076C  082B               	movf	_ParityTyped^(0+384),w
  9446                           
  9447                           ; Switch size 1, requested type "space"
  9448                           ; Number of cases is 3, Range of values is 1 to 3
  9449                           ; switch strategies available:
  9450                           ; Name         Instructions Cycles
  9451                           ; simple_byte           10     6 (average)
  9452                           ; direct_byte           15     9 (fixed)
  9453                           ; jumptable            263     9 (fixed)
  9454                           ;	Chosen strategy is simple_byte
  9455  076D  3A01               	xorlw	1	; case 1
  9456  076E  1903               	skipnz
  9457  076F  2F57               	goto	l6945
  9458  0770  3A03               	xorlw	3	; case 2
  9459  0771  1903               	skipnz
  9460  0772  2F5C               	goto	l6947
  9461  0773  3A01               	xorlw	1	; case 3
  9462  0774  1903               	skipnz
  9463  0775  2F61               	goto	l6949
  9464  0776  2F66               	goto	l6951
  9465                           
  9466                           ;PS_2.c: 773: }
  9467  0777  2F80               	goto	l6959
  9468  0778                     l6957:	
  9469                           
  9470                           ;PS_2.c: 774: else
  9471                           ;PS_2.c: 775: {
  9472                           ;PS_2.c: 776: UARTstringWAIT(" with no parity bit\r\n");
  9473  0778  3011               	movlw	low ((STR_32+22)| (0+32768))
  9474  0779  0020               	movlb	0	; select bank0
  9475  077A  00B4               	movwf	UARTstringWAIT@data
  9476  077B  308A               	movlw	high ((STR_32+22)| (0+32768))
  9477  077C                     L16:	
  9478  077C  00B5               	movwf	UARTstringWAIT@data+1
  9479  077D  319B  2370  3181   	fcall	_UARTstringWAIT
  9480  0780                     l6959:	
  9481                           
  9482                           ;PS_2.c: 777: }
  9483                           ;PS_2.c: 778: SetBaud(BaudTyped, ParityTyped);
  9484  0780  0020               	movlb	0	; select bank0
  9485  0781  0869               	movf	_BaudTyped+3,w
  9486  0782  00D7               	movwf	SetBaud@Baud+3
  9487  0783  0868               	movf	_BaudTyped+2,w
  9488  0784  00D6               	movwf	SetBaud@Baud+2
  9489  0785  0867               	movf	_BaudTyped+1,w
  9490  0786  00D5               	movwf	SetBaud@Baud+1
  9491  0787  0866               	movf	_BaudTyped,w
  9492  0788  00D4               	movwf	SetBaud@Baud
  9493  0789  0023               	movlb	3	; select bank3
  9494  078A  082B               	movf	_ParityTyped^(0+384),w
  9495  078B  00AF               	movwf	??_PS_2_Update^(0+384)
  9496  078C  082F               	movf	??_PS_2_Update^(0+384),w
  9497  078D  0020               	movlb	0	; select bank0
  9498  078E  00D8               	movwf	SetBaud@Parity
  9499  078F  3196  269B  3181   	fcall	_SetBaud
  9500                           
  9501                           ;PS_2.c: 779: }
  9502  0792  2FA7               	goto	l6965
  9503  0793                     l6961:	
  9504                           
  9505                           ;PS_2.c: 780: else
  9506                           ;PS_2.c: 781: {
  9507                           ;PS_2.c: 782: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
  9508  0793  306F               	movlw	low (STR_40| (0+32768))
  9509  0794  0020               	movlb	0	; select bank0
  9510  0795  00B4               	movwf	UARTstringWAIT@data
  9511  0796  308A               	movlw	high (STR_40| (0+32768))
  9512  0797  00B5               	movwf	UARTstringWAIT@data+1
  9513  0798  319B  2370  3181   	fcall	_UARTstringWAIT
  9514                           
  9515                           ;PS_2.c: 783: delayUS(10000);
  9516  079B  3000               	movlw	0
  9517  079C  0020               	movlb	0	; select bank0
  9518  079D  00A8               	movwf	delayUS@US+3
  9519  079E  3000               	movlw	0
  9520  079F  00A7               	movwf	delayUS@US+2
  9521  07A0  3027               	movlw	39
  9522  07A1  00A6               	movwf	delayUS@US+1
  9523  07A2  3010               	movlw	16
  9524  07A3  00A5               	movwf	delayUS@US
  9525  07A4  3190  2002  3181   	fcall	_delayUS
  9526  07A7                     l6965:	
  9527                           
  9528                           ;PS_2.c: 784: }
  9529                           ;PS_2.c: 785: BAUDMODE=0;
  9530  07A7  0022               	movlb	2	; select bank2
  9531  07A8  01E3               	clrf	_BAUDMODE^(0+256)
  9532  07A9                     l755:	
  9533  07A9  0025               	movlb	5	; select bank5
  9534  07AA                     l6967:	
  9535                           
  9536                           ;PS_2.c: 786: }
  9537                           ;PS_2.c: 787: }
  9538                           ;PS_2.c: 788: }
  9539                           ;PS_2.c: 789: }
  9540                           ;PS_2.c: 790: PS_2_Read_Data_First =0;
  9541  07AA  0023               	movlb	3	; select bank3
  9542  07AB  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  9543  07AC  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9544                           
  9545                           ;PS_2.c: 791: PS_2_Read_Data_Second =0;
  9546  07AD  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  9547  07AE  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9548                           
  9549                           ;PS_2.c: 792: PS_2_Read_Data_Third =0;
  9550  07AF  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  9551  07B0  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9552                           
  9553                           ;PS_2.c: 793: PS_2_Read_Data_Forth =0;
  9554  07B1  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9555  07B2  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9556                           
  9557                           ;PS_2.c: 794: PS_2_Read_Data_FirstTEMP =0;
  9558  07B3  0024               	movlb	4	; select bank4
  9559  07B4  01AE               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9560  07B5  01AF               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9561                           
  9562                           ;PS_2.c: 795: PS_2_Read_Data_SecondTEMP =0;
  9563  07B6  01B2               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9564  07B7  01B3               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9565                           
  9566                           ;PS_2.c: 796: PS_2_Read_Data_ThirdTEMP =0;
  9567  07B8  01B4               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9568  07B9  01B5               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9569                           
  9570                           ;PS_2.c: 797: PS_2_Read_Data_ForthTEMP =0;
  9571  07BA  01B0               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9572  07BB  01B1               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9573                           
  9574                           ;PS_2.c: 798: Caps_Lock_Key_old = Caps_Lock_Key;
  9575  07BC  0022               	movlb	2	; select bank2
  9576  07BD  0864               	movf	_Caps_Lock_Key^(0+256),w
  9577  07BE  0023               	movlb	3	; select bank3
  9578  07BF  00AF               	movwf	??_PS_2_Update^(0+384)
  9579  07C0  082F               	movf	??_PS_2_Update^(0+384),w
  9580  07C1  0022               	movlb	2	; select bank2
  9581  07C2  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9582                           
  9583                           ;PS_2.c: 799: Right_Shift_Key_old = Right_Shift_Key;
  9584  07C3  0023               	movlb	3	; select bank3
  9585  07C4  082D               	movf	_Right_Shift_Key^(0+384),w
  9586  07C5  00AF               	movwf	??_PS_2_Update^(0+384)
  9587  07C6  082F               	movf	??_PS_2_Update^(0+384),w
  9588  07C7  0022               	movlb	2	; select bank2
  9589  07C8  00EB               	movwf	_Right_Shift_Key_old^(0+256)
  9590                           
  9591                           ;PS_2.c: 800: Left_Shift_Key_old = Left_Shift_Key;
  9592  07C9  0023               	movlb	3	; select bank3
  9593  07CA  082A               	movf	_Left_Shift_Key^(0+384),w
  9594  07CB  00AF               	movwf	??_PS_2_Update^(0+384)
  9595  07CC  082F               	movf	??_PS_2_Update^(0+384),w
  9596  07CD  0022               	movlb	2	; select bank2
  9597  07CE  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9598                           
  9599                           ;PS_2.c: 801: LATC &= ~0b00010000;
  9600  07CF  30EF               	movlw	239
  9601  07D0  0023               	movlb	3	; select bank3
  9602  07D1  00AF               	movwf	??_PS_2_Update^(0+384)
  9603  07D2  082F               	movf	??_PS_2_Update^(0+384),w
  9604  07D3  0022               	movlb	2	; select bank2
  9605  07D4  058E               	andwf	14,f	;volatile
  9606                           
  9607                           ;PS_2.c: 802: PIE1bits.RCIE = 1;
  9608  07D5  0021               	movlb	1	; select bank1
  9609  07D6  1691               	bsf	17,5	;volatile
  9610                           
  9611                           ;PS_2.c: 803: PS_2_ENABLE_INTERRUPT(0b00100000);
  9612  07D7  3020               	movlw	32
  9613  07D8  3199  21C9         	fcall	_PS_2_ENABLE_INTERRUPT
  9614  07DA  0020               	movlb	0	; select bank0
  9615  07DB  0008               	return
  9616  07DC                     __end_of_PS_2_Update:	
  9617                           
  9618                           	psect	text13
  9619  1A79                     __ptext13:	
  9620 ;; *************** function ___lmul *****************
  9621 ;; Defined at:
  9622 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9625 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;  product         4   13[BANK0 ] unsigned long 
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  4    5[BANK0 ] unsigned long 
  9630 ;; Registers used:
  9631 ;;		wreg, status,2, status,0
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9637 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;Total ram usage:       12 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    3
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_PS_2_Update
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function ___lmul
  9653  1A79                     ___lmul:	
  9654                           
  9655                           ;incstack = 0
  9656                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9657  1A79  3000               	movlw	0
  9658  1A7A  0020               	movlb	0	; select bank0
  9659  1A7B  00B0               	movwf	___lmul@product+3
  9660  1A7C  3000               	movlw	0
  9661  1A7D  00AF               	movwf	___lmul@product+2
  9662  1A7E  3000               	movlw	0
  9663  1A7F  00AE               	movwf	___lmul@product+1
  9664  1A80  3000               	movlw	0
  9665  1A81  00AD               	movwf	___lmul@product
  9666  1A82                     l6407:	
  9667  1A82  1C25               	btfss	___lmul@multiplier,0
  9668  1A83  2A8C               	goto	l6411
  9669  1A84  0829               	movf	___lmul@multiplicand,w
  9670  1A85  07AD               	addwf	___lmul@product,f
  9671  1A86  082A               	movf	___lmul@multiplicand+1,w
  9672  1A87  3DAE               	addwfc	___lmul@product+1,f
  9673  1A88  082B               	movf	___lmul@multiplicand+2,w
  9674  1A89  3DAF               	addwfc	___lmul@product+2,f
  9675  1A8A  082C               	movf	___lmul@multiplicand+3,w
  9676  1A8B  3DB0               	addwfc	___lmul@product+3,f
  9677  1A8C                     l6411:	
  9678  1A8C  3001               	movlw	1
  9679  1A8D                     u8305:	
  9680  1A8D  35A9               	lslf	___lmul@multiplicand,f
  9681  1A8E  0DAA               	rlf	___lmul@multiplicand+1,f
  9682  1A8F  0DAB               	rlf	___lmul@multiplicand+2,f
  9683  1A90  0DAC               	rlf	___lmul@multiplicand+3,f
  9684  1A91  0B89               	decfsz	9,f
  9685  1A92  2A8D               	goto	u8305
  9686  1A93  3001               	movlw	1
  9687  1A94                     u8315:	
  9688  1A94  36A8               	lsrf	___lmul@multiplier+3,f
  9689  1A95  0CA7               	rrf	___lmul@multiplier+2,f
  9690  1A96  0CA6               	rrf	___lmul@multiplier+1,f
  9691  1A97  0CA5               	rrf	___lmul@multiplier,f
  9692  1A98  0B89               	decfsz	9,f
  9693  1A99  2A94               	goto	u8315
  9694  1A9A  0828               	movf	___lmul@multiplier+3,w
  9695  1A9B  0427               	iorwf	___lmul@multiplier+2,w
  9696  1A9C  0426               	iorwf	___lmul@multiplier+1,w
  9697  1A9D  0425               	iorwf	___lmul@multiplier,w
  9698  1A9E  1D03               	skipz
  9699  1A9F  2A82               	goto	l6407
  9700  1AA0  0830               	movf	___lmul@product+3,w
  9701  1AA1  00A8               	movwf	?___lmul+3
  9702  1AA2  082F               	movf	___lmul@product+2,w
  9703  1AA3  00A7               	movwf	?___lmul+2
  9704  1AA4  082E               	movf	___lmul@product+1,w
  9705  1AA5  00A6               	movwf	?___lmul+1
  9706  1AA6  082D               	movf	___lmul@product,w
  9707  1AA7  00A5               	movwf	?___lmul
  9708  1AA8  0008               	return
  9709  1AA9                     __end_of___lmul:	
  9710                           
  9711                           	psect	text14
  9712  1A22                     __ptext14:	
  9713 ;; *************** function _UART_send_break_timed *****************
  9714 ;; Defined at:
  9715 ;;		line 331 in file "UART.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  US              2   15[BANK0 ] unsigned int 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;		None               void
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        3 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    4
  9736 ;; This function calls:
  9737 ;;		_delayUS
  9738 ;; This function is called by:
  9739 ;;		_PS_2_Update
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _UART_send_break_timed
  9745  1A22                     _UART_send_break_timed:	
  9746                           
  9747                           ;UART.c: 334: LATC |= 0b00000100;
  9748                           
  9749                           ;incstack = 0
  9750                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
  9751  1A22  0022               	movlb	2	; select bank2
  9752  1A23  150E               	bsf	14,2	;volatile
  9753                           
  9754                           ;UART.c: 335: PPSLOCK =0;
  9755  1A24  003C               	movlb	28	; select bank28
  9756  1A25  018F               	clrf	15	;volatile
  9757                           
  9758                           ;UART.c: 336: RC2PPS = 0b00000000;
  9759  1A26  003D               	movlb	29	; select bank29
  9760  1A27  01A2               	clrf	34	;volatile
  9761                           
  9762                           ;UART.c: 337: PPSLOCK =1;
  9763  1A28  3001               	movlw	1
  9764  1A29  003C               	movlb	28	; select bank28
  9765  1A2A  008F               	movwf	15	;volatile
  9766                           
  9767                           ;UART.c: 339: LATC &= ~0b00000100;
  9768  1A2B  30FB               	movlw	251
  9769  1A2C  0020               	movlb	0	; select bank0
  9770  1A2D  00B1               	movwf	??_UART_send_break_timed
  9771  1A2E  0831               	movf	??_UART_send_break_timed,w
  9772  1A2F  0022               	movlb	2	; select bank2
  9773  1A30  058E               	andwf	14,f	;volatile
  9774                           
  9775                           ;UART.c: 340: delayUS(US);
  9776  1A31  0020               	movlb	0	; select bank0
  9777  1A32  082F               	movf	UART_send_break_timed@US,w
  9778  1A33  00A5               	movwf	delayUS@US
  9779  1A34  0830               	movf	UART_send_break_timed@US+1,w
  9780  1A35  00A6               	movwf	delayUS@US+1
  9781  1A36  01A7               	clrf	delayUS@US+2
  9782  1A37  01A8               	clrf	delayUS@US+3
  9783  1A38  3190  2002         	fcall	_delayUS
  9784                           
  9785                           ;UART.c: 341: LATC |= 0b00000100;
  9786  1A3A  0022               	movlb	2	; select bank2
  9787  1A3B  150E               	bsf	14,2	;volatile
  9788                           
  9789                           ;UART.c: 343: PPSLOCK =0;
  9790  1A3C  003C               	movlb	28	; select bank28
  9791  1A3D  018F               	clrf	15	;volatile
  9792                           
  9793                           ;UART.c: 344: RC2PPS = 0b00010100;
  9794  1A3E  3014               	movlw	20
  9795  1A3F  003D               	movlb	29	; select bank29
  9796  1A40  00A2               	movwf	34	;volatile
  9797                           
  9798                           ;UART.c: 345: CKPPS = 0b00010010;
  9799  1A41  3012               	movlw	18
  9800  1A42  003C               	movlb	28	; select bank28
  9801  1A43  00A5               	movwf	37	;volatile
  9802                           
  9803                           ;UART.c: 347: RXPPS = 0b00010101;
  9804  1A44  3015               	movlw	21
  9805  1A45  00A4               	movwf	36	;volatile
  9806                           
  9807                           ;UART.c: 349: PPSLOCK =1;
  9808  1A46  3001               	movlw	1
  9809  1A47  008F               	movwf	15	;volatile
  9810  1A48  0008               	return
  9811  1A49                     __end_of_UART_send_break_timed:	
  9812                           
  9813                           	psect	text15
  9814  169B                     __ptext15:	
  9815 ;; *************** function _SetBaud *****************
  9816 ;; Defined at:
  9817 ;;		line 377 in file "UART.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;  Baud            4   52[BANK0 ] unsigned long 
  9820 ;;  Parity          1   56[BANK0 ] unsigned char 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9823 ;;  temp            4   58[BANK2 ] unsigned long 
  9824 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9825 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9826 ;;  i               1   62[BANK2 ] unsigned char 
  9827 ;; Return value:  Size  Location     Type
  9828 ;;		None               void
  9829 ;; Registers used:
  9830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:       76 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    7
  9843 ;; This function calls:
  9844 ;;		_InitUART
  9845 ;;		_ReadBaud
  9846 ;;		_UARTstringWAIT
  9847 ;;		_WriteBaud
  9848 ;;		_delayUS
  9849 ;;		_sprintf
  9850 ;; This function is called by:
  9851 ;;		_PS_2_Update
  9852 ;; This function uses a non-reentrant model
  9853 ;;
  9854                           
  9855                           
  9856                           ;psect for function _SetBaud
  9857  169B                     _SetBaud:	
  9858                           
  9859                           ;UART.c: 379: unsigned char buf[50];
  9860                           ;UART.c: 380: unsigned long Baudtemp=0;
  9861                           
  9862                           ;incstack = 0
  9863                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9864  169B  3000               	movlw	0
  9865  169C  0022               	movlb	2	; select bank2
  9866  169D  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9867  169E  3000               	movlw	0
  9868  169F  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9869  16A0  3000               	movlw	0
  9870  16A1  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9871  16A2  3000               	movlw	0
  9872  16A3  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9873                           
  9874                           ;UART.c: 381: unsigned long Paritytemp=0;
  9875  16A4  3000               	movlw	0
  9876  16A5  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9877  16A6  3000               	movlw	0
  9878  16A7  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9879  16A8  3000               	movlw	0
  9880  16A9  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9881  16AA  3000               	movlw	0
  9882  16AB  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9883                           
  9884                           ;UART.c: 382: unsigned long temp;
  9885                           ;UART.c: 383: unsigned char i =0;
  9886  16AC  01DE               	clrf	SetBaud@i^(0+256)
  9887                           
  9888                           ;UART.c: 385: WriteBaud((0x1800 >> 5), Baud, Parity);
  9889  16AD  30C0               	movlw	192
  9890  16AE  0020               	movlb	0	; select bank0
  9891  16AF  00B6               	movwf	WriteBaud@row
  9892  16B0  3000               	movlw	0
  9893  16B1  00B7               	movwf	WriteBaud@row+1
  9894  16B2  0857               	movf	SetBaud@Baud+3,w
  9895  16B3  00BB               	movwf	WriteBaud@Baud+3
  9896  16B4  0856               	movf	SetBaud@Baud+2,w
  9897  16B5  00BA               	movwf	WriteBaud@Baud+2
  9898  16B6  0855               	movf	SetBaud@Baud+1,w
  9899  16B7  00B9               	movwf	WriteBaud@Baud+1
  9900  16B8  0854               	movf	SetBaud@Baud,w
  9901  16B9  00B8               	movwf	WriteBaud@Baud
  9902  16BA  0858               	movf	SetBaud@Parity,w
  9903  16BB  00D9               	movwf	??_SetBaud
  9904  16BC  0859               	movf	??_SetBaud,w
  9905  16BD  00BC               	movwf	WriteBaud@Parity
  9906  16BE  319E  266D  3196   	fcall	_WriteBaud
  9907                           
  9908                           ;UART.c: 386: temp = ReadBaud((0x1800 >> 5), 0);
  9909  16C1  30C0               	movlw	192
  9910  16C2  0020               	movlb	0	; select bank0
  9911  16C3  00B7               	movwf	ReadBaud@row
  9912  16C4  3000               	movlw	0
  9913  16C5  00B8               	movwf	ReadBaud@row+1
  9914  16C6  01B9               	clrf	ReadBaud@column
  9915  16C7  319E  26CB  3196   	fcall	_ReadBaud
  9916  16CA  0020               	movlb	0	; select bank0
  9917  16CB  083A               	movf	?_ReadBaud+3,w
  9918  16CC  0022               	movlb	2	; select bank2
  9919  16CD  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9920  16CE  0020               	movlb	0	; select bank0
  9921  16CF  0839               	movf	?_ReadBaud+2,w
  9922  16D0  0022               	movlb	2	; select bank2
  9923  16D1  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9924  16D2  0020               	movlb	0	; select bank0
  9925  16D3  0838               	movf	?_ReadBaud+1,w
  9926  16D4  0022               	movlb	2	; select bank2
  9927  16D5  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9928  16D6  0020               	movlb	0	; select bank0
  9929  16D7  0837               	movf	?_ReadBaud,w
  9930  16D8  0022               	movlb	2	; select bank2
  9931  16D9  00DA               	movwf	SetBaud@temp^(0+256)
  9932                           
  9933                           ;UART.c: 387: Baudtemp = temp & 0x000FFFFF;
  9934  16DA  30FF               	movlw	255
  9935  16DB  055A               	andwf	SetBaud@temp^(0+256),w
  9936  16DC  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9937  16DD  30FF               	movlw	255
  9938  16DE  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9939  16DF  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9940  16E0  300F               	movlw	15
  9941  16E1  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9942  16E2  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9943  16E3  3000               	movlw	0
  9944  16E4  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9945  16E5  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9946                           
  9947                           ;UART.c: 388: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9948  16E6  085A               	movf	SetBaud@temp^(0+256),w
  9949  16E7  0020               	movlb	0	; select bank0
  9950  16E8  00D9               	movwf	??_SetBaud
  9951  16E9  0022               	movlb	2	; select bank2
  9952  16EA  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9953  16EB  0020               	movlb	0	; select bank0
  9954  16EC  00DA               	movwf	??_SetBaud+1
  9955  16ED  0022               	movlb	2	; select bank2
  9956  16EE  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9957  16EF  0020               	movlb	0	; select bank0
  9958  16F0  00DB               	movwf	??_SetBaud+2
  9959  16F1  0022               	movlb	2	; select bank2
  9960  16F2  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9961  16F3  0020               	movlb	0	; select bank0
  9962  16F4  00DC               	movwf	??_SetBaud+3
  9963  16F5  3014               	movlw	20
  9964  16F6                     u7975:	
  9965  16F6  36DC               	lsrf	??_SetBaud+3,f
  9966  16F7  0CDB               	rrf	??_SetBaud+2,f
  9967  16F8  0CDA               	rrf	??_SetBaud+1,f
  9968  16F9  0CD9               	rrf	??_SetBaud,f
  9969  16FA  0B89               	decfsz	9,f
  9970  16FB  2EF6               	goto	u7975
  9971  16FC  0859               	movf	??_SetBaud,w
  9972  16FD  390F               	andlw	15
  9973  16FE  00DD               	movwf	??_SetBaud+4
  9974  16FF  01DE               	clrf	??_SetBaud+5
  9975  1700  01DF               	clrf	??_SetBaud+6
  9976  1701  01E0               	clrf	??_SetBaud+7
  9977  1702  0860               	movf	??_SetBaud+7,w
  9978  1703  0022               	movlb	2	; select bank2
  9979  1704  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9980  1705  0020               	movlb	0	; select bank0
  9981  1706  085F               	movf	??_SetBaud+6,w
  9982  1707  0022               	movlb	2	; select bank2
  9983  1708  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9984  1709  0020               	movlb	0	; select bank0
  9985  170A  085E               	movf	??_SetBaud+5,w
  9986  170B  0022               	movlb	2	; select bank2
  9987  170C  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9988  170D  0020               	movlb	0	; select bank0
  9989  170E  085D               	movf	??_SetBaud+4,w
  9990  170F  0022               	movlb	2	; select bank2
  9991  1710  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9992                           
  9993                           ;UART.c: 390: InitUART(Baud, Parity);
  9994  1711  0020               	movlb	0	; select bank0
  9995  1712  0857               	movf	SetBaud@Baud+3,w
  9996  1713  00B6               	movwf	InitUART@Baud+3
  9997  1714  0856               	movf	SetBaud@Baud+2,w
  9998  1715  00B5               	movwf	InitUART@Baud+2
  9999  1716  0855               	movf	SetBaud@Baud+1,w
 10000  1717  00B4               	movwf	InitUART@Baud+1
 10001  1718  0854               	movf	SetBaud@Baud,w
 10002  1719  00B3               	movwf	InitUART@Baud
 10003  171A  0858               	movf	SetBaud@Parity,w
 10004  171B  00D9               	movwf	??_SetBaud
 10005  171C  0859               	movf	??_SetBaud,w
 10006  171D  00B7               	movwf	InitUART@parity
 10007  171E  3191  21CA  3196   	fcall	_InitUART
 10008                           
 10009                           ;UART.c: 391: UARTstringWAIT("\r\n");
 10010  1721  3056               	movlw	low ((STR_11+17)| (0+32768))
 10011  1722  0020               	movlb	0	; select bank0
 10012  1723  00B4               	movwf	UARTstringWAIT@data
 10013  1724  308B               	movlw	high ((STR_11+17)| (0+32768))
 10014  1725  00B5               	movwf	UARTstringWAIT@data+1
 10015  1726  319B  2370  3196   	fcall	_UARTstringWAIT
 10016                           
 10017                           ;UART.c: 392: delayUS(10000);
 10018  1729  3000               	movlw	0
 10019  172A  0020               	movlb	0	; select bank0
 10020  172B  00A8               	movwf	delayUS@US+3
 10021  172C  3000               	movlw	0
 10022  172D  00A7               	movwf	delayUS@US+2
 10023  172E  3027               	movlw	39
 10024  172F  00A6               	movwf	delayUS@US+1
 10025  1730  3010               	movlw	16
 10026  1731  00A5               	movwf	delayUS@US
 10027  1732  3190  2002  3196   	fcall	_delayUS
 10028                           
 10029                           ;UART.c: 393: if((Baud != Baudtemp) || (Parity != Paritytemp))
 10030  1735  0022               	movlb	2	; select bank2
 10031  1736  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
 10032  1737  0020               	movlb	0	; select bank0
 10033  1738  0657               	xorwf	SetBaud@Baud+3,w
 10034  1739  1D03               	skipz
 10035  173A  2F4B               	goto	u7985
 10036  173B  0022               	movlb	2	; select bank2
 10037  173C  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
 10038  173D  0020               	movlb	0	; select bank0
 10039  173E  0656               	xorwf	SetBaud@Baud+2,w
 10040  173F  1D03               	skipz
 10041  1740  2F4B               	goto	u7985
 10042  1741  0022               	movlb	2	; select bank2
 10043  1742  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
 10044  1743  0020               	movlb	0	; select bank0
 10045  1744  0655               	xorwf	SetBaud@Baud+1,w
 10046  1745  1D03               	skipz
 10047  1746  2F4B               	goto	u7985
 10048  1747  0022               	movlb	2	; select bank2
 10049  1748  0852               	movf	SetBaud@Baudtemp^(0+256),w
 10050  1749  0020               	movlb	0	; select bank0
 10051  174A  0654               	xorwf	SetBaud@Baud,w
 10052  174B                     u7985:	
 10053  174B  1D03               	skipz
 10054  174C  2F6A               	goto	l6165
 10055  174D  0858               	movf	SetBaud@Parity,w
 10056  174E  00D9               	movwf	??_SetBaud
 10057  174F  01DA               	clrf	??_SetBaud+1
 10058  1750  01DB               	clrf	??_SetBaud+2
 10059  1751  01DC               	clrf	??_SetBaud+3
 10060  1752  0022               	movlb	2	; select bank2
 10061  1753  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
 10062  1754  0020               	movlb	0	; select bank0
 10063  1755  065C               	xorwf	??_SetBaud+3,w
 10064  1756  1D03               	skipz
 10065  1757  2F68               	goto	u7995
 10066  1758  0022               	movlb	2	; select bank2
 10067  1759  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
 10068  175A  0020               	movlb	0	; select bank0
 10069  175B  065B               	xorwf	??_SetBaud+2,w
 10070  175C  1D03               	skipz
 10071  175D  2F68               	goto	u7995
 10072  175E  0022               	movlb	2	; select bank2
 10073  175F  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10074  1760  0020               	movlb	0	; select bank0
 10075  1761  065A               	xorwf	??_SetBaud+1,w
 10076  1762  1D03               	skipz
 10077  1763  2F68               	goto	u7995
 10078  1764  0022               	movlb	2	; select bank2
 10079  1765  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10080  1766  0020               	movlb	0	; select bank0
 10081  1767  0659               	xorwf	??_SetBaud,w
 10082  1768                     u7995:	
 10083  1768  1903               	skipnz
 10084  1769  2F7D               	goto	l6169
 10085  176A                     l6165:	
 10086                           
 10087                           ;UART.c: 394: {
 10088                           ;UART.c: 395: UARTstringWAIT("KeyBoard Program Fail\r\n");
 10089  176A  30A6               	movlw	low (STR_23| (0+32768))
 10090  176B  00B4               	movwf	UARTstringWAIT@data
 10091  176C  308A               	movlw	high (STR_23| (0+32768))
 10092  176D  00B5               	movwf	UARTstringWAIT@data+1
 10093  176E  319B  2370  3196   	fcall	_UARTstringWAIT
 10094                           
 10095                           ;UART.c: 396: delayUS(10000);
 10096  1771  3000               	movlw	0
 10097  1772  0020               	movlb	0	; select bank0
 10098  1773  00A8               	movwf	delayUS@US+3
 10099  1774  3000               	movlw	0
 10100  1775  00A7               	movwf	delayUS@US+2
 10101  1776  3027               	movlw	39
 10102  1777  00A6               	movwf	delayUS@US+1
 10103  1778  3010               	movlw	16
 10104  1779  00A5               	movwf	delayUS@US
 10105  177A  3190  2002  3196   	fcall	_delayUS
 10106  177D                     l6169:	
 10107                           
 10108                           ;UART.c: 397: }
 10109                           ;UART.c: 400: for(i =0;i<10;i++)
 10110  177D  0022               	movlb	2	; select bank2
 10111  177E  01DE               	clrf	SetBaud@i^(0+256)
 10112  177F  300A               	movlw	10
 10113  1780  025E               	subwf	SetBaud@i^(0+256),w
 10114  1781  1803               	btfsc	3,0
 10115  1782  2FAC               	goto	l6183
 10116  1783                     l436:	
 10117                           
 10118                           ;UART.c: 401: {
 10119                           ;UART.c: 402: LATC |= 0b00010000;
 10120  1783  160E               	bsf	14,4	;volatile
 10121                           
 10122                           ;UART.c: 403: delayUS(10000);
 10123  1784  3000               	movlw	0
 10124  1785  0020               	movlb	0	; select bank0
 10125  1786  00A8               	movwf	delayUS@US+3
 10126  1787  3000               	movlw	0
 10127  1788  00A7               	movwf	delayUS@US+2
 10128  1789  3027               	movlw	39
 10129  178A  00A6               	movwf	delayUS@US+1
 10130  178B  3010               	movlw	16
 10131  178C  00A5               	movwf	delayUS@US
 10132  178D  3190  2002  3196   	fcall	_delayUS
 10133                           
 10134                           ;UART.c: 404: LATC &= ~0b00010000;
 10135  1790  30EF               	movlw	239
 10136  1791  0020               	movlb	0	; select bank0
 10137  1792  00D9               	movwf	??_SetBaud
 10138  1793  0859               	movf	??_SetBaud,w
 10139  1794  0022               	movlb	2	; select bank2
 10140  1795  058E               	andwf	14,f	;volatile
 10141                           
 10142                           ;UART.c: 405: delayUS(10000);
 10143  1796  3000               	movlw	0
 10144  1797  0020               	movlb	0	; select bank0
 10145  1798  00A8               	movwf	delayUS@US+3
 10146  1799  3000               	movlw	0
 10147  179A  00A7               	movwf	delayUS@US+2
 10148  179B  3027               	movlw	39
 10149  179C  00A6               	movwf	delayUS@US+1
 10150  179D  3010               	movlw	16
 10151  179E  00A5               	movwf	delayUS@US
 10152  179F  3190  2002  3196   	fcall	_delayUS
 10153  17A2  3001               	movlw	1
 10154  17A3  0020               	movlb	0	; select bank0
 10155  17A4  00D9               	movwf	??_SetBaud
 10156  17A5  0859               	movf	??_SetBaud,w
 10157  17A6  0022               	movlb	2	; select bank2
 10158  17A7  07DE               	addwf	SetBaud@i^(0+256),f
 10159  17A8  300A               	movlw	10
 10160  17A9  025E               	subwf	SetBaud@i^(0+256),w
 10161  17AA  1C03               	skipc
 10162  17AB  2F83               	goto	l436
 10163  17AC                     l6183:	
 10164                           
 10165                           ;UART.c: 406: }
 10166                           ;UART.c: 408: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 10167  17AC  3020               	movlw	low SetBaud@buf
 10168  17AD  0020               	movlb	0	; select bank0
 10169  17AE  00BD               	movwf	sprintf@sp
 10170  17AF  3001               	movlw	high SetBaud@buf
 10171  17B0  00BE               	movwf	sprintf@sp+1
 10172  17B1  301B               	movlw	low (STR_16| (0+32768))
 10173  17B2  00BF               	movwf	sprintf@f
 10174  17B3  308B               	movlw	high (STR_16| (0+32768))
 10175  17B4  00C0               	movwf	sprintf@f+1
 10176  17B5  0857               	movf	SetBaud@Baud+3,w
 10177  17B6  00C4               	movwf	?_sprintf+7
 10178  17B7  0856               	movf	SetBaud@Baud+2,w
 10179  17B8  00C3               	movwf	?_sprintf+6
 10180  17B9  0855               	movf	SetBaud@Baud+1,w
 10181  17BA  00C2               	movwf	?_sprintf+5
 10182  17BB  0854               	movf	SetBaud@Baud,w
 10183  17BC  00C1               	movwf	?_sprintf+4
 10184  17BD  3194  249F  3196   	fcall	_sprintf
 10185                           
 10186                           ;UART.c: 409: UARTstringWAIT(buf);
 10187  17C0  3020               	movlw	low SetBaud@buf
 10188  17C1  0020               	movlb	0	; select bank0
 10189  17C2  00B4               	movwf	UARTstringWAIT@data
 10190  17C3  3001               	movlw	high SetBaud@buf
 10191  17C4  00B5               	movwf	UARTstringWAIT@data+1
 10192  17C5  319B  2370  3196   	fcall	_UARTstringWAIT
 10193                           
 10194                           ;UART.c: 410: if(Parity)
 10195  17C8  0020               	movlb	0	; select bank0
 10196  17C9  0858               	movf	SetBaud@Parity,w
 10197  17CA  1903               	btfsc	3,2
 10198  17CB  2FED               	goto	l6203
 10199                           
 10200                           ;UART.c: 411: {
 10201                           ;UART.c: 412: switch (Parity)
 10202  17CC  2FE0               	goto	l6201
 10203  17CD                     l6191:	
 10204                           ;UART.c: 413: {
 10205                           ;UART.c: 414: case 1:
 10206                           
 10207                           
 10208                           ;UART.c: 415: UARTstringWAIT(" with Odd parity bit\r\n");
 10209  17CD  30EE               	movlw	low (STR_17| (0+32768))
 10210  17CE  00B4               	movwf	UARTstringWAIT@data
 10211  17CF  308A               	movlw	high (STR_17| (0+32768))
 10212  17D0  2FF0               	goto	L17
 10213  17D1                     l6193:	
 10214                           ;UART.c: 417: case 2:
 10215                           
 10216                           ;UART.c: 416: break;
 10217                           
 10218                           
 10219                           ;UART.c: 418: UARTstringWAIT(" with Even parity bit\r\n");
 10220  17D1  30BE               	movlw	low (STR_18| (0+32768))
 10221  17D2  0020               	movlb	0	; select bank0
 10222  17D3  00B4               	movwf	UARTstringWAIT@data
 10223  17D4  308A               	movlw	high (STR_18| (0+32768))
 10224  17D5  2FF0               	goto	L17
 10225  17D6                     l6195:	
 10226                           ;UART.c: 420: case 3:
 10227                           
 10228                           ;UART.c: 419: break;
 10229                           
 10230                           
 10231                           ;UART.c: 421: UARTstringWAIT(" with Mark bit\r\n");
 10232  17D6  30A3               	movlw	low (STR_19| (0+32768))
 10233  17D7  0020               	movlb	0	; select bank0
 10234  17D8  00B4               	movwf	UARTstringWAIT@data
 10235  17D9  308B               	movlw	high (STR_19| (0+32768))
 10236  17DA  2FF0               	goto	L17
 10237  17DB                     l6197:	
 10238                           ;UART.c: 423: default:
 10239                           
 10240                           ;UART.c: 422: break;
 10241                           
 10242                           
 10243                           ;UART.c: 424: UARTstringWAIT(" with Space bit\r\n");
 10244  17DB  3091               	movlw	low (STR_20| (0+32768))
 10245  17DC  0020               	movlb	0	; select bank0
 10246  17DD  00B4               	movwf	UARTstringWAIT@data
 10247  17DE  308B               	movlw	high (STR_20| (0+32768))
 10248  17DF  2FF0               	goto	L17
 10249  17E0                     l6201:	
 10250                           ;UART.c: 426: }
 10251                           
 10252                           ;UART.c: 425: break;
 10253                           
 10254  17E0  0020               	movlb	0	; select bank0
 10255  17E1  0858               	movf	SetBaud@Parity,w
 10256                           
 10257                           ; Switch size 1, requested type "space"
 10258                           ; Number of cases is 3, Range of values is 1 to 3
 10259                           ; switch strategies available:
 10260                           ; Name         Instructions Cycles
 10261                           ; simple_byte           10     6 (average)
 10262                           ; direct_byte           15     9 (fixed)
 10263                           ; jumptable            263     9 (fixed)
 10264                           ;	Chosen strategy is simple_byte
 10265  17E2  3A01               	xorlw	1	; case 1
 10266  17E3  1903               	skipnz
 10267  17E4  2FCD               	goto	l6191
 10268  17E5  3A03               	xorlw	3	; case 2
 10269  17E6  1903               	skipnz
 10270  17E7  2FD1               	goto	l6193
 10271  17E8  3A01               	xorlw	1	; case 3
 10272  17E9  1903               	skipnz
 10273  17EA  2FD6               	goto	l6195
 10274  17EB  2FDB               	goto	l6197
 10275                           
 10276                           ;UART.c: 427: }
 10277  17EC  2FF4               	goto	l6205
 10278  17ED                     l6203:	
 10279                           
 10280                           ;UART.c: 428: else
 10281                           ;UART.c: 429: {
 10282                           ;UART.c: 430: UARTstringWAIT(" with no parity bit\r\n");
 10283  17ED  3011               	movlw	low ((STR_32+22)| (0+32768))
 10284  17EE  00B4               	movwf	UARTstringWAIT@data
 10285  17EF  308A               	movlw	high ((STR_32+22)| (0+32768))
 10286  17F0                     L17:	
 10287  17F0  00B5               	movwf	UARTstringWAIT@data+1
 10288  17F1  319B  2370  3196   	fcall	_UARTstringWAIT
 10289  17F4                     l6205:	
 10290                           
 10291                           ;UART.c: 431: }
 10292                           ;UART.c: 432: delayUS(10000);
 10293  17F4  3000               	movlw	0
 10294  17F5  0020               	movlb	0	; select bank0
 10295  17F6  00A8               	movwf	delayUS@US+3
 10296  17F7  3000               	movlw	0
 10297  17F8  00A7               	movwf	delayUS@US+2
 10298  17F9  3027               	movlw	39
 10299  17FA  00A6               	movwf	delayUS@US+1
 10300  17FB  3010               	movlw	16
 10301  17FC  00A5               	movwf	delayUS@US
 10302  17FD  3190  2002         	fcall	_delayUS
 10303  17FF  0008               	return
 10304  1800                     __end_of_SetBaud:	
 10305                           
 10306                           	psect	text16
 10307  1E6D                     __ptext16:	
 10308 ;; *************** function _WriteBaud *****************
 10309 ;; Defined at:
 10310 ;;		line 171 in file "FLASH.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;  row             2   22[BANK0 ] unsigned int 
 10313 ;;  Baud            4   24[BANK0 ] unsigned long 
 10314 ;;  Parity          1   28[BANK0 ] unsigned char 
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;  temp            4   37[BANK0 ] unsigned long 
 10317 ;; Return value:  Size  Location     Type
 10318 ;;		None               void
 10319 ;; Registers used:
 10320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10326 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;Total ram usage:       19 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    6
 10333 ;; This function calls:
 10334 ;;		_WriteFlash_Sequential
 10335 ;; This function is called by:
 10336 ;;		_SetBaud
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _WriteBaud
 10342  1E6D                     _WriteBaud:	
 10343                           
 10344                           ;FLASH.c: 173: unsigned long temp;
 10345                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10349  1E6D  0020               	movlb	0	; select bank0
 10350  1E6E  083C               	movf	WriteBaud@Parity,w
 10351  1E6F  3907               	andlw	7
 10352  1E70  00BD               	movwf	??_WriteBaud
 10353  1E71  01BE               	clrf	??_WriteBaud+1
 10354  1E72  01BF               	clrf	??_WriteBaud+2
 10355  1E73  01C0               	clrf	??_WriteBaud+3
 10356  1E74  3014               	movlw	20
 10357  1E75                     u7845:	
 10358  1E75  35BD               	lslf	??_WriteBaud,f
 10359  1E76  0DBE               	rlf	??_WriteBaud+1,f
 10360  1E77  0DBF               	rlf	??_WriteBaud+2,f
 10361  1E78  0DC0               	rlf	??_WriteBaud+3,f
 10362  1E79  0B89               	decfsz	9,f
 10363  1E7A  2E75               	goto	u7845
 10364  1E7B  30FF               	movlw	255
 10365  1E7C  0538               	andwf	WriteBaud@Baud,w
 10366  1E7D  00C1               	movwf	??_WriteBaud+4
 10367  1E7E  30FF               	movlw	255
 10368  1E7F  0539               	andwf	WriteBaud@Baud+1,w
 10369  1E80  00C2               	movwf	??_WriteBaud+5
 10370  1E81  300F               	movlw	15
 10371  1E82  053A               	andwf	WriteBaud@Baud+2,w
 10372  1E83  00C3               	movwf	??_WriteBaud+6
 10373  1E84  3000               	movlw	0
 10374  1E85  053B               	andwf	WriteBaud@Baud+3,w
 10375  1E86  00C4               	movwf	??_WriteBaud+7
 10376  1E87  0841               	movf	??_WriteBaud+4,w
 10377  1E88  07BD               	addwf	??_WriteBaud,f
 10378  1E89  0842               	movf	??_WriteBaud+5,w
 10379  1E8A  3DBE               	addwfc	??_WriteBaud+1,f
 10380  1E8B  0843               	movf	??_WriteBaud+6,w
 10381  1E8C  3DBF               	addwfc	??_WriteBaud+2,f
 10382  1E8D  0844               	movf	??_WriteBaud+7,w
 10383  1E8E  3DC0               	addwfc	??_WriteBaud+3,f
 10384  1E8F  0840               	movf	??_WriteBaud+3,w
 10385  1E90  00C8               	movwf	WriteBaud@temp+3
 10386  1E91  083F               	movf	??_WriteBaud+2,w
 10387  1E92  00C7               	movwf	WriteBaud@temp+2
 10388  1E93  083E               	movf	??_WriteBaud+1,w
 10389  1E94  00C6               	movwf	WriteBaud@temp+1
 10390  1E95  083D               	movf	??_WriteBaud,w
 10391  1E96  00C5               	movwf	WriteBaud@temp
 10392                           
 10393                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10394  1E97  30FF               	movlw	255
 10395  1E98  0545               	andwf	WriteBaud@temp,w
 10396  1E99  0024               	movlb	4	; select bank4
 10397  1E9A  00A8               	movwf	(_MEM^(0+512)+2)
 10398  1E9B  303F               	movlw	63
 10399  1E9C  0020               	movlb	0	; select bank0
 10400  1E9D  0546               	andwf	WriteBaud@temp+1,w
 10401  1E9E  0024               	movlb	4	; select bank4
 10402  1E9F  00A9               	movwf	((_MEM+1)^(0+512)+2)
 10403                           
 10404                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10405  1EA0  0020               	movlb	0	; select bank0
 10406  1EA1  0845               	movf	WriteBaud@temp,w
 10407  1EA2  00BD               	movwf	??_WriteBaud
 10408  1EA3  0846               	movf	WriteBaud@temp+1,w
 10409  1EA4  00BE               	movwf	??_WriteBaud+1
 10410  1EA5  0847               	movf	WriteBaud@temp+2,w
 10411  1EA6  00BF               	movwf	??_WriteBaud+2
 10412  1EA7  0848               	movf	WriteBaud@temp+3,w
 10413  1EA8  00C0               	movwf	??_WriteBaud+3
 10414  1EA9  300E               	movlw	14
 10415  1EAA                     u7855:	
 10416  1EAA  36C0               	lsrf	??_WriteBaud+3,f
 10417  1EAB  0CBF               	rrf	??_WriteBaud+2,f
 10418  1EAC  0CBE               	rrf	??_WriteBaud+1,f
 10419  1EAD  0CBD               	rrf	??_WriteBaud,f
 10420  1EAE  0B89               	decfsz	9,f
 10421  1EAF  2EAA               	goto	u7855
 10422  1EB0  30FF               	movlw	255
 10423  1EB1  053D               	andwf	??_WriteBaud,w
 10424  1EB2  0024               	movlb	4	; select bank4
 10425  1EB3  00A6               	movwf	_MEM^(0+512)
 10426  1EB4  303F               	movlw	63
 10427  1EB5  0020               	movlb	0	; select bank0
 10428  1EB6  053E               	andwf	??_WriteBaud+1,w
 10429  1EB7  0024               	movlb	4	; select bank4
 10430  1EB8  00A7               	movwf	(_MEM+1)^(0+512)
 10431                           
 10432                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 10433  1EB9  0020               	movlb	0	; select bank0
 10434  1EBA  0837               	movf	WriteBaud@row+1,w
 10435  1EBB  01B0               	clrf	WriteFlash_Sequential@row+1
 10436  1EBC  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10437  1EBD  0836               	movf	WriteBaud@row,w
 10438  1EBE  01AF               	clrf	WriteFlash_Sequential@row
 10439  1EBF  07AF               	addwf	WriteFlash_Sequential@row,f
 10440  1EC0  3026               	movlw	_MEM& (0+255)
 10441  1EC1  00BD               	movwf	??_WriteBaud
 10442  1EC2  083D               	movf	??_WriteBaud,w
 10443  1EC3  00B1               	movwf	WriteFlash_Sequential@buffer
 10444  1EC4  3002               	movlw	2
 10445  1EC5  00BE               	movwf	??_WriteBaud+1
 10446  1EC6  083E               	movf	??_WriteBaud+1,w
 10447  1EC7  00B2               	movwf	WriteFlash_Sequential@amount
 10448  1EC8  3192  22BA         	fcall	_WriteFlash_Sequential
 10449  1ECA  0008               	return
 10450  1ECB                     __end_of_WriteBaud:	
 10451                           
 10452                           	psect	text17
 10453  12BA                     __ptext17:	
 10454 ;; *************** function _WriteFlash_Sequential *****************
 10455 ;; Defined at:
 10456 ;;		line 112 in file "FLASH.c"
 10457 ;; Parameters:    Size  Location     Type
 10458 ;;  row             2   15[BANK0 ] unsigned int 
 10459 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10460 ;;		 -> MEM(4), 
 10461 ;;  amount          1   18[BANK0 ] unsigned char 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10464 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10465 ;;  temp            2   67[BANK1 ] unsigned int 
 10466 ;;  i               1   70[BANK1 ] unsigned char 
 10467 ;;  spaces          1   69[BANK1 ] unsigned char 
 10468 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10469 ;;  tempL           1   65[BANK1 ] unsigned char 
 10470 ;;  tempH           1   64[BANK1 ] unsigned char 
 10471 ;; Return value:  Size  Location     Type
 10472 ;;		None               void
 10473 ;; Registers used:
 10474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/0
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10480 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;Total ram usage:       78 bytes
 10485 ;; Hardware stack levels used:    1
 10486 ;; Hardware stack levels required when called:    5
 10487 ;; This function calls:
 10488 ;;		_BlockErase
 10489 ;;		_ReadFlash_2Byte
 10490 ;;		_UNLOCK
 10491 ;;		_delayUS
 10492 ;; This function is called by:
 10493 ;;		_WriteBaud
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           
 10498                           ;psect for function _WriteFlash_Sequential
 10499  12BA                     _WriteFlash_Sequential:	
 10500                           
 10501                           ;FLASH.c: 114: unsigned char spaces = 32;
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10505  12BA  3020               	movlw	32
 10506  12BB  0020               	movlb	0	; select bank0
 10507  12BC  00B3               	movwf	??_WriteFlash_Sequential
 10508  12BD  0833               	movf	??_WriteFlash_Sequential,w
 10509  12BE  0021               	movlb	1	; select bank1
 10510  12BF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10511                           
 10512                           ;FLASH.c: 115: unsigned char tempH;
 10513                           ;FLASH.c: 116: unsigned char tempL;
 10514                           ;FLASH.c: 117: unsigned char i;
 10515                           ;FLASH.c: 118: unsigned int temp;
 10516                           ;FLASH.c: 119: unsigned char amountTemp =0;
 10517  12C0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10518                           
 10519                           ;FLASH.c: 120: unsigned char TempBufH[32];
 10520                           ;FLASH.c: 121: unsigned char TempBufL[32];
 10521                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 10522  12C1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10523  12C2                     l5809:	
 10524  12C2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10525  12C3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10526  12C4  1803               	btfsc	3,0
 10527  12C5  2B33               	goto	l5811
 10528                           
 10529                           ;FLASH.c: 124: {
 10530                           ;FLASH.c: 125: amountTemp++;
 10531  12C6  3001               	movlw	1
 10532  12C7  0020               	movlb	0	; select bank0
 10533  12C8  00B3               	movwf	??_WriteFlash_Sequential
 10534  12C9  0833               	movf	??_WriteFlash_Sequential,w
 10535  12CA  0021               	movlb	1	; select bank1
 10536  12CB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10537                           
 10538                           ;FLASH.c: 126: if(amountTemp <= amount)
 10539  12CC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10540  12CD  0020               	movlb	0	; select bank0
 10541  12CE  0232               	subwf	WriteFlash_Sequential@amount,w
 10542  12CF  1C03               	skipc
 10543  12D0  2AEF               	goto	l5797
 10544                           
 10545                           ;FLASH.c: 127: {
 10546                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10547  12D1  0831               	movf	WriteFlash_Sequential@buffer,w
 10548  12D2  0086               	movwf	6
 10549  12D3  3002               	movlw	2	; select bank4/5
 10550  12D4  0087               	movwf	7
 10551  12D5  3F40               	moviw [0]fsr1
 10552  12D6  00B3               	movwf	??_WriteFlash_Sequential
 10553  12D7  3F41               	moviw [1]fsr1
 10554  12D8  00B4               	movwf	??_WriteFlash_Sequential+1
 10555  12D9  0834               	movf	??_WriteFlash_Sequential+1,w
 10556  12DA  393F               	andlw	63
 10557  12DB  00B5               	movwf	??_WriteFlash_Sequential+2
 10558  12DC  0835               	movf	??_WriteFlash_Sequential+2,w
 10559  12DD  0021               	movlb	1	; select bank1
 10560  12DE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10561                           
 10562                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 10563  12DF  0020               	movlb	0	; select bank0
 10564  12E0  0831               	movf	WriteFlash_Sequential@buffer,w
 10565  12E1  0086               	movwf	6
 10566  12E2  3002               	movlw	2	; select bank4/5
 10567  12E3  0087               	movwf	7
 10568  12E4  0801               	movf	1,w
 10569  12E5  00B3               	movwf	??_WriteFlash_Sequential
 10570  12E6  0833               	movf	??_WriteFlash_Sequential,w
 10571  12E7  0021               	movlb	1	; select bank1
 10572  12E8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10573                           
 10574                           ;FLASH.c: 130: buffer++;
 10575  12E9  3002               	movlw	2
 10576  12EA  0020               	movlb	0	; select bank0
 10577  12EB  00B3               	movwf	??_WriteFlash_Sequential
 10578  12EC  0833               	movf	??_WriteFlash_Sequential,w
 10579  12ED  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10580                           
 10581                           ;FLASH.c: 131: }
 10582  12EE  2B15               	goto	l5803
 10583  12EF                     l5797:	
 10584                           
 10585                           ;FLASH.c: 132: else
 10586                           ;FLASH.c: 133: {
 10587                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 10588  12EF  0830               	movf	WriteFlash_Sequential@row+1,w
 10589  12F0  01A6               	clrf	ReadFlash_2Byte@row+1
 10590  12F1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10591  12F2  082F               	movf	WriteFlash_Sequential@row,w
 10592  12F3  01A5               	clrf	ReadFlash_2Byte@row
 10593  12F4  07A5               	addwf	ReadFlash_2Byte@row,f
 10594  12F5  0021               	movlb	1	; select bank1
 10595  12F6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10596  12F7  0020               	movlb	0	; select bank0
 10597  12F8  00B3               	movwf	??_WriteFlash_Sequential
 10598  12F9  0833               	movf	??_WriteFlash_Sequential,w
 10599  12FA  00A7               	movwf	ReadFlash_2Byte@column
 10600  12FB  319B  230B  3192   	fcall	_ReadFlash_2Byte
 10601  12FE  0020               	movlb	0	; select bank0
 10602  12FF  0826               	movf	?_ReadFlash_2Byte+1,w
 10603  1300  0021               	movlb	1	; select bank1
 10604  1301  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10605  1302  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10606  1303  0020               	movlb	0	; select bank0
 10607  1304  0825               	movf	?_ReadFlash_2Byte,w
 10608  1305  0021               	movlb	1	; select bank1
 10609  1306  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10610  1307  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10611                           
 10612                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10613  1308  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10614  1309  393F               	andlw	63
 10615  130A  0020               	movlb	0	; select bank0
 10616  130B  00B3               	movwf	??_WriteFlash_Sequential
 10617  130C  0833               	movf	??_WriteFlash_Sequential,w
 10618  130D  0021               	movlb	1	; select bank1
 10619  130E  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10620                           
 10621                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 10622  130F  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10623  1310  0020               	movlb	0	; select bank0
 10624  1311  00B3               	movwf	??_WriteFlash_Sequential
 10625  1312  0833               	movf	??_WriteFlash_Sequential,w
 10626  1313  0021               	movlb	1	; select bank1
 10627  1314  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10628  1315                     l5803:	
 10629                           
 10630                           ;FLASH.c: 138: }
 10631                           ;FLASH.c: 139: TempBufH[i] = tempH;
 10632  1315  0021               	movlb	1	; select bank1
 10633  1316  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10634  1317  0020               	movlb	0	; select bank0
 10635  1318  00B3               	movwf	??_WriteFlash_Sequential
 10636  1319  0021               	movlb	1	; select bank1
 10637  131A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10638  131B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10639  131C  0086               	movwf	6
 10640  131D  0187               	clrf	7
 10641  131E  0020               	movlb	0	; select bank0
 10642  131F  0833               	movf	??_WriteFlash_Sequential,w
 10643  1320  0081               	movwf	1
 10644                           
 10645                           ;FLASH.c: 140: TempBufL[i] = tempL;
 10646  1321  0021               	movlb	1	; select bank1
 10647  1322  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10648  1323  0020               	movlb	0	; select bank0
 10649  1324  00B3               	movwf	??_WriteFlash_Sequential
 10650  1325  0021               	movlb	1	; select bank1
 10651  1326  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10652  1327  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10653  1328  0086               	movwf	6
 10654  1329  0187               	clrf	7
 10655  132A  0020               	movlb	0	; select bank0
 10656  132B  0833               	movf	??_WriteFlash_Sequential,w
 10657  132C  0081               	movwf	1
 10658  132D  3001               	movlw	1
 10659  132E  00B3               	movwf	??_WriteFlash_Sequential
 10660  132F  0833               	movf	??_WriteFlash_Sequential,w
 10661  1330  0021               	movlb	1	; select bank1
 10662  1331  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10663  1332  2AC2               	goto	l5809
 10664  1333                     l5811:	
 10665                           
 10666                           ;FLASH.c: 141: }
 10667                           ;FLASH.c: 142: BlockErase(row);
 10668  1333  0020               	movlb	0	; select bank0
 10669  1334  0830               	movf	WriteFlash_Sequential@row+1,w
 10670  1335  01A6               	clrf	BlockErase@row+1
 10671  1336  07A6               	addwf	BlockErase@row+1,f
 10672  1337  082F               	movf	WriteFlash_Sequential@row,w
 10673  1338  01A5               	clrf	BlockErase@row
 10674  1339  07A5               	addwf	BlockErase@row,f
 10675  133A  319A  22DA  3192   	fcall	_BlockErase
 10676                           
 10677                           ;FLASH.c: 143: delayUS(1000);
 10678  133D  3000               	movlw	0
 10679  133E  0020               	movlb	0	; select bank0
 10680  133F  00A8               	movwf	delayUS@US+3
 10681  1340  3000               	movlw	0
 10682  1341  00A7               	movwf	delayUS@US+2
 10683  1342  3003               	movlw	3
 10684  1343  00A6               	movwf	delayUS@US+1
 10685  1344  30E8               	movlw	232
 10686  1345  00A5               	movwf	delayUS@US
 10687  1346  3190  2002  3192   	fcall	_delayUS
 10688                           
 10689                           ;FLASH.c: 144: INTCON &= ~0x80;
 10690  1349  307F               	movlw	127
 10691  134A  0020               	movlb	0	; select bank0
 10692  134B  00B3               	movwf	??_WriteFlash_Sequential
 10693  134C  0833               	movf	??_WriteFlash_Sequential,w
 10694  134D  058B               	andwf	11,f	;volatile
 10695                           
 10696                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 10697  134E  0023               	movlb	3	; select bank3
 10698  134F  1515               	bsf	21,2	;volatile
 10699                           
 10700                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 10701  1350  30BF               	movlw	191
 10702  1351  0020               	movlb	0	; select bank0
 10703  1352  00B3               	movwf	??_WriteFlash_Sequential
 10704  1353  0833               	movf	??_WriteFlash_Sequential,w
 10705  1354  0023               	movlb	3	; select bank3
 10706  1355  0595               	andwf	21,f	;volatile
 10707                           
 10708                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 10709  1356  30DF               	movlw	223
 10710  1357  0020               	movlb	0	; select bank0
 10711  1358  00B3               	movwf	??_WriteFlash_Sequential
 10712  1359  0833               	movf	??_WriteFlash_Sequential,w
 10713  135A  0023               	movlb	3	; select bank3
 10714  135B  0595               	andwf	21,f	;volatile
 10715                           
 10716                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 10717  135C  30EF               	movlw	239
 10718  135D  0020               	movlb	0	; select bank0
 10719  135E  00B3               	movwf	??_WriteFlash_Sequential
 10720  135F  0833               	movf	??_WriteFlash_Sequential,w
 10721  1360  0023               	movlb	3	; select bank3
 10722  1361  0595               	andwf	21,f	;volatile
 10723                           
 10724                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10725  1362  0020               	movlb	0	; select bank0
 10726  1363  0830               	movf	WriteFlash_Sequential@row+1,w
 10727  1364  00B4               	movwf	??_WriteFlash_Sequential+1
 10728  1365  082F               	movf	WriteFlash_Sequential@row,w
 10729  1366  00B3               	movwf	??_WriteFlash_Sequential
 10730  1367  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10731  1368  0CB3               	rrf	??_WriteFlash_Sequential,f
 10732  1369  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10733  136A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10734  136B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10735  136C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10736  136D  0833               	movf	??_WriteFlash_Sequential,w
 10737  136E  397F               	andlw	127
 10738  136F  0023               	movlb	3	; select bank3
 10739  1370  0092               	movwf	18	;volatile
 10740                           
 10741                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 10742  1371  0020               	movlb	0	; select bank0
 10743  1372  082F               	movf	WriteFlash_Sequential@row,w
 10744  1373  3907               	andlw	7
 10745  1374  00B3               	movwf	??_WriteFlash_Sequential
 10746  1375  3004               	movlw	4
 10747  1376                     u7515:	
 10748  1376  35B3               	lslf	??_WriteFlash_Sequential,f
 10749  1377  3EFF               	addlw	-1
 10750  1378  1D03               	skipz
 10751  1379  2B76               	goto	u7515
 10752  137A  3533               	lslf	??_WriteFlash_Sequential,w
 10753  137B  0023               	movlb	3	; select bank3
 10754  137C  0091               	movwf	17	;volatile
 10755                           
 10756                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 10757  137D  0021               	movlb	1	; select bank1
 10758  137E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10759  137F                     l5841:	
 10760  137F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10761  1380  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10762  1381  1803               	btfsc	3,0
 10763  1382  2BA4               	goto	l5843
 10764                           
 10765                           ;FLASH.c: 153: {
 10766                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 10767  1383  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10768  1384  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10769  1385  0086               	movwf	6
 10770  1386  0187               	clrf	7
 10771  1387  0801               	movf	1,w
 10772  1388  0023               	movlb	3	; select bank3
 10773  1389  0094               	movwf	20	;volatile
 10774                           
 10775                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 10776  138A  0021               	movlb	1	; select bank1
 10777  138B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10778  138C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10779  138D  0086               	movwf	6
 10780  138E  0187               	clrf	7
 10781  138F  0801               	movf	1,w
 10782  1390  0023               	movlb	3	; select bank3
 10783  1391  0093               	movwf	19	;volatile
 10784                           
 10785                           ;FLASH.c: 156: __nop();
 10786  1392  0000               	nop
 10787                           
 10788                           ;FLASH.c: 157: __nop();
 10789  1393  0000               	nop
 10790                           
 10791                           ;FLASH.c: 158: UNLOCK();
 10792  1394  3198  20F7  3192   	fcall	_UNLOCK
 10793                           
 10794                           ;FLASH.c: 159: PMADRL++;
 10795  1397  3001               	movlw	1
 10796  1398  0020               	movlb	0	; select bank0
 10797  1399  00B3               	movwf	??_WriteFlash_Sequential
 10798  139A  0833               	movf	??_WriteFlash_Sequential,w
 10799  139B  0023               	movlb	3	; select bank3
 10800  139C  0791               	addwf	17,f	;volatile
 10801  139D  3001               	movlw	1
 10802  139E  0020               	movlb	0	; select bank0
 10803  139F  00B3               	movwf	??_WriteFlash_Sequential
 10804  13A0  0833               	movf	??_WriteFlash_Sequential,w
 10805  13A1  0021               	movlb	1	; select bank1
 10806  13A2  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10807  13A3  2B7F               	goto	l5841
 10808  13A4                     l5843:	
 10809                           
 10810                           ;FLASH.c: 161: }
 10811                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 10812  13A4  30FB               	movlw	251
 10813  13A5  0020               	movlb	0	; select bank0
 10814  13A6  00B3               	movwf	??_WriteFlash_Sequential
 10815  13A7  0833               	movf	??_WriteFlash_Sequential,w
 10816  13A8  0023               	movlb	3	; select bank3
 10817  13A9  0595               	andwf	21,f	;volatile
 10818                           
 10819                           ;FLASH.c: 163: INTCON |= 0x80;
 10820  13AA  178B               	bsf	11,7	;volatile
 10821  13AB  0008               	return
 10822  13AC                     __end_of_WriteFlash_Sequential:	
 10823                           
 10824                           	psect	text18
 10825  1ADA                     __ptext18:	
 10826 ;; *************** function _BlockErase *****************
 10827 ;; Defined at:
 10828 ;;		line 91 in file "FLASH.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  row             2    5[BANK0 ] unsigned int 
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        4 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    4
 10849 ;; This function calls:
 10850 ;;		_UNLOCK
 10851 ;; This function is called by:
 10852 ;;		_WriteFlash_Sequential
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _BlockErase
 10858  1ADA                     _BlockErase:	
 10859                           
 10860                           ;FLASH.c: 93: INTCON &= ~0x80;
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10864  1ADA  307F               	movlw	127
 10865  1ADB  0020               	movlb	0	; select bank0
 10866  1ADC  00A7               	movwf	??_BlockErase
 10867  1ADD  0827               	movf	??_BlockErase,w
 10868  1ADE  058B               	andwf	11,f	;volatile
 10869                           
 10870                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 10871  1ADF  30BF               	movlw	191
 10872  1AE0  00A7               	movwf	??_BlockErase
 10873  1AE1  0827               	movf	??_BlockErase,w
 10874  1AE2  0023               	movlb	3	; select bank3
 10875  1AE3  0595               	andwf	21,f	;volatile
 10876                           
 10877                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10878  1AE4  0020               	movlb	0	; select bank0
 10879  1AE5  0826               	movf	BlockErase@row+1,w
 10880  1AE6  00A8               	movwf	??_BlockErase+1
 10881  1AE7  0825               	movf	BlockErase@row,w
 10882  1AE8  00A7               	movwf	??_BlockErase
 10883  1AE9  36A8               	lsrf	??_BlockErase+1,f
 10884  1AEA  0CA7               	rrf	??_BlockErase,f
 10885  1AEB  36A8               	lsrf	??_BlockErase+1,f
 10886  1AEC  0CA7               	rrf	??_BlockErase,f
 10887  1AED  36A8               	lsrf	??_BlockErase+1,f
 10888  1AEE  0CA7               	rrf	??_BlockErase,f
 10889  1AEF  0827               	movf	??_BlockErase,w
 10890  1AF0  397F               	andlw	127
 10891  1AF1  0023               	movlb	3	; select bank3
 10892  1AF2  0092               	movwf	18	;volatile
 10893                           
 10894                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 10895  1AF3  0020               	movlb	0	; select bank0
 10896  1AF4  0825               	movf	BlockErase@row,w
 10897  1AF5  3907               	andlw	7
 10898  1AF6  00A7               	movwf	??_BlockErase
 10899  1AF7  3004               	movlw	4
 10900  1AF8                     u7355:	
 10901  1AF8  35A7               	lslf	??_BlockErase,f
 10902  1AF9  3EFF               	addlw	-1
 10903  1AFA  1D03               	skipz
 10904  1AFB  2AF8               	goto	u7355
 10905  1AFC  3527               	lslf	??_BlockErase,w
 10906  1AFD  0023               	movlb	3	; select bank3
 10907  1AFE  0091               	movwf	17	;volatile
 10908                           
 10909                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 10910  1AFF  1615               	bsf	21,4	;volatile
 10911                           
 10912                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 10913  1B00  1515               	bsf	21,2	;volatile
 10914                           
 10915                           ;FLASH.c: 99: UNLOCK();
 10916  1B01  3198  20F7         	fcall	_UNLOCK
 10917                           
 10918                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 10919  1B03  30FB               	movlw	251
 10920  1B04  0020               	movlb	0	; select bank0
 10921  1B05  00A7               	movwf	??_BlockErase
 10922  1B06  0827               	movf	??_BlockErase,w
 10923  1B07  0023               	movlb	3	; select bank3
 10924  1B08  0595               	andwf	21,f	;volatile
 10925                           
 10926                           ;FLASH.c: 101: INTCON |= 0x80;
 10927  1B09  178B               	bsf	11,7	;volatile
 10928  1B0A  0008               	return
 10929  1B0B                     __end_of_BlockErase:	
 10930                           
 10931                           	psect	text19
 10932  18F7                     __ptext19:	
 10933 ;; *************** function _UNLOCK *****************
 10934 ;; Defined at:
 10935 ;;		line 76 in file "FLASH.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;		None
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;		None
 10940 ;; Return value:  Size  Location     Type
 10941 ;;		None               void
 10942 ;; Registers used:
 10943 ;;		wreg
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;Total ram usage:        0 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    3
 10956 ;; This function calls:
 10957 ;;		Nothing
 10958 ;; This function is called by:
 10959 ;;		_BlockErase
 10960 ;;		_WriteFlash_Sequential
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           
 10965                           ;psect for function _UNLOCK
 10966  18F7                     _UNLOCK:	
 10967                           
 10968                           ;FLASH.c: 78: PMCON2 = 0x55;
 10969                           
 10970                           ;incstack = 0
 10971                           ; Regs used in _UNLOCK: [wreg]
 10972  18F7  3055               	movlw	85
 10973  18F8  0023               	movlb	3	; select bank3
 10974  18F9  0096               	movwf	22	;volatile
 10975                           
 10976                           ;FLASH.c: 79: PMCON2 = 0xAA;
 10977  18FA  30AA               	movlw	170
 10978  18FB  0096               	movwf	22	;volatile
 10979                           
 10980                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 10981  18FC  1495               	bsf	21,1	;volatile
 10982  18FD                     l910:	
 10983                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 10984                           
 10985  18FD  1895               	btfsc	21,1	;volatile
 10986  18FE  28FD               	goto	l910
 10987                           
 10988                           ;FLASH.c: 82: __nop();
 10989  18FF  0000               	nop
 10990                           
 10991                           ;FLASH.c: 83: __nop();
 10992  1900  0000               	nop
 10993  1901  0008               	return
 10994  1902                     __end_of_UNLOCK:	
 10995                           
 10996                           	psect	text20
 10997  1D0D                     __ptext20:	
 10998 ;; *************** function _Reverse_Byte *****************
 10999 ;; Defined at:
 11000 ;;		line 105 in file "MISC.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  This            1    wreg     unsigned char 
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;  This            1    8[BANK0 ] unsigned char 
 11005 ;;  temp            1    7[BANK0 ] unsigned char 
 11006 ;; Return value:  Size  Location     Type
 11007 ;;                  1    wreg      unsigned char 
 11008 ;; Registers used:
 11009 ;;		wreg, status,2, status,0
 11010 ;; Tracked objects:
 11011 ;;		On entry : 0/0
 11012 ;;		On exit  : 0/0
 11013 ;;		Unchanged: 0/0
 11014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;Total ram usage:        4 bytes
 11020 ;; Hardware stack levels used:    1
 11021 ;; Hardware stack levels required when called:    3
 11022 ;; This function calls:
 11023 ;;		Nothing
 11024 ;; This function is called by:
 11025 ;;		_PS_2_Update
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _Reverse_Byte
 11031  1D0D                     _Reverse_Byte:	
 11032                           
 11033                           ;incstack = 0
 11034                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 11035                           ;Reverse_Byte@This stored from wreg
 11036  1D0D  0020               	movlb	0	; select bank0
 11037  1D0E  00A8               	movwf	Reverse_Byte@This
 11038                           
 11039                           ;MISC.c: 107: unsigned char temp=0;
 11040  1D0F  01A7               	clrf	Reverse_Byte@temp
 11041                           
 11042                           ;MISC.c: 109: temp += (This & 0x01) << 7;
 11043  1D10  0828               	movf	Reverse_Byte@This,w
 11044  1D11  3901               	andlw	1
 11045  1D12  00A5               	movwf	??_Reverse_Byte
 11046  1D13  3006               	movlw	6
 11047  1D14                     u7895:	
 11048  1D14  35A5               	lslf	??_Reverse_Byte,f
 11049  1D15  3EFF               	addlw	-1
 11050  1D16  1D03               	skipz
 11051  1D17  2D14               	goto	u7895
 11052  1D18  3525               	lslf	??_Reverse_Byte,w
 11053  1D19  00A6               	movwf	??_Reverse_Byte+1
 11054  1D1A  0826               	movf	??_Reverse_Byte+1,w
 11055  1D1B  07A7               	addwf	Reverse_Byte@temp,f
 11056                           
 11057                           ;MISC.c: 110: temp += (This & 0x02) << 5;
 11058  1D1C  0828               	movf	Reverse_Byte@This,w
 11059  1D1D  3902               	andlw	2
 11060  1D1E  00A5               	movwf	??_Reverse_Byte
 11061  1D1F  3004               	movlw	4
 11062  1D20                     u7905:	
 11063  1D20  35A5               	lslf	??_Reverse_Byte,f
 11064  1D21  3EFF               	addlw	-1
 11065  1D22  1D03               	skipz
 11066  1D23  2D20               	goto	u7905
 11067  1D24  3525               	lslf	??_Reverse_Byte,w
 11068  1D25  00A6               	movwf	??_Reverse_Byte+1
 11069  1D26  0826               	movf	??_Reverse_Byte+1,w
 11070  1D27  07A7               	addwf	Reverse_Byte@temp,f
 11071                           
 11072                           ;MISC.c: 111: temp += (This & 0x04) << 3;
 11073  1D28  0828               	movf	Reverse_Byte@This,w
 11074  1D29  3904               	andlw	4
 11075  1D2A  00A5               	movwf	??_Reverse_Byte
 11076  1D2B  3002               	movlw	2
 11077  1D2C                     u7915:	
 11078  1D2C  35A5               	lslf	??_Reverse_Byte,f
 11079  1D2D  3EFF               	addlw	-1
 11080  1D2E  1D03               	skipz
 11081  1D2F  2D2C               	goto	u7915
 11082  1D30  3525               	lslf	??_Reverse_Byte,w
 11083  1D31  00A6               	movwf	??_Reverse_Byte+1
 11084  1D32  0826               	movf	??_Reverse_Byte+1,w
 11085  1D33  07A7               	addwf	Reverse_Byte@temp,f
 11086                           
 11087                           ;MISC.c: 112: temp += (This & 0x08) << 1;
 11088  1D34  0828               	movf	Reverse_Byte@This,w
 11089  1D35  3908               	andlw	8
 11090  1D36  0709               	addwf	9,w
 11091  1D37  00A5               	movwf	??_Reverse_Byte
 11092  1D38  0825               	movf	??_Reverse_Byte,w
 11093  1D39  07A7               	addwf	Reverse_Byte@temp,f
 11094                           
 11095                           ;MISC.c: 113: temp += (This & 0x10) >> 1;
 11096  1D3A  3628               	lsrf	Reverse_Byte@This,w
 11097  1D3B  3908               	andlw	8
 11098  1D3C  00A5               	movwf	??_Reverse_Byte
 11099  1D3D  0825               	movf	??_Reverse_Byte,w
 11100  1D3E  07A7               	addwf	Reverse_Byte@temp,f
 11101                           
 11102                           ;MISC.c: 114: temp += (This & 0x20) >> 3;
 11103  1D3F  0828               	movf	Reverse_Byte@This,w
 11104  1D40  00A5               	movwf	??_Reverse_Byte
 11105  1D41  3003               	movlw	3
 11106  1D42                     u7925:	
 11107  1D42  36A5               	lsrf	??_Reverse_Byte,f
 11108  1D43  0B89               	decfsz	9,f
 11109  1D44  2D42               	goto	u7925
 11110  1D45  0825               	movf	??_Reverse_Byte,w
 11111  1D46  3904               	andlw	4
 11112  1D47  00A6               	movwf	??_Reverse_Byte+1
 11113  1D48  0826               	movf	??_Reverse_Byte+1,w
 11114  1D49  07A7               	addwf	Reverse_Byte@temp,f
 11115                           
 11116                           ;MISC.c: 115: temp += (This & 0x40) >> 5;
 11117  1D4A  0828               	movf	Reverse_Byte@This,w
 11118  1D4B  00A5               	movwf	??_Reverse_Byte
 11119  1D4C  3005               	movlw	5
 11120  1D4D                     u7935:	
 11121  1D4D  36A5               	lsrf	??_Reverse_Byte,f
 11122  1D4E  0B89               	decfsz	9,f
 11123  1D4F  2D4D               	goto	u7935
 11124  1D50  0825               	movf	??_Reverse_Byte,w
 11125  1D51  3902               	andlw	2
 11126  1D52  00A6               	movwf	??_Reverse_Byte+1
 11127  1D53  0826               	movf	??_Reverse_Byte+1,w
 11128  1D54  07A7               	addwf	Reverse_Byte@temp,f
 11129                           
 11130                           ;MISC.c: 116: temp += (This & 0x80) >> 7;
 11131  1D55  0828               	movf	Reverse_Byte@This,w
 11132  1D56  00A5               	movwf	??_Reverse_Byte
 11133  1D57  3007               	movlw	7
 11134  1D58                     u7945:	
 11135  1D58  36A5               	lsrf	??_Reverse_Byte,f
 11136  1D59  0B89               	decfsz	9,f
 11137  1D5A  2D58               	goto	u7945
 11138  1D5B  0825               	movf	??_Reverse_Byte,w
 11139  1D5C  3901               	andlw	1
 11140  1D5D  00A6               	movwf	??_Reverse_Byte+1
 11141  1D5E  0826               	movf	??_Reverse_Byte+1,w
 11142  1D5F  07A7               	addwf	Reverse_Byte@temp,f
 11143                           
 11144                           ;MISC.c: 118: return temp;
 11145  1D60  0827               	movf	Reverse_Byte@temp,w
 11146  1D61  0008               	return
 11147  1D62                     __end_of_Reverse_Byte:	
 11148                           
 11149                           	psect	text21
 11150  191C                     __ptext21:	
 11151 ;; *************** function _ISNUMBER *****************
 11152 ;; Defined at:
 11153 ;;		line 126 in file "MISC.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  ascii           1    wreg     unsigned char 
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  ascii           1    5[BANK0 ] unsigned char 
 11158 ;; Return value:  Size  Location     Type
 11159 ;;                  1    wreg      unsigned char 
 11160 ;; Registers used:
 11161 ;;		wreg
 11162 ;; Tracked objects:
 11163 ;;		On entry : 0/0
 11164 ;;		On exit  : 0/0
 11165 ;;		Unchanged: 0/0
 11166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;Total ram usage:        1 bytes
 11172 ;; Hardware stack levels used:    1
 11173 ;; Hardware stack levels required when called:    3
 11174 ;; This function calls:
 11175 ;;		Nothing
 11176 ;; This function is called by:
 11177 ;;		_PS_2_Update
 11178 ;; This function uses a non-reentrant model
 11179 ;;
 11180                           
 11181                           
 11182                           ;psect for function _ISNUMBER
 11183  191C                     _ISNUMBER:	
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _ISNUMBER: [wreg]
 11187                           ;ISNUMBER@ascii stored from wreg
 11188  191C  0020               	movlb	0	; select bank0
 11189  191D  00A5               	movwf	ISNUMBER@ascii
 11190                           
 11191                           ;MISC.c: 128: if(ascii >= '0' && ascii <='9')
 11192  191E  3030               	movlw	48
 11193  191F  0225               	subwf	ISNUMBER@ascii,w
 11194  1920  1C03               	skipc
 11195  1921  2928               	goto	l6139
 11196  1922  303A               	movlw	58
 11197  1923  0225               	subwf	ISNUMBER@ascii,w
 11198  1924  1803               	skipnc
 11199  1925  2928               	goto	l6139
 11200                           
 11201                           ;MISC.c: 129: {
 11202                           ;MISC.c: 130: return 1;
 11203  1926  3001               	movlw	1
 11204                           
 11205                           ;MISC.c: 131: }
 11206  1927  0008               	return
 11207  1928                     l6139:	
 11208                           
 11209                           ;MISC.c: 132: else
 11210                           ;MISC.c: 133: {
 11211                           ;MISC.c: 134: return 0;
 11212  1928  3000               	movlw	0
 11213  1929  0008               	return
 11214  192A                     __end_of_ISNUMBER:	
 11215                           
 11216                           	psect	text22
 11217  19B6                     __ptext22:	
 11218 ;; *************** function _Decode_Scan_Code_Shift *****************
 11219 ;; Defined at:
 11220 ;;		line 831 in file "PS_2.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  Code            1    wreg     unsigned char 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  Code            1    5[BANK0 ] unsigned char 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  1    wreg      unsigned char 
 11227 ;; Registers used:
 11228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;Total ram usage:        1 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    3
 11241 ;; This function calls:
 11242 ;;		Nothing
 11243 ;; This function is called by:
 11244 ;;		_PS_2_Update
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           
 11249                           ;psect for function _Decode_Scan_Code_Shift
 11250  19B6                     _Decode_Scan_Code_Shift:	
 11251                           
 11252                           ;incstack = 0
 11253                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11254                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11255  19B6  0020               	movlb	0	; select bank0
 11256  19B7  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11257                           
 11258                           ;PS_2.c: 833: Code -= 13;
 11259  19B8  300D               	movlw	13
 11260  19B9  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11261                           
 11262                           ;PS_2.c: 834: if(Code <=112)
 11263  19BA  3071               	movlw	113
 11264  19BB  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11265  19BC  1803               	skipnc
 11266  19BD  29C7               	goto	l6215
 11267                           
 11268                           ;PS_2.c: 835: {
 11269                           ;PS_2.c: 836: return ScanCodeSHIFT[Code];
 11270  19BE  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11271  19BF  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11272  19C0  0084               	movwf	4
 11273  19C1  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11274  19C2  1803               	skipnc
 11275  19C3  3E01               	addlw	1
 11276  19C4  0085               	movwf	5
 11277  19C5  0800               	movf	0,w	;code access
 11278                           
 11279                           ;PS_2.c: 837: }
 11280  19C6  0008               	return
 11281  19C7                     l6215:	
 11282                           
 11283                           ;PS_2.c: 838: else
 11284                           ;PS_2.c: 839: {
 11285                           ;PS_2.c: 840: return 0;
 11286  19C7  3000               	movlw	0
 11287  19C8  0008               	return
 11288  19C9                     __end_of_Decode_Scan_Code_Shift:	
 11289                           
 11290                           	psect	text23
 11291  19A3                     __ptext23:	
 11292 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11293 ;; Defined at:
 11294 ;;		line 850 in file "PS_2.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;  Code            1    wreg     unsigned char 
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;  Code            1    5[BANK0 ] unsigned char 
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  1    wreg      unsigned char 
 11301 ;; Registers used:
 11302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;Total ram usage:        1 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    3
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_PS_2_Update
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           
 11323                           ;psect for function _Decode_Scan_Code_FunctionE0
 11324  19A3                     _Decode_Scan_Code_FunctionE0:	
 11325                           
 11326                           ;incstack = 0
 11327                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11328                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11329  19A3  0020               	movlb	0	; select bank0
 11330  19A4  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11331                           
 11332                           ;PS_2.c: 852: Code -= 17;
 11333  19A5  3011               	movlw	17
 11334  19A6  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11335                           
 11336                           ;PS_2.c: 853: if(Code <=108)
 11337  19A7  306D               	movlw	109
 11338  19A8  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11339  19A9  1803               	skipnc
 11340  19AA  29B4               	goto	l6377
 11341                           
 11342                           ;PS_2.c: 854: {
 11343                           ;PS_2.c: 855: return ScanCodeFunctionE0[Code];
 11344  19AB  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11345  19AC  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11346  19AD  0084               	movwf	4
 11347  19AE  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11348  19AF  1803               	skipnc
 11349  19B0  3E01               	addlw	1
 11350  19B1  0085               	movwf	5
 11351  19B2  0800               	movf	0,w	;code access
 11352                           
 11353                           ;PS_2.c: 856: }
 11354  19B3  0008               	return
 11355  19B4                     l6377:	
 11356                           
 11357                           ;PS_2.c: 857: else
 11358                           ;PS_2.c: 858: {
 11359                           ;PS_2.c: 859: return 0;
 11360  19B4  3000               	movlw	0
 11361  19B5  0008               	return
 11362  19B6                     __end_of_Decode_Scan_Code_FunctionE0:	
 11363                           
 11364                           	psect	text24
 11365  1948                     __ptext24:	
 11366 ;; *************** function _Decode_Scan_Code_Function *****************
 11367 ;; Defined at:
 11368 ;;		line 869 in file "PS_2.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  Code            1    wreg     unsigned char 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  Code            1    5[BANK0 ] unsigned char 
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      unsigned char 
 11375 ;; Registers used:
 11376 ;;		wreg, fsr0l, fsr0h, pclath
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;Total ram usage:        1 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    3
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_PS_2_Update
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _Decode_Scan_Code_Function
 11398  1948                     _Decode_Scan_Code_Function:	
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11402                           ;Decode_Scan_Code_Function@Code stored from wreg
 11403  1948  0020               	movlb	0	; select bank0
 11404  1949  00A5               	movwf	Decode_Scan_Code_Function@Code
 11405                           
 11406                           ;PS_2.c: 871: if(Code <=131)
 11407  194A  3084               	movlw	132
 11408  194B  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11409  194C  1803               	skipnc
 11410  194D  2957               	goto	l6401
 11411                           
 11412                           ;PS_2.c: 872: {
 11413                           ;PS_2.c: 873: return ScanCodeFunctionNoE0[Code];
 11414  194E  0825               	movf	Decode_Scan_Code_Function@Code,w
 11415  194F  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11416  1950  0084               	movwf	4
 11417  1951  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11418  1952  1803               	skipnc
 11419  1953  3E01               	addlw	1
 11420  1954  0085               	movwf	5
 11421  1955  0800               	movf	0,w	;code access
 11422                           
 11423                           ;PS_2.c: 874: }
 11424  1956  0008               	return
 11425  1957                     l6401:	
 11426                           
 11427                           ;PS_2.c: 875: else
 11428                           ;PS_2.c: 876: {
 11429                           ;PS_2.c: 877: return 0;
 11430  1957  3000               	movlw	0
 11431  1958  0008               	return
 11432  1959                     __end_of_Decode_Scan_Code_Function:	
 11433                           
 11434                           	psect	text25
 11435  1990                     __ptext25:	
 11436 ;; *************** function _Decode_Scan_Code *****************
 11437 ;; Defined at:
 11438 ;;		line 812 in file "PS_2.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  Code            1    wreg     unsigned char 
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;  Code            1    5[BANK0 ] unsigned char 
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      unsigned char 
 11445 ;; Registers used:
 11446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;Total ram usage:        1 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    3
 11459 ;; This function calls:
 11460 ;;		Nothing
 11461 ;; This function is called by:
 11462 ;;		_PS_2_Update
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           
 11467                           ;psect for function _Decode_Scan_Code
 11468  1990                     _Decode_Scan_Code:	
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11472                           ;Decode_Scan_Code@Code stored from wreg
 11473  1990  0020               	movlb	0	; select bank0
 11474  1991  00A5               	movwf	Decode_Scan_Code@Code
 11475                           
 11476                           ;PS_2.c: 814: Code -= 13;
 11477  1992  300D               	movlw	13
 11478  1993  02A5               	subwf	Decode_Scan_Code@Code,f
 11479                           
 11480                           ;PS_2.c: 815: if(Code <=112)
 11481  1994  3071               	movlw	113
 11482  1995  0225               	subwf	Decode_Scan_Code@Code,w
 11483  1996  1803               	skipnc
 11484  1997  29A1               	goto	l6389
 11485                           
 11486                           ;PS_2.c: 816: {
 11487                           ;PS_2.c: 817: return ScanCode[Code];
 11488  1998  0825               	movf	Decode_Scan_Code@Code,w
 11489  1999  3E84               	addlw	low (_ScanCode| (0+32768))
 11490  199A  0084               	movwf	4
 11491  199B  3088               	movlw	high (_ScanCode| (0+32768))
 11492  199C  1803               	skipnc
 11493  199D  3E01               	addlw	1
 11494  199E  0085               	movwf	5
 11495  199F  0800               	movf	0,w	;code access
 11496                           
 11497                           ;PS_2.c: 818: }
 11498  19A0  0008               	return
 11499  19A1                     l6389:	
 11500                           
 11501                           ;PS_2.c: 819: else
 11502                           ;PS_2.c: 820: {
 11503                           ;PS_2.c: 821: return 0;
 11504  19A1  3000               	movlw	0
 11505  19A2  0008               	return
 11506  19A3                     __end_of_Decode_Scan_Code:	
 11507                           
 11508                           	psect	text26
 11509  1593                     __ptext26:	
 11510 ;; *************** function _Init_System *****************
 11511 ;; Defined at:
 11512 ;;		line 100 in file "user.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;		None
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11517 ;;  Baud            4   65[BANK1 ] unsigned long 
 11518 ;;  temp            4   60[BANK1 ] unsigned long 
 11519 ;;  Parity          1   64[BANK1 ] unsigned char 
 11520 ;; Return value:  Size  Location     Type
 11521 ;;		None               void
 11522 ;; Registers used:
 11523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;Total ram usage:       74 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    6
 11536 ;; This function calls:
 11537 ;;		_InitUART
 11538 ;;		_ReadBaud
 11539 ;;		_UARTstringWAIT
 11540 ;;		_delayUS
 11541 ;;		_sprintf
 11542 ;; This function is called by:
 11543 ;;		_main
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           
 11548                           ;psect for function _Init_System
 11549  1593                     _Init_System:	
 11550                           
 11551                           ;user.c: 102: unsigned long temp =0;
 11552                           
 11553                           ;incstack = 0
 11554                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11555  1593  3000               	movlw	0
 11556  1594  0021               	movlb	1	; select bank1
 11557  1595  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11558  1596  3000               	movlw	0
 11559  1597  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11560  1598  3000               	movlw	0
 11561  1599  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11562  159A  3000               	movlw	0
 11563  159B  00DC               	movwf	Init_System@temp^(0+128)
 11564                           
 11565                           ;user.c: 103: unsigned long Baud =0;
 11566  159C  3000               	movlw	0
 11567  159D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11568  159E  3000               	movlw	0
 11569  159F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11570  15A0  3000               	movlw	0
 11571  15A1  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11572  15A2  3000               	movlw	0
 11573  15A3  00E1               	movwf	Init_System@Baud^(0+128)
 11574                           
 11575                           ;user.c: 104: unsigned char Parity =0;
 11576  15A4  01E0               	clrf	Init_System@Parity^(0+128)
 11577                           
 11578                           ;user.c: 105: unsigned char buf[60];
 11579                           ;user.c: 107: temp = ReadBaud((0x1800 >> 5),0);
 11580  15A5  30C0               	movlw	192
 11581  15A6  0020               	movlb	0	; select bank0
 11582  15A7  00B7               	movwf	ReadBaud@row
 11583  15A8  3000               	movlw	0
 11584  15A9  00B8               	movwf	ReadBaud@row+1
 11585  15AA  01B9               	clrf	ReadBaud@column
 11586  15AB  319E  26CB  3195   	fcall	_ReadBaud
 11587  15AE  0020               	movlb	0	; select bank0
 11588  15AF  083A               	movf	?_ReadBaud+3,w
 11589  15B0  0021               	movlb	1	; select bank1
 11590  15B1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11591  15B2  0020               	movlb	0	; select bank0
 11592  15B3  0839               	movf	?_ReadBaud+2,w
 11593  15B4  0021               	movlb	1	; select bank1
 11594  15B5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11595  15B6  0020               	movlb	0	; select bank0
 11596  15B7  0838               	movf	?_ReadBaud+1,w
 11597  15B8  0021               	movlb	1	; select bank1
 11598  15B9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11599  15BA  0020               	movlb	0	; select bank0
 11600  15BB  0837               	movf	?_ReadBaud,w
 11601  15BC  0021               	movlb	1	; select bank1
 11602  15BD  00DC               	movwf	Init_System@temp^(0+128)
 11603                           
 11604                           ;user.c: 108: Baud = temp & 0x000FFFFF;
 11605  15BE  30FF               	movlw	255
 11606  15BF  055C               	andwf	Init_System@temp^(0+128),w
 11607  15C0  00E1               	movwf	Init_System@Baud^(0+128)
 11608  15C1  30FF               	movlw	255
 11609  15C2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11610  15C3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11611  15C4  300F               	movlw	15
 11612  15C5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11613  15C6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11614  15C7  3000               	movlw	0
 11615  15C8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11616  15C9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11617                           
 11618                           ;user.c: 109: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11619  15CA  085C               	movf	Init_System@temp^(0+128),w
 11620  15CB  0020               	movlb	0	; select bank0
 11621  15CC  00D4               	movwf	??_Init_System
 11622  15CD  0021               	movlb	1	; select bank1
 11623  15CE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11624  15CF  0020               	movlb	0	; select bank0
 11625  15D0  00D5               	movwf	??_Init_System+1
 11626  15D1  0021               	movlb	1	; select bank1
 11627  15D2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11628  15D3  0020               	movlb	0	; select bank0
 11629  15D4  00D6               	movwf	??_Init_System+2
 11630  15D5  0021               	movlb	1	; select bank1
 11631  15D6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11632  15D7  0020               	movlb	0	; select bank0
 11633  15D8  00D7               	movwf	??_Init_System+3
 11634  15D9  3014               	movlw	20
 11635  15DA                     u9935:	
 11636  15DA  36D7               	lsrf	??_Init_System+3,f
 11637  15DB  0CD6               	rrf	??_Init_System+2,f
 11638  15DC  0CD5               	rrf	??_Init_System+1,f
 11639  15DD  0CD4               	rrf	??_Init_System,f
 11640  15DE  0B89               	decfsz	9,f
 11641  15DF  2DDA               	goto	u9935
 11642  15E0  0854               	movf	??_Init_System,w
 11643  15E1  390F               	andlw	15
 11644  15E2  00D8               	movwf	??_Init_System+4
 11645  15E3  0858               	movf	??_Init_System+4,w
 11646  15E4  0021               	movlb	1	; select bank1
 11647  15E5  00E0               	movwf	Init_System@Parity^(0+128)
 11648                           
 11649                           ;user.c: 110: if(Baud <2400 || Baud > 115200)
 11650  15E6  3000               	movlw	0
 11651  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11652  15E8  1D03               	skipz
 11653  15E9  2DF4               	goto	u9945
 11654  15EA  3000               	movlw	0
 11655  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11656  15EC  1D03               	skipz
 11657  15ED  2DF4               	goto	u9945
 11658  15EE  3009               	movlw	9
 11659  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11660  15F0  1D03               	skipz
 11661  15F1  2DF4               	goto	u9945
 11662  15F2  3060               	movlw	96
 11663  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11664  15F4                     u9945:	
 11665  15F4  1C03               	skipc
 11666  15F5  2E06               	goto	l7125
 11667  15F6  3000               	movlw	0
 11668  15F7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11669  15F8  1D03               	skipz
 11670  15F9  2E04               	goto	u9955
 11671  15FA  3001               	movlw	1
 11672  15FB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11673  15FC  1D03               	skipz
 11674  15FD  2E04               	goto	u9955
 11675  15FE  30C2               	movlw	194
 11676  15FF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11677  1600  1D03               	skipz
 11678  1601  2E04               	goto	u9955
 11679  1602  3001               	movlw	1
 11680  1603  0261               	subwf	Init_System@Baud^(0+128),w
 11681  1604                     u9955:	
 11682  1604  1C03               	skipc
 11683  1605  2E0F               	goto	l7129
 11684  1606                     l7125:	
 11685                           
 11686                           ;user.c: 111: {
 11687                           ;user.c: 113: Baud = 9600;
 11688  1606  3000               	movlw	0
 11689  1607  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11690  1608  3000               	movlw	0
 11691  1609  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11692  160A  3025               	movlw	37
 11693  160B  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11694  160C  3080               	movlw	128
 11695  160D  00E1               	movwf	Init_System@Baud^(0+128)
 11696                           
 11697                           ;user.c: 114: Parity = 0;
 11698  160E  01E0               	clrf	Init_System@Parity^(0+128)
 11699  160F                     l7129:	
 11700                           
 11701                           ;user.c: 115: }
 11702                           ;user.c: 116: InitUART(Baud, Parity);
 11703  160F  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11704  1610  0020               	movlb	0	; select bank0
 11705  1611  00B6               	movwf	InitUART@Baud+3
 11706  1612  0021               	movlb	1	; select bank1
 11707  1613  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11708  1614  0020               	movlb	0	; select bank0
 11709  1615  00B5               	movwf	InitUART@Baud+2
 11710  1616  0021               	movlb	1	; select bank1
 11711  1617  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11712  1618  0020               	movlb	0	; select bank0
 11713  1619  00B4               	movwf	InitUART@Baud+1
 11714  161A  0021               	movlb	1	; select bank1
 11715  161B  0861               	movf	Init_System@Baud^(0+128),w
 11716  161C  0020               	movlb	0	; select bank0
 11717  161D  00B3               	movwf	InitUART@Baud
 11718  161E  0021               	movlb	1	; select bank1
 11719  161F  0860               	movf	Init_System@Parity^(0+128),w
 11720  1620  0020               	movlb	0	; select bank0
 11721  1621  00D4               	movwf	??_Init_System
 11722  1622  0854               	movf	??_Init_System,w
 11723  1623  00B7               	movwf	InitUART@parity
 11724  1624  3191  21CA  3195   	fcall	_InitUART
 11725                           
 11726                           ;user.c: 117: UARTstringWAIT("\r\n");
 11727  1627  3056               	movlw	low ((STR_11+17)| (0+32768))
 11728  1628  0020               	movlb	0	; select bank0
 11729  1629  00B4               	movwf	UARTstringWAIT@data
 11730  162A  308B               	movlw	high ((STR_11+17)| (0+32768))
 11731  162B  00B5               	movwf	UARTstringWAIT@data+1
 11732  162C  319B  2370  3195   	fcall	_UARTstringWAIT
 11733                           
 11734                           ;user.c: 118: delayUS(10000);
 11735  162F  3000               	movlw	0
 11736  1630  0020               	movlb	0	; select bank0
 11737  1631  00A8               	movwf	delayUS@US+3
 11738  1632  3000               	movlw	0
 11739  1633  00A7               	movwf	delayUS@US+2
 11740  1634  3027               	movlw	39
 11741  1635  00A6               	movwf	delayUS@US+1
 11742  1636  3010               	movlw	16
 11743  1637  00A5               	movwf	delayUS@US
 11744  1638  3190  2002  3195   	fcall	_delayUS
 11745                           
 11746                           ;user.c: 119: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 11747  163B  30A0               	movlw	low Init_System@buf
 11748  163C  0020               	movlb	0	; select bank0
 11749  163D  00BD               	movwf	sprintf@sp
 11750  163E  3000               	movlw	high Init_System@buf
 11751  163F  00BE               	movwf	sprintf@sp+1
 11752  1640  301B               	movlw	low (STR_16| (0+32768))
 11753  1641  00BF               	movwf	sprintf@f
 11754  1642  308B               	movlw	high (STR_16| (0+32768))
 11755  1643  00C0               	movwf	sprintf@f+1
 11756  1644  0021               	movlb	1	; select bank1
 11757  1645  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11758  1646  0020               	movlb	0	; select bank0
 11759  1647  00C4               	movwf	?_sprintf+7
 11760  1648  0021               	movlb	1	; select bank1
 11761  1649  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11762  164A  0020               	movlb	0	; select bank0
 11763  164B  00C3               	movwf	?_sprintf+6
 11764  164C  0021               	movlb	1	; select bank1
 11765  164D  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11766  164E  0020               	movlb	0	; select bank0
 11767  164F  00C2               	movwf	?_sprintf+5
 11768  1650  0021               	movlb	1	; select bank1
 11769  1651  0861               	movf	Init_System@Baud^(0+128),w
 11770  1652  0020               	movlb	0	; select bank0
 11771  1653  00C1               	movwf	?_sprintf+4
 11772  1654  3194  249F  3195   	fcall	_sprintf
 11773                           
 11774                           ;user.c: 120: UARTstringWAIT(buf);
 11775  1657  30A0               	movlw	low Init_System@buf
 11776  1658  0020               	movlb	0	; select bank0
 11777  1659  00B4               	movwf	UARTstringWAIT@data
 11778  165A  3000               	movlw	high Init_System@buf
 11779  165B  00B5               	movwf	UARTstringWAIT@data+1
 11780  165C  319B  2370  3195   	fcall	_UARTstringWAIT
 11781                           
 11782                           ;user.c: 121: if(Parity)
 11783  165F  0021               	movlb	1	; select bank1
 11784  1660  0860               	movf	Init_System@Parity^(0+128),w
 11785  1661  1903               	btfsc	3,2
 11786  1662  2E85               	goto	l7155
 11787                           
 11788                           ;user.c: 122: {
 11789                           ;user.c: 123: switch (Parity)
 11790  1663  2E78               	goto	l7153
 11791  1664                     l7143:	
 11792                           ;user.c: 124: {
 11793                           ;user.c: 125: case 1:
 11794                           
 11795                           
 11796                           ;user.c: 126: UARTstringWAIT(" with Odd parity bit\r\n");
 11797  1664  30EE               	movlw	low (STR_17| (0+32768))
 11798  1665  0020               	movlb	0	; select bank0
 11799  1666  00B4               	movwf	UARTstringWAIT@data
 11800  1667  308A               	movlw	high (STR_17| (0+32768))
 11801  1668  2E89               	goto	L18
 11802  1669                     l7145:	
 11803                           ;user.c: 128: case 2:
 11804                           
 11805                           ;user.c: 127: break;
 11806                           
 11807                           
 11808                           ;user.c: 129: UARTstringWAIT(" with Even parity bit\r\n");
 11809  1669  30BE               	movlw	low (STR_18| (0+32768))
 11810  166A  0020               	movlb	0	; select bank0
 11811  166B  00B4               	movwf	UARTstringWAIT@data
 11812  166C  308A               	movlw	high (STR_18| (0+32768))
 11813  166D  2E89               	goto	L18
 11814  166E                     l7147:	
 11815                           ;user.c: 131: case 3:
 11816                           
 11817                           ;user.c: 130: break;
 11818                           
 11819                           
 11820                           ;user.c: 132: UARTstringWAIT(" with Mark bit\r\n");
 11821  166E  30A3               	movlw	low (STR_19| (0+32768))
 11822  166F  0020               	movlb	0	; select bank0
 11823  1670  00B4               	movwf	UARTstringWAIT@data
 11824  1671  308B               	movlw	high (STR_19| (0+32768))
 11825  1672  2E89               	goto	L18
 11826  1673                     l7149:	
 11827                           ;user.c: 134: default:
 11828                           
 11829                           ;user.c: 133: break;
 11830                           
 11831                           
 11832                           ;user.c: 135: UARTstringWAIT(" with Space bit\r\n");
 11833  1673  3091               	movlw	low (STR_20| (0+32768))
 11834  1674  0020               	movlb	0	; select bank0
 11835  1675  00B4               	movwf	UARTstringWAIT@data
 11836  1676  308B               	movlw	high (STR_20| (0+32768))
 11837  1677  2E89               	goto	L18
 11838  1678                     l7153:	
 11839                           ;user.c: 137: }
 11840                           
 11841                           ;user.c: 136: break;
 11842                           
 11843  1678  0021               	movlb	1	; select bank1
 11844  1679  0860               	movf	Init_System@Parity^(0+128),w
 11845                           
 11846                           ; Switch size 1, requested type "space"
 11847                           ; Number of cases is 3, Range of values is 1 to 3
 11848                           ; switch strategies available:
 11849                           ; Name         Instructions Cycles
 11850                           ; simple_byte           10     6 (average)
 11851                           ; direct_byte           15     9 (fixed)
 11852                           ; jumptable            263     9 (fixed)
 11853                           ;	Chosen strategy is simple_byte
 11854  167A  3A01               	xorlw	1	; case 1
 11855  167B  1903               	skipnz
 11856  167C  2E64               	goto	l7143
 11857  167D  3A03               	xorlw	3	; case 2
 11858  167E  1903               	skipnz
 11859  167F  2E69               	goto	l7145
 11860  1680  3A01               	xorlw	1	; case 3
 11861  1681  1903               	skipnz
 11862  1682  2E6E               	goto	l7147
 11863  1683  2E73               	goto	l7149
 11864                           
 11865                           ;user.c: 138: }
 11866  1684  2E8D               	goto	l7157
 11867  1685                     l7155:	
 11868                           
 11869                           ;user.c: 139: else
 11870                           ;user.c: 140: {
 11871                           ;user.c: 141: UARTstringWAIT(" with no parity bit\r\n");
 11872  1685  3011               	movlw	low ((STR_32+22)| (0+32768))
 11873  1686  0020               	movlb	0	; select bank0
 11874  1687  00B4               	movwf	UARTstringWAIT@data
 11875  1688  308A               	movlw	high ((STR_32+22)| (0+32768))
 11876  1689                     L18:	
 11877  1689  00B5               	movwf	UARTstringWAIT@data+1
 11878  168A  319B  2370  3195   	fcall	_UARTstringWAIT
 11879  168D                     l7157:	
 11880                           
 11881                           ;user.c: 142: }
 11882                           ;user.c: 143: delayUS(10000);
 11883  168D  3000               	movlw	0
 11884  168E  0020               	movlb	0	; select bank0
 11885  168F  00A8               	movwf	delayUS@US+3
 11886  1690  3000               	movlw	0
 11887  1691  00A7               	movwf	delayUS@US+2
 11888  1692  3027               	movlw	39
 11889  1693  00A6               	movwf	delayUS@US+1
 11890  1694  3010               	movlw	16
 11891  1695  00A5               	movwf	delayUS@US
 11892  1696  3190  2002         	fcall	_delayUS
 11893                           
 11894                           ;user.c: 145: INTCON |= 0x08;
 11895  1698  158B               	bsf	11,3	;volatile
 11896                           
 11897                           ;user.c: 146: INTCONbits.GIE = 1;
 11898  1699  178B               	bsf	11,7	;volatile
 11899  169A  0008               	return
 11900  169B                     __end_of_Init_System:	
 11901                           
 11902                           	psect	text27
 11903  149F                     __ptext27:	
 11904 ;; *************** function _sprintf *****************
 11905 ;; Defined at:
 11906 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11909 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11910 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11911 ;;		 -> STR_34(33), STR_24(21), STR_16(21), 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  _val            4   46[BANK0 ] struct .
 11914 ;;  prec            2   44[BANK0 ] int 
 11915 ;;  c               1   51[BANK0 ] char 
 11916 ;;  ap              1   50[BANK0 ] PTR void [1]
 11917 ;;		 -> ?_sprintf(2), 
 11918 ;;  flag            1   43[BANK0 ] unsigned char 
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  2   29[BANK0 ] int 
 11921 ;; Registers used:
 11922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11928 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;Total ram usage:       23 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    4
 11935 ;; This function calls:
 11936 ;;		___lldiv
 11937 ;;		___llmod
 11938 ;; This function is called by:
 11939 ;;		_Init_System
 11940 ;;		_SetBaud
 11941 ;;		_PS_2_Update
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function _sprintf
 11947  149F                     _sprintf:	
 11948                           
 11949                           ;doprnt.c: 494: va_list ap;
 11950                           ;doprnt.c: 499: signed char c;
 11951                           ;doprnt.c: 504: int prec;
 11952                           ;doprnt.c: 508: unsigned char flag;
 11953                           ;doprnt.c: 527: union {
 11954                           ;doprnt.c: 528: unsigned long _val;
 11955                           ;doprnt.c: 529: struct {
 11956                           ;doprnt.c: 530: const char * _cp;
 11957                           ;doprnt.c: 531: unsigned _len;
 11958                           ;doprnt.c: 532: } _str;
 11959                           ;doprnt.c: 533: } _val;
 11960                           ;doprnt.c: 542: *ap = __va_start();
 11961                           
 11962                           ;incstack = 0
 11963                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11964  149F  3041               	movlw	(?_sprintf+4)& (0+255)
 11965  14A0  0020               	movlb	0	; select bank0
 11966  14A1  00C5               	movwf	??_sprintf
 11967  14A2  0845               	movf	??_sprintf,w
 11968  14A3  00D2               	movwf	sprintf@ap
 11969  14A4                     l6057:	
 11970                           ;doprnt.c: 545: while(c = *f++) {
 11971                           
 11972  14A4  0840               	movf	sprintf@f+1,w
 11973  14A5  00C6               	movwf	??_sprintf+1
 11974  14A6  083F               	movf	sprintf@f,w
 11975  14A7  00C5               	movwf	??_sprintf
 11976  14A8  0ABF               	incf	sprintf@f,f
 11977  14A9  1903               	skipnz
 11978  14AA  0AC0               	incf	sprintf@f+1,f
 11979  14AB  0845               	movf	??_sprintf,w
 11980  14AC  0084               	movwf	4
 11981  14AD  0846               	movf	??_sprintf+1,w
 11982  14AE  0085               	movwf	5
 11983  14AF  0800               	movf	0,w	;code access
 11984  14B0  00C7               	movwf	??_sprintf+2
 11985  14B1  0847               	movf	??_sprintf+2,w
 11986  14B2  00D3               	movwf	sprintf@c
 11987  14B3  08D3               	movf	sprintf@c,f
 11988  14B4  1903               	btfsc	3,2
 11989  14B5  2D8D               	goto	l6059
 11990                           
 11991                           ;doprnt.c: 547: if(c != '%')
 11992  14B6  0853               	movf	sprintf@c,w
 11993  14B7  3A25               	xorlw	37
 11994  14B8  1903               	skipnz
 11995  14B9  2CC5               	goto	l6017
 11996                           
 11997                           ;doprnt.c: 549: {
 11998                           ;doprnt.c: 550: ((*sp++ = (c)));
 11999  14BA  083D               	movf	sprintf@sp,w
 12000  14BB  0086               	movwf	6
 12001  14BC  083E               	movf	sprintf@sp+1,w
 12002  14BD  0087               	movwf	7
 12003  14BE  0853               	movf	sprintf@c,w
 12004  14BF  0081               	movwf	1
 12005  14C0  3001               	movlw	1
 12006  14C1  07BD               	addwf	sprintf@sp,f
 12007  14C2  3000               	movlw	0
 12008  14C3  3DBE               	addwfc	sprintf@sp+1,f
 12009                           
 12010                           ;doprnt.c: 551: continue;
 12011  14C4  2CA4               	goto	l6057
 12012  14C5                     l6017:	
 12013                           
 12014                           ;doprnt.c: 552: }
 12015                           ;doprnt.c: 557: flag = 0;
 12016  14C5  01CB               	clrf	sprintf@flag
 12017                           
 12018                           ;doprnt.c: 644: switch(c = *f++) {
 12019                           
 12020                           ;doprnt.c: 642: loop:
 12021  14C6  2CCE               	goto	l6023
 12022  14C7                     l1011:	
 12023                           ;doprnt.c: 650: case 'l':
 12024                           
 12025                           ;doprnt.c: 647: goto alldone;
 12026                           
 12027                           ;doprnt.c: 646: case 0:
 12028                           
 12029                           
 12030                           ;doprnt.c: 652: flag |= 0x10;
 12031  14C7  164B               	bsf	sprintf@flag,4
 12032                           
 12033                           ;doprnt.c: 653: goto loop;
 12034  14C8  2CCE               	goto	l6023
 12035  14C9                     l6019:	
 12036                           ;doprnt.c: 826: case 'u':
 12037                           
 12038                           ;doprnt.c: 822: continue;
 12039                           
 12040                           ;doprnt.c: 811: default:
 12041                           
 12042                           
 12043                           ;doprnt.c: 827: flag |= 0xC0;
 12044  14C9  30C0               	movlw	192
 12045  14CA  00C5               	movwf	??_sprintf
 12046  14CB  0845               	movf	??_sprintf,w
 12047  14CC  04CB               	iorwf	sprintf@flag,f
 12048                           
 12049                           ;doprnt.c: 831: }
 12050                           
 12051                           ;doprnt.c: 828: break;
 12052  14CD  2CE5               	goto	l1014
 12053  14CE                     l6023:	
 12054  14CE  0840               	movf	sprintf@f+1,w
 12055  14CF  00C6               	movwf	??_sprintf+1
 12056  14D0  083F               	movf	sprintf@f,w
 12057  14D1  00C5               	movwf	??_sprintf
 12058  14D2  0ABF               	incf	sprintf@f,f
 12059  14D3  1903               	skipnz
 12060  14D4  0AC0               	incf	sprintf@f+1,f
 12061  14D5  0845               	movf	??_sprintf,w
 12062  14D6  0084               	movwf	4
 12063  14D7  0846               	movf	??_sprintf+1,w
 12064  14D8  0085               	movwf	5
 12065  14D9  0800               	movf	0,w	;code access
 12066  14DA  00D3               	movwf	sprintf@c
 12067                           
 12068                           ; Switch size 1, requested type "space"
 12069                           ; Number of cases is 3, Range of values is 0 to 117
 12070                           ; switch strategies available:
 12071                           ; Name         Instructions Cycles
 12072                           ; simple_byte           10     6 (average)
 12073                           ; direct_byte          242     6 (fixed)
 12074                           ; jumptable            260     6 (fixed)
 12075                           ;	Chosen strategy is simple_byte
 12076  14DB  3A00               	xorlw	0	; case 0
 12077  14DC  1903               	skipnz
 12078  14DD  2D8D               	goto	l6059
 12079  14DE  3A6C               	xorlw	108	; case 108
 12080  14DF  1903               	skipnz
 12081  14E0  2CC7               	goto	l1011
 12082  14E1  3A19               	xorlw	25	; case 117
 12083  14E2  1903               	skipnz
 12084  14E3  2CC9               	goto	l6019
 12085  14E4  2CA4               	goto	l6057
 12086  14E5                     l1014:	
 12087                           
 12088                           ;doprnt.c: 1282: {
 12089                           ;doprnt.c: 1290: if(flag & 0x10)
 12090  14E5  1E4B               	btfss	sprintf@flag,4
 12091  14E6  2CF4               	goto	l6029
 12092                           
 12093                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12094  14E7  0852               	movf	sprintf@ap,w
 12095  14E8  0086               	movwf	6
 12096  14E9  0187               	clrf	7
 12097  14EA  3F40               	moviw [0]fsr1
 12098  14EB  00CE               	movwf	sprintf@_val
 12099  14EC  3F41               	moviw [1]fsr1
 12100  14ED  00CF               	movwf	sprintf@_val+1
 12101  14EE  3F42               	moviw [2]fsr1
 12102  14EF  00D0               	movwf	sprintf@_val+2
 12103  14F0  3F43               	moviw [3]fsr1
 12104  14F1  00D1               	movwf	sprintf@_val+3
 12105  14F2  3004               	movlw	4
 12106  14F3  2D02               	goto	L19
 12107  14F4                     l6029:	
 12108                           
 12109                           ;doprnt.c: 1292: else
 12110                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12111  14F4  0852               	movf	sprintf@ap,w
 12112  14F5  0086               	movwf	6
 12113  14F6  0187               	clrf	7
 12114  14F7  3F40               	moviw [0]fsr1
 12115  14F8  00C5               	movwf	??_sprintf
 12116  14F9  3F41               	moviw [1]fsr1
 12117  14FA  00C6               	movwf	??_sprintf+1
 12118  14FB  0845               	movf	??_sprintf,w
 12119  14FC  00CE               	movwf	sprintf@_val
 12120  14FD  0846               	movf	??_sprintf+1,w
 12121  14FE  00CF               	movwf	sprintf@_val+1
 12122  14FF  01D0               	clrf	sprintf@_val+2
 12123  1500  01D1               	clrf	sprintf@_val+3
 12124  1501  3002               	movlw	2
 12125  1502                     L19:	
 12126  1502  00C5               	movwf	??_sprintf
 12127  1503  0845               	movf	??_sprintf,w
 12128  1504  07D2               	addwf	sprintf@ap,f
 12129                           
 12130                           ;doprnt.c: 1296: }
 12131                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12132  1505  01D3               	clrf	sprintf@c
 12133  1506  0AD3               	incf	sprintf@c,f
 12134  1507  0853               	movf	sprintf@c,w
 12135  1508  3A0A               	xorlw	10
 12136  1509  1903               	btfsc	3,2
 12137  150A  2D38               	goto	l6047
 12138  150B                     l6039:	
 12139                           
 12140                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12141  150B  0853               	movf	sprintf@c,w
 12142  150C  00C5               	movwf	??_sprintf
 12143  150D  01C6               	clrf	??_sprintf+1
 12144  150E  35C5               	lslf	??_sprintf,f
 12145  150F  0DC6               	rlf	??_sprintf+1,f
 12146  1510  35C5               	lslf	??_sprintf,f
 12147  1511  0DC6               	rlf	??_sprintf+1,f
 12148  1512  30D3               	movlw	low (_dpowers| (0+32768))
 12149  1513  0745               	addwf	??_sprintf,w
 12150  1514  0084               	movwf	4
 12151  1515  3089               	movlw	high (_dpowers| (0+32768))
 12152  1516  3D46               	addwfc	??_sprintf+1,w
 12153  1517  0085               	movwf	5
 12154  1518  3F00               	moviw [0]fsr0
 12155  1519  00C7               	movwf	??_sprintf+2
 12156  151A  3F01               	moviw [1]fsr0
 12157  151B  00C8               	movwf	??_sprintf+3
 12158  151C  3F02               	moviw [2]fsr0
 12159  151D  00C9               	movwf	??_sprintf+4
 12160  151E  3F03               	moviw [3]fsr0
 12161  151F  00CA               	movwf	??_sprintf+5
 12162  1520  084A               	movf	??_sprintf+5,w
 12163  1521  0251               	subwf	sprintf@_val+3,w
 12164  1522  1D03               	skipz
 12165  1523  2D2E               	goto	u7805
 12166  1524  0849               	movf	??_sprintf+4,w
 12167  1525  0250               	subwf	sprintf@_val+2,w
 12168  1526  1D03               	skipz
 12169  1527  2D2E               	goto	u7805
 12170  1528  0848               	movf	??_sprintf+3,w
 12171  1529  024F               	subwf	sprintf@_val+1,w
 12172  152A  1D03               	skipz
 12173  152B  2D2E               	goto	u7805
 12174  152C  0847               	movf	??_sprintf+2,w
 12175  152D  024E               	subwf	sprintf@_val,w
 12176  152E                     u7805:	
 12177  152E  1C03               	btfss	3,0
 12178  152F  2D38               	goto	l6047
 12179                           
 12180                           ;doprnt.c: 1316: break;
 12181  1530  3001               	movlw	1
 12182  1531  00C5               	movwf	??_sprintf
 12183  1532  0845               	movf	??_sprintf,w
 12184  1533  07D3               	addwf	sprintf@c,f
 12185  1534  0853               	movf	sprintf@c,w
 12186  1535  3A0A               	xorlw	10
 12187  1536  1D03               	skipz
 12188  1537  2D0B               	goto	l6039
 12189  1538                     l6047:	
 12190                           
 12191                           ;doprnt.c: 1431: {
 12192                           ;doprnt.c: 1478: }
 12193                           ;doprnt.c: 1481: prec = c;
 12194  1538  0853               	movf	sprintf@c,w
 12195  1539  00CC               	movwf	sprintf@prec
 12196  153A  01CD               	clrf	sprintf@prec+1
 12197  153B  1BCC               	btfsc	sprintf@prec,7
 12198  153C  03CD               	decf	sprintf@prec+1,f
 12199  153D                     l6055:	
 12200                           ;doprnt.c: 1483: while(prec--) {
 12201                           
 12202  153D  30FF               	movlw	255
 12203  153E  07CC               	addwf	sprintf@prec,f
 12204  153F  30FF               	movlw	255
 12205  1540  3DCD               	addwfc	sprintf@prec+1,f
 12206  1541  30FF               	movlw	255
 12207  1542  064D               	xorwf	sprintf@prec+1,w
 12208  1543  1D03               	skipz
 12209  1544  2D47               	goto	u7825
 12210  1545  30FF               	movlw	255
 12211  1546  064C               	xorwf	sprintf@prec,w
 12212  1547                     u7825:	
 12213  1547  1903               	btfsc	3,2
 12214  1548  2CA4               	goto	l6057
 12215                           
 12216                           ;doprnt.c: 1487: {
 12217                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12218  1549  3000               	movlw	0
 12219  154A  00B6               	movwf	___llmod@divisor+3
 12220  154B  3000               	movlw	0
 12221  154C  00B5               	movwf	___llmod@divisor+2
 12222  154D  3000               	movlw	0
 12223  154E  00B4               	movwf	___llmod@divisor+1
 12224  154F  300A               	movlw	10
 12225  1550  00B3               	movwf	___llmod@divisor
 12226  1551  084D               	movf	sprintf@prec+1,w
 12227  1552  0085               	movwf	5
 12228  1553  084C               	movf	sprintf@prec,w
 12229  1554  0084               	movwf	4
 12230  1555  3584               	lslf	4,f
 12231  1556  0D85               	rlf	5,f
 12232  1557  3584               	lslf	4,f
 12233  1558  0D85               	rlf	5,f
 12234  1559  30D3               	movlw	low (_dpowers| (0+32768))
 12235  155A  0784               	addwf	4,f
 12236  155B  3089               	movlw	high (_dpowers| (0+32768))
 12237  155C  3D85               	addwfc	5,f
 12238  155D  3F00               	moviw [0]fsr0
 12239  155E  00A5               	movwf	___lldiv@divisor
 12240  155F  3F01               	moviw [1]fsr0
 12241  1560  00A6               	movwf	___lldiv@divisor+1
 12242  1561  3F02               	moviw [2]fsr0
 12243  1562  00A7               	movwf	___lldiv@divisor+2
 12244  1563  3F03               	moviw [3]fsr0
 12245  1564  00A8               	movwf	___lldiv@divisor+3
 12246  1565  0851               	movf	sprintf@_val+3,w
 12247  1566  00AC               	movwf	___lldiv@dividend+3
 12248  1567  0850               	movf	sprintf@_val+2,w
 12249  1568  00AB               	movwf	___lldiv@dividend+2
 12250  1569  084F               	movf	sprintf@_val+1,w
 12251  156A  00AA               	movwf	___lldiv@dividend+1
 12252  156B  084E               	movf	sprintf@_val,w
 12253  156C  00A9               	movwf	___lldiv@dividend
 12254  156D  319C  24BA  3194   	fcall	___lldiv
 12255  1570  0020               	movlb	0	; select bank0
 12256  1571  0828               	movf	?___lldiv+3,w
 12257  1572  00BA               	movwf	___llmod@dividend+3
 12258  1573  0827               	movf	?___lldiv+2,w
 12259  1574  00B9               	movwf	___llmod@dividend+2
 12260  1575  0826               	movf	?___lldiv+1,w
 12261  1576  00B8               	movwf	___llmod@dividend+1
 12262  1577  0825               	movf	?___lldiv,w
 12263  1578  00B7               	movwf	___llmod@dividend
 12264  1579  319B  23E2  3194   	fcall	___llmod
 12265  157C  0020               	movlb	0	; select bank0
 12266  157D  0833               	movf	?___llmod,w
 12267  157E  3E30               	addlw	48
 12268  157F  00C5               	movwf	??_sprintf
 12269  1580  0845               	movf	??_sprintf,w
 12270  1581  00D3               	movwf	sprintf@c
 12271                           
 12272                           ;doprnt.c: 1532: }
 12273                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12274  1582  083D               	movf	sprintf@sp,w
 12275  1583  0086               	movwf	6
 12276  1584  083E               	movf	sprintf@sp+1,w
 12277  1585  0087               	movwf	7
 12278  1586  0853               	movf	sprintf@c,w
 12279  1587  0081               	movwf	1
 12280  1588  3001               	movlw	1
 12281  1589  07BD               	addwf	sprintf@sp,f
 12282  158A  3000               	movlw	0
 12283  158B  3DBE               	addwfc	sprintf@sp+1,f
 12284  158C  2D3D               	goto	l6055
 12285  158D                     l6059:	
 12286                           ;doprnt.c: 1534: }
 12287                           ;doprnt.c: 1542: }
 12288                           ;doprnt.c: 1544: alldone:
 12289                           
 12290                           
 12291                           ;doprnt.c: 1547: *sp = 0;
 12292  158D  083D               	movf	sprintf@sp,w
 12293  158E  0086               	movwf	6
 12294  158F  083E               	movf	sprintf@sp+1,w
 12295  1590  0087               	movwf	7
 12296  1591  0181               	clrf	1
 12297  1592  0008               	return
 12298  1593                     __end_of_sprintf:	
 12299                           ;doprnt.c: 1549: return 0;
 12300                           ;	Return value of _sprintf is never used
 12301                           
 12302                           
 12303                           	psect	text28
 12304  1BE2                     __ptext28:	
 12305 ;; *************** function ___llmod *****************
 12306 ;; Defined at:
 12307 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  divisor         4   19[BANK0 ] unsigned long 
 12310 ;;  dividend        4   23[BANK0 ] unsigned long 
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;  counter         1   28[BANK0 ] unsigned char 
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  4   19[BANK0 ] unsigned long 
 12315 ;; Registers used:
 12316 ;;		wreg, status,2, status,0
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12322 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;Total ram usage:       10 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    3
 12329 ;; This function calls:
 12330 ;;		Nothing
 12331 ;; This function is called by:
 12332 ;;		_sprintf
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function ___llmod
 12338  1BE2                     ___llmod:	
 12339                           
 12340                           ;incstack = 0
 12341                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12342  1BE2  0020               	movlb	0	; select bank0
 12343  1BE3  0836               	movf	___llmod@divisor+3,w
 12344  1BE4  0435               	iorwf	___llmod@divisor+2,w
 12345  1BE5  0434               	iorwf	___llmod@divisor+1,w
 12346  1BE6  0433               	iorwf	___llmod@divisor,w
 12347  1BE7  1903               	skipnz
 12348  1BE8  2C1C               	goto	l5887
 12349  1BE9  01BC               	clrf	___llmod@counter
 12350  1BEA  0ABC               	incf	___llmod@counter,f
 12351  1BEB                     l5877:	
 12352  1BEB  1BB6               	btfsc	___llmod@divisor+3,7
 12353  1BEC  2BF9               	goto	l5879
 12354  1BED  3001               	movlw	1
 12355  1BEE                     u7615:	
 12356  1BEE  35B3               	lslf	___llmod@divisor,f
 12357  1BEF  0DB4               	rlf	___llmod@divisor+1,f
 12358  1BF0  0DB5               	rlf	___llmod@divisor+2,f
 12359  1BF1  0DB6               	rlf	___llmod@divisor+3,f
 12360  1BF2  0B89               	decfsz	9,f
 12361  1BF3  2BEE               	goto	u7615
 12362  1BF4  3001               	movlw	1
 12363  1BF5  00BB               	movwf	??___llmod
 12364  1BF6  083B               	movf	??___llmod,w
 12365  1BF7  07BC               	addwf	___llmod@counter,f
 12366  1BF8  2BEB               	goto	l5877
 12367  1BF9                     l5879:	
 12368  1BF9  0836               	movf	___llmod@divisor+3,w
 12369  1BFA  023A               	subwf	___llmod@dividend+3,w
 12370  1BFB  1D03               	skipz
 12371  1BFC  2C07               	goto	u7635
 12372  1BFD  0835               	movf	___llmod@divisor+2,w
 12373  1BFE  0239               	subwf	___llmod@dividend+2,w
 12374  1BFF  1D03               	skipz
 12375  1C00  2C07               	goto	u7635
 12376  1C01  0834               	movf	___llmod@divisor+1,w
 12377  1C02  0238               	subwf	___llmod@dividend+1,w
 12378  1C03  1D03               	skipz
 12379  1C04  2C07               	goto	u7635
 12380  1C05  0833               	movf	___llmod@divisor,w
 12381  1C06  0237               	subwf	___llmod@dividend,w
 12382  1C07                     u7635:	
 12383  1C07  1C03               	skipc
 12384  1C08  2C11               	goto	l5883
 12385  1C09  0833               	movf	___llmod@divisor,w
 12386  1C0A  02B7               	subwf	___llmod@dividend,f
 12387  1C0B  0834               	movf	___llmod@divisor+1,w
 12388  1C0C  3BB8               	subwfb	___llmod@dividend+1,f
 12389  1C0D  0835               	movf	___llmod@divisor+2,w
 12390  1C0E  3BB9               	subwfb	___llmod@dividend+2,f
 12391  1C0F  0836               	movf	___llmod@divisor+3,w
 12392  1C10  3BBA               	subwfb	___llmod@dividend+3,f
 12393  1C11                     l5883:	
 12394  1C11  3001               	movlw	1
 12395  1C12                     u7645:	
 12396  1C12  36B6               	lsrf	___llmod@divisor+3,f
 12397  1C13  0CB5               	rrf	___llmod@divisor+2,f
 12398  1C14  0CB4               	rrf	___llmod@divisor+1,f
 12399  1C15  0CB3               	rrf	___llmod@divisor,f
 12400  1C16  0B89               	decfsz	9,f
 12401  1C17  2C12               	goto	u7645
 12402  1C18  3001               	movlw	1
 12403  1C19  02BC               	subwf	___llmod@counter,f
 12404  1C1A  1D03               	btfss	3,2
 12405  1C1B  2BF9               	goto	l5879
 12406  1C1C                     l5887:	
 12407  1C1C  083A               	movf	___llmod@dividend+3,w
 12408  1C1D  00B6               	movwf	?___llmod+3
 12409  1C1E  0839               	movf	___llmod@dividend+2,w
 12410  1C1F  00B5               	movwf	?___llmod+2
 12411  1C20  0838               	movf	___llmod@dividend+1,w
 12412  1C21  00B4               	movwf	?___llmod+1
 12413  1C22  0837               	movf	___llmod@dividend,w
 12414  1C23  00B3               	movwf	?___llmod
 12415  1C24  0008               	return
 12416  1C25                     __end_of___llmod:	
 12417                           
 12418                           	psect	text29
 12419  1B70                     __ptext29:	
 12420 ;; *************** function _UARTstringWAIT *****************
 12421 ;; Defined at:
 12422 ;;		line 358 in file "UART.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12425 ;;		 -> STR_40(29), STR_39(22), STR_38(18), STR_37(17), 
 12426 ;;		 -> STR_36(24), STR_35(23), PS_2_Update@buf(60), STR_33(3), 
 12427 ;;		 -> STR_32(44), STR_31(18), STR_30(3), STR_29(22), 
 12428 ;;		 -> STR_28(18), STR_27(17), STR_26(24), STR_25(23), 
 12429 ;;		 -> SetBaud@buf(50), STR_23(24), STR_22(3), STR_21(22), 
 12430 ;;		 -> STR_20(18), STR_19(17), STR_18(24), STR_17(23), 
 12431 ;;		 -> Init_System@buf(60), STR_15(3), STR_14(17), STR_13(22), 
 12432 ;;		 -> STR_12(21), STR_11(20), STR_10(19), STR_9(17), 
 12433 ;;		 -> STR_8(22), STR_7(21), STR_6(24), STR_5(39), 
 12434 ;;		 -> STR_4(3), Version(4), STR_3(19), STR_2(26), 
 12435 ;;		 -> STR_1(3), 
 12436 ;; Auto vars:     Size  Location     Type
 12437 ;;		None
 12438 ;; Return value:  Size  Location     Type
 12439 ;;		None               void
 12440 ;; Registers used:
 12441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12442 ;; Tracked objects:
 12443 ;;		On entry : 0/0
 12444 ;;		On exit  : 0/0
 12445 ;;		Unchanged: 0/0
 12446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;Total ram usage:        4 bytes
 12452 ;; Hardware stack levels used:    1
 12453 ;; Hardware stack levels required when called:    5
 12454 ;; This function calls:
 12455 ;;		_UARTchar
 12456 ;;		_delayUS
 12457 ;; This function is called by:
 12458 ;;		_main
 12459 ;;		_Init_System
 12460 ;;		_SetBaud
 12461 ;;		_PS_2_Update
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function _UARTstringWAIT
 12467  1B70                     _UARTstringWAIT:	
 12468  1B70                     l424:	
 12469                           ;incstack = 0
 12470                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12471                           ;UART.c: 360: do
 12472                           
 12473                           
 12474                           ;UART.c: 361: {
 12475                           ;UART.c: 362: delayUS(5000);
 12476  1B70  3000               	movlw	0
 12477  1B71  0020               	movlb	0	; select bank0
 12478  1B72  00A8               	movwf	delayUS@US+3
 12479  1B73  3000               	movlw	0
 12480  1B74  00A7               	movwf	delayUS@US+2
 12481  1B75  3013               	movlw	19
 12482  1B76  00A6               	movwf	delayUS@US+1
 12483  1B77  3088               	movlw	136
 12484  1B78  00A5               	movwf	delayUS@US
 12485  1B79  3190  2002  319B   	fcall	_delayUS
 12486                           
 12487                           ;UART.c: 363: if(*data != 0)
 12488  1B7C  0020               	movlb	0	; select bank0
 12489  1B7D  0834               	movf	UARTstringWAIT@data,w
 12490  1B7E  0084               	movwf	4
 12491  1B7F  0835               	movf	UARTstringWAIT@data+1,w
 12492  1B80  0085               	movwf	5
 12493  1B81  0800               	movf	0,w	;code access
 12494  1B82  3A00               	xorlw	0
 12495  1B83  1903               	skipnz
 12496  1B84  2B92               	goto	l5921
 12497                           
 12498                           ;UART.c: 364: {
 12499                           ;UART.c: 365: UARTchar(*data, 0, 0);
 12500  1B85  01AD               	clrf	UARTchar@override
 12501  1B86  01AE               	clrf	UARTchar@NinethBit_override_data
 12502  1B87  0834               	movf	UARTstringWAIT@data,w
 12503  1B88  0084               	movwf	4
 12504  1B89  0835               	movf	UARTstringWAIT@data+1,w
 12505  1B8A  0085               	movwf	5
 12506  1B8B  0800               	movf	0,w	;code access
 12507  1B8C  319E  260F  319B   	fcall	_UARTchar
 12508  1B8F                     l426:	
 12509                           ;UART.c: 366: while((!TX1STAbits.TRMT));
 12510                           
 12511  1B8F  0023               	movlb	3	; select bank3
 12512  1B90  1C9E               	btfss	30,1	;volatile
 12513  1B91  2B8F               	goto	l426
 12514  1B92                     l5921:	
 12515                           
 12516                           ;UART.c: 367: }
 12517                           ;UART.c: 368: } while( *data++);
 12518  1B92  0020               	movlb	0	; select bank0
 12519  1B93  0835               	movf	UARTstringWAIT@data+1,w
 12520  1B94  00B7               	movwf	??_UARTstringWAIT+1
 12521  1B95  0834               	movf	UARTstringWAIT@data,w
 12522  1B96  00B6               	movwf	??_UARTstringWAIT
 12523  1B97  0AB4               	incf	UARTstringWAIT@data,f
 12524  1B98  1903               	skipnz
 12525  1B99  0AB5               	incf	UARTstringWAIT@data+1,f
 12526  1B9A  0836               	movf	??_UARTstringWAIT,w
 12527  1B9B  0084               	movwf	4
 12528  1B9C  0837               	movf	??_UARTstringWAIT+1,w
 12529  1B9D  0085               	movwf	5
 12530  1B9E  0800               	movf	0,w	;code access
 12531  1B9F  3800               	iorlw	0
 12532  1BA0  1903               	btfsc	3,2
 12533  1BA1  0008               	return
 12534  1BA2  2B70               	goto	l424
 12535  1BA3                     __end_of_UARTstringWAIT:	
 12536                           
 12537                           	psect	text30
 12538  1E0F                     __ptext30:	
 12539 ;; *************** function _UARTchar *****************
 12540 ;; Defined at:
 12541 ;;		line 231 in file "UART.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;  data            1    wreg     unsigned char 
 12544 ;;  override        1   13[BANK0 ] unsigned char 
 12545 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12546 ;; Auto vars:     Size  Location     Type
 12547 ;;  data            1   19[BANK0 ] unsigned char 
 12548 ;; Return value:  Size  Location     Type
 12549 ;;		None               void
 12550 ;; Registers used:
 12551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12552 ;; Tracked objects:
 12553 ;;		On entry : 0/0
 12554 ;;		On exit  : 0/0
 12555 ;;		Unchanged: 0/0
 12556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;Total ram usage:        7 bytes
 12562 ;; Hardware stack levels used:    1
 12563 ;; Hardware stack levels required when called:    4
 12564 ;; This function calls:
 12565 ;;		_CheckSum_byte
 12566 ;; This function is called by:
 12567 ;;		_UARTstringWAIT
 12568 ;;		_PS_2_Update
 12569 ;;		_UARTstring
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           
 12574                           ;psect for function _UARTchar
 12575  1E0F                     _UARTchar:	
 12576                           
 12577                           ;incstack = 0
 12578                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12579                           ;UARTchar@data stored from wreg
 12580  1E0F  0020               	movlb	0	; select bank0
 12581  1E10  00B3               	movwf	UARTchar@data
 12582                           
 12583                           ;UART.c: 233: if(TXSTAbits.TX9)
 12584  1E11  0023               	movlb	3	; select bank3
 12585  1E12  1F1E               	btfss	30,6	;volatile
 12586  1E13  2E5A               	goto	l5717
 12587                           
 12588                           ;UART.c: 234: {
 12589                           ;UART.c: 236: if(!override)
 12590  1E14  0020               	movlb	0	; select bank0
 12591  1E15  08AD               	movf	UARTchar@override,f
 12592  1E16  1903               	btfsc	3,2
 12593  1E17  2E41               	goto	l5713
 12594  1E18  2E4E               	goto	l5715
 12595  1E19                     l5707:	
 12596                           ;UART.c: 240: {
 12597                           ;UART.c: 241: case 1:
 12598                           
 12599                           ;UART.c: 237: {
 12600                           ;UART.c: 239: switch (PARITY)
 12601                           
 12602                           
 12603                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12604  1E19  0020               	movlb	0	; select bank0
 12605  1E1A  0833               	movf	UARTchar@data,w
 12606  1E1B  00AF               	movwf	??_UARTchar
 12607  1E1C  01B0               	clrf	??_UARTchar+1
 12608  1E1D  082F               	movf	??_UARTchar,w
 12609  1E1E  00A5               	movwf	CheckSum_byte@This
 12610  1E1F  0830               	movf	??_UARTchar+1,w
 12611  1E20  00A6               	movwf	CheckSum_byte@This+1
 12612  1E21  3003               	movlw	3
 12613  1E22  2E2C               	goto	L22
 12614  1E23                     l5709:	
 12615                           ;UART.c: 244: case 2:
 12616                           
 12617                           ;UART.c: 243: break;
 12618                           
 12619                           
 12620                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12621  1E23  0020               	movlb	0	; select bank0
 12622  1E24  0833               	movf	UARTchar@data,w
 12623  1E25  00AF               	movwf	??_UARTchar
 12624  1E26  01B0               	clrf	??_UARTchar+1
 12625  1E27  082F               	movf	??_UARTchar,w
 12626  1E28  00A5               	movwf	CheckSum_byte@This
 12627  1E29  0830               	movf	??_UARTchar+1,w
 12628  1E2A  00A6               	movwf	CheckSum_byte@This+1
 12629  1E2B  3002               	movlw	2
 12630  1E2C                     L22:	
 12631  1E2C  00B1               	movwf	??_UARTchar+2
 12632  1E2D  0831               	movf	??_UARTchar+2,w
 12633  1E2E  00A7               	movwf	CheckSum_byte@Odd_Even
 12634  1E2F  319A  22A9  319E   	fcall	_CheckSum_byte
 12635  1E32  0020               	movlb	0	; select bank0
 12636  1E33  00B2               	movwf	??_UARTchar+3
 12637  1E34  0023               	movlb	3	; select bank3
 12638  1E35  081E               	movf	30,w	;volatile
 12639  1E36  0020               	movlb	0	; select bank0
 12640  1E37  0632               	xorwf	??_UARTchar+3,w
 12641  1E38  39FE               	andlw	-2
 12642  1E39  0632               	xorwf	??_UARTchar+3,w
 12643  1E3A  2E58               	goto	L21
 12644  1E3B                     l396:	
 12645                           ;UART.c: 247: case 3:
 12646                           
 12647                           ;UART.c: 246: break;
 12648                           
 12649                           
 12650                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 12651  1E3B  0023               	movlb	3	; select bank3
 12652  1E3C  141E               	bsf	30,0	;volatile
 12653                           
 12654                           ;UART.c: 249: break;
 12655  1E3D  2E5A               	goto	l5717
 12656  1E3E                     l397:	
 12657                           ;UART.c: 250: default:
 12658                           
 12659                           
 12660                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 12661  1E3E  0023               	movlb	3	; select bank3
 12662  1E3F  101E               	bcf	30,0	;volatile
 12663                           
 12664                           ;UART.c: 253: }
 12665                           
 12666                           ;UART.c: 252: break;
 12667  1E40  2E5A               	goto	l5717
 12668  1E41                     l5713:	
 12669  1E41  0021               	movlb	1	; select bank1
 12670  1E42  086A               	movf	_PARITY^(0+128),w
 12671                           
 12672                           ; Switch size 1, requested type "space"
 12673                           ; Number of cases is 3, Range of values is 1 to 3
 12674                           ; switch strategies available:
 12675                           ; Name         Instructions Cycles
 12676                           ; simple_byte           10     6 (average)
 12677                           ; direct_byte           15     9 (fixed)
 12678                           ; jumptable            263     9 (fixed)
 12679                           ;	Chosen strategy is simple_byte
 12680  1E43  3A01               	xorlw	1	; case 1
 12681  1E44  1903               	skipnz
 12682  1E45  2E19               	goto	l5707
 12683  1E46  3A03               	xorlw	3	; case 2
 12684  1E47  1903               	skipnz
 12685  1E48  2E23               	goto	l5709
 12686  1E49  3A01               	xorlw	1	; case 3
 12687  1E4A  1903               	skipnz
 12688  1E4B  2E3B               	goto	l396
 12689  1E4C  2E3E               	goto	l397
 12690                           
 12691                           ;UART.c: 254: }
 12692  1E4D  2E5A               	goto	l5717
 12693  1E4E                     l5715:	
 12694                           
 12695                           ;UART.c: 255: else
 12696                           ;UART.c: 256: {
 12697                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12698  1E4E  3001               	movlw	1
 12699  1E4F  0020               	movlb	0	; select bank0
 12700  1E50  052E               	andwf	UARTchar@NinethBit_override_data,w
 12701  1E51  00AF               	movwf	??_UARTchar
 12702  1E52  0023               	movlb	3	; select bank3
 12703  1E53  081E               	movf	30,w	;volatile
 12704  1E54  0020               	movlb	0	; select bank0
 12705  1E55  062F               	xorwf	??_UARTchar,w
 12706  1E56  39FE               	andlw	-2
 12707  1E57  062F               	xorwf	??_UARTchar,w
 12708  1E58                     L21:	
 12709  1E58  0023               	movlb	3	; select bank3
 12710  1E59  009E               	movwf	30	;volatile
 12711  1E5A                     l5717:	
 12712                           
 12713                           ;UART.c: 258: }
 12714                           ;UART.c: 259: }
 12715                           ;UART.c: 261: if(data == '\n')
 12716  1E5A  0020               	movlb	0	; select bank0
 12717  1E5B  0833               	movf	UARTchar@data,w
 12718  1E5C  3A0A               	xorlw	10
 12719  1E5D  1D03               	skipz
 12720  1E5E  2E67               	goto	l5723
 12721                           
 12722                           ;UART.c: 262: {
 12723                           ;UART.c: 263: if(override)
 12724  1E5F  082D               	movf	UARTchar@override,w
 12725  1E60  1903               	btfsc	3,2
 12726  1E61  0008               	return
 12727                           
 12728                           ;UART.c: 264: {
 12729                           ;UART.c: 265: TXREG = data;
 12730  1E62  0833               	movf	UARTchar@data,w
 12731  1E63  0023               	movlb	3	; select bank3
 12732  1E64  009A               	movwf	26	;volatile
 12733  1E65  0020               	movlb	0	; select bank0
 12734  1E66  0008               	return
 12735  1E67                     l5723:	
 12736                           ;UART.c: 266: }
 12737                           ;UART.c: 267: }
 12738                           
 12739                           
 12740                           ;UART.c: 268: else
 12741                           ;UART.c: 269: {
 12742                           ;UART.c: 270: TXREG = data;
 12743  1E67  0020               	movlb	0	; select bank0
 12744  1E68  0833               	movf	UARTchar@data,w
 12745  1E69  0023               	movlb	3	; select bank3
 12746  1E6A  009A               	movwf	26	;volatile
 12747  1E6B  0020               	movlb	0	; select bank0
 12748  1E6C  0008               	return
 12749  1E6D                     __end_of_UARTchar:	
 12750                           
 12751                           	psect	text31
 12752  1ECB                     __ptext31:	
 12753 ;; *************** function _ReadBaud *****************
 12754 ;; Defined at:
 12755 ;;		line 187 in file "FLASH.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;  row             2   23[BANK0 ] unsigned int 
 12758 ;;  column          1   25[BANK0 ] unsigned char 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  temp            4   35[BANK0 ] unsigned long 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;                  4   23[BANK0 ] unsigned long 
 12763 ;; Registers used:
 12764 ;;		wreg, status,2, status,0, pclath, cstack
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;Total ram usage:       16 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    5
 12777 ;; This function calls:
 12778 ;;		_ReadFlash_4Byte
 12779 ;; This function is called by:
 12780 ;;		_Init_System
 12781 ;;		_SetBaud
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           
 12786                           ;psect for function _ReadBaud
 12787  1ECB                     _ReadBaud:	
 12788                           
 12789                           ;FLASH.c: 189: unsigned long temp;
 12790                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 12791                           
 12792                           ;incstack = 0
 12793                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12794  1ECB  0020               	movlb	0	; select bank0
 12795  1ECC  0838               	movf	ReadBaud@row+1,w
 12796  1ECD  01AB               	clrf	ReadFlash_4Byte@row+1
 12797  1ECE  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12798  1ECF  0837               	movf	ReadBaud@row,w
 12799  1ED0  01AA               	clrf	ReadFlash_4Byte@row
 12800  1ED1  07AA               	addwf	ReadFlash_4Byte@row,f
 12801  1ED2  0839               	movf	ReadBaud@column,w
 12802  1ED3  00BB               	movwf	??_ReadBaud
 12803  1ED4  083B               	movf	??_ReadBaud,w
 12804  1ED5  00AC               	movwf	ReadFlash_4Byte@column
 12805  1ED6  319C  2469  319E   	fcall	_ReadFlash_4Byte
 12806  1ED9  0020               	movlb	0	; select bank0
 12807  1EDA  082D               	movf	?_ReadFlash_4Byte+3,w
 12808  1EDB  00C6               	movwf	ReadBaud@temp+3
 12809  1EDC  082C               	movf	?_ReadFlash_4Byte+2,w
 12810  1EDD  00C5               	movwf	ReadBaud@temp+2
 12811  1EDE  082B               	movf	?_ReadFlash_4Byte+1,w
 12812  1EDF  00C4               	movwf	ReadBaud@temp+1
 12813  1EE0  082A               	movf	?_ReadFlash_4Byte,w
 12814  1EE1  00C3               	movwf	ReadBaud@temp
 12815                           
 12816                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12817  1EE2  30FF               	movlw	255
 12818  1EE3  0543               	andwf	ReadBaud@temp,w
 12819  1EE4  0024               	movlb	4	; select bank4
 12820  1EE5  00A8               	movwf	(_MEM^(0+512)+2)
 12821  1EE6  303F               	movlw	63
 12822  1EE7  0020               	movlb	0	; select bank0
 12823  1EE8  0544               	andwf	ReadBaud@temp+1,w
 12824  1EE9  0024               	movlb	4	; select bank4
 12825  1EEA  00A9               	movwf	((_MEM+1)^(0+512)+2)
 12826                           
 12827                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12828  1EEB  0020               	movlb	0	; select bank0
 12829  1EEC  0843               	movf	ReadBaud@temp,w
 12830  1EED  00BB               	movwf	??_ReadBaud
 12831  1EEE  0844               	movf	ReadBaud@temp+1,w
 12832  1EEF  00BC               	movwf	??_ReadBaud+1
 12833  1EF0  0845               	movf	ReadBaud@temp+2,w
 12834  1EF1  00BD               	movwf	??_ReadBaud+2
 12835  1EF2  0846               	movf	ReadBaud@temp+3,w
 12836  1EF3  00BE               	movwf	??_ReadBaud+3
 12837  1EF4  300E               	movlw	14
 12838  1EF5                     u7735:	
 12839  1EF5  36BE               	lsrf	??_ReadBaud+3,f
 12840  1EF6  0CBD               	rrf	??_ReadBaud+2,f
 12841  1EF7  0CBC               	rrf	??_ReadBaud+1,f
 12842  1EF8  0CBB               	rrf	??_ReadBaud,f
 12843  1EF9  0B89               	decfsz	9,f
 12844  1EFA  2EF5               	goto	u7735
 12845  1EFB  30FF               	movlw	255
 12846  1EFC  053B               	andwf	??_ReadBaud,w
 12847  1EFD  0024               	movlb	4	; select bank4
 12848  1EFE  00A6               	movwf	_MEM^(0+512)
 12849  1EFF  303F               	movlw	63
 12850  1F00  0020               	movlb	0	; select bank0
 12851  1F01  053C               	andwf	??_ReadBaud+1,w
 12852  1F02  0024               	movlb	4	; select bank4
 12853  1F03  00A7               	movwf	(_MEM+1)^(0+512)
 12854                           
 12855                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12856  1F04  0828               	movf	(_MEM^(0+512)+2),w
 12857  1F05  0020               	movlb	0	; select bank0
 12858  1F06  00BB               	movwf	??_ReadBaud
 12859  1F07  0024               	movlb	4	; select bank4
 12860  1F08  0829               	movf	((_MEM+1)^(0+512)+2),w
 12861  1F09  0020               	movlb	0	; select bank0
 12862  1F0A  00BC               	movwf	??_ReadBaud+1
 12863  1F0B  01BD               	clrf	??_ReadBaud+2
 12864  1F0C  01BE               	clrf	??_ReadBaud+3
 12865  1F0D  0024               	movlb	4	; select bank4
 12866  1F0E  0826               	movf	_MEM^(0+512),w
 12867  1F0F  0020               	movlb	0	; select bank0
 12868  1F10  00BF               	movwf	??_ReadBaud+4
 12869  1F11  0024               	movlb	4	; select bank4
 12870  1F12  0827               	movf	(_MEM+1)^(0+512),w
 12871  1F13  0020               	movlb	0	; select bank0
 12872  1F14  00C0               	movwf	??_ReadBaud+5
 12873  1F15  01C1               	clrf	??_ReadBaud+6
 12874  1F16  01C2               	clrf	??_ReadBaud+7
 12875  1F17  300C               	movlw	12
 12876  1F18                     u7745:	
 12877  1F18  35BF               	lslf	??_ReadBaud+4,f
 12878  1F19  0DC0               	rlf	??_ReadBaud+5,f
 12879  1F1A  0DC1               	rlf	??_ReadBaud+6,f
 12880  1F1B  0DC2               	rlf	??_ReadBaud+7,f
 12881  1F1C  0B89               	decfsz	9,f
 12882  1F1D  2F18               	goto	u7745
 12883  1F1E  083F               	movf	??_ReadBaud+4,w
 12884  1F1F  07BB               	addwf	??_ReadBaud,f
 12885  1F20  0840               	movf	??_ReadBaud+5,w
 12886  1F21  3DBC               	addwfc	??_ReadBaud+1,f
 12887  1F22  0841               	movf	??_ReadBaud+6,w
 12888  1F23  3DBD               	addwfc	??_ReadBaud+2,f
 12889  1F24  0842               	movf	??_ReadBaud+7,w
 12890  1F25  3DBE               	addwfc	??_ReadBaud+3,f
 12891  1F26  083E               	movf	??_ReadBaud+3,w
 12892  1F27  00BA               	movwf	?_ReadBaud+3
 12893  1F28  083D               	movf	??_ReadBaud+2,w
 12894  1F29  00B9               	movwf	?_ReadBaud+2
 12895  1F2A  083C               	movf	??_ReadBaud+1,w
 12896  1F2B  00B8               	movwf	?_ReadBaud+1
 12897  1F2C  083B               	movf	??_ReadBaud,w
 12898  1F2D  00B7               	movwf	?_ReadBaud
 12899  1F2E  0008               	return
 12900  1F2F                     __end_of_ReadBaud:	
 12901                           
 12902                           	psect	text32
 12903  1C69                     __ptext32:	
 12904 ;; *************** function _ReadFlash_4Byte *****************
 12905 ;; Defined at:
 12906 ;;		line 62 in file "FLASH.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;  row             2   10[BANK0 ] unsigned int 
 12909 ;;  column          1   12[BANK0 ] unsigned char 
 12910 ;; Auto vars:     Size  Location     Type
 12911 ;;  temp            4   19[BANK0 ] unsigned long 
 12912 ;; Return value:  Size  Location     Type
 12913 ;;                  4   10[BANK0 ] unsigned long 
 12914 ;; Registers used:
 12915 ;;		wreg, status,2, status,0, pclath, cstack
 12916 ;; Tracked objects:
 12917 ;;		On entry : 0/0
 12918 ;;		On exit  : 0/0
 12919 ;;		Unchanged: 0/0
 12920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12921 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;Total ram usage:       13 bytes
 12926 ;; Hardware stack levels used:    1
 12927 ;; Hardware stack levels required when called:    4
 12928 ;; This function calls:
 12929 ;;		_ReadFlash_2Byte
 12930 ;; This function is called by:
 12931 ;;		_ReadBaud
 12932 ;; This function uses a non-reentrant model
 12933 ;;
 12934                           
 12935                           
 12936                           ;psect for function _ReadFlash_4Byte
 12937  1C69                     _ReadFlash_4Byte:	
 12938                           
 12939                           ;FLASH.c: 64: unsigned long temp =0;
 12940                           
 12941                           ;incstack = 0
 12942                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12943  1C69  3000               	movlw	0
 12944  1C6A  0020               	movlb	0	; select bank0
 12945  1C6B  00B6               	movwf	ReadFlash_4Byte@temp+3
 12946  1C6C  3000               	movlw	0
 12947  1C6D  00B5               	movwf	ReadFlash_4Byte@temp+2
 12948  1C6E  3000               	movlw	0
 12949  1C6F  00B4               	movwf	ReadFlash_4Byte@temp+1
 12950  1C70  3000               	movlw	0
 12951  1C71  00B3               	movwf	ReadFlash_4Byte@temp
 12952                           
 12953                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12954  1C72  082B               	movf	ReadFlash_4Byte@row+1,w
 12955  1C73  01A6               	clrf	ReadFlash_2Byte@row+1
 12956  1C74  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12957  1C75  082A               	movf	ReadFlash_4Byte@row,w
 12958  1C76  01A5               	clrf	ReadFlash_2Byte@row
 12959  1C77  07A5               	addwf	ReadFlash_2Byte@row,f
 12960  1C78  082C               	movf	ReadFlash_4Byte@column,w
 12961  1C79  00AE               	movwf	??_ReadFlash_4Byte
 12962  1C7A  082E               	movf	??_ReadFlash_4Byte,w
 12963  1C7B  00A7               	movwf	ReadFlash_2Byte@column
 12964  1C7C  319B  230B  319C   	fcall	_ReadFlash_2Byte
 12965  1C7F  0020               	movlb	0	; select bank0
 12966  1C80  0825               	movf	?_ReadFlash_2Byte,w
 12967  1C81  00AF               	movwf	??_ReadFlash_4Byte+1
 12968  1C82  0826               	movf	?_ReadFlash_2Byte+1,w
 12969  1C83  00B0               	movwf	??_ReadFlash_4Byte+2
 12970  1C84  01B1               	clrf	??_ReadFlash_4Byte+3
 12971  1C85  01B2               	clrf	??_ReadFlash_4Byte+4
 12972  1C86  3010               	movlw	16
 12973  1C87                     u7485:	
 12974  1C87  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12975  1C88  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12976  1C89  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12977  1C8A  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12978  1C8B  0B89               	decfsz	9,f
 12979  1C8C  2C87               	goto	u7485
 12980  1C8D  0832               	movf	??_ReadFlash_4Byte+4,w
 12981  1C8E  00B6               	movwf	ReadFlash_4Byte@temp+3
 12982  1C8F  0831               	movf	??_ReadFlash_4Byte+3,w
 12983  1C90  00B5               	movwf	ReadFlash_4Byte@temp+2
 12984  1C91  0830               	movf	??_ReadFlash_4Byte+2,w
 12985  1C92  00B4               	movwf	ReadFlash_4Byte@temp+1
 12986  1C93  082F               	movf	??_ReadFlash_4Byte+1,w
 12987  1C94  00B3               	movwf	ReadFlash_4Byte@temp
 12988                           
 12989                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12990  1C95  082B               	movf	ReadFlash_4Byte@row+1,w
 12991  1C96  01A6               	clrf	ReadFlash_2Byte@row+1
 12992  1C97  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12993  1C98  082A               	movf	ReadFlash_4Byte@row,w
 12994  1C99  01A5               	clrf	ReadFlash_2Byte@row
 12995  1C9A  07A5               	addwf	ReadFlash_2Byte@row,f
 12996  1C9B  082C               	movf	ReadFlash_4Byte@column,w
 12997  1C9C  3E01               	addlw	1
 12998  1C9D  00AE               	movwf	??_ReadFlash_4Byte
 12999  1C9E  082E               	movf	??_ReadFlash_4Byte,w
 13000  1C9F  00A7               	movwf	ReadFlash_2Byte@column
 13001  1CA0  319B  230B         	fcall	_ReadFlash_2Byte
 13002  1CA2  0020               	movlb	0	; select bank0
 13003  1CA3  0825               	movf	?_ReadFlash_2Byte,w
 13004  1CA4  00AF               	movwf	??_ReadFlash_4Byte+1
 13005  1CA5  0826               	movf	?_ReadFlash_2Byte+1,w
 13006  1CA6  00B0               	movwf	??_ReadFlash_4Byte+2
 13007  1CA7  01B1               	clrf	??_ReadFlash_4Byte+3
 13008  1CA8  01B2               	clrf	??_ReadFlash_4Byte+4
 13009  1CA9  082F               	movf	??_ReadFlash_4Byte+1,w
 13010  1CAA  04B3               	iorwf	ReadFlash_4Byte@temp,f
 13011  1CAB  0830               	movf	??_ReadFlash_4Byte+2,w
 13012  1CAC  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 13013  1CAD  0831               	movf	??_ReadFlash_4Byte+3,w
 13014  1CAE  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 13015  1CAF  0832               	movf	??_ReadFlash_4Byte+4,w
 13016  1CB0  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 13017                           
 13018                           ;FLASH.c: 67: return temp;
 13019  1CB1  0836               	movf	ReadFlash_4Byte@temp+3,w
 13020  1CB2  00AD               	movwf	?_ReadFlash_4Byte+3
 13021  1CB3  0835               	movf	ReadFlash_4Byte@temp+2,w
 13022  1CB4  00AC               	movwf	?_ReadFlash_4Byte+2
 13023  1CB5  0834               	movf	ReadFlash_4Byte@temp+1,w
 13024  1CB6  00AB               	movwf	?_ReadFlash_4Byte+1
 13025  1CB7  0833               	movf	ReadFlash_4Byte@temp,w
 13026  1CB8  00AA               	movwf	?_ReadFlash_4Byte
 13027  1CB9  0008               	return
 13028  1CBA                     __end_of_ReadFlash_4Byte:	
 13029                           
 13030                           	psect	text33
 13031  1B0B                     __ptext33:	
 13032 ;; *************** function _ReadFlash_2Byte *****************
 13033 ;; Defined at:
 13034 ;;		line 43 in file "FLASH.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;  row             2    5[BANK0 ] unsigned int 
 13037 ;;  column          1    7[BANK0 ] unsigned char 
 13038 ;; Auto vars:     Size  Location     Type
 13039 ;;		None
 13040 ;; Return value:  Size  Location     Type
 13041 ;;                  2    5[BANK0 ] unsigned int 
 13042 ;; Registers used:
 13043 ;;		wreg, status,2, status,0
 13044 ;; Tracked objects:
 13045 ;;		On entry : 0/0
 13046 ;;		On exit  : 0/0
 13047 ;;		Unchanged: 0/0
 13048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13049 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;Total ram usage:        5 bytes
 13054 ;; Hardware stack levels used:    1
 13055 ;; Hardware stack levels required when called:    3
 13056 ;; This function calls:
 13057 ;;		Nothing
 13058 ;; This function is called by:
 13059 ;;		_ReadFlash_4Byte
 13060 ;;		_WriteFlash_Sequential
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           
 13065                           ;psect for function _ReadFlash_2Byte
 13066  1B0B                     _ReadFlash_2Byte:	
 13067                           
 13068                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 13069                           
 13070                           ;incstack = 0
 13071                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 13072  1B0B  30BF               	movlw	191
 13073  1B0C  0020               	movlb	0	; select bank0
 13074  1B0D  00A8               	movwf	??_ReadFlash_2Byte
 13075  1B0E  0828               	movf	??_ReadFlash_2Byte,w
 13076  1B0F  0023               	movlb	3	; select bank3
 13077  1B10  0595               	andwf	21,f	;volatile
 13078                           
 13079                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 13080  1B11  0020               	movlb	0	; select bank0
 13081  1B12  0826               	movf	ReadFlash_2Byte@row+1,w
 13082  1B13  00A9               	movwf	??_ReadFlash_2Byte+1
 13083  1B14  0825               	movf	ReadFlash_2Byte@row,w
 13084  1B15  00A8               	movwf	??_ReadFlash_2Byte
 13085  1B16  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13086  1B17  0CA8               	rrf	??_ReadFlash_2Byte,f
 13087  1B18  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13088  1B19  0CA8               	rrf	??_ReadFlash_2Byte,f
 13089  1B1A  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 13090  1B1B  0CA8               	rrf	??_ReadFlash_2Byte,f
 13091  1B1C  0828               	movf	??_ReadFlash_2Byte,w
 13092  1B1D  397F               	andlw	127
 13093  1B1E  0023               	movlb	3	; select bank3
 13094  1B1F  0092               	movwf	18	;volatile
 13095                           
 13096                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 13097  1B20  0020               	movlb	0	; select bank0
 13098  1B21  0825               	movf	ReadFlash_2Byte@row,w
 13099  1B22  3907               	andlw	7
 13100  1B23  00A8               	movwf	??_ReadFlash_2Byte
 13101  1B24  3004               	movlw	4
 13102  1B25                     u7335:	
 13103  1B25  35A8               	lslf	??_ReadFlash_2Byte,f
 13104  1B26  3EFF               	addlw	-1
 13105  1B27  1D03               	skipz
 13106  1B28  2B25               	goto	u7335
 13107  1B29  3528               	lslf	??_ReadFlash_2Byte,w
 13108  1B2A  0727               	addwf	ReadFlash_2Byte@column,w
 13109  1B2B  0023               	movlb	3	; select bank3
 13110  1B2C  0091               	movwf	17	;volatile
 13111                           
 13112                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 13113  1B2D  1415               	bsf	21,0	;volatile
 13114  1B2E                     l901:	
 13115                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 13116                           
 13117  1B2E  1815               	btfsc	21,0	;volatile
 13118  1B2F  2B2E               	goto	l901
 13119                           
 13120                           ;FLASH.c: 50: __nop();
 13121  1B30  0000               	nop
 13122                           
 13123                           ;FLASH.c: 51: __nop();
 13124  1B31  0000               	nop
 13125                           
 13126                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 13127  1B32  0023               	movlb	3	; select bank3
 13128  1B33  0814               	movf	20,w	;volatile
 13129  1B34  0020               	movlb	0	; select bank0
 13130  1B35  01A6               	clrf	?_ReadFlash_2Byte+1
 13131  1B36  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13132  1B37  0023               	movlb	3	; select bank3
 13133  1B38  0813               	movf	19,w	;volatile
 13134  1B39  0020               	movlb	0	; select bank0
 13135  1B3A  01A5               	clrf	?_ReadFlash_2Byte
 13136  1B3B  07A5               	addwf	?_ReadFlash_2Byte,f
 13137  1B3C  0008               	return
 13138  1B3D                     __end_of_ReadFlash_2Byte:	
 13139                           
 13140                           	psect	text34
 13141  11CA                     __ptext34:	
 13142 ;; *************** function _InitUART *****************
 13143 ;; Defined at:
 13144 ;;		line 73 in file "UART.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  Baud            4   19[BANK0 ] unsigned long 
 13147 ;;  parity          1   23[BANK0 ] unsigned char 
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;  temp            4   36[BANK0 ] unsigned long 
 13150 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13151 ;;  config          1   35[BANK0 ] unsigned char 
 13152 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13153 ;; Return value:  Size  Location     Type
 13154 ;;		None               void
 13155 ;; Registers used:
 13156 ;;		wreg, status,2, status,0, pclath, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13162 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;Total ram usage:       21 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:    4
 13169 ;; This function calls:
 13170 ;;		_CloseUSART
 13171 ;;		_OpenUSART
 13172 ;;		_ReadUSART
 13173 ;;		___lldiv
 13174 ;;		_baudUSART
 13175 ;; This function is called by:
 13176 ;;		_Init_System
 13177 ;;		_SetBaud
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           
 13182                           ;psect for function _InitUART
 13183  11CA                     _InitUART:	
 13184                           
 13185                           ;UART.c: 75: unsigned long temp;
 13186                           ;UART.c: 76: unsigned char config;
 13187                           ;UART.c: 77: unsigned int spbrg;
 13188                           ;UART.c: 78: unsigned char baudconfig;
 13189                           ;UART.c: 88: LATC |= 0b00000100;
 13190                           
 13191                           ;incstack = 0
 13192                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13193  11CA  0022               	movlb	2	; select bank2
 13194  11CB  150E               	bsf	14,2	;volatile
 13195                           
 13196                           ;UART.c: 89: PPSLOCK =0;
 13197  11CC  003C               	movlb	28	; select bank28
 13198  11CD  018F               	clrf	15	;volatile
 13199                           
 13200                           ;UART.c: 90: RC2PPS = 0b00000000;
 13201  11CE  003D               	movlb	29	; select bank29
 13202  11CF  01A2               	clrf	34	;volatile
 13203                           
 13204                           ;UART.c: 91: PPSLOCK =1;
 13205  11D0  3001               	movlw	1
 13206  11D1  003C               	movlb	28	; select bank28
 13207  11D2  008F               	movwf	15	;volatile
 13208                           
 13209                           ;UART.c: 93: CloseUSART();
 13210  11D3  3199  210E  3191   	fcall	_CloseUSART
 13211                           
 13212                           ;UART.c: 94: config =0;
 13213  11D6  0020               	movlb	0	; select bank0
 13214  11D7  01C3               	clrf	InitUART@config
 13215                           
 13216                           ;UART.c: 95: baudconfig =0;
 13217  11D8  01C2               	clrf	InitUART@baudconfig
 13218                           
 13219                           ;UART.c: 100: config |= 0b01000000;
 13220  11D9  1743               	bsf	InitUART@config,6
 13221                           
 13222                           ;UART.c: 103: config |= 0b00001000;
 13223  11DA  15C3               	bsf	InitUART@config,3
 13224                           
 13225                           ;UART.c: 104: config |= 0b00010000;
 13226  11DB  1643               	bsf	InitUART@config,4
 13227                           
 13228                           ;UART.c: 105: PARITY = parity;
 13229  11DC  0837               	movf	InitUART@parity,w
 13230  11DD  00B8               	movwf	??_InitUART
 13231  11DE  0838               	movf	??_InitUART,w
 13232  11DF  0021               	movlb	1	; select bank1
 13233  11E0  00EA               	movwf	_PARITY^(0+128)
 13234                           
 13235                           ;UART.c: 106: BAUD = Baud;
 13236  11E1  0020               	movlb	0	; select bank0
 13237  11E2  0836               	movf	InitUART@Baud+3,w
 13238  11E3  0024               	movlb	4	; select bank4
 13239  11E4  00A3               	movwf	(_BAUD+3)^(0+512)
 13240  11E5  0020               	movlb	0	; select bank0
 13241  11E6  0835               	movf	InitUART@Baud+2,w
 13242  11E7  0024               	movlb	4	; select bank4
 13243  11E8  00A2               	movwf	(_BAUD+2)^(0+512)
 13244  11E9  0020               	movlb	0	; select bank0
 13245  11EA  0834               	movf	InitUART@Baud+1,w
 13246  11EB  0024               	movlb	4	; select bank4
 13247  11EC  00A1               	movwf	(_BAUD+1)^(0+512)
 13248  11ED  0020               	movlb	0	; select bank0
 13249  11EE  0833               	movf	InitUART@Baud,w
 13250  11EF  0024               	movlb	4	; select bank4
 13251  11F0  00A0               	movwf	_BAUD^(0+512)
 13252                           
 13253                           ;UART.c: 107: if(parity)
 13254  11F1  0020               	movlb	0	; select bank0
 13255  11F2  0837               	movf	InitUART@parity,w
 13256  11F3  1903               	btfsc	3,2
 13257  11F4  29F7               	goto	l5969
 13258                           
 13259                           ;UART.c: 108: {
 13260                           ;UART.c: 109: config |= 0b00000010;
 13261  11F5  14C3               	bsf	InitUART@config,1
 13262                           
 13263                           ;UART.c: 110: }
 13264  11F6  29FB               	goto	l5971
 13265  11F7                     l5969:	
 13266                           
 13267                           ;UART.c: 111: else
 13268                           ;UART.c: 112: {
 13269                           ;UART.c: 113: config &= ~0b00000010;
 13270  11F7  30FD               	movlw	253
 13271  11F8  00B8               	movwf	??_InitUART
 13272  11F9  0838               	movf	??_InitUART,w
 13273  11FA  05C3               	andwf	InitUART@config,f
 13274  11FB                     l5971:	
 13275                           
 13276                           ;UART.c: 114: }
 13277                           ;UART.c: 115: baudconfig |= 0b00001000;
 13278  11FB  15C2               	bsf	InitUART@baudconfig,3
 13279                           
 13280                           ;UART.c: 118: temp = (32000000L / Baud) - 1;
 13281  11FC  0836               	movf	InitUART@Baud+3,w
 13282  11FD  00A8               	movwf	___lldiv@divisor+3
 13283  11FE  0835               	movf	InitUART@Baud+2,w
 13284  11FF  00A7               	movwf	___lldiv@divisor+2
 13285  1200  0834               	movf	InitUART@Baud+1,w
 13286  1201  00A6               	movwf	___lldiv@divisor+1
 13287  1202  0833               	movf	InitUART@Baud,w
 13288  1203  00A5               	movwf	___lldiv@divisor
 13289  1204  3001               	movlw	1
 13290  1205  00AC               	movwf	___lldiv@dividend+3
 13291  1206  30E8               	movlw	232
 13292  1207  00AB               	movwf	___lldiv@dividend+2
 13293  1208  3048               	movlw	72
 13294  1209  00AA               	movwf	___lldiv@dividend+1
 13295  120A  3000               	movlw	0
 13296  120B  00A9               	movwf	___lldiv@dividend
 13297  120C  319C  24BA  3191   	fcall	___lldiv
 13298  120F  30FF               	movlw	255
 13299  1210  0020               	movlb	0	; select bank0
 13300  1211  0725               	addwf	?___lldiv,w
 13301  1212  00C4               	movwf	InitUART@temp
 13302  1213  30FF               	movlw	255
 13303  1214  3D26               	addwfc	?___lldiv+1,w
 13304  1215  00C5               	movwf	InitUART@temp+1
 13305  1216  30FF               	movlw	255
 13306  1217  3D27               	addwfc	?___lldiv+2,w
 13307  1218  00C6               	movwf	InitUART@temp+2
 13308  1219  30FF               	movlw	255
 13309  121A  3D28               	addwfc	?___lldiv+3,w
 13310  121B  00C7               	movwf	InitUART@temp+3
 13311                           
 13312                           ;UART.c: 119: temp = (temp >> 2) - 1;
 13313  121C  30FF               	movlw	255
 13314  121D  00B8               	movwf	??_InitUART
 13315  121E  30FF               	movlw	255
 13316  121F  00B9               	movwf	??_InitUART+1
 13317  1220  30FF               	movlw	255
 13318  1221  00BA               	movwf	??_InitUART+2
 13319  1222  30FF               	movlw	255
 13320  1223  00BB               	movwf	??_InitUART+3
 13321  1224  0844               	movf	InitUART@temp,w
 13322  1225  00BC               	movwf	??_InitUART+4
 13323  1226  0845               	movf	InitUART@temp+1,w
 13324  1227  00BD               	movwf	??_InitUART+5
 13325  1228  0846               	movf	InitUART@temp+2,w
 13326  1229  00BE               	movwf	??_InitUART+6
 13327  122A  0847               	movf	InitUART@temp+3,w
 13328  122B  00BF               	movwf	??_InitUART+7
 13329  122C  3002               	movlw	2
 13330  122D                     u7765:	
 13331  122D  36BF               	lsrf	??_InitUART+7,f
 13332  122E  0CBE               	rrf	??_InitUART+6,f
 13333  122F  0CBD               	rrf	??_InitUART+5,f
 13334  1230  0CBC               	rrf	??_InitUART+4,f
 13335  1231  0B89               	decfsz	9,f
 13336  1232  2A2D               	goto	u7765
 13337  1233  083C               	movf	??_InitUART+4,w
 13338  1234  07B8               	addwf	??_InitUART,f
 13339  1235  083D               	movf	??_InitUART+5,w
 13340  1236  3DB9               	addwfc	??_InitUART+1,f
 13341  1237  083E               	movf	??_InitUART+6,w
 13342  1238  3DBA               	addwfc	??_InitUART+2,f
 13343  1239  083F               	movf	??_InitUART+7,w
 13344  123A  3DBB               	addwfc	??_InitUART+3,f
 13345  123B  083B               	movf	??_InitUART+3,w
 13346  123C  00C7               	movwf	InitUART@temp+3
 13347  123D  083A               	movf	??_InitUART+2,w
 13348  123E  00C6               	movwf	InitUART@temp+2
 13349  123F  0839               	movf	??_InitUART+1,w
 13350  1240  00C5               	movwf	InitUART@temp+1
 13351  1241  0838               	movf	??_InitUART,w
 13352  1242  00C4               	movwf	InitUART@temp
 13353                           
 13354                           ;UART.c: 120: spbrg = (unsigned int)temp;
 13355  1243  0845               	movf	InitUART@temp+1,w
 13356  1244  01C1               	clrf	InitUART@spbrg+1
 13357  1245  07C1               	addwf	InitUART@spbrg+1,f
 13358  1246  0844               	movf	InitUART@temp,w
 13359  1247  01C0               	clrf	InitUART@spbrg
 13360  1248  07C0               	addwf	InitUART@spbrg,f
 13361                           
 13362                           ;UART.c: 122: RCSTAbits.CREN = 0;
 13363  1249  0023               	movlb	3	; select bank3
 13364  124A  121D               	bcf	29,4	;volatile
 13365                           
 13366                           ;UART.c: 123: OpenUSART(config, spbrg);
 13367  124B  0020               	movlb	0	; select bank0
 13368  124C  0841               	movf	InitUART@spbrg+1,w
 13369  124D  01A6               	clrf	OpenUSART@spbrg+1
 13370  124E  07A6               	addwf	OpenUSART@spbrg+1,f
 13371  124F  0840               	movf	InitUART@spbrg,w
 13372  1250  01A5               	clrf	OpenUSART@spbrg
 13373  1251  07A5               	addwf	OpenUSART@spbrg,f
 13374  1252  0843               	movf	InitUART@config,w
 13375  1253  319B  23A3  3191   	fcall	_OpenUSART
 13376                           
 13377                           ;UART.c: 124: baudUSART(baudconfig);
 13378  1256  0020               	movlb	0	; select bank0
 13379  1257  0842               	movf	InitUART@baudconfig,w
 13380  1258  3198  20CE  3191   	fcall	_baudUSART
 13381                           
 13382                           ;UART.c: 125: temp = ReadUSART();
 13383  125B  3198  20D7  3191   	fcall	_ReadUSART
 13384  125E  0020               	movlb	0	; select bank0
 13385  125F  00B8               	movwf	??_InitUART
 13386  1260  01B9               	clrf	??_InitUART+1
 13387  1261  01BA               	clrf	??_InitUART+2
 13388  1262  01BB               	clrf	??_InitUART+3
 13389  1263  083B               	movf	??_InitUART+3,w
 13390  1264  00C7               	movwf	InitUART@temp+3
 13391  1265  083A               	movf	??_InitUART+2,w
 13392  1266  00C6               	movwf	InitUART@temp+2
 13393  1267  0839               	movf	??_InitUART+1,w
 13394  1268  00C5               	movwf	InitUART@temp+1
 13395  1269  0838               	movf	??_InitUART,w
 13396  126A  00C4               	movwf	InitUART@temp
 13397                           
 13398                           ;UART.c: 126: temp = ReadUSART();
 13399  126B  3198  20D7  3191   	fcall	_ReadUSART
 13400  126E  0020               	movlb	0	; select bank0
 13401  126F  00B8               	movwf	??_InitUART
 13402  1270  01B9               	clrf	??_InitUART+1
 13403  1271  01BA               	clrf	??_InitUART+2
 13404  1272  01BB               	clrf	??_InitUART+3
 13405  1273  083B               	movf	??_InitUART+3,w
 13406  1274  00C7               	movwf	InitUART@temp+3
 13407  1275  083A               	movf	??_InitUART+2,w
 13408  1276  00C6               	movwf	InitUART@temp+2
 13409  1277  0839               	movf	??_InitUART+1,w
 13410  1278  00C5               	movwf	InitUART@temp+1
 13411  1279  0838               	movf	??_InitUART,w
 13412  127A  00C4               	movwf	InitUART@temp
 13413                           
 13414                           ;UART.c: 127: temp = ReadUSART();
 13415  127B  3198  20D7  3191   	fcall	_ReadUSART
 13416  127E  0020               	movlb	0	; select bank0
 13417  127F  00B8               	movwf	??_InitUART
 13418  1280  01B9               	clrf	??_InitUART+1
 13419  1281  01BA               	clrf	??_InitUART+2
 13420  1282  01BB               	clrf	??_InitUART+3
 13421  1283  083B               	movf	??_InitUART+3,w
 13422  1284  00C7               	movwf	InitUART@temp+3
 13423  1285  083A               	movf	??_InitUART+2,w
 13424  1286  00C6               	movwf	InitUART@temp+2
 13425  1287  0839               	movf	??_InitUART+1,w
 13426  1288  00C5               	movwf	InitUART@temp+1
 13427  1289  0838               	movf	??_InitUART,w
 13428  128A  00C4               	movwf	InitUART@temp
 13429                           
 13430                           ;UART.c: 128: temp = ReadUSART();
 13431  128B  3198  20D7  3191   	fcall	_ReadUSART
 13432  128E  0020               	movlb	0	; select bank0
 13433  128F  00B8               	movwf	??_InitUART
 13434  1290  01B9               	clrf	??_InitUART+1
 13435  1291  01BA               	clrf	??_InitUART+2
 13436  1292  01BB               	clrf	??_InitUART+3
 13437  1293  083B               	movf	??_InitUART+3,w
 13438  1294  00C7               	movwf	InitUART@temp+3
 13439  1295  083A               	movf	??_InitUART+2,w
 13440  1296  00C6               	movwf	InitUART@temp+2
 13441  1297  0839               	movf	??_InitUART+1,w
 13442  1298  00C5               	movwf	InitUART@temp+1
 13443  1299  0838               	movf	??_InitUART,w
 13444  129A  00C4               	movwf	InitUART@temp
 13445                           
 13446                           ;UART.c: 129: temp = ReadUSART();
 13447  129B  3198  20D7         	fcall	_ReadUSART
 13448  129D  0020               	movlb	0	; select bank0
 13449  129E  00B8               	movwf	??_InitUART
 13450  129F  01B9               	clrf	??_InitUART+1
 13451  12A0  01BA               	clrf	??_InitUART+2
 13452  12A1  01BB               	clrf	??_InitUART+3
 13453  12A2  083B               	movf	??_InitUART+3,w
 13454  12A3  00C7               	movwf	InitUART@temp+3
 13455  12A4  083A               	movf	??_InitUART+2,w
 13456  12A5  00C6               	movwf	InitUART@temp+2
 13457  12A6  0839               	movf	??_InitUART+1,w
 13458  12A7  00C5               	movwf	InitUART@temp+1
 13459  12A8  0838               	movf	??_InitUART,w
 13460  12A9  00C4               	movwf	InitUART@temp
 13461                           
 13462                           ;UART.c: 131: PPSLOCK =0;
 13463  12AA  003C               	movlb	28	; select bank28
 13464  12AB  018F               	clrf	15	;volatile
 13465                           
 13466                           ;UART.c: 132: RC2PPS = 0b00010100;
 13467  12AC  3014               	movlw	20
 13468  12AD  003D               	movlb	29	; select bank29
 13469  12AE  00A2               	movwf	34	;volatile
 13470                           
 13471                           ;UART.c: 133: CKPPS = 0b00010010;
 13472  12AF  3012               	movlw	18
 13473  12B0  003C               	movlb	28	; select bank28
 13474  12B1  00A5               	movwf	37	;volatile
 13475                           
 13476                           ;UART.c: 135: RXPPS = 0b00010101;
 13477  12B2  3015               	movlw	21
 13478  12B3  00A4               	movwf	36	;volatile
 13479                           
 13480                           ;UART.c: 137: PPSLOCK =1;
 13481  12B4  3001               	movlw	1
 13482  12B5  008F               	movwf	15	;volatile
 13483                           
 13484                           ;UART.c: 139: PIR1bits.RCIF = 0;
 13485  12B6  0020               	movlb	0	; select bank0
 13486  12B7  1291               	bcf	17,5	;volatile
 13487                           
 13488                           ;UART.c: 140: INTCONbits.PEIE = 1;
 13489  12B8  170B               	bsf	11,6	;volatile
 13490  12B9  0008               	return
 13491  12BA                     __end_of_InitUART:	
 13492                           
 13493                           	psect	text35
 13494  18CE                     __ptext35:	
 13495 ;; *************** function _baudUSART *****************
 13496 ;; Defined at:
 13497 ;;		line 148 in file "UART.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  baudconfig      1    wreg     unsigned char 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13502 ;; Return value:  Size  Location     Type
 13503 ;;		None               void
 13504 ;; Registers used:
 13505 ;;		wreg, status,2
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;Total ram usage:        1 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:    3
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_InitUART
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _baudUSART
 13527  18CE                     _baudUSART:	
 13528                           
 13529                           ;incstack = 0
 13530                           ; Regs used in _baudUSART: [wreg+status,2]
 13531                           ;baudUSART@baudconfig stored from wreg
 13532  18CE  0020               	movlb	0	; select bank0
 13533  18CF  00A5               	movwf	baudUSART@baudconfig
 13534                           
 13535                           ;UART.c: 150: BAUD1CON =0;
 13536  18D0  0023               	movlb	3	; select bank3
 13537  18D1  019F               	clrf	31	;volatile
 13538                           
 13539                           ;UART.c: 151: BAUD1CON = baudconfig;
 13540  18D2  0020               	movlb	0	; select bank0
 13541  18D3  0825               	movf	baudUSART@baudconfig,w
 13542  18D4  0023               	movlb	3	; select bank3
 13543  18D5  009F               	movwf	31	;volatile
 13544  18D6  0008               	return
 13545  18D7                     __end_of_baudUSART:	
 13546                           
 13547                           	psect	text36
 13548  1CBA                     __ptext36:	
 13549 ;; *************** function ___lldiv *****************
 13550 ;; Defined at:
 13551 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13552 ;; Parameters:    Size  Location     Type
 13553 ;;  divisor         4    5[BANK0 ] unsigned long 
 13554 ;;  dividend        4    9[BANK0 ] unsigned long 
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;  quotient        4   14[BANK0 ] unsigned long 
 13557 ;;  counter         1   18[BANK0 ] unsigned char 
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  4    5[BANK0 ] unsigned long 
 13560 ;; Registers used:
 13561 ;;		wreg, status,2, status,0
 13562 ;; Tracked objects:
 13563 ;;		On entry : 0/0
 13564 ;;		On exit  : 0/0
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13567 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;Total ram usage:       14 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    3
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_InitUART
 13578 ;;		_sprintf
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function ___lldiv
 13584  1CBA                     ___lldiv:	
 13585                           
 13586                           ;incstack = 0
 13587                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13588  1CBA  3000               	movlw	0
 13589  1CBB  0020               	movlb	0	; select bank0
 13590  1CBC  00B1               	movwf	___lldiv@quotient+3
 13591  1CBD  3000               	movlw	0
 13592  1CBE  00B0               	movwf	___lldiv@quotient+2
 13593  1CBF  3000               	movlw	0
 13594  1CC0  00AF               	movwf	___lldiv@quotient+1
 13595  1CC1  3000               	movlw	0
 13596  1CC2  00AE               	movwf	___lldiv@quotient
 13597  1CC3  0828               	movf	___lldiv@divisor+3,w
 13598  1CC4  0427               	iorwf	___lldiv@divisor+2,w
 13599  1CC5  0426               	iorwf	___lldiv@divisor+1,w
 13600  1CC6  0425               	iorwf	___lldiv@divisor,w
 13601  1CC7  1903               	skipnz
 13602  1CC8  2D04               	goto	l5867
 13603  1CC9  01B2               	clrf	___lldiv@counter
 13604  1CCA  0AB2               	incf	___lldiv@counter,f
 13605  1CCB                     l5853:	
 13606  1CCB  1BA8               	btfsc	___lldiv@divisor+3,7
 13607  1CCC  2CD9               	goto	l5855
 13608  1CCD  3001               	movlw	1
 13609  1CCE                     u7545:	
 13610  1CCE  35A5               	lslf	___lldiv@divisor,f
 13611  1CCF  0DA6               	rlf	___lldiv@divisor+1,f
 13612  1CD0  0DA7               	rlf	___lldiv@divisor+2,f
 13613  1CD1  0DA8               	rlf	___lldiv@divisor+3,f
 13614  1CD2  0B89               	decfsz	9,f
 13615  1CD3  2CCE               	goto	u7545
 13616  1CD4  3001               	movlw	1
 13617  1CD5  00AD               	movwf	??___lldiv
 13618  1CD6  082D               	movf	??___lldiv,w
 13619  1CD7  07B2               	addwf	___lldiv@counter,f
 13620  1CD8  2CCB               	goto	l5853
 13621  1CD9                     l5855:	
 13622  1CD9  3001               	movlw	1
 13623  1CDA                     u7565:	
 13624  1CDA  35AE               	lslf	___lldiv@quotient,f
 13625  1CDB  0DAF               	rlf	___lldiv@quotient+1,f
 13626  1CDC  0DB0               	rlf	___lldiv@quotient+2,f
 13627  1CDD  0DB1               	rlf	___lldiv@quotient+3,f
 13628  1CDE  0B89               	decfsz	9,f
 13629  1CDF  2CDA               	goto	u7565
 13630  1CE0  0828               	movf	___lldiv@divisor+3,w
 13631  1CE1  022C               	subwf	___lldiv@dividend+3,w
 13632  1CE2  1D03               	skipz
 13633  1CE3  2CEE               	goto	u7575
 13634  1CE4  0827               	movf	___lldiv@divisor+2,w
 13635  1CE5  022B               	subwf	___lldiv@dividend+2,w
 13636  1CE6  1D03               	skipz
 13637  1CE7  2CEE               	goto	u7575
 13638  1CE8  0826               	movf	___lldiv@divisor+1,w
 13639  1CE9  022A               	subwf	___lldiv@dividend+1,w
 13640  1CEA  1D03               	skipz
 13641  1CEB  2CEE               	goto	u7575
 13642  1CEC  0825               	movf	___lldiv@divisor,w
 13643  1CED  0229               	subwf	___lldiv@dividend,w
 13644  1CEE                     u7575:	
 13645  1CEE  1C03               	skipc
 13646  1CEF  2CF9               	goto	l5863
 13647  1CF0  0825               	movf	___lldiv@divisor,w
 13648  1CF1  02A9               	subwf	___lldiv@dividend,f
 13649  1CF2  0826               	movf	___lldiv@divisor+1,w
 13650  1CF3  3BAA               	subwfb	___lldiv@dividend+1,f
 13651  1CF4  0827               	movf	___lldiv@divisor+2,w
 13652  1CF5  3BAB               	subwfb	___lldiv@dividend+2,f
 13653  1CF6  0828               	movf	___lldiv@divisor+3,w
 13654  1CF7  3BAC               	subwfb	___lldiv@dividend+3,f
 13655  1CF8  142E               	bsf	___lldiv@quotient,0
 13656  1CF9                     l5863:	
 13657  1CF9  3001               	movlw	1
 13658  1CFA                     u7585:	
 13659  1CFA  36A8               	lsrf	___lldiv@divisor+3,f
 13660  1CFB  0CA7               	rrf	___lldiv@divisor+2,f
 13661  1CFC  0CA6               	rrf	___lldiv@divisor+1,f
 13662  1CFD  0CA5               	rrf	___lldiv@divisor,f
 13663  1CFE  0B89               	decfsz	9,f
 13664  1CFF  2CFA               	goto	u7585
 13665  1D00  3001               	movlw	1
 13666  1D01  02B2               	subwf	___lldiv@counter,f
 13667  1D02  1D03               	btfss	3,2
 13668  1D03  2CD9               	goto	l5855
 13669  1D04                     l5867:	
 13670  1D04  0831               	movf	___lldiv@quotient+3,w
 13671  1D05  00A8               	movwf	?___lldiv+3
 13672  1D06  0830               	movf	___lldiv@quotient+2,w
 13673  1D07  00A7               	movwf	?___lldiv+2
 13674  1D08  082F               	movf	___lldiv@quotient+1,w
 13675  1D09  00A6               	movwf	?___lldiv+1
 13676  1D0A  082E               	movf	___lldiv@quotient,w
 13677  1D0B  00A5               	movwf	?___lldiv
 13678  1D0C  0008               	return
 13679  1D0D                     __end_of___lldiv:	
 13680                           
 13681                           	psect	text37
 13682  18D7                     __ptext37:	
 13683 ;; *************** function _ReadUSART *****************
 13684 ;; Defined at:
 13685 ;;		line 299 in file "UART.c"
 13686 ;; Parameters:    Size  Location     Type
 13687 ;;		None
 13688 ;; Auto vars:     Size  Location     Type
 13689 ;;  data            1    6[BANK0 ] unsigned char 
 13690 ;; Return value:  Size  Location     Type
 13691 ;;                  1    wreg      unsigned char 
 13692 ;; Registers used:
 13693 ;;		wreg
 13694 ;; Tracked objects:
 13695 ;;		On entry : 0/0
 13696 ;;		On exit  : 0/0
 13697 ;;		Unchanged: 0/0
 13698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;Total ram usage:        2 bytes
 13704 ;; Hardware stack levels used:    1
 13705 ;; Hardware stack levels required when called:    3
 13706 ;; This function calls:
 13707 ;;		Nothing
 13708 ;; This function is called by:
 13709 ;;		_InitUART
 13710 ;; This function uses a non-reentrant model
 13711 ;;
 13712                           
 13713                           
 13714                           ;psect for function _ReadUSART
 13715  18D7                     _ReadUSART:	
 13716                           
 13717                           ;UART.c: 301: char data;
 13718                           ;UART.c: 303: if(RCSTAbits.OERR)
 13719                           
 13720                           ;incstack = 0
 13721                           ; Regs used in _ReadUSART: [wreg]
 13722  18D7  0023               	movlb	3	; select bank3
 13723  18D8  189D               	btfsc	29,1	;volatile
 13724                           
 13725                           ;UART.c: 304: {
 13726                           ;UART.c: 305: RCSTAbits.CREN = 0;
 13727  18D9  121D               	bcf	29,4	;volatile
 13728                           
 13729                           ;UART.c: 306: }
 13730                           ;UART.c: 308: data = RCREG;
 13731  18DA  0819               	movf	25,w	;volatile
 13732  18DB  0020               	movlb	0	; select bank0
 13733  18DC  00A5               	movwf	??_ReadUSART
 13734  18DD  0825               	movf	??_ReadUSART,w
 13735  18DE  00A6               	movwf	ReadUSART@data
 13736                           
 13737                           ;UART.c: 310: return (data);
 13738  18DF  0826               	movf	ReadUSART@data,w
 13739  18E0  0008               	return
 13740  18E1                     __end_of_ReadUSART:	
 13741                           
 13742                           	psect	text38
 13743  1BA3                     __ptext38:	
 13744 ;; *************** function _OpenUSART *****************
 13745 ;; Defined at:
 13746 ;;		line 159 in file "UART.c"
 13747 ;; Parameters:    Size  Location     Type
 13748 ;;  config          1    wreg     unsigned char 
 13749 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13750 ;; Auto vars:     Size  Location     Type
 13751 ;;  config          1    7[BANK0 ] unsigned char 
 13752 ;; Return value:  Size  Location     Type
 13753 ;;		None               void
 13754 ;; Registers used:
 13755 ;;		wreg, status,2
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13761 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;Total ram usage:        3 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    3
 13768 ;; This function calls:
 13769 ;;		Nothing
 13770 ;; This function is called by:
 13771 ;;		_InitUART
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           
 13776                           ;psect for function _OpenUSART
 13777  1BA3                     _OpenUSART:	
 13778                           
 13779                           ;incstack = 0
 13780                           ; Regs used in _OpenUSART: [wreg+status,2]
 13781                           ;OpenUSART@config stored from wreg
 13782  1BA3  0020               	movlb	0	; select bank0
 13783  1BA4  00A7               	movwf	OpenUSART@config
 13784                           
 13785                           ;UART.c: 161: TX1STA = 0;
 13786  1BA5  0023               	movlb	3	; select bank3
 13787  1BA6  019E               	clrf	30	;volatile
 13788                           
 13789                           ;UART.c: 162: RC1STA = 0;
 13790  1BA7  019D               	clrf	29	;volatile
 13791                           
 13792                           ;UART.c: 164: if(config&0x01)
 13793  1BA8  0020               	movlb	0	; select bank0
 13794  1BA9  1C27               	btfss	OpenUSART@config,0
 13795  1BAA  2BAD               	goto	l5735
 13796                           
 13797                           ;UART.c: 165: {
 13798                           ;UART.c: 166: TX1STAbits.SYNC = 1;
 13799  1BAB  0023               	movlb	3	; select bank3
 13800  1BAC  161E               	bsf	30,4	;volatile
 13801  1BAD                     l5735:	
 13802                           
 13803                           ;UART.c: 167: }
 13804                           ;UART.c: 169: if(config&0x02)
 13805  1BAD  0020               	movlb	0	; select bank0
 13806  1BAE  1CA7               	btfss	OpenUSART@config,1
 13807  1BAF  2BB3               	goto	l5739
 13808                           
 13809                           ;UART.c: 170: {
 13810                           ;UART.c: 171: TX1STAbits.TX9 = 1;
 13811  1BB0  0023               	movlb	3	; select bank3
 13812  1BB1  171E               	bsf	30,6	;volatile
 13813                           
 13814                           ;UART.c: 172: RC1STAbits.RX9 = 1;
 13815  1BB2  171D               	bsf	29,6	;volatile
 13816  1BB3                     l5739:	
 13817                           
 13818                           ;UART.c: 173: }
 13819                           ;UART.c: 175: if(config&0x04)
 13820  1BB3  0020               	movlb	0	; select bank0
 13821  1BB4  1D27               	btfss	OpenUSART@config,2
 13822  1BB5  2BB8               	goto	l5743
 13823                           
 13824                           ;UART.c: 176: {
 13825                           ;UART.c: 177: TX1STAbits.CSRC = 1;
 13826  1BB6  0023               	movlb	3	; select bank3
 13827  1BB7  179E               	bsf	30,7	;volatile
 13828  1BB8                     l5743:	
 13829                           
 13830                           ;UART.c: 178: }
 13831                           ;UART.c: 180: if(config&0x08)
 13832  1BB8  0020               	movlb	0	; select bank0
 13833  1BB9  1DA7               	btfss	OpenUSART@config,3
 13834  1BBA  2BBE               	goto	l379
 13835                           
 13836                           ;UART.c: 181: {
 13837                           ;UART.c: 182: RC1STAbits.CREN = 1;
 13838  1BBB  0023               	movlb	3	; select bank3
 13839  1BBC  161D               	bsf	29,4	;volatile
 13840                           
 13841                           ;UART.c: 183: }
 13842  1BBD  2BC0               	goto	l5747
 13843  1BBE                     l379:	
 13844                           
 13845                           ;UART.c: 184: else
 13846                           ;UART.c: 185: {
 13847                           ;UART.c: 186: RC1STAbits.SREN = 1;
 13848  1BBE  0023               	movlb	3	; select bank3
 13849  1BBF  169D               	bsf	29,5	;volatile
 13850  1BC0                     l5747:	
 13851                           
 13852                           ;UART.c: 187: }
 13853                           ;UART.c: 189: if(config&0x10)
 13854  1BC0  0020               	movlb	0	; select bank0
 13855  1BC1  1E27               	btfss	OpenUSART@config,4
 13856  1BC2  2BC5               	goto	l5753
 13857                           
 13858                           ;UART.c: 190: {
 13859                           ;UART.c: 191: TX1STAbits.BRGH = 1;
 13860  1BC3  0023               	movlb	3	; select bank3
 13861  1BC4  151E               	bsf	30,2	;volatile
 13862  1BC5                     l5753:	
 13863                           ;UART.c: 195: {
 13864                           
 13865                           
 13866                           ;UART.c: 197: }
 13867                           ;UART.c: 199: if(config&0x40)
 13868  1BC5  0020               	movlb	0	; select bank0
 13869  1BC6  1F27               	btfss	OpenUSART@config,6
 13870  1BC7  2BCC               	goto	l383
 13871                           
 13872                           ;UART.c: 200: {
 13873                           ;UART.c: 201: PIR1bits.RCIF = 0;
 13874  1BC8  1291               	bcf	17,5	;volatile
 13875                           
 13876                           ;UART.c: 202: PIE1bits.RCIE = 1;
 13877  1BC9  0021               	movlb	1	; select bank1
 13878  1BCA  1691               	bsf	17,5	;volatile
 13879                           
 13880                           ;UART.c: 203: }
 13881  1BCB  2BCE               	goto	l5757
 13882  1BCC                     l383:	
 13883                           
 13884                           ;UART.c: 204: else
 13885                           ;UART.c: 205: {
 13886                           ;UART.c: 206: PIE1bits.RCIE = 0;
 13887  1BCC  0021               	movlb	1	; select bank1
 13888  1BCD  1291               	bcf	17,5	;volatile
 13889  1BCE                     l5757:	
 13890                           
 13891                           ;UART.c: 207: }
 13892                           ;UART.c: 209: if(config&0x80)
 13893  1BCE  0020               	movlb	0	; select bank0
 13894  1BCF  1FA7               	btfss	OpenUSART@config,7
 13895  1BD0  2BD5               	goto	l385
 13896                           
 13897                           ;UART.c: 210: {
 13898                           ;UART.c: 211: PIR1bits.TXIF = 0;
 13899  1BD1  1211               	bcf	17,4	;volatile
 13900                           
 13901                           ;UART.c: 212: PIE1bits.TXIE = 1;
 13902  1BD2  0021               	movlb	1	; select bank1
 13903  1BD3  1611               	bsf	17,4	;volatile
 13904                           
 13905                           ;UART.c: 213: }
 13906  1BD4  2BD7               	goto	l5761
 13907  1BD5                     l385:	
 13908                           
 13909                           ;UART.c: 214: else
 13910                           ;UART.c: 215: {
 13911                           ;UART.c: 216: PIE1bits.TXIE = 0;
 13912  1BD5  0021               	movlb	1	; select bank1
 13913  1BD6  1211               	bcf	17,4	;volatile
 13914  1BD7                     l5761:	
 13915                           
 13916                           ;UART.c: 217: }
 13917                           ;UART.c: 219: SPBRG = spbrg;
 13918  1BD7  0020               	movlb	0	; select bank0
 13919  1BD8  0825               	movf	OpenUSART@spbrg,w
 13920  1BD9  0023               	movlb	3	; select bank3
 13921  1BDA  009B               	movwf	27	;volatile
 13922                           
 13923                           ;UART.c: 220: SPBRGH = spbrg >> 8;
 13924  1BDB  0020               	movlb	0	; select bank0
 13925  1BDC  0826               	movf	OpenUSART@spbrg+1,w
 13926  1BDD  0023               	movlb	3	; select bank3
 13927  1BDE  009C               	movwf	28	;volatile
 13928                           
 13929                           ;UART.c: 222: TX1STAbits.TXEN = 1;
 13930  1BDF  169E               	bsf	30,5	;volatile
 13931                           
 13932                           ;UART.c: 223: RC1STAbits.SPEN = 1;
 13933  1BE0  179D               	bsf	29,7	;volatile
 13934  1BE1  0008               	return
 13935  1BE2                     __end_of_OpenUSART:	
 13936                           
 13937                           	psect	text39
 13938  190E                     __ptext39:	
 13939 ;; *************** function _CloseUSART *****************
 13940 ;; Defined at:
 13941 ;;		line 60 in file "UART.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;		None
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;		None
 13946 ;; Return value:  Size  Location     Type
 13947 ;;		None               void
 13948 ;; Registers used:
 13949 ;;		wreg, status,2, status,0
 13950 ;; Tracked objects:
 13951 ;;		On entry : 0/0
 13952 ;;		On exit  : 0/0
 13953 ;;		Unchanged: 0/0
 13954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;Total ram usage:        1 bytes
 13960 ;; Hardware stack levels used:    1
 13961 ;; Hardware stack levels required when called:    3
 13962 ;; This function calls:
 13963 ;;		Nothing
 13964 ;; This function is called by:
 13965 ;;		_InitUART
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969                           
 13970                           ;psect for function _CloseUSART
 13971  190E                     _CloseUSART:	
 13972                           
 13973                           ;UART.c: 62: RCSTA&=0b01001111;
 13974                           
 13975                           ;incstack = 0
 13976                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13977  190E  304F               	movlw	79
 13978  190F  0020               	movlb	0	; select bank0
 13979  1910  00A5               	movwf	??_CloseUSART
 13980  1911  0825               	movf	??_CloseUSART,w
 13981  1912  0023               	movlb	3	; select bank3
 13982  1913  059D               	andwf	29,f	;volatile
 13983                           
 13984                           ;UART.c: 63: TX1STAbits.TXEN=0;
 13985  1914  129E               	bcf	30,5	;volatile
 13986                           
 13987                           ;UART.c: 64: PIE1&=0b11001111;
 13988  1915  30CF               	movlw	207
 13989  1916  0020               	movlb	0	; select bank0
 13990  1917  00A5               	movwf	??_CloseUSART
 13991  1918  0825               	movf	??_CloseUSART,w
 13992  1919  0021               	movlb	1	; select bank1
 13993  191A  0591               	andwf	17,f	;volatile
 13994  191B  0008               	return
 13995  191C                     __end_of_CloseUSART:	
 13996                           
 13997                           	psect	text40
 13998  13AC                     __ptext40:	
 13999 ;; *************** function _Init_PS_2_Send *****************
 14000 ;; Defined at:
 14001 ;;		line 1046 in file "PS_2.c"
 14002 ;; Parameters:    Size  Location     Type
 14003 ;;		None
 14004 ;; Auto vars:     Size  Location     Type
 14005 ;;		None
 14006 ;; Return value:  Size  Location     Type
 14007 ;;                  1    wreg      unsigned char 
 14008 ;; Registers used:
 14009 ;;		wreg, status,2, status,0, pclath, cstack
 14010 ;; Tracked objects:
 14011 ;;		On entry : 0/0
 14012 ;;		On exit  : 0/0
 14013 ;;		Unchanged: 0/0
 14014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;Total ram usage:        0 bytes
 14020 ;; Hardware stack levels used:    1
 14021 ;; Hardware stack levels required when called:    5
 14022 ;; This function calls:
 14023 ;;		_PS_2_DISABLE_INTERRUPT
 14024 ;;		_PS_2_ENABLE_INTERRUPT
 14025 ;;		_Send_PS2
 14026 ;;		_delayUS
 14027 ;; This function is called by:
 14028 ;;		_main
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           
 14033                           ;psect for function _Init_PS_2_Send
 14034  13AC                     _Init_PS_2_Send:	
 14035                           
 14036                           ;PS_2.c: 1048: PS_2_DISABLE_INTERRUPT(0b00100000);
 14037                           
 14038                           ;incstack = 0
 14039                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 14040  13AC  3020               	movlw	32
 14041  13AD  3199  21DE  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 14042                           
 14043                           ;PS_2.c: 1051: if(Send_PS2(0xED))
 14044  13B0  30ED               	movlw	237
 14045  13B1  318C  2469  3193   	fcall	_Send_PS2
 14046  13B4  3A00               	xorlw	0
 14047  13B5  1903               	skipnz
 14048  13B6  2BB9               	goto	l7209
 14049                           
 14050                           ;PS_2.c: 1052: {
 14051                           ;PS_2.c: 1053: return 0;
 14052  13B7  3000               	movlw	0
 14053  13B8  0008               	return
 14054  13B9                     l7209:	
 14055                           
 14056                           ;PS_2.c: 1054: }
 14057                           ;PS_2.c: 1055: delayUS(100);
 14058  13B9  3000               	movlw	0
 14059  13BA  0020               	movlb	0	; select bank0
 14060  13BB  00A8               	movwf	delayUS@US+3
 14061  13BC  3000               	movlw	0
 14062  13BD  00A7               	movwf	delayUS@US+2
 14063  13BE  3000               	movlw	0
 14064  13BF  00A6               	movwf	delayUS@US+1
 14065  13C0  3064               	movlw	100
 14066  13C1  00A5               	movwf	delayUS@US
 14067  13C2  3190  2002  3193   	fcall	_delayUS
 14068                           
 14069                           ;PS_2.c: 1056: if(Send_PS2(0x01))
 14070  13C5  3001               	movlw	1
 14071  13C6  318C  2469  3193   	fcall	_Send_PS2
 14072  13C9  3A00               	xorlw	0
 14073  13CA  1903               	skipnz
 14074  13CB  2BCE               	goto	l7215
 14075                           
 14076                           ;PS_2.c: 1057: {
 14077                           ;PS_2.c: 1058: return 0;
 14078  13CC  3000               	movlw	0
 14079  13CD  0008               	return
 14080  13CE                     l7215:	
 14081                           
 14082                           ;PS_2.c: 1059: }
 14083                           ;PS_2.c: 1060: delayUS(5000);
 14084  13CE  3000               	movlw	0
 14085  13CF  0020               	movlb	0	; select bank0
 14086  13D0  00A8               	movwf	delayUS@US+3
 14087  13D1  3000               	movlw	0
 14088  13D2  00A7               	movwf	delayUS@US+2
 14089  13D3  3013               	movlw	19
 14090  13D4  00A6               	movwf	delayUS@US+1
 14091  13D5  3088               	movlw	136
 14092  13D6  00A5               	movwf	delayUS@US
 14093  13D7  3190  2002  3193   	fcall	_delayUS
 14094                           
 14095                           ;PS_2.c: 1063: if(Send_PS2(0xED))
 14096  13DA  30ED               	movlw	237
 14097  13DB  318C  2469  3193   	fcall	_Send_PS2
 14098  13DE  3A00               	xorlw	0
 14099  13DF  1903               	skipnz
 14100  13E0  2BE3               	goto	l7221
 14101                           
 14102                           ;PS_2.c: 1064: {
 14103                           ;PS_2.c: 1065: return 0;
 14104  13E1  3000               	movlw	0
 14105  13E2  0008               	return
 14106  13E3                     l7221:	
 14107                           
 14108                           ;PS_2.c: 1066: }
 14109                           ;PS_2.c: 1067: delayUS(100);
 14110  13E3  3000               	movlw	0
 14111  13E4  0020               	movlb	0	; select bank0
 14112  13E5  00A8               	movwf	delayUS@US+3
 14113  13E6  3000               	movlw	0
 14114  13E7  00A7               	movwf	delayUS@US+2
 14115  13E8  3000               	movlw	0
 14116  13E9  00A6               	movwf	delayUS@US+1
 14117  13EA  3064               	movlw	100
 14118  13EB  00A5               	movwf	delayUS@US
 14119  13EC  3190  2002  3193   	fcall	_delayUS
 14120                           
 14121                           ;PS_2.c: 1068: if(Send_PS2(0x04))
 14122  13EF  3004               	movlw	4
 14123  13F0  318C  2469  3193   	fcall	_Send_PS2
 14124  13F3  3A00               	xorlw	0
 14125  13F4  1903               	skipnz
 14126  13F5  2BF8               	goto	l7227
 14127                           
 14128                           ;PS_2.c: 1069: {
 14129                           ;PS_2.c: 1070: return 0;
 14130  13F6  3000               	movlw	0
 14131  13F7  0008               	return
 14132  13F8                     l7227:	
 14133                           
 14134                           ;PS_2.c: 1071: }
 14135                           ;PS_2.c: 1072: delayUS(5000);
 14136  13F8  3000               	movlw	0
 14137  13F9  0020               	movlb	0	; select bank0
 14138  13FA  00A8               	movwf	delayUS@US+3
 14139  13FB  3000               	movlw	0
 14140  13FC  00A7               	movwf	delayUS@US+2
 14141  13FD  3013               	movlw	19
 14142  13FE  00A6               	movwf	delayUS@US+1
 14143  13FF  3088               	movlw	136
 14144  1400  00A5               	movwf	delayUS@US
 14145  1401  3190  2002  3193   	fcall	_delayUS
 14146                           
 14147                           ;PS_2.c: 1075: if(Send_PS2(0xED))
 14148  1404  30ED               	movlw	237
 14149  1405  318C  2469  3193   	fcall	_Send_PS2
 14150  1408  3A00               	xorlw	0
 14151  1409  1903               	skipnz
 14152  140A  2C0D               	goto	l7233
 14153                           
 14154                           ;PS_2.c: 1076: {
 14155                           ;PS_2.c: 1077: return 0;
 14156  140B  3000               	movlw	0
 14157  140C  0008               	return
 14158  140D                     l7233:	
 14159                           
 14160                           ;PS_2.c: 1078: }
 14161                           ;PS_2.c: 1079: delayUS(1000);
 14162  140D  3000               	movlw	0
 14163  140E  0020               	movlb	0	; select bank0
 14164  140F  00A8               	movwf	delayUS@US+3
 14165  1410  3000               	movlw	0
 14166  1411  00A7               	movwf	delayUS@US+2
 14167  1412  3003               	movlw	3
 14168  1413  00A6               	movwf	delayUS@US+1
 14169  1414  30E8               	movlw	232
 14170  1415  00A5               	movwf	delayUS@US
 14171  1416  3190  2002  3193   	fcall	_delayUS
 14172                           
 14173                           ;PS_2.c: 1080: if(Send_PS2(0x02))
 14174  1419  3002               	movlw	2
 14175  141A  318C  2469  3193   	fcall	_Send_PS2
 14176  141D  3A00               	xorlw	0
 14177  141E  1903               	skipnz
 14178  141F  2C22               	goto	l7239
 14179                           
 14180                           ;PS_2.c: 1081: {
 14181                           ;PS_2.c: 1082: return 0;
 14182  1420  3000               	movlw	0
 14183  1421  0008               	return
 14184  1422                     l7239:	
 14185                           
 14186                           ;PS_2.c: 1083: }
 14187                           ;PS_2.c: 1084: delayUS(5000);
 14188  1422  3000               	movlw	0
 14189  1423  0020               	movlb	0	; select bank0
 14190  1424  00A8               	movwf	delayUS@US+3
 14191  1425  3000               	movlw	0
 14192  1426  00A7               	movwf	delayUS@US+2
 14193  1427  3013               	movlw	19
 14194  1428  00A6               	movwf	delayUS@US+1
 14195  1429  3088               	movlw	136
 14196  142A  00A5               	movwf	delayUS@US
 14197  142B  3190  2002  3193   	fcall	_delayUS
 14198                           
 14199                           ;PS_2.c: 1087: if(Send_PS2(0xED))
 14200  142E  30ED               	movlw	237
 14201  142F  318C  2469  3193   	fcall	_Send_PS2
 14202  1432  3A00               	xorlw	0
 14203  1433  1903               	skipnz
 14204  1434  2C37               	goto	l7245
 14205                           
 14206                           ;PS_2.c: 1088: {
 14207                           ;PS_2.c: 1089: return 0;
 14208  1435  3000               	movlw	0
 14209  1436  0008               	return
 14210  1437                     l7245:	
 14211                           
 14212                           ;PS_2.c: 1090: }
 14213                           ;PS_2.c: 1091: delayUS(100);
 14214  1437  3000               	movlw	0
 14215  1438  0020               	movlb	0	; select bank0
 14216  1439  00A8               	movwf	delayUS@US+3
 14217  143A  3000               	movlw	0
 14218  143B  00A7               	movwf	delayUS@US+2
 14219  143C  3000               	movlw	0
 14220  143D  00A6               	movwf	delayUS@US+1
 14221  143E  3064               	movlw	100
 14222  143F  00A5               	movwf	delayUS@US
 14223  1440  3190  2002  3193   	fcall	_delayUS
 14224                           
 14225                           ;PS_2.c: 1092: if(Send_PS2(0x00))
 14226  1443  3000               	movlw	0
 14227  1444  318C  2469  3193   	fcall	_Send_PS2
 14228  1447  3A00               	xorlw	0
 14229  1448  1903               	skipnz
 14230  1449  2C4C               	goto	l7251
 14231                           
 14232                           ;PS_2.c: 1093: {
 14233                           ;PS_2.c: 1094: return 0;
 14234  144A  3000               	movlw	0
 14235  144B  0008               	return
 14236  144C                     l7251:	
 14237                           
 14238                           ;PS_2.c: 1095: }
 14239                           ;PS_2.c: 1098: if(Send_PS2(0xf4))
 14240  144C  30F4               	movlw	244
 14241  144D  318C  2469  3193   	fcall	_Send_PS2
 14242  1450  3A00               	xorlw	0
 14243  1451  1903               	skipnz
 14244  1452  2C55               	goto	l7257
 14245                           
 14246                           ;PS_2.c: 1099: {
 14247                           ;PS_2.c: 1100: return 0;
 14248  1453  3000               	movlw	0
 14249  1454  0008               	return
 14250  1455                     l7257:	
 14251                           
 14252                           ;PS_2.c: 1101: }
 14253                           ;PS_2.c: 1104: if(Send_PS2(0xf4))
 14254  1455  30F4               	movlw	244
 14255  1456  318C  2469  3193   	fcall	_Send_PS2
 14256  1459  3A00               	xorlw	0
 14257  145A  1903               	skipnz
 14258  145B  2C5E               	goto	l7263
 14259                           
 14260                           ;PS_2.c: 1105: {
 14261                           ;PS_2.c: 1106: return 0;
 14262  145C  3000               	movlw	0
 14263  145D  0008               	return
 14264  145E                     l7263:	
 14265                           
 14266                           ;PS_2.c: 1107: }
 14267                           ;PS_2.c: 1110: if(Send_PS2(0xf0))
 14268  145E  30F0               	movlw	240
 14269  145F  318C  2469  3193   	fcall	_Send_PS2
 14270  1462  3A00               	xorlw	0
 14271  1463  1903               	skipnz
 14272  1464  2C67               	goto	l7269
 14273                           
 14274                           ;PS_2.c: 1111: {
 14275                           ;PS_2.c: 1112: return 0;
 14276  1465  3000               	movlw	0
 14277  1466  0008               	return
 14278  1467                     l7269:	
 14279                           
 14280                           ;PS_2.c: 1113: }
 14281                           ;PS_2.c: 1114: delayUS(100);
 14282  1467  3000               	movlw	0
 14283  1468  0020               	movlb	0	; select bank0
 14284  1469  00A8               	movwf	delayUS@US+3
 14285  146A  3000               	movlw	0
 14286  146B  00A7               	movwf	delayUS@US+2
 14287  146C  3000               	movlw	0
 14288  146D  00A6               	movwf	delayUS@US+1
 14289  146E  3064               	movlw	100
 14290  146F  00A5               	movwf	delayUS@US
 14291  1470  3190  2002  3193   	fcall	_delayUS
 14292                           
 14293                           ;PS_2.c: 1115: if(Send_PS2(0x02))
 14294  1473  3002               	movlw	2
 14295  1474  318C  2469  3193   	fcall	_Send_PS2
 14296  1477  3A00               	xorlw	0
 14297  1478  1903               	skipnz
 14298  1479  2C7C               	goto	l7275
 14299                           
 14300                           ;PS_2.c: 1116: {
 14301                           ;PS_2.c: 1117: return 0;
 14302  147A  3000               	movlw	0
 14303  147B  0008               	return
 14304  147C                     l7275:	
 14305                           
 14306                           ;PS_2.c: 1118: }
 14307                           ;PS_2.c: 1121: if(Send_PS2(0xf3))
 14308  147C  30F3               	movlw	243
 14309  147D  318C  2469  3193   	fcall	_Send_PS2
 14310  1480  3A00               	xorlw	0
 14311  1481  1903               	skipnz
 14312  1482  2C85               	goto	l7281
 14313                           
 14314                           ;PS_2.c: 1122: {
 14315                           ;PS_2.c: 1123: return 0;
 14316  1483  3000               	movlw	0
 14317  1484  0008               	return
 14318  1485                     l7281:	
 14319                           
 14320                           ;PS_2.c: 1124: }
 14321                           ;PS_2.c: 1125: delayUS(100);
 14322  1485  3000               	movlw	0
 14323  1486  0020               	movlb	0	; select bank0
 14324  1487  00A8               	movwf	delayUS@US+3
 14325  1488  3000               	movlw	0
 14326  1489  00A7               	movwf	delayUS@US+2
 14327  148A  3000               	movlw	0
 14328  148B  00A6               	movwf	delayUS@US+1
 14329  148C  3064               	movlw	100
 14330  148D  00A5               	movwf	delayUS@US
 14331  148E  3190  2002  3193   	fcall	_delayUS
 14332                           
 14333                           ;PS_2.c: 1126: if(Send_PS2(0x2F))
 14334  1491  302F               	movlw	47
 14335  1492  318C  2469  3193   	fcall	_Send_PS2
 14336  1495  3A00               	xorlw	0
 14337  1496  1903               	skipnz
 14338  1497  2C9A               	goto	l7287
 14339                           
 14340                           ;PS_2.c: 1127: {
 14341                           ;PS_2.c: 1128: return 0;
 14342  1498  3000               	movlw	0
 14343  1499  0008               	return
 14344  149A                     l7287:	
 14345                           
 14346                           ;PS_2.c: 1129: }
 14347                           ;PS_2.c: 1131: PS_2_ENABLE_INTERRUPT(0b00100000);
 14348  149A  3020               	movlw	32
 14349  149B  3199  21C9         	fcall	_PS_2_ENABLE_INTERRUPT
 14350                           
 14351                           ;PS_2.c: 1132: return 1;
 14352  149D  3001               	movlw	1
 14353  149E  0008               	return
 14354  149F                     __end_of_Init_PS_2_Send:	
 14355                           
 14356                           	psect	text41
 14357  0C69                     __ptext41:	
 14358 ;; *************** function _Send_PS2 *****************
 14359 ;; Defined at:
 14360 ;;		line 886 in file "PS_2.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;  command         1    wreg     unsigned char 
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;  command         1   20[BANK0 ] unsigned char 
 14365 ;;  timeout         2   22[BANK0 ] unsigned int 
 14366 ;;  i               1   21[BANK0 ] unsigned char 
 14367 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14368 ;; Return value:  Size  Location     Type
 14369 ;;                  1    wreg      unsigned char 
 14370 ;; Registers used:
 14371 ;;		wreg, status,2, status,0, pclath, cstack
 14372 ;; Tracked objects:
 14373 ;;		On entry : 0/0
 14374 ;;		On exit  : 0/0
 14375 ;;		Unchanged: 0/0
 14376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;Total ram usage:        9 bytes
 14382 ;; Hardware stack levels used:    1
 14383 ;; Hardware stack levels required when called:    4
 14384 ;; This function calls:
 14385 ;;		_CheckSum_byte
 14386 ;;		_Clock_TRIS
 14387 ;;		_Data_TRIS
 14388 ;;		_PS_2_ENABLE_INTERRUPT
 14389 ;;		_READ_PS_2_PIN
 14390 ;;		_delayUS
 14391 ;; This function is called by:
 14392 ;;		_PS_2_Update
 14393 ;;		_Init_PS_2_Send
 14394 ;;		_Keyboard_Connected
 14395 ;; This function uses a non-reentrant model
 14396 ;;
 14397                           
 14398                           
 14399                           ;psect for function _Send_PS2
 14400  0C69                     _Send_PS2:	
 14401                           
 14402                           ;incstack = 0
 14403                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14404                           ;Send_PS2@command stored from wreg
 14405  0C69  0020               	movlb	0	; select bank0
 14406  0C6A  00B4               	movwf	Send_PS2@command
 14407                           
 14408                           ;PS_2.c: 888: unsigned char i=0;
 14409  0C6B  01B5               	clrf	Send_PS2@i
 14410                           
 14411                           ;PS_2.c: 889: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14412  0C6C  0834               	movf	Send_PS2@command,w
 14413  0C6D  00AF               	movwf	??_Send_PS2
 14414  0C6E  01B0               	clrf	??_Send_PS2+1
 14415  0C6F  082F               	movf	??_Send_PS2,w
 14416  0C70  00A5               	movwf	CheckSum_byte@This
 14417  0C71  0830               	movf	??_Send_PS2+1,w
 14418  0C72  00A6               	movwf	CheckSum_byte@This+1
 14419  0C73  3003               	movlw	3
 14420  0C74  00B1               	movwf	??_Send_PS2+2
 14421  0C75  0831               	movf	??_Send_PS2+2,w
 14422  0C76  00A7               	movwf	CheckSum_byte@Odd_Even
 14423  0C77  319A  22A9  318C   	fcall	_CheckSum_byte
 14424  0C7A  0020               	movlb	0	; select bank0
 14425  0C7B  00B2               	movwf	??_Send_PS2+3
 14426  0C7C  0832               	movf	??_Send_PS2+3,w
 14427  0C7D  00B3               	movwf	Send_PS2@oddparity
 14428                           
 14429                           ;PS_2.c: 890: unsigned int timeout =0;
 14430  0C7E  01B6               	clrf	Send_PS2@timeout
 14431  0C7F  01B7               	clrf	Send_PS2@timeout+1
 14432                           
 14433                           ;PS_2.c: 892: Clock_TRIS(0);
 14434  0C80  3000               	movlw	0
 14435  0C81  3198  20E1  318C   	fcall	_Clock_TRIS
 14436                           
 14437                           ;PS_2.c: 893: Data_TRIS(0);
 14438  0C84  3000               	movlw	0
 14439  0C85  3198  20EC  318C   	fcall	_Data_TRIS
 14440                           
 14441                           ;PS_2.c: 894: LATA &= ~0b00100000;
 14442  0C88  30DF               	movlw	223
 14443  0C89  0020               	movlb	0	; select bank0
 14444  0C8A  00AF               	movwf	??_Send_PS2
 14445  0C8B  082F               	movf	??_Send_PS2,w
 14446  0C8C  0022               	movlb	2	; select bank2
 14447  0C8D  058C               	andwf	12,f	;volatile
 14448                           
 14449                           ;PS_2.c: 895: delayUS(300);
 14450  0C8E  3000               	movlw	0
 14451  0C8F  0020               	movlb	0	; select bank0
 14452  0C90  00A8               	movwf	delayUS@US+3
 14453  0C91  3000               	movlw	0
 14454  0C92  00A7               	movwf	delayUS@US+2
 14455  0C93  3001               	movlw	1
 14456  0C94  00A6               	movwf	delayUS@US+1
 14457  0C95  302C               	movlw	44
 14458  0C96  00A5               	movwf	delayUS@US
 14459  0C97  3190  2002  318C   	fcall	_delayUS
 14460                           
 14461                           ;PS_2.c: 896: LATA &= ~0b00010000;
 14462  0C9A  30EF               	movlw	239
 14463  0C9B  0020               	movlb	0	; select bank0
 14464  0C9C  00AF               	movwf	??_Send_PS2
 14465  0C9D  082F               	movf	??_Send_PS2,w
 14466  0C9E  0022               	movlb	2	; select bank2
 14467  0C9F  058C               	andwf	12,f	;volatile
 14468                           
 14469                           ;PS_2.c: 897: delayUS(20);
 14470  0CA0  3000               	movlw	0
 14471  0CA1  0020               	movlb	0	; select bank0
 14472  0CA2  00A8               	movwf	delayUS@US+3
 14473  0CA3  3000               	movlw	0
 14474  0CA4  00A7               	movwf	delayUS@US+2
 14475  0CA5  3000               	movlw	0
 14476  0CA6  00A6               	movwf	delayUS@US+1
 14477  0CA7  3014               	movlw	20
 14478  0CA8  00A5               	movwf	delayUS@US
 14479  0CA9  3190  2002  318C   	fcall	_delayUS
 14480                           
 14481                           ;PS_2.c: 898: Clock_TRIS(1);
 14482  0CAC  3001               	movlw	1
 14483  0CAD  3198  20E1  318C   	fcall	_Clock_TRIS
 14484                           
 14485                           ;PS_2.c: 899: timeout=0;
 14486  0CB0  0020               	movlb	0	; select bank0
 14487  0CB1  01B6               	clrf	Send_PS2@timeout
 14488  0CB2  01B7               	clrf	Send_PS2@timeout+1
 14489  0CB3                     l6243:	
 14490                           ;PS_2.c: 900: while(READ_PS_2_PIN(0b00100000))
 14491                           
 14492  0CB3  3020               	movlw	32
 14493  0CB4  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14494  0CB7  3800               	iorlw	0
 14495  0CB8  1903               	btfsc	3,2
 14496  0CB9  2CD0               	goto	l6245
 14497                           
 14498                           ;PS_2.c: 901: {
 14499                           ;PS_2.c: 902: __nop();
 14500  0CBA  0000               	nop
 14501                           
 14502                           ;PS_2.c: 903: timeout++;
 14503  0CBB  3001               	movlw	1
 14504  0CBC  0020               	movlb	0	; select bank0
 14505  0CBD  07B6               	addwf	Send_PS2@timeout,f
 14506  0CBE  3000               	movlw	0
 14507  0CBF  3DB7               	addwfc	Send_PS2@timeout+1,f
 14508                           
 14509                           ;PS_2.c: 904: if(timeout > 15000)
 14510  0CC0  303A               	movlw	58
 14511  0CC1  0237               	subwf	Send_PS2@timeout+1,w
 14512  0CC2  3099               	movlw	153
 14513  0CC3  1903               	skipnz
 14514  0CC4  0236               	subwf	Send_PS2@timeout,w
 14515  0CC5  1C03               	skipc
 14516  0CC6  2CB3               	goto	l6243
 14517                           
 14518                           ;PS_2.c: 905: {
 14519                           ;PS_2.c: 906: Clock_TRIS(1);
 14520  0CC7  3001               	movlw	1
 14521  0CC8  3198  20E1  318C   	fcall	_Clock_TRIS
 14522                           
 14523                           ;PS_2.c: 907: Data_TRIS(1);
 14524  0CCB  3001               	movlw	1
 14525  0CCC  3198  20EC         	fcall	_Data_TRIS
 14526                           
 14527                           ;PS_2.c: 908: return 1;
 14528  0CCE  3001               	movlw	1
 14529  0CCF  0008               	return
 14530  0CD0                     l6245:	
 14531                           
 14532                           ;PS_2.c: 909: }
 14533                           ;PS_2.c: 910: }
 14534                           ;PS_2.c: 911: for(i=0;i<8;i++)
 14535  0CD0  0020               	movlb	0	; select bank0
 14536  0CD1  01B5               	clrf	Send_PS2@i
 14537  0CD2  3008               	movlw	8
 14538  0CD3  0235               	subwf	Send_PS2@i,w
 14539  0CD4  1803               	btfsc	3,0
 14540  0CD5  2D2C               	goto	l817
 14541  0CD6                     l816:	
 14542                           
 14543                           ;PS_2.c: 912: {
 14544                           ;PS_2.c: 913: if(command & 0x1)
 14545  0CD6  1C34               	btfss	Send_PS2@command,0
 14546  0CD7  2CDB               	goto	l6253
 14547                           
 14548                           ;PS_2.c: 914: {
 14549                           ;PS_2.c: 915: LATA |= 0b00010000;
 14550  0CD8  0022               	movlb	2	; select bank2
 14551  0CD9  160C               	bsf	12,4	;volatile
 14552                           
 14553                           ;PS_2.c: 916: }
 14554  0CDA  2CE1               	goto	l6255
 14555  0CDB                     l6253:	
 14556                           
 14557                           ;PS_2.c: 917: else
 14558                           ;PS_2.c: 918: {
 14559                           ;PS_2.c: 919: LATA &= ~0b00010000;
 14560  0CDB  30EF               	movlw	239
 14561  0CDC  0020               	movlb	0	; select bank0
 14562  0CDD  00AF               	movwf	??_Send_PS2
 14563  0CDE  082F               	movf	??_Send_PS2,w
 14564  0CDF  0022               	movlb	2	; select bank2
 14565  0CE0  058C               	andwf	12,f	;volatile
 14566  0CE1                     l6255:	
 14567                           
 14568                           ;PS_2.c: 920: }
 14569                           ;PS_2.c: 921: command >> = 1;
 14570  0CE1  1003               	clrc
 14571  0CE2  0020               	movlb	0	; select bank0
 14572  0CE3  0CB4               	rrf	Send_PS2@command,f
 14573                           
 14574                           ;PS_2.c: 922: timeout=0;
 14575  0CE4  01B6               	clrf	Send_PS2@timeout
 14576  0CE5  01B7               	clrf	Send_PS2@timeout+1
 14577  0CE6                     l6267:	
 14578                           ;PS_2.c: 923: while(!READ_PS_2_PIN(0b00100000))
 14579                           
 14580  0CE6  3020               	movlw	32
 14581  0CE7  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14582  0CEA  3A00               	xorlw	0
 14583  0CEB  1D03               	btfss	3,2
 14584  0CEC  2D03               	goto	l6269
 14585                           
 14586                           ;PS_2.c: 924: {
 14587                           ;PS_2.c: 925: __nop();
 14588  0CED  0000               	nop
 14589                           
 14590                           ;PS_2.c: 926: timeout++;
 14591  0CEE  3001               	movlw	1
 14592  0CEF  0020               	movlb	0	; select bank0
 14593  0CF0  07B6               	addwf	Send_PS2@timeout,f
 14594  0CF1  3000               	movlw	0
 14595  0CF2  3DB7               	addwfc	Send_PS2@timeout+1,f
 14596                           
 14597                           ;PS_2.c: 927: if(timeout > 15000)
 14598  0CF3  303A               	movlw	58
 14599  0CF4  0237               	subwf	Send_PS2@timeout+1,w
 14600  0CF5  3099               	movlw	153
 14601  0CF6  1903               	skipnz
 14602  0CF7  0236               	subwf	Send_PS2@timeout,w
 14603  0CF8  1C03               	skipc
 14604  0CF9  2CE6               	goto	l6267
 14605                           
 14606                           ;PS_2.c: 928: {
 14607                           ;PS_2.c: 929: Clock_TRIS(1);
 14608  0CFA  3001               	movlw	1
 14609  0CFB  3198  20E1  318C   	fcall	_Clock_TRIS
 14610                           
 14611                           ;PS_2.c: 930: Data_TRIS(1);
 14612  0CFE  3001               	movlw	1
 14613  0CFF  3198  20EC         	fcall	_Data_TRIS
 14614                           
 14615                           ;PS_2.c: 931: return 1;
 14616  0D01  3001               	movlw	1
 14617  0D02  0008               	return
 14618  0D03                     l6269:	
 14619                           
 14620                           ;PS_2.c: 932: }
 14621                           ;PS_2.c: 933: }
 14622                           ;PS_2.c: 934: timeout=0;
 14623  0D03  0020               	movlb	0	; select bank0
 14624  0D04  01B6               	clrf	Send_PS2@timeout
 14625  0D05  01B7               	clrf	Send_PS2@timeout+1
 14626  0D06                     l6279:	
 14627                           ;PS_2.c: 935: while(READ_PS_2_PIN(0b00100000))
 14628                           
 14629  0D06  3020               	movlw	32
 14630  0D07  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14631  0D0A  3800               	iorlw	0
 14632  0D0B  1903               	btfsc	3,2
 14633  0D0C  2D23               	goto	l6281
 14634                           
 14635                           ;PS_2.c: 936: {
 14636                           ;PS_2.c: 937: __nop();
 14637  0D0D  0000               	nop
 14638                           
 14639                           ;PS_2.c: 938: timeout++;
 14640  0D0E  3001               	movlw	1
 14641  0D0F  0020               	movlb	0	; select bank0
 14642  0D10  07B6               	addwf	Send_PS2@timeout,f
 14643  0D11  3000               	movlw	0
 14644  0D12  3DB7               	addwfc	Send_PS2@timeout+1,f
 14645                           
 14646                           ;PS_2.c: 939: if(timeout > 15000)
 14647  0D13  303A               	movlw	58
 14648  0D14  0237               	subwf	Send_PS2@timeout+1,w
 14649  0D15  3099               	movlw	153
 14650  0D16  1903               	skipnz
 14651  0D17  0236               	subwf	Send_PS2@timeout,w
 14652  0D18  1C03               	skipc
 14653  0D19  2D06               	goto	l6279
 14654                           
 14655                           ;PS_2.c: 940: {
 14656                           ;PS_2.c: 941: Clock_TRIS(1);
 14657  0D1A  3001               	movlw	1
 14658  0D1B  3198  20E1  318C   	fcall	_Clock_TRIS
 14659                           
 14660                           ;PS_2.c: 942: Data_TRIS(1);
 14661  0D1E  3001               	movlw	1
 14662  0D1F  3198  20EC         	fcall	_Data_TRIS
 14663                           
 14664                           ;PS_2.c: 943: return 1;
 14665  0D21  3001               	movlw	1
 14666  0D22  0008               	return
 14667  0D23                     l6281:	
 14668  0D23  3001               	movlw	1
 14669  0D24  0020               	movlb	0	; select bank0
 14670  0D25  00AF               	movwf	??_Send_PS2
 14671  0D26  082F               	movf	??_Send_PS2,w
 14672  0D27  07B5               	addwf	Send_PS2@i,f
 14673  0D28  3008               	movlw	8
 14674  0D29  0235               	subwf	Send_PS2@i,w
 14675  0D2A  1C03               	skipc
 14676  0D2B  2CD6               	goto	l816
 14677  0D2C                     l817:	
 14678                           
 14679                           ;PS_2.c: 944: }
 14680                           ;PS_2.c: 945: }
 14681                           ;PS_2.c: 946: }
 14682                           ;PS_2.c: 948: if(oddparity & 0x1)
 14683  0D2C  1C33               	btfss	Send_PS2@oddparity,0
 14684  0D2D  2D31               	goto	l6287
 14685                           
 14686                           ;PS_2.c: 949: {
 14687                           ;PS_2.c: 950: LATA |= 0b00010000;
 14688  0D2E  0022               	movlb	2	; select bank2
 14689  0D2F  160C               	bsf	12,4	;volatile
 14690                           
 14691                           ;PS_2.c: 951: }
 14692  0D30  2D37               	goto	l6289
 14693  0D31                     l6287:	
 14694                           
 14695                           ;PS_2.c: 952: else
 14696                           ;PS_2.c: 953: {
 14697                           ;PS_2.c: 954: LATA &= ~0b00010000;
 14698  0D31  30EF               	movlw	239
 14699  0D32  0020               	movlb	0	; select bank0
 14700  0D33  00AF               	movwf	??_Send_PS2
 14701  0D34  082F               	movf	??_Send_PS2,w
 14702  0D35  0022               	movlb	2	; select bank2
 14703  0D36  058C               	andwf	12,f	;volatile
 14704  0D37                     l6289:	
 14705                           
 14706                           ;PS_2.c: 955: }
 14707                           ;PS_2.c: 956: timeout=0;
 14708  0D37  0020               	movlb	0	; select bank0
 14709  0D38  01B6               	clrf	Send_PS2@timeout
 14710  0D39  01B7               	clrf	Send_PS2@timeout+1
 14711  0D3A                     l6299:	
 14712                           ;PS_2.c: 957: while(!READ_PS_2_PIN(0b00100000))
 14713                           
 14714  0D3A  3020               	movlw	32
 14715  0D3B  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14716  0D3E  3A00               	xorlw	0
 14717  0D3F  1D03               	btfss	3,2
 14718  0D40  2D57               	goto	l6301
 14719                           
 14720                           ;PS_2.c: 958: {
 14721                           ;PS_2.c: 959: __nop();
 14722  0D41  0000               	nop
 14723                           
 14724                           ;PS_2.c: 960: timeout++;
 14725  0D42  3001               	movlw	1
 14726  0D43  0020               	movlb	0	; select bank0
 14727  0D44  07B6               	addwf	Send_PS2@timeout,f
 14728  0D45  3000               	movlw	0
 14729  0D46  3DB7               	addwfc	Send_PS2@timeout+1,f
 14730                           
 14731                           ;PS_2.c: 961: if(timeout > 15000)
 14732  0D47  303A               	movlw	58
 14733  0D48  0237               	subwf	Send_PS2@timeout+1,w
 14734  0D49  3099               	movlw	153
 14735  0D4A  1903               	skipnz
 14736  0D4B  0236               	subwf	Send_PS2@timeout,w
 14737  0D4C  1C03               	skipc
 14738  0D4D  2D3A               	goto	l6299
 14739                           
 14740                           ;PS_2.c: 962: {
 14741                           ;PS_2.c: 963: Clock_TRIS(1);
 14742  0D4E  3001               	movlw	1
 14743  0D4F  3198  20E1  318C   	fcall	_Clock_TRIS
 14744                           
 14745                           ;PS_2.c: 964: Data_TRIS(1);
 14746  0D52  3001               	movlw	1
 14747  0D53  3198  20EC         	fcall	_Data_TRIS
 14748                           
 14749                           ;PS_2.c: 965: return 1;
 14750  0D55  3001               	movlw	1
 14751  0D56  0008               	return
 14752  0D57                     l6301:	
 14753                           
 14754                           ;PS_2.c: 966: }
 14755                           ;PS_2.c: 967: }
 14756                           ;PS_2.c: 968: timeout=0;
 14757  0D57  0020               	movlb	0	; select bank0
 14758  0D58  01B6               	clrf	Send_PS2@timeout
 14759  0D59  01B7               	clrf	Send_PS2@timeout+1
 14760  0D5A                     l6311:	
 14761                           ;PS_2.c: 969: while(READ_PS_2_PIN(0b00100000))
 14762                           
 14763  0D5A  3020               	movlw	32
 14764  0D5B  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14765  0D5E  3800               	iorlw	0
 14766  0D5F  1903               	btfsc	3,2
 14767  0D60  2D77               	goto	l6313
 14768                           
 14769                           ;PS_2.c: 970: {
 14770                           ;PS_2.c: 971: __nop();
 14771  0D61  0000               	nop
 14772                           
 14773                           ;PS_2.c: 972: timeout++;
 14774  0D62  3001               	movlw	1
 14775  0D63  0020               	movlb	0	; select bank0
 14776  0D64  07B6               	addwf	Send_PS2@timeout,f
 14777  0D65  3000               	movlw	0
 14778  0D66  3DB7               	addwfc	Send_PS2@timeout+1,f
 14779                           
 14780                           ;PS_2.c: 973: if(timeout > 15000)
 14781  0D67  303A               	movlw	58
 14782  0D68  0237               	subwf	Send_PS2@timeout+1,w
 14783  0D69  3099               	movlw	153
 14784  0D6A  1903               	skipnz
 14785  0D6B  0236               	subwf	Send_PS2@timeout,w
 14786  0D6C  1C03               	skipc
 14787  0D6D  2D5A               	goto	l6311
 14788                           
 14789                           ;PS_2.c: 974: {
 14790                           ;PS_2.c: 975: Clock_TRIS(1);
 14791  0D6E  3001               	movlw	1
 14792  0D6F  3198  20E1  318C   	fcall	_Clock_TRIS
 14793                           
 14794                           ;PS_2.c: 976: Data_TRIS(1);
 14795  0D72  3001               	movlw	1
 14796  0D73  3198  20EC         	fcall	_Data_TRIS
 14797                           
 14798                           ;PS_2.c: 977: return 1;
 14799  0D75  3001               	movlw	1
 14800  0D76  0008               	return
 14801  0D77                     l6313:	
 14802                           
 14803                           ;PS_2.c: 978: }
 14804                           ;PS_2.c: 979: }
 14805                           ;PS_2.c: 981: Data_TRIS(1);
 14806  0D77  3001               	movlw	1
 14807  0D78  3198  20EC  318C   	fcall	_Data_TRIS
 14808                           
 14809                           ;PS_2.c: 983: timeout=0;
 14810  0D7B  0020               	movlb	0	; select bank0
 14811  0D7C  01B6               	clrf	Send_PS2@timeout
 14812  0D7D  01B7               	clrf	Send_PS2@timeout+1
 14813  0D7E                     l6325:	
 14814                           ;PS_2.c: 984: while(READ_PS_2_PIN(0b00010000))
 14815                           
 14816  0D7E  3010               	movlw	16
 14817  0D7F  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14818  0D82  3800               	iorlw	0
 14819  0D83  1903               	btfsc	3,2
 14820  0D84  2D9B               	goto	l6327
 14821                           
 14822                           ;PS_2.c: 985: {
 14823                           ;PS_2.c: 986: __nop();
 14824  0D85  0000               	nop
 14825                           
 14826                           ;PS_2.c: 987: timeout++;
 14827  0D86  3001               	movlw	1
 14828  0D87  0020               	movlb	0	; select bank0
 14829  0D88  07B6               	addwf	Send_PS2@timeout,f
 14830  0D89  3000               	movlw	0
 14831  0D8A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14832                           
 14833                           ;PS_2.c: 988: if(timeout > 15000)
 14834  0D8B  303A               	movlw	58
 14835  0D8C  0237               	subwf	Send_PS2@timeout+1,w
 14836  0D8D  3099               	movlw	153
 14837  0D8E  1903               	skipnz
 14838  0D8F  0236               	subwf	Send_PS2@timeout,w
 14839  0D90  1C03               	skipc
 14840  0D91  2D7E               	goto	l6325
 14841                           
 14842                           ;PS_2.c: 989: {
 14843                           ;PS_2.c: 990: Clock_TRIS(1);
 14844  0D92  3001               	movlw	1
 14845  0D93  3198  20E1  318C   	fcall	_Clock_TRIS
 14846                           
 14847                           ;PS_2.c: 991: Data_TRIS(1);
 14848  0D96  3001               	movlw	1
 14849  0D97  3198  20EC         	fcall	_Data_TRIS
 14850                           
 14851                           ;PS_2.c: 992: return 1;
 14852  0D99  3001               	movlw	1
 14853  0D9A  0008               	return
 14854  0D9B                     l6327:	
 14855                           
 14856                           ;PS_2.c: 993: }
 14857                           ;PS_2.c: 994: }
 14858                           ;PS_2.c: 995: timeout=0;
 14859  0D9B  0020               	movlb	0	; select bank0
 14860  0D9C  01B6               	clrf	Send_PS2@timeout
 14861  0D9D  01B7               	clrf	Send_PS2@timeout+1
 14862  0D9E                     l6337:	
 14863                           ;PS_2.c: 996: while(READ_PS_2_PIN(0b00100000))
 14864                           
 14865  0D9E  3020               	movlw	32
 14866  0D9F  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14867  0DA2  3800               	iorlw	0
 14868  0DA3  1903               	btfsc	3,2
 14869  0DA4  2DBB               	goto	l6339
 14870                           
 14871                           ;PS_2.c: 997: {
 14872                           ;PS_2.c: 998: __nop();
 14873  0DA5  0000               	nop
 14874                           
 14875                           ;PS_2.c: 999: timeout++;
 14876  0DA6  3001               	movlw	1
 14877  0DA7  0020               	movlb	0	; select bank0
 14878  0DA8  07B6               	addwf	Send_PS2@timeout,f
 14879  0DA9  3000               	movlw	0
 14880  0DAA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14881                           
 14882                           ;PS_2.c: 1000: if(timeout > 15000)
 14883  0DAB  303A               	movlw	58
 14884  0DAC  0237               	subwf	Send_PS2@timeout+1,w
 14885  0DAD  3099               	movlw	153
 14886  0DAE  1903               	skipnz
 14887  0DAF  0236               	subwf	Send_PS2@timeout,w
 14888  0DB0  1C03               	skipc
 14889  0DB1  2D9E               	goto	l6337
 14890                           
 14891                           ;PS_2.c: 1001: {
 14892                           ;PS_2.c: 1002: Clock_TRIS(1);
 14893  0DB2  3001               	movlw	1
 14894  0DB3  3198  20E1  318C   	fcall	_Clock_TRIS
 14895                           
 14896                           ;PS_2.c: 1003: Data_TRIS(1);
 14897  0DB6  3001               	movlw	1
 14898  0DB7  3198  20EC         	fcall	_Data_TRIS
 14899                           
 14900                           ;PS_2.c: 1004: return 1;
 14901  0DB9  3001               	movlw	1
 14902  0DBA  0008               	return
 14903  0DBB                     l6339:	
 14904                           
 14905                           ;PS_2.c: 1005: }
 14906                           ;PS_2.c: 1006: }
 14907                           ;PS_2.c: 1007: timeout=0;
 14908  0DBB  0020               	movlb	0	; select bank0
 14909  0DBC  01B6               	clrf	Send_PS2@timeout
 14910  0DBD  01B7               	clrf	Send_PS2@timeout+1
 14911  0DBE                     l6349:	
 14912                           ;PS_2.c: 1008: while(!READ_PS_2_PIN(0b00010000))
 14913                           
 14914  0DBE  3010               	movlw	16
 14915  0DBF  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14916  0DC2  3A00               	xorlw	0
 14917  0DC3  1D03               	btfss	3,2
 14918  0DC4  2DDB               	goto	l6351
 14919                           
 14920                           ;PS_2.c: 1009: {
 14921                           ;PS_2.c: 1010: __nop();
 14922  0DC5  0000               	nop
 14923                           
 14924                           ;PS_2.c: 1011: timeout++;
 14925  0DC6  3001               	movlw	1
 14926  0DC7  0020               	movlb	0	; select bank0
 14927  0DC8  07B6               	addwf	Send_PS2@timeout,f
 14928  0DC9  3000               	movlw	0
 14929  0DCA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14930                           
 14931                           ;PS_2.c: 1012: if(timeout > 15000)
 14932  0DCB  303A               	movlw	58
 14933  0DCC  0237               	subwf	Send_PS2@timeout+1,w
 14934  0DCD  3099               	movlw	153
 14935  0DCE  1903               	skipnz
 14936  0DCF  0236               	subwf	Send_PS2@timeout,w
 14937  0DD0  1C03               	skipc
 14938  0DD1  2DBE               	goto	l6349
 14939                           
 14940                           ;PS_2.c: 1013: {
 14941                           ;PS_2.c: 1014: Clock_TRIS(1);
 14942  0DD2  3001               	movlw	1
 14943  0DD3  3198  20E1  318C   	fcall	_Clock_TRIS
 14944                           
 14945                           ;PS_2.c: 1015: Data_TRIS(1);
 14946  0DD6  3001               	movlw	1
 14947  0DD7  3198  20EC         	fcall	_Data_TRIS
 14948                           
 14949                           ;PS_2.c: 1016: return 1;
 14950  0DD9  3001               	movlw	1
 14951  0DDA  0008               	return
 14952  0DDB                     l6351:	
 14953                           
 14954                           ;PS_2.c: 1017: }
 14955                           ;PS_2.c: 1018: }
 14956                           ;PS_2.c: 1019: timeout=0;
 14957  0DDB  0020               	movlb	0	; select bank0
 14958  0DDC  01B6               	clrf	Send_PS2@timeout
 14959  0DDD  01B7               	clrf	Send_PS2@timeout+1
 14960  0DDE                     l6361:	
 14961                           ;PS_2.c: 1020: while(!READ_PS_2_PIN(0b00100000))
 14962                           
 14963  0DDE  3020               	movlw	32
 14964  0DDF  3199  216B  318C   	fcall	_READ_PS_2_PIN
 14965  0DE2  3A00               	xorlw	0
 14966  0DE3  1D03               	btfss	3,2
 14967  0DE4  2DFB               	goto	l6363
 14968                           
 14969                           ;PS_2.c: 1021: {
 14970                           ;PS_2.c: 1022: __nop();
 14971  0DE5  0000               	nop
 14972                           
 14973                           ;PS_2.c: 1023: timeout++;
 14974  0DE6  3001               	movlw	1
 14975  0DE7  0020               	movlb	0	; select bank0
 14976  0DE8  07B6               	addwf	Send_PS2@timeout,f
 14977  0DE9  3000               	movlw	0
 14978  0DEA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14979                           
 14980                           ;PS_2.c: 1024: if(timeout > 15000)
 14981  0DEB  303A               	movlw	58
 14982  0DEC  0237               	subwf	Send_PS2@timeout+1,w
 14983  0DED  3099               	movlw	153
 14984  0DEE  1903               	skipnz
 14985  0DEF  0236               	subwf	Send_PS2@timeout,w
 14986  0DF0  1C03               	skipc
 14987  0DF1  2DDE               	goto	l6361
 14988                           
 14989                           ;PS_2.c: 1025: {
 14990                           ;PS_2.c: 1026: Clock_TRIS(1);
 14991  0DF2  3001               	movlw	1
 14992  0DF3  3198  20E1  318C   	fcall	_Clock_TRIS
 14993                           
 14994                           ;PS_2.c: 1027: Data_TRIS(1);
 14995  0DF6  3001               	movlw	1
 14996  0DF7  3198  20EC         	fcall	_Data_TRIS
 14997                           
 14998                           ;PS_2.c: 1028: return 1;
 14999  0DF9  3001               	movlw	1
 15000  0DFA  0008               	return
 15001  0DFB                     l6363:	
 15002                           
 15003                           ;PS_2.c: 1029: }
 15004                           ;PS_2.c: 1030: }
 15005                           ;PS_2.c: 1033: Clock_TRIS(1);
 15006  0DFB  3001               	movlw	1
 15007  0DFC  3198  20E1  318C   	fcall	_Clock_TRIS
 15008                           
 15009                           ;PS_2.c: 1034: Data_TRIS(1);
 15010  0DFF  3001               	movlw	1
 15011  0E00  3198  20EC  318C   	fcall	_Data_TRIS
 15012                           
 15013                           ;PS_2.c: 1035: PS_2_ENABLE_INTERRUPT(0b00100000);
 15014  0E03  3020               	movlw	32
 15015  0E04  3199  21C9         	fcall	_PS_2_ENABLE_INTERRUPT
 15016                           
 15017                           ;PS_2.c: 1036: return 0;
 15018  0E06  3000               	movlw	0
 15019  0E07  0008               	return
 15020  0E08                     __end_of_Send_PS2:	
 15021                           
 15022                           	psect	text42
 15023  1002                     __ptext42:	
 15024 ;; *************** function _delayUS *****************
 15025 ;; Defined at:
 15026 ;;		line 48 in file "MISC.c"
 15027 ;; Parameters:    Size  Location     Type
 15028 ;;  US              4    5[BANK0 ] long 
 15029 ;; Auto vars:     Size  Location     Type
 15030 ;;  i               4   10[BANK0 ] long 
 15031 ;;  j               1   14[BANK0 ] unsigned char 
 15032 ;; Return value:  Size  Location     Type
 15033 ;;		None               void
 15034 ;; Registers used:
 15035 ;;		wreg, status,2, status,0
 15036 ;; Tracked objects:
 15037 ;;		On entry : 0/0
 15038 ;;		On exit  : 0/0
 15039 ;;		Unchanged: 0/0
 15040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15041 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;Total ram usage:       10 bytes
 15046 ;; Hardware stack levels used:    1
 15047 ;; Hardware stack levels required when called:    3
 15048 ;; This function calls:
 15049 ;;		Nothing
 15050 ;; This function is called by:
 15051 ;;		_main
 15052 ;;		_Init_System
 15053 ;;		_UART_send_break_timed
 15054 ;;		_UARTstringWAIT
 15055 ;;		_SetBaud
 15056 ;;		_PS_2_Update
 15057 ;;		_Send_PS2
 15058 ;;		_Init_PS_2_Send
 15059 ;;		_Keyboard_Connected
 15060 ;;		_WriteFlash_Sequential
 15061 ;;		_InternalADC_Read
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           
 15066                           ;psect for function _delayUS
 15067  1002                     _delayUS:	
 15068                           
 15069                           ;MISC.c: 50: long i;
 15070                           ;MISC.c: 51: unsigned char j;
 15071                           ;MISC.c: 52: for(i=0;i<US;i+=6)
 15072                           
 15073                           ;incstack = 0
 15074                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 15075  1002  3000               	movlw	0
 15076  1003  0020               	movlb	0	; select bank0
 15077  1004  00AD               	movwf	delayUS@i+3
 15078  1005  3000               	movlw	0
 15079  1006  00AC               	movwf	delayUS@i+2
 15080  1007  3000               	movlw	0
 15081  1008  00AB               	movwf	delayUS@i+1
 15082  1009  3000               	movlw	0
 15083  100A  00AA               	movwf	delayUS@i
 15084  100B                     l275:	
 15085  100B  082D               	movf	delayUS@i+3,w
 15086  100C  3A80               	xorlw	128
 15087  100D  00A9               	movwf	??_delayUS
 15088  100E  0828               	movf	delayUS@US+3,w
 15089  100F  3A80               	xorlw	128
 15090  1010  0229               	subwf	??_delayUS,w
 15091  1011  1D03               	skipz
 15092  1012  281D               	goto	u7253
 15093  1013  0827               	movf	delayUS@US+2,w
 15094  1014  022C               	subwf	delayUS@i+2,w
 15095  1015  1D03               	skipz
 15096  1016  281D               	goto	u7253
 15097  1017  0826               	movf	delayUS@US+1,w
 15098  1018  022B               	subwf	delayUS@i+1,w
 15099  1019  1D03               	skipz
 15100  101A  281D               	goto	u7253
 15101  101B  0825               	movf	delayUS@US,w
 15102  101C  022A               	subwf	delayUS@i,w
 15103  101D                     u7253:	
 15104  101D  1803               	btfsc	3,0
 15105  101E  0008               	return
 15106                           
 15107                           ;MISC.c: 53: {
 15108                           ;MISC.c: 54: for(j=0;j<32;j++)
 15109  101F  01AE               	clrf	delayUS@j
 15110  1020  3020               	movlw	32
 15111  1021  022E               	subwf	delayUS@j,w
 15112  1022  1803               	btfsc	3,0
 15113  1023  282E               	goto	l5635
 15114  1024                     l277:	
 15115                           
 15116                           ;MISC.c: 55: {
 15117                           ;MISC.c: 56: __nop();
 15118  1024  0000               	nop
 15119  1025  3001               	movlw	1
 15120  1026  0020               	movlb	0	; select bank0
 15121  1027  00A9               	movwf	??_delayUS
 15122  1028  0829               	movf	??_delayUS,w
 15123  1029  07AE               	addwf	delayUS@j,f
 15124  102A  3020               	movlw	32
 15125  102B  022E               	subwf	delayUS@j,w
 15126  102C  1C03               	skipc
 15127  102D  2824               	goto	l277
 15128  102E                     l5635:	
 15129  102E  3006               	movlw	6
 15130  102F  07AA               	addwf	delayUS@i,f
 15131  1030  3000               	movlw	0
 15132  1031  3DAB               	addwfc	delayUS@i+1,f
 15133  1032  3000               	movlw	0
 15134  1033  3DAC               	addwfc	delayUS@i+2,f
 15135  1034  3000               	movlw	0
 15136  1035  3DAD               	addwfc	delayUS@i+3,f
 15137  1036  280B               	goto	l275
 15138  1037                     __end_of_delayUS:	
 15139                           
 15140                           	psect	text43
 15141  196B                     __ptext43:	
 15142 ;; *************** function _READ_PS_2_PIN *****************
 15143 ;; Defined at:
 15144 ;;		line 224 in file "PS_2.c"
 15145 ;; Parameters:    Size  Location     Type
 15146 ;;  DATA_CLK        1    wreg     unsigned char 
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15149 ;; Return value:  Size  Location     Type
 15150 ;;                  1    wreg      unsigned char 
 15151 ;; Registers used:
 15152 ;;		wreg
 15153 ;; Tracked objects:
 15154 ;;		On entry : 0/0
 15155 ;;		On exit  : 0/0
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;Total ram usage:        1 bytes
 15163 ;; Hardware stack levels used:    1
 15164 ;; Hardware stack levels required when called:    3
 15165 ;; This function calls:
 15166 ;;		Nothing
 15167 ;; This function is called by:
 15168 ;;		_Send_PS2
 15169 ;; This function uses a non-reentrant model
 15170 ;;
 15171                           
 15172                           
 15173                           ;psect for function _READ_PS_2_PIN
 15174  196B                     _READ_PS_2_PIN:	
 15175                           
 15176                           ;incstack = 0
 15177                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15178                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15179  196B  0020               	movlb	0	; select bank0
 15180  196C  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15181                           
 15182                           ;PS_2.c: 226: if(DATA_CLK == 0b00100000)
 15183  196D  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15184  196E  3A20               	xorlw	32
 15185  196F  1D03               	skipz
 15186  1970  2977               	goto	l603
 15187                           
 15188                           ;PS_2.c: 227: {
 15189                           ;PS_2.c: 229: if((PORTA & 0b00100000) == 0b00100000)
 15190  1971  1E8C               	btfss	12,5	;volatile
 15191  1972  2975               	goto	l5901
 15192                           
 15193                           ;PS_2.c: 230: {
 15194                           ;PS_2.c: 231: return (1);
 15195  1973  3001               	movlw	1
 15196                           
 15197                           ;PS_2.c: 232: }
 15198  1974  0008               	return
 15199  1975                     l5901:	
 15200                           
 15201                           ;PS_2.c: 233: else
 15202                           ;PS_2.c: 234: {
 15203                           ;PS_2.c: 235: return 0;
 15204  1975  3000               	movlw	0
 15205                           
 15206                           ;PS_2.c: 236: }
 15207                           ;PS_2.c: 237: }
 15208  1976  0008               	return
 15209  1977                     l603:	
 15210                           
 15211                           ;PS_2.c: 238: else
 15212                           ;PS_2.c: 239: {
 15213                           ;PS_2.c: 241: if((PORTA & 0b00010000) == 0b00010000)
 15214  1977  1E0C               	btfss	12,4	;volatile
 15215  1978  297B               	goto	l5911
 15216                           
 15217                           ;PS_2.c: 242: {
 15218                           ;PS_2.c: 243: return (1);
 15219  1979  3001               	movlw	1
 15220                           
 15221                           ;PS_2.c: 244: }
 15222  197A  0008               	return
 15223  197B                     l5911:	
 15224                           
 15225                           ;PS_2.c: 245: else
 15226                           ;PS_2.c: 246: {
 15227                           ;PS_2.c: 247: return 0;
 15228  197B  3000               	movlw	0
 15229  197C  0008               	return
 15230  197D                     __end_of_READ_PS_2_PIN:	
 15231                           
 15232                           	psect	text44
 15233  19C9                     __ptext44:	
 15234 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15235 ;; Defined at:
 15236 ;;		line 199 in file "PS_2.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;  DATA_CLK        1    wreg     unsigned char 
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15241 ;; Return value:  Size  Location     Type
 15242 ;;		None               void
 15243 ;; Registers used:
 15244 ;;		wreg, status,2, status,0
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        2 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; Hardware stack levels required when called:    3
 15257 ;; This function calls:
 15258 ;;		Nothing
 15259 ;; This function is called by:
 15260 ;;		_main
 15261 ;;		_PS_2_Update
 15262 ;;		_Send_PS2
 15263 ;;		_Init_PS_2_Send
 15264 ;;		_Keyboard_Connected
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           
 15269                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15270  19C9                     _PS_2_ENABLE_INTERRUPT:	
 15271                           
 15272                           ;incstack = 0
 15273                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15274                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15275  19C9  0020               	movlb	0	; select bank0
 15276  19CA  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15277                           
 15278                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 15279  19CB  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15280  19CC  3A20               	xorlw	32
 15281  19CD  1D03               	skipz
 15282  19CE  29D6               	goto	l5929
 15283                           
 15284                           ;PS_2.c: 202: {
 15285                           ;PS_2.c: 205: IOCAF &= ~0b00100000;
 15286  19CF  30DF               	movlw	223
 15287  19D0  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15288  19D1  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15289  19D2  0027               	movlb	7	; select bank7
 15290  19D3  0593               	andwf	19,f	;volatile
 15291                           
 15292                           ;PS_2.c: 206: IOCAN |= 0b00100000;
 15293  19D4  1692               	bsf	18,5	;volatile
 15294                           
 15295                           ;PS_2.c: 208: }
 15296  19D5  0008               	return
 15297  19D6                     l5929:	
 15298                           
 15299                           ;PS_2.c: 209: else
 15300                           ;PS_2.c: 210: {
 15301                           ;PS_2.c: 213: IOCAF &= ~0b00010000;
 15302  19D6  30EF               	movlw	239
 15303  19D7  0020               	movlb	0	; select bank0
 15304  19D8  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15305  19D9  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15306  19DA  0027               	movlb	7	; select bank7
 15307  19DB  0593               	andwf	19,f	;volatile
 15308                           
 15309                           ;PS_2.c: 214: IOCAN |= 0b00010000;
 15310  19DC  1612               	bsf	18,4	;volatile
 15311  19DD  0008               	return
 15312  19DE                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15313                           
 15314                           	psect	text45
 15315  18EC                     __ptext45:	
 15316 ;; *************** function _Data_TRIS *****************
 15317 ;; Defined at:
 15318 ;;		line 135 in file "PS_2.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;  direction       1    wreg     unsigned char 
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;  direction       1    5[BANK0 ] unsigned char 
 15323 ;; Return value:  Size  Location     Type
 15324 ;;		None               void
 15325 ;; Registers used:
 15326 ;;		wreg, status,2, status,0
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;Total ram usage:        1 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; Hardware stack levels required when called:    3
 15339 ;; This function calls:
 15340 ;;		Nothing
 15341 ;; This function is called by:
 15342 ;;		_PS_2_INIT
 15343 ;;		_Send_PS2
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           
 15348                           ;psect for function _Data_TRIS
 15349  18EC                     _Data_TRIS:	
 15350                           
 15351                           ;incstack = 0
 15352                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15353                           ;Data_TRIS@direction stored from wreg
 15354  18EC  0020               	movlb	0	; select bank0
 15355  18ED  00A5               	movwf	Data_TRIS@direction
 15356                           
 15357                           ;PS_2.c: 137: if(direction == 0)
 15358  18EE  08A5               	movf	Data_TRIS@direction,f
 15359  18EF  1D03               	skipz
 15360  18F0  28F4               	goto	l583
 15361                           
 15362                           ;PS_2.c: 138: {
 15363                           ;PS_2.c: 139: TRISAbits.TRISA4 = 0;
 15364  18F1  0021               	movlb	1	; select bank1
 15365  18F2  120C               	bcf	12,4	;volatile
 15366                           
 15367                           ;PS_2.c: 140: }
 15368  18F3  0008               	return
 15369  18F4                     l583:	
 15370                           
 15371                           ;PS_2.c: 141: else
 15372                           ;PS_2.c: 142: {
 15373                           ;PS_2.c: 143: TRISAbits.TRISA4 = 1;
 15374  18F4  0021               	movlb	1	; select bank1
 15375  18F5  160C               	bsf	12,4	;volatile
 15376  18F6  0008               	return
 15377  18F7                     __end_of_Data_TRIS:	
 15378                           
 15379                           	psect	text46
 15380  18E1                     __ptext46:	
 15381 ;; *************** function _Clock_TRIS *****************
 15382 ;; Defined at:
 15383 ;;		line 118 in file "PS_2.c"
 15384 ;; Parameters:    Size  Location     Type
 15385 ;;  direction       1    wreg     unsigned char 
 15386 ;; Auto vars:     Size  Location     Type
 15387 ;;  direction       1    5[BANK0 ] unsigned char 
 15388 ;; Return value:  Size  Location     Type
 15389 ;;		None               void
 15390 ;; Registers used:
 15391 ;;		wreg, status,2, status,0
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;Total ram usage:        1 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    3
 15404 ;; This function calls:
 15405 ;;		Nothing
 15406 ;; This function is called by:
 15407 ;;		_PS_2_INIT
 15408 ;;		_Send_PS2
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           
 15413                           ;psect for function _Clock_TRIS
 15414  18E1                     _Clock_TRIS:	
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15418                           ;Clock_TRIS@direction stored from wreg
 15419  18E1  0020               	movlb	0	; select bank0
 15420  18E2  00A5               	movwf	Clock_TRIS@direction
 15421                           
 15422                           ;PS_2.c: 120: if(direction == 0)
 15423  18E3  08A5               	movf	Clock_TRIS@direction,f
 15424  18E4  1D03               	skipz
 15425  18E5  28E9               	goto	l578
 15426                           
 15427                           ;PS_2.c: 121: {
 15428                           ;PS_2.c: 122: TRISAbits.TRISA5 = 0;
 15429  18E6  0021               	movlb	1	; select bank1
 15430  18E7  128C               	bcf	12,5	;volatile
 15431                           
 15432                           ;PS_2.c: 123: }
 15433  18E8  0008               	return
 15434  18E9                     l578:	
 15435                           
 15436                           ;PS_2.c: 124: else
 15437                           ;PS_2.c: 125: {
 15438                           ;PS_2.c: 126: TRISAbits.TRISA5 = 1;
 15439  18E9  0021               	movlb	1	; select bank1
 15440  18EA  168C               	bsf	12,5	;volatile
 15441  18EB  0008               	return
 15442  18EC                     __end_of_Clock_TRIS:	
 15443                           
 15444                           	psect	text47
 15445  1AA9                     __ptext47:	
 15446 ;; *************** function _CheckSum_byte *****************
 15447 ;; Defined at:
 15448 ;;		line 68 in file "MISC.c"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;  This            2    5[BANK0 ] unsigned int 
 15451 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15452 ;; Auto vars:     Size  Location     Type
 15453 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15454 ;;  i               1   12[BANK0 ] unsigned char 
 15455 ;;  Parity          1   11[BANK0 ] unsigned char 
 15456 ;; Return value:  Size  Location     Type
 15457 ;;                  1    wreg      unsigned char 
 15458 ;; Registers used:
 15459 ;;		wreg, status,2, status,0
 15460 ;; Tracked objects:
 15461 ;;		On entry : 0/0
 15462 ;;		On exit  : 0/0
 15463 ;;		Unchanged: 0/0
 15464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15465 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15466 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15468 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15469 ;;Total ram usage:        8 bytes
 15470 ;; Hardware stack levels used:    1
 15471 ;; Hardware stack levels required when called:    3
 15472 ;; This function calls:
 15473 ;;		Nothing
 15474 ;; This function is called by:
 15475 ;;		_UARTchar
 15476 ;;		_PS_2_Update
 15477 ;;		_Send_PS2
 15478 ;; This function uses a non-reentrant model
 15479 ;;
 15480                           
 15481                           
 15482                           ;psect for function _CheckSum_byte
 15483  1AA9                     _CheckSum_byte:	
 15484                           
 15485                           ;MISC.c: 70: char i = 0;
 15486                           
 15487                           ;incstack = 0
 15488                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15489  1AA9  0020               	movlb	0	; select bank0
 15490  1AAA  01AC               	clrf	CheckSum_byte@i
 15491                           
 15492                           ;MISC.c: 71: unsigned char Parity = 0;
 15493  1AAB  01AB               	clrf	CheckSum_byte@Parity
 15494                           
 15495                           ;MISC.c: 72: unsigned int ThisTemp = This;
 15496  1AAC  0826               	movf	CheckSum_byte@This+1,w
 15497  1AAD  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15498  1AAE  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15499  1AAF  0825               	movf	CheckSum_byte@This,w
 15500  1AB0  01A9               	clrf	CheckSum_byte@ThisTemp
 15501  1AB1  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15502                           
 15503                           ;MISC.c: 74: for (i =0; i<8; i++)
 15504  1AB2  01AC               	clrf	CheckSum_byte@i
 15505  1AB3  3008               	movlw	8
 15506  1AB4  022C               	subwf	CheckSum_byte@i,w
 15507  1AB5  1803               	btfsc	3,0
 15508  1AB6  2ACA               	goto	l5651
 15509  1AB7                     l283:	
 15510                           
 15511                           ;MISC.c: 75: {
 15512                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 15513  1AB7  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15514  1AB8  2ABD               	goto	l285
 15515                           
 15516                           ;MISC.c: 77: {
 15517                           ;MISC.c: 78: Parity++;
 15518  1AB9  3001               	movlw	1
 15519  1ABA  00A8               	movwf	??_CheckSum_byte
 15520  1ABB  0828               	movf	??_CheckSum_byte,w
 15521  1ABC  07AB               	addwf	CheckSum_byte@Parity,f
 15522  1ABD                     l285:	
 15523                           
 15524                           ;MISC.c: 79: }
 15525                           ;MISC.c: 80: ThisTemp >>= 1;
 15526  1ABD  3001               	movlw	1
 15527  1ABE                     u7285:	
 15528  1ABE  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15529  1ABF  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15530  1AC0  0B89               	decfsz	9,f
 15531  1AC1  2ABE               	goto	u7285
 15532  1AC2  3001               	movlw	1
 15533  1AC3  00A8               	movwf	??_CheckSum_byte
 15534  1AC4  0828               	movf	??_CheckSum_byte,w
 15535  1AC5  07AC               	addwf	CheckSum_byte@i,f
 15536  1AC6  3008               	movlw	8
 15537  1AC7  022C               	subwf	CheckSum_byte@i,w
 15538  1AC8  1C03               	skipc
 15539  1AC9  2AB7               	goto	l283
 15540  1ACA                     l5651:	
 15541                           
 15542                           ;MISC.c: 81: }
 15543                           ;MISC.c: 82: if(Odd_Even == 3)
 15544  1ACA  0827               	movf	CheckSum_byte@Odd_Even,w
 15545  1ACB  3A03               	xorlw	3
 15546  1ACC  1D03               	skipz
 15547  1ACD  2AD4               	goto	l286
 15548                           
 15549                           ;MISC.c: 83: {
 15550                           ;MISC.c: 84: if(Parity % 2 == 0)
 15551  1ACE  182B               	btfsc	CheckSum_byte@Parity,0
 15552  1ACF  2AD2               	goto	l5659
 15553                           
 15554                           ;MISC.c: 85: {
 15555                           ;MISC.c: 86: return 1;
 15556  1AD0  3001               	movlw	1
 15557  1AD1  0008               	return
 15558  1AD2                     l5659:	
 15559                           
 15560                           ;MISC.c: 87: }
 15561                           ;MISC.c: 88: return 0;
 15562  1AD2  3000               	movlw	0
 15563                           
 15564                           ;MISC.c: 89: }
 15565  1AD3  0008               	return
 15566  1AD4                     l286:	
 15567                           
 15568                           ;MISC.c: 90: else
 15569                           ;MISC.c: 91: {
 15570                           ;MISC.c: 92: if(Parity % 2 == 1)
 15571  1AD4  1C2B               	btfss	CheckSum_byte@Parity,0
 15572  1AD5  2AD8               	goto	l5669
 15573                           
 15574                           ;MISC.c: 93: {
 15575                           ;MISC.c: 94: return 1;
 15576  1AD6  3001               	movlw	1
 15577  1AD7  0008               	return
 15578  1AD8                     l5669:	
 15579                           
 15580                           ;MISC.c: 95: }
 15581                           ;MISC.c: 96: return 0;
 15582  1AD8  3000               	movlw	0
 15583  1AD9  0008               	return
 15584  1ADA                     __end_of_CheckSum_byte:	
 15585                           
 15586                           	psect	text48
 15587  19DE                     __ptext48:	
 15588 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15589 ;; Defined at:
 15590 ;;		line 176 in file "PS_2.c"
 15591 ;; Parameters:    Size  Location     Type
 15592 ;;  DATA_CLK        1    wreg     unsigned char 
 15593 ;; Auto vars:     Size  Location     Type
 15594 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15595 ;; Return value:  Size  Location     Type
 15596 ;;		None               void
 15597 ;; Registers used:
 15598 ;;		wreg, status,2, status,0
 15599 ;; Tracked objects:
 15600 ;;		On entry : 0/0
 15601 ;;		On exit  : 0/0
 15602 ;;		Unchanged: 0/0
 15603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;Total ram usage:        2 bytes
 15609 ;; Hardware stack levels used:    1
 15610 ;; Hardware stack levels required when called:    3
 15611 ;; This function calls:
 15612 ;;		Nothing
 15613 ;; This function is called by:
 15614 ;;		_main
 15615 ;;		_PS_2_Update
 15616 ;;		_Init_PS_2_Send
 15617 ;;		_Keyboard_Connected
 15618 ;; This function uses a non-reentrant model
 15619 ;;
 15620                           
 15621                           
 15622                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15623  19DE                     _PS_2_DISABLE_INTERRUPT:	
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15627                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15628  19DE  0020               	movlb	0	; select bank0
 15629  19DF  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15630                           
 15631                           ;PS_2.c: 178: if(DATA_CLK == 0b00100000)
 15632  19E0  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15633  19E1  3A20               	xorlw	32
 15634  19E2  1D03               	skipz
 15635  19E3  29F0               	goto	l6105
 15636                           
 15637                           ;PS_2.c: 179: {
 15638                           ;PS_2.c: 182: IOCAN &= ~0b00100000;
 15639  19E4  30DF               	movlw	223
 15640  19E5  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15641  19E6  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15642  19E7  0027               	movlb	7	; select bank7
 15643  19E8  0592               	andwf	18,f	;volatile
 15644                           
 15645                           ;PS_2.c: 183: IOCAF &= ~0b00100000;
 15646  19E9  30DF               	movlw	223
 15647  19EA  0020               	movlb	0	; select bank0
 15648  19EB  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15649  19EC  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15650  19ED  0027               	movlb	7	; select bank7
 15651  19EE  0593               	andwf	19,f	;volatile
 15652                           
 15653                           ;PS_2.c: 184: }
 15654  19EF  0008               	return
 15655  19F0                     l6105:	
 15656                           
 15657                           ;PS_2.c: 185: else
 15658                           ;PS_2.c: 186: {
 15659                           ;PS_2.c: 189: IOCAN &= ~0b00010000;
 15660  19F0  30EF               	movlw	239
 15661  19F1  0020               	movlb	0	; select bank0
 15662  19F2  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15663  19F3  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15664  19F4  0027               	movlb	7	; select bank7
 15665  19F5  0592               	andwf	18,f	;volatile
 15666                           
 15667                           ;PS_2.c: 190: IOCAF &= ~0b00010000;
 15668  19F6  30EF               	movlw	239
 15669  19F7  0020               	movlb	0	; select bank0
 15670  19F8  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15671  19F9  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15672  19FA  0027               	movlb	7	; select bank7
 15673  19FB  0593               	andwf	19,f	;volatile
 15674  19FC  0008               	return
 15675  19FD                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15676                           
 15677                           	psect	text49
 15678  07DC                     __ptext49:	
 15679 ;; *************** function _InitApp *****************
 15680 ;; Defined at:
 15681 ;;		line 64 in file "user.c"
 15682 ;; Parameters:    Size  Location     Type
 15683 ;;		None
 15684 ;; Auto vars:     Size  Location     Type
 15685 ;;		None
 15686 ;; Return value:  Size  Location     Type
 15687 ;;		None               void
 15688 ;; Registers used:
 15689 ;;		wreg, status,2
 15690 ;; Tracked objects:
 15691 ;;		On entry : 0/0
 15692 ;;		On exit  : 0/0
 15693 ;;		Unchanged: 0/0
 15694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;Total ram usage:        0 bytes
 15700 ;; Hardware stack levels used:    1
 15701 ;; Hardware stack levels required when called:    3
 15702 ;; This function calls:
 15703 ;;		Nothing
 15704 ;; This function is called by:
 15705 ;;		_main
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           
 15710                           ;psect for function _InitApp
 15711  07DC                     _InitApp:	
 15712                           
 15713                           ;user.c: 66: LATC =0;
 15714                           
 15715                           ;incstack = 0
 15716                           ; Regs used in _InitApp: [wreg+status,2]
 15717  07DC  0022               	movlb	2	; select bank2
 15718  07DD  018E               	clrf	14	;volatile
 15719                           
 15720                           ;user.c: 67: LATA =0;
 15721  07DE  018C               	clrf	12	;volatile
 15722                           
 15723                           ;user.c: 68: TRISCbits.TRISC2 = 0;
 15724  07DF  0021               	movlb	1	; select bank1
 15725  07E0  110E               	bcf	14,2	;volatile
 15726                           
 15727                           ;user.c: 69: TRISCbits.TRISC1 = 0;
 15728  07E1  108E               	bcf	14,1	;volatile
 15729                           
 15730                           ;user.c: 70: TRISCbits.TRISC3 = 0;
 15731  07E2  118E               	bcf	14,3	;volatile
 15732                           
 15733                           ;user.c: 71: TRISCbits.TRISC4 = 0;
 15734  07E3  120E               	bcf	14,4	;volatile
 15735                           
 15736                           ;user.c: 72: TRISAbits.TRISA2 = 1;
 15737  07E4  150C               	bsf	12,2	;volatile
 15738                           
 15739                           ;user.c: 73: TRISCbits.TRISC0 = 0;
 15740  07E5  100E               	bcf	14,0	;volatile
 15741                           
 15742                           ;user.c: 74: TRISCbits.TRISC5 = 1;
 15743  07E6  168E               	bsf	14,5	;volatile
 15744                           
 15745                           ;user.c: 77: LATC |= 0b00000010;
 15746  07E7  0022               	movlb	2	; select bank2
 15747  07E8  148E               	bsf	14,1	;volatile
 15748                           
 15749                           ;user.c: 78: PPSLOCK =0;
 15750  07E9  003C               	movlb	28	; select bank28
 15751  07EA  018F               	clrf	15	;volatile
 15752                           
 15753                           ;user.c: 79: RC2PPS = 0b00010100;
 15754  07EB  3014               	movlw	20
 15755  07EC  003D               	movlb	29	; select bank29
 15756  07ED  00A2               	movwf	34	;volatile
 15757                           
 15758                           ;user.c: 80: CKPPS = 0b00010010;
 15759  07EE  3012               	movlw	18
 15760  07EF  003C               	movlb	28	; select bank28
 15761  07F0  00A5               	movwf	37	;volatile
 15762                           
 15763                           ;user.c: 82: RXPPS = 0b00010101;
 15764  07F1  3015               	movlw	21
 15765  07F2  00A4               	movwf	36	;volatile
 15766                           
 15767                           ;user.c: 84: PPSLOCK =1;
 15768  07F3  3001               	movlw	1
 15769  07F4  008F               	movwf	15	;volatile
 15770                           
 15771                           ;user.c: 86: ANSELA &= ~0xFF;
 15772  07F5  0023               	movlb	3	; select bank3
 15773  07F6  018C               	clrf	12	;volatile
 15774                           
 15775                           ;user.c: 87: ANSELA |= 0b00000100;
 15776  07F7  150C               	bsf	12,2	;volatile
 15777                           
 15778                           ;user.c: 88: ANSELC &= ~0xFF;
 15779  07F8  018E               	clrf	14	;volatile
 15780                           
 15781                           ;user.c: 89: OPTION_REGbits.nWPUEN = 0;
 15782  07F9  0021               	movlb	1	; select bank1
 15783  07FA  1395               	bcf	21,7	;volatile
 15784                           
 15785                           ;user.c: 90: WPUC = 0b00100000;
 15786  07FB  3020               	movlw	32
 15787  07FC  0024               	movlb	4	; select bank4
 15788  07FD  008E               	movwf	14	;volatile
 15789                           
 15790                           ;user.c: 91: WPUA = 0;
 15791  07FE  018C               	clrf	12	;volatile
 15792  07FF  0008               	return
 15793  0800                     __end_of_InitApp:	
 15794                           
 15795                           	psect	text50
 15796  1959                     __ptext50:	
 15797 ;; *************** function _ConfigureOscillator *****************
 15798 ;; Defined at:
 15799 ;;		line 40 in file "system.c"
 15800 ;; Parameters:    Size  Location     Type
 15801 ;;		None
 15802 ;; Auto vars:     Size  Location     Type
 15803 ;;		None
 15804 ;; Return value:  Size  Location     Type
 15805 ;;		None               void
 15806 ;; Registers used:
 15807 ;;		wreg, status,2, status,0
 15808 ;; Tracked objects:
 15809 ;;		On entry : 0/0
 15810 ;;		On exit  : 0/0
 15811 ;;		Unchanged: 0/0
 15812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;Total ram usage:        1 bytes
 15818 ;; Hardware stack levels used:    1
 15819 ;; Hardware stack levels required when called:    3
 15820 ;; This function calls:
 15821 ;;		Nothing
 15822 ;; This function is called by:
 15823 ;;		_main
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           
 15828                           ;psect for function _ConfigureOscillator
 15829  1959                     _ConfigureOscillator:	
 15830                           
 15831                           ;system.c: 42: OSCCON= 0b11110000;
 15832                           
 15833                           ;incstack = 0
 15834                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15835  1959  30F0               	movlw	240
 15836  195A  0021               	movlb	1	; select bank1
 15837  195B  0099               	movwf	25	;volatile
 15838  195C                     l5075:	
 15839                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 15840                           
 15841  195C  3000               	movlw	0
 15842  195D  181A               	btfsc	26,0	;volatile
 15843  195E  3001               	movlw	1
 15844  195F  051A               	andwf	26,w	;volatile
 15845  1960  1903               	btfsc	3,2
 15846  1961  295C               	goto	l5075
 15847  1962                     l5077:	
 15848                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 15849                           
 15850  1962  3040               	movlw	64
 15851  1963  0020               	movlb	0	; select bank0
 15852  1964  00A5               	movwf	??_ConfigureOscillator
 15853  1965  0825               	movf	??_ConfigureOscillator,w
 15854  1966  0021               	movlb	1	; select bank1
 15855  1967  059A               	andwf	26,f	;volatile
 15856  1968  1D03               	btfss	3,2
 15857  1969  0008               	return
 15858  196A  2962               	goto	l5077
 15859  196B                     __end_of_ConfigureOscillator:	
 15860                           
 15861                           	psect	intentry
 15862  0004                     __pintentry:	
 15863 ;; *************** function _isr *****************
 15864 ;; Defined at:
 15865 ;;		line 72 in file "interrupts.c"
 15866 ;; Parameters:    Size  Location     Type
 15867 ;;		None
 15868 ;; Auto vars:     Size  Location     Type
 15869 ;;  rx              1    4[BANK0 ] unsigned char 
 15870 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15871 ;; Return value:  Size  Location     Type
 15872 ;;		None               void
 15873 ;; Registers used:
 15874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15875 ;; Tracked objects:
 15876 ;;		On entry : 0/0
 15877 ;;		On exit  : 0/0
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;Total ram usage:        4 bytes
 15885 ;; Hardware stack levels used:    1
 15886 ;; Hardware stack levels required when called:    2
 15887 ;; This function calls:
 15888 ;;		i1_READ_PS_2_PIN
 15889 ;;		i1_ReadUSART
 15890 ;;		i1_UART_send_break_timed
 15891 ;;		i1_UARTchar
 15892 ;; This function is called by:
 15893 ;;		Interrupt level 1
 15894 ;; This function uses a non-reentrant model
 15895 ;;
 15896                           
 15897  0004                     _isr:	
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15901  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15902  0005  3180               	pagesel	$
 15903  0006  0020               	movlb	0	; select bank0
 15904  0007  087F               	movf	127,w
 15905  0008  00A2               	movwf	??_isr+1
 15906                           
 15907                           ;interrupts.c: 74: unsigned char rx;
 15908                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 15909  0009  01A3               	clrf	isr@Rx_fault
 15910                           
 15911                           ;interrupts.c: 77: if(IOCAF & 0b00100000)
 15912  000A  0027               	movlb	7	; select bank7
 15913  000B  1E93               	btfss	19,5	;volatile
 15914  000C  287C               	goto	i1l63
 15915                           
 15916                           ;interrupts.c: 78: {
 15917                           ;interrupts.c: 80: LATC |= 0b00010000;
 15918  000D  0022               	movlb	2	; select bank2
 15919  000E  160E               	bsf	14,4	;volatile
 15920                           
 15921                           ;interrupts.c: 81: if(PS_2_bits <44)
 15922  000F  302C               	movlw	44
 15923  0010  0020               	movlb	0	; select bank0
 15924  0011  026A               	subwf	_PS_2_bits,w
 15925  0012  1803               	skipnc
 15926  0013  287A               	goto	i1l5459
 15927                           
 15928                           ;interrupts.c: 82: {
 15929                           ;interrupts.c: 83: if(PS_2_bits <11 )
 15930  0014  300B               	movlw	11
 15931  0015  026A               	subwf	_PS_2_bits,w
 15932  0016  1803               	skipnc
 15933  0017  2830               	goto	i1l5433
 15934                           
 15935                           ;interrupts.c: 84: {
 15936                           ;interrupts.c: 85: PS_2_Read_Data_FirstTEMP <<= 1;
 15937  0018  3001               	movlw	1
 15938  0019  0024               	movlb	4	; select bank4
 15939  001A                     u686_25:	
 15940  001A  35AE               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15941  001B  0DAF               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15942  001C  0B89               	decfsz	9,f
 15943  001D  281A               	goto	u686_25
 15944                           
 15945                           ;interrupts.c: 86: if(READ_PS_2_PIN(0b00010000))
 15946  001E  3010               	movlw	16
 15947  001F  3199  217D  3180   	fcall	i1_READ_PS_2_PIN
 15948  0022  3A00               	xorlw	0
 15949  0023  1903               	skipnz
 15950  0024  282A               	goto	i1l5429
 15951                           
 15952                           ;interrupts.c: 87: {
 15953                           ;interrupts.c: 88: PS_2_Read_Data_FirstTEMP++;
 15954  0025  3001               	movlw	1
 15955  0026  0024               	movlb	4	; select bank4
 15956  0027  07AE               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15957  0028  3000               	movlw	0
 15958  0029  3DAF               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15959  002A                     i1l5429:	
 15960                           
 15961                           ;interrupts.c: 89: }
 15962                           ;interrupts.c: 90: PS_2_Read_Data_SecondTEMP = 0;
 15963  002A  0024               	movlb	4	; select bank4
 15964  002B  01B2               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15965  002C  01B3               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15966                           
 15967                           ;interrupts.c: 91: PS_2_Read_Data_ThirdTEMP = 0;
 15968  002D  01B4               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15969  002E  01B5               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15970                           
 15971                           ;interrupts.c: 92: }
 15972  002F  2872               	goto	i1l5455
 15973  0030                     i1l5433:	
 15974                           
 15975                           ;interrupts.c: 93: else if(PS_2_bits <22 )
 15976  0030  3016               	movlw	22
 15977  0031  0020               	movlb	0	; select bank0
 15978  0032  026A               	subwf	_PS_2_bits,w
 15979  0033  1803               	skipnc
 15980  0034  2848               	goto	i1l5441
 15981                           
 15982                           ;interrupts.c: 94: {
 15983                           ;interrupts.c: 95: PS_2_Read_Data_SecondTEMP <<= 1;
 15984  0035  3001               	movlw	1
 15985  0036  0024               	movlb	4	; select bank4
 15986  0037                     u689_25:	
 15987  0037  35B2               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15988  0038  0DB3               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15989  0039  0B89               	decfsz	9,f
 15990  003A  2837               	goto	u689_25
 15991                           
 15992                           ;interrupts.c: 96: if(READ_PS_2_PIN(0b00010000))
 15993  003B  3010               	movlw	16
 15994  003C  3199  217D  3180   	fcall	i1_READ_PS_2_PIN
 15995  003F  3A00               	xorlw	0
 15996  0040  1903               	skipnz
 15997  0041  2872               	goto	i1l5455
 15998                           
 15999                           ;interrupts.c: 97: {
 16000                           ;interrupts.c: 98: PS_2_Read_Data_SecondTEMP++;
 16001  0042  3001               	movlw	1
 16002  0043  0024               	movlb	4	; select bank4
 16003  0044  07B2               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 16004  0045  3000               	movlw	0
 16005  0046  3DB3               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 16006                           
 16007                           ;interrupts.c: 99: }
 16008                           ;interrupts.c: 100: }
 16009  0047  2872               	goto	i1l5455
 16010  0048                     i1l5441:	
 16011                           
 16012                           ;interrupts.c: 101: else if(PS_2_bits <33 )
 16013  0048  3021               	movlw	33
 16014  0049  0020               	movlb	0	; select bank0
 16015  004A  026A               	subwf	_PS_2_bits,w
 16016  004B  1803               	skipnc
 16017  004C  2860               	goto	i1l5449
 16018                           
 16019                           ;interrupts.c: 102: {
 16020                           ;interrupts.c: 103: PS_2_Read_Data_ThirdTEMP <<= 1;
 16021  004D  3001               	movlw	1
 16022  004E  0024               	movlb	4	; select bank4
 16023  004F                     u692_25:	
 16024  004F  35B4               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16025  0050  0DB5               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16026  0051  0B89               	decfsz	9,f
 16027  0052  284F               	goto	u692_25
 16028                           
 16029                           ;interrupts.c: 104: if(READ_PS_2_PIN(0b00010000))
 16030  0053  3010               	movlw	16
 16031  0054  3199  217D  3180   	fcall	i1_READ_PS_2_PIN
 16032  0057  3A00               	xorlw	0
 16033  0058  1903               	skipnz
 16034  0059  2872               	goto	i1l5455
 16035                           
 16036                           ;interrupts.c: 105: {
 16037                           ;interrupts.c: 106: PS_2_Read_Data_ThirdTEMP++;
 16038  005A  3001               	movlw	1
 16039  005B  0024               	movlb	4	; select bank4
 16040  005C  07B4               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 16041  005D  3000               	movlw	0
 16042  005E  3DB5               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 16043                           
 16044                           ;interrupts.c: 107: }
 16045                           ;interrupts.c: 108: }
 16046  005F  2872               	goto	i1l5455
 16047  0060                     i1l5449:	
 16048                           
 16049                           ;interrupts.c: 109: else
 16050                           ;interrupts.c: 110: {
 16051                           ;interrupts.c: 111: PS_2_Read_Data_ForthTEMP <<= 1;
 16052  0060  3001               	movlw	1
 16053  0061  0024               	movlb	4	; select bank4
 16054  0062                     u694_25:	
 16055  0062  35B0               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16056  0063  0DB1               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16057  0064  0B89               	decfsz	9,f
 16058  0065  2862               	goto	u694_25
 16059                           
 16060                           ;interrupts.c: 112: if(READ_PS_2_PIN(0b00010000))
 16061  0066  3010               	movlw	16
 16062  0067  3199  217D  3180   	fcall	i1_READ_PS_2_PIN
 16063  006A  3A00               	xorlw	0
 16064  006B  1903               	skipnz
 16065  006C  2872               	goto	i1l5455
 16066                           
 16067                           ;interrupts.c: 113: {
 16068                           ;interrupts.c: 114: PS_2_Read_Data_ForthTEMP++;
 16069  006D  3001               	movlw	1
 16070  006E  0024               	movlb	4	; select bank4
 16071  006F  07B0               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 16072  0070  3000               	movlw	0
 16073  0071  3DB1               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 16074  0072                     i1l5455:	
 16075                           
 16076                           ;interrupts.c: 115: }
 16077                           ;interrupts.c: 116: }
 16078                           ;interrupts.c: 117: PS_2_bits++;
 16079  0072  3001               	movlw	1
 16080  0073  0020               	movlb	0	; select bank0
 16081  0074  00A1               	movwf	??_isr
 16082  0075  0821               	movf	??_isr,w
 16083  0076  07EA               	addwf	_PS_2_bits,f
 16084                           
 16085                           ;interrupts.c: 118: Read_Timer = 0;
 16086  0077  0024               	movlb	4	; select bank4
 16087  0078  01A4               	clrf	_Read_Timer^(0+512)
 16088  0079  01A5               	clrf	(_Read_Timer+1)^(0+512)
 16089  007A                     i1l5459:	
 16090                           
 16091                           ;interrupts.c: 119: }
 16092                           ;interrupts.c: 120: IOCAF &= ~0b00100000;
 16093  007A  30DF               	movlw	223
 16094  007B  287F               	goto	L23
 16095  007C                     i1l63:	
 16096                           ;interrupts.c: 121: }
 16097                           
 16098                           
 16099                           ;interrupts.c: 122: else if (IOCAF & 0b00010000)
 16100  007C  1E13               	btfss	19,4	;volatile
 16101  007D  2885               	goto	i1l76
 16102                           
 16103                           ;interrupts.c: 123: {
 16104                           ;interrupts.c: 124: IOCAF &= ~0b00010000;
 16105  007E  30EF               	movlw	239
 16106  007F                     L23:	
 16107  007F  0020               	movlb	0	; select bank0
 16108  0080  00A1               	movwf	??_isr
 16109  0081  0821               	movf	??_isr,w
 16110  0082  0027               	movlb	7	; select bank7
 16111  0083  0593               	andwf	19,f	;volatile
 16112                           
 16113                           ;interrupts.c: 125: }
 16114  0084  28DC               	goto	i1l89
 16115  0085                     i1l76:	
 16116                           
 16117                           ;interrupts.c: 126: else if (PIR1bits.RCIF)
 16118  0085  0020               	movlb	0	; select bank0
 16119  0086  1E91               	btfss	17,5	;volatile
 16120  0087  28BA               	goto	i1l78
 16121                           
 16122                           ;interrupts.c: 127: {
 16123                           ;interrupts.c: 130: LATC |= 0b00001000;
 16124  0088  0022               	movlb	2	; select bank2
 16125  0089  158E               	bsf	14,3	;volatile
 16126                           
 16127                           ;interrupts.c: 131: SinLEDtimer = 0;
 16128  008A  0024               	movlb	4	; select bank4
 16129  008B  01B6               	clrf	_SinLEDtimer^(0+512)
 16130  008C  01B7               	clrf	(_SinLEDtimer+1)^(0+512)
 16131                           
 16132                           ;interrupts.c: 132: Rx_fault = 0;
 16133  008D  0020               	movlb	0	; select bank0
 16134  008E  01A3               	clrf	isr@Rx_fault
 16135                           
 16136                           ;interrupts.c: 133: if(RC1STAbits.FERR)
 16137  008F  0023               	movlb	3	; select bank3
 16138  0090  1D1D               	btfss	29,2	;volatile
 16139  0091  2895               	goto	i1l5471
 16140                           
 16141                           ;interrupts.c: 134: {
 16142                           ;interrupts.c: 135: Rx_fault =1;
 16143  0092  0020               	movlb	0	; select bank0
 16144  0093  01A3               	clrf	isr@Rx_fault
 16145  0094  0AA3               	incf	isr@Rx_fault,f
 16146  0095                     i1l5471:	
 16147                           
 16148                           ;interrupts.c: 136: }
 16149                           ;interrupts.c: 137: rx = ReadUSART();
 16150  0095  3198  20C5  3180   	fcall	i1_ReadUSART
 16151  0098  0020               	movlb	0	; select bank0
 16152  0099  00A1               	movwf	??_isr
 16153  009A  0821               	movf	??_isr,w
 16154  009B  00A4               	movwf	isr@rx
 16155                           
 16156                           ;interrupts.c: 138: if(Rx_fault == 1)
 16157  009C  0823               	movf	isr@Rx_fault,w
 16158  009D  3A01               	xorlw	1
 16159  009E  1D03               	skipz
 16160  009F  28AB               	goto	i1l5479
 16161                           
 16162                           ;interrupts.c: 139: {
 16163                           ;interrupts.c: 140: if(rx == 0)
 16164  00A0  08A4               	movf	isr@rx,f
 16165  00A1  1D03               	skipz
 16166  00A2  28B7               	goto	i1l5481
 16167                           
 16168                           ;interrupts.c: 141: {
 16169                           ;interrupts.c: 143: UART_send_break_timed(100000);
 16170  00A3  30A0               	movlw	160
 16171  00A4  00FA               	movwf	i1UART_send_break_timed@US
 16172  00A5  3086               	movlw	134
 16173  00A6  00FB               	movwf	i1UART_send_break_timed@US+1
 16174  00A7  3199  21FD  3180   	fcall	i1_UART_send_break_timed
 16175                           
 16176                           ;interrupts.c: 144: }
 16177                           ;interrupts.c: 145: }
 16178  00AA  28B7               	goto	i1l5481
 16179  00AB                     i1l5479:	
 16180                           
 16181                           ;interrupts.c: 146: else
 16182                           ;interrupts.c: 147: {
 16183                           ;interrupts.c: 148: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16184  00AB  01F8               	clrf	i1UARTchar@override
 16185  00AC  0AF8               	incf	i1UARTchar@override,f
 16186  00AD  3000               	movlw	0
 16187  00AE  0023               	movlb	3	; select bank3
 16188  00AF  181D               	btfsc	29,0	;volatile
 16189  00B0  3001               	movlw	1
 16190  00B1  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16191  00B2  0020               	movlb	0	; select bank0
 16192  00B3  0824               	movf	isr@rx,w
 16193  00B4  319D  25B7  3180   	fcall	i1_UARTchar
 16194  00B7                     i1l5481:	
 16195                           
 16196                           ;interrupts.c: 149: }
 16197                           ;interrupts.c: 151: PIR1bits.RCIF = 0;
 16198  00B7  0020               	movlb	0	; select bank0
 16199  00B8  1291               	bcf	17,5	;volatile
 16200                           
 16201                           ;interrupts.c: 152: }
 16202  00B9  28DC               	goto	i1l89
 16203  00BA                     i1l78:	
 16204                           
 16205                           ;interrupts.c: 153: else if(PIR1bits.TMR2IF)
 16206  00BA  1C91               	btfss	17,1	;volatile
 16207  00BB  28DB               	goto	i1l84
 16208                           
 16209                           ;interrupts.c: 154: {
 16210                           ;interrupts.c: 156: PIE1bits.TMR2IE = 0;
 16211  00BC  0021               	movlb	1	; select bank1
 16212  00BD  1091               	bcf	17,1	;volatile
 16213                           
 16214                           ;interrupts.c: 157: blinkdelay++;LATC ^= 0b00000010;
 16215  00BE  3001               	movlw	1
 16216  00BF  0020               	movlb	0	; select bank0
 16217  00C0  00A1               	movwf	??_isr
 16218  00C1  0821               	movf	??_isr,w
 16219  00C2  0022               	movlb	2	; select bank2
 16220  00C3  07EC               	addwf	_blinkdelay^(0+256),f
 16221  00C4  3002               	movlw	2
 16222  00C5  0020               	movlb	0	; select bank0
 16223  00C6  00A1               	movwf	??_isr
 16224  00C7  0821               	movf	??_isr,w
 16225  00C8  0022               	movlb	2	; select bank2
 16226  00C9  068E               	xorwf	14,f	;volatile
 16227                           
 16228                           ;interrupts.c: 158: if(blinkdelay > 4)
 16229  00CA  3005               	movlw	5
 16230  00CB  026C               	subwf	_blinkdelay^(0+256),w
 16231  00CC  1C03               	skipc
 16232  00CD  28D8               	goto	i1l5495
 16233                           
 16234                           ;interrupts.c: 159: {
 16235                           ;interrupts.c: 160: if(Alarm)
 16236  00CE  0021               	movlb	1	; select bank1
 16237  00CF  0868               	movf	_Alarm^(0+128),w
 16238  00D0  1903               	btfsc	3,2
 16239  00D1  28D4               	goto	i1l86
 16240                           
 16241                           ;interrupts.c: 161: {
 16242                           ;interrupts.c: 162: __nop();
 16243  00D2  0000               	nop
 16244                           
 16245                           ;interrupts.c: 163: }
 16246  00D3  28D6               	goto	i1l5493
 16247  00D4                     i1l86:	
 16248                           
 16249                           ;interrupts.c: 164: else
 16250                           ;interrupts.c: 165: {
 16251                           ;interrupts.c: 166: LATC |= 0b00000010;
 16252  00D4  0022               	movlb	2	; select bank2
 16253  00D5  148E               	bsf	14,1	;volatile
 16254  00D6                     i1l5493:	
 16255                           
 16256                           ;interrupts.c: 167: }
 16257                           ;interrupts.c: 168: blinkdelay =0;
 16258  00D6  0022               	movlb	2	; select bank2
 16259  00D7  01EC               	clrf	_blinkdelay^(0+256)
 16260  00D8                     i1l5495:	
 16261                           
 16262                           ;interrupts.c: 169: }
 16263                           ;interrupts.c: 170: PIR1bits.TMR2IF =0;
 16264  00D8  0020               	movlb	0	; select bank0
 16265  00D9  1091               	bcf	17,1	;volatile
 16266                           
 16267                           ;interrupts.c: 172: }
 16268  00DA  28DC               	goto	i1l89
 16269  00DB                     i1l84:	
 16270                           
 16271                           ;interrupts.c: 173: else
 16272                           ;interrupts.c: 174: {
 16273                           ;interrupts.c: 176: __nop();
 16274  00DB  0000               	nop
 16275  00DC                     i1l89:	
 16276  00DC  0020               	movlb	0	; select bank0
 16277  00DD  0822               	movf	??_isr+1,w
 16278  00DE  00FF               	movwf	127
 16279  00DF  107E               	bcf	126,0	;clear compiler interrupt flag
 16280  00E0  0009               	retfie
 16281  00E1                     __end_of_isr:	
 16282                           
 16283                           	psect	text52
 16284  1DB7                     __ptext52:	
 16285 ;; *************** function i1_UARTchar *****************
 16286 ;; Defined at:
 16287 ;;		line 231 in file "UART.c"
 16288 ;; Parameters:    Size  Location     Type
 16289 ;;  data            1    wreg     unsigned char 
 16290 ;;  override        1    8[COMMON] unsigned char 
 16291 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16292 ;; Auto vars:     Size  Location     Type
 16293 ;;  data            1    0[BANK0 ] unsigned char 
 16294 ;; Return value:  Size  Location     Type
 16295 ;;		None               void
 16296 ;; Registers used:
 16297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16298 ;; Tracked objects:
 16299 ;;		On entry : 0/0
 16300 ;;		On exit  : 0/0
 16301 ;;		Unchanged: 0/0
 16302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;Total ram usage:        7 bytes
 16308 ;; Hardware stack levels used:    1
 16309 ;; Hardware stack levels required when called:    1
 16310 ;; This function calls:
 16311 ;;		i1_CheckSum_byte
 16312 ;; This function is called by:
 16313 ;;		_isr
 16314 ;; This function uses a non-reentrant model
 16315 ;;
 16316                           
 16317                           
 16318                           ;psect for function i1_UARTchar
 16319  1DB7                     i1_UARTchar:	
 16320                           
 16321                           ;incstack = 0
 16322                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16323                           ;i1UARTchar@data stored from wreg
 16324  1DB7  0020               	movlb	0	; select bank0
 16325  1DB8  00A0               	movwf	i1UARTchar@data
 16326                           
 16327                           ;UART.c: 233: if(TXSTAbits.TX9)
 16328  1DB9  0023               	movlb	3	; select bank3
 16329  1DBA  1F1E               	btfss	30,6	;volatile
 16330  1DBB  2DFC               	goto	i1l5351
 16331                           
 16332                           ;UART.c: 234: {
 16333                           ;UART.c: 236: if(!override)
 16334  1DBC  08F8               	movf	i1UARTchar@override,f
 16335  1DBD  1903               	btfsc	3,2
 16336  1DBE  2DE6               	goto	i1l5347
 16337  1DBF  2DF3               	goto	i1l5349
 16338  1DC0                     i1l5341:	
 16339                           ;UART.c: 240: {
 16340                           ;UART.c: 241: case 1:
 16341                           
 16342                           ;UART.c: 237: {
 16343                           ;UART.c: 239: switch (PARITY)
 16344                           
 16345                           
 16346                           ;UART.c: 242: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16347  1DC0  0020               	movlb	0	; select bank0
 16348  1DC1  0820               	movf	i1UARTchar@data,w
 16349  1DC2  00FA               	movwf	??i1_UARTchar
 16350  1DC3  01FB               	clrf	??i1_UARTchar+1
 16351  1DC4  087A               	movf	??i1_UARTchar,w
 16352  1DC5  00F0               	movwf	i1CheckSum_byte@This
 16353  1DC6  087B               	movf	??i1_UARTchar+1,w
 16354  1DC7  00F1               	movwf	i1CheckSum_byte@This+1
 16355  1DC8  3003               	movlw	3
 16356  1DC9  2DD3               	goto	L26
 16357  1DCA                     i1l5343:	
 16358                           ;UART.c: 244: case 2:
 16359                           
 16360                           ;UART.c: 243: break;
 16361                           
 16362                           
 16363                           ;UART.c: 245: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16364  1DCA  0020               	movlb	0	; select bank0
 16365  1DCB  0820               	movf	i1UARTchar@data,w
 16366  1DCC  00FA               	movwf	??i1_UARTchar
 16367  1DCD  01FB               	clrf	??i1_UARTchar+1
 16368  1DCE  087A               	movf	??i1_UARTchar,w
 16369  1DCF  00F0               	movwf	i1CheckSum_byte@This
 16370  1DD0  087B               	movf	??i1_UARTchar+1,w
 16371  1DD1  00F1               	movwf	i1CheckSum_byte@This+1
 16372  1DD2  3002               	movlw	2
 16373  1DD3                     L26:	
 16374  1DD3  00FC               	movwf	??i1_UARTchar+2
 16375  1DD4  087C               	movf	??i1_UARTchar+2,w
 16376  1DD5  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16377  1DD6  319A  2249  319D   	fcall	i1_CheckSum_byte
 16378  1DD9  00FD               	movwf	??i1_UARTchar+3
 16379  1DDA  0023               	movlb	3	; select bank3
 16380  1DDB  081E               	movf	30,w	;volatile
 16381  1DDC  067D               	xorwf	??i1_UARTchar+3,w
 16382  1DDD  39FE               	andlw	-2
 16383  1DDE  067D               	xorwf	??i1_UARTchar+3,w
 16384  1DDF  2DFB               	goto	L25
 16385  1DE0                     i1l396:	
 16386                           ;UART.c: 247: case 3:
 16387                           
 16388                           ;UART.c: 246: break;
 16389                           
 16390                           
 16391                           ;UART.c: 248: TXSTAbits.TX9D = 1;
 16392  1DE0  0023               	movlb	3	; select bank3
 16393  1DE1  141E               	bsf	30,0	;volatile
 16394                           
 16395                           ;UART.c: 249: break;
 16396  1DE2  2DFC               	goto	i1l5351
 16397  1DE3                     i1l397:	
 16398                           ;UART.c: 250: default:
 16399                           
 16400                           
 16401                           ;UART.c: 251: TXSTAbits.TX9D = 0;
 16402  1DE3  0023               	movlb	3	; select bank3
 16403  1DE4  101E               	bcf	30,0	;volatile
 16404                           
 16405                           ;UART.c: 253: }
 16406                           
 16407                           ;UART.c: 252: break;
 16408  1DE5  2DFC               	goto	i1l5351
 16409  1DE6                     i1l5347:	
 16410  1DE6  0021               	movlb	1	; select bank1
 16411  1DE7  086A               	movf	_PARITY^(0+128),w
 16412                           
 16413                           ; Switch size 1, requested type "space"
 16414                           ; Number of cases is 3, Range of values is 1 to 3
 16415                           ; switch strategies available:
 16416                           ; Name         Instructions Cycles
 16417                           ; simple_byte           10     6 (average)
 16418                           ; direct_byte           15     9 (fixed)
 16419                           ; jumptable            263     9 (fixed)
 16420                           ;	Chosen strategy is simple_byte
 16421  1DE8  3A01               	xorlw	1	; case 1
 16422  1DE9  1903               	skipnz
 16423  1DEA  2DC0               	goto	i1l5341
 16424  1DEB  3A03               	xorlw	3	; case 2
 16425  1DEC  1903               	skipnz
 16426  1DED  2DCA               	goto	i1l5343
 16427  1DEE  3A01               	xorlw	1	; case 3
 16428  1DEF  1903               	skipnz
 16429  1DF0  2DE0               	goto	i1l396
 16430  1DF1  2DE3               	goto	i1l397
 16431                           
 16432                           ;UART.c: 254: }
 16433  1DF2  2DFC               	goto	i1l5351
 16434  1DF3                     i1l5349:	
 16435                           
 16436                           ;UART.c: 255: else
 16437                           ;UART.c: 256: {
 16438                           ;UART.c: 257: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16439  1DF3  3001               	movlw	1
 16440  1DF4  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16441  1DF5  00FA               	movwf	??i1_UARTchar
 16442  1DF6  0023               	movlb	3	; select bank3
 16443  1DF7  081E               	movf	30,w	;volatile
 16444  1DF8  067A               	xorwf	??i1_UARTchar,w
 16445  1DF9  39FE               	andlw	-2
 16446  1DFA  067A               	xorwf	??i1_UARTchar,w
 16447  1DFB                     L25:	
 16448  1DFB  009E               	movwf	30	;volatile
 16449  1DFC                     i1l5351:	
 16450                           
 16451                           ;UART.c: 258: }
 16452                           ;UART.c: 259: }
 16453                           ;UART.c: 261: if(data == '\n')
 16454  1DFC  0020               	movlb	0	; select bank0
 16455  1DFD  0820               	movf	i1UARTchar@data,w
 16456  1DFE  3A0A               	xorlw	10
 16457  1DFF  1D03               	skipz
 16458  1E00  2E09               	goto	i1l5357
 16459                           
 16460                           ;UART.c: 262: {
 16461                           ;UART.c: 263: if(override)
 16462  1E01  0878               	movf	i1UARTchar@override,w
 16463  1E02  1903               	btfsc	3,2
 16464  1E03  0008               	return
 16465                           
 16466                           ;UART.c: 264: {
 16467                           ;UART.c: 265: TXREG = data;
 16468  1E04  0820               	movf	i1UARTchar@data,w
 16469  1E05  0023               	movlb	3	; select bank3
 16470  1E06  009A               	movwf	26	;volatile
 16471  1E07  0020               	movlb	0	; select bank0
 16472  1E08  0008               	return
 16473  1E09                     i1l5357:	
 16474                           ;UART.c: 266: }
 16475                           ;UART.c: 267: }
 16476                           
 16477                           
 16478                           ;UART.c: 268: else
 16479                           ;UART.c: 269: {
 16480                           ;UART.c: 270: TXREG = data;
 16481  1E09  0020               	movlb	0	; select bank0
 16482  1E0A  0820               	movf	i1UARTchar@data,w
 16483  1E0B  0023               	movlb	3	; select bank3
 16484  1E0C  009A               	movwf	26	;volatile
 16485  1E0D  0020               	movlb	0	; select bank0
 16486  1E0E  0008               	return
 16487  1E0F                     __end_ofi1_UARTchar:	
 16488                           
 16489                           	psect	text53
 16490  1A49                     __ptext53:	
 16491 ;; *************** function i1_CheckSum_byte *****************
 16492 ;; Defined at:
 16493 ;;		line 68 in file "MISC.c"
 16494 ;; Parameters:    Size  Location     Type
 16495 ;;  This            2    0[COMMON] unsigned int 
 16496 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16499 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16500 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  1    wreg      unsigned char 
 16503 ;; Registers used:
 16504 ;;		wreg, status,2, status,0
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16510 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;Total ram usage:        8 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; This function calls:
 16517 ;;		Nothing
 16518 ;; This function is called by:
 16519 ;;		i1_UARTchar
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           
 16524                           ;psect for function i1_CheckSum_byte
 16525  1A49                     i1_CheckSum_byte:	
 16526                           
 16527                           ;MISC.c: 70: char i = 0;
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16531  1A49  01F7               	clrf	i1CheckSum_byte@i
 16532                           
 16533                           ;MISC.c: 71: unsigned char Parity = 0;
 16534  1A4A  01F6               	clrf	i1CheckSum_byte@Parity
 16535                           
 16536                           ;MISC.c: 72: unsigned int ThisTemp = This;
 16537  1A4B  0871               	movf	i1CheckSum_byte@This+1,w
 16538  1A4C  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16539  1A4D  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16540  1A4E  0870               	movf	i1CheckSum_byte@This,w
 16541  1A4F  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16542  1A50  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16543                           
 16544                           ;MISC.c: 74: for (i =0; i<8; i++)
 16545  1A51  01F7               	clrf	i1CheckSum_byte@i
 16546  1A52  3008               	movlw	8
 16547  1A53  0277               	subwf	i1CheckSum_byte@i,w
 16548  1A54  1803               	btfsc	3,0
 16549  1A55  2A69               	goto	i1l5051
 16550  1A56                     i1l283:	
 16551                           
 16552                           ;MISC.c: 75: {
 16553                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 16554  1A56  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16555  1A57  2A5C               	goto	i1l285
 16556                           
 16557                           ;MISC.c: 77: {
 16558                           ;MISC.c: 78: Parity++;
 16559  1A58  3001               	movlw	1
 16560  1A59  00F3               	movwf	??i1_CheckSum_byte
 16561  1A5A  0873               	movf	??i1_CheckSum_byte,w
 16562  1A5B  07F6               	addwf	i1CheckSum_byte@Parity,f
 16563  1A5C                     i1l285:	
 16564                           
 16565                           ;MISC.c: 79: }
 16566                           ;MISC.c: 80: ThisTemp >>= 1;
 16567  1A5C  3001               	movlw	1
 16568  1A5D                     u639_25:	
 16569  1A5D  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16570  1A5E  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16571  1A5F  0B89               	decfsz	9,f
 16572  1A60  2A5D               	goto	u639_25
 16573  1A61  3001               	movlw	1
 16574  1A62  00F3               	movwf	??i1_CheckSum_byte
 16575  1A63  0873               	movf	??i1_CheckSum_byte,w
 16576  1A64  07F7               	addwf	i1CheckSum_byte@i,f
 16577  1A65  3008               	movlw	8
 16578  1A66  0277               	subwf	i1CheckSum_byte@i,w
 16579  1A67  1C03               	skipc
 16580  1A68  2A56               	goto	i1l283
 16581  1A69                     i1l5051:	
 16582                           
 16583                           ;MISC.c: 81: }
 16584                           ;MISC.c: 82: if(Odd_Even == 3)
 16585  1A69  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16586  1A6A  3A03               	xorlw	3
 16587  1A6B  1D03               	skipz
 16588  1A6C  2A73               	goto	i1l286
 16589                           
 16590                           ;MISC.c: 83: {
 16591                           ;MISC.c: 84: if(Parity % 2 == 0)
 16592  1A6D  1876               	btfsc	i1CheckSum_byte@Parity,0
 16593  1A6E  2A71               	goto	i1l5059
 16594                           
 16595                           ;MISC.c: 85: {
 16596                           ;MISC.c: 86: return 1;
 16597  1A6F  3001               	movlw	1
 16598  1A70  0008               	return
 16599  1A71                     i1l5059:	
 16600                           
 16601                           ;MISC.c: 87: }
 16602                           ;MISC.c: 88: return 0;
 16603  1A71  3000               	movlw	0
 16604                           
 16605                           ;MISC.c: 89: }
 16606  1A72  0008               	return
 16607  1A73                     i1l286:	
 16608                           
 16609                           ;MISC.c: 90: else
 16610                           ;MISC.c: 91: {
 16611                           ;MISC.c: 92: if(Parity % 2 == 1)
 16612  1A73  1C76               	btfss	i1CheckSum_byte@Parity,0
 16613  1A74  2A77               	goto	i1l5069
 16614                           
 16615                           ;MISC.c: 93: {
 16616                           ;MISC.c: 94: return 1;
 16617  1A75  3001               	movlw	1
 16618  1A76  0008               	return
 16619  1A77                     i1l5069:	
 16620                           
 16621                           ;MISC.c: 95: }
 16622                           ;MISC.c: 96: return 0;
 16623  1A77  3000               	movlw	0
 16624  1A78  0008               	return
 16625  1A79                     __end_ofi1_CheckSum_byte:	
 16626                           
 16627                           	psect	text54
 16628  19FD                     __ptext54:	
 16629 ;; *************** function i1_UART_send_break_timed *****************
 16630 ;; Defined at:
 16631 ;;		line 331 in file "UART.c"
 16632 ;; Parameters:    Size  Location     Type
 16633 ;;  US              2   10[COMMON] unsigned int 
 16634 ;; Auto vars:     Size  Location     Type
 16635 ;;		None
 16636 ;; Return value:  Size  Location     Type
 16637 ;;		None               void
 16638 ;; Registers used:
 16639 ;;		wreg, status,2, status,0, pclath, cstack
 16640 ;; Tracked objects:
 16641 ;;		On entry : 0/0
 16642 ;;		On exit  : 0/0
 16643 ;;		Unchanged: 0/0
 16644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;Total ram usage:        3 bytes
 16650 ;; Hardware stack levels used:    1
 16651 ;; Hardware stack levels required when called:    1
 16652 ;; This function calls:
 16653 ;;		i1_delayUS
 16654 ;; This function is called by:
 16655 ;;		_isr
 16656 ;; This function uses a non-reentrant model
 16657 ;;
 16658                           
 16659                           
 16660                           ;psect for function i1_UART_send_break_timed
 16661  19FD                     i1_UART_send_break_timed:	
 16662                           
 16663                           ;UART.c: 334: LATC |= 0b00000100;
 16664                           
 16665                           ;incstack = 0
 16666                           ; Regs used in i1_UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 16667  19FD  0022               	movlb	2	; select bank2
 16668  19FE  150E               	bsf	14,2	;volatile
 16669                           
 16670                           ;UART.c: 335: PPSLOCK =0;
 16671  19FF  003C               	movlb	28	; select bank28
 16672  1A00  018F               	clrf	15	;volatile
 16673                           
 16674                           ;UART.c: 336: RC2PPS = 0b00000000;
 16675  1A01  003D               	movlb	29	; select bank29
 16676  1A02  01A2               	clrf	34	;volatile
 16677                           
 16678                           ;UART.c: 337: PPSLOCK =1;
 16679  1A03  3001               	movlw	1
 16680  1A04  003C               	movlb	28	; select bank28
 16681  1A05  008F               	movwf	15	;volatile
 16682                           
 16683                           ;UART.c: 339: LATC &= ~0b00000100;
 16684  1A06  30FB               	movlw	251
 16685  1A07  00FC               	movwf	??i1_UART_send_break_timed
 16686  1A08  087C               	movf	??i1_UART_send_break_timed,w
 16687  1A09  0022               	movlb	2	; select bank2
 16688  1A0A  058E               	andwf	14,f	;volatile
 16689                           
 16690                           ;UART.c: 340: delayUS(US);
 16691  1A0B  087A               	movf	i1UART_send_break_timed@US,w
 16692  1A0C  00F0               	movwf	i1delayUS@US
 16693  1A0D  087B               	movf	i1UART_send_break_timed@US+1,w
 16694  1A0E  00F1               	movwf	i1delayUS@US+1
 16695  1A0F  01F2               	clrf	i1delayUS@US+2
 16696  1A10  01F3               	clrf	i1delayUS@US+3
 16697  1A11  319B  233D         	fcall	i1_delayUS
 16698                           
 16699                           ;UART.c: 341: LATC |= 0b00000100;
 16700  1A13  0022               	movlb	2	; select bank2
 16701  1A14  150E               	bsf	14,2	;volatile
 16702                           
 16703                           ;UART.c: 343: PPSLOCK =0;
 16704  1A15  003C               	movlb	28	; select bank28
 16705  1A16  018F               	clrf	15	;volatile
 16706                           
 16707                           ;UART.c: 344: RC2PPS = 0b00010100;
 16708  1A17  3014               	movlw	20
 16709  1A18  003D               	movlb	29	; select bank29
 16710  1A19  00A2               	movwf	34	;volatile
 16711                           
 16712                           ;UART.c: 345: CKPPS = 0b00010010;
 16713  1A1A  3012               	movlw	18
 16714  1A1B  003C               	movlb	28	; select bank28
 16715  1A1C  00A5               	movwf	37	;volatile
 16716                           
 16717                           ;UART.c: 347: RXPPS = 0b00010101;
 16718  1A1D  3015               	movlw	21
 16719  1A1E  00A4               	movwf	36	;volatile
 16720                           
 16721                           ;UART.c: 349: PPSLOCK =1;
 16722  1A1F  3001               	movlw	1
 16723  1A20  008F               	movwf	15	;volatile
 16724  1A21  0008               	return
 16725  1A22                     __end_ofi1_UART_send_break_timed:	
 16726                           
 16727                           	psect	text55
 16728  1B3D                     __ptext55:	
 16729 ;; *************** function i1_delayUS *****************
 16730 ;; Defined at:
 16731 ;;		line 48 in file "MISC.c"
 16732 ;; Parameters:    Size  Location     Type
 16733 ;;  US              4    0[COMMON] long 
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;  delayUS         4    5[COMMON] long 
 16736 ;;  delayUS         1    9[COMMON] unsigned char 
 16737 ;; Return value:  Size  Location     Type
 16738 ;;		None               void
 16739 ;; Registers used:
 16740 ;;		wreg, status,2, status,0
 16741 ;; Tracked objects:
 16742 ;;		On entry : 0/0
 16743 ;;		On exit  : 0/0
 16744 ;;		Unchanged: 0/0
 16745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;Total ram usage:       10 bytes
 16751 ;; Hardware stack levels used:    1
 16752 ;; This function calls:
 16753 ;;		Nothing
 16754 ;; This function is called by:
 16755 ;;		i1_UART_send_break_timed
 16756 ;; This function uses a non-reentrant model
 16757 ;;
 16758                           
 16759                           
 16760                           ;psect for function i1_delayUS
 16761  1B3D                     i1_delayUS:	
 16762                           
 16763                           ;MISC.c: 50: long i;
 16764                           ;MISC.c: 51: unsigned char j;
 16765                           ;MISC.c: 52: for(i=0;i<US;i+=6)
 16766                           
 16767                           ;incstack = 0
 16768                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 16769  1B3D  3000               	movlw	0
 16770  1B3E  00F8               	movwf	i1delayUS@i+3
 16771  1B3F  3000               	movlw	0
 16772  1B40  00F7               	movwf	i1delayUS@i+2
 16773  1B41  3000               	movlw	0
 16774  1B42  00F6               	movwf	i1delayUS@i+1
 16775  1B43  3000               	movlw	0
 16776  1B44  00F5               	movwf	i1delayUS@i
 16777  1B45                     i1l275:	
 16778  1B45  0878               	movf	i1delayUS@i+3,w
 16779  1B46  3A80               	xorlw	128
 16780  1B47  00F4               	movwf	??i1_delayUS
 16781  1B48  0873               	movf	i1delayUS@US+3,w
 16782  1B49  3A80               	xorlw	128
 16783  1B4A  0274               	subwf	??i1_delayUS,w
 16784  1B4B  1D03               	skipz
 16785  1B4C  2B57               	goto	u636_23
 16786  1B4D  0872               	movf	i1delayUS@US+2,w
 16787  1B4E  0277               	subwf	i1delayUS@i+2,w
 16788  1B4F  1D03               	skipz
 16789  1B50  2B57               	goto	u636_23
 16790  1B51  0871               	movf	i1delayUS@US+1,w
 16791  1B52  0276               	subwf	i1delayUS@i+1,w
 16792  1B53  1D03               	skipz
 16793  1B54  2B57               	goto	u636_23
 16794  1B55  0870               	movf	i1delayUS@US,w
 16795  1B56  0275               	subwf	i1delayUS@i,w
 16796  1B57                     u636_23:	
 16797  1B57  1803               	btfsc	3,0
 16798  1B58  0008               	return
 16799                           
 16800                           ;MISC.c: 53: {
 16801                           ;MISC.c: 54: for(j=0;j<32;j++)
 16802  1B59  01F9               	clrf	i1delayUS@j
 16803  1B5A  3020               	movlw	32
 16804  1B5B  0279               	subwf	i1delayUS@j,w
 16805  1B5C  1803               	btfsc	3,0
 16806  1B5D  2B67               	goto	i1l5035
 16807  1B5E                     i1l277:	
 16808                           
 16809                           ;MISC.c: 55: {
 16810                           ;MISC.c: 56: __nop();
 16811  1B5E  0000               	nop
 16812  1B5F  3001               	movlw	1
 16813  1B60  00F4               	movwf	??i1_delayUS
 16814  1B61  0874               	movf	??i1_delayUS,w
 16815  1B62  07F9               	addwf	i1delayUS@j,f
 16816  1B63  3020               	movlw	32
 16817  1B64  0279               	subwf	i1delayUS@j,w
 16818  1B65  1C03               	skipc
 16819  1B66  2B5E               	goto	i1l277
 16820  1B67                     i1l5035:	
 16821  1B67  3006               	movlw	6
 16822  1B68  07F5               	addwf	i1delayUS@i,f
 16823  1B69  3000               	movlw	0
 16824  1B6A  3DF6               	addwfc	i1delayUS@i+1,f
 16825  1B6B  3000               	movlw	0
 16826  1B6C  3DF7               	addwfc	i1delayUS@i+2,f
 16827  1B6D  3000               	movlw	0
 16828  1B6E  3DF8               	addwfc	i1delayUS@i+3,f
 16829  1B6F  2B45               	goto	i1l275
 16830  1B70                     __end_ofi1_delayUS:	
 16831                           
 16832                           	psect	text56
 16833  18C5                     __ptext56:	
 16834 ;; *************** function i1_ReadUSART *****************
 16835 ;; Defined at:
 16836 ;;		line 299 in file "UART.c"
 16837 ;; Parameters:    Size  Location     Type
 16838 ;;		None
 16839 ;; Auto vars:     Size  Location     Type
 16840 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16841 ;; Return value:  Size  Location     Type
 16842 ;;                  1    wreg      unsigned char 
 16843 ;; Registers used:
 16844 ;;		wreg
 16845 ;; Tracked objects:
 16846 ;;		On entry : 0/0
 16847 ;;		On exit  : 0/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;Total ram usage:        2 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; This function calls:
 16857 ;;		Nothing
 16858 ;; This function is called by:
 16859 ;;		_isr
 16860 ;; This function uses a non-reentrant model
 16861 ;;
 16862                           
 16863                           
 16864                           ;psect for function i1_ReadUSART
 16865  18C5                     i1_ReadUSART:	
 16866                           
 16867                           ;UART.c: 301: char data;
 16868                           ;UART.c: 303: if(RCSTAbits.OERR)
 16869                           
 16870                           ;incstack = 0
 16871                           ; Regs used in i1_ReadUSART: [wreg]
 16872  18C5  0023               	movlb	3	; select bank3
 16873  18C6  189D               	btfsc	29,1	;volatile
 16874                           
 16875                           ;UART.c: 304: {
 16876                           ;UART.c: 305: RCSTAbits.CREN = 0;
 16877  18C7  121D               	bcf	29,4	;volatile
 16878                           
 16879                           ;UART.c: 306: }
 16880                           ;UART.c: 308: data = RCREG;
 16881  18C8  0819               	movf	25,w	;volatile
 16882  18C9  00F0               	movwf	??i1_ReadUSART
 16883  18CA  0870               	movf	??i1_ReadUSART,w
 16884  18CB  00F1               	movwf	i1ReadUSART@data
 16885                           
 16886                           ;UART.c: 310: return (data);
 16887  18CC  0871               	movf	i1ReadUSART@data,w
 16888  18CD  0008               	return
 16889  18CE                     __end_ofi1_ReadUSART:	
 16890                           
 16891                           	psect	text57
 16892  197D                     __ptext57:	
 16893 ;; *************** function i1_READ_PS_2_PIN *****************
 16894 ;; Defined at:
 16895 ;;		line 224 in file "PS_2.c"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;  DATA_CLK        1    wreg     unsigned char 
 16898 ;; Auto vars:     Size  Location     Type
 16899 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16900 ;; Return value:  Size  Location     Type
 16901 ;;                  1    wreg      unsigned char 
 16902 ;; Registers used:
 16903 ;;		wreg
 16904 ;; Tracked objects:
 16905 ;;		On entry : 0/0
 16906 ;;		On exit  : 0/0
 16907 ;;		Unchanged: 0/0
 16908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;Total ram usage:        1 bytes
 16914 ;; Hardware stack levels used:    1
 16915 ;; This function calls:
 16916 ;;		Nothing
 16917 ;; This function is called by:
 16918 ;;		_isr
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           
 16923                           ;psect for function i1_READ_PS_2_PIN
 16924  197D                     i1_READ_PS_2_PIN:	
 16925                           
 16926                           ;incstack = 0
 16927                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16928                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16929  197D  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16930                           
 16931                           ;PS_2.c: 226: if(DATA_CLK == 0b00100000)
 16932  197E  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16933  197F  3A20               	xorlw	32
 16934  1980  1D03               	skipz
 16935  1981  2989               	goto	i1l603
 16936                           
 16937                           ;PS_2.c: 227: {
 16938                           ;PS_2.c: 229: if((PORTA & 0b00100000) == 0b00100000)
 16939  1982  0020               	movlb	0	; select bank0
 16940  1983  1E8C               	btfss	12,5	;volatile
 16941  1984  2987               	goto	i1l5399
 16942                           
 16943                           ;PS_2.c: 230: {
 16944                           ;PS_2.c: 231: return (1);
 16945  1985  3001               	movlw	1
 16946                           
 16947                           ;PS_2.c: 232: }
 16948  1986  0008               	return
 16949  1987                     i1l5399:	
 16950                           
 16951                           ;PS_2.c: 233: else
 16952                           ;PS_2.c: 234: {
 16953                           ;PS_2.c: 235: return 0;
 16954  1987  3000               	movlw	0
 16955                           
 16956                           ;PS_2.c: 236: }
 16957                           ;PS_2.c: 237: }
 16958  1988  0008               	return
 16959  1989                     i1l603:	
 16960                           
 16961                           ;PS_2.c: 238: else
 16962                           ;PS_2.c: 239: {
 16963                           ;PS_2.c: 241: if((PORTA & 0b00010000) == 0b00010000)
 16964  1989  0020               	movlb	0	; select bank0
 16965  198A  1E0C               	btfss	12,4	;volatile
 16966  198B  298E               	goto	i1l5409
 16967                           
 16968                           ;PS_2.c: 242: {
 16969                           ;PS_2.c: 243: return (1);
 16970  198C  3001               	movlw	1
 16971                           
 16972                           ;PS_2.c: 244: }
 16973  198D  0008               	return
 16974  198E                     i1l5409:	
 16975                           
 16976                           ;PS_2.c: 245: else
 16977                           ;PS_2.c: 246: {
 16978                           ;PS_2.c: 247: return 0;
 16979  198E  3000               	movlw	0
 16980  198F  0008               	return
 16981  1990                     __end_ofi1_READ_PS_2_PIN:	
 16982  007E                     btemp	set	126	;btemp
 16983  007E                     pic14e$flags	set	126
 16984  007E                     wtemp	set	126
 16985  007E                     wtemp0	set	126
 16986  0080                     wtemp1	set	128
 16987  0082                     wtemp2	set	130
 16988  0084                     wtemp3	set	132
 16989  0086                     wtemp4	set	134
 16990  0088                     wtemp5	set	136
 16991  007F                     wtemp6	set	127
 16992  007E                     ttemp	set	126
 16993  007E                     ttemp0	set	126
 16994  0081                     ttemp1	set	129
 16995  0084                     ttemp2	set	132
 16996  0087                     ttemp3	set	135
 16997  007F                     ttemp4	set	127
 16998  007E                     ltemp	set	126
 16999  007E                     ltemp0	set	126
 17000  0082                     ltemp1	set	130
 17001  0086                     ltemp2	set	134
 17002  0080                     ltemp3	set	128


Data Sizes:
    Strings     458
    Constant    507
    Data        16
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      26
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_34(CODE[33]), STR_24(CODE[21]), STR_16(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1051$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_40(CODE[29]), STR_39(CODE[22]), STR_38(CODE[18]), STR_37(CODE[17]), 
		 -> STR_36(CODE[24]), STR_35(CODE[23]), PS_2_Update@buf(BANK5[60]), STR_33(CODE[3]), 
		 -> STR_32(CODE[44]), STR_31(CODE[18]), STR_30(CODE[3]), STR_29(CODE[22]), 
		 -> STR_28(CODE[18]), STR_27(CODE[17]), STR_26(CODE[24]), STR_25(CODE[23]), 
		 -> SetBaud@buf(BANK2[50]), STR_23(CODE[24]), STR_22(CODE[3]), STR_21(CODE[22]), 
		 -> STR_20(CODE[18]), STR_19(CODE[17]), STR_18(CODE[24]), STR_17(CODE[23]), 
		 -> Init_System@buf(BANK1[60]), STR_15(CODE[3]), STR_14(CODE[17]), STR_13(CODE[22]), 
		 -> STR_12(CODE[21]), STR_11(CODE[20]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[22]), STR_7(CODE[21]), STR_6(CODE[24]), STR_5(CODE[39]), 
		 -> STR_4(CODE[3]), Version(BANK4[4]), STR_3(CODE[19]), STR_2(CODE[26]), 
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_UART_send_break_timed->i1_delayUS

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _UART_send_break_timed->_delayUS
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  164704
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11607
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3093
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   60957
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   52754
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
              _UART_send_break_timed
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break_timed                                3     1      2    3212
                                             15 BANK0      3     1      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   23529
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5208
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4819
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17827
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    1929
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    9500
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3188
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    8132
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    5008
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    3062
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     774
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
            i1_UART_send_break_timed
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     493
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break_timed                              3     1      2     166
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (10) i1_delayUS                                          10     6      4     118
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break_timed
         _delayUS
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break_timed
       _delayUS
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break_timed
     i1_delayUS
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1A      13       32.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     167      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     167      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jan 29 09:54:48 2015

              _PS_2_DISABLE_INTERRUPT 19DE                     ??_ReadFlash_2Byte 0028  
                   ??_ReadFlash_4Byte 002E                                     _i 016D  
                        ___fldiv@cntr 0045                          ___fldiv@sign 0047  
                         __CFG_CP$OFF 0000                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l164 0E1C                                   l181 0FE9  
                                 l424 1B70                                   l426 1B8F  
                                 l283 1AB7                                   l603 1977  
                                 l275 100B                                   l436 1783  
                                 l285 1ABD                                   l277 1024  
                                 l286 1AD4                                   l383 1BCC  
                                 l385 1BD5                                   l379 1BBE  
                                 l396 1E3B                                   l901 1B2E  
                                 l397 1E3E                                   l910 18FD  
                                 l583 18F4                                   l743 055F  
                                 l816 0CD6                                   l817 0D2C  
                                 l673 03DC                                   l578 18E9  
                                 l755 07A9                                   l763 06AC  
                                 l588 1945                                   l970 1C38  
                                 l973 1C5D                                   _MEM 0226  
                                 _PR2 001B                                   _isr 0004  
                        __CFG_BORV$LO 0000                                   wreg 0009  
                        ___flmul@cntr 005A                          ___flmul@sign 005B  
          __end_of_ScanCodeFunctionE0 09D3               UART_send_break_timed@US 002F  
                       ___flpack@sign 002A                                  l1011 14C7  
                                l1014 14E5                                  l1192 1FE5  
                                l1186 1FCB                                  l6023 14CE  
                                l6105 19F0                                  l6017 14C5  
                                l6201 17E0                                  l5075 195C  
                                l6019 14C9                                  l6203 17ED  
                                l5323 1F82                                  l5077 1962  
                                l6301 0D57                                  l6029 14F4  
                                l6205 17F4                                  l6311 0D5A  
                                l6055 153D                                  l6047 1538  
                                l6039 150B                                  l6215 19C7  
                                l7031 106C                                  l5319 1F59  
                                l6313 0D77                                  l6057 14A4  
                                l6401 1957                                  l7025 1052  
                                l6243 0CB3                                  l6059 158D  
                                l6139 1928                                  l6411 1A8C  
                                l7043 10B1                                  l6325 0D7E  
                                l6253 0CDB                                  l6245 0CD0  
                                l7221 13E3                                  l7125 1606  
                                l6165 176A                                  l6351 0DDB  
                                l6327 0D9B                                  l6255 0CE1  
                                l7215 13CE                                  l7143 1664  
                                l6191 17CD                                  l6183 17AC  
                                l6407 1A82                                  l6431 1FB8  
                                l6423 1F9F                                  l7063 1113  
                                l7303 0C05                                  l6361 0DDE  
                                l6337 0D9E                                  l6281 0D23  
                                l7233 140D                                  l7209 13B9  
                                l5713 1E41                                  l7145 1669  
                                l7153 1678                                  l7129 160F  
                                l6193 17D1                                  l6169 177D  
                                l6521 02C5                                  l6505 0259  
                                l7049 10D1                                  l7081 1172  
                                l5651 1ACA                                  l5635 102E  
                                l6363 0DFB                                  l6339 0DBB  
                                l6267 0CE6                                  l7251 144C  
                                l7227 13F8                                  l5723 1E67  
                                l5707 1E19                                  l5715 1E4E  
                                l7147 166E                                  l7155 1685  
                                l5811 1333                                  l5803 1315  
                                l6195 17D6                                  l6603 037C  
                                l6507 0260                                  l6427 1FA8  
                                l7307 0C14                                  l7411 0F86  
                                l5901 1975                                  l6349 0DBE  
                                l6269 0D03                                  l7245 1437  
                                l5709 1E23                                  l5717 1E5A  
                                l7149 1673                                  l7157 168D  
                                l6197 17DB                                  l6701 0464  
                                l6613 0393                                  l6533 02E0  
                                l6437 1FD0                                  l6429 1FB3  
                                l7093 1192                                  l7085 117C  
                                l7069 112D                                  l5911 197B  
                                l6287 0D31                                  l6279 0D06  
                                l7263 145E                                  l7239 1422  
                                l5743 1BB8                                  l5735 1BAD  
                                l6711 0483                                  l6703 0452  
                                l6615 0381                                  l6519 02BC  
                                l6455 012B                                  l6439 1FD9  
                                l7423 0FEB                                  l6289 0D37  
                                l7281 1485                                  l7257 1455  
                                l5761 1BD7                                  l5753 1BC5  
                                l5921 1B92                                  l6377 19B4  
                                l5841 137F                                  l5809 12C2  
                                l6801 0546                                  l6721 0490  
                                l6713 046C                                  l6705 046A  
                                l6625 03AC                                  l6617 0399  
                                l6633 03BA                                  l6561 0323  
                                l6553 0310                                  l6457 012D  
                                l7097 119C                                  l7417 0FD3  
                                l7409 0F7E                                  l7337 0E46  
                                l5659 1AD2                                  l6299 0D3A  
                                l7275 147C                                  l5747 1BC0  
                                l5739 1BB3                                  l5843 13A4  
                                l6811 0560                                  l6715 0471  
                                l6643 03D3                                  l6627 039A  
                                l6491 01F8                                  l7187 1D7F  
                                l7427 0FFA                                  l7371 0EC7  
                                ?_isr 0070                                  l5669 1AD8  
      __size_of_PS_2_ENABLE_INTERRUPT 0015                                  l7269 1467  
                                l5757 1BCE                                  l5853 1CCB  
                                l6389 19A1                                  l6725 0499  
                                l6717 0486                                  l6661 03F5  
                                l6653 03E9                                  l6629 03B2  
                                l6581 034D                                  l6565 032C  
                                l6493 01FD                                  l6477 0199  
                                l7189 1DAB                                  l7365 0EBD  
                                l7287 149A                                  l5863 1CF9  
                                l5855 1CD9                                  l6911 06CF  
                                l6903 06B8                                  l6831 0587  
                                l6823 057B                                  l6751 04D0  
                                l6815 056E                                  l6639 03C9  
                                l6479 019C                                  l7199 1DB5  
                                l7391 0F48                                  l7367 0EBF  
                                l5929 19D6                                  l6761 04D1  
                                l6729 04A4                                  l6681 0435  
                                l6593 0366                                  l6585 0355  
                                l6577 0346                                  l6569 0335  
                                l6665 0415                                  l5867 1D04  
                                l5971 11FB                                  l5883 1C11  
                                l6923 06EF                                  l6915 06D8  
                                l6907 06C1                                  l6851 05E0  
                                l6747 04CA                                  l6763 04EC  
                                l7387 0F22                                  l7379 0EE6  
                                l5877 1BEB                                  l5797 12EF  
                                l6861 060B                                  l6773 0502  
                                l6757 04E3                                  l6749 04B8  
                                l6685 043D                                  l6677 042E  
                                l6589 035B                                  l5879 1BF9  
                                l5887 1C1C                                  l6951 0766  
                                l6927 06FD                                  l6919 06E6  
                                l6871 0613                                  l6783 051B  
                                l6775 04F0                                  l6759 04E6  
                                l5969 11F7                                  l6945 0757  
                                l6961 0793                                  l6785 051F  
                                l6777 0508                                  l6689 0446  
                                _BAUD 0220                                  l6947 075C  
                                l6955 076B                                  l6787 0509  
                                l6965 07A7                                  l6949 0761  
                                l6957 0778                                  l6877 0624  
                                l6789 0525                                  l6959 0780  
                                l6967 07AA                                  l6897 06A3  
                                l6889 0655                                  _ECHO 00E9  
                                STR_1 0B56                                  STR_2 0A8C  
                                STR_3 0B6C                                  STR_4 0B56  
                                STR_5 0A27                                  STR_6 0AD6  
                                STR_7 0B30                                  STR_8 0B05  
                                STR_9 0BB4                                  _LATA 010C  
                                _LATC 010E                                  _LALT 0167  
       __end_of_PS_2_ENABLE_INTERRUPT 19DE                                  _PIE1 0091  
                                i1l63 007C                                  i1l84 00DB  
                                i1l76 0085                                  u7253 101D  
                                i1l86 00D4                                  i1l78 00BA  
                                u7335 1B25                                  _RALT 01AC  
                                i1l89 00DC                                  u8305 1A8D  
                                u7355 1AF8                                  u7515 1376  
                                u8315 1A94                                  u7285 1ABE  
                                u7615 1BEE                                  u7545 1CCE  
                                u8505 01DA                                  u8425 1FED  
                                u7635 1C07                                  u8355 1FAD  
                                u7565 1CDA                                  u7485 1C87  
                                u7645 1C12                                  u7805 152E  
                                u8525 023B                                  u7575 1CEE  
                                u7735 1EF5                                  u8375 1FC5  
                                u7585 1CFA                                  u7745 1F18  
                                u7825 1547                                  u7905 1D20  
                                u8545 029E                                  u7915 1D2C  
                                u8395 1FD3                                  u7765 122D  
                                u7925 1D42                                  u7845 1E75  
                                u8485 017B                                  u7935 1D4D  
                                u7855 1EAA                                  u7945 1D58  
                                u9715 1C3E                                  u7895 1D14  
                                u7975 16F6                                  u7985 174B  
                                u9905 119D                                  u7995 1768  
                                u9675 0725                                  u9755 107A  
                                u9915 11A4                                  u9835 113B  
                                u9685 0735                                  u9765 108D  
                                u9845 114E                                  u9935 15DA  
                                u9775 10B2                                  u9945 15F4  
                                u9785 10C6                                  u9865 117D  
                                u9955 1604                                  u9795 10D2  
                                u9875 1184                                  u9995 1D96  
                                _WPUA 020C                                  _WPUC 020E  
                          i1delayUS@i 0075                            i1delayUS@j 0079  
                        __CFG_WRT$OFF 0000                                  _main 0E08  
                  UARTstringWAIT@data 0034                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                 baudUSART@baudconfig 0025                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                                start 00E1                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0028             i1UART_send_break_timed@US 007A  
           WriteFlash_Sequential@temp 00E3                      Reverse_Byte@temp 0027  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1ADA  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                     __end_of_InitApp 0800                       __end_of_SetBaud 1800  
                          _Clock_TRIS 18E1                         ??_Init_System 0054  
              __size_of_READ_PS_2_PIN 0012                                 ??_isr 0021  
                 _Right_Shift_Key_old 016B                        _Init_PS_2_Send 13AC  
                   ??i1_READ_PS_2_PIN 0070       UARTchar@NinethBit_override_data 002E  
   i1UARTchar@NinethBit_override_data 0079                 ??_INIT_PS_2_INTERRUPT 0025  
           _Decode_Scan_Code_Function 1948                           ReadBaud@row 0037  
     WriteFlash_Sequential@amountTemp 00E2                         ??_ReadVoltage 0060  
                          _CloseUSART 190E                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                       __end_of___fldiv 10F8  
                               STR_10 0B59                                 STR_11 0B45  
                               STR_12 0B30                                 STR_20 0B91  
                               STR_13 0B05                                 STR_21 0A11  
                               STR_30 0B56                                 STR_22 0B56  
                               STR_14 0BB4                                 STR_15 0B56  
                               STR_31 0B7F                                 STR_23 0AA6  
                               STR_24 0B1B                                 STR_16 0B1B  
                               STR_40 0A6F                                 STR_32 09FB  
                               STR_33 0B56                                 STR_25 0AEE  
                               STR_17 0AEE                         __CFG_WDTE$OFF 0000  
                               STR_26 0ABE                                 STR_18 0ABE  
                               STR_34 0A4E                                 STR_27 0BA3  
                               STR_35 0AEE                                 STR_19 0BA3  
                               STR_28 0B91                                 STR_36 0ABE  
                               STR_37 0BA3                                 STR_29 0A11  
                               STR_38 0B91                                 STR_39 0A11  
                     __end_of___flmul 11CA                      __end_of_ISNUMBER 192A  
                     __end_of___lldiv 1D0D                                 u10165 0C00  
                               u10185 0C10                                 _CKPPS 0E25  
                     __end_of___llmod 1C25                                 _T2CON 001C  
                               _IOCAF 0393                                 _IOCAN 0392  
                               _IOCAP 0391                                 i1l603 1989  
                               i1l275 1B45                                 i1l283 1A56  
                               i1l277 1B5E                                 i1l285 1A5C  
                               i1l286 1A73                                 i1l396 1DE0  
                               i1l397 1DE3        __size_of_UART_send_break_timed 0027  
                               _RCREG 0199                                 _RCSTA 019D  
                               _SPBRG 019B         __end_of_UART_send_break_timed 1A49  
                _PS_2_Read_Data_First 01A0                                 _PORTA 000C  
                _PS_2_Read_Data_Forth 01A2                          InitUART@Baud 0033  
                               _RXPPS 0E24                                 _TXREG 019A  
                 _ConfigureOscillator 1959                                 _Alarm 00E8  
                _PS_2_Read_Data_Third 01A6                       __end_of_delayUS 1037  
                    _InternalADC_Read 1C25                           i1delayUS@US 0070  
                 ___lmul@multiplicand 0029      __size_ofi1_UART_send_break_timed 0025  
                      __CFG_FCMEN$OFF 0000            __end_of_Keyboard_Connected 1DB7  
                        InitUART@temp 0044                 _WriteFlash_Sequential 12BA  
               ReadFlash_2Byte@column 0027                      __end_of_UARTchar 1E6D  
                          SetBaud@buf 0120                       __end_of_dpowers 09FB  
                  __size_of_PS_2_INIT 000C                                 main@i 00E7  
                               isr@rx 0024                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080               InternalADC_Read@channel 0033  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 1593  
                ?_ConfigureOscillator 0070        __end_of_Decode_Scan_Code_Shift 19C9  
                       _ScanCodeSHIFT 08F5                    __size_ofi1_delayUS 0033  
                     __initialization 00E3                __end_of_Init_PS_2_Send 149F  
                  __size_of_Data_TRIS 000B                          __end_of_main 1000  
                    __end_of_InitUART 12BA                            _Read_Timer 0224  
                    ??_UARTstringWAIT 0036                           isr@Rx_fault 0023  
                    __end_of_ReadBaud 1F2F            __end_of_DisableInternalADC 18C5  
                    __end_of_ScanCode 08F5                        __CFG_LPBOR$OFF 0000  
                    __end_of_Send_PS2 0E08                                ??_main 0065  
        __end_of_ScanCodeFunctionNoE0 0884                        __CFG_PLLEN$OFF 0000  
                 __end_of_Init_System 169B                          ReadBaud@temp 0043  
                    i1CheckSum_byte@i 0077         Decode_Scan_Code_Function@Code 0025  
                 __end_of_ReadVoltage 0C69                 ReadFlash_4Byte@column 002C  
                              _ADCON0 009D                                _ADCON1 009E  
                              _ADCON2 009F                   __size_ofi1_UARTchar 0058  
                    ___llmod@dividend 0037                                _ADRESH 009C  
                              _ADRESL 009B                      __end_of___flpack 2000  
                       _READ_PS_2_PIN 196B                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l5035 1B67  
                              i1l5051 1A69                                i1l5059 1A71  
                              i1l5069 1A77                                i1l5341 1DC0  
                              i1l5343 1DCA                                i1l5351 1DFC  
                              i1l5409 198E                                i1l5441 0048  
                              i1l5433 0030                                i1l5347 1DE6  
                              i1l5357 1E09                                i1l5349 1DF3  
                              i1l5429 002A                                i1l5471 0095  
                              i1l5455 0072                                i1l5481 00B7  
                              i1l5449 0060                                i1l5459 007A  
                              i1l5493 00D6                                i1l5399 1987  
                              i1l5495 00D8                                i1l5479 00AB  
                              _INTCON 000B                                _FVRCON 0117  
                              _PARITY 00EA                                _PMADRH 0192  
                              _PMADRL 0191                      __end_of___lwtofl 0BDD  
                              _PMDATH 0194                                _PMDATL 0193  
                              _PMCON1 0195                                _PMCON2 0196  
                  __size_of_ReadUSART 000A                                _OSCCON 0099  
                              u636_23 1B57                                u639_25 1A5D  
                              u692_25 004F                                u694_25 0062  
                              u686_25 001A                                _SPBRGH 019C  
                              u689_25 0037                                _TX1STA 019E  
                              _UNLOCK 18F7                       _No_Keyboard_old 016E  
               _PS_2_Read_Data_Second 01A4                             ??_InitApp 0025  
               ??_ConfigureOscillator 0025                                _Delete 0166  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 0059  
                         ?_BlockErase 0025                         InitUART@spbrg 0040  
                         SetBaud@Baud 0054                    __size_of_OpenUSART 003F  
                     ?_Init_PS_2_Send 0070                                ___flge 1F2F  
                   ?_Decode_Scan_Code 0070                                ___lmul 1A79  
                           ??___fldiv 003C                        __CFG_STVREN$ON 0000  
                           ??___flmul 0050                             ??___lldiv 002D  
                         ?_Clock_TRIS 0070                             ??___llmod 003B  
                         SetBaud@temp 015A                     __end_of_PS_2_INIT 190E  
                  ??_Decode_Scan_Code 0025                          ?i1_ReadUSART 0070  
                           ??_delayUS 0029  __size_of_Decode_Scan_Code_FunctionE0 0013  
                         ?_CloseUSART 0070                ?_WriteFlash_Sequential 002F  
                   __end_ofi1_delayUS 1B70                       SetBaud@Baudtemp 0152  
              __size_of_CheckSum_byte 0031                     ??i1_CheckSum_byte 0073  
                      ?_READ_PS_2_PIN 0070                     __end_of_Data_TRIS 18F7  
                           ??_sprintf 0045               i1READ_PS_2_PIN@DATA_CLK 0070  
                          ___flge@ff1 0025                            ___flge@ff2 0029  
                        ?_PS_2_Update 0070                       _ReadFlash_2Byte 1B0B  
                     _ReadFlash_4Byte 1C69                            ___fldiv@f1 0038  
                          ___fldiv@f2 0034                            ___fldiv@f3 0041  
             __end_of__initialization 0118                    __size_of_WriteBaud 005E  
                          ___flmul@f1 0048                            ___flmul@f2 004C  
                      PS_2_Update@buf 02A0               ?_PS_2_DISABLE_INTERRUPT 0070  
                           ?_ISNUMBER 0070                           _No_Keyboard 00EB  
                  __size_of_baudUSART 0009                        __pcstackCOMMON 0070  
                        __pidataBANK1 0003                          __pidataBANK2 1001  
                        __pidataBANK4 192A                             ?_UARTchar 002D  
                  InitUART@baudconfig 0042                           _Init_System 1593  
                   __end_of_ReadUSART 18E1                            ___lwtofl@c 002F  
                         _ReadVoltage 0BDD                       ReadVoltage@temp 00A4  
                        WriteBaud@row 0036               i1_UART_send_break_timed 19FD  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 0033  
                       ReadUSART@data 0026                           _SinLEDtimer 0236  
  __size_of_Decode_Scan_Code_Function 0011                     __end_of_OpenUSART 1BE2  
                 __size_of_BlockErase 0031                       WriteBaud@Parity 003C  
                   Send_PS2@oddparity 0033                            __pbssBANK0 0066  
                          __pbssBANK1 00E8                            __pbssBANK2 015F  
                          __pbssBANK3 01A0                            __pbssBANK4 022E  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 0033  
                           ?_ReadBaud 0037        __end_of_PS_2_DISABLE_INTERRUPT 19FD  
                  ReadVoltage@voltage 00A0                               ?_UNLOCK 0070  
                     i1_READ_PS_2_PIN 197D                   __size_of_CloseUSART 000E  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0025  
                _ScanCodeFunctionNoE0 0800              __end_of_InternalADC_Read 1C69  
                  _ScanCodeFunctionE0 0966                         _CheckSum_byte 1AA9  
                          __pmaintext 0E08                          ??i1_UARTchar 007A  
                         _ParityTyped 01AB                         BlockErase@row 0025  
                             ?___flge 0025                               ?___lmul 0025  
                 i1CheckSum_byte@This 0070                         _Caps_Lock_Key 0164  
                       ?_Reverse_Byte 0070                            __pintentry 0004  
                          ??_UARTchar 002F                            _blinkdelay 016C  
                           ?___flpack 0025                        ___lmul@product 002D  
               i1CheckSum_byte@Parity 0076                             ?___lwtofl 002F  
                   __end_of_WriteBaud 1ECB                       ??_READ_PS_2_PIN 0025  
                   __end_of_baudUSART 18D7               __end_of_ReadFlash_2Byte 1B3D  
             __end_of_ReadFlash_4Byte 1CBA                               _OSCSTAT 009A  
                 Clock_TRIS@direction 0025                               _PPSLOCK 0E0F  
                  __end_ofi1_UARTchar 1E0F                            ??_InitUART 0038  
                          ??_ReadBaud 003B                 READ_PS_2_PIN@DATA_CLK 0025  
               _PS_2_ENABLE_INTERRUPT 19C9                       __size_of_UNLOCK 000B  
                             _InitApp 07DC                            ??_Send_PS2 002F  
                  _Keyboard_Connected 1D62                               _SetBaud 169B  
                      InitUART@config 0043                        ?_CheckSum_byte 0025  
         __end_of_INIT_PS_2_INTERRUPT 1948                        InitUART@parity 0037  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0025  
                             _Version 022A                       __size_of___flge 0066  
                             ___fldiv 1037                       __size_of___lmul 0030  
                             ___flmul 10F8                   ?_Keyboard_Connected 0070  
                             ___lldiv 1CBA                               ___llmod 1BE2  
                          ??___flpack 002B                               _delayUS 1002  
           ??i1_UART_send_break_timed 007C                               __ptext1 1F2F  
                             __ptext2 0BDD                               __ptext3 0BC5  
                             __ptext4 10F8                               __ptext5 1037  
                             __ptext6 1F95                               __ptext7 1C25  
                             __ptext8 18BE                               __ptext9 1902  
                          ??___lwtofl 0033                  __size_ofi1_ReadUSART 0009  
                             _dpowers 09D3                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0074                          __size_of_isr 00DD  
         WriteFlash_Sequential@amount 0032           WriteFlash_Sequential@buffer 0031  
               _UART_send_break_timed 1A22                    _DisableInternalADC 18BE  
         WriteFlash_Sequential@spaces 00E5               __end_ofi1_READ_PS_2_PIN 1990  
                ??_Keyboard_Connected 0061                               _sprintf 149F  
                             clrloop0 18B9                     _Caps_Lock_Key_old 0165  
                end_of_initialization 0118                       i1ReadUSART@data 0071  
                             init_ram 18B2                   ?_DisableInternalADC 0070  
                             initloop 18B3                      UARTchar@override 002D  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 06C0                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 022E  
                     i1_CheckSum_byte 1A49               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0230                             _PS_2_INIT 1902  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 006A  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1B0B           __end_of_ConfigureOscillator 196B  
                           i1_delayUS 1B3D                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 18EC                           ___flmul@exp 0055  
                           _BaudTyped 0066                             _Data_TRIS 18EC  
                     PS_2_Update@temp 02E0                             _CapsCount 01A8  
                           _Caps_Lock 01A9              _PS_2_Read_Data_ThirdTEMP 0234  
                     ??_CheckSum_byte 0028                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 1902  
                  __end_of_CloseUSART 191C         ??_Decode_Scan_Code_FunctionE0 0025  
                   __size_of_ISNUMBER 000E                        __end_of___flge 1F95  
               CheckSum_byte@Odd_Even 0027                          ?_Init_System 0070  
                      __end_of___lmul 1AA9                     __size_of_UARTchar 005E  
                        ?_ReadVoltage 005C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0035           INIT_PS_2_INTERRUPT@DATA_CLK 0025  
              ?_UART_send_break_timed 002F                   start_initialization 00E3  
                           _ReadUSART 18D7               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0029                           __end_of_isr 00E1  
                       WriteBaud@Baud 0038                  __end_of_Reverse_Byte 1D62  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0025                         WriteBaud@temp 0045  
                           _OpenUSART 1BA3                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0025                       ___llmod@divisor 0033  
                   __size_of_InitUART 00F0                       ___llmod@counter 003C  
                   __size_of_ReadBaud 0064                             _Shift_Key 01AE  
             __end_ofi1_CheckSum_byte 1A79                     ?_InternalADC_Read 002F  
                   __size_of_Send_PS2 019F                              ??___flge 002D  
                            ??___lmul 002D             _PS_2_Read_Data_SecondTEMP 0232  
                  ??_InternalADC_Read 0031                           __pdataBANK1 00EB  
                         __pdataBANK2 016E                           __pdataBANK4 0220  
                   __size_of___flpack 006B                            ?_ReadUSART 0070  
                           ___latbits 0002                     __size_of___lwtofl 0018  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                       __pcstackBANK2 0120                         __pcstackBANK3 01AF  
                       __pcstackBANK5 02A0                             _WriteBaud 1E6D  
                 __end_of__stringdata 0BC5                    i1UARTchar@override 0078  
                  ReadFlash_2Byte@row 0025                             _baudUSART 18CE  
                  ReadFlash_4Byte@row 002A                            ?_OpenUSART 0025  
                         sprintf@_val 004E                           sprintf@flag 004B  
                         sprintf@prec 004C                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0966       Decode_Scan_Code_FunctionE0@Code 0025  
                            ?_SetBaud 0054                        ReadBaud@column 0039  
                            ?___fldiv 0034                              ?___flmul 0048  
                            ?___lldiv 0025                              ?___llmod 0033  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 00A0  
       WriteFlash_Sequential@TempBufL 00C0                              ?_delayUS 0025  
              WriteFlash_Sequential@i 00E6            Decode_Scan_Code_Shift@Code 0025  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0026  
                            _BAUDMODE 0163                      _Decode_Scan_Code 1990  
                          ?_WriteBaud 0036                 __end_of_READ_PS_2_PIN 197D  
                            ?_sprintf 003D                       _PS_2_Update$824 02DC  
                     _PS_2_Update$825 02DD                       _PS_2_Update$826 02DE  
                     _PS_2_Update$827 02DF                            ?_baudUSART 0070  
                         ??i1_delayUS 0074                             delayUS@US 0025  
     __size_of_Decode_Scan_Code_Shift 0013            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0025            WriteFlash_Sequential@tempH 00E0  
          WriteFlash_Sequential@tempL 00E1                             clear_ram0 18B8  
                            _PIE1bits 0091                              _ISNUMBER 191C  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            WriteFlash_Sequential@row 002F                              _UARTchar 1E0F  
                       ??i1_ReadUSART 0070                              _LControl 0168  
        __size_of_INIT_PS_2_INTERRUPT 0010                           __stringdata 09FB  
                __size_of_Init_System 0108        __size_of_WriteFlash_Sequential 00F2  
       __end_of_WriteFlash_Sequential 13AC                 __size_of_Reverse_Byte 0055  
                      _UARTstringWAIT 1B70                           ??_ReadUSART 0025  
                __size_of_ReadVoltage 008C                              _RControl 016A  
            ??_PS_2_DISABLE_INTERRUPT 0025               ??_PS_2_ENABLE_INTERRUPT 0025  
                   ___lmul@multiplier 0025           __size_of_Keyboard_Connected 0055  
                            SetBaud@i 015E                         ??_PS_2_Update 01AF  
                            _InitUART 11CA                              _ReadBaud 1ECB  
                         ??_OpenUSART 0027                              _ScanCode 0884  
                     OpenUSART@config 0027     __end_of_Decode_Scan_Code_Function 1959  
                            _Send_PS2 0C69                      __size_of_InitApp 0024  
                    __size_of_SetBaud 0165              ?i1_UART_send_break_timed 007A  
                        _Reverse_Byte 1D0D                      __size_of___fldiv 00C1  
                    __size_of___flmul 00D2                _Decode_Scan_Code_Shift 19B6  
                    __size_of___lldiv 0053                      __size_of___llmod 0043  
                            ___flpack 1F95                         SetBaud@Parity 0058  
             ??_UART_send_break_timed 0031                      __size_of_delayUS 0035  
         __size_of_DisableInternalADC 0007                __end_of_UARTstringWAIT 1BA3  
                            ___lwtofl 0BC5                       Send_PS2@command 0034  
                 __end_ofi1_ReadUSART 18CE                           ??_WriteBaud 003D  
                     Send_PS2@timeout 0036                         ISNUMBER@ascii 0025  
                            __ptext10 1938                              __ptext11 1D62  
                            __ptext20 1D0D                              __ptext12 011C  
                            __ptext21 191C                              __ptext13 1A79  
                            __ptext30 1E0F                              __ptext22 19B6  
                            __ptext14 1A22                              __ptext31 1ECB  
                            __ptext23 19A3                              __ptext15 169B  
                            __ptext40 13AC                              __ptext32 1C69  
                            __ptext24 1948                              __ptext16 1E6D  
                            __ptext41 0C69                              __ptext33 1B0B  
                            __ptext25 1990                              __ptext17 12BA  
                            __ptext50 1959                              __ptext42 1002  
                            __ptext34 11CA                              __ptext26 1593  
                            __ptext18 1ADA                              __ptext43 196B  
                            __ptext35 18CE                              __ptext27 149F  
                            __ptext19 18F7                              __ptext52 1DB7  
                            __ptext44 19C9                              __ptext36 1CBA  
                            __ptext28 1BE2                              __ptext53 1A49  
                            __ptext45 18EC                              __ptext37 18D7  
                            __ptext29 1B70                              __ptext54 19FD  
                            __ptext46 18E1                              __ptext38 1BA3  
                            __ptext55 1B3D                              __ptext47 1AA9  
                            __ptext39 190E                              __ptext56 18C5  
                            __ptext48 19DE                              __ptext57 197D  
                            __ptext49 07DC         PS_2_ENABLE_INTERRUPT@DATA_CLK 0026  
                         ??_baudUSART 0025                      __size_of_sprintf 00F4  
                 Keyboard_Connected@i 0061                         __size_of_main 01F8  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
                            delayUS@i 002A                              delayUS@j 002E  
                        _pwrLEDtoggle 0238          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1ADA                   __end_of_PS_2_Update 07DC  
                          _RC1STAbits 019D                        CheckSum_byte@i 002C  
                      _Left_Shift_Key 01AA               __size_of_Init_PS_2_Send 00F3  
               ___flmul@f3_as_product 0056                       ?_UARTstringWAIT 0034  
                 CheckSum_byte@Parity 002B                            _INTCONbits 000B  
           __size_of_InternalADC_Read 0044                        OpenUSART@spbrg 0025  
                        UARTchar@data 0033                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 001F                              intlevel1 0000  
                           sprintf@ap 0052                             sprintf@sp 003D  
                    ___lldiv@dividend 0029   __end_of_Decode_Scan_Code_FunctionE0 19B6  
         _Decode_Scan_Code_FunctionE0 19A3                     __CFG_CLKOUTEN$OFF 0000  
     __end_ofi1_UART_send_break_timed 1A22                        _BatteryVoltage 015F  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 19A3  
                          i1_UARTchar 1DB7                       _Right_Shift_Key 01AD  
                         i1_ReadUSART 18C5                              sprintf@c 0053  
                            sprintf@f 003F                      ___lldiv@quotient 002E  
                Decode_Scan_Code@Code 0025                     Init_System@Parity 00E0  
                  _Left_Shift_Key_old 0169                            _TX1STAbits 019E  
                   CheckSum_byte@This 0025                        i1UARTchar@data 0020  
                         _PS_2_Update 011C                   _INIT_PS_2_INTERRUPT 1938  
         ??_Decode_Scan_Code_Function 0025                       Init_System@Baud 00E1  
                     Init_System@temp 00DC                        Init_System@buf 00A0  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
