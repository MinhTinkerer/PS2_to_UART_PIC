

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jan 26 10:29:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  008C                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011C                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0197                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  0199                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019D                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019E                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  019F                     	;# 
   173  020C                     	;# 
   174  020E                     	;# 
   175  0211                     	;# 
   176  0211                     	;# 
   177  0212                     	;# 
   178  0212                     	;# 
   179  0213                     	;# 
   180  0213                     	;# 
   181  0214                     	;# 
   182  0214                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0215                     	;# 
   187  0216                     	;# 
   188  0216                     	;# 
   189  0217                     	;# 
   190  0217                     	;# 
   191  028C                     	;# 
   192  028E                     	;# 
   193  0291                     	;# 
   194  0291                     	;# 
   195  0292                     	;# 
   196  0293                     	;# 
   197  0293                     	;# 
   198  0298                     	;# 
   199  0298                     	;# 
   200  0299                     	;# 
   201  029A                     	;# 
   202  029A                     	;# 
   203  029E                     	;# 
   204  030C                     	;# 
   205  030E                     	;# 
   206  038C                     	;# 
   207  038E                     	;# 
   208  0391                     	;# 
   209  0392                     	;# 
   210  0393                     	;# 
   211  0397                     	;# 
   212  0398                     	;# 
   213  0399                     	;# 
   214  0415                     	;# 
   215  0416                     	;# 
   216  0417                     	;# 
   217  041C                     	;# 
   218  041D                     	;# 
   219  041E                     	;# 
   220  0511                     	;# 
   221  0515                     	;# 
   222  0617                     	;# 
   223  0618                     	;# 
   224  0619                     	;# 
   225  0619                     	;# 
   226  061A                     	;# 
   227  061B                     	;# 
   228  061C                     	;# 
   229  061C                     	;# 
   230  0691                     	;# 
   231  0692                     	;# 
   232  0693                     	;# 
   233  0694                     	;# 
   234  0695                     	;# 
   235  0696                     	;# 
   236  0697                     	;# 
   237  0698                     	;# 
   238  0699                     	;# 
   239  069A                     	;# 
   240  069B                     	;# 
   241  069C                     	;# 
   242  069D                     	;# 
   243  069E                     	;# 
   244  069F                     	;# 
   245  0E0F                     	;# 
   246  0E10                     	;# 
   247  0E11                     	;# 
   248  0E12                     	;# 
   249  0E13                     	;# 
   250  0E14                     	;# 
   251  0E15                     	;# 
   252  0E17                     	;# 
   253  0E20                     	;# 
   254  0E21                     	;# 
   255  0E22                     	;# 
   256  0E24                     	;# 
   257  0E25                     	;# 
   258  0E28                     	;# 
   259  0E29                     	;# 
   260  0E2A                     	;# 
   261  0E2B                     	;# 
   262  0E90                     	;# 
   263  0E91                     	;# 
   264  0E92                     	;# 
   265  0E94                     	;# 
   266  0E95                     	;# 
   267  0EA0                     	;# 
   268  0EA1                     	;# 
   269  0EA2                     	;# 
   270  0EA3                     	;# 
   271  0EA4                     	;# 
   272  0EA5                     	;# 
   273  0F0F                     	;# 
   274  0F10                     	;# 
   275  0F11                     	;# 
   276  0F12                     	;# 
   277  0F13                     	;# 
   278  0F14                     	;# 
   279  0F15                     	;# 
   280  0F16                     	;# 
   281  0F17                     	;# 
   282  0F18                     	;# 
   283  0F19                     	;# 
   284  0F1A                     	;# 
   285  0F1B                     	;# 
   286  0F1C                     	;# 
   287  0F1D                     	;# 
   288  0F1E                     	;# 
   289  0F1F                     	;# 
   290  0F20                     	;# 
   291  0F21                     	;# 
   292  0F22                     	;# 
   293  0F23                     	;# 
   294  0F24                     	;# 
   295  0F25                     	;# 
   296  0F26                     	;# 
   297  0F27                     	;# 
   298  0F28                     	;# 
   299  0F29                     	;# 
   300  0F2A                     	;# 
   301  0F2B                     	;# 
   302  0F2C                     	;# 
   303  0F2D                     	;# 
   304  0F9E                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000E                     	;# 
   330  0011                     	;# 
   331  0012                     	;# 
   332  0013                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  008C                     	;# 
   343  008E                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0095                     	;# 
   348  0096                     	;# 
   349  0097                     	;# 
   350  0098                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  009F                     	;# 
   359  010C                     	;# 
   360  010E                     	;# 
   361  0111                     	;# 
   362  0112                     	;# 
   363  0113                     	;# 
   364  0114                     	;# 
   365  0115                     	;# 
   366  0116                     	;# 
   367  0117                     	;# 
   368  0118                     	;# 
   369  0119                     	;# 
   370  011C                     	;# 
   371  018C                     	;# 
   372  018E                     	;# 
   373  0191                     	;# 
   374  0191                     	;# 
   375  0192                     	;# 
   376  0193                     	;# 
   377  0193                     	;# 
   378  0194                     	;# 
   379  0195                     	;# 
   380  0196                     	;# 
   381  0197                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  0199                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019A                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019C                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019D                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019E                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  0211                     	;# 
   410  0211                     	;# 
   411  0212                     	;# 
   412  0212                     	;# 
   413  0213                     	;# 
   414  0213                     	;# 
   415  0214                     	;# 
   416  0214                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0216                     	;# 
   422  0216                     	;# 
   423  0217                     	;# 
   424  0217                     	;# 
   425  028C                     	;# 
   426  028E                     	;# 
   427  0291                     	;# 
   428  0291                     	;# 
   429  0292                     	;# 
   430  0293                     	;# 
   431  0293                     	;# 
   432  0298                     	;# 
   433  0298                     	;# 
   434  0299                     	;# 
   435  029A                     	;# 
   436  029A                     	;# 
   437  029E                     	;# 
   438  030C                     	;# 
   439  030E                     	;# 
   440  038C                     	;# 
   441  038E                     	;# 
   442  0391                     	;# 
   443  0392                     	;# 
   444  0393                     	;# 
   445  0397                     	;# 
   446  0398                     	;# 
   447  0399                     	;# 
   448  0415                     	;# 
   449  0416                     	;# 
   450  0417                     	;# 
   451  041C                     	;# 
   452  041D                     	;# 
   453  041E                     	;# 
   454  0511                     	;# 
   455  0515                     	;# 
   456  0617                     	;# 
   457  0618                     	;# 
   458  0619                     	;# 
   459  0619                     	;# 
   460  061A                     	;# 
   461  061B                     	;# 
   462  061C                     	;# 
   463  061C                     	;# 
   464  0691                     	;# 
   465  0692                     	;# 
   466  0693                     	;# 
   467  0694                     	;# 
   468  0695                     	;# 
   469  0696                     	;# 
   470  0697                     	;# 
   471  0698                     	;# 
   472  0699                     	;# 
   473  069A                     	;# 
   474  069B                     	;# 
   475  069C                     	;# 
   476  069D                     	;# 
   477  069E                     	;# 
   478  069F                     	;# 
   479  0E0F                     	;# 
   480  0E10                     	;# 
   481  0E11                     	;# 
   482  0E12                     	;# 
   483  0E13                     	;# 
   484  0E14                     	;# 
   485  0E15                     	;# 
   486  0E17                     	;# 
   487  0E20                     	;# 
   488  0E21                     	;# 
   489  0E22                     	;# 
   490  0E24                     	;# 
   491  0E25                     	;# 
   492  0E28                     	;# 
   493  0E29                     	;# 
   494  0E2A                     	;# 
   495  0E2B                     	;# 
   496  0E90                     	;# 
   497  0E91                     	;# 
   498  0E92                     	;# 
   499  0E94                     	;# 
   500  0E95                     	;# 
   501  0EA0                     	;# 
   502  0EA1                     	;# 
   503  0EA2                     	;# 
   504  0EA3                     	;# 
   505  0EA4                     	;# 
   506  0EA5                     	;# 
   507  0F0F                     	;# 
   508  0F10                     	;# 
   509  0F11                     	;# 
   510  0F12                     	;# 
   511  0F13                     	;# 
   512  0F14                     	;# 
   513  0F15                     	;# 
   514  0F16                     	;# 
   515  0F17                     	;# 
   516  0F18                     	;# 
   517  0F19                     	;# 
   518  0F1A                     	;# 
   519  0F1B                     	;# 
   520  0F1C                     	;# 
   521  0F1D                     	;# 
   522  0F1E                     	;# 
   523  0F1F                     	;# 
   524  0F20                     	;# 
   525  0F21                     	;# 
   526  0F22                     	;# 
   527  0F23                     	;# 
   528  0F24                     	;# 
   529  0F25                     	;# 
   530  0F26                     	;# 
   531  0F27                     	;# 
   532  0F28                     	;# 
   533  0F29                     	;# 
   534  0F2A                     	;# 
   535  0F2B                     	;# 
   536  0F2C                     	;# 
   537  0F2D                     	;# 
   538  0F9E                     	;# 
   539  0FE4                     	;# 
   540  0FE5                     	;# 
   541  0FE6                     	;# 
   542  0FE7                     	;# 
   543  0FE8                     	;# 
   544  0FE9                     	;# 
   545  0FEA                     	;# 
   546  0FEB                     	;# 
   547  0FED                     	;# 
   548  0FEE                     	;# 
   549  0FEF                     	;# 
   550  0000                     	;# 
   551  0001                     	;# 
   552  0002                     	;# 
   553  0003                     	;# 
   554  0004                     	;# 
   555  0005                     	;# 
   556  0006                     	;# 
   557  0007                     	;# 
   558  0008                     	;# 
   559  0009                     	;# 
   560  000A                     	;# 
   561  000B                     	;# 
   562  000C                     	;# 
   563  000E                     	;# 
   564  0011                     	;# 
   565  0012                     	;# 
   566  0013                     	;# 
   567  0015                     	;# 
   568  0016                     	;# 
   569  0016                     	;# 
   570  0017                     	;# 
   571  0018                     	;# 
   572  0019                     	;# 
   573  001A                     	;# 
   574  001B                     	;# 
   575  001C                     	;# 
   576  008C                     	;# 
   577  008E                     	;# 
   578  0091                     	;# 
   579  0092                     	;# 
   580  0093                     	;# 
   581  0095                     	;# 
   582  0096                     	;# 
   583  0097                     	;# 
   584  0098                     	;# 
   585  0099                     	;# 
   586  009A                     	;# 
   587  009B                     	;# 
   588  009B                     	;# 
   589  009C                     	;# 
   590  009D                     	;# 
   591  009E                     	;# 
   592  009F                     	;# 
   593  010C                     	;# 
   594  010E                     	;# 
   595  0111                     	;# 
   596  0112                     	;# 
   597  0113                     	;# 
   598  0114                     	;# 
   599  0115                     	;# 
   600  0116                     	;# 
   601  0117                     	;# 
   602  0118                     	;# 
   603  0119                     	;# 
   604  011C                     	;# 
   605  018C                     	;# 
   606  018E                     	;# 
   607  0191                     	;# 
   608  0191                     	;# 
   609  0192                     	;# 
   610  0193                     	;# 
   611  0193                     	;# 
   612  0194                     	;# 
   613  0195                     	;# 
   614  0196                     	;# 
   615  0197                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  0199                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019C                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019D                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019E                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  019F                     	;# 
   641  020C                     	;# 
   642  020E                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  028C                     	;# 
   660  028E                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0293                     	;# 
   666  0298                     	;# 
   667  0298                     	;# 
   668  0299                     	;# 
   669  029A                     	;# 
   670  029A                     	;# 
   671  029E                     	;# 
   672  030C                     	;# 
   673  030E                     	;# 
   674  038C                     	;# 
   675  038E                     	;# 
   676  0391                     	;# 
   677  0392                     	;# 
   678  0393                     	;# 
   679  0397                     	;# 
   680  0398                     	;# 
   681  0399                     	;# 
   682  0415                     	;# 
   683  0416                     	;# 
   684  0417                     	;# 
   685  041C                     	;# 
   686  041D                     	;# 
   687  041E                     	;# 
   688  0511                     	;# 
   689  0515                     	;# 
   690  0617                     	;# 
   691  0618                     	;# 
   692  0619                     	;# 
   693  0619                     	;# 
   694  061A                     	;# 
   695  061B                     	;# 
   696  061C                     	;# 
   697  061C                     	;# 
   698  0691                     	;# 
   699  0692                     	;# 
   700  0693                     	;# 
   701  0694                     	;# 
   702  0695                     	;# 
   703  0696                     	;# 
   704  0697                     	;# 
   705  0698                     	;# 
   706  0699                     	;# 
   707  069A                     	;# 
   708  069B                     	;# 
   709  069C                     	;# 
   710  069D                     	;# 
   711  069E                     	;# 
   712  069F                     	;# 
   713  0E0F                     	;# 
   714  0E10                     	;# 
   715  0E11                     	;# 
   716  0E12                     	;# 
   717  0E13                     	;# 
   718  0E14                     	;# 
   719  0E15                     	;# 
   720  0E17                     	;# 
   721  0E20                     	;# 
   722  0E21                     	;# 
   723  0E22                     	;# 
   724  0E24                     	;# 
   725  0E25                     	;# 
   726  0E28                     	;# 
   727  0E29                     	;# 
   728  0E2A                     	;# 
   729  0E2B                     	;# 
   730  0E90                     	;# 
   731  0E91                     	;# 
   732  0E92                     	;# 
   733  0E94                     	;# 
   734  0E95                     	;# 
   735  0EA0                     	;# 
   736  0EA1                     	;# 
   737  0EA2                     	;# 
   738  0EA3                     	;# 
   739  0EA4                     	;# 
   740  0EA5                     	;# 
   741  0F0F                     	;# 
   742  0F10                     	;# 
   743  0F11                     	;# 
   744  0F12                     	;# 
   745  0F13                     	;# 
   746  0F14                     	;# 
   747  0F15                     	;# 
   748  0F16                     	;# 
   749  0F17                     	;# 
   750  0F18                     	;# 
   751  0F19                     	;# 
   752  0F1A                     	;# 
   753  0F1B                     	;# 
   754  0F1C                     	;# 
   755  0F1D                     	;# 
   756  0F1E                     	;# 
   757  0F1F                     	;# 
   758  0F20                     	;# 
   759  0F21                     	;# 
   760  0F22                     	;# 
   761  0F23                     	;# 
   762  0F24                     	;# 
   763  0F25                     	;# 
   764  0F26                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F9E                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000E                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  008C                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0095                     	;# 
   816  0096                     	;# 
   817  0097                     	;# 
   818  0098                     	;# 
   819  0099                     	;# 
   820  009A                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  009F                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  011C                     	;# 
   839  018C                     	;# 
   840  018E                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0197                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019A                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019D                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  019F                     	;# 
   875  020C                     	;# 
   876  020E                     	;# 
   877  0211                     	;# 
   878  0211                     	;# 
   879  0212                     	;# 
   880  0212                     	;# 
   881  0213                     	;# 
   882  0213                     	;# 
   883  0214                     	;# 
   884  0214                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  028C                     	;# 
   894  028E                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0293                     	;# 
   900  0298                     	;# 
   901  0298                     	;# 
   902  0299                     	;# 
   903  029A                     	;# 
   904  029A                     	;# 
   905  029E                     	;# 
   906  030C                     	;# 
   907  030E                     	;# 
   908  038C                     	;# 
   909  038E                     	;# 
   910  0391                     	;# 
   911  0392                     	;# 
   912  0393                     	;# 
   913  0397                     	;# 
   914  0398                     	;# 
   915  0399                     	;# 
   916  0415                     	;# 
   917  0416                     	;# 
   918  0417                     	;# 
   919  041C                     	;# 
   920  041D                     	;# 
   921  041E                     	;# 
   922  0511                     	;# 
   923  0515                     	;# 
   924  0617                     	;# 
   925  0618                     	;# 
   926  0619                     	;# 
   927  0619                     	;# 
   928  061A                     	;# 
   929  061B                     	;# 
   930  061C                     	;# 
   931  061C                     	;# 
   932  0691                     	;# 
   933  0692                     	;# 
   934  0693                     	;# 
   935  0694                     	;# 
   936  0695                     	;# 
   937  0696                     	;# 
   938  0697                     	;# 
   939  0698                     	;# 
   940  0699                     	;# 
   941  069A                     	;# 
   942  069B                     	;# 
   943  069C                     	;# 
   944  069D                     	;# 
   945  069E                     	;# 
   946  069F                     	;# 
   947  0E0F                     	;# 
   948  0E10                     	;# 
   949  0E11                     	;# 
   950  0E12                     	;# 
   951  0E13                     	;# 
   952  0E14                     	;# 
   953  0E15                     	;# 
   954  0E17                     	;# 
   955  0E20                     	;# 
   956  0E21                     	;# 
   957  0E22                     	;# 
   958  0E24                     	;# 
   959  0E25                     	;# 
   960  0E28                     	;# 
   961  0E29                     	;# 
   962  0E2A                     	;# 
   963  0E2B                     	;# 
   964  0E90                     	;# 
   965  0E91                     	;# 
   966  0E92                     	;# 
   967  0E94                     	;# 
   968  0E95                     	;# 
   969  0EA0                     	;# 
   970  0EA1                     	;# 
   971  0EA2                     	;# 
   972  0EA3                     	;# 
   973  0EA4                     	;# 
   974  0EA5                     	;# 
   975  0F0F                     	;# 
   976  0F10                     	;# 
   977  0F11                     	;# 
   978  0F12                     	;# 
   979  0F13                     	;# 
   980  0F14                     	;# 
   981  0F15                     	;# 
   982  0F16                     	;# 
   983  0F17                     	;# 
   984  0F18                     	;# 
   985  0F19                     	;# 
   986  0F1A                     	;# 
   987  0F1B                     	;# 
   988  0F1C                     	;# 
   989  0F1D                     	;# 
   990  0F1E                     	;# 
   991  0F1F                     	;# 
   992  0F20                     	;# 
   993  0F21                     	;# 
   994  0F22                     	;# 
   995  0F23                     	;# 
   996  0F24                     	;# 
   997  0F25                     	;# 
   998  0F26                     	;# 
   999  0F27                     	;# 
  1000  0F28                     	;# 
  1001  0F29                     	;# 
  1002  0F2A                     	;# 
  1003  0F2B                     	;# 
  1004  0F2C                     	;# 
  1005  0F2D                     	;# 
  1006  0F9E                     	;# 
  1007  0FE4                     	;# 
  1008  0FE5                     	;# 
  1009  0FE6                     	;# 
  1010  0FE7                     	;# 
  1011  0FE8                     	;# 
  1012  0FE9                     	;# 
  1013  0FEA                     	;# 
  1014  0FEB                     	;# 
  1015  0FED                     	;# 
  1016  0FEE                     	;# 
  1017  0FEF                     	;# 
  1018  0000                     	;# 
  1019  0001                     	;# 
  1020  0002                     	;# 
  1021  0003                     	;# 
  1022  0004                     	;# 
  1023  0005                     	;# 
  1024  0006                     	;# 
  1025  0007                     	;# 
  1026  0008                     	;# 
  1027  0009                     	;# 
  1028  000A                     	;# 
  1029  000B                     	;# 
  1030  000C                     	;# 
  1031  000E                     	;# 
  1032  0011                     	;# 
  1033  0012                     	;# 
  1034  0013                     	;# 
  1035  0015                     	;# 
  1036  0016                     	;# 
  1037  0016                     	;# 
  1038  0017                     	;# 
  1039  0018                     	;# 
  1040  0019                     	;# 
  1041  001A                     	;# 
  1042  001B                     	;# 
  1043  001C                     	;# 
  1044  008C                     	;# 
  1045  008E                     	;# 
  1046  0091                     	;# 
  1047  0092                     	;# 
  1048  0093                     	;# 
  1049  0095                     	;# 
  1050  0096                     	;# 
  1051  0097                     	;# 
  1052  0098                     	;# 
  1053  0099                     	;# 
  1054  009A                     	;# 
  1055  009B                     	;# 
  1056  009B                     	;# 
  1057  009C                     	;# 
  1058  009D                     	;# 
  1059  009E                     	;# 
  1060  009F                     	;# 
  1061  010C                     	;# 
  1062  010E                     	;# 
  1063  0111                     	;# 
  1064  0112                     	;# 
  1065  0113                     	;# 
  1066  0114                     	;# 
  1067  0115                     	;# 
  1068  0116                     	;# 
  1069  0117                     	;# 
  1070  0118                     	;# 
  1071  0119                     	;# 
  1072  011C                     	;# 
  1073  018C                     	;# 
  1074  018E                     	;# 
  1075  0191                     	;# 
  1076  0191                     	;# 
  1077  0192                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0197                     	;# 
  1084  0199                     	;# 
  1085  0199                     	;# 
  1086  0199                     	;# 
  1087  019A                     	;# 
  1088  019A                     	;# 
  1089  019A                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019C                     	;# 
  1098  019D                     	;# 
  1099  019D                     	;# 
  1100  019D                     	;# 
  1101  019E                     	;# 
  1102  019E                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  020C                     	;# 
  1110  020E                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  028C                     	;# 
  1128  028E                     	;# 
  1129  0291                     	;# 
  1130  0291                     	;# 
  1131  0292                     	;# 
  1132  0293                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  029A                     	;# 
  1139  029E                     	;# 
  1140  030C                     	;# 
  1141  030E                     	;# 
  1142  038C                     	;# 
  1143  038E                     	;# 
  1144  0391                     	;# 
  1145  0392                     	;# 
  1146  0393                     	;# 
  1147  0397                     	;# 
  1148  0398                     	;# 
  1149  0399                     	;# 
  1150  0415                     	;# 
  1151  0416                     	;# 
  1152  0417                     	;# 
  1153  041C                     	;# 
  1154  041D                     	;# 
  1155  041E                     	;# 
  1156  0511                     	;# 
  1157  0515                     	;# 
  1158  0617                     	;# 
  1159  0618                     	;# 
  1160  0619                     	;# 
  1161  0619                     	;# 
  1162  061A                     	;# 
  1163  061B                     	;# 
  1164  061C                     	;# 
  1165  061C                     	;# 
  1166  0691                     	;# 
  1167  0692                     	;# 
  1168  0693                     	;# 
  1169  0694                     	;# 
  1170  0695                     	;# 
  1171  0696                     	;# 
  1172  0697                     	;# 
  1173  0698                     	;# 
  1174  0699                     	;# 
  1175  069A                     	;# 
  1176  069B                     	;# 
  1177  069C                     	;# 
  1178  069D                     	;# 
  1179  069E                     	;# 
  1180  069F                     	;# 
  1181  0E0F                     	;# 
  1182  0E10                     	;# 
  1183  0E11                     	;# 
  1184  0E12                     	;# 
  1185  0E13                     	;# 
  1186  0E14                     	;# 
  1187  0E15                     	;# 
  1188  0E17                     	;# 
  1189  0E20                     	;# 
  1190  0E21                     	;# 
  1191  0E22                     	;# 
  1192  0E24                     	;# 
  1193  0E25                     	;# 
  1194  0E28                     	;# 
  1195  0E29                     	;# 
  1196  0E2A                     	;# 
  1197  0E2B                     	;# 
  1198  0E90                     	;# 
  1199  0E91                     	;# 
  1200  0E92                     	;# 
  1201  0E94                     	;# 
  1202  0E95                     	;# 
  1203  0EA0                     	;# 
  1204  0EA1                     	;# 
  1205  0EA2                     	;# 
  1206  0EA3                     	;# 
  1207  0EA4                     	;# 
  1208  0EA5                     	;# 
  1209  0F0F                     	;# 
  1210  0F10                     	;# 
  1211  0F11                     	;# 
  1212  0F12                     	;# 
  1213  0F13                     	;# 
  1214  0F14                     	;# 
  1215  0F15                     	;# 
  1216  0F16                     	;# 
  1217  0F17                     	;# 
  1218  0F18                     	;# 
  1219  0F19                     	;# 
  1220  0F1A                     	;# 
  1221  0F1B                     	;# 
  1222  0F1C                     	;# 
  1223  0F1D                     	;# 
  1224  0F1E                     	;# 
  1225  0F1F                     	;# 
  1226  0F20                     	;# 
  1227  0F21                     	;# 
  1228  0F22                     	;# 
  1229  0F23                     	;# 
  1230  0F24                     	;# 
  1231  0F25                     	;# 
  1232  0F26                     	;# 
  1233  0F27                     	;# 
  1234  0F28                     	;# 
  1235  0F29                     	;# 
  1236  0F2A                     	;# 
  1237  0F2B                     	;# 
  1238  0F2C                     	;# 
  1239  0F2D                     	;# 
  1240  0F9E                     	;# 
  1241  0FE4                     	;# 
  1242  0FE5                     	;# 
  1243  0FE6                     	;# 
  1244  0FE7                     	;# 
  1245  0FE8                     	;# 
  1246  0FE9                     	;# 
  1247  0FEA                     	;# 
  1248  0FEB                     	;# 
  1249  0FED                     	;# 
  1250  0FEE                     	;# 
  1251  0FEF                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0008                     	;# 
  1261  0009                     	;# 
  1262  000A                     	;# 
  1263  000B                     	;# 
  1264  000C                     	;# 
  1265  000E                     	;# 
  1266  0011                     	;# 
  1267  0012                     	;# 
  1268  0013                     	;# 
  1269  0015                     	;# 
  1270  0016                     	;# 
  1271  0016                     	;# 
  1272  0017                     	;# 
  1273  0018                     	;# 
  1274  0019                     	;# 
  1275  001A                     	;# 
  1276  001B                     	;# 
  1277  001C                     	;# 
  1278  008C                     	;# 
  1279  008E                     	;# 
  1280  0091                     	;# 
  1281  0092                     	;# 
  1282  0093                     	;# 
  1283  0095                     	;# 
  1284  0096                     	;# 
  1285  0097                     	;# 
  1286  0098                     	;# 
  1287  0099                     	;# 
  1288  009A                     	;# 
  1289  009B                     	;# 
  1290  009B                     	;# 
  1291  009C                     	;# 
  1292  009D                     	;# 
  1293  009E                     	;# 
  1294  009F                     	;# 
  1295  010C                     	;# 
  1296  010E                     	;# 
  1297  0111                     	;# 
  1298  0112                     	;# 
  1299  0113                     	;# 
  1300  0114                     	;# 
  1301  0115                     	;# 
  1302  0116                     	;# 
  1303  0117                     	;# 
  1304  0118                     	;# 
  1305  0119                     	;# 
  1306  011C                     	;# 
  1307  018C                     	;# 
  1308  018E                     	;# 
  1309  0191                     	;# 
  1310  0191                     	;# 
  1311  0192                     	;# 
  1312  0193                     	;# 
  1313  0193                     	;# 
  1314  0194                     	;# 
  1315  0195                     	;# 
  1316  0196                     	;# 
  1317  0197                     	;# 
  1318  0199                     	;# 
  1319  0199                     	;# 
  1320  0199                     	;# 
  1321  019A                     	;# 
  1322  019A                     	;# 
  1323  019A                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019D                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019E                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  019F                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  019F                     	;# 
  1343  020C                     	;# 
  1344  020E                     	;# 
  1345  0211                     	;# 
  1346  0211                     	;# 
  1347  0212                     	;# 
  1348  0212                     	;# 
  1349  0213                     	;# 
  1350  0213                     	;# 
  1351  0214                     	;# 
  1352  0214                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0216                     	;# 
  1358  0216                     	;# 
  1359  0217                     	;# 
  1360  0217                     	;# 
  1361  028C                     	;# 
  1362  028E                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  029A                     	;# 
  1373  029E                     	;# 
  1374  030C                     	;# 
  1375  030E                     	;# 
  1376  038C                     	;# 
  1377  038E                     	;# 
  1378  0391                     	;# 
  1379  0392                     	;# 
  1380  0393                     	;# 
  1381  0397                     	;# 
  1382  0398                     	;# 
  1383  0399                     	;# 
  1384  0415                     	;# 
  1385  0416                     	;# 
  1386  0417                     	;# 
  1387  041C                     	;# 
  1388  041D                     	;# 
  1389  041E                     	;# 
  1390  0511                     	;# 
  1391  0515                     	;# 
  1392  0617                     	;# 
  1393  0618                     	;# 
  1394  0619                     	;# 
  1395  0619                     	;# 
  1396  061A                     	;# 
  1397  061B                     	;# 
  1398  061C                     	;# 
  1399  061C                     	;# 
  1400  0691                     	;# 
  1401  0692                     	;# 
  1402  0693                     	;# 
  1403  0694                     	;# 
  1404  0695                     	;# 
  1405  0696                     	;# 
  1406  0697                     	;# 
  1407  0698                     	;# 
  1408  0699                     	;# 
  1409  069A                     	;# 
  1410  069B                     	;# 
  1411  069C                     	;# 
  1412  069D                     	;# 
  1413  069E                     	;# 
  1414  069F                     	;# 
  1415  0E0F                     	;# 
  1416  0E10                     	;# 
  1417  0E11                     	;# 
  1418  0E12                     	;# 
  1419  0E13                     	;# 
  1420  0E14                     	;# 
  1421  0E15                     	;# 
  1422  0E17                     	;# 
  1423  0E20                     	;# 
  1424  0E21                     	;# 
  1425  0E22                     	;# 
  1426  0E24                     	;# 
  1427  0E25                     	;# 
  1428  0E28                     	;# 
  1429  0E29                     	;# 
  1430  0E2A                     	;# 
  1431  0E2B                     	;# 
  1432  0E90                     	;# 
  1433  0E91                     	;# 
  1434  0E92                     	;# 
  1435  0E94                     	;# 
  1436  0E95                     	;# 
  1437  0EA0                     	;# 
  1438  0EA1                     	;# 
  1439  0EA2                     	;# 
  1440  0EA3                     	;# 
  1441  0EA4                     	;# 
  1442  0EA5                     	;# 
  1443  0F0F                     	;# 
  1444  0F10                     	;# 
  1445  0F11                     	;# 
  1446  0F12                     	;# 
  1447  0F13                     	;# 
  1448  0F14                     	;# 
  1449  0F15                     	;# 
  1450  0F16                     	;# 
  1451  0F17                     	;# 
  1452  0F18                     	;# 
  1453  0F19                     	;# 
  1454  0F1A                     	;# 
  1455  0F1B                     	;# 
  1456  0F1C                     	;# 
  1457  0F1D                     	;# 
  1458  0F1E                     	;# 
  1459  0F1F                     	;# 
  1460  0F20                     	;# 
  1461  0F21                     	;# 
  1462  0F22                     	;# 
  1463  0F23                     	;# 
  1464  0F24                     	;# 
  1465  0F25                     	;# 
  1466  0F26                     	;# 
  1467  0F27                     	;# 
  1468  0F28                     	;# 
  1469  0F29                     	;# 
  1470  0F2A                     	;# 
  1471  0F2B                     	;# 
  1472  0F2C                     	;# 
  1473  0F2D                     	;# 
  1474  0F9E                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000E                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0013                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008E                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0093                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0098                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  009F                     	;# 
  1529  010C                     	;# 
  1530  010E                     	;# 
  1531  0111                     	;# 
  1532  0112                     	;# 
  1533  0113                     	;# 
  1534  0114                     	;# 
  1535  0115                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  0118                     	;# 
  1539  0119                     	;# 
  1540  011C                     	;# 
  1541  018C                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020E                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0216                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0217                     	;# 
  1595  028C                     	;# 
  1596  028E                     	;# 
  1597  0291                     	;# 
  1598  0291                     	;# 
  1599  0292                     	;# 
  1600  0293                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  029A                     	;# 
  1607  029E                     	;# 
  1608  030C                     	;# 
  1609  030E                     	;# 
  1610  038C                     	;# 
  1611  038E                     	;# 
  1612  0391                     	;# 
  1613  0392                     	;# 
  1614  0393                     	;# 
  1615  0397                     	;# 
  1616  0398                     	;# 
  1617  0399                     	;# 
  1618  0415                     	;# 
  1619  0416                     	;# 
  1620  0417                     	;# 
  1621  041C                     	;# 
  1622  041D                     	;# 
  1623  041E                     	;# 
  1624  0511                     	;# 
  1625  0515                     	;# 
  1626  0617                     	;# 
  1627  0618                     	;# 
  1628  0619                     	;# 
  1629  0619                     	;# 
  1630  061A                     	;# 
  1631  061B                     	;# 
  1632  061C                     	;# 
  1633  061C                     	;# 
  1634  0691                     	;# 
  1635  0692                     	;# 
  1636  0693                     	;# 
  1637  0694                     	;# 
  1638  0695                     	;# 
  1639  0696                     	;# 
  1640  0697                     	;# 
  1641  0698                     	;# 
  1642  0699                     	;# 
  1643  069A                     	;# 
  1644  069B                     	;# 
  1645  069C                     	;# 
  1646  069D                     	;# 
  1647  069E                     	;# 
  1648  069F                     	;# 
  1649  0E0F                     	;# 
  1650  0E10                     	;# 
  1651  0E11                     	;# 
  1652  0E12                     	;# 
  1653  0E13                     	;# 
  1654  0E14                     	;# 
  1655  0E15                     	;# 
  1656  0E17                     	;# 
  1657  0E20                     	;# 
  1658  0E21                     	;# 
  1659  0E22                     	;# 
  1660  0E24                     	;# 
  1661  0E25                     	;# 
  1662  0E28                     	;# 
  1663  0E29                     	;# 
  1664  0E2A                     	;# 
  1665  0E2B                     	;# 
  1666  0E90                     	;# 
  1667  0E91                     	;# 
  1668  0E92                     	;# 
  1669  0E94                     	;# 
  1670  0E95                     	;# 
  1671  0EA0                     	;# 
  1672  0EA1                     	;# 
  1673  0EA2                     	;# 
  1674  0EA3                     	;# 
  1675  0EA4                     	;# 
  1676  0EA5                     	;# 
  1677  0F0F                     	;# 
  1678  0F10                     	;# 
  1679  0F11                     	;# 
  1680  0F12                     	;# 
  1681  0F13                     	;# 
  1682  0F14                     	;# 
  1683  0F15                     	;# 
  1684  0F16                     	;# 
  1685  0F17                     	;# 
  1686  0F18                     	;# 
  1687  0F19                     	;# 
  1688  0F1A                     	;# 
  1689  0F1B                     	;# 
  1690  0F1C                     	;# 
  1691  0F1D                     	;# 
  1692  0F1E                     	;# 
  1693  0F1F                     	;# 
  1694  0F20                     	;# 
  1695  0F21                     	;# 
  1696  0F22                     	;# 
  1697  0F23                     	;# 
  1698  0F24                     	;# 
  1699  0F25                     	;# 
  1700  0F26                     	;# 
  1701  0F27                     	;# 
  1702  0F28                     	;# 
  1703  0F29                     	;# 
  1704  0F2A                     	;# 
  1705  0F2B                     	;# 
  1706  0F2C                     	;# 
  1707  0F2D                     	;# 
  1708  0F9E                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000E                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0013                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008E                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0093                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0098                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  009F                     	;# 
  1763  010C                     	;# 
  1764  010E                     	;# 
  1765  0111                     	;# 
  1766  0112                     	;# 
  1767  0113                     	;# 
  1768  0114                     	;# 
  1769  0115                     	;# 
  1770  0116                     	;# 
  1771  0117                     	;# 
  1772  0118                     	;# 
  1773  0119                     	;# 
  1774  011C                     	;# 
  1775  018C                     	;# 
  1776  018E                     	;# 
  1777  0191                     	;# 
  1778  0191                     	;# 
  1779  0192                     	;# 
  1780  0193                     	;# 
  1781  0193                     	;# 
  1782  0194                     	;# 
  1783  0195                     	;# 
  1784  0196                     	;# 
  1785  0197                     	;# 
  1786  0199                     	;# 
  1787  0199                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019A                     	;# 
  1791  019A                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019D                     	;# 
  1802  019D                     	;# 
  1803  019E                     	;# 
  1804  019E                     	;# 
  1805  019E                     	;# 
  1806  019F                     	;# 
  1807  019F                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  019F                     	;# 
  1811  020C                     	;# 
  1812  020E                     	;# 
  1813  0211                     	;# 
  1814  0211                     	;# 
  1815  0212                     	;# 
  1816  0212                     	;# 
  1817  0213                     	;# 
  1818  0213                     	;# 
  1819  0214                     	;# 
  1820  0214                     	;# 
  1821  0215                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0215                     	;# 
  1825  0216                     	;# 
  1826  0216                     	;# 
  1827  0217                     	;# 
  1828  0217                     	;# 
  1829  028C                     	;# 
  1830  028E                     	;# 
  1831  0291                     	;# 
  1832  0291                     	;# 
  1833  0292                     	;# 
  1834  0293                     	;# 
  1835  0293                     	;# 
  1836  0298                     	;# 
  1837  0298                     	;# 
  1838  0299                     	;# 
  1839  029A                     	;# 
  1840  029A                     	;# 
  1841  029E                     	;# 
  1842  030C                     	;# 
  1843  030E                     	;# 
  1844  038C                     	;# 
  1845  038E                     	;# 
  1846  0391                     	;# 
  1847  0392                     	;# 
  1848  0393                     	;# 
  1849  0397                     	;# 
  1850  0398                     	;# 
  1851  0399                     	;# 
  1852  0415                     	;# 
  1853  0416                     	;# 
  1854  0417                     	;# 
  1855  041C                     	;# 
  1856  041D                     	;# 
  1857  041E                     	;# 
  1858  0511                     	;# 
  1859  0515                     	;# 
  1860  0617                     	;# 
  1861  0618                     	;# 
  1862  0619                     	;# 
  1863  0619                     	;# 
  1864  061A                     	;# 
  1865  061B                     	;# 
  1866  061C                     	;# 
  1867  061C                     	;# 
  1868  0691                     	;# 
  1869  0692                     	;# 
  1870  0693                     	;# 
  1871  0694                     	;# 
  1872  0695                     	;# 
  1873  0696                     	;# 
  1874  0697                     	;# 
  1875  0698                     	;# 
  1876  0699                     	;# 
  1877  069A                     	;# 
  1878  069B                     	;# 
  1879  069C                     	;# 
  1880  069D                     	;# 
  1881  069E                     	;# 
  1882  069F                     	;# 
  1883  0E0F                     	;# 
  1884  0E10                     	;# 
  1885  0E11                     	;# 
  1886  0E12                     	;# 
  1887  0E13                     	;# 
  1888  0E14                     	;# 
  1889  0E15                     	;# 
  1890  0E17                     	;# 
  1891  0E20                     	;# 
  1892  0E21                     	;# 
  1893  0E22                     	;# 
  1894  0E24                     	;# 
  1895  0E25                     	;# 
  1896  0E28                     	;# 
  1897  0E29                     	;# 
  1898  0E2A                     	;# 
  1899  0E2B                     	;# 
  1900  0E90                     	;# 
  1901  0E91                     	;# 
  1902  0E92                     	;# 
  1903  0E94                     	;# 
  1904  0E95                     	;# 
  1905  0EA0                     	;# 
  1906  0EA1                     	;# 
  1907  0EA2                     	;# 
  1908  0EA3                     	;# 
  1909  0EA4                     	;# 
  1910  0EA5                     	;# 
  1911  0F0F                     	;# 
  1912  0F10                     	;# 
  1913  0F11                     	;# 
  1914  0F12                     	;# 
  1915  0F13                     	;# 
  1916  0F14                     	;# 
  1917  0F15                     	;# 
  1918  0F16                     	;# 
  1919  0F17                     	;# 
  1920  0F18                     	;# 
  1921  0F19                     	;# 
  1922  0F1A                     	;# 
  1923  0F1B                     	;# 
  1924  0F1C                     	;# 
  1925  0F1D                     	;# 
  1926  0F1E                     	;# 
  1927  0F1F                     	;# 
  1928  0F20                     	;# 
  1929  0F21                     	;# 
  1930  0F22                     	;# 
  1931  0F23                     	;# 
  1932  0F24                     	;# 
  1933  0F25                     	;# 
  1934  0F26                     	;# 
  1935  0F27                     	;# 
  1936  0F28                     	;# 
  1937  0F29                     	;# 
  1938  0F2A                     	;# 
  1939  0F2B                     	;# 
  1940  0F2C                     	;# 
  1941  0F2D                     	;# 
  1942  0F9E                     	;# 
  1943  0FE4                     	;# 
  1944  0FE5                     	;# 
  1945  0FE6                     	;# 
  1946  0FE7                     	;# 
  1947  0FE8                     	;# 
  1948  0FE9                     	;# 
  1949  0FEA                     	;# 
  1950  0FEB                     	;# 
  1951  0FED                     	;# 
  1952  0FEE                     	;# 
  1953  0FEF                     	;# 
  1954  0000                     	;# 
  1955  0001                     	;# 
  1956  0002                     	;# 
  1957  0003                     	;# 
  1958  0004                     	;# 
  1959  0005                     	;# 
  1960  0006                     	;# 
  1961  0007                     	;# 
  1962  0008                     	;# 
  1963  0009                     	;# 
  1964  000A                     	;# 
  1965  000B                     	;# 
  1966  000C                     	;# 
  1967  000E                     	;# 
  1968  0011                     	;# 
  1969  0012                     	;# 
  1970  0013                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008E                     	;# 
  1982  0091                     	;# 
  1983  0092                     	;# 
  1984  0093                     	;# 
  1985  0095                     	;# 
  1986  0096                     	;# 
  1987  0097                     	;# 
  1988  0098                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  009F                     	;# 
  1997  010C                     	;# 
  1998  010E                     	;# 
  1999  0111                     	;# 
  2000  0112                     	;# 
  2001  0113                     	;# 
  2002  0114                     	;# 
  2003  0115                     	;# 
  2004  0116                     	;# 
  2005  0117                     	;# 
  2006  0118                     	;# 
  2007  0119                     	;# 
  2008  011C                     	;# 
  2009  018C                     	;# 
  2010  018E                     	;# 
  2011  0191                     	;# 
  2012  0191                     	;# 
  2013  0192                     	;# 
  2014  0193                     	;# 
  2015  0193                     	;# 
  2016  0194                     	;# 
  2017  0195                     	;# 
  2018  0196                     	;# 
  2019  0197                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  0199                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019A                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019C                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019D                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019E                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  019F                     	;# 
  2045  020C                     	;# 
  2046  020E                     	;# 
  2047  0211                     	;# 
  2048  0211                     	;# 
  2049  0212                     	;# 
  2050  0212                     	;# 
  2051  0213                     	;# 
  2052  0213                     	;# 
  2053  0214                     	;# 
  2054  0214                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0215                     	;# 
  2059  0216                     	;# 
  2060  0216                     	;# 
  2061  0217                     	;# 
  2062  0217                     	;# 
  2063  028C                     	;# 
  2064  028E                     	;# 
  2065  0291                     	;# 
  2066  0291                     	;# 
  2067  0292                     	;# 
  2068  0293                     	;# 
  2069  0293                     	;# 
  2070  0298                     	;# 
  2071  0298                     	;# 
  2072  0299                     	;# 
  2073  029A                     	;# 
  2074  029A                     	;# 
  2075  029E                     	;# 
  2076  030C                     	;# 
  2077  030E                     	;# 
  2078  038C                     	;# 
  2079  038E                     	;# 
  2080  0391                     	;# 
  2081  0392                     	;# 
  2082  0393                     	;# 
  2083  0397                     	;# 
  2084  0398                     	;# 
  2085  0399                     	;# 
  2086  0415                     	;# 
  2087  0416                     	;# 
  2088  0417                     	;# 
  2089  041C                     	;# 
  2090  041D                     	;# 
  2091  041E                     	;# 
  2092  0511                     	;# 
  2093  0515                     	;# 
  2094  0617                     	;# 
  2095  0618                     	;# 
  2096  0619                     	;# 
  2097  0619                     	;# 
  2098  061A                     	;# 
  2099  061B                     	;# 
  2100  061C                     	;# 
  2101  061C                     	;# 
  2102  0691                     	;# 
  2103  0692                     	;# 
  2104  0693                     	;# 
  2105  0694                     	;# 
  2106  0695                     	;# 
  2107  0696                     	;# 
  2108  0697                     	;# 
  2109  0698                     	;# 
  2110  0699                     	;# 
  2111  069A                     	;# 
  2112  069B                     	;# 
  2113  069C                     	;# 
  2114  069D                     	;# 
  2115  069E                     	;# 
  2116  069F                     	;# 
  2117  0E0F                     	;# 
  2118  0E10                     	;# 
  2119  0E11                     	;# 
  2120  0E12                     	;# 
  2121  0E13                     	;# 
  2122  0E14                     	;# 
  2123  0E15                     	;# 
  2124  0E17                     	;# 
  2125  0E20                     	;# 
  2126  0E21                     	;# 
  2127  0E22                     	;# 
  2128  0E24                     	;# 
  2129  0E25                     	;# 
  2130  0E28                     	;# 
  2131  0E29                     	;# 
  2132  0E2A                     	;# 
  2133  0E2B                     	;# 
  2134  0E90                     	;# 
  2135  0E91                     	;# 
  2136  0E92                     	;# 
  2137  0E94                     	;# 
  2138  0E95                     	;# 
  2139  0EA0                     	;# 
  2140  0EA1                     	;# 
  2141  0EA2                     	;# 
  2142  0EA3                     	;# 
  2143  0EA4                     	;# 
  2144  0EA5                     	;# 
  2145  0F0F                     	;# 
  2146  0F10                     	;# 
  2147  0F11                     	;# 
  2148  0F12                     	;# 
  2149  0F13                     	;# 
  2150  0F14                     	;# 
  2151  0F15                     	;# 
  2152  0F16                     	;# 
  2153  0F17                     	;# 
  2154  0F18                     	;# 
  2155  0F19                     	;# 
  2156  0F1A                     	;# 
  2157  0F1B                     	;# 
  2158  0F1C                     	;# 
  2159  0F1D                     	;# 
  2160  0F1E                     	;# 
  2161  0F1F                     	;# 
  2162  0F20                     	;# 
  2163  0F21                     	;# 
  2164  0F22                     	;# 
  2165  0F23                     	;# 
  2166  0F24                     	;# 
  2167  0F25                     	;# 
  2168  0F26                     	;# 
  2169  0F27                     	;# 
  2170  0F28                     	;# 
  2171  0F29                     	;# 
  2172  0F2A                     	;# 
  2173  0F2B                     	;# 
  2174  0F2C                     	;# 
  2175  0F2D                     	;# 
  2176  0F9E                     	;# 
  2177  0FE4                     	;# 
  2178  0FE5                     	;# 
  2179  0FE6                     	;# 
  2180  0FE7                     	;# 
  2181  0FE8                     	;# 
  2182  0FE9                     	;# 
  2183  0FEA                     	;# 
  2184  0FEB                     	;# 
  2185  0FED                     	;# 
  2186  0FEE                     	;# 
  2187  0FEF                     	;# 
  2188  0000                     	;# 
  2189  0001                     	;# 
  2190  0002                     	;# 
  2191  0003                     	;# 
  2192  0004                     	;# 
  2193  0005                     	;# 
  2194  0006                     	;# 
  2195  0007                     	;# 
  2196  0008                     	;# 
  2197  0009                     	;# 
  2198  000A                     	;# 
  2199  000B                     	;# 
  2200  000C                     	;# 
  2201  000E                     	;# 
  2202  0011                     	;# 
  2203  0012                     	;# 
  2204  0013                     	;# 
  2205  0015                     	;# 
  2206  0016                     	;# 
  2207  0016                     	;# 
  2208  0017                     	;# 
  2209  0018                     	;# 
  2210  0019                     	;# 
  2211  001A                     	;# 
  2212  001B                     	;# 
  2213  001C                     	;# 
  2214  008C                     	;# 
  2215  008E                     	;# 
  2216  0091                     	;# 
  2217  0092                     	;# 
  2218  0093                     	;# 
  2219  0095                     	;# 
  2220  0096                     	;# 
  2221  0097                     	;# 
  2222  0098                     	;# 
  2223  0099                     	;# 
  2224  009A                     	;# 
  2225  009B                     	;# 
  2226  009B                     	;# 
  2227  009C                     	;# 
  2228  009D                     	;# 
  2229  009E                     	;# 
  2230  009F                     	;# 
  2231  010C                     	;# 
  2232  010E                     	;# 
  2233  0111                     	;# 
  2234  0112                     	;# 
  2235  0113                     	;# 
  2236  0114                     	;# 
  2237  0115                     	;# 
  2238  0116                     	;# 
  2239  0117                     	;# 
  2240  0118                     	;# 
  2241  0119                     	;# 
  2242  011C                     	;# 
  2243  018C                     	;# 
  2244  018E                     	;# 
  2245  0191                     	;# 
  2246  0191                     	;# 
  2247  0192                     	;# 
  2248  0193                     	;# 
  2249  0193                     	;# 
  2250  0194                     	;# 
  2251  0195                     	;# 
  2252  0196                     	;# 
  2253  0197                     	;# 
  2254  0199                     	;# 
  2255  0199                     	;# 
  2256  0199                     	;# 
  2257  019A                     	;# 
  2258  019A                     	;# 
  2259  019A                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019C                     	;# 
  2266  019C                     	;# 
  2267  019C                     	;# 
  2268  019D                     	;# 
  2269  019D                     	;# 
  2270  019D                     	;# 
  2271  019E                     	;# 
  2272  019E                     	;# 
  2273  019E                     	;# 
  2274  019F                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  020C                     	;# 
  2280  020E                     	;# 
  2281  0211                     	;# 
  2282  0211                     	;# 
  2283  0212                     	;# 
  2284  0212                     	;# 
  2285  0213                     	;# 
  2286  0213                     	;# 
  2287  0214                     	;# 
  2288  0214                     	;# 
  2289  0215                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0216                     	;# 
  2294  0216                     	;# 
  2295  0217                     	;# 
  2296  0217                     	;# 
  2297  028C                     	;# 
  2298  028E                     	;# 
  2299  0291                     	;# 
  2300  0291                     	;# 
  2301  0292                     	;# 
  2302  0293                     	;# 
  2303  0293                     	;# 
  2304  0298                     	;# 
  2305  0298                     	;# 
  2306  0299                     	;# 
  2307  029A                     	;# 
  2308  029A                     	;# 
  2309  029E                     	;# 
  2310  030C                     	;# 
  2311  030E                     	;# 
  2312  038C                     	;# 
  2313  038E                     	;# 
  2314  0391                     	;# 
  2315  0392                     	;# 
  2316  0393                     	;# 
  2317  0397                     	;# 
  2318  0398                     	;# 
  2319  0399                     	;# 
  2320  0415                     	;# 
  2321  0416                     	;# 
  2322  0417                     	;# 
  2323  041C                     	;# 
  2324  041D                     	;# 
  2325  041E                     	;# 
  2326  0511                     	;# 
  2327  0515                     	;# 
  2328  0617                     	;# 
  2329  0618                     	;# 
  2330  0619                     	;# 
  2331  0619                     	;# 
  2332  061A                     	;# 
  2333  061B                     	;# 
  2334  061C                     	;# 
  2335  061C                     	;# 
  2336  0691                     	;# 
  2337  0692                     	;# 
  2338  0693                     	;# 
  2339  0694                     	;# 
  2340  0695                     	;# 
  2341  0696                     	;# 
  2342  0697                     	;# 
  2343  0698                     	;# 
  2344  0699                     	;# 
  2345  069A                     	;# 
  2346  069B                     	;# 
  2347  069C                     	;# 
  2348  069D                     	;# 
  2349  069E                     	;# 
  2350  069F                     	;# 
  2351  0E0F                     	;# 
  2352  0E10                     	;# 
  2353  0E11                     	;# 
  2354  0E12                     	;# 
  2355  0E13                     	;# 
  2356  0E14                     	;# 
  2357  0E15                     	;# 
  2358  0E17                     	;# 
  2359  0E20                     	;# 
  2360  0E21                     	;# 
  2361  0E22                     	;# 
  2362  0E24                     	;# 
  2363  0E25                     	;# 
  2364  0E28                     	;# 
  2365  0E29                     	;# 
  2366  0E2A                     	;# 
  2367  0E2B                     	;# 
  2368  0E90                     	;# 
  2369  0E91                     	;# 
  2370  0E92                     	;# 
  2371  0E94                     	;# 
  2372  0E95                     	;# 
  2373  0EA0                     	;# 
  2374  0EA1                     	;# 
  2375  0EA2                     	;# 
  2376  0EA3                     	;# 
  2377  0EA4                     	;# 
  2378  0EA5                     	;# 
  2379  0F0F                     	;# 
  2380  0F10                     	;# 
  2381  0F11                     	;# 
  2382  0F12                     	;# 
  2383  0F13                     	;# 
  2384  0F14                     	;# 
  2385  0F15                     	;# 
  2386  0F16                     	;# 
  2387  0F17                     	;# 
  2388  0F18                     	;# 
  2389  0F19                     	;# 
  2390  0F1A                     	;# 
  2391  0F1B                     	;# 
  2392  0F1C                     	;# 
  2393  0F1D                     	;# 
  2394  0F1E                     	;# 
  2395  0F1F                     	;# 
  2396  0F20                     	;# 
  2397  0F21                     	;# 
  2398  0F22                     	;# 
  2399  0F23                     	;# 
  2400  0F24                     	;# 
  2401  0F25                     	;# 
  2402  0F26                     	;# 
  2403  0F27                     	;# 
  2404  0F28                     	;# 
  2405  0F29                     	;# 
  2406  0F2A                     	;# 
  2407  0F2B                     	;# 
  2408  0F2C                     	;# 
  2409  0F2D                     	;# 
  2410  0F9E                     	;# 
  2411  0FE4                     	;# 
  2412  0FE5                     	;# 
  2413  0FE6                     	;# 
  2414  0FE7                     	;# 
  2415  0FE8                     	;# 
  2416  0FE9                     	;# 
  2417  0FEA                     	;# 
  2418  0FEB                     	;# 
  2419  0FED                     	;# 
  2420  0FEE                     	;# 
  2421  0FEF                     	;# 
  2422  0000                     	;# 
  2423  0001                     	;# 
  2424  0002                     	;# 
  2425  0003                     	;# 
  2426  0004                     	;# 
  2427  0005                     	;# 
  2428  0006                     	;# 
  2429  0007                     	;# 
  2430  0008                     	;# 
  2431  0009                     	;# 
  2432  000A                     	;# 
  2433  000B                     	;# 
  2434  000C                     	;# 
  2435  000E                     	;# 
  2436  0011                     	;# 
  2437  0012                     	;# 
  2438  0013                     	;# 
  2439  0015                     	;# 
  2440  0016                     	;# 
  2441  0016                     	;# 
  2442  0017                     	;# 
  2443  0018                     	;# 
  2444  0019                     	;# 
  2445  001A                     	;# 
  2446  001B                     	;# 
  2447  001C                     	;# 
  2448  008C                     	;# 
  2449  008E                     	;# 
  2450  0091                     	;# 
  2451  0092                     	;# 
  2452  0093                     	;# 
  2453  0095                     	;# 
  2454  0096                     	;# 
  2455  0097                     	;# 
  2456  0098                     	;# 
  2457  0099                     	;# 
  2458  009A                     	;# 
  2459  009B                     	;# 
  2460  009B                     	;# 
  2461  009C                     	;# 
  2462  009D                     	;# 
  2463  009E                     	;# 
  2464  009F                     	;# 
  2465  010C                     	;# 
  2466  010E                     	;# 
  2467  0111                     	;# 
  2468  0112                     	;# 
  2469  0113                     	;# 
  2470  0114                     	;# 
  2471  0115                     	;# 
  2472  0116                     	;# 
  2473  0117                     	;# 
  2474  0118                     	;# 
  2475  0119                     	;# 
  2476  011C                     	;# 
  2477  018C                     	;# 
  2478  018E                     	;# 
  2479  0191                     	;# 
  2480  0191                     	;# 
  2481  0192                     	;# 
  2482  0193                     	;# 
  2483  0193                     	;# 
  2484  0194                     	;# 
  2485  0195                     	;# 
  2486  0196                     	;# 
  2487  0197                     	;# 
  2488  0199                     	;# 
  2489  0199                     	;# 
  2490  0199                     	;# 
  2491  019A                     	;# 
  2492  019A                     	;# 
  2493  019A                     	;# 
  2494  019B                     	;# 
  2495  019B                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019B                     	;# 
  2499  019C                     	;# 
  2500  019C                     	;# 
  2501  019C                     	;# 
  2502  019D                     	;# 
  2503  019D                     	;# 
  2504  019D                     	;# 
  2505  019E                     	;# 
  2506  019E                     	;# 
  2507  019E                     	;# 
  2508  019F                     	;# 
  2509  019F                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  019F                     	;# 
  2513  020C                     	;# 
  2514  020E                     	;# 
  2515  0211                     	;# 
  2516  0211                     	;# 
  2517  0212                     	;# 
  2518  0212                     	;# 
  2519  0213                     	;# 
  2520  0213                     	;# 
  2521  0214                     	;# 
  2522  0214                     	;# 
  2523  0215                     	;# 
  2524  0215                     	;# 
  2525  0215                     	;# 
  2526  0215                     	;# 
  2527  0216                     	;# 
  2528  0216                     	;# 
  2529  0217                     	;# 
  2530  0217                     	;# 
  2531  028C                     	;# 
  2532  028E                     	;# 
  2533  0291                     	;# 
  2534  0291                     	;# 
  2535  0292                     	;# 
  2536  0293                     	;# 
  2537  0293                     	;# 
  2538  0298                     	;# 
  2539  0298                     	;# 
  2540  0299                     	;# 
  2541  029A                     	;# 
  2542  029A                     	;# 
  2543  029E                     	;# 
  2544  030C                     	;# 
  2545  030E                     	;# 
  2546  038C                     	;# 
  2547  038E                     	;# 
  2548  0391                     	;# 
  2549  0392                     	;# 
  2550  0393                     	;# 
  2551  0397                     	;# 
  2552  0398                     	;# 
  2553  0399                     	;# 
  2554  0415                     	;# 
  2555  0416                     	;# 
  2556  0417                     	;# 
  2557  041C                     	;# 
  2558  041D                     	;# 
  2559  041E                     	;# 
  2560  0511                     	;# 
  2561  0515                     	;# 
  2562  0617                     	;# 
  2563  0618                     	;# 
  2564  0619                     	;# 
  2565  0619                     	;# 
  2566  061A                     	;# 
  2567  061B                     	;# 
  2568  061C                     	;# 
  2569  061C                     	;# 
  2570  0691                     	;# 
  2571  0692                     	;# 
  2572  0693                     	;# 
  2573  0694                     	;# 
  2574  0695                     	;# 
  2575  0696                     	;# 
  2576  0697                     	;# 
  2577  0698                     	;# 
  2578  0699                     	;# 
  2579  069A                     	;# 
  2580  069B                     	;# 
  2581  069C                     	;# 
  2582  069D                     	;# 
  2583  069E                     	;# 
  2584  069F                     	;# 
  2585  0E0F                     	;# 
  2586  0E10                     	;# 
  2587  0E11                     	;# 
  2588  0E12                     	;# 
  2589  0E13                     	;# 
  2590  0E14                     	;# 
  2591  0E15                     	;# 
  2592  0E17                     	;# 
  2593  0E20                     	;# 
  2594  0E21                     	;# 
  2595  0E22                     	;# 
  2596  0E24                     	;# 
  2597  0E25                     	;# 
  2598  0E28                     	;# 
  2599  0E29                     	;# 
  2600  0E2A                     	;# 
  2601  0E2B                     	;# 
  2602  0E90                     	;# 
  2603  0E91                     	;# 
  2604  0E92                     	;# 
  2605  0E94                     	;# 
  2606  0E95                     	;# 
  2607  0EA0                     	;# 
  2608  0EA1                     	;# 
  2609  0EA2                     	;# 
  2610  0EA3                     	;# 
  2611  0EA4                     	;# 
  2612  0EA5                     	;# 
  2613  0F0F                     	;# 
  2614  0F10                     	;# 
  2615  0F11                     	;# 
  2616  0F12                     	;# 
  2617  0F13                     	;# 
  2618  0F14                     	;# 
  2619  0F15                     	;# 
  2620  0F16                     	;# 
  2621  0F17                     	;# 
  2622  0F18                     	;# 
  2623  0F19                     	;# 
  2624  0F1A                     	;# 
  2625  0F1B                     	;# 
  2626  0F1C                     	;# 
  2627  0F1D                     	;# 
  2628  0F1E                     	;# 
  2629  0F1F                     	;# 
  2630  0F20                     	;# 
  2631  0F21                     	;# 
  2632  0F22                     	;# 
  2633  0F23                     	;# 
  2634  0F24                     	;# 
  2635  0F25                     	;# 
  2636  0F26                     	;# 
  2637  0F27                     	;# 
  2638  0F28                     	;# 
  2639  0F29                     	;# 
  2640  0F2A                     	;# 
  2641  0F2B                     	;# 
  2642  0F2C                     	;# 
  2643  0F2D                     	;# 
  2644  0F9E                     	;# 
  2645  0FE4                     	;# 
  2646  0FE5                     	;# 
  2647  0FE6                     	;# 
  2648  0FE7                     	;# 
  2649  0FE8                     	;# 
  2650  0FE9                     	;# 
  2651  0FEA                     	;# 
  2652  0FEB                     	;# 
  2653  0FED                     	;# 
  2654  0FEE                     	;# 
  2655  0FEF                     	;# 
  2656                           
  2657                           	psect	idataBANK2
  2658  18D9                     __pidataBANK2:	
  2659                           
  2660                           ;initializer for _Read_Timer
  2661  18D9  3414               	retlw	20
  2662  18DA  3400               	retlw	0
  2663                           
  2664                           	psect	idataBANK4
  2665  1927                     __pidataBANK4:	
  2666                           
  2667                           ;initializer for _BAUD
  2668  1927  3480               	retlw	128
  2669  1928  3425               	retlw	37
  2670  1929  3400               	retlw	0
  2671  192A  3400               	retlw	0
  2672                           
  2673                           ;initializer for _MEM
  2674  192B  3400               	retlw	0
  2675  192C  3400               	retlw	0
  2676  192D  3480               	retlw	128
  2677  192E  3425               	retlw	37
  2678                           
  2679                           ;initializer for _Version
  2680  192F  3431               	retlw	49
  2681  1930  342E               	retlw	46
  2682  1931  3432               	retlw	50
  2683  1932  3400               	retlw	0
  2684                           
  2685                           	psect	stringtext
  2686  0800                     __pstringtext:	
  2687  0800                     _ScanCodeFunctionNoE0:	
  2688  0800  3400               	retlw	0
  2689  0801  3411               	retlw	17
  2690  0802  3400               	retlw	0
  2691  0803  340C               	retlw	12
  2692  0804  340A               	retlw	10
  2693  0805  3406               	retlw	6
  2694  0806  3407               	retlw	7
  2695  0807  3414               	retlw	20
  2696  0808  3400               	retlw	0
  2697  0809  3412               	retlw	18
  2698  080A  3410               	retlw	16
  2699  080B  340E               	retlw	14
  2700  080C  340B               	retlw	11
  2701  080D  3400               	retlw	0
  2702  080E  3400               	retlw	0
  2703  080F  3400               	retlw	0
  2704  0810  3400               	retlw	0
  2705  0811  341C               	retlw	28
  2706  0812  3400               	retlw	0
  2707  0813  3400               	retlw	0
  2708  0814  341A               	retlw	26
  2709  0815  3400               	retlw	0
  2710  0816  3400               	retlw	0
  2711  0817  3400               	retlw	0
  2712  0818  3400               	retlw	0
  2713  0819  3400               	retlw	0
  2714  081A  3400               	retlw	0
  2715  081B  3400               	retlw	0
  2716  081C  3400               	retlw	0
  2717  081D  3400               	retlw	0
  2718  081E  3400               	retlw	0
  2719  081F  3400               	retlw	0
  2720  0820  3400               	retlw	0
  2721  0821  3400               	retlw	0
  2722  0822  3400               	retlw	0
  2723  0823  3400               	retlw	0
  2724  0824  3400               	retlw	0
  2725  0825  3400               	retlw	0
  2726  0826  3400               	retlw	0
  2727  0827  3400               	retlw	0
  2728  0828  3400               	retlw	0
  2729  0829  3400               	retlw	0
  2730  082A  3400               	retlw	0
  2731  082B  3400               	retlw	0
  2732  082C  3400               	retlw	0
  2733  082D  3400               	retlw	0
  2734  082E  3400               	retlw	0
  2735  082F  3400               	retlw	0
  2736  0830  3400               	retlw	0
  2737  0831  3400               	retlw	0
  2738  0832  3400               	retlw	0
  2739  0833  3400               	retlw	0
  2740  0834  3400               	retlw	0
  2741  0835  3400               	retlw	0
  2742  0836  3400               	retlw	0
  2743  0837  3400               	retlw	0
  2744  0838  3400               	retlw	0
  2745  0839  3400               	retlw	0
  2746  083A  3400               	retlw	0
  2747  083B  3400               	retlw	0
  2748  083C  3400               	retlw	0
  2749  083D  3400               	retlw	0
  2750  083E  3400               	retlw	0
  2751  083F  3400               	retlw	0
  2752  0840  3400               	retlw	0
  2753  0841  3400               	retlw	0
  2754  0842  3400               	retlw	0
  2755  0843  3400               	retlw	0
  2756  0844  3400               	retlw	0
  2757  0845  3400               	retlw	0
  2758  0846  3400               	retlw	0
  2759  0847  3400               	retlw	0
  2760  0848  3400               	retlw	0
  2761  0849  3400               	retlw	0
  2762  084A  3400               	retlw	0
  2763  084B  3400               	retlw	0
  2764  084C  3400               	retlw	0
  2765  084D  3400               	retlw	0
  2766  084E  3400               	retlw	0
  2767  084F  3400               	retlw	0
  2768  0850  3400               	retlw	0
  2769  0851  3400               	retlw	0
  2770  0852  3400               	retlw	0
  2771  0853  3400               	retlw	0
  2772  0854  3400               	retlw	0
  2773  0855  3400               	retlw	0
  2774  0856  3400               	retlw	0
  2775  0857  3400               	retlw	0
  2776  0858  3400               	retlw	0
  2777  0859  3400               	retlw	0
  2778  085A  3400               	retlw	0
  2779  085B  3400               	retlw	0
  2780  085C  3400               	retlw	0
  2781  085D  3400               	retlw	0
  2782  085E  3400               	retlw	0
  2783  085F  3400               	retlw	0
  2784  0860  3400               	retlw	0
  2785  0861  3400               	retlw	0
  2786  0862  3400               	retlw	0
  2787  0863  3400               	retlw	0
  2788  0864  3400               	retlw	0
  2789  0865  3400               	retlw	0
  2790  0866  3400               	retlw	0
  2791  0867  3400               	retlw	0
  2792  0868  3400               	retlw	0
  2793  0869  3400               	retlw	0
  2794  086A  3400               	retlw	0
  2795  086B  3400               	retlw	0
  2796  086C  3400               	retlw	0
  2797  086D  3400               	retlw	0
  2798  086E  3400               	retlw	0
  2799  086F  3400               	retlw	0
  2800  0870  3400               	retlw	0
  2801  0871  3400               	retlw	0
  2802  0872  3400               	retlw	0
  2803  0873  3400               	retlw	0
  2804  0874  3400               	retlw	0
  2805  0875  3400               	retlw	0
  2806  0876  3400               	retlw	0
  2807  0877  3400               	retlw	0
  2808  0878  3413               	retlw	19
  2809  0879  3400               	retlw	0
  2810  087A  3400               	retlw	0
  2811  087B  3400               	retlw	0
  2812  087C  3400               	retlw	0
  2813  087D  3400               	retlw	0
  2814  087E  3400               	retlw	0
  2815  087F  3400               	retlw	0
  2816  0880  3400               	retlw	0
  2817  0881  3400               	retlw	0
  2818  0882  3400               	retlw	0
  2819  0883  340F               	retlw	15
  2820  0884                     __end_of_ScanCodeFunctionNoE0:	
  2821  0884                     _ScanCode:	
  2822  0884  3409               	retlw	9
  2823  0885  3460               	retlw	96
  2824  0886  3400               	retlw	0
  2825  0887  3400               	retlw	0
  2826  0888  3400               	retlw	0
  2827  0889  3400               	retlw	0
  2828  088A  3400               	retlw	0
  2829  088B  3400               	retlw	0
  2830  088C  3471               	retlw	113
  2831  088D  3431               	retlw	49
  2832  088E  3400               	retlw	0
  2833  088F  3400               	retlw	0
  2834  0890  3400               	retlw	0
  2835  0891  347A               	retlw	122
  2836  0892  3473               	retlw	115
  2837  0893  3461               	retlw	97
  2838  0894  3477               	retlw	119
  2839  0895  3432               	retlw	50
  2840  0896  3400               	retlw	0
  2841  0897  3400               	retlw	0
  2842  0898  3463               	retlw	99
  2843  0899  3478               	retlw	120
  2844  089A  3464               	retlw	100
  2845  089B  3465               	retlw	101
  2846  089C  3434               	retlw	52
  2847  089D  3433               	retlw	51
  2848  089E  3400               	retlw	0
  2849  089F  3400               	retlw	0
  2850  08A0  3420               	retlw	32
  2851  08A1  3476               	retlw	118
  2852  08A2  3466               	retlw	102
  2853  08A3  3474               	retlw	116
  2854  08A4  3472               	retlw	114
  2855  08A5  3435               	retlw	53
  2856  08A6  3400               	retlw	0
  2857  08A7  3400               	retlw	0
  2858  08A8  346E               	retlw	110
  2859  08A9  3462               	retlw	98
  2860  08AA  3468               	retlw	104
  2861  08AB  3467               	retlw	103
  2862  08AC  3479               	retlw	121
  2863  08AD  3436               	retlw	54
  2864  08AE  3400               	retlw	0
  2865  08AF  3400               	retlw	0
  2866  08B0  3400               	retlw	0
  2867  08B1  346D               	retlw	109
  2868  08B2  346A               	retlw	106
  2869  08B3  3475               	retlw	117
  2870  08B4  3437               	retlw	55
  2871  08B5  3438               	retlw	56
  2872  08B6  3400               	retlw	0
  2873  08B7  3400               	retlw	0
  2874  08B8  342C               	retlw	44
  2875  08B9  346B               	retlw	107
  2876  08BA  3469               	retlw	105
  2877  08BB  346F               	retlw	111
  2878  08BC  3430               	retlw	48
  2879  08BD  3439               	retlw	57
  2880  08BE  3400               	retlw	0
  2881  08BF  3400               	retlw	0
  2882  08C0  342E               	retlw	46
  2883  08C1  342F               	retlw	47
  2884  08C2  346C               	retlw	108
  2885  08C3  343B               	retlw	59
  2886  08C4  3470               	retlw	112
  2887  08C5  342D               	retlw	45
  2888  08C6  3400               	retlw	0
  2889  08C7  3400               	retlw	0
  2890  08C8  3400               	retlw	0
  2891  08C9  3427               	retlw	39
  2892  08CA  3400               	retlw	0
  2893  08CB  345B               	retlw	91
  2894  08CC  343D               	retlw	61
  2895  08CD  3400               	retlw	0
  2896  08CE  3400               	retlw	0
  2897  08CF  3400               	retlw	0
  2898  08D0  3400               	retlw	0
  2899  08D1  340D               	retlw	13
  2900  08D2  345D               	retlw	93
  2901  08D3  3400               	retlw	0
  2902  08D4  345C               	retlw	92
  2903  08D5  3400               	retlw	0
  2904  08D6  3400               	retlw	0
  2905  08D7  3400               	retlw	0
  2906  08D8  3400               	retlw	0
  2907  08D9  3400               	retlw	0
  2908  08DA  3400               	retlw	0
  2909  08DB  3400               	retlw	0
  2910  08DC  3400               	retlw	0
  2911  08DD  3408               	retlw	8
  2912  08DE  3400               	retlw	0
  2913  08DF  3400               	retlw	0
  2914  08E0  3431               	retlw	49
  2915  08E1  3400               	retlw	0
  2916  08E2  3434               	retlw	52
  2917  08E3  3437               	retlw	55
  2918  08E4  3400               	retlw	0
  2919  08E5  3400               	retlw	0
  2920  08E6  3400               	retlw	0
  2921  08E7  3430               	retlw	48
  2922  08E8  342E               	retlw	46
  2923  08E9  3432               	retlw	50
  2924  08EA  3435               	retlw	53
  2925  08EB  3436               	retlw	54
  2926  08EC  3438               	retlw	56
  2927  08ED  341B               	retlw	27
  2928  08EE  3400               	retlw	0
  2929  08EF  3400               	retlw	0
  2930  08F0  342B               	retlw	43
  2931  08F1  3433               	retlw	51
  2932  08F2  342D               	retlw	45
  2933  08F3  342A               	retlw	42
  2934  08F4  3439               	retlw	57
  2935  08F5                     __end_of_ScanCode:	
  2936  08F5                     _ScanCodeSHIFT:	
  2937  08F5  3409               	retlw	9
  2938  08F6  347E               	retlw	126
  2939  08F7  3400               	retlw	0
  2940  08F8  3400               	retlw	0
  2941  08F9  3400               	retlw	0
  2942  08FA  3400               	retlw	0
  2943  08FB  3400               	retlw	0
  2944  08FC  3400               	retlw	0
  2945  08FD  3451               	retlw	81
  2946  08FE  3421               	retlw	33
  2947  08FF  3400               	retlw	0
  2948  0900  3400               	retlw	0
  2949  0901  3400               	retlw	0
  2950  0902  345A               	retlw	90
  2951  0903  3453               	retlw	83
  2952  0904  3441               	retlw	65
  2953  0905  3457               	retlw	87
  2954  0906  3440               	retlw	64
  2955  0907  3400               	retlw	0
  2956  0908  3400               	retlw	0
  2957  0909  3443               	retlw	67
  2958  090A  3458               	retlw	88
  2959  090B  3444               	retlw	68
  2960  090C  3445               	retlw	69
  2961  090D  3424               	retlw	36
  2962  090E  3423               	retlw	35
  2963  090F  3400               	retlw	0
  2964  0910  3400               	retlw	0
  2965  0911  3420               	retlw	32
  2966  0912  3456               	retlw	86
  2967  0913  3446               	retlw	70
  2968  0914  3454               	retlw	84
  2969  0915  3452               	retlw	82
  2970  0916  3425               	retlw	37
  2971  0917  3400               	retlw	0
  2972  0918  3400               	retlw	0
  2973  0919  344E               	retlw	78
  2974  091A  3442               	retlw	66
  2975  091B  3448               	retlw	72
  2976  091C  3447               	retlw	71
  2977  091D  3459               	retlw	89
  2978  091E  345E               	retlw	94
  2979  091F  3400               	retlw	0
  2980  0920  3400               	retlw	0
  2981  0921  3400               	retlw	0
  2982  0922  344D               	retlw	77
  2983  0923  344A               	retlw	74
  2984  0924  3455               	retlw	85
  2985  0925  3426               	retlw	38
  2986  0926  342A               	retlw	42
  2987  0927  3400               	retlw	0
  2988  0928  3400               	retlw	0
  2989  0929  343C               	retlw	60
  2990  092A  344B               	retlw	75
  2991  092B  3449               	retlw	73
  2992  092C  344F               	retlw	79
  2993  092D  3429               	retlw	41
  2994  092E  3428               	retlw	40
  2995  092F  3400               	retlw	0
  2996  0930  3400               	retlw	0
  2997  0931  343E               	retlw	62
  2998  0932  343F               	retlw	63
  2999  0933  344C               	retlw	76
  3000  0934  343A               	retlw	58
  3001  0935  3450               	retlw	80
  3002  0936  345F               	retlw	95
  3003  0937  3400               	retlw	0
  3004  0938  3400               	retlw	0
  3005  0939  3400               	retlw	0
  3006  093A  3422               	retlw	34
  3007  093B  3400               	retlw	0
  3008  093C  347B               	retlw	123
  3009  093D  342B               	retlw	43
  3010  093E  3400               	retlw	0
  3011  093F  3400               	retlw	0
  3012  0940  3400               	retlw	0
  3013  0941  3400               	retlw	0
  3014  0942  340D               	retlw	13
  3015  0943  347D               	retlw	125
  3016  0944  3400               	retlw	0
  3017  0945  347C               	retlw	124
  3018  0946  3400               	retlw	0
  3019  0947  3400               	retlw	0
  3020  0948  3400               	retlw	0
  3021  0949  3400               	retlw	0
  3022  094A  3400               	retlw	0
  3023  094B  3400               	retlw	0
  3024  094C  3400               	retlw	0
  3025  094D  3400               	retlw	0
  3026  094E  3408               	retlw	8
  3027  094F  3400               	retlw	0
  3028  0950  3400               	retlw	0
  3029  0951  3431               	retlw	49
  3030  0952  3400               	retlw	0
  3031  0953  3434               	retlw	52
  3032  0954  3437               	retlw	55
  3033  0955  3400               	retlw	0
  3034  0956  3400               	retlw	0
  3035  0957  3400               	retlw	0
  3036  0958  3430               	retlw	48
  3037  0959  342E               	retlw	46
  3038  095A  3432               	retlw	50
  3039  095B  3435               	retlw	53
  3040  095C  3436               	retlw	54
  3041  095D  3438               	retlw	56
  3042  095E  341B               	retlw	27
  3043  095F  3400               	retlw	0
  3044  0960  3400               	retlw	0
  3045  0961  342B               	retlw	43
  3046  0962  3433               	retlw	51
  3047  0963  342D               	retlw	45
  3048  0964  342A               	retlw	42
  3049  0965  3439               	retlw	57
  3050  0966                     __end_of_ScanCodeSHIFT:	
  3051  0966                     _ScanCodeFunctionE0:	
  3052  0966  341E               	retlw	30
  3053  0967  3400               	retlw	0
  3054  0968  3400               	retlw	0
  3055  0969  341F               	retlw	31
  3056  096A  3400               	retlw	0
  3057  096B  3400               	retlw	0
  3058  096C  3400               	retlw	0
  3059  096D  3400               	retlw	0
  3060  096E  3400               	retlw	0
  3061  096F  3400               	retlw	0
  3062  0970  3400               	retlw	0
  3063  0971  3400               	retlw	0
  3064  0972  3400               	retlw	0
  3065  0973  3400               	retlw	0
  3066  0974  3419               	retlw	25
  3067  0975  3400               	retlw	0
  3068  0976  3400               	retlw	0
  3069  0977  3400               	retlw	0
  3070  0978  3400               	retlw	0
  3071  0979  3400               	retlw	0
  3072  097A  3400               	retlw	0
  3073  097B  3400               	retlw	0
  3074  097C  341D               	retlw	29
  3075  097D  3400               	retlw	0
  3076  097E  3400               	retlw	0
  3077  097F  3400               	retlw	0
  3078  0980  3400               	retlw	0
  3079  0981  3400               	retlw	0
  3080  0982  3400               	retlw	0
  3081  0983  3400               	retlw	0
  3082  0984  3400               	retlw	0
  3083  0985  3400               	retlw	0
  3084  0986  3400               	retlw	0
  3085  0987  3400               	retlw	0
  3086  0988  3400               	retlw	0
  3087  0989  3400               	retlw	0
  3088  098A  3400               	retlw	0
  3089  098B  3400               	retlw	0
  3090  098C  3400               	retlw	0
  3091  098D  3400               	retlw	0
  3092  098E  3400               	retlw	0
  3093  098F  3400               	retlw	0
  3094  0990  3400               	retlw	0
  3095  0991  3400               	retlw	0
  3096  0992  3400               	retlw	0
  3097  0993  3400               	retlw	0
  3098  0994  3400               	retlw	0
  3099  0995  3400               	retlw	0
  3100  0996  3400               	retlw	0
  3101  0997  3400               	retlw	0
  3102  0998  3400               	retlw	0
  3103  0999  3400               	retlw	0
  3104  099A  3400               	retlw	0
  3105  099B  3400               	retlw	0
  3106  099C  3400               	retlw	0
  3107  099D  3400               	retlw	0
  3108  099E  3400               	retlw	0
  3109  099F  342F               	retlw	47
  3110  09A0  3400               	retlw	0
  3111  09A1  3400               	retlw	0
  3112  09A2  3400               	retlw	0
  3113  09A3  3400               	retlw	0
  3114  09A4  3400               	retlw	0
  3115  09A5  3400               	retlw	0
  3116  09A6  3400               	retlw	0
  3117  09A7  3400               	retlw	0
  3118  09A8  3400               	retlw	0
  3119  09A9  3400               	retlw	0
  3120  09AA  3400               	retlw	0
  3121  09AB  3400               	retlw	0
  3122  09AC  3400               	retlw	0
  3123  09AD  3400               	retlw	0
  3124  09AE  3400               	retlw	0
  3125  09AF  340D               	retlw	13
  3126  09B0  3400               	retlw	0
  3127  09B1  3400               	retlw	0
  3128  09B2  3400               	retlw	0
  3129  09B3  3400               	retlw	0
  3130  09B4  3400               	retlw	0
  3131  09B5  3400               	retlw	0
  3132  09B6  3400               	retlw	0
  3133  09B7  3400               	retlw	0
  3134  09B8  3400               	retlw	0
  3135  09B9  3400               	retlw	0
  3136  09BA  3400               	retlw	0
  3137  09BB  3400               	retlw	0
  3138  09BC  3400               	retlw	0
  3139  09BD  3400               	retlw	0
  3140  09BE  3401               	retlw	1
  3141  09BF  3400               	retlw	0
  3142  09C0  3403               	retlw	3
  3143  09C1  3416               	retlw	22
  3144  09C2  3400               	retlw	0
  3145  09C3  3400               	retlw	0
  3146  09C4  3400               	retlw	0
  3147  09C5  3415               	retlw	21
  3148  09C6  347F               	retlw	127
  3149  09C7  3404               	retlw	4
  3150  09C8  3400               	retlw	0
  3151  09C9  3405               	retlw	5
  3152  09CA  3402               	retlw	2
  3153  09CB  3400               	retlw	0
  3154  09CC  3400               	retlw	0
  3155  09CD  3400               	retlw	0
  3156  09CE  3400               	retlw	0
  3157  09CF  3418               	retlw	24
  3158  09D0  3400               	retlw	0
  3159  09D1  3400               	retlw	0
  3160  09D2  3417               	retlw	23
  3161  09D3                     __end_of_ScanCodeFunctionE0:	
  3162  09D3                     _dpowers:	
  3163  09D3  3401               	retlw	1
  3164  09D4  3400               	retlw	0
  3165  09D5  3400               	retlw	0
  3166  09D6  3400               	retlw	0
  3167  09D7  340A               	retlw	10
  3168  09D8  3400               	retlw	0
  3169  09D9  3400               	retlw	0
  3170  09DA  3400               	retlw	0
  3171  09DB  3464               	retlw	100
  3172  09DC  3400               	retlw	0
  3173  09DD  3400               	retlw	0
  3174  09DE  3400               	retlw	0
  3175  09DF  34E8               	retlw	232
  3176  09E0  3403               	retlw	3
  3177  09E1  3400               	retlw	0
  3178  09E2  3400               	retlw	0
  3179  09E3  3410               	retlw	16
  3180  09E4  3427               	retlw	39
  3181  09E5  3400               	retlw	0
  3182  09E6  3400               	retlw	0
  3183  09E7  34A0               	retlw	160
  3184  09E8  3486               	retlw	134
  3185  09E9  3401               	retlw	1
  3186  09EA  3400               	retlw	0
  3187  09EB  3440               	retlw	64
  3188  09EC  3442               	retlw	66
  3189  09ED  340F               	retlw	15
  3190  09EE  3400               	retlw	0
  3191  09EF  3480               	retlw	128
  3192  09F0  3496               	retlw	150
  3193  09F1  3498               	retlw	152
  3194  09F2  3400               	retlw	0
  3195  09F3  3400               	retlw	0
  3196  09F4  34E1               	retlw	225
  3197  09F5  34F5               	retlw	245
  3198  09F6  3405               	retlw	5
  3199  09F7  3400               	retlw	0
  3200  09F8  34CA               	retlw	202
  3201  09F9  349A               	retlw	154
  3202  09FA  343B               	retlw	59
  3203  09FB                     __end_of_dpowers:	
  3204  000B                     _INTCON	set	11
  3205  000B                     _INTCONbits	set	11
  3206  0011                     _PIR1bits	set	17
  3207  000C                     _PORTA	set	12
  3208  001B                     _PR2	set	27
  3209  001C                     _T2CON	set	28
  3210  001C                     _T2CONbits	set	28
  3211  009D                     _ADCON0	set	157
  3212  009E                     _ADCON1	set	158
  3213  009F                     _ADCON2	set	159
  3214  009C                     _ADRESH	set	156
  3215  009B                     _ADRESL	set	155
  3216  0095                     _OPTION_REGbits	set	149
  3217  0099                     _OSCCON	set	153
  3218  009A                     _OSCSTAT	set	154
  3219  0091                     _PIE1	set	145
  3220  0091                     _PIE1bits	set	145
  3221  008C                     _TRISAbits	set	140
  3222  008E                     _TRISCbits	set	142
  3223  04D0                     _HFIOFS	set	1232
  3224  0117                     _FVRCON	set	279
  3225  010C                     _LATA	set	268
  3226  010E                     _LATC	set	270
  3227  018C                     _ANSELA	set	396
  3228  018E                     _ANSELC	set	398
  3229  019F                     _BAUD1CON	set	415
  3230  0192                     _PMADRH	set	402
  3231  0191                     _PMADRL	set	401
  3232  0195                     _PMCON1	set	405
  3233  0196                     _PMCON2	set	406
  3234  0194                     _PMDATH	set	404
  3235  0193                     _PMDATL	set	403
  3236  019D                     _RC1STA	set	413
  3237  019D                     _RC1STAbits	set	413
  3238  0199                     _RCREG	set	409
  3239  019D                     _RCSTA	set	413
  3240  019D                     _RCSTAbits	set	413
  3241  019B                     _SPBRG	set	411
  3242  019C                     _SPBRGH	set	412
  3243  019E                     _TX1STA	set	414
  3244  019E                     _TX1STAbits	set	414
  3245  019A                     _TXREG	set	410
  3246  019E                     _TXSTAbits	set	414
  3247  020C                     _WPUA	set	524
  3248  020E                     _WPUC	set	526
  3249  029A                     _CCP2CONbits	set	666
  3250  0393                     _IOCAF	set	915
  3251  0392                     _IOCAN	set	914
  3252  0391                     _IOCAP	set	913
  3253  0E25                     _CKPPS	set	3621
  3254  0E0F                     _PPSLOCK	set	3599
  3255  0E24                     _RXPPS	set	3620
  3256  0EA2                     _RC2PPS	set	3746
  3257  09FB                     __stringdata:	
  3258  09FB                     STR_29:	
  3259  09FB  344B               	retlw	75	;'K'
  3260  09FC  3465               	retlw	101	;'e'
  3261  09FD  3479               	retlw	121	;'y'
  3262  09FE  3442               	retlw	66	;'B'
  3263  09FF  346F               	retlw	111	;'o'
  3264  0A00  3461               	retlw	97	;'a'
  3265  0A01  3472               	retlw	114	;'r'
  3266  0A02  3464               	retlw	100	;'d'
  3267  0A03  3420               	retlw	32	;' '
  3268  0A04  3452               	retlw	82	;'R'
  3269  0A05  3465               	retlw	101	;'e'
  3270  0A06  3473               	retlw	115	;'s'
  3271  0A07  3465               	retlw	101	;'e'
  3272  0A08  3474               	retlw	116	;'t'
  3273  0A09  3420               	retlw	32	;' '
  3274  0A0A  3474               	retlw	116	;'t'
  3275  0A0B  346F               	retlw	111	;'o'
  3276  0A0C  3420               	retlw	32	;' '
  3277  0A0D  3439               	retlw	57	;'9'
  3278  0A0E  3436               	retlw	54	;'6'
  3279  0A0F  3430               	retlw	48	;'0'
  3280  0A10  3430               	retlw	48	;'0'
  3281  0A11  3420               	retlw	32	;' '
  3282  0A12  3477               	retlw	119	;'w'
  3283  0A13  3469               	retlw	105	;'i'
  3284  0A14  3474               	retlw	116	;'t'
  3285  0A15  3468               	retlw	104	;'h'
  3286  0A16  3420               	retlw	32	;' '
  3287  0A17  346E               	retlw	110	;'n'
  3288  0A18  346F               	retlw	111	;'o'
  3289  0A19  3420               	retlw	32	;' '
  3290  0A1A  3470               	retlw	112	;'p'
  3291  0A1B  3461               	retlw	97	;'a'
  3292  0A1C  3472               	retlw	114	;'r'
  3293  0A1D  3469               	retlw	105	;'i'
  3294  0A1E  3474               	retlw	116	;'t'
  3295  0A1F  3479               	retlw	121	;'y'
  3296  0A20  3420               	retlw	32	;' '
  3297  0A21  3462               	retlw	98	;'b'
  3298  0A22  3469               	retlw	105	;'i'
  3299  0A23  3474               	retlw	116	;'t'
  3300  0A24  340D               	retlw	13
  3301  0A25  340A               	retlw	10
  3302  0A26  3400               	retlw	0
  3303  0A27                     STR_5:	
  3304  0A27  3454               	retlw	84	;'T'
  3305  0A28  346F               	retlw	111	;'o'
  3306  0A29  3420               	retlw	32	;' '
  3307  0A2A  3443               	retlw	67	;'C'
  3308  0A2B  3468               	retlw	104	;'h'
  3309  0A2C  3461               	retlw	97	;'a'
  3310  0A2D  346E               	retlw	110	;'n'
  3311  0A2E  3467               	retlw	103	;'g'
  3312  0A2F  3465               	retlw	101	;'e'
  3313  0A30  3420               	retlw	32	;' '
  3314  0A31  3442               	retlw	66	;'B'
  3315  0A32  3441               	retlw	65	;'A'
  3316  0A33  3455               	retlw	85	;'U'
  3317  0A34  3444               	retlw	68	;'D'
  3318  0A35  3420               	retlw	32	;' '
  3319  0A36  3468               	retlw	104	;'h'
  3320  0A37  3469               	retlw	105	;'i'
  3321  0A38  3474               	retlw	116	;'t'
  3322  0A39  3420               	retlw	32	;' '
  3323  0A3A  3422               	retlw	34	;'"'
  3324  0A3B  3443               	retlw	67	;'C'
  3325  0A3C  344E               	retlw	78	;'N'
  3326  0A3D  3454               	retlw	84	;'T'
  3327  0A3E  342B               	retlw	43	;'+'
  3328  0A3F  3441               	retlw	65	;'A'
  3329  0A40  344C               	retlw	76	;'L'
  3330  0A41  3454               	retlw	84	;'T'
  3331  0A42  342B               	retlw	43	;'+'
  3332  0A43  3444               	retlw	68	;'D'
  3333  0A44  3445               	retlw	69	;'E'
  3334  0A45  344C               	retlw	76	;'L'
  3335  0A46  3422               	retlw	34	;'"'
  3336  0A47  340D               	retlw	13
  3337  0A48  340A               	retlw	10
  3338  0A49  3400               	retlw	0
  3339  0A4A                     STR_31:	
  3340  0A4A  344B               	retlw	75	;'K'
  3341  0A4B  3465               	retlw	101	;'e'
  3342  0A4C  3479               	retlw	121	;'y'
  3343  0A4D  3442               	retlw	66	;'B'
  3344  0A4E  346F               	retlw	111	;'o'
  3345  0A4F  3461               	retlw	97	;'a'
  3346  0A50  3472               	retlw	114	;'r'
  3347  0A51  3464               	retlw	100	;'d'
  3348  0A52  3420               	retlw	32	;' '
  3349  0A53  3442               	retlw	66	;'B'
  3350  0A54  3461               	retlw	97	;'a'
  3351  0A55  3475               	retlw	117	;'u'
  3352  0A56  3464               	retlw	100	;'d'
  3353  0A57  3420               	retlw	32	;' '
  3354  0A58  3477               	retlw	119	;'w'
  3355  0A59  3469               	retlw	105	;'i'
  3356  0A5A  346C               	retlw	108	;'l'
  3357  0A5B  346C               	retlw	108	;'l'
  3358  0A5C  3420               	retlw	32	;' '
  3359  0A5D  3462               	retlw	98	;'b'
  3360  0A5E  3465               	retlw	101	;'e'
  3361  0A5F  3420               	retlw	32	;' '
  3362  0A60  3473               	retlw	115	;'s'
  3363  0A61  3465               	retlw	101	;'e'
  3364  0A62  3474               	retlw	116	;'t'
  3365  0A63  3420               	retlw	32	;' '
  3366  0A64  3474               	retlw	116	;'t'
  3367  0A65  346F               	retlw	111	;'o'
  3368  0A66  3420               	retlw	32	;' '
  3369  0A67  3425               	retlw	37	;'%'
  3370  0A68  346C               	retlw	108	;'l'
  3371  0A69  3475               	retlw	117	;'u'
  3372  0A6A  3400               	retlw	0
  3373  0A6B                     STR_37:	
  3374  0A6B  344B               	retlw	75	;'K'
  3375  0A6C  3465               	retlw	101	;'e'
  3376  0A6D  3479               	retlw	121	;'y'
  3377  0A6E  3442               	retlw	66	;'B'
  3378  0A6F  346F               	retlw	111	;'o'
  3379  0A70  3461               	retlw	97	;'a'
  3380  0A71  3472               	retlw	114	;'r'
  3381  0A72  3464               	retlw	100	;'d'
  3382  0A73  3420               	retlw	32	;' '
  3383  0A74  3442               	retlw	66	;'B'
  3384  0A75  3461               	retlw	97	;'a'
  3385  0A76  3475               	retlw	117	;'u'
  3386  0A77  3464               	retlw	100	;'d'
  3387  0A78  3420               	retlw	32	;' '
  3388  0A79  344F               	retlw	79	;'O'
  3389  0A7A  3475               	retlw	117	;'u'
  3390  0A7B  3474               	retlw	116	;'t'
  3391  0A7C  3420               	retlw	32	;' '
  3392  0A7D  346F               	retlw	111	;'o'
  3393  0A7E  3466               	retlw	102	;'f'
  3394  0A7F  3420               	retlw	32	;' '
  3395  0A80  3452               	retlw	82	;'R'
  3396  0A81  3461               	retlw	97	;'a'
  3397  0A82  346E               	retlw	110	;'n'
  3398  0A83  3467               	retlw	103	;'g'
  3399  0A84  3465               	retlw	101	;'e'
  3400  0A85  340D               	retlw	13
  3401  0A86  340A               	retlw	10
  3402  0A87  3400               	retlw	0
  3403  0A88                     STR_2:	
  3404  0A88  3450               	retlw	80	;'P'
  3405  0A89  3453               	retlw	83	;'S'
  3406  0A8A  342F               	retlw	47	;'/'
  3407  0A8B  3432               	retlw	50	;'2'
  3408  0A8C  3420               	retlw	32	;' '
  3409  0A8D  344B               	retlw	75	;'K'
  3410  0A8E  3465               	retlw	101	;'e'
  3411  0A8F  3479               	retlw	121	;'y'
  3412  0A90  3462               	retlw	98	;'b'
  3413  0A91  346F               	retlw	111	;'o'
  3414  0A92  3461               	retlw	97	;'a'
  3415  0A93  3472               	retlw	114	;'r'
  3416  0A94  3464               	retlw	100	;'d'
  3417  0A95  3420               	retlw	32	;' '
  3418  0A96  3474               	retlw	116	;'t'
  3419  0A97  346F               	retlw	111	;'o'
  3420  0A98  3420               	retlw	32	;' '
  3421  0A99  3452               	retlw	82	;'R'
  3422  0A9A  3453               	retlw	83	;'S'
  3423  0A9B  342D               	retlw	45	;'-'
  3424  0A9C  3432               	retlw	50	;'2'
  3425  0A9D  3433               	retlw	51	;'3'
  3426  0A9E  3432               	retlw	50	;'2'
  3427  0A9F  340D               	retlw	13
  3428  0AA0  340A               	retlw	10
  3429  0AA1  3400               	retlw	0
  3430  0AA2                     STR_20:	
  3431  0AA2  344B               	retlw	75	;'K'
  3432  0AA3  3465               	retlw	101	;'e'
  3433  0AA4  3479               	retlw	121	;'y'
  3434  0AA5  3442               	retlw	66	;'B'
  3435  0AA6  346F               	retlw	111	;'o'
  3436  0AA7  3461               	retlw	97	;'a'
  3437  0AA8  3472               	retlw	114	;'r'
  3438  0AA9  3464               	retlw	100	;'d'
  3439  0AAA  3420               	retlw	32	;' '
  3440  0AAB  3450               	retlw	80	;'P'
  3441  0AAC  3472               	retlw	114	;'r'
  3442  0AAD  346F               	retlw	111	;'o'
  3443  0AAE  3467               	retlw	103	;'g'
  3444  0AAF  3472               	retlw	114	;'r'
  3445  0AB0  3461               	retlw	97	;'a'
  3446  0AB1  346D               	retlw	109	;'m'
  3447  0AB2  3420               	retlw	32	;' '
  3448  0AB3  3446               	retlw	70	;'F'
  3449  0AB4  3461               	retlw	97	;'a'
  3450  0AB5  3469               	retlw	105	;'i'
  3451  0AB6  346C               	retlw	108	;'l'
  3452  0AB7  340D               	retlw	13
  3453  0AB8  340A               	retlw	10
  3454  0AB9  3400               	retlw	0
  3455  0ABA                     STR_15:	
  3456  0ABA  3420               	retlw	32	;' '
  3457  0ABB  3477               	retlw	119	;'w'
  3458  0ABC  3469               	retlw	105	;'i'
  3459  0ABD  3474               	retlw	116	;'t'
  3460  0ABE  3468               	retlw	104	;'h'
  3461  0ABF  3420               	retlw	32	;' '
  3462  0AC0  3445               	retlw	69	;'E'
  3463  0AC1  3476               	retlw	118	;'v'
  3464  0AC2  3465               	retlw	101	;'e'
  3465  0AC3  346E               	retlw	110	;'n'
  3466  0AC4  3420               	retlw	32	;' '
  3467  0AC5  3470               	retlw	112	;'p'
  3468  0AC6  3461               	retlw	97	;'a'
  3469  0AC7  3472               	retlw	114	;'r'
  3470  0AC8  3469               	retlw	105	;'i'
  3471  0AC9  3474               	retlw	116	;'t'
  3472  0ACA  3479               	retlw	121	;'y'
  3473  0ACB  3420               	retlw	32	;' '
  3474  0ACC  3462               	retlw	98	;'b'
  3475  0ACD  3469               	retlw	105	;'i'
  3476  0ACE  3474               	retlw	116	;'t'
  3477  0ACF  340D               	retlw	13
  3478  0AD0  340A               	retlw	10
  3479  0AD1  3400               	retlw	0
  3480  0AD2                     STR_6:	
  3481  0AD2  344E               	retlw	78	;'N'
  3482  0AD3  346F               	retlw	111	;'o'
  3483  0AD4  3420               	retlw	32	;' '
  3484  0AD5  344B               	retlw	75	;'K'
  3485  0AD6  3465               	retlw	101	;'e'
  3486  0AD7  3479               	retlw	121	;'y'
  3487  0AD8  3462               	retlw	98	;'b'
  3488  0AD9  346F               	retlw	111	;'o'
  3489  0ADA  3461               	retlw	97	;'a'
  3490  0ADB  3472               	retlw	114	;'r'
  3491  0ADC  3464               	retlw	100	;'d'
  3492  0ADD  3420               	retlw	32	;' '
  3493  0ADE  3463               	retlw	99	;'c'
  3494  0ADF  346F               	retlw	111	;'o'
  3495  0AE0  346E               	retlw	110	;'n'
  3496  0AE1  346E               	retlw	110	;'n'
  3497  0AE2  3465               	retlw	101	;'e'
  3498  0AE3  3463               	retlw	99	;'c'
  3499  0AE4  3474               	retlw	116	;'t'
  3500  0AE5  3465               	retlw	101	;'e'
  3501  0AE6  3464               	retlw	100	;'d'
  3502  0AE7  340D               	retlw	13
  3503  0AE8  340A               	retlw	10
  3504  0AE9  3400               	retlw	0
  3505  0AEA                     STR_14:	
  3506  0AEA  3420               	retlw	32	;' '
  3507  0AEB  3477               	retlw	119	;'w'
  3508  0AEC  3469               	retlw	105	;'i'
  3509  0AED  3474               	retlw	116	;'t'
  3510  0AEE  3468               	retlw	104	;'h'
  3511  0AEF  3420               	retlw	32	;' '
  3512  0AF0  344F               	retlw	79	;'O'
  3513  0AF1  3464               	retlw	100	;'d'
  3514  0AF2  3464               	retlw	100	;'d'
  3515  0AF3  3420               	retlw	32	;' '
  3516  0AF4  3470               	retlw	112	;'p'
  3517  0AF5  3461               	retlw	97	;'a'
  3518  0AF6  3472               	retlw	114	;'r'
  3519  0AF7  3469               	retlw	105	;'i'
  3520  0AF8  3474               	retlw	116	;'t'
  3521  0AF9  3479               	retlw	121	;'y'
  3522  0AFA  3420               	retlw	32	;' '
  3523  0AFB  3462               	retlw	98	;'b'
  3524  0AFC  3469               	retlw	105	;'i'
  3525  0AFD  3474               	retlw	116	;'t'
  3526  0AFE  340D               	retlw	13
  3527  0AFF  340A               	retlw	10
  3528  0B00  3400               	retlw	0
  3529  0B01                     STR_8:	
  3530  0B01  3449               	retlw	73	;'I'
  3531  0B02  346E               	retlw	110	;'n'
  3532  0B03  3469               	retlw	105	;'i'
  3533  0B04  3474               	retlw	116	;'t'
  3534  0B05  3469               	retlw	105	;'i'
  3535  0B06  3461               	retlw	97	;'a'
  3536  0B07  346C               	retlw	108	;'l'
  3537  0B08  3469               	retlw	105	;'i'
  3538  0B09  347A               	retlw	122	;'z'
  3539  0B0A  3461               	retlw	97	;'a'
  3540  0B0B  3474               	retlw	116	;'t'
  3541  0B0C  3469               	retlw	105	;'i'
  3542  0B0D  346F               	retlw	111	;'o'
  3543  0B0E  346E               	retlw	110	;'n'
  3544  0B0F  3420               	retlw	32	;' '
  3545  0B10  3446               	retlw	70	;'F'
  3546  0B11  3461               	retlw	97	;'a'
  3547  0B12  3469               	retlw	105	;'i'
  3548  0B13  346C               	retlw	108	;'l'
  3549  0B14  340D               	retlw	13
  3550  0B15  340A               	retlw	10
  3551  0B16  3400               	retlw	0
  3552  0B17                     STR_13:	
  3553  0B17  344B               	retlw	75	;'K'
  3554  0B18  3465               	retlw	101	;'e'
  3555  0B19  3479               	retlw	121	;'y'
  3556  0B1A  3442               	retlw	66	;'B'
  3557  0B1B  346F               	retlw	111	;'o'
  3558  0B1C  3461               	retlw	97	;'a'
  3559  0B1D  3472               	retlw	114	;'r'
  3560  0B1E  3464               	retlw	100	;'d'
  3561  0B1F  3420               	retlw	32	;' '
  3562  0B20  3442               	retlw	66	;'B'
  3563  0B21  3461               	retlw	97	;'a'
  3564  0B22  3475               	retlw	117	;'u'
  3565  0B23  3464               	retlw	100	;'d'
  3566  0B24  3420               	retlw	32	;' '
  3567  0B25  3469               	retlw	105	;'i'
  3568  0B26  3473               	retlw	115	;'s'
  3569  0B27  3420               	retlw	32	;' '
  3570  0B28  3425               	retlw	37	;'%'
  3571  0B29  346C               	retlw	108	;'l'
  3572  0B2A  3475               	retlw	117	;'u'
  3573  0B2B  3400               	retlw	0
  3574  0B2C                     STR_7:	
  3575  0B2C  344B               	retlw	75	;'K'
  3576  0B2D  3465               	retlw	101	;'e'
  3577  0B2E  3479               	retlw	121	;'y'
  3578  0B2F  3462               	retlw	98	;'b'
  3579  0B30  346F               	retlw	111	;'o'
  3580  0B31  3461               	retlw	97	;'a'
  3581  0B32  3472               	retlw	114	;'r'
  3582  0B33  3464               	retlw	100	;'d'
  3583  0B34  3420               	retlw	32	;' '
  3584  0B35  3443               	retlw	67	;'C'
  3585  0B36  346F               	retlw	111	;'o'
  3586  0B37  346E               	retlw	110	;'n'
  3587  0B38  346E               	retlw	110	;'n'
  3588  0B39  3465               	retlw	101	;'e'
  3589  0B3A  3463               	retlw	99	;'c'
  3590  0B3B  3474               	retlw	116	;'t'
  3591  0B3C  3465               	retlw	101	;'e'
  3592  0B3D  3464               	retlw	100	;'d'
  3593  0B3E  340D               	retlw	13
  3594  0B3F  340A               	retlw	10
  3595  0B40  3400               	retlw	0
  3596  0B41                     STR_11:	
  3597  0B41  3456               	retlw	86	;'V'
  3598  0B42  346F               	retlw	111	;'o'
  3599  0B43  346C               	retlw	108	;'l'
  3600  0B44  3474               	retlw	116	;'t'
  3601  0B45  3461               	retlw	97	;'a'
  3602  0B46  3467               	retlw	103	;'g'
  3603  0B47  3465               	retlw	101	;'e'
  3604  0B48  3420               	retlw	32	;' '
  3605  0B49  3474               	retlw	116	;'t'
  3606  0B4A  346F               	retlw	111	;'o'
  3607  0B4B  346F               	retlw	111	;'o'
  3608  0B4C  3420               	retlw	32	;' '
  3609  0B4D  3448               	retlw	72	;'H'
  3610  0B4E  3469               	retlw	105	;'i'
  3611  0B4F  3467               	retlw	103	;'g'
  3612  0B50  3468               	retlw	104	;'h'
  3613  0B51  3421               	retlw	33	;'!'
  3614  0B52  340D               	retlw	13
  3615  0B53  340A               	retlw	10
  3616  0B54  3400               	retlw	0
  3617  0B55                     STR_10:	
  3618  0B55  3456               	retlw	86	;'V'
  3619  0B56  346F               	retlw	111	;'o'
  3620  0B57  346C               	retlw	108	;'l'
  3621  0B58  3474               	retlw	116	;'t'
  3622  0B59  3461               	retlw	97	;'a'
  3623  0B5A  3467               	retlw	103	;'g'
  3624  0B5B  3465               	retlw	101	;'e'
  3625  0B5C  3420               	retlw	32	;' '
  3626  0B5D  3474               	retlw	116	;'t'
  3627  0B5E  346F               	retlw	111	;'o'
  3628  0B5F  346F               	retlw	111	;'o'
  3629  0B60  3420               	retlw	32	;' '
  3630  0B61  344C               	retlw	76	;'L'
  3631  0B62  346F               	retlw	111	;'o'
  3632  0B63  3477               	retlw	119	;'w'
  3633  0B64  3421               	retlw	33	;'!'
  3634  0B65  340D               	retlw	13
  3635  0B66  340A               	retlw	10
  3636  0B67  3400               	retlw	0
  3637  0B68                     STR_3:	
  3638  0B68  3446               	retlw	70	;'F'
  3639  0B69  3469               	retlw	105	;'i'
  3640  0B6A  3472               	retlw	114	;'r'
  3641  0B6B  346D               	retlw	109	;'m'
  3642  0B6C  3477               	retlw	119	;'w'
  3643  0B6D  3461               	retlw	97	;'a'
  3644  0B6E  3472               	retlw	114	;'r'
  3645  0B6F  3465               	retlw	101	;'e'
  3646  0B70  3420               	retlw	32	;' '
  3647  0B71  3456               	retlw	86	;'V'
  3648  0B72  3465               	retlw	101	;'e'
  3649  0B73  3472               	retlw	114	;'r'
  3650  0B74  3473               	retlw	115	;'s'
  3651  0B75  3469               	retlw	105	;'i'
  3652  0B76  346F               	retlw	111	;'o'
  3653  0B77  346E               	retlw	110	;'n'
  3654  0B78  343A               	retlw	58	;':'
  3655  0B79  3420               	retlw	32	;' '
  3656  0B7A  3400               	retlw	0
  3657  0B7B                     STR_28:	
  3658  0B7B  3445               	retlw	69	;'E'
  3659  0B7C  346E               	retlw	110	;'n'
  3660  0B7D  3474               	retlw	116	;'t'
  3661  0B7E  3465               	retlw	101	;'e'
  3662  0B7F  3472               	retlw	114	;'r'
  3663  0B80  3420               	retlw	32	;' '
  3664  0B81  3442               	retlw	66	;'B'
  3665  0B82  3461               	retlw	97	;'a'
  3666  0B83  3475               	retlw	117	;'u'
  3667  0B84  3464               	retlw	100	;'d'
  3668  0B85  3420               	retlw	32	;' '
  3669  0B86  3472               	retlw	114	;'r'
  3670  0B87  3461               	retlw	97	;'a'
  3671  0B88  3474               	retlw	116	;'t'
  3672  0B89  3465               	retlw	101	;'e'
  3673  0B8A  340D               	retlw	13
  3674  0B8B  340A               	retlw	10
  3675  0B8C  3400               	retlw	0
  3676  0B8D                     STR_17:	
  3677  0B8D  3420               	retlw	32	;' '
  3678  0B8E  3477               	retlw	119	;'w'
  3679  0B8F  3469               	retlw	105	;'i'
  3680  0B90  3474               	retlw	116	;'t'
  3681  0B91  3468               	retlw	104	;'h'
  3682  0B92  3420               	retlw	32	;' '
  3683  0B93  3453               	retlw	83	;'S'
  3684  0B94  3470               	retlw	112	;'p'
  3685  0B95  3461               	retlw	97	;'a'
  3686  0B96  3463               	retlw	99	;'c'
  3687  0B97  3465               	retlw	101	;'e'
  3688  0B98  3420               	retlw	32	;' '
  3689  0B99  3462               	retlw	98	;'b'
  3690  0B9A  3469               	retlw	105	;'i'
  3691  0B9B  3474               	retlw	116	;'t'
  3692  0B9C  340D               	retlw	13
  3693  0B9D  340A               	retlw	10
  3694  0B9E  3400               	retlw	0
  3695  0B9F                     STR_16:	
  3696  0B9F  3420               	retlw	32	;' '
  3697  0BA0  3477               	retlw	119	;'w'
  3698  0BA1  3469               	retlw	105	;'i'
  3699  0BA2  3474               	retlw	116	;'t'
  3700  0BA3  3468               	retlw	104	;'h'
  3701  0BA4  3420               	retlw	32	;' '
  3702  0BA5  344D               	retlw	77	;'M'
  3703  0BA6  3461               	retlw	97	;'a'
  3704  0BA7  3472               	retlw	114	;'r'
  3705  0BA8  346B               	retlw	107	;'k'
  3706  0BA9  3420               	retlw	32	;' '
  3707  0BAA  3462               	retlw	98	;'b'
  3708  0BAB  3469               	retlw	105	;'i'
  3709  0BAC  3474               	retlw	116	;'t'
  3710  0BAD  340D               	retlw	13
  3711  0BAE  340A               	retlw	10
  3712  0BAF  3400               	retlw	0
  3713  0BB0                     STR_9:	
  3714  0BB0  344B               	retlw	75	;'K'
  3715  0BB1  3465               	retlw	101	;'e'
  3716  0BB2  3479               	retlw	121	;'y'
  3717  0BB3  3462               	retlw	98	;'b'
  3718  0BB4  346F               	retlw	111	;'o'
  3719  0BB5  3461               	retlw	97	;'a'
  3720  0BB6  3472               	retlw	114	;'r'
  3721  0BB7  3464               	retlw	100	;'d'
  3722  0BB8  3420               	retlw	32	;' '
  3723  0BB9  3450               	retlw	80	;'P'
  3724  0BBA  3461               	retlw	97	;'a'
  3725  0BBB  3473               	retlw	115	;'s'
  3726  0BBC  3473               	retlw	115	;'s'
  3727  0BBD  3421               	retlw	33	;'!'
  3728  0BBE  340D               	retlw	13
  3729  0BBF  340A               	retlw	10
  3730  0BC0  3400               	retlw	0
  3731  0BC1                     __end_of__stringdata:	
  3732                           
  3733                           ; #config settings
  3734  0000                     
  3735                           	psect	cinit
  3736  00E3                     start_initialization:	
  3737  00E3                     __initialization:	
  3738                           
  3739                           ; Clear objects allocated to BANK0
  3740  00E3  01E6               	clrf	__pbssBANK0& (0+127)
  3741  00E4  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3742  00E5  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3743  00E6  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3744  00E7  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3745                           
  3746                           ; Clear objects allocated to BANK1
  3747  00E8  0021               	movlb	1	; select bank1
  3748  00E9  01E8               	clrf	__pbssBANK1& (0+127)
  3749  00EA  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3750  00EB  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3751  00EC  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  3752                           
  3753                           ; Clear objects allocated to BANK2
  3754  00ED  305F               	movlw	low __pbssBANK2
  3755  00EE  0084               	movwf	4
  3756  00EF  3001               	movlw	high __pbssBANK2
  3757  00F0  0085               	movwf	5
  3758  00F1  300E               	movlw	14
  3759  00F2  3198  20E1  3180   	fcall	clear_ram0
  3760                           
  3761                           ; Clear objects allocated to BANK3
  3762  00F5  30A0               	movlw	low __pbssBANK3
  3763  00F6  0084               	movwf	4
  3764  00F7  3001               	movlw	high __pbssBANK3
  3765  00F8  0085               	movwf	5
  3766  00F9  300F               	movlw	15
  3767  00FA  3198  20E1  3180   	fcall	clear_ram0
  3768                           
  3769                           ; Clear objects allocated to BANK4
  3770  00FD  3020               	movlw	low __pbssBANK4
  3771  00FE  0084               	movwf	4
  3772  00FF  3002               	movlw	high __pbssBANK4
  3773  0100  0085               	movwf	5
  3774  0101  300C               	movlw	12
  3775  0102  3198  20E1  3180   	fcall	clear_ram0
  3776                           
  3777                           ; Initialize objects allocated to BANK2
  3778  0105  0022               	movlb	2	; select bank2
  3779  0106  3198  20D9  3180   	fcall	__pidataBANK2	;fetch initializer
  3780  0109  00ED               	movwf	__pdataBANK2& (0+127)
  3781  010A  3198  20DA  3180   	fcall	__pidataBANK2+1	;fetch initializer
  3782  010D  00EE               	movwf	(__pdataBANK2+1)& (0+127)
  3783                           
  3784                           ; Initialize objects allocated to BANK4
  3785  010E  3027               	movlw	low __pidataBANK4
  3786  010F  0084               	movwf	4
  3787  0110  3099               	movlw	(high __pidataBANK4)| (0+128)
  3788  0111  0085               	movwf	5
  3789  0112  302C               	movlw	low __pdataBANK4
  3790  0113  0086               	movwf	6
  3791  0114  3002               	movlw	high __pdataBANK4
  3792  0115  0087               	movwf	7
  3793  0116  300C               	movlw	12
  3794  0117  3198  20DB         	fcall	init_ram
  3795  0119                     end_of_initialization:	
  3796                           ;End of C runtime variable initialization code
  3797                           
  3798  0119                     __end_of__initialization:	
  3799  0119  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3800  011A  0020               	movlb	0
  3801  011B  318E  2E2A         	ljmp	_main	;jump to C main() function
  3802                           
  3803                           	psect	bssBANK0
  3804  0066                     __pbssBANK0:	
  3805  0066                     _BatteryVoltage:	
  3806  0066                     	ds	4
  3807  006A                     _PS_2_bits:	
  3808  006A                     	ds	1
  3809                           
  3810                           	psect	bssBANK1
  3811  00E8                     __pbssBANK1:	
  3812  00E8                     _Alarm:	
  3813  00E8                     	ds	1
  3814  00E9                     _ECHO:	
  3815  00E9                     	ds	1
  3816  00EA                     _PARITY:	
  3817  00EA                     	ds	1
  3818  00EB                     _blinkdelay:	
  3819  00EB                     	ds	1
  3820                           
  3821                           	psect	bssBANK2
  3822  015F                     __pbssBANK2:	
  3823  015F                     _BaudTyped:	
  3824  015F                     	ds	4
  3825  0163                     _BAUDMODE:	
  3826  0163                     	ds	1
  3827  0164                     _Caps_Lock_Key:	
  3828  0164                     	ds	1
  3829  0165                     _Caps_Lock_Key_old:	
  3830  0165                     	ds	1
  3831  0166                     _Delete:	
  3832  0166                     	ds	1
  3833  0167                     _LALT:	
  3834  0167                     	ds	1
  3835  0168                     _LControl:	
  3836  0168                     	ds	1
  3837  0169                     _Left_Shift_Key_old:	
  3838  0169                     	ds	1
  3839  016A                     _RControl:	
  3840  016A                     	ds	1
  3841  016B                     _Right_Shift_Key_old:	
  3842  016B                     	ds	1
  3843  016C                     _i:	
  3844  016C                     	ds	1
  3845                           
  3846                           	psect	dataBANK2
  3847  016D                     __pdataBANK2:	
  3848  016D                     _Read_Timer:	
  3849  016D                     	ds	2
  3850                           
  3851                           	psect	bssBANK3
  3852  01A0                     __pbssBANK3:	
  3853  01A0                     _PS_2_Read_Data_First:	
  3854  01A0                     	ds	2
  3855  01A2                     _PS_2_Read_Data_Forth:	
  3856  01A2                     	ds	2
  3857  01A4                     _PS_2_Read_Data_Second:	
  3858  01A4                     	ds	2
  3859  01A6                     _PS_2_Read_Data_Third:	
  3860  01A6                     	ds	2
  3861  01A8                     _CapsCount:	
  3862  01A8                     	ds	1
  3863  01A9                     _Caps_Lock:	
  3864  01A9                     	ds	1
  3865  01AA                     _Left_Shift_Key:	
  3866  01AA                     	ds	1
  3867  01AB                     _ParityTyped:	
  3868  01AB                     	ds	1
  3869  01AC                     _RALT:	
  3870  01AC                     	ds	1
  3871  01AD                     _Right_Shift_Key:	
  3872  01AD                     	ds	1
  3873  01AE                     _Shift_Key:	
  3874  01AE                     	ds	1
  3875                           
  3876                           	psect	bssBANK4
  3877  0220                     __pbssBANK4:	
  3878  0220                     _PS_2_Read_Data_FirstTEMP:	
  3879  0220                     	ds	2
  3880  0222                     _PS_2_Read_Data_ForthTEMP:	
  3881  0222                     	ds	2
  3882  0224                     _PS_2_Read_Data_SecondTEMP:	
  3883  0224                     	ds	2
  3884  0226                     _PS_2_Read_Data_ThirdTEMP:	
  3885  0226                     	ds	2
  3886  0228                     _SinLEDtimer:	
  3887  0228                     	ds	2
  3888  022A                     _pwrLEDtoggle:	
  3889  022A                     	ds	2
  3890                           
  3891                           	psect	dataBANK4
  3892  022C                     __pdataBANK4:	
  3893  022C                     _BAUD:	
  3894  022C                     	ds	4
  3895  0230                     _MEM:	
  3896  0230                     	ds	4
  3897  0234                     _Version:	
  3898  0234                     	ds	4
  3899                           
  3900                           	psect	clrtext
  3901  18E1                     clear_ram0:	
  3902                           ;	Called with FSR0 containing the base address, and
  3903                           ;	WREG with the size to clear
  3904                           
  3905  18E1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3906  18E2                     clrloop0:	
  3907  18E2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3908  18E3  3101               	addfsr 0,1
  3909  18E4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3910  18E5  28E2               	goto	clrloop0	;have we reached the end yet?
  3911  18E6  3400               	retlw	0	;all done for this memory range, return
  3912                           
  3913                           	psect	inittext
  3914  18DB                     init_ram:	
  3915  18DB  00FE               	movwf	126
  3916  18DC                     initloop:	
  3917  18DC  0012               	moviw fsr0++
  3918  18DD  001E               	movwi fsr1++
  3919  18DE  0BFE               	decfsz	126,f
  3920  18DF  28DC               	goto	initloop
  3921  18E0  3400               	retlw	0
  3922                           
  3923                           	psect	cstackBANK5
  3924  02A0                     __pcstackBANK5:	
  3925  02A0                     PS_2_Update@buf:	
  3926                           
  3927                           ; 60 bytes @ 0x0
  3928  02A0                     	ds	60
  3929  02DC                     _PS_2_Update$818:	
  3930                           
  3931                           ; 1 bytes @ 0x3C
  3932  02DC                     	ds	1
  3933  02DD                     _PS_2_Update$819:	
  3934                           
  3935                           ; 1 bytes @ 0x3D
  3936  02DD                     	ds	1
  3937  02DE                     _PS_2_Update$820:	
  3938                           
  3939                           ; 1 bytes @ 0x3E
  3940  02DE                     	ds	1
  3941  02DF                     _PS_2_Update$821:	
  3942                           
  3943                           ; 1 bytes @ 0x3F
  3944  02DF                     	ds	1
  3945  02E0                     PS_2_Update@temp:	
  3946                           
  3947                           ; 1 bytes @ 0x40
  3948  02E0                     	ds	1
  3949                           
  3950                           	psect	cstackBANK3
  3951  01AF                     __pcstackBANK3:	
  3952  01AF                     ??_PS_2_Update:	
  3953                           
  3954                           ; 0 bytes @ 0x0
  3955  01AF                     	ds	9
  3956                           
  3957                           	psect	cstackBANK2
  3958  0120                     __pcstackBANK2:	
  3959  0120                     SetBaud@buf:	
  3960                           
  3961                           ; 50 bytes @ 0x0
  3962  0120                     	ds	50
  3963  0152                     SetBaud@Baudtemp:	
  3964                           
  3965                           ; 4 bytes @ 0x32
  3966  0152                     	ds	4
  3967  0156                     SetBaud@Paritytemp:	
  3968                           
  3969                           ; 4 bytes @ 0x36
  3970  0156                     	ds	4
  3971  015A                     SetBaud@temp:	
  3972                           
  3973                           ; 4 bytes @ 0x3A
  3974  015A                     	ds	4
  3975  015E                     SetBaud@i:	
  3976                           
  3977                           ; 1 bytes @ 0x3E
  3978  015E                     	ds	1
  3979                           
  3980                           	psect	cstackBANK1
  3981  00A0                     __pcstackBANK1:	
  3982  00A0                     ReadVoltage@voltage:	
  3983  00A0                     WriteFlash_Sequential@TempBufH:	
  3984                           ; 4 bytes @ 0x0
  3985                           
  3986  00A0                     Init_System@buf:	
  3987                           ; 32 bytes @ 0x0
  3988                           
  3989                           
  3990                           ; 60 bytes @ 0x0
  3991  00A0                     	ds	4
  3992  00A4                     ReadVoltage@temp:	
  3993                           
  3994                           ; 2 bytes @ 0x4
  3995  00A4                     	ds	28
  3996  00C0                     WriteFlash_Sequential@TempBufL:	
  3997                           
  3998                           ; 32 bytes @ 0x20
  3999  00C0                     	ds	28
  4000  00DC                     Init_System@temp:	
  4001                           
  4002                           ; 4 bytes @ 0x3C
  4003  00DC                     	ds	4
  4004  00E0                     Init_System@Parity:	
  4005  00E0                     WriteFlash_Sequential@tempH:	
  4006                           ; 1 bytes @ 0x40
  4007                           
  4008                           
  4009                           ; 1 bytes @ 0x40
  4010  00E0                     	ds	1
  4011  00E1                     WriteFlash_Sequential@tempL:	
  4012  00E1                     Init_System@Baud:	
  4013                           ; 1 bytes @ 0x41
  4014                           
  4015                           
  4016                           ; 4 bytes @ 0x41
  4017  00E1                     	ds	1
  4018  00E2                     WriteFlash_Sequential@amountTemp:	
  4019                           
  4020                           ; 1 bytes @ 0x42
  4021  00E2                     	ds	1
  4022  00E3                     WriteFlash_Sequential@temp:	
  4023                           
  4024                           ; 2 bytes @ 0x43
  4025  00E3                     	ds	2
  4026  00E5                     WriteFlash_Sequential@spaces:	
  4027                           
  4028                           ; 1 bytes @ 0x45
  4029  00E5                     	ds	1
  4030  00E6                     WriteFlash_Sequential@i:	
  4031                           
  4032                           ; 1 bytes @ 0x46
  4033  00E6                     	ds	1
  4034  00E7                     main@i:	
  4035                           
  4036                           ; 1 bytes @ 0x47
  4037  00E7                     	ds	1
  4038                           
  4039                           	psect	cstackCOMMON
  4040  0070                     __pcstackCOMMON:	
  4041  0070                     ?_ConfigureOscillator:	
  4042  0070                     ?_InitApp:	
  4043                           ; 0 bytes @ 0x0
  4044                           
  4045  0070                     ?_Init_System:	
  4046                           ; 0 bytes @ 0x0
  4047                           
  4048  0070                     ?_PS_2_INIT:	
  4049                           ; 0 bytes @ 0x0
  4050                           
  4051  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4052                           ; 0 bytes @ 0x0
  4053                           
  4054  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4055                           ; 0 bytes @ 0x0
  4056                           
  4057  0070                     ?_PS_2_Update:	
  4058                           ; 0 bytes @ 0x0
  4059                           
  4060  0070                     ?_baudUSART:	
  4061                           ; 0 bytes @ 0x0
  4062                           
  4063  0070                     ?_Clock_TRIS:	
  4064                           ; 0 bytes @ 0x0
  4065                           
  4066  0070                     ?_Data_TRIS:	
  4067                           ; 0 bytes @ 0x0
  4068                           
  4069  0070                     ?_INIT_PS_2_INTERRUPT:	
  4070                           ; 0 bytes @ 0x0
  4071                           
  4072  0070                     ?_DisableInternalADC:	
  4073                           ; 0 bytes @ 0x0
  4074                           
  4075  0070                     ?_isr:	
  4076                           ; 0 bytes @ 0x0
  4077                           
  4078  0070                     ?_main:	
  4079                           ; 0 bytes @ 0x0
  4080                           
  4081  0070                     ?_CloseUSART:	
  4082                           ; 0 bytes @ 0x0
  4083                           
  4084  0070                     ?_UNLOCK:	
  4085                           ; 0 bytes @ 0x0
  4086                           
  4087  0070                     ?i1_delayUS:	
  4088                           ; 0 bytes @ 0x0
  4089                           
  4090  0070                     ??i1_ReadUSART:	
  4091                           ; 0 bytes @ 0x0
  4092                           
  4093  0070                     ??i1_READ_PS_2_PIN:	
  4094                           ; 0 bytes @ 0x0
  4095                           
  4096  0070                     ?_READ_PS_2_PIN:	
  4097                           ; 0 bytes @ 0x0
  4098                           
  4099  0070                     ?_ReadUSART:	
  4100                           ; 1 bytes @ 0x0
  4101                           
  4102  0070                     ?_Keyboard_Connected:	
  4103                           ; 1 bytes @ 0x0
  4104                           
  4105  0070                     ?_Init_PS_2_Send:	
  4106                           ; 1 bytes @ 0x0
  4107                           
  4108  0070                     ?_Decode_Scan_Code_Shift:	
  4109                           ; 1 bytes @ 0x0
  4110                           
  4111  0070                     ?_Send_PS2:	
  4112                           ; 1 bytes @ 0x0
  4113                           
  4114  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4115                           ; 1 bytes @ 0x0
  4116                           
  4117  0070                     ?_Decode_Scan_Code:	
  4118                           ; 1 bytes @ 0x0
  4119                           
  4120  0070                     ?_Decode_Scan_Code_Function:	
  4121                           ; 1 bytes @ 0x0
  4122                           
  4123  0070                     ?_Reverse_Byte:	
  4124                           ; 1 bytes @ 0x0
  4125                           
  4126  0070                     ?_ISNUMBER:	
  4127                           ; 1 bytes @ 0x0
  4128                           
  4129  0070                     ?i1_CheckSum_byte:	
  4130                           ; 1 bytes @ 0x0
  4131                           
  4132  0070                     ?i1_ReadUSART:	
  4133                           ; 1 bytes @ 0x0
  4134                           
  4135  0070                     ?i1_READ_PS_2_PIN:	
  4136                           ; 1 bytes @ 0x0
  4137                           
  4138  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4139                           ; 1 bytes @ 0x0
  4140                           
  4141  0070                     i1CheckSum_byte@This:	
  4142                           ; 1 bytes @ 0x0
  4143                           
  4144  0070                     i1delayUS@US:	
  4145                           ; 2 bytes @ 0x0
  4146                           
  4147                           
  4148                           ; 4 bytes @ 0x0
  4149  0070                     	ds	1
  4150  0071                     i1ReadUSART@data:	
  4151                           
  4152                           ; 1 bytes @ 0x1
  4153  0071                     	ds	1
  4154  0072                     i1CheckSum_byte@Odd_Even:	
  4155                           
  4156                           ; 1 bytes @ 0x2
  4157  0072                     	ds	1
  4158  0073                     ??i1_CheckSum_byte:	
  4159                           
  4160                           ; 0 bytes @ 0x3
  4161  0073                     	ds	1
  4162  0074                     ??i1_delayUS:	
  4163  0074                     i1CheckSum_byte@ThisTemp:	
  4164                           ; 0 bytes @ 0x4
  4165                           
  4166                           
  4167                           ; 2 bytes @ 0x4
  4168  0074                     	ds	1
  4169  0075                     i1delayUS@i:	
  4170                           
  4171                           ; 4 bytes @ 0x5
  4172  0075                     	ds	1
  4173  0076                     i1CheckSum_byte@Parity:	
  4174                           
  4175                           ; 1 bytes @ 0x6
  4176  0076                     	ds	1
  4177  0077                     i1CheckSum_byte@i:	
  4178                           
  4179                           ; 1 bytes @ 0x7
  4180  0077                     	ds	1
  4181  0078                     ?i1_UARTchar:	
  4182  0078                     i1UARTchar@NinethBit_override:	
  4183                           ; 0 bytes @ 0x8
  4184                           
  4185                           
  4186                           ; 1 bytes @ 0x8
  4187  0078                     	ds	1
  4188  0079                     i1delayUS@j:	
  4189  0079                     i1UARTchar@NinethBit_override_data:	
  4190                           ; 1 bytes @ 0x9
  4191                           
  4192                           
  4193                           ; 1 bytes @ 0x9
  4194  0079                     	ds	1
  4195  007A                     ??i1_UARTchar:	
  4196  007A                     ?i1_UART_send_break_timed:	
  4197                           ; 0 bytes @ 0xA
  4198                           
  4199  007A                     i1UART_send_break_timed@US:	
  4200                           ; 0 bytes @ 0xA
  4201                           
  4202                           
  4203                           ; 2 bytes @ 0xA
  4204  007A                     	ds	2
  4205  007C                     ??i1_UART_send_break_timed:	
  4206                           
  4207                           ; 0 bytes @ 0xC
  4208  007C                     	ds	2
  4209                           
  4210                           	psect	cstackBANK0
  4211  0020                     __pcstackBANK0:	
  4212  0020                     i1UARTchar@data:	
  4213                           
  4214                           ; 1 bytes @ 0x0
  4215  0020                     	ds	1
  4216  0021                     ??_isr:	
  4217                           
  4218                           ; 0 bytes @ 0x1
  4219  0021                     	ds	2
  4220  0023                     isr@Rx_fault:	
  4221                           
  4222                           ; 1 bytes @ 0x3
  4223  0023                     	ds	1
  4224  0024                     isr@rx:	
  4225                           
  4226                           ; 1 bytes @ 0x4
  4227  0024                     	ds	1
  4228  0025                     ??_READ_PS_2_PIN:	
  4229  0025                     ??_ReadUSART:	
  4230                           ; 0 bytes @ 0x5
  4231                           
  4232  0025                     ??_ConfigureOscillator:	
  4233                           ; 0 bytes @ 0x5
  4234                           
  4235  0025                     ??_InitApp:	
  4236                           ; 0 bytes @ 0x5
  4237                           
  4238  0025                     ?_delayUS:	
  4239                           ; 0 bytes @ 0x5
  4240                           
  4241  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4242                           ; 0 bytes @ 0x5
  4243                           
  4244  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4245                           ; 0 bytes @ 0x5
  4246                           
  4247  0025                     ?_OpenUSART:	
  4248                           ; 0 bytes @ 0x5
  4249                           
  4250  0025                     ??_baudUSART:	
  4251                           ; 0 bytes @ 0x5
  4252                           
  4253  0025                     ??_Clock_TRIS:	
  4254                           ; 0 bytes @ 0x5
  4255                           
  4256  0025                     ??_Data_TRIS:	
  4257                           ; 0 bytes @ 0x5
  4258                           
  4259  0025                     ??_INIT_PS_2_INTERRUPT:	
  4260                           ; 0 bytes @ 0x5
  4261                           
  4262  0025                     ??_Decode_Scan_Code_Shift:	
  4263                           ; 0 bytes @ 0x5
  4264                           
  4265  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4266                           ; 0 bytes @ 0x5
  4267                           
  4268  0025                     ??_Decode_Scan_Code:	
  4269                           ; 0 bytes @ 0x5
  4270                           
  4271  0025                     ??_Decode_Scan_Code_Function:	
  4272                           ; 0 bytes @ 0x5
  4273                           
  4274  0025                     ??_DisableInternalADC:	
  4275                           ; 0 bytes @ 0x5
  4276                           
  4277  0025                     ??_Reverse_Byte:	
  4278                           ; 0 bytes @ 0x5
  4279                           
  4280  0025                     ??_ISNUMBER:	
  4281                           ; 0 bytes @ 0x5
  4282                           
  4283  0025                     ??_CloseUSART:	
  4284                           ; 0 bytes @ 0x5
  4285                           
  4286  0025                     ??_UNLOCK:	
  4287                           ; 0 bytes @ 0x5
  4288                           
  4289  0025                     ?_BlockErase:	
  4290                           ; 0 bytes @ 0x5
  4291                           
  4292  0025                     ?___flge:	
  4293                           ; 0 bytes @ 0x5
  4294                           
  4295  0025                     ?_CheckSum_byte:	
  4296                           ; 1 bit 
  4297                           
  4298  0025                     ?_ReadFlash_2Byte:	
  4299                           ; 1 bytes @ 0x5
  4300                           
  4301  0025                     ?___flpack:	
  4302                           ; 2 bytes @ 0x5
  4303                           
  4304  0025                     ?___lmul:	
  4305                           ; 4 bytes @ 0x5
  4306                           
  4307  0025                     ?___lldiv:	
  4308                           ; 4 bytes @ 0x5
  4309                           
  4310  0025                     ISNUMBER@ascii:	
  4311                           ; 4 bytes @ 0x5
  4312                           
  4313  0025                     baudUSART@baudconfig:	
  4314                           ; 1 bytes @ 0x5
  4315                           
  4316  0025                     Clock_TRIS@direction:	
  4317                           ; 1 bytes @ 0x5
  4318                           
  4319  0025                     Data_TRIS@direction:	
  4320                           ; 1 bytes @ 0x5
  4321                           
  4322  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4323                           ; 1 bytes @ 0x5
  4324                           
  4325  0025                     READ_PS_2_PIN@DATA_CLK:	
  4326                           ; 1 bytes @ 0x5
  4327                           
  4328  0025                     Decode_Scan_Code@Code:	
  4329                           ; 1 bytes @ 0x5
  4330                           
  4331  0025                     Decode_Scan_Code_Shift@Code:	
  4332                           ; 1 bytes @ 0x5
  4333                           
  4334  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4335                           ; 1 bytes @ 0x5
  4336                           
  4337  0025                     Decode_Scan_Code_Function@Code:	
  4338                           ; 1 bytes @ 0x5
  4339                           
  4340  0025                     CheckSum_byte@This:	
  4341                           ; 1 bytes @ 0x5
  4342                           
  4343  0025                     OpenUSART@spbrg:	
  4344                           ; 2 bytes @ 0x5
  4345                           
  4346  0025                     ReadFlash_2Byte@row:	
  4347                           ; 2 bytes @ 0x5
  4348                           
  4349  0025                     BlockErase@row:	
  4350                           ; 2 bytes @ 0x5
  4351                           
  4352  0025                     delayUS@US:	
  4353                           ; 2 bytes @ 0x5
  4354                           
  4355  0025                     ___lmul@multiplier:	
  4356                           ; 4 bytes @ 0x5
  4357                           
  4358  0025                     ___flpack@arg:	
  4359                           ; 4 bytes @ 0x5
  4360                           
  4361  0025                     ___flge@ff1:	
  4362                           ; 4 bytes @ 0x5
  4363                           
  4364  0025                     ___lldiv@divisor:	
  4365                           ; 4 bytes @ 0x5
  4366                           
  4367                           
  4368                           ; 4 bytes @ 0x5
  4369  0025                     	ds	1
  4370  0026                     ??_PS_2_INIT:	
  4371  0026                     ReadUSART@data:	
  4372                           ; 0 bytes @ 0x6
  4373                           
  4374  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4375                           ; 1 bytes @ 0x6
  4376                           
  4377  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4378                           ; 1 bytes @ 0x6
  4379                           
  4380                           
  4381                           ; 1 bytes @ 0x6
  4382  0026                     	ds	1
  4383  0027                     ??_OpenUSART:	
  4384  0027                     ??_BlockErase:	
  4385                           ; 0 bytes @ 0x7
  4386                           
  4387  0027                     CheckSum_byte@Odd_Even:	
  4388                           ; 0 bytes @ 0x7
  4389                           
  4390  0027                     Reverse_Byte@temp:	
  4391                           ; 1 bytes @ 0x7
  4392                           
  4393  0027                     OpenUSART@config:	
  4394                           ; 1 bytes @ 0x7
  4395                           
  4396  0027                     ReadFlash_2Byte@column:	
  4397                           ; 1 bytes @ 0x7
  4398                           
  4399                           
  4400                           ; 1 bytes @ 0x7
  4401  0027                     	ds	1
  4402  0028                     ??_CheckSum_byte:	
  4403  0028                     ??_ReadFlash_2Byte:	
  4404                           ; 0 bytes @ 0x8
  4405                           
  4406  0028                     Reverse_Byte@This:	
  4407                           ; 0 bytes @ 0x8
  4408                           
  4409                           
  4410                           ; 1 bytes @ 0x8
  4411  0028                     	ds	1
  4412  0029                     ??_delayUS:	
  4413  0029                     ___flpack@exp:	
  4414                           ; 0 bytes @ 0x9
  4415                           
  4416  0029                     CheckSum_byte@ThisTemp:	
  4417                           ; 1 bytes @ 0x9
  4418                           
  4419  0029                     ___lmul@multiplicand:	
  4420                           ; 2 bytes @ 0x9
  4421                           
  4422  0029                     ___flge@ff2:	
  4423                           ; 4 bytes @ 0x9
  4424                           
  4425  0029                     ___lldiv@dividend:	
  4426                           ; 4 bytes @ 0x9
  4427                           
  4428                           
  4429                           ; 4 bytes @ 0x9
  4430  0029                     	ds	1
  4431  002A                     ?_ReadFlash_4Byte:	
  4432  002A                     ___flpack@sign:	
  4433                           ; 4 bytes @ 0xA
  4434                           
  4435  002A                     ReadFlash_4Byte@row:	
  4436                           ; 1 bytes @ 0xA
  4437                           
  4438  002A                     delayUS@i:	
  4439                           ; 2 bytes @ 0xA
  4440                           
  4441                           
  4442                           ; 4 bytes @ 0xA
  4443  002A                     	ds	1
  4444  002B                     ??___flpack:	
  4445  002B                     CheckSum_byte@Parity:	
  4446                           ; 0 bytes @ 0xB
  4447                           
  4448                           
  4449                           ; 1 bytes @ 0xB
  4450  002B                     	ds	1
  4451  002C                     CheckSum_byte@i:	
  4452  002C                     ReadFlash_4Byte@column:	
  4453                           ; 1 bytes @ 0xC
  4454                           
  4455                           
  4456                           ; 1 bytes @ 0xC
  4457  002C                     	ds	1
  4458  002D                     ?_UARTchar:	
  4459  002D                     ??___lmul:	
  4460                           ; 0 bytes @ 0xD
  4461                           
  4462  002D                     ??___flge:	
  4463                           ; 0 bytes @ 0xD
  4464                           
  4465  002D                     ??___lldiv:	
  4466                           ; 0 bytes @ 0xD
  4467                           
  4468  002D                     UARTchar@NinethBit_override:	
  4469                           ; 0 bytes @ 0xD
  4470                           
  4471  002D                     ___lmul@product:	
  4472                           ; 1 bytes @ 0xD
  4473                           
  4474                           
  4475                           ; 4 bytes @ 0xD
  4476  002D                     	ds	1
  4477  002E                     ??_ReadFlash_4Byte:	
  4478  002E                     delayUS@j:	
  4479                           ; 0 bytes @ 0xE
  4480                           
  4481  002E                     UARTchar@NinethBit_override_data:	
  4482                           ; 1 bytes @ 0xE
  4483                           
  4484  002E                     ___lldiv@quotient:	
  4485                           ; 1 bytes @ 0xE
  4486                           
  4487                           
  4488                           ; 4 bytes @ 0xE
  4489  002E                     	ds	1
  4490  002F                     ?_UART_send_break_timed:	
  4491  002F                     ??_UARTchar:	
  4492                           ; 0 bytes @ 0xF
  4493                           
  4494  002F                     ??_Send_PS2:	
  4495                           ; 0 bytes @ 0xF
  4496                           
  4497  002F                     ?_WriteFlash_Sequential:	
  4498                           ; 0 bytes @ 0xF
  4499                           
  4500  002F                     ?_InternalADC_Read:	
  4501                           ; 0 bytes @ 0xF
  4502                           
  4503  002F                     ?___lwtofl:	
  4504                           ; 2 bytes @ 0xF
  4505                           
  4506  002F                     UART_send_break_timed@US:	
  4507                           ; 4 bytes @ 0xF
  4508                           
  4509  002F                     WriteFlash_Sequential@row:	
  4510                           ; 2 bytes @ 0xF
  4511                           
  4512  002F                     ___lwtofl@c:	
  4513                           ; 2 bytes @ 0xF
  4514                           
  4515                           
  4516                           ; 2 bytes @ 0xF
  4517  002F                     	ds	2
  4518  0031                     ??_UART_send_break_timed:	
  4519  0031                     ??_InternalADC_Read:	
  4520                           ; 0 bytes @ 0x11
  4521                           
  4522  0031                     WriteFlash_Sequential@buffer:	
  4523                           ; 0 bytes @ 0x11
  4524                           
  4525                           
  4526                           ; 1 bytes @ 0x11
  4527  0031                     	ds	1
  4528  0032                     WriteFlash_Sequential@amount:	
  4529  0032                     ___lldiv@counter:	
  4530                           ; 1 bytes @ 0x12
  4531                           
  4532                           
  4533                           ; 1 bytes @ 0x12
  4534  0032                     	ds	1
  4535  0033                     ?_InitUART:	
  4536  0033                     ??_WriteFlash_Sequential:	
  4537                           ; 0 bytes @ 0x13
  4538                           
  4539  0033                     ??___lwtofl:	
  4540                           ; 0 bytes @ 0x13
  4541                           
  4542  0033                     ?___llmod:	
  4543                           ; 0 bytes @ 0x13
  4544                           
  4545  0033                     UARTchar@data:	
  4546                           ; 4 bytes @ 0x13
  4547                           
  4548  0033                     Send_PS2@oddparity:	
  4549                           ; 1 bytes @ 0x13
  4550                           
  4551  0033                     InternalADC_Read@channel:	
  4552                           ; 1 bytes @ 0x13
  4553                           
  4554  0033                     InitUART@Baud:	
  4555                           ; 1 bytes @ 0x13
  4556                           
  4557  0033                     ReadFlash_4Byte@temp:	
  4558                           ; 4 bytes @ 0x13
  4559                           
  4560  0033                     ___llmod@divisor:	
  4561                           ; 4 bytes @ 0x13
  4562                           
  4563                           
  4564                           ; 4 bytes @ 0x13
  4565  0033                     	ds	1
  4566  0034                     ?_UARTstringWAIT:	
  4567  0034                     ?___fldiv:	
  4568                           ; 0 bytes @ 0x14
  4569                           
  4570  0034                     Send_PS2@command:	
  4571                           ; 4 bytes @ 0x14
  4572                           
  4573  0034                     UARTstringWAIT@data:	
  4574                           ; 1 bytes @ 0x14
  4575                           
  4576  0034                     ___fldiv@f2:	
  4577                           ; 2 bytes @ 0x14
  4578                           
  4579                           
  4580                           ; 4 bytes @ 0x14
  4581  0034                     	ds	1
  4582  0035                     Send_PS2@i:	
  4583                           
  4584                           ; 1 bytes @ 0x15
  4585  0035                     	ds	1
  4586  0036                     ??_UARTstringWAIT:	
  4587  0036                     ?_WriteBaud:	
  4588                           ; 0 bytes @ 0x16
  4589                           
  4590  0036                     Send_PS2@timeout:	
  4591                           ; 0 bytes @ 0x16
  4592                           
  4593  0036                     WriteBaud@row:	
  4594                           ; 2 bytes @ 0x16
  4595                           
  4596                           
  4597                           ; 2 bytes @ 0x16
  4598  0036                     	ds	1
  4599  0037                     ?_ReadBaud:	
  4600  0037                     InitUART@parity:	
  4601                           ; 4 bytes @ 0x17
  4602                           
  4603  0037                     ReadBaud@row:	
  4604                           ; 1 bytes @ 0x17
  4605                           
  4606  0037                     ___llmod@dividend:	
  4607                           ; 2 bytes @ 0x17
  4608                           
  4609                           
  4610                           ; 4 bytes @ 0x17
  4611  0037                     	ds	1
  4612  0038                     ??_Init_PS_2_Send:	
  4613  0038                     ??_InitUART:	
  4614                           ; 0 bytes @ 0x18
  4615                           
  4616  0038                     WriteBaud@Baud:	
  4617                           ; 0 bytes @ 0x18
  4618                           
  4619  0038                     ___fldiv@f1:	
  4620                           ; 4 bytes @ 0x18
  4621                           
  4622                           
  4623                           ; 4 bytes @ 0x18
  4624  0038                     	ds	1
  4625  0039                     ReadBaud@column:	
  4626                           
  4627                           ; 1 bytes @ 0x19
  4628  0039                     	ds	2
  4629  003B                     ??_ReadBaud:	
  4630  003B                     ??___llmod:	
  4631                           ; 0 bytes @ 0x1B
  4632                           
  4633                           
  4634                           ; 0 bytes @ 0x1B
  4635  003B                     	ds	1
  4636  003C                     ??___fldiv:	
  4637  003C                     WriteBaud@Parity:	
  4638                           ; 0 bytes @ 0x1C
  4639                           
  4640  003C                     ___llmod@counter:	
  4641                           ; 1 bytes @ 0x1C
  4642                           
  4643                           
  4644                           ; 1 bytes @ 0x1C
  4645  003C                     	ds	1
  4646  003D                     ??_WriteBaud:	
  4647  003D                     ?_sprintf:	
  4648                           ; 0 bytes @ 0x1D
  4649                           
  4650  003D                     sprintf@sp:	
  4651                           ; 2 bytes @ 0x1D
  4652                           
  4653                           
  4654                           ; 2 bytes @ 0x1D
  4655  003D                     	ds	2
  4656  003F                     sprintf@f:	
  4657                           
  4658                           ; 2 bytes @ 0x1F
  4659  003F                     	ds	1
  4660  0040                     InitUART@spbrg:	
  4661                           
  4662                           ; 2 bytes @ 0x20
  4663  0040                     	ds	1
  4664  0041                     ___fldiv@f3:	
  4665                           
  4666                           ; 4 bytes @ 0x21
  4667  0041                     	ds	1
  4668  0042                     InitUART@baudconfig:	
  4669                           
  4670                           ; 1 bytes @ 0x22
  4671  0042                     	ds	1
  4672  0043                     InitUART@config:	
  4673  0043                     ReadBaud@temp:	
  4674                           ; 1 bytes @ 0x23
  4675                           
  4676                           
  4677                           ; 4 bytes @ 0x23
  4678  0043                     	ds	1
  4679  0044                     InitUART@temp:	
  4680                           
  4681                           ; 4 bytes @ 0x24
  4682  0044                     	ds	1
  4683  0045                     ??_sprintf:	
  4684  0045                     ___fldiv@cntr:	
  4685                           ; 0 bytes @ 0x25
  4686                           
  4687  0045                     WriteBaud@temp:	
  4688                           ; 1 bytes @ 0x25
  4689                           
  4690                           
  4691                           ; 4 bytes @ 0x25
  4692  0045                     	ds	1
  4693  0046                     ___fldiv@exp:	
  4694                           
  4695                           ; 1 bytes @ 0x26
  4696  0046                     	ds	1
  4697  0047                     ___fldiv@sign:	
  4698                           
  4699                           ; 1 bytes @ 0x27
  4700  0047                     	ds	1
  4701  0048                     ?___flmul:	
  4702  0048                     ___flmul@f1:	
  4703                           ; 4 bytes @ 0x28
  4704                           
  4705                           
  4706                           ; 4 bytes @ 0x28
  4707  0048                     	ds	3
  4708  004B                     sprintf@flag:	
  4709                           
  4710                           ; 1 bytes @ 0x2B
  4711  004B                     	ds	1
  4712  004C                     sprintf@prec:	
  4713  004C                     ___flmul@f2:	
  4714                           ; 2 bytes @ 0x2C
  4715                           
  4716                           
  4717                           ; 4 bytes @ 0x2C
  4718  004C                     	ds	2
  4719  004E                     sprintf@_val:	
  4720                           
  4721                           ; 4 bytes @ 0x2E
  4722  004E                     	ds	2
  4723  0050                     ??___flmul:	
  4724                           
  4725                           ; 0 bytes @ 0x30
  4726  0050                     	ds	2
  4727  0052                     sprintf@ap:	
  4728                           
  4729                           ; 1 bytes @ 0x32
  4730  0052                     	ds	1
  4731  0053                     sprintf@c:	
  4732                           
  4733                           ; 1 bytes @ 0x33
  4734  0053                     	ds	1
  4735  0054                     ??_Init_System:	
  4736  0054                     ?_SetBaud:	
  4737                           ; 0 bytes @ 0x34
  4738                           
  4739  0054                     SetBaud@Baud:	
  4740                           ; 0 bytes @ 0x34
  4741                           
  4742                           
  4743                           ; 4 bytes @ 0x34
  4744  0054                     	ds	1
  4745  0055                     ___flmul@exp:	
  4746                           
  4747                           ; 1 bytes @ 0x35
  4748  0055                     	ds	1
  4749  0056                     ___flmul@f3_as_product:	
  4750                           
  4751                           ; 4 bytes @ 0x36
  4752  0056                     	ds	2
  4753  0058                     SetBaud@Parity:	
  4754                           
  4755                           ; 1 bytes @ 0x38
  4756  0058                     	ds	1
  4757  0059                     ??_SetBaud:	
  4758                           
  4759                           ; 0 bytes @ 0x39
  4760  0059                     	ds	1
  4761  005A                     ___flmul@cntr:	
  4762                           
  4763                           ; 1 bytes @ 0x3A
  4764  005A                     	ds	1
  4765  005B                     ___flmul@sign:	
  4766                           
  4767                           ; 1 bytes @ 0x3B
  4768  005B                     	ds	1
  4769  005C                     ?_ReadVoltage:	
  4770                           
  4771                           ; 4 bytes @ 0x3C
  4772  005C                     	ds	4
  4773  0060                     ??_ReadVoltage:	
  4774                           
  4775                           ; 0 bytes @ 0x40
  4776  0060                     	ds	1
  4777  0061                     ??_Keyboard_Connected:	
  4778  0061                     Keyboard_Connected@i:	
  4779                           ; 0 bytes @ 0x41
  4780                           
  4781                           
  4782                           ; 4 bytes @ 0x41
  4783  0061                     	ds	4
  4784  0065                     ??_main:	
  4785                           
  4786                           ; 0 bytes @ 0x45
  4787  0065                     	ds	1
  4788                           
  4789                           	psect	maintext
  4790  0E2A                     __pmaintext:	
  4791 ;;
  4792 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4793 ;;
  4794 ;; *************** function _main *****************
  4795 ;; Defined at:
  4796 ;;		line 92 in file "main.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  i               1   71[BANK1 ] unsigned char 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 17F/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;Total ram usage:        2 bytes
  4815 ;; Hardware stack levels required when called:   10
  4816 ;; This function calls:
  4817 ;;		_ConfigureOscillator
  4818 ;;		_InitApp
  4819 ;;		_Init_PS_2_Send
  4820 ;;		_Init_System
  4821 ;;		_Keyboard_Connected
  4822 ;;		_PS_2_DISABLE_INTERRUPT
  4823 ;;		_PS_2_ENABLE_INTERRUPT
  4824 ;;		_PS_2_INIT
  4825 ;;		_PS_2_Update
  4826 ;;		_ReadVoltage
  4827 ;;		_UARTstringWAIT
  4828 ;;		___flge
  4829 ;;		_delayUS
  4830 ;; This function is called by:
  4831 ;;		Startup code after reset
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _main
  4837  0E2A                     _main:	
  4838                           
  4839                           ;main.c: 94: unsigned char i=0;
  4840                           
  4841                           ;incstack = 0
  4842                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4843  0E2A  0021               	movlb	1	; select bank1
  4844  0E2B  01E7               	clrf	main@i^(0+128)
  4845                           
  4846                           ;main.c: 96: ConfigureOscillator();
  4847  0E2C  3199  2170  318E   	fcall	_ConfigureOscillator
  4848                           
  4849                           ;main.c: 97: InitApp();
  4850  0E2F  319A  222C  318E   	fcall	_InitApp
  4851                           
  4852                           ;main.c: 98: Init_System();
  4853  0E32  3195  2593  318E   	fcall	_Init_System
  4854                           
  4855                           ;main.c: 99: PS_2_INIT();
  4856  0E35  3199  211B  318E   	fcall	_PS_2_INIT
  4857                           
  4858                           ;main.c: 102: for(i =0;i<10;i++)
  4859  0E38  0021               	movlb	1	; select bank1
  4860  0E39  01E7               	clrf	main@i^(0+128)
  4861  0E3A  300A               	movlw	10
  4862  0E3B  0267               	subwf	main@i^(0+128),w
  4863  0E3C  1803               	btfsc	3,0
  4864  0E3D  2E68               	goto	l7238
  4865  0E3E                     l160:	
  4866                           
  4867                           ;main.c: 103: {
  4868                           ;main.c: 104: LATC |= 0b00010000;
  4869  0E3E  0022               	movlb	2	; select bank2
  4870  0E3F  160E               	bsf	14,4	;volatile
  4871                           
  4872                           ;main.c: 105: delayUS(10000);
  4873  0E40  3000               	movlw	0
  4874  0E41  0020               	movlb	0	; select bank0
  4875  0E42  00A8               	movwf	delayUS@US+3
  4876  0E43  3000               	movlw	0
  4877  0E44  00A7               	movwf	delayUS@US+2
  4878  0E45  3027               	movlw	39
  4879  0E46  00A6               	movwf	delayUS@US+1
  4880  0E47  3010               	movlw	16
  4881  0E48  00A5               	movwf	delayUS@US
  4882  0E49  319B  23F5  318E   	fcall	_delayUS
  4883                           
  4884                           ;main.c: 106: LATC &= ~0b00010000;
  4885  0E4C  30EF               	movlw	239
  4886  0E4D  0020               	movlb	0	; select bank0
  4887  0E4E  00E5               	movwf	??_main
  4888  0E4F  0865               	movf	??_main,w
  4889  0E50  0022               	movlb	2	; select bank2
  4890  0E51  058E               	andwf	14,f	;volatile
  4891                           
  4892                           ;main.c: 107: delayUS(10000);
  4893  0E52  3000               	movlw	0
  4894  0E53  0020               	movlb	0	; select bank0
  4895  0E54  00A8               	movwf	delayUS@US+3
  4896  0E55  3000               	movlw	0
  4897  0E56  00A7               	movwf	delayUS@US+2
  4898  0E57  3027               	movlw	39
  4899  0E58  00A6               	movwf	delayUS@US+1
  4900  0E59  3010               	movlw	16
  4901  0E5A  00A5               	movwf	delayUS@US
  4902  0E5B  319B  23F5  318E   	fcall	_delayUS
  4903  0E5E  3001               	movlw	1
  4904  0E5F  0020               	movlb	0	; select bank0
  4905  0E60  00E5               	movwf	??_main
  4906  0E61  0865               	movf	??_main,w
  4907  0E62  0021               	movlb	1	; select bank1
  4908  0E63  07E7               	addwf	main@i^(0+128),f
  4909  0E64  300A               	movlw	10
  4910  0E65  0267               	subwf	main@i^(0+128),w
  4911  0E66  1C03               	skipc
  4912  0E67  2E3E               	goto	l160
  4913  0E68                     l7238:	
  4914                           
  4915                           ;main.c: 108: }
  4916                           ;main.c: 110: PS_2_DISABLE_INTERRUPT(0b00100000);
  4917  0E68  3020               	movlw	32
  4918  0E69  319A  220D  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  4919                           
  4920                           ;main.c: 112: UARTstringWAIT("\r\n");
  4921  0E6C  3052               	movlw	low ((STR_11+17)| (0+32768))
  4922  0E6D  0020               	movlb	0	; select bank0
  4923  0E6E  00B4               	movwf	UARTstringWAIT@data
  4924  0E6F  308B               	movlw	high ((STR_11+17)| (0+32768))
  4925  0E70  00B5               	movwf	UARTstringWAIT@data+1
  4926  0E71  319B  23C2  318E   	fcall	_UARTstringWAIT
  4927                           
  4928                           ;main.c: 113: delayUS(10000);
  4929  0E74  3000               	movlw	0
  4930  0E75  0020               	movlb	0	; select bank0
  4931  0E76  00A8               	movwf	delayUS@US+3
  4932  0E77  3000               	movlw	0
  4933  0E78  00A7               	movwf	delayUS@US+2
  4934  0E79  3027               	movlw	39
  4935  0E7A  00A6               	movwf	delayUS@US+1
  4936  0E7B  3010               	movlw	16
  4937  0E7C  00A5               	movwf	delayUS@US
  4938  0E7D  319B  23F5  318E   	fcall	_delayUS
  4939                           
  4940                           ;main.c: 114: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  4941  0E80  3088               	movlw	low (STR_2| (0+32768))
  4942  0E81  0020               	movlb	0	; select bank0
  4943  0E82  00B4               	movwf	UARTstringWAIT@data
  4944  0E83  308A               	movlw	high (STR_2| (0+32768))
  4945  0E84  00B5               	movwf	UARTstringWAIT@data+1
  4946  0E85  319B  23C2  318E   	fcall	_UARTstringWAIT
  4947                           
  4948                           ;main.c: 115: delayUS(5000);
  4949  0E88  3000               	movlw	0
  4950  0E89  0020               	movlb	0	; select bank0
  4951  0E8A  00A8               	movwf	delayUS@US+3
  4952  0E8B  3000               	movlw	0
  4953  0E8C  00A7               	movwf	delayUS@US+2
  4954  0E8D  3013               	movlw	19
  4955  0E8E  00A6               	movwf	delayUS@US+1
  4956  0E8F  3088               	movlw	136
  4957  0E90  00A5               	movwf	delayUS@US
  4958  0E91  319B  23F5  318E   	fcall	_delayUS
  4959                           
  4960                           ;main.c: 116: UARTstringWAIT("Firmware Version: ");
  4961  0E94  3068               	movlw	low (STR_3| (0+32768))
  4962  0E95  0020               	movlb	0	; select bank0
  4963  0E96  00B4               	movwf	UARTstringWAIT@data
  4964  0E97  308B               	movlw	high (STR_3| (0+32768))
  4965  0E98  00B5               	movwf	UARTstringWAIT@data+1
  4966  0E99  319B  23C2  318E   	fcall	_UARTstringWAIT
  4967                           
  4968                           ;main.c: 117: UARTstringWAIT(Version);
  4969  0E9C  3034               	movlw	low _Version
  4970  0E9D  0020               	movlb	0	; select bank0
  4971  0E9E  00B4               	movwf	UARTstringWAIT@data
  4972  0E9F  3002               	movlw	high _Version
  4973  0EA0  00B5               	movwf	UARTstringWAIT@data+1
  4974  0EA1  319B  23C2  318E   	fcall	_UARTstringWAIT
  4975                           
  4976                           ;main.c: 118: UARTstringWAIT("\r\n");
  4977  0EA4  3052               	movlw	low ((STR_11+17)| (0+32768))
  4978  0EA5  0020               	movlb	0	; select bank0
  4979  0EA6  00B4               	movwf	UARTstringWAIT@data
  4980  0EA7  308B               	movlw	high ((STR_11+17)| (0+32768))
  4981  0EA8  00B5               	movwf	UARTstringWAIT@data+1
  4982  0EA9  319B  23C2  318E   	fcall	_UARTstringWAIT
  4983                           
  4984                           ;main.c: 119: delayUS(5000);
  4985  0EAC  3000               	movlw	0
  4986  0EAD  0020               	movlb	0	; select bank0
  4987  0EAE  00A8               	movwf	delayUS@US+3
  4988  0EAF  3000               	movlw	0
  4989  0EB0  00A7               	movwf	delayUS@US+2
  4990  0EB1  3013               	movlw	19
  4991  0EB2  00A6               	movwf	delayUS@US+1
  4992  0EB3  3088               	movlw	136
  4993  0EB4  00A5               	movwf	delayUS@US
  4994  0EB5  319B  23F5  318E   	fcall	_delayUS
  4995                           
  4996                           ;main.c: 120: UARTstringWAIT("To Change BAUD hit \"CNT+ALT+DEL\"\r\n");
  4997  0EB8  3027               	movlw	low (STR_5| (0+32768))
  4998  0EB9  0020               	movlb	0	; select bank0
  4999  0EBA  00B4               	movwf	UARTstringWAIT@data
  5000  0EBB  308A               	movlw	high (STR_5| (0+32768))
  5001  0EBC  00B5               	movwf	UARTstringWAIT@data+1
  5002  0EBD  319B  23C2  318E   	fcall	_UARTstringWAIT
  5003                           
  5004                           ;main.c: 121: delayUS(10000);
  5005  0EC0  3000               	movlw	0
  5006  0EC1  0020               	movlb	0	; select bank0
  5007  0EC2  00A8               	movwf	delayUS@US+3
  5008  0EC3  3000               	movlw	0
  5009  0EC4  00A7               	movwf	delayUS@US+2
  5010  0EC5  3027               	movlw	39
  5011  0EC6  00A6               	movwf	delayUS@US+1
  5012  0EC7  3010               	movlw	16
  5013  0EC8  00A5               	movwf	delayUS@US
  5014  0EC9  319B  23F5  318E   	fcall	_delayUS
  5015                           
  5016                           ;main.c: 124: if(!Keyboard_Connected())
  5017  0ECC  319E  2683  318E   	fcall	_Keyboard_Connected
  5018  0ECF  3800               	iorlw	0
  5019  0ED0  1D03               	skipz
  5020  0ED1  2F2A               	goto	l7272
  5021                           
  5022                           ;main.c: 125: {
  5023                           ;main.c: 126: if(!Keyboard_Connected())
  5024  0ED2  319E  2683  318E   	fcall	_Keyboard_Connected
  5025  0ED5  3800               	iorlw	0
  5026  0ED6  1D03               	skipz
  5027  0ED7  2F2A               	goto	l7272
  5028                           
  5029                           ;main.c: 127: {
  5030                           ;main.c: 128: UARTstringWAIT("No Keyboard connected\r\n");
  5031  0ED8  30D2               	movlw	low (STR_6| (0+32768))
  5032  0ED9  0020               	movlb	0	; select bank0
  5033  0EDA  00B4               	movwf	UARTstringWAIT@data
  5034  0EDB  308A               	movlw	high (STR_6| (0+32768))
  5035  0EDC  00B5               	movwf	UARTstringWAIT@data+1
  5036  0EDD  319B  23C2  318E   	fcall	_UARTstringWAIT
  5037  0EE0                     l7270:	
  5038                           ;main.c: 130: while(!Keyboard_Connected())
  5039                           
  5040  0EE0  319E  2683  318E   	fcall	_Keyboard_Connected
  5041  0EE3  3A00               	xorlw	0
  5042  0EE4  1D03               	btfss	3,2
  5043  0EE5  2F2A               	goto	l7272
  5044                           
  5045                           ;main.c: 131: {
  5046                           ;main.c: 132: BatteryVoltage = ReadVoltage();
  5047  0EE6  3190  206C  318E   	fcall	_ReadVoltage
  5048  0EE9  0020               	movlb	0	; select bank0
  5049  0EEA  085F               	movf	?_ReadVoltage+3,w
  5050  0EEB  00E9               	movwf	_BatteryVoltage+3
  5051  0EEC  085E               	movf	?_ReadVoltage+2,w
  5052  0EED  00E8               	movwf	_BatteryVoltage+2
  5053  0EEE  085D               	movf	?_ReadVoltage+1,w
  5054  0EEF  00E7               	movwf	_BatteryVoltage+1
  5055  0EF0  085C               	movf	?_ReadVoltage,w
  5056  0EF1  00E6               	movwf	_BatteryVoltage
  5057                           
  5058                           ;main.c: 134: if(BatteryVoltage < 5.85 || BatteryVoltage > 20.0)
  5059  0EF2  0869               	movf	_BatteryVoltage+3,w
  5060  0EF3  00A8               	movwf	___flge@ff1+3
  5061  0EF4  0868               	movf	_BatteryVoltage+2,w
  5062  0EF5  00A7               	movwf	___flge@ff1+2
  5063  0EF6  0867               	movf	_BatteryVoltage+1,w
  5064  0EF7  00A6               	movwf	___flge@ff1+1
  5065  0EF8  0866               	movf	_BatteryVoltage,w
  5066  0EF9  00A5               	movwf	___flge@ff1
  5067  0EFA  3040               	movlw	64
  5068  0EFB  00AC               	movwf	___flge@ff2+3
  5069  0EFC  30BB               	movlw	187
  5070  0EFD  00AB               	movwf	___flge@ff2+2
  5071  0EFE  3033               	movlw	51
  5072  0EFF  00AA               	movwf	___flge@ff2+1
  5073  0F00  3033               	movlw	51
  5074  0F01  00A9               	movwf	___flge@ff2
  5075  0F02  319F  279A  318E   	fcall	___flge
  5076  0F05  1C03               	btfss	3,0
  5077  0F06  2F1D               	goto	l7266
  5078  0F07  3041               	movlw	65
  5079  0F08  0020               	movlb	0	; select bank0
  5080  0F09  00A8               	movwf	___flge@ff1+3
  5081  0F0A  30A0               	movlw	160
  5082  0F0B  00A7               	movwf	___flge@ff1+2
  5083  0F0C  3000               	movlw	0
  5084  0F0D  00A6               	movwf	___flge@ff1+1
  5085  0F0E  3000               	movlw	0
  5086  0F0F  00A5               	movwf	___flge@ff1
  5087  0F10  0869               	movf	_BatteryVoltage+3,w
  5088  0F11  00AC               	movwf	___flge@ff2+3
  5089  0F12  0868               	movf	_BatteryVoltage+2,w
  5090  0F13  00AB               	movwf	___flge@ff2+2
  5091  0F14  0867               	movf	_BatteryVoltage+1,w
  5092  0F15  00AA               	movwf	___flge@ff2+1
  5093  0F16  0866               	movf	_BatteryVoltage,w
  5094  0F17  00A9               	movwf	___flge@ff2
  5095  0F18  319F  279A  318E   	fcall	___flge
  5096  0F1B  1803               	btfsc	3,0
  5097  0F1C  2F27               	goto	l166
  5098  0F1D                     l7266:	
  5099                           
  5100                           ;main.c: 135: {
  5101                           ;main.c: 136: LATC ^= 0b00000010;
  5102  0F1D  3002               	movlw	2
  5103  0F1E  0020               	movlb	0	; select bank0
  5104  0F1F  00E5               	movwf	??_main
  5105  0F20  0865               	movf	??_main,w
  5106  0F21  0022               	movlb	2	; select bank2
  5107  0F22  068E               	xorwf	14,f	;volatile
  5108                           
  5109                           ;main.c: 137: pwrLEDtoggle = 0;
  5110  0F23  0024               	movlb	4	; select bank4
  5111  0F24  01AA               	clrf	_pwrLEDtoggle^(0+512)
  5112  0F25  01AB               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5113                           
  5114                           ;main.c: 138: }
  5115  0F26  2EE0               	goto	l7270
  5116  0F27                     l166:	
  5117                           
  5118                           ;main.c: 139: else
  5119                           ;main.c: 140: {
  5120                           ;main.c: 141: LATC |= 0b00000010;
  5121  0F27  0022               	movlb	2	; select bank2
  5122  0F28  148E               	bsf	14,1	;volatile
  5123  0F29  2EE0               	goto	l7270
  5124  0F2A                     l7272:	
  5125                           
  5126                           ;main.c: 142: }
  5127                           ;main.c: 143: }
  5128                           ;main.c: 144: }
  5129                           ;main.c: 145: }
  5130                           ;main.c: 146: UARTstringWAIT("Keyboard Connected\r\n");
  5131  0F2A  302C               	movlw	low (STR_7| (0+32768))
  5132  0F2B  0020               	movlb	0	; select bank0
  5133  0F2C  00B4               	movwf	UARTstringWAIT@data
  5134  0F2D  308B               	movlw	high (STR_7| (0+32768))
  5135  0F2E  00B5               	movwf	UARTstringWAIT@data+1
  5136  0F2F  319B  23C2  318E   	fcall	_UARTstringWAIT
  5137                           
  5138                           ;main.c: 147: if(!Init_PS_2_Send())
  5139  0F32  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5140  0F35  3800               	iorlw	0
  5141  0F36  1D03               	skipz
  5142  0F37  2F49               	goto	l7280
  5143                           
  5144                           ;main.c: 148: {
  5145                           ;main.c: 149: delayUS(10000);
  5146  0F38  3000               	movlw	0
  5147  0F39  0020               	movlb	0	; select bank0
  5148  0F3A  00A8               	movwf	delayUS@US+3
  5149  0F3B  3000               	movlw	0
  5150  0F3C  00A7               	movwf	delayUS@US+2
  5151  0F3D  3027               	movlw	39
  5152  0F3E  00A6               	movwf	delayUS@US+1
  5153  0F3F  3010               	movlw	16
  5154  0F40  00A5               	movwf	delayUS@US
  5155  0F41  319B  23F5  318E   	fcall	_delayUS
  5156                           
  5157                           ;main.c: 150: UARTstringWAIT("Initialization Fail\r\n");
  5158  0F44  3001               	movlw	low (STR_8| (0+32768))
  5159  0F45  0020               	movlb	0	; select bank0
  5160  0F46  00B4               	movwf	UARTstringWAIT@data
  5161  0F47  308B               	movlw	high (STR_8| (0+32768))
  5162  0F48  2F4D               	goto	L1
  5163  0F49                     l7280:	
  5164                           ;main.c: 151: }
  5165                           
  5166                           
  5167                           ;main.c: 152: else
  5168                           ;main.c: 153: {
  5169                           ;main.c: 154: UARTstringWAIT("Keyboard Pass!\r\n");
  5170  0F49  30B0               	movlw	low (STR_9| (0+32768))
  5171  0F4A  0020               	movlb	0	; select bank0
  5172  0F4B  00B4               	movwf	UARTstringWAIT@data
  5173  0F4C  308B               	movlw	high (STR_9| (0+32768))
  5174  0F4D                     L1:	
  5175  0F4D  00B5               	movwf	UARTstringWAIT@data+1
  5176  0F4E  319B  23C2  318E   	fcall	_UARTstringWAIT
  5177                           
  5178                           ;main.c: 155: }
  5179                           ;main.c: 156: BatteryVoltage = ReadVoltage();
  5180  0F51  3190  206C  318E   	fcall	_ReadVoltage
  5181  0F54  0020               	movlb	0	; select bank0
  5182  0F55  085F               	movf	?_ReadVoltage+3,w
  5183  0F56  00E9               	movwf	_BatteryVoltage+3
  5184  0F57  085E               	movf	?_ReadVoltage+2,w
  5185  0F58  00E8               	movwf	_BatteryVoltage+2
  5186  0F59  085D               	movf	?_ReadVoltage+1,w
  5187  0F5A  00E7               	movwf	_BatteryVoltage+1
  5188  0F5B  085C               	movf	?_ReadVoltage,w
  5189  0F5C  00E6               	movwf	_BatteryVoltage
  5190                           
  5191                           ;main.c: 157: if(BatteryVoltage < 5.85 )
  5192  0F5D  0869               	movf	_BatteryVoltage+3,w
  5193  0F5E  00A8               	movwf	___flge@ff1+3
  5194  0F5F  0868               	movf	_BatteryVoltage+2,w
  5195  0F60  00A7               	movwf	___flge@ff1+2
  5196  0F61  0867               	movf	_BatteryVoltage+1,w
  5197  0F62  00A6               	movwf	___flge@ff1+1
  5198  0F63  0866               	movf	_BatteryVoltage,w
  5199  0F64  00A5               	movwf	___flge@ff1
  5200  0F65  3040               	movlw	64
  5201  0F66  00AC               	movwf	___flge@ff2+3
  5202  0F67  30BB               	movlw	187
  5203  0F68  00AB               	movwf	___flge@ff2+2
  5204  0F69  3033               	movlw	51
  5205  0F6A  00AA               	movwf	___flge@ff2+1
  5206  0F6B  3033               	movlw	51
  5207  0F6C  00A9               	movwf	___flge@ff2
  5208  0F6D  319F  279A  318E   	fcall	___flge
  5209  0F70  1803               	btfsc	3,0
  5210  0F71  2F77               	goto	l7288
  5211                           
  5212                           ;main.c: 158: {
  5213                           ;main.c: 159: UARTstringWAIT("Voltage too Low!\r\n");
  5214  0F72  3055               	movlw	low (STR_10| (0+32768))
  5215  0F73  0020               	movlb	0	; select bank0
  5216  0F74  00B4               	movwf	UARTstringWAIT@data
  5217  0F75  308B               	movlw	high (STR_10| (0+32768))
  5218  0F76  2F91               	goto	L2
  5219  0F77                     l7288:	
  5220                           ;main.c: 160: }
  5221                           
  5222                           
  5223                           ;main.c: 161: else if (BatteryVoltage > 20.0)
  5224  0F77  3041               	movlw	65
  5225  0F78  0020               	movlb	0	; select bank0
  5226  0F79  00A8               	movwf	___flge@ff1+3
  5227  0F7A  30A0               	movlw	160
  5228  0F7B  00A7               	movwf	___flge@ff1+2
  5229  0F7C  3000               	movlw	0
  5230  0F7D  00A6               	movwf	___flge@ff1+1
  5231  0F7E  3000               	movlw	0
  5232  0F7F  00A5               	movwf	___flge@ff1
  5233  0F80  0869               	movf	_BatteryVoltage+3,w
  5234  0F81  00AC               	movwf	___flge@ff2+3
  5235  0F82  0868               	movf	_BatteryVoltage+2,w
  5236  0F83  00AB               	movwf	___flge@ff2+2
  5237  0F84  0867               	movf	_BatteryVoltage+1,w
  5238  0F85  00AA               	movwf	___flge@ff2+1
  5239  0F86  0866               	movf	_BatteryVoltage,w
  5240  0F87  00A9               	movwf	___flge@ff2
  5241  0F88  319F  279A  318E   	fcall	___flge
  5242  0F8B  1803               	btfsc	3,0
  5243  0F8C  2F95               	goto	l7292
  5244                           
  5245                           ;main.c: 162: {
  5246                           ;main.c: 163: UARTstringWAIT("Voltage too High!\r\n");
  5247  0F8D  3041               	movlw	low (STR_11| (0+32768))
  5248  0F8E  0020               	movlb	0	; select bank0
  5249  0F8F  00B4               	movwf	UARTstringWAIT@data
  5250  0F90  308B               	movlw	high (STR_11| (0+32768))
  5251  0F91                     L2:	
  5252  0F91  00B5               	movwf	UARTstringWAIT@data+1
  5253  0F92  319B  23C2  318E   	fcall	_UARTstringWAIT
  5254  0F95                     l7292:	
  5255                           
  5256                           ;main.c: 164: }
  5257                           ;main.c: 165: PS_2_ENABLE_INTERRUPT(0b00100000);
  5258  0F95  3020               	movlw	32
  5259  0F96  3199  21E0  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5260  0F99                     l7294:	
  5261                           ;main.c: 167: while(1)
  5262                           
  5263                           
  5264                           ;main.c: 168: {
  5265                           ;main.c: 169: BatteryVoltage = ReadVoltage();
  5266  0F99  3190  206C  318E   	fcall	_ReadVoltage
  5267  0F9C  0020               	movlb	0	; select bank0
  5268  0F9D  085F               	movf	?_ReadVoltage+3,w
  5269  0F9E  00E9               	movwf	_BatteryVoltage+3
  5270  0F9F  085E               	movf	?_ReadVoltage+2,w
  5271  0FA0  00E8               	movwf	_BatteryVoltage+2
  5272  0FA1  085D               	movf	?_ReadVoltage+1,w
  5273  0FA2  00E7               	movwf	_BatteryVoltage+1
  5274  0FA3  085C               	movf	?_ReadVoltage,w
  5275  0FA4  00E6               	movwf	_BatteryVoltage
  5276                           
  5277                           ;main.c: 170: if(BatteryVoltage < 5.85 || BatteryVoltage > 20.0)
  5278  0FA5  0869               	movf	_BatteryVoltage+3,w
  5279  0FA6  00A8               	movwf	___flge@ff1+3
  5280  0FA7  0868               	movf	_BatteryVoltage+2,w
  5281  0FA8  00A7               	movwf	___flge@ff1+2
  5282  0FA9  0867               	movf	_BatteryVoltage+1,w
  5283  0FAA  00A6               	movwf	___flge@ff1+1
  5284  0FAB  0866               	movf	_BatteryVoltage,w
  5285  0FAC  00A5               	movwf	___flge@ff1
  5286  0FAD  3040               	movlw	64
  5287  0FAE  00AC               	movwf	___flge@ff2+3
  5288  0FAF  30BB               	movlw	187
  5289  0FB0  00AB               	movwf	___flge@ff2+2
  5290  0FB1  3033               	movlw	51
  5291  0FB2  00AA               	movwf	___flge@ff2+1
  5292  0FB3  3033               	movlw	51
  5293  0FB4  00A9               	movwf	___flge@ff2
  5294  0FB5  319F  279A  318E   	fcall	___flge
  5295  0FB8  1C03               	btfss	3,0
  5296  0FB9  2FD0               	goto	l7300
  5297  0FBA  3041               	movlw	65
  5298  0FBB  0020               	movlb	0	; select bank0
  5299  0FBC  00A8               	movwf	___flge@ff1+3
  5300  0FBD  30A0               	movlw	160
  5301  0FBE  00A7               	movwf	___flge@ff1+2
  5302  0FBF  3000               	movlw	0
  5303  0FC0  00A6               	movwf	___flge@ff1+1
  5304  0FC1  3000               	movlw	0
  5305  0FC2  00A5               	movwf	___flge@ff1
  5306  0FC3  0869               	movf	_BatteryVoltage+3,w
  5307  0FC4  00AC               	movwf	___flge@ff2+3
  5308  0FC5  0868               	movf	_BatteryVoltage+2,w
  5309  0FC6  00AB               	movwf	___flge@ff2+2
  5310  0FC7  0867               	movf	_BatteryVoltage+1,w
  5311  0FC8  00AA               	movwf	___flge@ff2+1
  5312  0FC9  0866               	movf	_BatteryVoltage,w
  5313  0FCA  00A9               	movwf	___flge@ff2
  5314  0FCB  319F  279A  318E   	fcall	___flge
  5315  0FCE  1803               	btfsc	3,0
  5316  0FCF  2FE6               	goto	l177
  5317  0FD0                     l7300:	
  5318                           
  5319                           ;main.c: 171: {
  5320                           ;main.c: 172: pwrLEDtoggle++;
  5321  0FD0  3001               	movlw	1
  5322  0FD1  0024               	movlb	4	; select bank4
  5323  0FD2  07AA               	addwf	_pwrLEDtoggle^(0+512),f
  5324  0FD3  3000               	movlw	0
  5325  0FD4  3DAB               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5326                           
  5327                           ;main.c: 173: if(pwrLEDtoggle > 1000)
  5328  0FD5  3003               	movlw	3
  5329  0FD6  022B               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5330  0FD7  30E9               	movlw	233
  5331  0FD8  1903               	skipnz
  5332  0FD9  022A               	subwf	_pwrLEDtoggle^(0+512),w
  5333  0FDA  1C03               	skipc
  5334  0FDB  2FE8               	goto	l7306
  5335                           
  5336                           ;main.c: 174: {
  5337                           ;main.c: 175: LATC ^= 0b00000010;
  5338  0FDC  3002               	movlw	2
  5339  0FDD  0020               	movlb	0	; select bank0
  5340  0FDE  00E5               	movwf	??_main
  5341  0FDF  0865               	movf	??_main,w
  5342  0FE0  0022               	movlb	2	; select bank2
  5343  0FE1  068E               	xorwf	14,f	;volatile
  5344                           
  5345                           ;main.c: 176: pwrLEDtoggle = 0;
  5346  0FE2  0024               	movlb	4	; select bank4
  5347  0FE3  01AA               	clrf	_pwrLEDtoggle^(0+512)
  5348  0FE4  01AB               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5349                           
  5350                           ;main.c: 177: }
  5351                           ;main.c: 178: }
  5352  0FE5  2FE8               	goto	l7306
  5353  0FE6                     l177:	
  5354                           
  5355                           ;main.c: 179: else
  5356                           ;main.c: 180: {
  5357                           ;main.c: 181: LATC |= 0b00000010;
  5358  0FE6  0022               	movlb	2	; select bank2
  5359  0FE7  148E               	bsf	14,1	;volatile
  5360  0FE8                     l7306:	
  5361                           
  5362                           ;main.c: 182: }
  5363                           ;main.c: 183: if(SinLEDtimer >= 100)
  5364  0FE8  3000               	movlw	0
  5365  0FE9  0024               	movlb	4	; select bank4
  5366  0FEA  0229               	subwf	(_SinLEDtimer+1)^(0+512),w
  5367  0FEB  3064               	movlw	100
  5368  0FEC  1903               	skipnz
  5369  0FED  0228               	subwf	_SinLEDtimer^(0+512),w
  5370  0FEE  1C03               	skipc
  5371  0FEF  2FF7               	goto	l7310
  5372                           
  5373                           ;main.c: 184: {
  5374                           ;main.c: 185: LATC &= ~0b00001000;
  5375  0FF0  30F7               	movlw	247
  5376  0FF1  0020               	movlb	0	; select bank0
  5377  0FF2  00E5               	movwf	??_main
  5378  0FF3  0865               	movf	??_main,w
  5379  0FF4  0022               	movlb	2	; select bank2
  5380  0FF5  058E               	andwf	14,f	;volatile
  5381                           
  5382                           ;main.c: 186: }
  5383  0FF6  2FFC               	goto	l7312
  5384  0FF7                     l7310:	
  5385                           
  5386                           ;main.c: 187: else
  5387                           ;main.c: 188: {
  5388                           ;main.c: 189: SinLEDtimer++;
  5389  0FF7  3001               	movlw	1
  5390  0FF8  0024               	movlb	4	; select bank4
  5391  0FF9  07A8               	addwf	_SinLEDtimer^(0+512),f
  5392  0FFA  3000               	movlw	0
  5393  0FFB  3DA9               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5394  0FFC                     l7312:	
  5395                           
  5396                           ;main.c: 190: }
  5397                           ;main.c: 191: PS_2_Update();
  5398  0FFC  3181  211D  318E   	fcall	_PS_2_Update
  5399  0FFF  2F99               	goto	l7294
  5400  1000                     __end_of_main:	
  5401                           
  5402                           	psect	text1
  5403  1F9A                     __ptext1:	
  5404 ;; *************** function ___flge *****************
  5405 ;; Defined at:
  5406 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  ff1             4    5[BANK0 ] unsigned char 
  5409 ;;  ff2             4    9[BANK0 ] unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5421 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;Total ram usage:       16 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    3
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_main
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function ___flge
  5437  1F9A                     ___flge:	
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5441  1F9A  0020               	movlb	0	; select bank0
  5442  1F9B  1FA8               	btfss	___flge@ff1+3,7
  5443  1F9C  2FC4               	goto	l5256
  5444  1F9D  3000               	movlw	0
  5445  1F9E  00AD               	movwf	??___flge
  5446  1F9F  3000               	movlw	0
  5447  1FA0  00AE               	movwf	??___flge+1
  5448  1FA1  3000               	movlw	0
  5449  1FA2  00AF               	movwf	??___flge+2
  5450  1FA3  3080               	movlw	128
  5451  1FA4  00B0               	movwf	??___flge+3
  5452  1FA5  0925               	comf	___flge@ff1,w
  5453  1FA6  00B1               	movwf	??___flge+4
  5454  1FA7  0926               	comf	___flge@ff1+1,w
  5455  1FA8  00B2               	movwf	??___flge+5
  5456  1FA9  0927               	comf	___flge@ff1+2,w
  5457  1FAA  00B3               	movwf	??___flge+6
  5458  1FAB  0928               	comf	___flge@ff1+3,w
  5459  1FAC  00B4               	movwf	??___flge+7
  5460  1FAD  0AB1               	incf	??___flge+4,f
  5461  1FAE  1903               	skipnz
  5462  1FAF  0AB2               	incf	??___flge+5,f
  5463  1FB0  1903               	skipnz
  5464  1FB1  0AB3               	incf	??___flge+6,f
  5465  1FB2  1903               	skipnz
  5466  1FB3  0AB4               	incf	??___flge+7,f
  5467  1FB4  0831               	movf	??___flge+4,w
  5468  1FB5  07AD               	addwf	??___flge,f
  5469  1FB6  0832               	movf	??___flge+5,w
  5470  1FB7  3DAE               	addwfc	??___flge+1,f
  5471  1FB8  0833               	movf	??___flge+6,w
  5472  1FB9  3DAF               	addwfc	??___flge+2,f
  5473  1FBA  0834               	movf	??___flge+7,w
  5474  1FBB  3DB0               	addwfc	??___flge+3,f
  5475  1FBC  0830               	movf	??___flge+3,w
  5476  1FBD  00A8               	movwf	___flge@ff1+3
  5477  1FBE  082F               	movf	??___flge+2,w
  5478  1FBF  00A7               	movwf	___flge@ff1+2
  5479  1FC0  082E               	movf	??___flge+1,w
  5480  1FC1  00A6               	movwf	___flge@ff1+1
  5481  1FC2  082D               	movf	??___flge,w
  5482  1FC3  00A5               	movwf	___flge@ff1
  5483  1FC4                     l5256:	
  5484  1FC4  1FAC               	btfss	___flge@ff2+3,7
  5485  1FC5  2FED               	goto	l5260
  5486  1FC6  3000               	movlw	0
  5487  1FC7  00AD               	movwf	??___flge
  5488  1FC8  3000               	movlw	0
  5489  1FC9  00AE               	movwf	??___flge+1
  5490  1FCA  3000               	movlw	0
  5491  1FCB  00AF               	movwf	??___flge+2
  5492  1FCC  3080               	movlw	128
  5493  1FCD  00B0               	movwf	??___flge+3
  5494  1FCE  0929               	comf	___flge@ff2,w
  5495  1FCF  00B1               	movwf	??___flge+4
  5496  1FD0  092A               	comf	___flge@ff2+1,w
  5497  1FD1  00B2               	movwf	??___flge+5
  5498  1FD2  092B               	comf	___flge@ff2+2,w
  5499  1FD3  00B3               	movwf	??___flge+6
  5500  1FD4  092C               	comf	___flge@ff2+3,w
  5501  1FD5  00B4               	movwf	??___flge+7
  5502  1FD6  0AB1               	incf	??___flge+4,f
  5503  1FD7  1903               	skipnz
  5504  1FD8  0AB2               	incf	??___flge+5,f
  5505  1FD9  1903               	skipnz
  5506  1FDA  0AB3               	incf	??___flge+6,f
  5507  1FDB  1903               	skipnz
  5508  1FDC  0AB4               	incf	??___flge+7,f
  5509  1FDD  0831               	movf	??___flge+4,w
  5510  1FDE  07AD               	addwf	??___flge,f
  5511  1FDF  0832               	movf	??___flge+5,w
  5512  1FE0  3DAE               	addwfc	??___flge+1,f
  5513  1FE1  0833               	movf	??___flge+6,w
  5514  1FE2  3DAF               	addwfc	??___flge+2,f
  5515  1FE3  0834               	movf	??___flge+7,w
  5516  1FE4  3DB0               	addwfc	??___flge+3,f
  5517  1FE5  0830               	movf	??___flge+3,w
  5518  1FE6  00AC               	movwf	___flge@ff2+3
  5519  1FE7  082F               	movf	??___flge+2,w
  5520  1FE8  00AB               	movwf	___flge@ff2+2
  5521  1FE9  082E               	movf	??___flge+1,w
  5522  1FEA  00AA               	movwf	___flge@ff2+1
  5523  1FEB  082D               	movf	??___flge,w
  5524  1FEC  00A9               	movwf	___flge@ff2
  5525  1FED                     l5260:	
  5526  1FED  3080               	movlw	128
  5527  1FEE  06A8               	xorwf	___flge@ff1+3,f
  5528  1FEF  3080               	movlw	128
  5529  1FF0  06AC               	xorwf	___flge@ff2+3,f
  5530  1FF1  082C               	movf	___flge@ff2+3,w
  5531  1FF2  0228               	subwf	___flge@ff1+3,w
  5532  1FF3  1D03               	skipz
  5533  1FF4  0008               	return
  5534  1FF5  082B               	movf	___flge@ff2+2,w
  5535  1FF6  0227               	subwf	___flge@ff1+2,w
  5536  1FF7  1D03               	skipz
  5537  1FF8  0008               	return
  5538  1FF9  082A               	movf	___flge@ff2+1,w
  5539  1FFA  0226               	subwf	___flge@ff1+1,w
  5540  1FFB  1D03               	skipz
  5541  1FFC  0008               	return
  5542  1FFD  0829               	movf	___flge@ff2,w
  5543  1FFE  0225               	subwf	___flge@ff1,w
  5544  1FFF  0008               	return
  5545  2000                     __end_of___flge:	
  5546                           
  5547                           	psect	text2
  5548  106C                     __ptext2:	
  5549 ;; *************** function _ReadVoltage *****************
  5550 ;; Defined at:
  5551 ;;		line 64 in file "ADC.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;		None
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  voltage         4    0[BANK1 ] unsigned char 
  5556 ;;  temp            2    4[BANK1 ] unsigned int 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  4   60[BANK0 ] unsigned int 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0, pclath, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;Total ram usage:       11 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    5
  5573 ;; This function calls:
  5574 ;;		_DisableInternalADC
  5575 ;;		_InternalADC_Read
  5576 ;;		___fldiv
  5577 ;;		___flmul
  5578 ;;		___lwtofl
  5579 ;; This function is called by:
  5580 ;;		_main
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _ReadVoltage
  5586  106C                     _ReadVoltage:	
  5587                           
  5588                           ;ADC.c: 66: unsigned int temp;
  5589                           ;ADC.c: 67: double voltage;
  5590                           ;ADC.c: 68: LATC &= ~0b00000001;
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5594  106C  30FE               	movlw	254
  5595  106D  0020               	movlb	0	; select bank0
  5596  106E  00E0               	movwf	??_ReadVoltage
  5597  106F  0860               	movf	??_ReadVoltage,w
  5598  1070  0022               	movlb	2	; select bank2
  5599  1071  058E               	andwf	14,f	;volatile
  5600                           
  5601                           ;ADC.c: 69: temp = InternalADC_Read(2);
  5602  1072  3002               	movlw	2
  5603  1073  319C  24AC  3190   	fcall	_InternalADC_Read
  5604  1076  0020               	movlb	0	; select bank0
  5605  1077  0830               	movf	?_InternalADC_Read+1,w
  5606  1078  0021               	movlb	1	; select bank1
  5607  1079  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5608  107A  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5609  107B  0020               	movlb	0	; select bank0
  5610  107C  082F               	movf	?_InternalADC_Read,w
  5611  107D  0021               	movlb	1	; select bank1
  5612  107E  01A4               	clrf	ReadVoltage@temp^(0+128)
  5613  107F  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5614                           
  5615                           ;ADC.c: 70: DisableInternalADC();
  5616  1080  3187  27F8  3190   	fcall	_DisableInternalADC
  5617                           
  5618                           ;ADC.c: 71: LATC |= 0b00000001;
  5619  1083  0022               	movlb	2	; select bank2
  5620  1084  140E               	bsf	14,0	;volatile
  5621                           
  5622                           ;ADC.c: 75: if((FVRCON & 0x03) == 0x03)
  5623  1085  3003               	movlw	3
  5624  1086  0517               	andwf	23,w	;volatile
  5625  1087  0020               	movlb	0	; select bank0
  5626  1088  00E0               	movwf	??_ReadVoltage
  5627  1089  0860               	movf	??_ReadVoltage,w
  5628  108A  3A03               	xorlw	3
  5629  108B  1D03               	skipz
  5630  108C  2894               	goto	l7114
  5631                           
  5632                           ;ADC.c: 76: {
  5633                           ;ADC.c: 78: temp <<= 2;
  5634  108D  3002               	movlw	2
  5635  108E  0021               	movlb	1	; select bank1
  5636  108F                     u9905:	
  5637  108F  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5638  1090  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5639  1091  0B89               	decfsz	9,f
  5640  1092  288F               	goto	u9905
  5641                           
  5642                           ;ADC.c: 79: }
  5643  1093  28A3               	goto	l7118
  5644  1094                     l7114:	
  5645                           
  5646                           ;ADC.c: 80: else if((FVRCON & 0x03) == 0x02)
  5647  1094  3003               	movlw	3
  5648  1095  0022               	movlb	2	; select bank2
  5649  1096  0517               	andwf	23,w	;volatile
  5650  1097  0020               	movlb	0	; select bank0
  5651  1098  00E0               	movwf	??_ReadVoltage
  5652  1099  0860               	movf	??_ReadVoltage,w
  5653  109A  3A02               	xorlw	2
  5654  109B  1D03               	skipz
  5655  109C  28A3               	goto	l7118
  5656                           
  5657                           ;ADC.c: 81: {
  5658                           ;ADC.c: 83: temp <<= 1;
  5659  109D  3001               	movlw	1
  5660  109E  0021               	movlb	1	; select bank1
  5661  109F                     u9925:	
  5662  109F  35A4               	lslf	ReadVoltage@temp^(0+128),f
  5663  10A0  0DA5               	rlf	(ReadVoltage@temp+1)^(0+128),f
  5664  10A1  0B89               	decfsz	9,f
  5665  10A2  289F               	goto	u9925
  5666  10A3                     l7118:	
  5667                           
  5668                           ;ADC.c: 84: }
  5669                           ;ADC.c: 85: voltage = ((double)temp / 1000) * 5.7;
  5670  10A3  3040               	movlw	64
  5671  10A4  0020               	movlb	0	; select bank0
  5672  10A5  00CB               	movwf	___flmul@f1+3
  5673  10A6  30B6               	movlw	182
  5674  10A7  00CA               	movwf	___flmul@f1+2
  5675  10A8  3066               	movlw	102
  5676  10A9  00C9               	movwf	___flmul@f1+1
  5677  10AA  3066               	movlw	102
  5678  10AB  00C8               	movwf	___flmul@f1
  5679  10AC  3044               	movlw	68
  5680  10AD  00B7               	movwf	___fldiv@f2+3
  5681  10AE  307A               	movlw	122
  5682  10AF  00B6               	movwf	___fldiv@f2+2
  5683  10B0  3000               	movlw	0
  5684  10B1  00B5               	movwf	___fldiv@f2+1
  5685  10B2  3000               	movlw	0
  5686  10B3  00B4               	movwf	___fldiv@f2
  5687  10B4  0021               	movlb	1	; select bank1
  5688  10B5  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5689  10B6  0020               	movlb	0	; select bank0
  5690  10B7  01B0               	clrf	___lwtofl@c+1
  5691  10B8  07B0               	addwf	___lwtofl@c+1,f
  5692  10B9  0021               	movlb	1	; select bank1
  5693  10BA  0824               	movf	ReadVoltage@temp^(0+128),w
  5694  10BB  0020               	movlb	0	; select bank0
  5695  10BC  01AF               	clrf	___lwtofl@c
  5696  10BD  07AF               	addwf	___lwtofl@c,f
  5697  10BE  3199  21F5  3190   	fcall	___lwtofl
  5698  10C1  0020               	movlb	0	; select bank0
  5699  10C2  0832               	movf	?___lwtofl+3,w
  5700  10C3  00BB               	movwf	___fldiv@f1+3
  5701  10C4  0831               	movf	?___lwtofl+2,w
  5702  10C5  00BA               	movwf	___fldiv@f1+2
  5703  10C6  0830               	movf	?___lwtofl+1,w
  5704  10C7  00B9               	movwf	___fldiv@f1+1
  5705  10C8  082F               	movf	?___lwtofl,w
  5706  10C9  00B8               	movwf	___fldiv@f1
  5707  10CA  318B  23CA  3190   	fcall	___fldiv
  5708  10CD  0020               	movlb	0	; select bank0
  5709  10CE  0837               	movf	?___fldiv+3,w
  5710  10CF  00CF               	movwf	___flmul@f2+3
  5711  10D0  0836               	movf	?___fldiv+2,w
  5712  10D1  00CE               	movwf	___flmul@f2+2
  5713  10D2  0835               	movf	?___fldiv+1,w
  5714  10D3  00CD               	movwf	___flmul@f2+1
  5715  10D4  0834               	movf	?___fldiv,w
  5716  10D5  00CC               	movwf	___flmul@f2
  5717  10D6  3190  20F8         	fcall	___flmul
  5718  10D8  0020               	movlb	0	; select bank0
  5719  10D9  084B               	movf	?___flmul+3,w
  5720  10DA  0021               	movlb	1	; select bank1
  5721  10DB  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5722  10DC  0020               	movlb	0	; select bank0
  5723  10DD  084A               	movf	?___flmul+2,w
  5724  10DE  0021               	movlb	1	; select bank1
  5725  10DF  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5726  10E0  0020               	movlb	0	; select bank0
  5727  10E1  0849               	movf	?___flmul+1,w
  5728  10E2  0021               	movlb	1	; select bank1
  5729  10E3  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5730  10E4  0020               	movlb	0	; select bank0
  5731  10E5  0848               	movf	?___flmul,w
  5732  10E6  0021               	movlb	1	; select bank1
  5733  10E7  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5734                           
  5735                           ;ADC.c: 86: return voltage;
  5736  10E8  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5737  10E9  0020               	movlb	0	; select bank0
  5738  10EA  00DF               	movwf	?_ReadVoltage+3
  5739  10EB  0021               	movlb	1	; select bank1
  5740  10EC  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5741  10ED  0020               	movlb	0	; select bank0
  5742  10EE  00DE               	movwf	?_ReadVoltage+2
  5743  10EF  0021               	movlb	1	; select bank1
  5744  10F0  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5745  10F1  0020               	movlb	0	; select bank0
  5746  10F2  00DD               	movwf	?_ReadVoltage+1
  5747  10F3  0021               	movlb	1	; select bank1
  5748  10F4  0820               	movf	ReadVoltage@voltage^(0+128),w
  5749  10F5  0020               	movlb	0	; select bank0
  5750  10F6  00DC               	movwf	?_ReadVoltage
  5751  10F7  0008               	return
  5752  10F8                     __end_of_ReadVoltage:	
  5753                           
  5754                           	psect	text3
  5755  19F5                     __ptext3:	
  5756 ;; *************** function ___lwtofl *****************
  5757 ;; Defined at:
  5758 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  c               2   15[BANK0 ] unsigned int 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  4   15[BANK0 ] unsigned int 
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0, pclath, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:        5 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    4
  5779 ;; This function calls:
  5780 ;;		___flpack
  5781 ;; This function is called by:
  5782 ;;		_ReadVoltage
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function ___lwtofl
  5788  19F5                     ___lwtofl:	
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5792  19F5  0020               	movlb	0	; select bank0
  5793  19F6  082F               	movf	___lwtofl@c,w
  5794  19F7  00A5               	movwf	___flpack@arg
  5795  19F8  0830               	movf	___lwtofl@c+1,w
  5796  19F9  00A6               	movwf	___flpack@arg+1
  5797  19FA  01A7               	clrf	___flpack@arg+2
  5798  19FB  01A8               	clrf	___flpack@arg+3
  5799  19FC  3096               	movlw	150
  5800  19FD  00B3               	movwf	??___lwtofl
  5801  19FE  0833               	movf	??___lwtofl,w
  5802  19FF  00A9               	movwf	___flpack@exp
  5803  1A00  01AA               	clrf	___flpack@sign
  5804  1A01  3190  2001         	fcall	___flpack
  5805  1A03  0020               	movlb	0	; select bank0
  5806  1A04  0828               	movf	?___flpack+3,w
  5807  1A05  00B2               	movwf	?___lwtofl+3
  5808  1A06  0827               	movf	?___flpack+2,w
  5809  1A07  00B1               	movwf	?___lwtofl+2
  5810  1A08  0826               	movf	?___flpack+1,w
  5811  1A09  00B0               	movwf	?___lwtofl+1
  5812  1A0A  0825               	movf	?___flpack,w
  5813  1A0B  00AF               	movwf	?___lwtofl
  5814  1A0C  0008               	return
  5815  1A0D                     __end_of___lwtofl:	
  5816                           
  5817                           	psect	text4
  5818  10F8                     __ptext4:	
  5819 ;; *************** function ___flmul *****************
  5820 ;; Defined at:
  5821 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  f1              4   40[BANK0 ] unsigned int 
  5824 ;;  f2              4   44[BANK0 ] unsigned int 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5827 ;;  sign            1   59[BANK0 ] unsigned char 
  5828 ;;  cntr            1   58[BANK0 ] unsigned char 
  5829 ;;  exp             1   53[BANK0 ] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  4   40[BANK0 ] unsigned char 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0, pclath, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5839 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;Total ram usage:       20 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    4
  5846 ;; This function calls:
  5847 ;;		___flpack
  5848 ;; This function is called by:
  5849 ;;		_ReadVoltage
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function ___flmul
  5855  10F8                     ___flmul:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5859  10F8  0020               	movlb	0	; select bank0
  5860  10F9  0848               	movf	___flmul@f1,w
  5861  10FA  00D0               	movwf	??___flmul
  5862  10FB  0849               	movf	___flmul@f1+1,w
  5863  10FC  00D1               	movwf	??___flmul+1
  5864  10FD  084A               	movf	___flmul@f1+2,w
  5865  10FE  00D2               	movwf	??___flmul+2
  5866  10FF  084B               	movf	___flmul@f1+3,w
  5867  1100  00D3               	movwf	??___flmul+3
  5868  1101  1003               	clrc
  5869  1102  0D52               	rlf	??___flmul+2,w
  5870  1103  0D53               	rlf	??___flmul+3,w
  5871  1104  00D4               	movwf	??___flmul+4
  5872  1105  0854               	movf	??___flmul+4,w
  5873  1106  00D5               	movwf	___flmul@exp
  5874  1107  08D5               	movf	___flmul@exp,f
  5875  1108  1D03               	skipz
  5876  1109  2913               	goto	l6964
  5877  110A  3000               	movlw	0
  5878  110B  00CB               	movwf	?___flmul+3
  5879  110C  3000               	movlw	0
  5880  110D  00CA               	movwf	?___flmul+2
  5881  110E  3000               	movlw	0
  5882  110F  00C9               	movwf	?___flmul+1
  5883  1110  3000               	movlw	0
  5884  1111  00C8               	movwf	?___flmul
  5885  1112  0008               	return
  5886  1113                     l6964:	
  5887  1113  084C               	movf	___flmul@f2,w
  5888  1114  00D0               	movwf	??___flmul
  5889  1115  084D               	movf	___flmul@f2+1,w
  5890  1116  00D1               	movwf	??___flmul+1
  5891  1117  084E               	movf	___flmul@f2+2,w
  5892  1118  00D2               	movwf	??___flmul+2
  5893  1119  084F               	movf	___flmul@f2+3,w
  5894  111A  00D3               	movwf	??___flmul+3
  5895  111B  1003               	clrc
  5896  111C  0D52               	rlf	??___flmul+2,w
  5897  111D  0D53               	rlf	??___flmul+3,w
  5898  111E  00D4               	movwf	??___flmul+4
  5899  111F  0854               	movf	??___flmul+4,w
  5900  1120  00DB               	movwf	___flmul@sign
  5901  1121  08DB               	movf	___flmul@sign,f
  5902  1122  1D03               	skipz
  5903  1123  292D               	goto	l6970
  5904  1124  3000               	movlw	0
  5905  1125  00CB               	movwf	?___flmul+3
  5906  1126  3000               	movlw	0
  5907  1127  00CA               	movwf	?___flmul+2
  5908  1128  3000               	movlw	0
  5909  1129  00C9               	movwf	?___flmul+1
  5910  112A  3000               	movlw	0
  5911  112B  00C8               	movwf	?___flmul
  5912  112C  0008               	return
  5913  112D                     l6970:	
  5914  112D  085B               	movf	___flmul@sign,w
  5915  112E  3E7B               	addlw	123
  5916  112F  00D0               	movwf	??___flmul
  5917  1130  0850               	movf	??___flmul,w
  5918  1131  07D5               	addwf	___flmul@exp,f
  5919  1132  0848               	movf	___flmul@f1,w
  5920  1133  00D0               	movwf	??___flmul
  5921  1134  0849               	movf	___flmul@f1+1,w
  5922  1135  00D1               	movwf	??___flmul+1
  5923  1136  084A               	movf	___flmul@f1+2,w
  5924  1137  00D2               	movwf	??___flmul+2
  5925  1138  084B               	movf	___flmul@f1+3,w
  5926  1139  00D3               	movwf	??___flmul+3
  5927  113A  3018               	movlw	24
  5928  113B                     u9715:	
  5929  113B  36D3               	lsrf	??___flmul+3,f
  5930  113C  0CD2               	rrf	??___flmul+2,f
  5931  113D  0CD1               	rrf	??___flmul+1,f
  5932  113E  0CD0               	rrf	??___flmul,f
  5933  113F  0B89               	decfsz	9,f
  5934  1140  293B               	goto	u9715
  5935  1141  0850               	movf	??___flmul,w
  5936  1142  00D4               	movwf	??___flmul+4
  5937  1143  0854               	movf	??___flmul+4,w
  5938  1144  00DB               	movwf	___flmul@sign
  5939  1145  084C               	movf	___flmul@f2,w
  5940  1146  00D0               	movwf	??___flmul
  5941  1147  084D               	movf	___flmul@f2+1,w
  5942  1148  00D1               	movwf	??___flmul+1
  5943  1149  084E               	movf	___flmul@f2+2,w
  5944  114A  00D2               	movwf	??___flmul+2
  5945  114B  084F               	movf	___flmul@f2+3,w
  5946  114C  00D3               	movwf	??___flmul+3
  5947  114D  3018               	movlw	24
  5948  114E                     u9725:	
  5949  114E  36D3               	lsrf	??___flmul+3,f
  5950  114F  0CD2               	rrf	??___flmul+2,f
  5951  1150  0CD1               	rrf	??___flmul+1,f
  5952  1151  0CD0               	rrf	??___flmul,f
  5953  1152  0B89               	decfsz	9,f
  5954  1153  294E               	goto	u9725
  5955  1154  0850               	movf	??___flmul,w
  5956  1155  00D4               	movwf	??___flmul+4
  5957  1156  0854               	movf	??___flmul+4,w
  5958  1157  06DB               	xorwf	___flmul@sign,f
  5959  1158  3080               	movlw	128
  5960  1159  00D0               	movwf	??___flmul
  5961  115A  0850               	movf	??___flmul,w
  5962  115B  05DB               	andwf	___flmul@sign,f
  5963  115C  17CA               	bsf	___flmul@f1+2,7
  5964  115D  17CE               	bsf	___flmul@f2+2,7
  5965  115E  30FF               	movlw	255
  5966  115F  05CC               	andwf	___flmul@f2,f
  5967  1160  30FF               	movlw	255
  5968  1161  05CD               	andwf	___flmul@f2+1,f
  5969  1162  30FF               	movlw	255
  5970  1163  05CE               	andwf	___flmul@f2+2,f
  5971  1164  3000               	movlw	0
  5972  1165  05CF               	andwf	___flmul@f2+3,f
  5973  1166  3000               	movlw	0
  5974  1167  00D9               	movwf	___flmul@f3_as_product+3
  5975  1168  3000               	movlw	0
  5976  1169  00D8               	movwf	___flmul@f3_as_product+2
  5977  116A  3000               	movlw	0
  5978  116B  00D7               	movwf	___flmul@f3_as_product+1
  5979  116C  3000               	movlw	0
  5980  116D  00D6               	movwf	___flmul@f3_as_product
  5981  116E  3007               	movlw	7
  5982  116F  00D0               	movwf	??___flmul
  5983  1170  0850               	movf	??___flmul,w
  5984  1171  00DA               	movwf	___flmul@cntr
  5985  1172                     l6982:	
  5986  1172  1C48               	btfss	___flmul@f1,0
  5987  1173  297C               	goto	l6986
  5988  1174  084C               	movf	___flmul@f2,w
  5989  1175  07D6               	addwf	___flmul@f3_as_product,f
  5990  1176  084D               	movf	___flmul@f2+1,w
  5991  1177  3DD7               	addwfc	___flmul@f3_as_product+1,f
  5992  1178  084E               	movf	___flmul@f2+2,w
  5993  1179  3DD8               	addwfc	___flmul@f3_as_product+2,f
  5994  117A  084F               	movf	___flmul@f2+3,w
  5995  117B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  5996  117C                     l6986:	
  5997  117C  3001               	movlw	1
  5998  117D                     u9745:	
  5999  117D  36CB               	lsrf	___flmul@f1+3,f
  6000  117E  0CCA               	rrf	___flmul@f1+2,f
  6001  117F  0CC9               	rrf	___flmul@f1+1,f
  6002  1180  0CC8               	rrf	___flmul@f1,f
  6003  1181  0B89               	decfsz	9,f
  6004  1182  297D               	goto	u9745
  6005  1183  3001               	movlw	1
  6006  1184                     u9755:	
  6007  1184  35CC               	lslf	___flmul@f2,f
  6008  1185  0DCD               	rlf	___flmul@f2+1,f
  6009  1186  0DCE               	rlf	___flmul@f2+2,f
  6010  1187  0DCF               	rlf	___flmul@f2+3,f
  6011  1188  0B89               	decfsz	9,f
  6012  1189  2984               	goto	u9755
  6013  118A  3001               	movlw	1
  6014  118B  02DA               	subwf	___flmul@cntr,f
  6015  118C  1D03               	btfss	3,2
  6016  118D  2972               	goto	l6982
  6017  118E  3011               	movlw	17
  6018  118F  00D0               	movwf	??___flmul
  6019  1190  0850               	movf	??___flmul,w
  6020  1191  00DA               	movwf	___flmul@cntr
  6021  1192                     l6994:	
  6022  1192  1C48               	btfss	___flmul@f1,0
  6023  1193  299C               	goto	l6998
  6024  1194  084C               	movf	___flmul@f2,w
  6025  1195  07D6               	addwf	___flmul@f3_as_product,f
  6026  1196  084D               	movf	___flmul@f2+1,w
  6027  1197  3DD7               	addwfc	___flmul@f3_as_product+1,f
  6028  1198  084E               	movf	___flmul@f2+2,w
  6029  1199  3DD8               	addwfc	___flmul@f3_as_product+2,f
  6030  119A  084F               	movf	___flmul@f2+3,w
  6031  119B  3DD9               	addwfc	___flmul@f3_as_product+3,f
  6032  119C                     l6998:	
  6033  119C  3001               	movlw	1
  6034  119D                     u9785:	
  6035  119D  36CB               	lsrf	___flmul@f1+3,f
  6036  119E  0CCA               	rrf	___flmul@f1+2,f
  6037  119F  0CC9               	rrf	___flmul@f1+1,f
  6038  11A0  0CC8               	rrf	___flmul@f1,f
  6039  11A1  0B89               	decfsz	9,f
  6040  11A2  299D               	goto	u9785
  6041  11A3  3001               	movlw	1
  6042  11A4                     u9795:	
  6043  11A4  36D9               	lsrf	___flmul@f3_as_product+3,f
  6044  11A5  0CD8               	rrf	___flmul@f3_as_product+2,f
  6045  11A6  0CD7               	rrf	___flmul@f3_as_product+1,f
  6046  11A7  0CD6               	rrf	___flmul@f3_as_product,f
  6047  11A8  0B89               	decfsz	9,f
  6048  11A9  29A4               	goto	u9795
  6049  11AA  3001               	movlw	1
  6050  11AB  02DA               	subwf	___flmul@cntr,f
  6051  11AC  1D03               	btfss	3,2
  6052  11AD  2992               	goto	l6994
  6053  11AE  0859               	movf	___flmul@f3_as_product+3,w
  6054  11AF  00A8               	movwf	___flpack@arg+3
  6055  11B0  0858               	movf	___flmul@f3_as_product+2,w
  6056  11B1  00A7               	movwf	___flpack@arg+2
  6057  11B2  0857               	movf	___flmul@f3_as_product+1,w
  6058  11B3  00A6               	movwf	___flpack@arg+1
  6059  11B4  0856               	movf	___flmul@f3_as_product,w
  6060  11B5  00A5               	movwf	___flpack@arg
  6061  11B6  0855               	movf	___flmul@exp,w
  6062  11B7  00D0               	movwf	??___flmul
  6063  11B8  0850               	movf	??___flmul,w
  6064  11B9  00A9               	movwf	___flpack@exp
  6065  11BA  085B               	movf	___flmul@sign,w
  6066  11BB  00D1               	movwf	??___flmul+1
  6067  11BC  0851               	movf	??___flmul+1,w
  6068  11BD  00AA               	movwf	___flpack@sign
  6069  11BE  3190  2001         	fcall	___flpack
  6070  11C0  0020               	movlb	0	; select bank0
  6071  11C1  0828               	movf	?___flpack+3,w
  6072  11C2  00CB               	movwf	?___flmul+3
  6073  11C3  0827               	movf	?___flpack+2,w
  6074  11C4  00CA               	movwf	?___flmul+2
  6075  11C5  0826               	movf	?___flpack+1,w
  6076  11C6  00C9               	movwf	?___flmul+1
  6077  11C7  0825               	movf	?___flpack,w
  6078  11C8  00C8               	movwf	?___flmul
  6079  11C9  0008               	return
  6080  11CA                     __end_of___flmul:	
  6081                           
  6082                           	psect	text5
  6083  0BCA                     __ptext5:	
  6084 ;; *************** function ___fldiv *****************
  6085 ;; Defined at:
  6086 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  f2              4   20[BANK0 ] unsigned char 
  6089 ;;  f1              4   24[BANK0 ] unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  f3              4   33[BANK0 ] unsigned char 
  6092 ;;  sign            1   39[BANK0 ] unsigned char 
  6093 ;;  exp             1   38[BANK0 ] unsigned char 
  6094 ;;  cntr            1   37[BANK0 ] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  4   20[BANK0 ] unsigned char 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, pclath, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6104 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;Total ram usage:       20 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    4
  6111 ;; This function calls:
  6112 ;;		___flpack
  6113 ;; This function is called by:
  6114 ;;		_ReadVoltage
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           
  6119                           ;psect for function ___fldiv
  6120  0BCA                     ___fldiv:	
  6121                           
  6122                           ;incstack = 0
  6123                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6124  0BCA  0020               	movlb	0	; select bank0
  6125  0BCB  0838               	movf	___fldiv@f1,w
  6126  0BCC  00BC               	movwf	??___fldiv
  6127  0BCD  0839               	movf	___fldiv@f1+1,w
  6128  0BCE  00BD               	movwf	??___fldiv+1
  6129  0BCF  083A               	movf	___fldiv@f1+2,w
  6130  0BD0  00BE               	movwf	??___fldiv+2
  6131  0BD1  083B               	movf	___fldiv@f1+3,w
  6132  0BD2  00BF               	movwf	??___fldiv+3
  6133  0BD3  1003               	clrc
  6134  0BD4  0D3E               	rlf	??___fldiv+2,w
  6135  0BD5  0D3F               	rlf	??___fldiv+3,w
  6136  0BD6  00C0               	movwf	??___fldiv+4
  6137  0BD7  0840               	movf	??___fldiv+4,w
  6138  0BD8  00C6               	movwf	___fldiv@exp
  6139  0BD9  08C6               	movf	___fldiv@exp,f
  6140  0BDA  1D03               	skipz
  6141  0BDB  2BE5               	goto	l6926
  6142  0BDC  3000               	movlw	0
  6143  0BDD  00B7               	movwf	?___fldiv+3
  6144  0BDE  3000               	movlw	0
  6145  0BDF  00B6               	movwf	?___fldiv+2
  6146  0BE0  3000               	movlw	0
  6147  0BE1  00B5               	movwf	?___fldiv+1
  6148  0BE2  3000               	movlw	0
  6149  0BE3  00B4               	movwf	?___fldiv
  6150  0BE4  0008               	return
  6151  0BE5                     l6926:	
  6152  0BE5  0834               	movf	___fldiv@f2,w
  6153  0BE6  00BC               	movwf	??___fldiv
  6154  0BE7  0835               	movf	___fldiv@f2+1,w
  6155  0BE8  00BD               	movwf	??___fldiv+1
  6156  0BE9  0836               	movf	___fldiv@f2+2,w
  6157  0BEA  00BE               	movwf	??___fldiv+2
  6158  0BEB  0837               	movf	___fldiv@f2+3,w
  6159  0BEC  00BF               	movwf	??___fldiv+3
  6160  0BED  1003               	clrc
  6161  0BEE  0D3E               	rlf	??___fldiv+2,w
  6162  0BEF  0D3F               	rlf	??___fldiv+3,w
  6163  0BF0  00C0               	movwf	??___fldiv+4
  6164  0BF1  0840               	movf	??___fldiv+4,w
  6165  0BF2  00C7               	movwf	___fldiv@sign
  6166  0BF3  08C7               	movf	___fldiv@sign,f
  6167  0BF4  1D03               	skipz
  6168  0BF5  2BFF               	goto	l6932
  6169  0BF6  3000               	movlw	0
  6170  0BF7  00B7               	movwf	?___fldiv+3
  6171  0BF8  3000               	movlw	0
  6172  0BF9  00B6               	movwf	?___fldiv+2
  6173  0BFA  3000               	movlw	0
  6174  0BFB  00B5               	movwf	?___fldiv+1
  6175  0BFC  3000               	movlw	0
  6176  0BFD  00B4               	movwf	?___fldiv
  6177  0BFE  0008               	return
  6178  0BFF                     l6932:	
  6179  0BFF  3089               	movlw	137
  6180  0C00  0747               	addwf	___fldiv@sign,w
  6181  0C01  00BC               	movwf	??___fldiv
  6182  0C02  083C               	movf	??___fldiv,w
  6183  0C03  02C6               	subwf	___fldiv@exp,f
  6184  0C04  0838               	movf	___fldiv@f1,w
  6185  0C05  00BC               	movwf	??___fldiv
  6186  0C06  0839               	movf	___fldiv@f1+1,w
  6187  0C07  00BD               	movwf	??___fldiv+1
  6188  0C08  083A               	movf	___fldiv@f1+2,w
  6189  0C09  00BE               	movwf	??___fldiv+2
  6190  0C0A  083B               	movf	___fldiv@f1+3,w
  6191  0C0B  00BF               	movwf	??___fldiv+3
  6192  0C0C  3018               	movlw	24
  6193  0C0D                     u9635:	
  6194  0C0D  36BF               	lsrf	??___fldiv+3,f
  6195  0C0E  0CBE               	rrf	??___fldiv+2,f
  6196  0C0F  0CBD               	rrf	??___fldiv+1,f
  6197  0C10  0CBC               	rrf	??___fldiv,f
  6198  0C11  0B89               	decfsz	9,f
  6199  0C12  2C0D               	goto	u9635
  6200  0C13  083C               	movf	??___fldiv,w
  6201  0C14  00C0               	movwf	??___fldiv+4
  6202  0C15  0840               	movf	??___fldiv+4,w
  6203  0C16  00C7               	movwf	___fldiv@sign
  6204  0C17  0834               	movf	___fldiv@f2,w
  6205  0C18  00BC               	movwf	??___fldiv
  6206  0C19  0835               	movf	___fldiv@f2+1,w
  6207  0C1A  00BD               	movwf	??___fldiv+1
  6208  0C1B  0836               	movf	___fldiv@f2+2,w
  6209  0C1C  00BE               	movwf	??___fldiv+2
  6210  0C1D  0837               	movf	___fldiv@f2+3,w
  6211  0C1E  00BF               	movwf	??___fldiv+3
  6212  0C1F  3018               	movlw	24
  6213  0C20                     u9645:	
  6214  0C20  36BF               	lsrf	??___fldiv+3,f
  6215  0C21  0CBE               	rrf	??___fldiv+2,f
  6216  0C22  0CBD               	rrf	??___fldiv+1,f
  6217  0C23  0CBC               	rrf	??___fldiv,f
  6218  0C24  0B89               	decfsz	9,f
  6219  0C25  2C20               	goto	u9645
  6220  0C26  083C               	movf	??___fldiv,w
  6221  0C27  00C0               	movwf	??___fldiv+4
  6222  0C28  0840               	movf	??___fldiv+4,w
  6223  0C29  06C7               	xorwf	___fldiv@sign,f
  6224  0C2A  3080               	movlw	128
  6225  0C2B  00BC               	movwf	??___fldiv
  6226  0C2C  083C               	movf	??___fldiv,w
  6227  0C2D  05C7               	andwf	___fldiv@sign,f
  6228  0C2E  17BA               	bsf	___fldiv@f1+2,7
  6229  0C2F  30FF               	movlw	255
  6230  0C30  05B8               	andwf	___fldiv@f1,f
  6231  0C31  30FF               	movlw	255
  6232  0C32  05B9               	andwf	___fldiv@f1+1,f
  6233  0C33  30FF               	movlw	255
  6234  0C34  05BA               	andwf	___fldiv@f1+2,f
  6235  0C35  3000               	movlw	0
  6236  0C36  05BB               	andwf	___fldiv@f1+3,f
  6237  0C37  17B6               	bsf	___fldiv@f2+2,7
  6238  0C38  30FF               	movlw	255
  6239  0C39  05B4               	andwf	___fldiv@f2,f
  6240  0C3A  30FF               	movlw	255
  6241  0C3B  05B5               	andwf	___fldiv@f2+1,f
  6242  0C3C  30FF               	movlw	255
  6243  0C3D  05B6               	andwf	___fldiv@f2+2,f
  6244  0C3E  3000               	movlw	0
  6245  0C3F  05B7               	andwf	___fldiv@f2+3,f
  6246  0C40  3020               	movlw	32
  6247  0C41  00BC               	movwf	??___fldiv
  6248  0C42  083C               	movf	??___fldiv,w
  6249  0C43  00C5               	movwf	___fldiv@cntr
  6250  0C44                     l6944:	
  6251  0C44  3001               	movlw	1
  6252  0C45                     u9655:	
  6253  0C45  35C1               	lslf	___fldiv@f3,f
  6254  0C46  0DC2               	rlf	___fldiv@f3+1,f
  6255  0C47  0DC3               	rlf	___fldiv@f3+2,f
  6256  0C48  0DC4               	rlf	___fldiv@f3+3,f
  6257  0C49  0B89               	decfsz	9,f
  6258  0C4A  2C45               	goto	u9655
  6259  0C4B  0837               	movf	___fldiv@f2+3,w
  6260  0C4C  023B               	subwf	___fldiv@f1+3,w
  6261  0C4D  1D03               	skipz
  6262  0C4E  2C59               	goto	u9665
  6263  0C4F  0836               	movf	___fldiv@f2+2,w
  6264  0C50  023A               	subwf	___fldiv@f1+2,w
  6265  0C51  1D03               	skipz
  6266  0C52  2C59               	goto	u9665
  6267  0C53  0835               	movf	___fldiv@f2+1,w
  6268  0C54  0239               	subwf	___fldiv@f1+1,w
  6269  0C55  1D03               	skipz
  6270  0C56  2C59               	goto	u9665
  6271  0C57  0834               	movf	___fldiv@f2,w
  6272  0C58  0238               	subwf	___fldiv@f1,w
  6273  0C59                     u9665:	
  6274  0C59  1C03               	skipc
  6275  0C5A  2C64               	goto	l6950
  6276  0C5B  0834               	movf	___fldiv@f2,w
  6277  0C5C  02B8               	subwf	___fldiv@f1,f
  6278  0C5D  0835               	movf	___fldiv@f2+1,w
  6279  0C5E  3BB9               	subwfb	___fldiv@f1+1,f
  6280  0C5F  0836               	movf	___fldiv@f2+2,w
  6281  0C60  3BBA               	subwfb	___fldiv@f1+2,f
  6282  0C61  0837               	movf	___fldiv@f2+3,w
  6283  0C62  3BBB               	subwfb	___fldiv@f1+3,f
  6284  0C63  1441               	bsf	___fldiv@f3,0
  6285  0C64                     l6950:	
  6286  0C64  3001               	movlw	1
  6287  0C65                     u9675:	
  6288  0C65  35B8               	lslf	___fldiv@f1,f
  6289  0C66  0DB9               	rlf	___fldiv@f1+1,f
  6290  0C67  0DBA               	rlf	___fldiv@f1+2,f
  6291  0C68  0DBB               	rlf	___fldiv@f1+3,f
  6292  0C69  0B89               	decfsz	9,f
  6293  0C6A  2C65               	goto	u9675
  6294  0C6B  3001               	movlw	1
  6295  0C6C  02C5               	subwf	___fldiv@cntr,f
  6296  0C6D  1D03               	btfss	3,2
  6297  0C6E  2C44               	goto	l6944
  6298  0C6F  0844               	movf	___fldiv@f3+3,w
  6299  0C70  00A8               	movwf	___flpack@arg+3
  6300  0C71  0843               	movf	___fldiv@f3+2,w
  6301  0C72  00A7               	movwf	___flpack@arg+2
  6302  0C73  0842               	movf	___fldiv@f3+1,w
  6303  0C74  00A6               	movwf	___flpack@arg+1
  6304  0C75  0841               	movf	___fldiv@f3,w
  6305  0C76  00A5               	movwf	___flpack@arg
  6306  0C77  0846               	movf	___fldiv@exp,w
  6307  0C78  00BC               	movwf	??___fldiv
  6308  0C79  083C               	movf	??___fldiv,w
  6309  0C7A  00A9               	movwf	___flpack@exp
  6310  0C7B  0847               	movf	___fldiv@sign,w
  6311  0C7C  00BD               	movwf	??___fldiv+1
  6312  0C7D  083D               	movf	??___fldiv+1,w
  6313  0C7E  00AA               	movwf	___flpack@sign
  6314  0C7F  3190  2001         	fcall	___flpack
  6315  0C81  0020               	movlb	0	; select bank0
  6316  0C82  0828               	movf	?___flpack+3,w
  6317  0C83  00B7               	movwf	?___fldiv+3
  6318  0C84  0827               	movf	?___flpack+2,w
  6319  0C85  00B6               	movwf	?___fldiv+2
  6320  0C86  0826               	movf	?___flpack+1,w
  6321  0C87  00B5               	movwf	?___fldiv+1
  6322  0C88  0825               	movf	?___flpack,w
  6323  0C89  00B4               	movwf	?___fldiv
  6324  0C8A  0008               	return
  6325  0C8B                     __end_of___fldiv:	
  6326                           
  6327                           	psect	text6
  6328  1001                     __ptext6:	
  6329 ;; *************** function ___flpack *****************
  6330 ;; Defined at:
  6331 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  arg             4    5[BANK0 ] unsigned long 
  6334 ;;  exp             1    9[BANK0 ] unsigned char 
  6335 ;;  sign            1   10[BANK0 ] unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  4    5[BANK0 ] unsigned char 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:       10 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    3
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		___fldiv
  6358 ;;		___flmul
  6359 ;;		___lwtofl
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function ___flpack
  6365  1001                     ___flpack:	
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6369  1001  0020               	movlb	0	; select bank0
  6370  1002  0829               	movf	___flpack@exp,w
  6371  1003  1903               	btfsc	3,2
  6372  1004  280B               	goto	l6332
  6373  1005  0828               	movf	___flpack@arg+3,w
  6374  1006  0427               	iorwf	___flpack@arg+2,w
  6375  1007  0426               	iorwf	___flpack@arg+1,w
  6376  1008  0425               	iorwf	___flpack@arg,w
  6377  1009  1D03               	skipz
  6378  100A  281F               	goto	l6338
  6379  100B                     l6332:	
  6380  100B  3000               	movlw	0
  6381  100C  00A8               	movwf	?___flpack+3
  6382  100D  3000               	movlw	0
  6383  100E  00A7               	movwf	?___flpack+2
  6384  100F  3000               	movlw	0
  6385  1010  00A6               	movwf	?___flpack+1
  6386  1011  3000               	movlw	0
  6387  1012  00A5               	movwf	?___flpack
  6388  1013  0008               	return
  6389  1014                     l6336:	
  6390  1014  3001               	movlw	1
  6391  1015  00AB               	movwf	??___flpack
  6392  1016  082B               	movf	??___flpack,w
  6393  1017  07A9               	addwf	___flpack@exp,f
  6394  1018  3001               	movlw	1
  6395  1019                     u8235:	
  6396  1019  36A8               	lsrf	___flpack@arg+3,f
  6397  101A  0CA7               	rrf	___flpack@arg+2,f
  6398  101B  0CA6               	rrf	___flpack@arg+1,f
  6399  101C  0CA5               	rrf	___flpack@arg,f
  6400  101D  0B89               	decfsz	9,f
  6401  101E  2819               	goto	u8235
  6402  101F                     l6338:	
  6403  101F  30FE               	movlw	254
  6404  1020  0528               	andwf	___flpack@arg+3,w
  6405  1021  1903               	btfsc	3,2
  6406  1022  2837               	goto	l1177
  6407  1023  2814               	goto	l6336
  6408  1024                     l6340:	
  6409  1024  3001               	movlw	1
  6410  1025  00AB               	movwf	??___flpack
  6411  1026  082B               	movf	??___flpack,w
  6412  1027  07A9               	addwf	___flpack@exp,f
  6413  1028  3001               	movlw	1
  6414  1029  07A5               	addwf	___flpack@arg,f
  6415  102A  3000               	movlw	0
  6416  102B  3DA6               	addwfc	___flpack@arg+1,f
  6417  102C  3000               	movlw	0
  6418  102D  3DA7               	addwfc	___flpack@arg+2,f
  6419  102E  3000               	movlw	0
  6420  102F  3DA8               	addwfc	___flpack@arg+3,f
  6421  1030  3001               	movlw	1
  6422  1031                     u8255:	
  6423  1031  36A8               	lsrf	___flpack@arg+3,f
  6424  1032  0CA7               	rrf	___flpack@arg+2,f
  6425  1033  0CA6               	rrf	___flpack@arg+1,f
  6426  1034  0CA5               	rrf	___flpack@arg,f
  6427  1035  0B89               	decfsz	9,f
  6428  1036  2831               	goto	u8255
  6429  1037                     l1177:	
  6430  1037  30FF               	movlw	255
  6431  1038  0528               	andwf	___flpack@arg+3,w
  6432  1039  1903               	btfsc	3,2
  6433  103A  2845               	goto	l6348
  6434  103B  2824               	goto	l6340
  6435  103C                     l6346:	
  6436  103C  3001               	movlw	1
  6437  103D  02A9               	subwf	___flpack@exp,f
  6438  103E  3001               	movlw	1
  6439  103F                     u8275:	
  6440  103F  35A5               	lslf	___flpack@arg,f
  6441  1040  0DA6               	rlf	___flpack@arg+1,f
  6442  1041  0DA7               	rlf	___flpack@arg+2,f
  6443  1042  0DA8               	rlf	___flpack@arg+3,f
  6444  1043  0B89               	decfsz	9,f
  6445  1044  283F               	goto	u8275
  6446  1045                     l6348:	
  6447  1045  1FA7               	btfss	___flpack@arg+2,7
  6448  1046  283C               	goto	l6346
  6449  1047  1829               	btfsc	___flpack@exp,0
  6450  1048  2851               	goto	l1183
  6451  1049  30FF               	movlw	255
  6452  104A  05A5               	andwf	___flpack@arg,f
  6453  104B  30FF               	movlw	255
  6454  104C  05A6               	andwf	___flpack@arg+1,f
  6455  104D  307F               	movlw	127
  6456  104E  05A7               	andwf	___flpack@arg+2,f
  6457  104F  30FF               	movlw	255
  6458  1050  05A8               	andwf	___flpack@arg+3,f
  6459  1051                     l1183:	
  6460  1051  1003               	clrc
  6461  1052  0CA9               	rrf	___flpack@exp,f
  6462  1053  0829               	movf	___flpack@exp,w
  6463  1054  00AB               	movwf	??___flpack
  6464  1055  01AC               	clrf	??___flpack+1
  6465  1056  01AD               	clrf	??___flpack+2
  6466  1057  01AE               	clrf	??___flpack+3
  6467  1058  3018               	movlw	24
  6468  1059                     u8305:	
  6469  1059  35AB               	lslf	??___flpack,f
  6470  105A  0DAC               	rlf	??___flpack+1,f
  6471  105B  0DAD               	rlf	??___flpack+2,f
  6472  105C  0DAE               	rlf	??___flpack+3,f
  6473  105D  0B89               	decfsz	9,f
  6474  105E  2859               	goto	u8305
  6475  105F  082B               	movf	??___flpack,w
  6476  1060  04A5               	iorwf	___flpack@arg,f
  6477  1061  082C               	movf	??___flpack+1,w
  6478  1062  04A6               	iorwf	___flpack@arg+1,f
  6479  1063  082D               	movf	??___flpack+2,w
  6480  1064  04A7               	iorwf	___flpack@arg+2,f
  6481  1065  082E               	movf	??___flpack+3,w
  6482  1066  04A8               	iorwf	___flpack@arg+3,f
  6483  1067  082A               	movf	___flpack@sign,w
  6484  1068  1903               	btfsc	3,2
  6485  1069  0008               	return
  6486  106A  17A8               	bsf	___flpack@arg+3,7
  6487  106B  0008               	return
  6488  106C                     __end_of___flpack:	
  6489                           
  6490                           	psect	text7
  6491  1CAC                     __ptext7:	
  6492 ;; *************** function _InternalADC_Read *****************
  6493 ;; Defined at:
  6494 ;;		line 94 in file "ADC.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  channel         1    wreg     unsigned char 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  channel         1   19[BANK0 ] unsigned char 
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  2   15[BANK0 ] unsigned int 
  6501 ;; Registers used:
  6502 ;;		wreg, status,2, status,0, pclath, cstack
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6508 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;Total ram usage:        5 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    4
  6515 ;; This function calls:
  6516 ;;		_delayUS
  6517 ;; This function is called by:
  6518 ;;		_ReadVoltage
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function _InternalADC_Read
  6524  1CAC                     _InternalADC_Read:	
  6525                           
  6526                           ;incstack = 0
  6527                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6528                           ;InternalADC_Read@channel stored from wreg
  6529  1CAC  0020               	movlb	0	; select bank0
  6530  1CAD  00B3               	movwf	InternalADC_Read@channel
  6531                           
  6532                           ;ADC.c: 96: ADCON0 =0;
  6533  1CAE  0021               	movlb	1	; select bank1
  6534  1CAF  019D               	clrf	29	;volatile
  6535                           
  6536                           ;ADC.c: 97: ADCON1 =0;
  6537  1CB0  019E               	clrf	30	;volatile
  6538                           
  6539                           ;ADC.c: 98: ADCON1 |= 0b01010000;
  6540  1CB1  3050               	movlw	80
  6541  1CB2  0020               	movlb	0	; select bank0
  6542  1CB3  00B1               	movwf	??_InternalADC_Read
  6543  1CB4  0831               	movf	??_InternalADC_Read,w
  6544  1CB5  0021               	movlb	1	; select bank1
  6545  1CB6  049E               	iorwf	30,f	;volatile
  6546                           
  6547                           ;ADC.c: 99: FVRCON |= 0b10000000;
  6548  1CB7  0022               	movlb	2	; select bank2
  6549  1CB8  1797               	bsf	23,7	;volatile
  6550                           
  6551                           ;ADC.c: 100: FVRCON |= 0b00000011;
  6552  1CB9  3003               	movlw	3
  6553  1CBA  0020               	movlb	0	; select bank0
  6554  1CBB  00B1               	movwf	??_InternalADC_Read
  6555  1CBC  0831               	movf	??_InternalADC_Read,w
  6556  1CBD  0022               	movlb	2	; select bank2
  6557  1CBE  0497               	iorwf	23,f	;volatile
  6558  1CBF                     l961:	
  6559                           ;ADC.c: 101: while(!(FVRCON & 0b01000000));
  6560                           
  6561  1CBF  1F17               	btfss	23,6	;volatile
  6562  1CC0  2CBF               	goto	l961
  6563                           
  6564                           ;ADC.c: 102: ADCON0 |= (channel << 2);
  6565  1CC1  0020               	movlb	0	; select bank0
  6566  1CC2  0833               	movf	InternalADC_Read@channel,w
  6567  1CC3  00B1               	movwf	??_InternalADC_Read
  6568  1CC4  3001               	movlw	1
  6569  1CC5                     u9595:	
  6570  1CC5  35B1               	lslf	??_InternalADC_Read,f
  6571  1CC6  3EFF               	addlw	-1
  6572  1CC7  1D03               	skipz
  6573  1CC8  2CC5               	goto	u9595
  6574  1CC9  3531               	lslf	??_InternalADC_Read,w
  6575  1CCA  00B2               	movwf	??_InternalADC_Read+1
  6576  1CCB  0832               	movf	??_InternalADC_Read+1,w
  6577  1CCC  0021               	movlb	1	; select bank1
  6578  1CCD  049D               	iorwf	29,f	;volatile
  6579                           
  6580                           ;ADC.c: 103: ADCON1 |= 0b10000011;
  6581  1CCE  3083               	movlw	131
  6582  1CCF  0020               	movlb	0	; select bank0
  6583  1CD0  00B1               	movwf	??_InternalADC_Read
  6584  1CD1  0831               	movf	??_InternalADC_Read,w
  6585  1CD2  0021               	movlb	1	; select bank1
  6586  1CD3  049E               	iorwf	30,f	;volatile
  6587                           
  6588                           ;ADC.c: 104: ADCON0 |= 0b00000001;
  6589  1CD4  141D               	bsf	29,0	;volatile
  6590                           
  6591                           ;ADC.c: 105: (PIE1bits.ADIE=0);
  6592  1CD5  1311               	bcf	17,6	;volatile
  6593                           
  6594                           ;ADC.c: 106: delayUS(5);
  6595  1CD6  3000               	movlw	0
  6596  1CD7  0020               	movlb	0	; select bank0
  6597  1CD8  00A8               	movwf	delayUS@US+3
  6598  1CD9  3000               	movlw	0
  6599  1CDA  00A7               	movwf	delayUS@US+2
  6600  1CDB  3000               	movlw	0
  6601  1CDC  00A6               	movwf	delayUS@US+1
  6602  1CDD  3005               	movlw	5
  6603  1CDE  00A5               	movwf	delayUS@US
  6604  1CDF  319B  23F5  319C   	fcall	_delayUS
  6605                           
  6606                           ;ADC.c: 107: ADCON0 |= 0b00000010;
  6607  1CE2  0021               	movlb	1	; select bank1
  6608  1CE3  149D               	bsf	29,1	;volatile
  6609  1CE4                     l964:	
  6610                           ;ADC.c: 108: while(ADCON0 & 0b00000010);
  6611                           
  6612  1CE4  189D               	btfsc	29,1	;volatile
  6613  1CE5  2CE4               	goto	l964
  6614                           
  6615                           ;ADC.c: 109: return ((ADRESH << 8) + ADRESL);
  6616  1CE6  081C               	movf	28,w	;volatile
  6617  1CE7  0020               	movlb	0	; select bank0
  6618  1CE8  01B0               	clrf	?_InternalADC_Read+1
  6619  1CE9  07B0               	addwf	?_InternalADC_Read+1,f
  6620  1CEA  0021               	movlb	1	; select bank1
  6621  1CEB  081B               	movf	27,w	;volatile
  6622  1CEC  0020               	movlb	0	; select bank0
  6623  1CED  01AF               	clrf	?_InternalADC_Read
  6624  1CEE  07AF               	addwf	?_InternalADC_Read,f
  6625  1CEF  0008               	return
  6626  1CF0                     __end_of_InternalADC_Read:	
  6627                           
  6628                           	psect	text8
  6629  07F8                     __ptext8:	
  6630 ;; *************** function _DisableInternalADC *****************
  6631 ;; Defined at:
  6632 ;;		line 117 in file "ADC.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;Total ram usage:        1 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    3
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_ReadVoltage
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _DisableInternalADC
  6662  07F8                     _DisableInternalADC:	
  6663                           
  6664                           ;ADC.c: 119: ADCON0 &= ~0b00000001;
  6665                           
  6666                           ;incstack = 0
  6667                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6668  07F8  30FE               	movlw	254
  6669  07F9  0020               	movlb	0	; select bank0
  6670  07FA  00A5               	movwf	??_DisableInternalADC
  6671  07FB  0825               	movf	??_DisableInternalADC,w
  6672  07FC  0021               	movlb	1	; select bank1
  6673  07FD  059D               	andwf	29,f	;volatile
  6674  07FE  0008               	return
  6675  07FF                     __end_of_DisableInternalADC:	
  6676                           
  6677                           	psect	text9
  6678  191B                     __ptext9:	
  6679 ;; *************** function _PS_2_INIT *****************
  6680 ;; Defined at:
  6681 ;;		line 104 in file "PS_2.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;		None               void
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;Total ram usage:        0 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    4
  6702 ;; This function calls:
  6703 ;;		_Clock_TRIS
  6704 ;;		_Data_TRIS
  6705 ;;		_INIT_PS_2_INTERRUPT
  6706 ;; This function is called by:
  6707 ;;		_main
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _PS_2_INIT
  6713  191B                     _PS_2_INIT:	
  6714                           
  6715                           ;PS_2.c: 107: Clock_TRIS(1);
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6719  191B  3001               	movlw	1
  6720  191C  3198  20FA  3199   	fcall	_Clock_TRIS
  6721                           
  6722                           ;PS_2.c: 108: Data_TRIS(1);
  6723  191F  3001               	movlw	1
  6724  1920  3199  2105  3199   	fcall	_Data_TRIS
  6725                           
  6726                           ;PS_2.c: 109: INIT_PS_2_INTERRUPT(0b00100000);
  6727  1923  3020               	movlw	32
  6728  1924  3199  214F         	fcall	_INIT_PS_2_INTERRUPT
  6729  1926  0008               	return
  6730  1927                     __end_of_PS_2_INIT:	
  6731                           
  6732                           	psect	text10
  6733  194F                     __ptext10:	
  6734 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6735 ;; Defined at:
  6736 ;;		line 152 in file "PS_2.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  DATA_CLK        1    wreg     unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;		None               void
  6743 ;; Registers used:
  6744 ;;		wreg, status,2
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    3
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_PS_2_INIT
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function _INIT_PS_2_INTERRUPT
  6766  194F                     _INIT_PS_2_INTERRUPT:	
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6770                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6771  194F  0020               	movlb	0	; select bank0
  6772  1950  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6773                           
  6774                           ;PS_2.c: 154: IOCAP =0;
  6775  1951  0027               	movlb	7	; select bank7
  6776  1952  0191               	clrf	17	;volatile
  6777                           
  6778                           ;PS_2.c: 155: IOCAN =0;
  6779  1953  0192               	clrf	18	;volatile
  6780                           
  6781                           ;PS_2.c: 156: if(DATA_CLK == 0b00100000)
  6782  1954  0020               	movlb	0	; select bank0
  6783  1955  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6784  1956  3A20               	xorlw	32
  6785  1957  1D03               	skipz
  6786  1958  295C               	goto	l579
  6787                           
  6788                           ;PS_2.c: 157: {
  6789                           ;PS_2.c: 160: IOCAN |= 0b00100000;
  6790  1959  0027               	movlb	7	; select bank7
  6791  195A  1692               	bsf	18,5	;volatile
  6792                           
  6793                           ;PS_2.c: 161: }
  6794  195B  0008               	return
  6795  195C                     l579:	
  6796                           
  6797                           ;PS_2.c: 162: else
  6798                           ;PS_2.c: 163: {
  6799                           ;PS_2.c: 166: IOCAN |= 0b00010000;
  6800  195C  0027               	movlb	7	; select bank7
  6801  195D  1612               	bsf	18,4	;volatile
  6802  195E  0008               	return
  6803  195F                     __end_of_INIT_PS_2_INTERRUPT:	
  6804                           
  6805                           	psect	text11
  6806  1E83                     __ptext11:	
  6807 ;; *************** function _Keyboard_Connected *****************
  6808 ;; Defined at:
  6809 ;;		line 1136 in file "PS_2.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;		None
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  i               4   65[BANK0 ] unsigned long 
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  1    wreg      unsigned char 
  6816 ;; Registers used:
  6817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;Total ram usage:        4 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    9
  6830 ;; This function calls:
  6831 ;;		_PS_2_DISABLE_INTERRUPT
  6832 ;;		_PS_2_ENABLE_INTERRUPT
  6833 ;;		_PS_2_Update
  6834 ;;		_Send_PS2
  6835 ;;		_delayUS
  6836 ;; This function is called by:
  6837 ;;		_main
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           
  6842                           ;psect for function _Keyboard_Connected
  6843  1E83                     _Keyboard_Connected:	
  6844                           
  6845                           ;PS_2.c: 1138: unsigned long i=0;
  6846                           
  6847                           ;incstack = 0
  6848                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6849  1E83  3000               	movlw	0
  6850  1E84  0020               	movlb	0	; select bank0
  6851  1E85  00E4               	movwf	Keyboard_Connected@i+3
  6852  1E86  3000               	movlw	0
  6853  1E87  00E3               	movwf	Keyboard_Connected@i+2
  6854  1E88  3000               	movlw	0
  6855  1E89  00E2               	movwf	Keyboard_Connected@i+1
  6856  1E8A  3000               	movlw	0
  6857  1E8B  00E1               	movwf	Keyboard_Connected@i
  6858                           
  6859                           ;PS_2.c: 1139: ECHO =0;
  6860  1E8C  0021               	movlb	1	; select bank1
  6861  1E8D  01E9               	clrf	_ECHO^(0+128)	;volatile
  6862                           
  6863                           ;PS_2.c: 1140: Send_PS2(0xEE);
  6864  1E8E  30EE               	movlw	238
  6865  1E8F  318C  248B  319E   	fcall	_Send_PS2
  6866                           
  6867                           ;PS_2.c: 1141: PS_2_ENABLE_INTERRUPT(0b00100000);
  6868  1E92  3020               	movlw	32
  6869  1E93  3199  21E0  319E   	fcall	_PS_2_ENABLE_INTERRUPT
  6870                           
  6871                           ;PS_2.c: 1142: for(i=0;i<5000;i++)
  6872  1E96  3000               	movlw	0
  6873  1E97  0020               	movlb	0	; select bank0
  6874  1E98  00E4               	movwf	Keyboard_Connected@i+3
  6875  1E99  3000               	movlw	0
  6876  1E9A  00E3               	movwf	Keyboard_Connected@i+2
  6877  1E9B  3000               	movlw	0
  6878  1E9C  00E2               	movwf	Keyboard_Connected@i+1
  6879  1E9D  3000               	movlw	0
  6880  1E9E  00E1               	movwf	Keyboard_Connected@i
  6881  1E9F  2EA9               	goto	L4
  6882  1EA0                     l7088:	
  6883                           ;PS_2.c: 1147: {
  6884                           ;PS_2.c: 1148: break;
  6885                           
  6886  1EA0  3001               	movlw	1
  6887  1EA1  0020               	movlb	0	; select bank0
  6888  1EA2  07E1               	addwf	Keyboard_Connected@i,f
  6889  1EA3  3000               	movlw	0
  6890  1EA4  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6891  1EA5  3000               	movlw	0
  6892  1EA6  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6893  1EA7  3000               	movlw	0
  6894  1EA8  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6895  1EA9                     L4:	
  6896  1EA9  3000               	movlw	0
  6897  1EAA  0264               	subwf	Keyboard_Connected@i+3,w
  6898  1EAB  1D03               	skipz
  6899  1EAC  2EB7               	goto	u9875
  6900  1EAD  3000               	movlw	0
  6901  1EAE  0263               	subwf	Keyboard_Connected@i+2,w
  6902  1EAF  1D03               	skipz
  6903  1EB0  2EB7               	goto	u9875
  6904  1EB1  3013               	movlw	19
  6905  1EB2  0262               	subwf	Keyboard_Connected@i+1,w
  6906  1EB3  1D03               	skipz
  6907  1EB4  2EB7               	goto	u9875
  6908  1EB5  3088               	movlw	136
  6909  1EB6  0261               	subwf	Keyboard_Connected@i,w
  6910  1EB7                     u9875:	
  6911  1EB7  1803               	btfsc	3,0
  6912  1EB8  2ECC               	goto	l7090
  6913                           
  6914                           ;PS_2.c: 1143: {
  6915                           ;PS_2.c: 1144: PS_2_Update();
  6916  1EB9  3181  211D  319E   	fcall	_PS_2_Update
  6917                           
  6918                           ;PS_2.c: 1145: delayUS(10);
  6919  1EBC  3000               	movlw	0
  6920  1EBD  0020               	movlb	0	; select bank0
  6921  1EBE  00A8               	movwf	delayUS@US+3
  6922  1EBF  3000               	movlw	0
  6923  1EC0  00A7               	movwf	delayUS@US+2
  6924  1EC1  3000               	movlw	0
  6925  1EC2  00A6               	movwf	delayUS@US+1
  6926  1EC3  300A               	movlw	10
  6927  1EC4  00A5               	movwf	delayUS@US
  6928  1EC5  319B  23F5  319E   	fcall	_delayUS
  6929                           
  6930                           ;PS_2.c: 1146: if(ECHO)
  6931  1EC8  0021               	movlb	1	; select bank1
  6932  1EC9  0869               	movf	_ECHO^(0+128),w	;volatile
  6933  1ECA  1903               	btfsc	3,2
  6934  1ECB  2EA0               	goto	l7088
  6935  1ECC                     l7090:	
  6936                           
  6937                           ;PS_2.c: 1149: }
  6938                           ;PS_2.c: 1150: }
  6939                           ;PS_2.c: 1151: PS_2_DISABLE_INTERRUPT(0b00100000);
  6940  1ECC  3020               	movlw	32
  6941  1ECD  319A  220D  319E   	fcall	_PS_2_DISABLE_INTERRUPT
  6942                           
  6943                           ;PS_2.c: 1152: if(ECHO)
  6944  1ED0  0021               	movlb	1	; select bank1
  6945  1ED1  0869               	movf	_ECHO^(0+128),w	;volatile
  6946  1ED2  1903               	btfsc	3,2
  6947  1ED3  2ED6               	goto	l7100
  6948                           
  6949                           ;PS_2.c: 1153: {
  6950                           ;PS_2.c: 1154: return 1;
  6951  1ED4  3001               	movlw	1
  6952                           
  6953                           ;PS_2.c: 1155: }
  6954  1ED5  0008               	return
  6955  1ED6                     l7100:	
  6956                           
  6957                           ;PS_2.c: 1156: else
  6958                           ;PS_2.c: 1157: {
  6959                           ;PS_2.c: 1158: return 0;
  6960  1ED6  3000               	movlw	0
  6961  1ED7  0008               	return
  6962  1ED8                     __end_of_Keyboard_Connected:	
  6963                           
  6964                           	psect	text12
  6965  011D                     __ptext12:	
  6966 ;; *************** function _PS_2_Update *****************
  6967 ;; Defined at:
  6968 ;;		line 258 in file "PS_2.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  buf            60    0[BANK5 ] unsigned char [60]
  6973 ;;  temp            1   64[BANK5 ] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;		None               void
  6976 ;; Registers used:
  6977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:       74 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    8
  6990 ;; This function calls:
  6991 ;;		_CheckSum_byte
  6992 ;;		_Decode_Scan_Code
  6993 ;;		_Decode_Scan_Code_Function
  6994 ;;		_Decode_Scan_Code_FunctionE0
  6995 ;;		_Decode_Scan_Code_Shift
  6996 ;;		_ISNUMBER
  6997 ;;		_PS_2_DISABLE_INTERRUPT
  6998 ;;		_PS_2_ENABLE_INTERRUPT
  6999 ;;		_Reverse_Byte
  7000 ;;		_Send_PS2
  7001 ;;		_SetBaud
  7002 ;;		_UART_send_break_timed
  7003 ;;		_UARTchar
  7004 ;;		_UARTstringWAIT
  7005 ;;		___lmul
  7006 ;;		_delayUS
  7007 ;;		_sprintf
  7008 ;; This function is called by:
  7009 ;;		_main
  7010 ;;		_Keyboard_Connected
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           
  7015                           ;psect for function _PS_2_Update
  7016  011D                     _PS_2_Update:	
  7017                           
  7018                           ;PS_2.c: 260: unsigned char temp =0;
  7019                           
  7020                           ;incstack = 0
  7021                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7022  011D  0025               	movlb	5	; select bank5
  7023  011E  01E0               	clrf	PS_2_Update@temp^(0+640)
  7024                           
  7025                           ;PS_2.c: 261: unsigned char buf[60];
  7026                           ;PS_2.c: 263: if(Read_Timer < 20)
  7027  011F  3000               	movlw	0
  7028  0120  0022               	movlb	2	; select bank2
  7029  0121  026E               	subwf	(_Read_Timer+1)^(0+256),w
  7030  0122  3014               	movlw	20
  7031  0123  1903               	skipnz
  7032  0124  026D               	subwf	_Read_Timer^(0+256),w
  7033  0125  1803               	skipnc
  7034  0126  292C               	goto	l6364
  7035                           
  7036                           ;PS_2.c: 264: {
  7037                           ;PS_2.c: 265: Read_Timer++;
  7038  0127  3001               	movlw	1
  7039  0128  07ED               	addwf	_Read_Timer^(0+256),f
  7040  0129  3000               	movlw	0
  7041  012A  3DEE               	addwfc	(_Read_Timer+1)^(0+256),f
  7042                           
  7043                           ;PS_2.c: 266: }
  7044  012B  292E               	goto	l6366
  7045  012C                     l6364:	
  7046                           
  7047                           ;PS_2.c: 267: else
  7048                           ;PS_2.c: 268: {
  7049                           ;PS_2.c: 269: PS_2_bits = 0;
  7050  012C  0020               	movlb	0	; select bank0
  7051  012D  01EA               	clrf	_PS_2_bits
  7052  012E                     l6366:	
  7053                           
  7054                           ;PS_2.c: 270: }
  7055                           ;PS_2.c: 272: if(Read_Timer == 20 && PS_2_bits != 0)
  7056  012E  3014               	movlw	20
  7057  012F  0022               	movlb	2	; select bank2
  7058  0130  066D               	xorwf	_Read_Timer^(0+256),w
  7059  0131  046E               	iorwf	(_Read_Timer+1)^(0+256),w
  7060  0132  1D03               	skipz
  7061  0133  0008               	return
  7062  0134  0020               	movlb	0	; select bank0
  7063  0135  086A               	movf	_PS_2_bits,w
  7064  0136  1903               	btfsc	3,2
  7065  0137  0008               	return
  7066                           
  7067                           ;PS_2.c: 273: {
  7068                           ;PS_2.c: 275: PS_2_DISABLE_INTERRUPT(0b00100000);
  7069  0138  3020               	movlw	32
  7070  0139  319A  220D  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  7071                           
  7072                           ;PS_2.c: 276: PIE1bits.RCIE = 0;
  7073  013C  0021               	movlb	1	; select bank1
  7074  013D  1291               	bcf	17,5	;volatile
  7075                           
  7076                           ;PS_2.c: 278: if(PS_2_bits >= 11)
  7077  013E  300B               	movlw	11
  7078  013F  0020               	movlb	0	; select bank0
  7079  0140  026A               	subwf	_PS_2_bits,w
  7080  0141  1C03               	skipc
  7081  0142  299A               	goto	l6386
  7082                           
  7083                           ;PS_2.c: 279: {
  7084                           ;PS_2.c: 282: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  7085  0143  0024               	movlb	4	; select bank4
  7086  0144  0821               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  7087  0145  0023               	movlb	3	; select bank3
  7088  0146  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7089  0147  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7090  0148  0024               	movlb	4	; select bank4
  7091  0149  0820               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  7092  014A  0023               	movlb	3	; select bank3
  7093  014B  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7094  014C  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7095                           
  7096                           ;PS_2.c: 283: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  7097  014D  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7098  014E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7099  014F  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7100  0150  00AF               	movwf	??_PS_2_Update^(0+384)
  7101  0151  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7102  0152  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7103  0153  3001               	movlw	1
  7104  0154  052F               	andwf	??_PS_2_Update^(0+384),w
  7105  0155  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7106  0156  3000               	movlw	0
  7107  0157  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7108  0158  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7109  0159  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7110  015A  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7111  015B  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7112  015C  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7113  015D  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7114  015E  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7115  015F  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7116  0160  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7117  0161  30FF               	movlw	255
  7118  0162  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7119  0163  0020               	movlb	0	; select bank0
  7120  0164  00A5               	movwf	CheckSum_byte@This
  7121  0165  3000               	movlw	0
  7122  0166  0023               	movlb	3	; select bank3
  7123  0167  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7124  0168  0020               	movlb	0	; select bank0
  7125  0169  00A6               	movwf	CheckSum_byte@This+1
  7126  016A  3003               	movlw	3
  7127  016B  0023               	movlb	3	; select bank3
  7128  016C  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7129  016D  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7130  016E  0020               	movlb	0	; select bank0
  7131  016F  00A7               	movwf	CheckSum_byte@Odd_Even
  7132  0170  319A  22FB  3181   	fcall	_CheckSum_byte
  7133  0173  0023               	movlb	3	; select bank3
  7134  0174  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7135  0175  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7136  0176  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7137  0177  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7138  0178  1D03               	skipz
  7139  0179  297C               	goto	u8365
  7140  017A  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7141  017B  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7142  017C                     u8365:	
  7143  017C  1D03               	skipz
  7144  017D  2998               	goto	l6384
  7145                           
  7146                           ;PS_2.c: 284: {
  7147                           ;PS_2.c: 286: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7148  017E  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7149  017F  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7150  0180  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7151  0181  00AF               	movwf	??_PS_2_Update^(0+384)
  7152  0182  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7153  0183  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7154  0184  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7155  0185  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7156  0186  30FF               	movlw	255
  7157  0187  052F               	andwf	??_PS_2_Update^(0+384),w
  7158  0188  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7159  0189  3000               	movlw	0
  7160  018A  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7161  018B  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7162                           
  7163                           ;PS_2.c: 287: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7164  018C  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7165  018D  319E  262E  3181   	fcall	_Reverse_Byte
  7166  0190  0023               	movlb	3	; select bank3
  7167  0191  00AF               	movwf	??_PS_2_Update^(0+384)
  7168  0192  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7169  0193  082F               	movf	??_PS_2_Update^(0+384),w
  7170  0194  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7171  0195  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7172  0196  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7173                           
  7174                           ;PS_2.c: 288: }
  7175  0197  299A               	goto	l6386
  7176  0198                     l6384:	
  7177                           
  7178                           ;PS_2.c: 289: else
  7179                           ;PS_2.c: 290: {
  7180                           ;PS_2.c: 292: PS_2_Read_Data_First =0;
  7181  0198  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7182  0199  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7183  019A                     l6386:	
  7184                           
  7185                           ;PS_2.c: 293: }
  7186                           ;PS_2.c: 294: }
  7187                           ;PS_2.c: 295: if(PS_2_bits >= (22))
  7188  019A  3016               	movlw	22
  7189  019B  0020               	movlb	0	; select bank0
  7190  019C  026A               	subwf	_PS_2_bits,w
  7191  019D  1C03               	skipc
  7192  019E  29F8               	goto	l6398
  7193                           
  7194                           ;PS_2.c: 296: {
  7195                           ;PS_2.c: 299: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7196  019F  0024               	movlb	4	; select bank4
  7197  01A0  0825               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7198  01A1  0023               	movlb	3	; select bank3
  7199  01A2  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7200  01A3  07A5               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7201  01A4  0024               	movlb	4	; select bank4
  7202  01A5  0824               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7203  01A6  0023               	movlb	3	; select bank3
  7204  01A7  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7205  01A8  07A4               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7206                           
  7207                           ;PS_2.c: 300: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7208  01A9  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7209  01AA  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7210  01AB  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7211  01AC  00AF               	movwf	??_PS_2_Update^(0+384)
  7212  01AD  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7213  01AE  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7214  01AF  3001               	movlw	1
  7215  01B0  052F               	andwf	??_PS_2_Update^(0+384),w
  7216  01B1  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7217  01B2  3000               	movlw	0
  7218  01B3  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7219  01B4  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7220  01B5  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7221  01B6  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7222  01B7  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7223  01B8  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7224  01B9  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7225  01BA  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7226  01BB  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7227  01BC  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7228  01BD  30FF               	movlw	255
  7229  01BE  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7230  01BF  0020               	movlb	0	; select bank0
  7231  01C0  00A5               	movwf	CheckSum_byte@This
  7232  01C1  3000               	movlw	0
  7233  01C2  0023               	movlb	3	; select bank3
  7234  01C3  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7235  01C4  0020               	movlb	0	; select bank0
  7236  01C5  00A6               	movwf	CheckSum_byte@This+1
  7237  01C6  3003               	movlw	3
  7238  01C7  0023               	movlb	3	; select bank3
  7239  01C8  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7240  01C9  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7241  01CA  0020               	movlb	0	; select bank0
  7242  01CB  00A7               	movwf	CheckSum_byte@Odd_Even
  7243  01CC  319A  22FB  3181   	fcall	_CheckSum_byte
  7244  01CF  0023               	movlb	3	; select bank3
  7245  01D0  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7246  01D1  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7247  01D2  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7248  01D3  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7249  01D4  1D03               	skipz
  7250  01D5  29D8               	goto	u8385
  7251  01D6  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7252  01D7  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7253  01D8                     u8385:	
  7254  01D8  1D03               	skipz
  7255  01D9  29F4               	goto	l6396
  7256                           
  7257                           ;PS_2.c: 301: {
  7258                           ;PS_2.c: 303: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7259  01DA  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7260  01DB  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7261  01DC  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7262  01DD  00AF               	movwf	??_PS_2_Update^(0+384)
  7263  01DE  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7264  01DF  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7265  01E0  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7266  01E1  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7267  01E2  30FF               	movlw	255
  7268  01E3  052F               	andwf	??_PS_2_Update^(0+384),w
  7269  01E4  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7270  01E5  3000               	movlw	0
  7271  01E6  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7272  01E7  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7273                           
  7274                           ;PS_2.c: 304: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7275  01E8  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7276  01E9  319E  262E  3181   	fcall	_Reverse_Byte
  7277  01EC  0023               	movlb	3	; select bank3
  7278  01ED  00AF               	movwf	??_PS_2_Update^(0+384)
  7279  01EE  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7280  01EF  082F               	movf	??_PS_2_Update^(0+384),w
  7281  01F0  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7282  01F1  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7283  01F2  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7284                           
  7285                           ;PS_2.c: 305: }
  7286  01F3  29F8               	goto	l6398
  7287  01F4                     l6396:	
  7288                           
  7289                           ;PS_2.c: 306: else
  7290                           ;PS_2.c: 307: {
  7291                           ;PS_2.c: 309: PS_2_Read_Data_First =0;
  7292  01F4  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7293  01F5  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7294                           
  7295                           ;PS_2.c: 310: PS_2_Read_Data_Second =0;
  7296  01F6  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7297  01F7  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7298  01F8                     l6398:	
  7299                           
  7300                           ;PS_2.c: 311: }
  7301                           ;PS_2.c: 312: }
  7302                           ;PS_2.c: 313: if(PS_2_bits >= (33))
  7303  01F8  3021               	movlw	33
  7304  01F9  0020               	movlb	0	; select bank0
  7305  01FA  026A               	subwf	_PS_2_bits,w
  7306  01FB  1C03               	skipc
  7307  01FC  2A58               	goto	l6410
  7308                           
  7309                           ;PS_2.c: 314: {
  7310                           ;PS_2.c: 317: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7311  01FD  0024               	movlb	4	; select bank4
  7312  01FE  0827               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7313  01FF  0023               	movlb	3	; select bank3
  7314  0200  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7315  0201  07A7               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7316  0202  0024               	movlb	4	; select bank4
  7317  0203  0826               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7318  0204  0023               	movlb	3	; select bank3
  7319  0205  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7320  0206  07A6               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7321                           
  7322                           ;PS_2.c: 318: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7323  0207  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7324  0208  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7325  0209  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7326  020A  00AF               	movwf	??_PS_2_Update^(0+384)
  7327  020B  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7328  020C  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7329  020D  3001               	movlw	1
  7330  020E  052F               	andwf	??_PS_2_Update^(0+384),w
  7331  020F  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7332  0210  3000               	movlw	0
  7333  0211  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7334  0212  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7335  0213  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7336  0214  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7337  0215  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7338  0216  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7339  0217  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7340  0218  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7341  0219  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7342  021A  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7343  021B  30FF               	movlw	255
  7344  021C  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7345  021D  0020               	movlb	0	; select bank0
  7346  021E  00A5               	movwf	CheckSum_byte@This
  7347  021F  3000               	movlw	0
  7348  0220  0023               	movlb	3	; select bank3
  7349  0221  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7350  0222  0020               	movlb	0	; select bank0
  7351  0223  00A6               	movwf	CheckSum_byte@This+1
  7352  0224  3003               	movlw	3
  7353  0225  0023               	movlb	3	; select bank3
  7354  0226  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7355  0227  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7356  0228  0020               	movlb	0	; select bank0
  7357  0229  00A7               	movwf	CheckSum_byte@Odd_Even
  7358  022A  319A  22FB  3181   	fcall	_CheckSum_byte
  7359  022D  0023               	movlb	3	; select bank3
  7360  022E  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7361  022F  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7362  0230  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7363  0231  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7364  0232  1D03               	skipz
  7365  0233  2A36               	goto	u8405
  7366  0234  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7367  0235  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7368  0236                     u8405:	
  7369  0236  1D03               	skipz
  7370  0237  2A52               	goto	l6408
  7371                           
  7372                           ;PS_2.c: 319: {
  7373                           ;PS_2.c: 321: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7374  0238  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7375  0239  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7376  023A  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7377  023B  00AF               	movwf	??_PS_2_Update^(0+384)
  7378  023C  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7379  023D  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7380  023E  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7381  023F  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7382  0240  30FF               	movlw	255
  7383  0241  052F               	andwf	??_PS_2_Update^(0+384),w
  7384  0242  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7385  0243  3000               	movlw	0
  7386  0244  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7387  0245  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7388                           
  7389                           ;PS_2.c: 322: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7390  0246  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7391  0247  319E  262E  3181   	fcall	_Reverse_Byte
  7392  024A  0023               	movlb	3	; select bank3
  7393  024B  00AF               	movwf	??_PS_2_Update^(0+384)
  7394  024C  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7395  024D  082F               	movf	??_PS_2_Update^(0+384),w
  7396  024E  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7397  024F  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7398  0250  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7399                           
  7400                           ;PS_2.c: 323: }
  7401  0251  2A58               	goto	l6410
  7402  0252                     l6408:	
  7403                           
  7404                           ;PS_2.c: 324: else
  7405                           ;PS_2.c: 325: {
  7406                           ;PS_2.c: 327: PS_2_Read_Data_First =0;
  7407  0252  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7408  0253  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7409                           
  7410                           ;PS_2.c: 328: PS_2_Read_Data_Second =0;
  7411  0254  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7412  0255  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7413                           
  7414                           ;PS_2.c: 329: PS_2_Read_Data_Third =0;
  7415  0256  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7416  0257  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7417  0258                     l6410:	
  7418                           
  7419                           ;PS_2.c: 330: }
  7420                           ;PS_2.c: 331: }
  7421                           ;PS_2.c: 332: if(PS_2_bits >= (44))
  7422  0258  302C               	movlw	44
  7423  0259  0020               	movlb	0	; select bank0
  7424  025A  026A               	subwf	_PS_2_bits,w
  7425  025B  1C03               	skipc
  7426  025C  2ABA               	goto	l6422
  7427                           
  7428                           ;PS_2.c: 333: {
  7429                           ;PS_2.c: 336: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7430  025D  0024               	movlb	4	; select bank4
  7431  025E  0823               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7432  025F  0023               	movlb	3	; select bank3
  7433  0260  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7434  0261  07A3               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7435  0262  0024               	movlb	4	; select bank4
  7436  0263  0822               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7437  0264  0023               	movlb	3	; select bank3
  7438  0265  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7439  0266  07A2               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7440                           
  7441                           ;PS_2.c: 337: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7442  0267  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7443  0268  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7444  0269  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7445  026A  00AF               	movwf	??_PS_2_Update^(0+384)
  7446  026B  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7447  026C  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7448  026D  3001               	movlw	1
  7449  026E  052F               	andwf	??_PS_2_Update^(0+384),w
  7450  026F  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7451  0270  3000               	movlw	0
  7452  0271  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7453  0272  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7454  0273  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7455  0274  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7456  0275  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7457  0276  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7458  0277  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7459  0278  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7460  0279  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7461  027A  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7462  027B  30FF               	movlw	255
  7463  027C  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7464  027D  0020               	movlb	0	; select bank0
  7465  027E  00A5               	movwf	CheckSum_byte@This
  7466  027F  3000               	movlw	0
  7467  0280  0023               	movlb	3	; select bank3
  7468  0281  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7469  0282  0020               	movlb	0	; select bank0
  7470  0283  00A6               	movwf	CheckSum_byte@This+1
  7471  0284  3003               	movlw	3
  7472  0285  0023               	movlb	3	; select bank3
  7473  0286  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7474  0287  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7475  0288  0020               	movlb	0	; select bank0
  7476  0289  00A7               	movwf	CheckSum_byte@Odd_Even
  7477  028A  319A  22FB  3181   	fcall	_CheckSum_byte
  7478  028D  0023               	movlb	3	; select bank3
  7479  028E  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7480  028F  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7481  0290  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7482  0291  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7483  0292  1D03               	skipz
  7484  0293  2A96               	goto	u8425
  7485  0294  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7486  0295  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7487  0296                     u8425:	
  7488  0296  1D03               	skipz
  7489  0297  2AB2               	goto	l6420
  7490                           
  7491                           ;PS_2.c: 338: {
  7492                           ;PS_2.c: 340: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7493  0298  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7494  0299  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7495  029A  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7496  029B  00AF               	movwf	??_PS_2_Update^(0+384)
  7497  029C  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7498  029D  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7499  029E  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7500  029F  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7501  02A0  30FF               	movlw	255
  7502  02A1  052F               	andwf	??_PS_2_Update^(0+384),w
  7503  02A2  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7504  02A3  3000               	movlw	0
  7505  02A4  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7506  02A5  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7507                           
  7508                           ;PS_2.c: 341: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7509  02A6  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7510  02A7  319E  262E  3181   	fcall	_Reverse_Byte
  7511  02AA  0023               	movlb	3	; select bank3
  7512  02AB  00AF               	movwf	??_PS_2_Update^(0+384)
  7513  02AC  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7514  02AD  082F               	movf	??_PS_2_Update^(0+384),w
  7515  02AE  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7516  02AF  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7517  02B0  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7518                           
  7519                           ;PS_2.c: 342: }
  7520  02B1  2ABA               	goto	l6422
  7521  02B2                     l6420:	
  7522                           
  7523                           ;PS_2.c: 343: else
  7524                           ;PS_2.c: 344: {
  7525                           ;PS_2.c: 346: PS_2_Read_Data_First =0;
  7526  02B2  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7527  02B3  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7528                           
  7529                           ;PS_2.c: 347: PS_2_Read_Data_Second =0;
  7530  02B4  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7531  02B5  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7532                           
  7533                           ;PS_2.c: 348: PS_2_Read_Data_Third =0;
  7534  02B6  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7535  02B7  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7536                           
  7537                           ;PS_2.c: 349: PS_2_Read_Data_Forth =0;
  7538  02B8  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7539  02B9  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7540  02BA                     l6422:	
  7541                           
  7542                           ;PS_2.c: 350: }
  7543                           ;PS_2.c: 351: }
  7544                           ;PS_2.c: 353: if(PS_2_Read_Data_Forth)
  7545  02BA  0023               	movlb	3	; select bank3
  7546  02BB  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7547  02BC  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7548  02BD  1903               	skipnz
  7549  02BE  2AD5               	goto	l6434
  7550                           
  7551                           ;PS_2.c: 354: {
  7552                           ;PS_2.c: 355: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7553                           ;PS_2.c: 356: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7554  02BF  30F0               	movlw	240
  7555  02C0  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7556  02C1  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7557  02C2  1903               	skipnz
  7558  02C3  2C0A               	goto	l6566
  7559  02C4  30F0               	movlw	240
  7560  02C5  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7561  02C6  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7562  02C7  1903               	skipnz
  7563  02C8  2C0A               	goto	l6566
  7564  02C9  30F0               	movlw	240
  7565  02CA  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7566  02CB  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7567  02CC  1903               	skipnz
  7568  02CD  2C0A               	goto	l6566
  7569  02CE  30F0               	movlw	240
  7570  02CF  0622               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7571  02D0  0423               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7572  02D1  1903               	skipnz
  7573  02D2  2C0A               	goto	l6566
  7574                           
  7575                           ;PS_2.c: 357: {
  7576                           ;PS_2.c: 359: __nop();
  7577  02D3  0000               	nop
  7578                           
  7579                           ;PS_2.c: 360: }
  7580                           ;PS_2.c: 361: }
  7581  02D4  2C0A               	goto	l6566
  7582  02D5                     l6434:	
  7583                           
  7584                           ;PS_2.c: 362: else if(PS_2_Read_Data_Third)
  7585  02D5  0023               	movlb	3	; select bank3
  7586  02D6  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7587  02D7  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7588  02D8  1903               	skipnz
  7589  02D9  2B2A               	goto	l6470
  7590                           
  7591                           ;PS_2.c: 363: {
  7592                           ;PS_2.c: 365: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7593                           ;PS_2.c: 366: PS_2_Read_Data_First != 0xE0 &&
  7594                           ;PS_2.c: 367: PS_2_Read_Data_Second != 0xE0 &&
  7595                           ;PS_2.c: 368: PS_2_Read_Data_Third != 0xE0)
  7596  02DA  30F0               	movlw	240
  7597  02DB  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7598  02DC  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7599  02DD  1D03               	skipz
  7600  02DE  2B05               	goto	l6454
  7601  02DF  30F0               	movlw	240
  7602  02E0  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7603  02E1  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7604  02E2  1903               	skipnz
  7605  02E3  2B05               	goto	l6454
  7606  02E4  30E0               	movlw	224
  7607  02E5  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7608  02E6  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7609  02E7  1903               	skipnz
  7610  02E8  2B05               	goto	l6454
  7611  02E9  30E0               	movlw	224
  7612  02EA  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7613  02EB  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7614  02EC  1903               	skipnz
  7615  02ED  2B05               	goto	l6454
  7616  02EE  30E0               	movlw	224
  7617  02EF  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7618  02F0  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7619  02F1  1903               	skipnz
  7620  02F2  2B05               	goto	l6454
  7621                           
  7622                           ;PS_2.c: 369: {
  7623                           ;PS_2.c: 371: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7624  02F3  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7625  02F4  3199  21CD  3181   	fcall	_Decode_Scan_Code_Shift
  7626  02F7  3A00               	xorlw	0
  7627  02F8  1903               	skipnz
  7628  02F9  2B05               	goto	l6454
  7629                           
  7630                           ;PS_2.c: 372: {
  7631                           ;PS_2.c: 374: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7632  02FA  0023               	movlb	3	; select bank3
  7633  02FB  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7634  02FC  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7635  02FD  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7636  02FE  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7637  02FF  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7638  0300  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7639                           
  7640                           ;PS_2.c: 375: PS_2_Read_Data_Second = 0;
  7641  0301  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7642  0302  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7643                           
  7644                           ;PS_2.c: 376: PS_2_Read_Data_Third = 0;
  7645  0303  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7646  0304  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7647  0305                     l6454:	
  7648                           
  7649                           ;PS_2.c: 377: }
  7650                           ;PS_2.c: 378: }
  7651                           ;PS_2.c: 379: if(PS_2_Read_Data_First == 0xE0)
  7652  0305  30E0               	movlw	224
  7653  0306  0023               	movlb	3	; select bank3
  7654  0307  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7655  0308  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7656  0309  1D03               	skipz
  7657  030A  2C0A               	goto	l6566
  7658                           
  7659                           ;PS_2.c: 380: {
  7660                           ;PS_2.c: 381: if(PS_2_Read_Data_Second == 0xF0)
  7661  030B  30F0               	movlw	240
  7662  030C  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7663  030D  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7664  030E  1D03               	skipz
  7665  030F  2C0A               	goto	l6566
  7666                           
  7667                           ;PS_2.c: 382: {
  7668                           ;PS_2.c: 383: if(PS_2_Read_Data_Third == 0x11 )
  7669  0310  3011               	movlw	17
  7670  0311  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7671  0312  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7672  0313  1D03               	skipz
  7673  0314  2B18               	goto	l6462
  7674                           
  7675                           ;PS_2.c: 384: {
  7676                           ;PS_2.c: 385: LALT = 0;
  7677  0315  0022               	movlb	2	; select bank2
  7678  0316  01E7               	clrf	_LALT^(0+256)
  7679                           
  7680                           ;PS_2.c: 386: }
  7681  0317  2C0A               	goto	l6566
  7682  0318                     l6462:	
  7683                           
  7684                           ;PS_2.c: 387: else if(PS_2_Read_Data_Third == 0x14 )
  7685  0318  3014               	movlw	20
  7686  0319  0023               	movlb	3	; select bank3
  7687  031A  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7688  031B  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7689  031C  1D03               	skipz
  7690  031D  2B21               	goto	l6466
  7691                           
  7692                           ;PS_2.c: 388: {
  7693                           ;PS_2.c: 389: LControl = 0;
  7694  031E  0022               	movlb	2	; select bank2
  7695  031F  01E8               	clrf	_LControl^(0+256)
  7696                           
  7697                           ;PS_2.c: 390: }
  7698  0320  2C0A               	goto	l6566
  7699  0321                     l6466:	
  7700                           
  7701                           ;PS_2.c: 391: else if(PS_2_Read_Data_Third == 0x71 )
  7702  0321  3071               	movlw	113
  7703  0322  0023               	movlb	3	; select bank3
  7704  0323  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7705  0324  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7706  0325  1D03               	skipz
  7707  0326  2C0A               	goto	l6566
  7708                           
  7709                           ;PS_2.c: 392: {
  7710                           ;PS_2.c: 393: Delete = 0;
  7711  0327  0022               	movlb	2	; select bank2
  7712  0328  01E6               	clrf	_Delete^(0+256)
  7713                           
  7714                           ;PS_2.c: 394: }
  7715                           ;PS_2.c: 395: }
  7716                           ;PS_2.c: 396: }
  7717                           ;PS_2.c: 397: }
  7718  0329  2C0A               	goto	l6566
  7719  032A                     l6470:	
  7720                           
  7721                           ;PS_2.c: 398: else if(PS_2_Read_Data_Second)
  7722  032A  0023               	movlb	3	; select bank3
  7723  032B  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7724  032C  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7725  032D  1903               	skipnz
  7726  032E  2C0A               	goto	l6566
  7727                           
  7728                           ;PS_2.c: 399: {
  7729                           ;PS_2.c: 401: if(PS_2_Read_Data_First == 0xF0)
  7730  032F  30F0               	movlw	240
  7731  0330  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7732  0331  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7733  0332  1D03               	skipz
  7734  0333  2BAF               	goto	l6534
  7735                           
  7736                           ;PS_2.c: 402: {
  7737                           ;PS_2.c: 404: if(PS_2_Read_Data_Second == 0x12)
  7738  0334  3012               	movlw	18
  7739  0335  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7740  0336  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7741  0337  1D03               	skipz
  7742  0338  2B3B               	goto	l6478
  7743                           
  7744                           ;PS_2.c: 405: {
  7745                           ;PS_2.c: 406: Right_Shift_Key =0;
  7746  0339  01AD               	clrf	_Right_Shift_Key^(0+384)
  7747                           
  7748                           ;PS_2.c: 407: }
  7749  033A  2B50               	goto	l6490
  7750  033B                     l6478:	
  7751                           
  7752                           ;PS_2.c: 408: else if(PS_2_Read_Data_Second == 0x59)
  7753  033B  3059               	movlw	89
  7754  033C  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7755  033D  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7756  033E  1D03               	skipz
  7757  033F  2B42               	goto	l6482
  7758                           
  7759                           ;PS_2.c: 409: {
  7760                           ;PS_2.c: 410: Left_Shift_Key =0;
  7761  0340  01AA               	clrf	_Left_Shift_Key^(0+384)
  7762                           
  7763                           ;PS_2.c: 411: }
  7764  0341  2B50               	goto	l6490
  7765  0342                     l6482:	
  7766                           
  7767                           ;PS_2.c: 412: else if(PS_2_Read_Data_Second == 0x14)
  7768  0342  3014               	movlw	20
  7769  0343  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7770  0344  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7771  0345  1D03               	skipz
  7772  0346  2B4A               	goto	l6486
  7773                           
  7774                           ;PS_2.c: 413: {
  7775                           ;PS_2.c: 414: RControl =0;
  7776  0347  0022               	movlb	2	; select bank2
  7777  0348  01EA               	clrf	_RControl^(0+256)
  7778                           
  7779                           ;PS_2.c: 415: }
  7780  0349  2B50               	goto	l6490
  7781  034A                     l6486:	
  7782                           
  7783                           ;PS_2.c: 416: else if(PS_2_Read_Data_Second == 0x11 )
  7784  034A  3011               	movlw	17
  7785  034B  0023               	movlb	3	; select bank3
  7786  034C  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7787  034D  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7788  034E  1903               	btfsc	3,2
  7789                           
  7790                           ;PS_2.c: 417: {
  7791                           ;PS_2.c: 418: RALT =0;
  7792  034F  01AC               	clrf	_RALT^(0+384)
  7793  0350                     l6490:	
  7794                           
  7795                           ;PS_2.c: 419: }
  7796                           ;PS_2.c: 420: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7797  0350  3059               	movlw	89
  7798  0351  0023               	movlb	3	; select bank3
  7799  0352  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7800  0353  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7801  0354  1903               	skipnz
  7802  0355  2B5B               	goto	l6494
  7803  0356  3012               	movlw	18
  7804  0357  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7805  0358  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7806  0359  1D03               	skipz
  7807  035A  2BA7               	goto	l6530
  7808  035B                     l6494:	
  7809                           
  7810                           ;PS_2.c: 421: {
  7811                           ;PS_2.c: 422: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7812  035B  08AD               	movf	_Right_Shift_Key^(0+384),f
  7813  035C  1D03               	skipz
  7814  035D  2C0A               	goto	l6566
  7815  035E  08AA               	movf	_Left_Shift_Key^(0+384),f
  7816  035F  1D03               	skipz
  7817  0360  2C0A               	goto	l6566
  7818                           
  7819                           ;PS_2.c: 423: {
  7820                           ;PS_2.c: 424: if(!Send_PS2(0xED))
  7821  0361  30ED               	movlw	237
  7822  0362  318C  248B  3181   	fcall	_Send_PS2
  7823  0365  3800               	iorlw	0
  7824  0366  1D03               	skipz
  7825  0367  2B71               	goto	l6504
  7826                           
  7827                           ;PS_2.c: 425: {
  7828                           ;PS_2.c: 426: if(!Send_PS2(0x00))
  7829  0368  3000               	movlw	0
  7830  0369  318C  248B  3181   	fcall	_Send_PS2
  7831  036C  3800               	iorlw	0
  7832  036D  1D03               	skipz
  7833  036E  2B71               	goto	l6504
  7834                           
  7835                           ;PS_2.c: 427: {
  7836                           ;PS_2.c: 428: Shift_Key = 0;
  7837  036F  0023               	movlb	3	; select bank3
  7838  0370  01AE               	clrf	_Shift_Key^(0+384)
  7839  0371                     l6504:	
  7840                           
  7841                           ;PS_2.c: 429: }
  7842                           ;PS_2.c: 430: }
  7843                           ;PS_2.c: 431: if(Caps_Lock)
  7844  0371  0023               	movlb	3	; select bank3
  7845  0372  0829               	movf	_Caps_Lock^(0+384),w
  7846  0373  1903               	btfsc	3,2
  7847  0374  2B8E               	goto	l6518
  7848                           
  7849                           ;PS_2.c: 432: {
  7850                           ;PS_2.c: 433: CapsCount=0;
  7851  0375  01A8               	clrf	_CapsCount^(0+384)
  7852  0376                     l6516:	
  7853                           ;PS_2.c: 434: while(CapsCount<10)
  7854                           
  7855  0376  300A               	movlw	10
  7856  0377  0228               	subwf	_CapsCount^(0+384),w
  7857  0378  1803               	btfsc	3,0
  7858  0379  2C0A               	goto	l6566
  7859                           
  7860                           ;PS_2.c: 435: {
  7861                           ;PS_2.c: 436: if(!Send_PS2(0xED))
  7862  037A  30ED               	movlw	237
  7863  037B  318C  248B  3181   	fcall	_Send_PS2
  7864  037E  3800               	iorlw	0
  7865  037F  1D03               	skipz
  7866  0380  2B88               	goto	l6514
  7867                           
  7868                           ;PS_2.c: 437: {
  7869                           ;PS_2.c: 438: if(!Send_PS2(0x04))
  7870  0381  3004               	movlw	4
  7871  0382  318C  248B  3181   	fcall	_Send_PS2
  7872  0385  3800               	iorlw	0
  7873  0386  1903               	btfsc	3,2
  7874  0387  2C0A               	goto	l6566
  7875  0388                     l6514:	
  7876                           ;PS_2.c: 439: {
  7877                           ;PS_2.c: 440: break;
  7878                           
  7879                           
  7880                           ;PS_2.c: 441: }
  7881                           ;PS_2.c: 442: }
  7882                           ;PS_2.c: 443: CapsCount++;
  7883  0388  3001               	movlw	1
  7884  0389  0023               	movlb	3	; select bank3
  7885  038A  00AF               	movwf	??_PS_2_Update^(0+384)
  7886  038B  082F               	movf	??_PS_2_Update^(0+384),w
  7887  038C  07A8               	addwf	_CapsCount^(0+384),f
  7888  038D  2B76               	goto	l6516
  7889  038E                     l6518:	
  7890                           ;PS_2.c: 444: }
  7891                           ;PS_2.c: 445: }
  7892                           
  7893                           
  7894                           ;PS_2.c: 446: else
  7895                           ;PS_2.c: 447: {
  7896                           ;PS_2.c: 448: CapsCount=0;
  7897  038E  01A8               	clrf	_CapsCount^(0+384)
  7898  038F                     l6528:	
  7899                           ;PS_2.c: 449: while(CapsCount<10)
  7900                           
  7901  038F  300A               	movlw	10
  7902  0390  0228               	subwf	_CapsCount^(0+384),w
  7903  0391  1803               	btfsc	3,0
  7904  0392  2C0A               	goto	l6566
  7905                           
  7906                           ;PS_2.c: 450: {
  7907                           ;PS_2.c: 451: if(!Send_PS2(0xED))
  7908  0393  30ED               	movlw	237
  7909  0394  318C  248B  3181   	fcall	_Send_PS2
  7910  0397  3800               	iorlw	0
  7911  0398  1D03               	skipz
  7912  0399  2BA1               	goto	l6526
  7913                           
  7914                           ;PS_2.c: 452: {
  7915                           ;PS_2.c: 453: if(!Send_PS2(0x00))
  7916  039A  3000               	movlw	0
  7917  039B  318C  248B  3181   	fcall	_Send_PS2
  7918  039E  3800               	iorlw	0
  7919  039F  1903               	btfsc	3,2
  7920  03A0  2C0A               	goto	l6566
  7921  03A1                     l6526:	
  7922                           ;PS_2.c: 454: {
  7923                           ;PS_2.c: 455: break;
  7924                           
  7925                           
  7926                           ;PS_2.c: 456: }
  7927                           ;PS_2.c: 457: }
  7928                           ;PS_2.c: 458: CapsCount++;
  7929  03A1  3001               	movlw	1
  7930  03A2  0023               	movlb	3	; select bank3
  7931  03A3  00AF               	movwf	??_PS_2_Update^(0+384)
  7932  03A4  082F               	movf	??_PS_2_Update^(0+384),w
  7933  03A5  07A8               	addwf	_CapsCount^(0+384),f
  7934  03A6  2B8F               	goto	l6528
  7935  03A7                     l6530:	
  7936                           ;PS_2.c: 459: }
  7937                           ;PS_2.c: 460: }
  7938                           ;PS_2.c: 461: }
  7939                           ;PS_2.c: 462: }
  7940                           
  7941                           
  7942                           ;PS_2.c: 463: else if(PS_2_Read_Data_Second == 0x58)
  7943  03A7  3058               	movlw	88
  7944  03A8  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7945  03A9  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7946  03AA  1D03               	skipz
  7947  03AB  2C0A               	goto	l6566
  7948                           
  7949                           ;PS_2.c: 464: {
  7950                           ;PS_2.c: 465: Caps_Lock_Key = 0;
  7951  03AC  0022               	movlb	2	; select bank2
  7952  03AD  01E4               	clrf	_Caps_Lock_Key^(0+256)
  7953                           
  7954                           ;PS_2.c: 466: }
  7955                           ;PS_2.c: 467: }
  7956  03AE  2C0A               	goto	l6566
  7957  03AF                     l6534:	
  7958                           
  7959                           ;PS_2.c: 468: else if(PS_2_Read_Data_First == 0xE0)
  7960  03AF  30E0               	movlw	224
  7961  03B0  0023               	movlb	3	; select bank3
  7962  03B1  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7963  03B2  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7964  03B3  1D03               	skipz
  7965  03B4  2C0A               	goto	l6566
  7966                           
  7967                           ;PS_2.c: 469: {
  7968                           ;PS_2.c: 471: if(PS_2_Read_Data_Second == 0x11 )
  7969  03B5  3011               	movlw	17
  7970  03B6  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7971  03B7  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7972  03B8  1D03               	skipz
  7973  03B9  2BBE               	goto	l6540
  7974                           
  7975                           ;PS_2.c: 472: {
  7976                           ;PS_2.c: 473: LALT = 1;
  7977  03BA  0022               	movlb	2	; select bank2
  7978  03BB  01E7               	clrf	_LALT^(0+256)
  7979  03BC  0AE7               	incf	_LALT^(0+256),f
  7980                           
  7981                           ;PS_2.c: 474: }
  7982  03BD  2BD1               	goto	l664
  7983  03BE                     l6540:	
  7984                           
  7985                           ;PS_2.c: 475: else if(PS_2_Read_Data_Second == 0x14 )
  7986  03BE  3014               	movlw	20
  7987  03BF  0023               	movlb	3	; select bank3
  7988  03C0  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7989  03C1  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7990  03C2  1D03               	skipz
  7991  03C3  2BC8               	goto	l6544
  7992                           
  7993                           ;PS_2.c: 476: {
  7994                           ;PS_2.c: 477: LControl = 1;
  7995  03C4  0022               	movlb	2	; select bank2
  7996  03C5  01E8               	clrf	_LControl^(0+256)
  7997  03C6  0AE8               	incf	_LControl^(0+256),f
  7998                           
  7999                           ;PS_2.c: 478: }
  8000  03C7  2BD1               	goto	l664
  8001  03C8                     l6544:	
  8002                           
  8003                           ;PS_2.c: 479: else if(PS_2_Read_Data_Second == 0x71 )
  8004  03C8  3071               	movlw	113
  8005  03C9  0023               	movlb	3	; select bank3
  8006  03CA  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  8007  03CB  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8008  03CC  1D03               	skipz
  8009  03CD  2BD1               	goto	l664
  8010                           
  8011                           ;PS_2.c: 480: {
  8012                           ;PS_2.c: 481: Delete = 1;
  8013  03CE  0022               	movlb	2	; select bank2
  8014  03CF  01E6               	clrf	_Delete^(0+256)
  8015  03D0  0AE6               	incf	_Delete^(0+256),f
  8016  03D1                     l664:	
  8017                           
  8018                           ;PS_2.c: 482: }
  8019                           ;PS_2.c: 483: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  8020  03D1  0025               	movlb	5	; select bank5
  8021  03D2  01DC               	clrf	_PS_2_Update$818^(0+640)
  8022  03D3  0ADC               	incf	_PS_2_Update$818^(0+640),f
  8023  03D4  0022               	movlb	2	; select bank2
  8024  03D5  08E7               	movf	_LALT^(0+256),f
  8025  03D6  1D03               	skipz
  8026  03D7  2BDE               	goto	l6554
  8027  03D8  0023               	movlb	3	; select bank3
  8028  03D9  08AC               	movf	_RALT^(0+384),f
  8029  03DA  1D03               	skipz
  8030  03DB  2BDE               	goto	l6554
  8031  03DC  0025               	movlb	5	; select bank5
  8032  03DD  01DC               	clrf	_PS_2_Update$818^(0+640)
  8033  03DE                     l6554:	
  8034  03DE  0025               	movlb	5	; select bank5
  8035  03DF  01DD               	clrf	_PS_2_Update$819^(0+640)
  8036  03E0  0ADD               	incf	_PS_2_Update$819^(0+640),f
  8037  03E1  0022               	movlb	2	; select bank2
  8038  03E2  08EA               	movf	_RControl^(0+256),f
  8039  03E3  1D03               	skipz
  8040  03E4  2BEA               	goto	l6562
  8041  03E5  08E8               	movf	_LControl^(0+256),f
  8042  03E6  1D03               	skipz
  8043  03E7  2BEA               	goto	l6562
  8044  03E8  0025               	movlb	5	; select bank5
  8045  03E9  01DD               	clrf	_PS_2_Update$819^(0+640)
  8046  03EA                     l6562:	
  8047  03EA  0022               	movlb	2	; select bank2
  8048  03EB  0866               	movf	_Delete^(0+256),w
  8049  03EC  0023               	movlb	3	; select bank3
  8050  03ED  00AF               	movwf	??_PS_2_Update^(0+384)
  8051  03EE  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8052  03EF  0025               	movlb	5	; select bank5
  8053  03F0  085D               	movf	_PS_2_Update$819^(0+640),w
  8054  03F1  075C               	addwf	_PS_2_Update$818^(0+640),w
  8055  03F2  0023               	movlb	3	; select bank3
  8056  03F3  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8057  03F4  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8058  03F5  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8059  03F6  082F               	movf	??_PS_2_Update^(0+384),w
  8060  03F7  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8061  03F8  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8062  03F9  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8063  03FA  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8064  03FB  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8065  03FC  3003               	movlw	3
  8066  03FD  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8067  03FE  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8068  03FF  1903               	skipnz
  8069  0400  2C0A               	goto	l6566
  8070                           
  8071                           ;PS_2.c: 484: {
  8072                           ;PS_2.c: 486: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  8073  0401  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  8074  0402  3199  21BA  3181   	fcall	_Decode_Scan_Code_FunctionE0
  8075  0405  0023               	movlb	3	; select bank3
  8076  0406  00AF               	movwf	??_PS_2_Update^(0+384)
  8077  0407  082F               	movf	??_PS_2_Update^(0+384),w
  8078  0408  0025               	movlb	5	; select bank5
  8079  0409  00E0               	movwf	PS_2_Update@temp^(0+640)
  8080  040A                     l6566:	
  8081                           
  8082                           ;PS_2.c: 487: }
  8083                           ;PS_2.c: 488: }
  8084                           ;PS_2.c: 489: }
  8085                           ;PS_2.c: 490: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  8086                           ;PS_2.c: 491: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  8087  040A  0023               	movlb	3	; select bank3
  8088  040B  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  8089  040C  0420               	iorwf	_PS_2_Read_Data_First^(0+384),w
  8090  040D  1903               	skipnz
  8091  040E  2D63               	goto	l6716
  8092  040F  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  8093  0410  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  8094  0411  1D03               	skipz
  8095  0412  2D63               	goto	l6716
  8096  0413  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  8097  0414  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  8098  0415  1D03               	skipz
  8099  0416  2D63               	goto	l6716
  8100  0417  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  8101  0418  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  8102  0419  1D03               	skipz
  8103  041A  2D63               	goto	l6716
  8104                           
  8105                           ;PS_2.c: 492: {
  8106                           ;PS_2.c: 494: if(PS_2_Read_Data_First == 0x12)
  8107  041B  3012               	movlw	18
  8108  041C  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8109  041D  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8110  041E  1D03               	skipz
  8111  041F  2C23               	goto	l6578
  8112                           
  8113                           ;PS_2.c: 495: {
  8114                           ;PS_2.c: 496: Right_Shift_Key = 1;
  8115  0420  01AD               	clrf	_Right_Shift_Key^(0+384)
  8116  0421  0AAD               	incf	_Right_Shift_Key^(0+384),f
  8117                           
  8118                           ;PS_2.c: 497: }
  8119  0422  2C2A               	goto	l6582
  8120  0423                     l6578:	
  8121                           
  8122                           ;PS_2.c: 498: else if(PS_2_Read_Data_First == 0x59)
  8123  0423  3059               	movlw	89
  8124  0424  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8125  0425  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8126  0426  1D03               	skipz
  8127  0427  2C2A               	goto	l6582
  8128                           
  8129                           ;PS_2.c: 499: {
  8130                           ;PS_2.c: 500: Left_Shift_Key = 1;
  8131  0428  01AA               	clrf	_Left_Shift_Key^(0+384)
  8132  0429  0AAA               	incf	_Left_Shift_Key^(0+384),f
  8133  042A                     l6582:	
  8134                           
  8135                           ;PS_2.c: 501: }
  8136                           ;PS_2.c: 502: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8137  042A  082D               	movf	_Right_Shift_Key^(0+384),w
  8138  042B  3A01               	xorlw	1
  8139  042C  1D03               	skipz
  8140  042D  2C32               	goto	l6586
  8141  042E  0022               	movlb	2	; select bank2
  8142  042F  086B               	movf	_Right_Shift_Key_old^(0+256),w
  8143  0430  1903               	btfsc	3,2
  8144  0431  2C3B               	goto	l6590
  8145  0432                     l6586:	
  8146  0432  0023               	movlb	3	; select bank3
  8147  0433  082A               	movf	_Left_Shift_Key^(0+384),w
  8148  0434  3A01               	xorlw	1
  8149  0435  1D03               	skipz
  8150  0436  2C7B               	goto	l6618
  8151  0437  0022               	movlb	2	; select bank2
  8152  0438  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8153  0439  1D03               	skipz
  8154  043A  2C7B               	goto	l6618
  8155  043B                     l6590:	
  8156                           
  8157                           ;PS_2.c: 503: {
  8158                           ;PS_2.c: 505: if(!Send_PS2(0xED))
  8159  043B  30ED               	movlw	237
  8160  043C  318C  248B  3181   	fcall	_Send_PS2
  8161  043F  3800               	iorlw	0
  8162  0440  1D03               	skipz
  8163  0441  2C7B               	goto	l6618
  8164                           
  8165                           ;PS_2.c: 506: {
  8166                           ;PS_2.c: 507: if(Caps_Lock)
  8167  0442  0023               	movlb	3	; select bank3
  8168  0443  0829               	movf	_Caps_Lock^(0+384),w
  8169  0444  1903               	btfsc	3,2
  8170  0445  2C5F               	goto	l6606
  8171                           
  8172                           ;PS_2.c: 508: {
  8173                           ;PS_2.c: 509: CapsCount=0;
  8174  0446  01A8               	clrf	_CapsCount^(0+384)
  8175  0447                     l6604:	
  8176                           ;PS_2.c: 510: while(CapsCount<10)
  8177                           
  8178  0447  300A               	movlw	10
  8179  0448  0228               	subwf	_CapsCount^(0+384),w
  8180  0449  1803               	btfsc	3,0
  8181  044A  2C7B               	goto	l6618
  8182                           
  8183                           ;PS_2.c: 511: {
  8184                           ;PS_2.c: 512: if(!Send_PS2(0xED))
  8185  044B  30ED               	movlw	237
  8186  044C  318C  248B  3181   	fcall	_Send_PS2
  8187  044F  3800               	iorlw	0
  8188  0450  1D03               	skipz
  8189  0451  2C59               	goto	l6602
  8190                           
  8191                           ;PS_2.c: 513: {
  8192                           ;PS_2.c: 514: if(!Send_PS2(0x05))
  8193  0452  3005               	movlw	5
  8194  0453  318C  248B  3181   	fcall	_Send_PS2
  8195  0456  3800               	iorlw	0
  8196  0457  1903               	btfsc	3,2
  8197  0458  2C78               	goto	l6612
  8198  0459                     l6602:	
  8199                           ;PS_2.c: 517: break;
  8200                           
  8201                           ;PS_2.c: 515: {
  8202                           ;PS_2.c: 516: Shift_Key = 1;
  8203                           
  8204                           
  8205                           ;PS_2.c: 518: }
  8206                           ;PS_2.c: 519: }
  8207                           ;PS_2.c: 520: CapsCount++;
  8208  0459  3001               	movlw	1
  8209  045A  0023               	movlb	3	; select bank3
  8210  045B  00AF               	movwf	??_PS_2_Update^(0+384)
  8211  045C  082F               	movf	??_PS_2_Update^(0+384),w
  8212  045D  07A8               	addwf	_CapsCount^(0+384),f
  8213  045E  2C47               	goto	l6604
  8214  045F                     l6606:	
  8215                           ;PS_2.c: 521: }
  8216                           ;PS_2.c: 522: }
  8217                           
  8218                           
  8219                           ;PS_2.c: 523: else
  8220                           ;PS_2.c: 524: {
  8221                           ;PS_2.c: 525: CapsCount=0;
  8222  045F  01A8               	clrf	_CapsCount^(0+384)
  8223                           
  8224                           ;PS_2.c: 526: while(CapsCount<10)
  8225  0460  2C66               	goto	l6616
  8226  0461                     l6614:	
  8227                           ;PS_2.c: 533: break;
  8228                           
  8229                           
  8230                           ;PS_2.c: 534: }
  8231                           ;PS_2.c: 535: }
  8232                           ;PS_2.c: 536: CapsCount++;
  8233  0461  3001               	movlw	1
  8234  0462  0023               	movlb	3	; select bank3
  8235  0463  00AF               	movwf	??_PS_2_Update^(0+384)
  8236  0464  082F               	movf	??_PS_2_Update^(0+384),w
  8237  0465  07A8               	addwf	_CapsCount^(0+384),f
  8238  0466                     l6616:	
  8239  0466  300A               	movlw	10
  8240  0467  0228               	subwf	_CapsCount^(0+384),w
  8241  0468  1803               	btfsc	3,0
  8242  0469  2C7B               	goto	l6618
  8243                           
  8244                           ;PS_2.c: 527: {
  8245                           ;PS_2.c: 528: if(!Send_PS2(0xED))
  8246  046A  30ED               	movlw	237
  8247  046B  318C  248B  3181   	fcall	_Send_PS2
  8248  046E  3800               	iorlw	0
  8249  046F  1D03               	skipz
  8250  0470  2C61               	goto	l6614
  8251                           
  8252                           ;PS_2.c: 529: {
  8253                           ;PS_2.c: 530: if(!Send_PS2(0x01))
  8254  0471  3001               	movlw	1
  8255  0472  318C  248B  3181   	fcall	_Send_PS2
  8256  0475  3800               	iorlw	0
  8257  0476  1D03               	skipz
  8258  0477  2C61               	goto	l6614
  8259  0478                     l6612:	
  8260                           
  8261                           ;PS_2.c: 531: {
  8262                           ;PS_2.c: 532: Shift_Key = 1;
  8263  0478  0023               	movlb	3	; select bank3
  8264  0479  01AE               	clrf	_Shift_Key^(0+384)
  8265  047A  0AAE               	incf	_Shift_Key^(0+384),f
  8266  047B                     l6618:	
  8267                           
  8268                           ;PS_2.c: 537: }
  8269                           ;PS_2.c: 538: }
  8270                           ;PS_2.c: 539: }
  8271                           ;PS_2.c: 540: }
  8272                           ;PS_2.c: 541: if(PS_2_Read_Data_First == 0x14 )
  8273  047B  3014               	movlw	20
  8274  047C  0023               	movlb	3	; select bank3
  8275  047D  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8276  047E  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8277  047F  1D03               	skipz
  8278  0480  2C85               	goto	l6622
  8279                           
  8280                           ;PS_2.c: 542: {
  8281                           ;PS_2.c: 543: RControl = 1;
  8282  0481  0022               	movlb	2	; select bank2
  8283  0482  01EA               	clrf	_RControl^(0+256)
  8284  0483  0AEA               	incf	_RControl^(0+256),f
  8285                           
  8286                           ;PS_2.c: 544: }
  8287  0484  2D63               	goto	l6716
  8288  0485                     l6622:	
  8289                           
  8290                           ;PS_2.c: 545: else if(PS_2_Read_Data_First == 0x11 )
  8291  0485  3011               	movlw	17
  8292  0486  0023               	movlb	3	; select bank3
  8293  0487  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8294  0488  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8295  0489  1D03               	skipz
  8296  048A  2C8E               	goto	l6626
  8297                           
  8298                           ;PS_2.c: 546: {
  8299                           ;PS_2.c: 547: RALT = 1;
  8300  048B  01AC               	clrf	_RALT^(0+384)
  8301  048C  0AAC               	incf	_RALT^(0+384),f
  8302                           
  8303                           ;PS_2.c: 548: }
  8304  048D  2D63               	goto	l6716
  8305  048E                     l6626:	
  8306                           
  8307                           ;PS_2.c: 549: else if(PS_2_Read_Data_First == 0xEE )
  8308  048E  30EE               	movlw	238
  8309  048F  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8310  0490  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8311  0491  1D03               	skipz
  8312  0492  2C99               	goto	l6630
  8313                           
  8314                           ;PS_2.c: 550: {
  8315                           ;PS_2.c: 551: ECHO = 1;
  8316  0493  3001               	movlw	1
  8317  0494  00AF               	movwf	??_PS_2_Update^(0+384)
  8318  0495  082F               	movf	??_PS_2_Update^(0+384),w
  8319  0496  0021               	movlb	1	; select bank1
  8320  0497  00E9               	movwf	_ECHO^(0+128)	;volatile
  8321                           
  8322                           ;PS_2.c: 552: }
  8323  0498  2D63               	goto	l6716
  8324  0499                     l6630:	
  8325                           
  8326                           ;PS_2.c: 553: else if(PS_2_Read_Data_First == 0x58)
  8327  0499  3058               	movlw	88
  8328  049A  0023               	movlb	3	; select bank3
  8329  049B  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8330  049C  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8331  049D  1D03               	skipz
  8332  049E  2D1A               	goto	l6690
  8333                           
  8334                           ;PS_2.c: 554: {
  8335                           ;PS_2.c: 555: Caps_Lock_Key = 1;
  8336  049F  0022               	movlb	2	; select bank2
  8337  04A0  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8338  04A1  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8339                           
  8340                           ;PS_2.c: 556: if(Caps_Lock_Key_old == 0)
  8341  04A2  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8342  04A3  1D03               	skipz
  8343  04A4  2D63               	goto	l6716
  8344                           
  8345                           ;PS_2.c: 557: {
  8346                           ;PS_2.c: 558: if(Caps_Lock)
  8347  04A5  0023               	movlb	3	; select bank3
  8348  04A6  0829               	movf	_Caps_Lock^(0+384),w
  8349  04A7  1903               	btfsc	3,2
  8350  04A8  2CE1               	goto	l6664
  8351                           
  8352                           ;PS_2.c: 559: {
  8353                           ;PS_2.c: 560: if(Shift_Key)
  8354  04A9  082E               	movf	_Shift_Key^(0+384),w
  8355  04AA  1903               	btfsc	3,2
  8356  04AB  2CC5               	goto	l6652
  8357                           
  8358                           ;PS_2.c: 561: {
  8359                           ;PS_2.c: 562: CapsCount=0;
  8360  04AC  01A8               	clrf	_CapsCount^(0+384)
  8361  04AD                     l6650:	
  8362                           ;PS_2.c: 563: while(CapsCount<10)
  8363                           
  8364  04AD  300A               	movlw	10
  8365  04AE  0228               	subwf	_CapsCount^(0+384),w
  8366  04AF  1803               	btfsc	3,0
  8367  04B0  2D63               	goto	l6716
  8368                           
  8369                           ;PS_2.c: 564: {
  8370                           ;PS_2.c: 565: if(!Send_PS2(0xED))
  8371  04B1  30ED               	movlw	237
  8372  04B2  318C  248B  3181   	fcall	_Send_PS2
  8373  04B5  3800               	iorlw	0
  8374  04B6  1D03               	skipz
  8375  04B7  2CBF               	goto	l6648
  8376                           
  8377                           ;PS_2.c: 566: {
  8378                           ;PS_2.c: 567: if(!Send_PS2(0x01))
  8379  04B8  3001               	movlw	1
  8380  04B9  318C  248B  3181   	fcall	_Send_PS2
  8381  04BC  3800               	iorlw	0
  8382  04BD  1903               	btfsc	3,2
  8383  04BE  2CD8               	goto	l6658
  8384  04BF                     l6648:	
  8385                           ;PS_2.c: 570: break;
  8386                           
  8387                           ;PS_2.c: 568: {
  8388                           ;PS_2.c: 569: Caps_Lock =0;
  8389                           
  8390                           
  8391                           ;PS_2.c: 571: }
  8392                           ;PS_2.c: 572: }
  8393                           ;PS_2.c: 573: CapsCount++;
  8394  04BF  3001               	movlw	1
  8395  04C0  0023               	movlb	3	; select bank3
  8396  04C1  00AF               	movwf	??_PS_2_Update^(0+384)
  8397  04C2  082F               	movf	??_PS_2_Update^(0+384),w
  8398  04C3  07A8               	addwf	_CapsCount^(0+384),f
  8399  04C4  2CAD               	goto	l6650
  8400  04C5                     l6652:	
  8401                           ;PS_2.c: 574: }
  8402                           ;PS_2.c: 575: }
  8403                           
  8404                           
  8405                           ;PS_2.c: 576: else
  8406                           ;PS_2.c: 577: {
  8407                           ;PS_2.c: 578: CapsCount=0;
  8408  04C5  01A8               	clrf	_CapsCount^(0+384)
  8409  04C6                     l6662:	
  8410                           ;PS_2.c: 579: while(CapsCount<10)
  8411                           
  8412  04C6  300A               	movlw	10
  8413  04C7  0228               	subwf	_CapsCount^(0+384),w
  8414  04C8  1803               	btfsc	3,0
  8415  04C9  2D63               	goto	l6716
  8416                           
  8417                           ;PS_2.c: 580: {
  8418                           ;PS_2.c: 581: if(!Send_PS2(0xED))
  8419  04CA  30ED               	movlw	237
  8420  04CB  318C  248B  3181   	fcall	_Send_PS2
  8421  04CE  3800               	iorlw	0
  8422  04CF  1D03               	skipz
  8423  04D0  2CDB               	goto	l6660
  8424                           
  8425                           ;PS_2.c: 582: {
  8426                           ;PS_2.c: 583: if(!Send_PS2(0x00))
  8427  04D1  3000               	movlw	0
  8428  04D2  318C  248B  3181   	fcall	_Send_PS2
  8429  04D5  3800               	iorlw	0
  8430  04D6  1D03               	skipz
  8431  04D7  2CDB               	goto	l6660
  8432  04D8                     l6658:	
  8433                           
  8434                           ;PS_2.c: 584: {
  8435                           ;PS_2.c: 585: Caps_Lock =0;
  8436  04D8  0023               	movlb	3	; select bank3
  8437  04D9  01A9               	clrf	_Caps_Lock^(0+384)
  8438                           
  8439                           ;PS_2.c: 586: break;
  8440  04DA  2D63               	goto	l6716
  8441  04DB                     l6660:	
  8442                           
  8443                           ;PS_2.c: 587: }
  8444                           ;PS_2.c: 588: }
  8445                           ;PS_2.c: 589: CapsCount++;
  8446  04DB  3001               	movlw	1
  8447  04DC  0023               	movlb	3	; select bank3
  8448  04DD  00AF               	movwf	??_PS_2_Update^(0+384)
  8449  04DE  082F               	movf	??_PS_2_Update^(0+384),w
  8450  04DF  07A8               	addwf	_CapsCount^(0+384),f
  8451  04E0  2CC6               	goto	l6662
  8452  04E1                     l6664:	
  8453                           ;PS_2.c: 590: }
  8454                           ;PS_2.c: 591: }
  8455                           ;PS_2.c: 592: }
  8456                           
  8457                           
  8458                           ;PS_2.c: 593: else
  8459                           ;PS_2.c: 594: {
  8460                           ;PS_2.c: 595: if(Shift_Key)
  8461  04E1  082E               	movf	_Shift_Key^(0+384),w
  8462  04E2  1903               	btfsc	3,2
  8463  04E3  2CFD               	goto	l6678
  8464                           
  8465                           ;PS_2.c: 596: {
  8466                           ;PS_2.c: 597: CapsCount=0;
  8467  04E4  01A8               	clrf	_CapsCount^(0+384)
  8468  04E5                     l6676:	
  8469                           ;PS_2.c: 598: while(CapsCount<10)
  8470                           
  8471  04E5  300A               	movlw	10
  8472  04E6  0228               	subwf	_CapsCount^(0+384),w
  8473  04E7  1803               	btfsc	3,0
  8474  04E8  2D63               	goto	l6716
  8475                           
  8476                           ;PS_2.c: 599: {
  8477                           ;PS_2.c: 600: if(!Send_PS2(0xED))
  8478  04E9  30ED               	movlw	237
  8479  04EA  318C  248B  3181   	fcall	_Send_PS2
  8480  04ED  3800               	iorlw	0
  8481  04EE  1D03               	skipz
  8482  04EF  2CF7               	goto	l6674
  8483                           
  8484                           ;PS_2.c: 601: {
  8485                           ;PS_2.c: 602: if(!Send_PS2(0x05))
  8486  04F0  3005               	movlw	5
  8487  04F1  318C  248B  3181   	fcall	_Send_PS2
  8488  04F4  3800               	iorlw	0
  8489  04F5  1903               	btfsc	3,2
  8490  04F6  2D10               	goto	l6684
  8491  04F7                     l6674:	
  8492                           ;PS_2.c: 605: break;
  8493                           
  8494                           ;PS_2.c: 603: {
  8495                           ;PS_2.c: 604: Caps_Lock =1;
  8496                           
  8497                           
  8498                           ;PS_2.c: 606: }
  8499                           ;PS_2.c: 607: }
  8500                           ;PS_2.c: 608: CapsCount++;
  8501  04F7  3001               	movlw	1
  8502  04F8  0023               	movlb	3	; select bank3
  8503  04F9  00AF               	movwf	??_PS_2_Update^(0+384)
  8504  04FA  082F               	movf	??_PS_2_Update^(0+384),w
  8505  04FB  07A8               	addwf	_CapsCount^(0+384),f
  8506  04FC  2CE5               	goto	l6676
  8507  04FD                     l6678:	
  8508                           ;PS_2.c: 609: }
  8509                           ;PS_2.c: 610: }
  8510                           
  8511                           
  8512                           ;PS_2.c: 611: else
  8513                           ;PS_2.c: 612: {
  8514                           ;PS_2.c: 613: CapsCount=0;
  8515  04FD  01A8               	clrf	_CapsCount^(0+384)
  8516  04FE                     l6688:	
  8517                           ;PS_2.c: 614: while(CapsCount<10)
  8518                           
  8519  04FE  300A               	movlw	10
  8520  04FF  0228               	subwf	_CapsCount^(0+384),w
  8521  0500  1803               	btfsc	3,0
  8522  0501  2D63               	goto	l6716
  8523                           
  8524                           ;PS_2.c: 615: {
  8525                           ;PS_2.c: 616: if(!Send_PS2(0xED))
  8526  0502  30ED               	movlw	237
  8527  0503  318C  248B  3181   	fcall	_Send_PS2
  8528  0506  3800               	iorlw	0
  8529  0507  1D03               	skipz
  8530  0508  2D14               	goto	l6686
  8531                           
  8532                           ;PS_2.c: 617: {
  8533                           ;PS_2.c: 618: if(!Send_PS2(0x04))
  8534  0509  3004               	movlw	4
  8535  050A  318C  248B  3181   	fcall	_Send_PS2
  8536  050D  3800               	iorlw	0
  8537  050E  1D03               	skipz
  8538  050F  2D14               	goto	l6686
  8539  0510                     l6684:	
  8540                           
  8541                           ;PS_2.c: 619: {
  8542                           ;PS_2.c: 620: Caps_Lock =1;
  8543  0510  0023               	movlb	3	; select bank3
  8544  0511  01A9               	clrf	_Caps_Lock^(0+384)
  8545  0512  0AA9               	incf	_Caps_Lock^(0+384),f
  8546                           
  8547                           ;PS_2.c: 621: break;
  8548  0513  2D63               	goto	l6716
  8549  0514                     l6686:	
  8550                           
  8551                           ;PS_2.c: 622: }
  8552                           ;PS_2.c: 623: }
  8553                           ;PS_2.c: 624: CapsCount++;
  8554  0514  3001               	movlw	1
  8555  0515  0023               	movlb	3	; select bank3
  8556  0516  00AF               	movwf	??_PS_2_Update^(0+384)
  8557  0517  082F               	movf	??_PS_2_Update^(0+384),w
  8558  0518  07A8               	addwf	_CapsCount^(0+384),f
  8559  0519  2CFE               	goto	l6688
  8560  051A                     l6690:	
  8561                           ;PS_2.c: 625: }
  8562                           ;PS_2.c: 626: }
  8563                           ;PS_2.c: 627: }
  8564                           ;PS_2.c: 628: }
  8565                           ;PS_2.c: 630: }
  8566                           
  8567                           
  8568                           ;PS_2.c: 631: else
  8569                           ;PS_2.c: 632: {
  8570                           ;PS_2.c: 633: if(Shift_Key ==1)
  8571  051A  082E               	movf	_Shift_Key^(0+384),w
  8572  051B  3A01               	xorlw	1
  8573  051C  1D03               	skipz
  8574  051D  2D3B               	goto	l6702
  8575                           
  8576                           ;PS_2.c: 634: {
  8577                           ;PS_2.c: 636: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8578  051E  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8579  051F  3199  21CD  3181   	fcall	_Decode_Scan_Code_Shift
  8580  0522  0023               	movlb	3	; select bank3
  8581  0523  00AF               	movwf	??_PS_2_Update^(0+384)
  8582  0524  082F               	movf	??_PS_2_Update^(0+384),w
  8583  0525  0025               	movlb	5	; select bank5
  8584  0526  00E0               	movwf	PS_2_Update@temp^(0+640)
  8585                           
  8586                           ;PS_2.c: 637: if(Caps_Lock)
  8587  0527  0023               	movlb	3	; select bank3
  8588  0528  0829               	movf	_Caps_Lock^(0+384),w
  8589  0529  1903               	btfsc	3,2
  8590  052A  2D55               	goto	l6712
  8591                           
  8592                           ;PS_2.c: 638: {
  8593                           ;PS_2.c: 640: if(temp >= 'A' && temp <= 'Z')
  8594  052B  3041               	movlw	65
  8595  052C  0025               	movlb	5	; select bank5
  8596  052D  0260               	subwf	PS_2_Update@temp^(0+640),w
  8597  052E  1C03               	skipc
  8598  052F  2D54               	goto	l734
  8599  0530  305B               	movlw	91
  8600  0531  0260               	subwf	PS_2_Update@temp^(0+640),w
  8601  0532  1803               	skipnc
  8602  0533  2D54               	goto	l734
  8603                           
  8604                           ;PS_2.c: 641: {
  8605                           ;PS_2.c: 642: temp += 32;
  8606  0534  3020               	movlw	32
  8607  0535  0023               	movlb	3	; select bank3
  8608  0536  00AF               	movwf	??_PS_2_Update^(0+384)
  8609  0537  082F               	movf	??_PS_2_Update^(0+384),w
  8610  0538  0025               	movlb	5	; select bank5
  8611  0539  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8612  053A  2D54               	goto	l734
  8613  053B                     l6702:	
  8614                           ;PS_2.c: 643: }
  8615                           ;PS_2.c: 644: }
  8616                           ;PS_2.c: 645: }
  8617                           
  8618                           
  8619                           ;PS_2.c: 646: else
  8620                           ;PS_2.c: 647: {
  8621                           ;PS_2.c: 648: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8622  053B  0023               	movlb	3	; select bank3
  8623  053C  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8624  053D  3199  21A7  3181   	fcall	_Decode_Scan_Code
  8625  0540  0023               	movlb	3	; select bank3
  8626  0541  00AF               	movwf	??_PS_2_Update^(0+384)
  8627  0542  082F               	movf	??_PS_2_Update^(0+384),w
  8628  0543  0025               	movlb	5	; select bank5
  8629  0544  00E0               	movwf	PS_2_Update@temp^(0+640)
  8630                           
  8631                           ;PS_2.c: 649: if(Caps_Lock)
  8632  0545  0023               	movlb	3	; select bank3
  8633  0546  0829               	movf	_Caps_Lock^(0+384),w
  8634  0547  1903               	btfsc	3,2
  8635  0548  2D55               	goto	l6712
  8636                           
  8637                           ;PS_2.c: 650: {
  8638                           ;PS_2.c: 652: if(temp >= 'a' && temp <= 'z')
  8639  0549  3061               	movlw	97
  8640  054A  0025               	movlb	5	; select bank5
  8641  054B  0260               	subwf	PS_2_Update@temp^(0+640),w
  8642  054C  1C03               	skipc
  8643  054D  2D54               	goto	l734
  8644  054E  307B               	movlw	123
  8645  054F  0260               	subwf	PS_2_Update@temp^(0+640),w
  8646  0550  1803               	skipnc
  8647  0551  2D54               	goto	l734
  8648                           
  8649                           ;PS_2.c: 653: {
  8650                           ;PS_2.c: 654: temp -= 32;
  8651  0552  3020               	movlw	32
  8652  0553  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8653  0554                     l734:	
  8654  0554  0023               	movlb	3	; select bank3
  8655  0555                     l6712:	
  8656                           
  8657                           ;PS_2.c: 655: }
  8658                           ;PS_2.c: 656: }
  8659                           ;PS_2.c: 657: }
  8660                           ;PS_2.c: 658: if(!temp)
  8661  0555  0025               	movlb	5	; select bank5
  8662  0556  08E0               	movf	PS_2_Update@temp^(0+640),f
  8663  0557  1D03               	skipz
  8664  0558  2D63               	goto	l6716
  8665                           
  8666                           ;PS_2.c: 659: {
  8667                           ;PS_2.c: 661: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8668  0559  0023               	movlb	3	; select bank3
  8669  055A  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8670  055B  3199  215F  3181   	fcall	_Decode_Scan_Code_Function
  8671  055E  0023               	movlb	3	; select bank3
  8672  055F  00AF               	movwf	??_PS_2_Update^(0+384)
  8673  0560  082F               	movf	??_PS_2_Update^(0+384),w
  8674  0561  0025               	movlb	5	; select bank5
  8675  0562  00E0               	movwf	PS_2_Update@temp^(0+640)
  8676  0563                     l6716:	
  8677                           
  8678                           ;PS_2.c: 662: }
  8679                           ;PS_2.c: 663: }
  8680                           ;PS_2.c: 664: }
  8681                           ;PS_2.c: 665: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8682  0563  0025               	movlb	5	; select bank5
  8683  0564  01DE               	clrf	_PS_2_Update$820^(0+640)
  8684  0565  0ADE               	incf	_PS_2_Update$820^(0+640),f
  8685  0566  0022               	movlb	2	; select bank2
  8686  0567  08E7               	movf	_LALT^(0+256),f
  8687  0568  1D03               	skipz
  8688  0569  2D70               	goto	l6724
  8689  056A  0023               	movlb	3	; select bank3
  8690  056B  08AC               	movf	_RALT^(0+384),f
  8691  056C  1D03               	skipz
  8692  056D  2D70               	goto	l6724
  8693  056E  0025               	movlb	5	; select bank5
  8694  056F  01DE               	clrf	_PS_2_Update$820^(0+640)
  8695  0570                     l6724:	
  8696  0570  0025               	movlb	5	; select bank5
  8697  0571  01DF               	clrf	_PS_2_Update$821^(0+640)
  8698  0572  0ADF               	incf	_PS_2_Update$821^(0+640),f
  8699  0573  0022               	movlb	2	; select bank2
  8700  0574  08EA               	movf	_RControl^(0+256),f
  8701  0575  1D03               	skipz
  8702  0576  2D7C               	goto	l6732
  8703  0577  08E8               	movf	_LControl^(0+256),f
  8704  0578  1D03               	skipz
  8705  0579  2D7C               	goto	l6732
  8706  057A  0025               	movlb	5	; select bank5
  8707  057B  01DF               	clrf	_PS_2_Update$821^(0+640)
  8708  057C                     l6732:	
  8709  057C  0022               	movlb	2	; select bank2
  8710  057D  0866               	movf	_Delete^(0+256),w
  8711  057E  0023               	movlb	3	; select bank3
  8712  057F  00AF               	movwf	??_PS_2_Update^(0+384)
  8713  0580  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8714  0581  0025               	movlb	5	; select bank5
  8715  0582  085F               	movf	_PS_2_Update$821^(0+640),w
  8716  0583  075E               	addwf	_PS_2_Update$820^(0+640),w
  8717  0584  0023               	movlb	3	; select bank3
  8718  0585  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8719  0586  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8720  0587  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8721  0588  082F               	movf	??_PS_2_Update^(0+384),w
  8722  0589  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8723  058A  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8724  058B  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8725  058C  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8726  058D  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8727  058E  3003               	movlw	3
  8728  058F  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8729  0590  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8730  0591  1D03               	skipz
  8731  0592  2E0F               	goto	l6772
  8732                           
  8733                           ;PS_2.c: 666: {
  8734                           ;PS_2.c: 668: UARTstringWAIT("\r\n");
  8735  0593  3052               	movlw	low ((STR_11+17)| (0+32768))
  8736  0594  0020               	movlb	0	; select bank0
  8737  0595  00B4               	movwf	UARTstringWAIT@data
  8738  0596  308B               	movlw	high ((STR_11+17)| (0+32768))
  8739  0597  00B5               	movwf	UARTstringWAIT@data+1
  8740  0598  319B  23C2  3181   	fcall	_UARTstringWAIT
  8741                           
  8742                           ;PS_2.c: 669: delayUS(10000);
  8743  059B  3000               	movlw	0
  8744  059C  0020               	movlb	0	; select bank0
  8745  059D  00A8               	movwf	delayUS@US+3
  8746  059E  3000               	movlw	0
  8747  059F  00A7               	movwf	delayUS@US+2
  8748  05A0  3027               	movlw	39
  8749  05A1  00A6               	movwf	delayUS@US+1
  8750  05A2  3010               	movlw	16
  8751  05A3  00A5               	movwf	delayUS@US
  8752  05A4  319B  23F5  3181   	fcall	_delayUS
  8753                           
  8754                           ;PS_2.c: 670: if(!BAUDMODE)
  8755  05A7  0022               	movlb	2	; select bank2
  8756  05A8  08E3               	movf	_BAUDMODE^(0+256),f
  8757  05A9  1D03               	skipz
  8758  05AA  2DD4               	goto	l6752
  8759                           
  8760                           ;PS_2.c: 671: {
  8761                           ;PS_2.c: 672: BaudTyped =0;
  8762  05AB  3000               	movlw	0
  8763  05AC  00E2               	movwf	(_BaudTyped+3)^(0+256)
  8764  05AD  3000               	movlw	0
  8765  05AE  00E1               	movwf	(_BaudTyped+2)^(0+256)
  8766  05AF  3000               	movlw	0
  8767  05B0  00E0               	movwf	(_BaudTyped+1)^(0+256)
  8768  05B1  3000               	movlw	0
  8769  05B2  00DF               	movwf	_BaudTyped^(0+256)
  8770                           
  8771                           ;PS_2.c: 673: ParityTyped =0;
  8772  05B3  0023               	movlb	3	; select bank3
  8773  05B4  01AB               	clrf	_ParityTyped^(0+384)
  8774                           
  8775                           ;PS_2.c: 674: BAUDMODE = 1;
  8776  05B5  0022               	movlb	2	; select bank2
  8777  05B6  01E3               	clrf	_BAUDMODE^(0+256)
  8778  05B7  0AE3               	incf	_BAUDMODE^(0+256),f
  8779                           
  8780                           ;PS_2.c: 675: UARTstringWAIT("Enter Baud rate\r\n");
  8781  05B8  307B               	movlw	low (STR_28| (0+32768))
  8782  05B9  0020               	movlb	0	; select bank0
  8783  05BA  00B4               	movwf	UARTstringWAIT@data
  8784  05BB  308B               	movlw	high (STR_28| (0+32768))
  8785  05BC  00B5               	movwf	UARTstringWAIT@data+1
  8786  05BD  319B  23C2  3181   	fcall	_UARTstringWAIT
  8787                           
  8788                           ;PS_2.c: 676: delayUS(10000);
  8789  05C0  3000               	movlw	0
  8790  05C1  0020               	movlb	0	; select bank0
  8791  05C2  00A8               	movwf	delayUS@US+3
  8792  05C3  3000               	movlw	0
  8793  05C4  00A7               	movwf	delayUS@US+2
  8794  05C5  3027               	movlw	39
  8795  05C6  00A6               	movwf	delayUS@US+1
  8796  05C7  3010               	movlw	16
  8797  05C8  00A5               	movwf	delayUS@US
  8798  05C9  319B  23F5  3181   	fcall	_delayUS
  8799                           
  8800                           ;PS_2.c: 677: UARTchar('>' , 0, 0);
  8801  05CC  0020               	movlb	0	; select bank0
  8802  05CD  01AD               	clrf	UARTchar@NinethBit_override
  8803  05CE  01AE               	clrf	UARTchar@NinethBit_override_data
  8804  05CF  303E               	movlw	62
  8805  05D0  319D  253A  3181   	fcall	_UARTchar
  8806                           
  8807                           ;PS_2.c: 679: }
  8808  05D3  2E07               	goto	l6762
  8809  05D4                     l6752:	
  8810                           
  8811                           ;PS_2.c: 680: else
  8812                           ;PS_2.c: 681: {
  8813                           ;PS_2.c: 682: BaudTyped = 9600;
  8814  05D4  3000               	movlw	0
  8815  05D5  0022               	movlb	2	; select bank2
  8816  05D6  00E2               	movwf	(_BaudTyped+3)^(0+256)
  8817  05D7  3000               	movlw	0
  8818  05D8  00E1               	movwf	(_BaudTyped+2)^(0+256)
  8819  05D9  3025               	movlw	37
  8820  05DA  00E0               	movwf	(_BaudTyped+1)^(0+256)
  8821  05DB  3080               	movlw	128
  8822  05DC  00DF               	movwf	_BaudTyped^(0+256)
  8823                           
  8824                           ;PS_2.c: 683: UARTstringWAIT("KeyBoard Reset to 9600 with no parity bit\r\n");
  8825  05DD  30FB               	movlw	low (STR_29| (0+32768))
  8826  05DE  0020               	movlb	0	; select bank0
  8827  05DF  00B4               	movwf	UARTstringWAIT@data
  8828  05E0  3089               	movlw	high (STR_29| (0+32768))
  8829  05E1  00B5               	movwf	UARTstringWAIT@data+1
  8830  05E2  319B  23C2  3181   	fcall	_UARTstringWAIT
  8831                           
  8832                           ;PS_2.c: 684: delayUS(10000);
  8833  05E5  3000               	movlw	0
  8834  05E6  0020               	movlb	0	; select bank0
  8835  05E7  00A8               	movwf	delayUS@US+3
  8836  05E8  3000               	movlw	0
  8837  05E9  00A7               	movwf	delayUS@US+2
  8838  05EA  3027               	movlw	39
  8839  05EB  00A6               	movwf	delayUS@US+1
  8840  05EC  3010               	movlw	16
  8841  05ED  00A5               	movwf	delayUS@US
  8842  05EE  319B  23F5  3181   	fcall	_delayUS
  8843                           
  8844                           ;PS_2.c: 685: SetBaud(BaudTyped, 0);
  8845  05F1  0022               	movlb	2	; select bank2
  8846  05F2  0862               	movf	(_BaudTyped+3)^(0+256),w
  8847  05F3  0020               	movlb	0	; select bank0
  8848  05F4  00D7               	movwf	SetBaud@Baud+3
  8849  05F5  0022               	movlb	2	; select bank2
  8850  05F6  0861               	movf	(_BaudTyped+2)^(0+256),w
  8851  05F7  0020               	movlb	0	; select bank0
  8852  05F8  00D6               	movwf	SetBaud@Baud+2
  8853  05F9  0022               	movlb	2	; select bank2
  8854  05FA  0860               	movf	(_BaudTyped+1)^(0+256),w
  8855  05FB  0020               	movlb	0	; select bank0
  8856  05FC  00D5               	movwf	SetBaud@Baud+1
  8857  05FD  0022               	movlb	2	; select bank2
  8858  05FE  085F               	movf	_BaudTyped^(0+256),w
  8859  05FF  0020               	movlb	0	; select bank0
  8860  0600  00D4               	movwf	SetBaud@Baud
  8861  0601  01D8               	clrf	SetBaud@Parity
  8862  0602  3196  269B  3181   	fcall	_SetBaud
  8863                           
  8864                           ;PS_2.c: 686: BAUDMODE = 0;
  8865  0605  0022               	movlb	2	; select bank2
  8866  0606  01E3               	clrf	_BAUDMODE^(0+256)
  8867  0607                     l6762:	
  8868                           
  8869                           ;PS_2.c: 687: }
  8870                           ;PS_2.c: 688: RControl =0;
  8871  0607  0022               	movlb	2	; select bank2
  8872  0608  01EA               	clrf	_RControl^(0+256)
  8873                           
  8874                           ;PS_2.c: 689: LControl =0;
  8875  0609  01E8               	clrf	_LControl^(0+256)
  8876                           
  8877                           ;PS_2.c: 690: LALT =0;
  8878  060A  01E7               	clrf	_LALT^(0+256)
  8879                           
  8880                           ;PS_2.c: 691: RALT =0;
  8881  060B  0023               	movlb	3	; select bank3
  8882  060C  01AC               	clrf	_RALT^(0+384)
  8883                           
  8884                           ;PS_2.c: 692: Delete =0;
  8885  060D  0022               	movlb	2	; select bank2
  8886  060E  01E6               	clrf	_Delete^(0+256)
  8887  060F                     l6772:	
  8888                           
  8889                           ;PS_2.c: 693: }
  8890                           ;PS_2.c: 694: if(temp)
  8891  060F  0025               	movlb	5	; select bank5
  8892  0610  0860               	movf	PS_2_Update@temp^(0+640),w
  8893  0611  1903               	btfsc	3,2
  8894  0612  2FC6               	goto	l6868
  8895                           
  8896                           ;PS_2.c: 695: {
  8897                           ;PS_2.c: 697: if(temp == 0x01)
  8898  0613  0860               	movf	PS_2_Update@temp^(0+640),w
  8899  0614  3A01               	xorlw	1
  8900  0615  1D03               	skipz
  8901  0616  2E20               	goto	l6778
  8902                           
  8903                           ;PS_2.c: 698: {
  8904                           ;PS_2.c: 701: UART_send_break_timed(100000);
  8905  0617  30A0               	movlw	160
  8906  0618  0020               	movlb	0	; select bank0
  8907  0619  00AF               	movwf	UART_send_break_timed@US
  8908  061A  3086               	movlw	134
  8909  061B  00B0               	movwf	UART_send_break_timed@US+1
  8910  061C  319A  2274  3181   	fcall	_UART_send_break_timed
  8911  061F  2FC5               	goto	l746
  8912  0620                     l6778:	
  8913                           ;PS_2.c: 702: }
  8914                           
  8915                           
  8916                           ;PS_2.c: 703: else
  8917                           ;PS_2.c: 704: {
  8918                           ;PS_2.c: 705: if(!BAUDMODE)
  8919  0620  0022               	movlb	2	; select bank2
  8920  0621  08E3               	movf	_BAUDMODE^(0+256),f
  8921  0622  1D03               	skipz
  8922  0623  2E51               	goto	l6790
  8923                           
  8924                           ;PS_2.c: 706: {
  8925                           ;PS_2.c: 707: UARTchar(temp, 0, 0);
  8926  0624  0020               	movlb	0	; select bank0
  8927  0625  01AD               	clrf	UARTchar@NinethBit_override
  8928  0626  01AE               	clrf	UARTchar@NinethBit_override_data
  8929  0627  0025               	movlb	5	; select bank5
  8930  0628  0860               	movf	PS_2_Update@temp^(0+640),w
  8931  0629  319D  253A  3181   	fcall	_UARTchar
  8932                           
  8933                           ;PS_2.c: 708: if(temp == '\r')
  8934  062C  0025               	movlb	5	; select bank5
  8935  062D  0860               	movf	PS_2_Update@temp^(0+640),w
  8936  062E  3A0D               	xorlw	13
  8937  062F  1D03               	skipz
  8938  0630  2FC6               	goto	l6868
  8939                           
  8940                           ;PS_2.c: 709: {
  8941                           ;PS_2.c: 710: delayUS(5000);
  8942  0631  3000               	movlw	0
  8943  0632  0020               	movlb	0	; select bank0
  8944  0633  00A8               	movwf	delayUS@US+3
  8945  0634  3000               	movlw	0
  8946  0635  00A7               	movwf	delayUS@US+2
  8947  0636  3013               	movlw	19
  8948  0637  00A6               	movwf	delayUS@US+1
  8949  0638  3088               	movlw	136
  8950  0639  00A5               	movwf	delayUS@US
  8951  063A  319B  23F5  3181   	fcall	_delayUS
  8952                           
  8953                           ;PS_2.c: 711: UARTchar('\n', 0, 0);
  8954  063D  0020               	movlb	0	; select bank0
  8955  063E  01AD               	clrf	UARTchar@NinethBit_override
  8956  063F  01AE               	clrf	UARTchar@NinethBit_override_data
  8957  0640  300A               	movlw	10
  8958  0641  319D  253A  3181   	fcall	_UARTchar
  8959                           
  8960                           ;PS_2.c: 712: delayUS(10000);
  8961  0644  3000               	movlw	0
  8962  0645  0020               	movlb	0	; select bank0
  8963  0646  00A8               	movwf	delayUS@US+3
  8964  0647  3000               	movlw	0
  8965  0648  00A7               	movwf	delayUS@US+2
  8966  0649  3027               	movlw	39
  8967  064A  00A6               	movwf	delayUS@US+1
  8968  064B  3010               	movlw	16
  8969  064C  00A5               	movwf	delayUS@US
  8970  064D  319B  23F5  3181   	fcall	_delayUS
  8971  0650  2FC5               	goto	l746
  8972  0651                     l6790:	
  8973                           ;PS_2.c: 713: }
  8974                           ;PS_2.c: 714: }
  8975                           
  8976                           
  8977                           ;PS_2.c: 715: else
  8978                           ;PS_2.c: 716: {
  8979                           ;PS_2.c: 717: if(ISNUMBER(temp))
  8980  0651  0025               	movlb	5	; select bank5
  8981  0652  0860               	movf	PS_2_Update@temp^(0+640),w
  8982  0653  3199  2141  3181   	fcall	_ISNUMBER
  8983  0656  3A00               	xorlw	0
  8984  0657  1903               	skipnz
  8985  0658  2EAF               	goto	l6798
  8986                           
  8987                           ;PS_2.c: 718: {
  8988                           ;PS_2.c: 719: BaudTyped*=10;
  8989  0659  3000               	movlw	0
  8990  065A  0020               	movlb	0	; select bank0
  8991  065B  00A8               	movwf	___lmul@multiplier+3
  8992  065C  3000               	movlw	0
  8993  065D  00A7               	movwf	___lmul@multiplier+2
  8994  065E  3000               	movlw	0
  8995  065F  00A6               	movwf	___lmul@multiplier+1
  8996  0660  300A               	movlw	10
  8997  0661  00A5               	movwf	___lmul@multiplier
  8998  0662  0022               	movlb	2	; select bank2
  8999  0663  0862               	movf	(_BaudTyped+3)^(0+256),w
  9000  0664  0020               	movlb	0	; select bank0
  9001  0665  00AC               	movwf	___lmul@multiplicand+3
  9002  0666  0022               	movlb	2	; select bank2
  9003  0667  0861               	movf	(_BaudTyped+2)^(0+256),w
  9004  0668  0020               	movlb	0	; select bank0
  9005  0669  00AB               	movwf	___lmul@multiplicand+2
  9006  066A  0022               	movlb	2	; select bank2
  9007  066B  0860               	movf	(_BaudTyped+1)^(0+256),w
  9008  066C  0020               	movlb	0	; select bank0
  9009  066D  00AA               	movwf	___lmul@multiplicand+1
  9010  066E  0022               	movlb	2	; select bank2
  9011  066F  085F               	movf	_BaudTyped^(0+256),w
  9012  0670  0020               	movlb	0	; select bank0
  9013  0671  00A9               	movwf	___lmul@multiplicand
  9014  0672  319A  22CB  3181   	fcall	___lmul
  9015  0675  0020               	movlb	0	; select bank0
  9016  0676  0828               	movf	?___lmul+3,w
  9017  0677  0022               	movlb	2	; select bank2
  9018  0678  00E2               	movwf	(_BaudTyped+3)^(0+256)
  9019  0679  0020               	movlb	0	; select bank0
  9020  067A  0827               	movf	?___lmul+2,w
  9021  067B  0022               	movlb	2	; select bank2
  9022  067C  00E1               	movwf	(_BaudTyped+2)^(0+256)
  9023  067D  0020               	movlb	0	; select bank0
  9024  067E  0826               	movf	?___lmul+1,w
  9025  067F  0022               	movlb	2	; select bank2
  9026  0680  00E0               	movwf	(_BaudTyped+1)^(0+256)
  9027  0681  0020               	movlb	0	; select bank0
  9028  0682  0825               	movf	?___lmul,w
  9029  0683  0022               	movlb	2	; select bank2
  9030  0684  00DF               	movwf	_BaudTyped^(0+256)
  9031                           
  9032                           ;PS_2.c: 720: BaudTyped += temp - 48;
  9033  0685  0025               	movlb	5	; select bank5
  9034  0686  0860               	movf	PS_2_Update@temp^(0+640),w
  9035  0687  3ED0               	addlw	208
  9036  0688  0023               	movlb	3	; select bank3
  9037  0689  00AF               	movwf	??_PS_2_Update^(0+384)
  9038  068A  30FF               	movlw	255
  9039  068B  1803               	skipnc
  9040  068C  3000               	movlw	0
  9041  068D  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  9042  068E  082F               	movf	??_PS_2_Update^(0+384),w
  9043  068F  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  9044  0690  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  9045  0691  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  9046  0692  3000               	movlw	0
  9047  0693  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  9048  0694  30FF               	movlw	255
  9049  0695  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  9050  0696  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  9051  0697  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  9052  0698  0022               	movlb	2	; select bank2
  9053  0699  07DF               	addwf	_BaudTyped^(0+256),f
  9054  069A  0023               	movlb	3	; select bank3
  9055  069B  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  9056  069C  0022               	movlb	2	; select bank2
  9057  069D  3DE0               	addwfc	(_BaudTyped+1)^(0+256),f
  9058  069E  0023               	movlb	3	; select bank3
  9059  069F  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  9060  06A0  0022               	movlb	2	; select bank2
  9061  06A1  3DE1               	addwfc	(_BaudTyped+2)^(0+256),f
  9062  06A2  0023               	movlb	3	; select bank3
  9063  06A3  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  9064  06A4  0022               	movlb	2	; select bank2
  9065  06A5  3DE2               	addwfc	(_BaudTyped+3)^(0+256),f
  9066                           
  9067                           ;PS_2.c: 721: UARTchar(temp, 0, 0);
  9068  06A6  0020               	movlb	0	; select bank0
  9069  06A7  01AD               	clrf	UARTchar@NinethBit_override
  9070  06A8  01AE               	clrf	UARTchar@NinethBit_override_data
  9071  06A9  0025               	movlb	5	; select bank5
  9072  06AA  0860               	movf	PS_2_Update@temp^(0+640),w
  9073  06AB  319D  253A  3181   	fcall	_UARTchar
  9074  06AE  2FC5               	goto	l746
  9075  06AF                     l6798:	
  9076                           ;PS_2.c: 722: }
  9077                           
  9078                           
  9079                           ;PS_2.c: 723: else if(temp == 'o' || temp == 'O')
  9080  06AF  0025               	movlb	5	; select bank5
  9081  06B0  0860               	movf	PS_2_Update@temp^(0+640),w
  9082  06B1  3A6F               	xorlw	111
  9083  06B2  1903               	skipnz
  9084  06B3  2EB8               	goto	l754
  9085  06B4  0860               	movf	PS_2_Update@temp^(0+640),w
  9086  06B5  3A4F               	xorlw	79
  9087  06B6  1D03               	skipz
  9088  06B7  2EC4               	goto	l6804
  9089  06B8                     l754:	
  9090                           
  9091                           ;PS_2.c: 724: {
  9092                           ;PS_2.c: 725: ParityTyped = 1;
  9093  06B8  0023               	movlb	3	; select bank3
  9094  06B9  01AB               	clrf	_ParityTyped^(0+384)
  9095  06BA  0AAB               	incf	_ParityTyped^(0+384),f
  9096                           
  9097                           ;PS_2.c: 726: UARTchar(temp, 0, 0);
  9098  06BB  0020               	movlb	0	; select bank0
  9099  06BC  01AD               	clrf	UARTchar@NinethBit_override
  9100  06BD  01AE               	clrf	UARTchar@NinethBit_override_data
  9101  06BE  0025               	movlb	5	; select bank5
  9102  06BF  0860               	movf	PS_2_Update@temp^(0+640),w
  9103  06C0  319D  253A  3181   	fcall	_UARTchar
  9104  06C3  2FC5               	goto	l746
  9105  06C4                     l6804:	
  9106                           ;PS_2.c: 727: }
  9107                           
  9108                           
  9109                           ;PS_2.c: 728: else if(temp == 'e' || temp == 'E')
  9110  06C4  0025               	movlb	5	; select bank5
  9111  06C5  0860               	movf	PS_2_Update@temp^(0+640),w
  9112  06C6  3A65               	xorlw	101
  9113  06C7  1903               	skipnz
  9114  06C8  2ECD               	goto	l6808
  9115  06C9  0860               	movf	PS_2_Update@temp^(0+640),w
  9116  06CA  3A45               	xorlw	69
  9117  06CB  1D03               	skipz
  9118  06CC  2EDB               	goto	l6812
  9119  06CD                     l6808:	
  9120                           
  9121                           ;PS_2.c: 729: {
  9122                           ;PS_2.c: 730: ParityTyped = 2;
  9123  06CD  3002               	movlw	2
  9124  06CE  0023               	movlb	3	; select bank3
  9125  06CF  00AF               	movwf	??_PS_2_Update^(0+384)
  9126  06D0  082F               	movf	??_PS_2_Update^(0+384),w
  9127  06D1  00AB               	movwf	_ParityTyped^(0+384)
  9128                           
  9129                           ;PS_2.c: 731: UARTchar(temp, 0, 0);
  9130  06D2  0020               	movlb	0	; select bank0
  9131  06D3  01AD               	clrf	UARTchar@NinethBit_override
  9132  06D4  01AE               	clrf	UARTchar@NinethBit_override_data
  9133  06D5  0025               	movlb	5	; select bank5
  9134  06D6  0860               	movf	PS_2_Update@temp^(0+640),w
  9135  06D7  319D  253A  3181   	fcall	_UARTchar
  9136  06DA  2FC5               	goto	l746
  9137  06DB                     l6812:	
  9138                           ;PS_2.c: 732: }
  9139                           
  9140                           
  9141                           ;PS_2.c: 733: else if(temp == 'm' || temp == 'M')
  9142  06DB  0025               	movlb	5	; select bank5
  9143  06DC  0860               	movf	PS_2_Update@temp^(0+640),w
  9144  06DD  3A6D               	xorlw	109
  9145  06DE  1903               	skipnz
  9146  06DF  2EE4               	goto	l6816
  9147  06E0  0860               	movf	PS_2_Update@temp^(0+640),w
  9148  06E1  3A4D               	xorlw	77
  9149  06E2  1D03               	skipz
  9150  06E3  2EF2               	goto	l6820
  9151  06E4                     l6816:	
  9152                           
  9153                           ;PS_2.c: 734: {
  9154                           ;PS_2.c: 735: ParityTyped = 3;
  9155  06E4  3003               	movlw	3
  9156  06E5  0023               	movlb	3	; select bank3
  9157  06E6  00AF               	movwf	??_PS_2_Update^(0+384)
  9158  06E7  082F               	movf	??_PS_2_Update^(0+384),w
  9159  06E8  00AB               	movwf	_ParityTyped^(0+384)
  9160                           
  9161                           ;PS_2.c: 736: UARTchar(temp, 0, 0);
  9162  06E9  0020               	movlb	0	; select bank0
  9163  06EA  01AD               	clrf	UARTchar@NinethBit_override
  9164  06EB  01AE               	clrf	UARTchar@NinethBit_override_data
  9165  06EC  0025               	movlb	5	; select bank5
  9166  06ED  0860               	movf	PS_2_Update@temp^(0+640),w
  9167  06EE  319D  253A  3181   	fcall	_UARTchar
  9168  06F1  2FC5               	goto	l746
  9169  06F2                     l6820:	
  9170                           ;PS_2.c: 737: }
  9171                           
  9172                           
  9173                           ;PS_2.c: 738: else if(temp == 's' || temp == 'S')
  9174  06F2  0025               	movlb	5	; select bank5
  9175  06F3  0860               	movf	PS_2_Update@temp^(0+640),w
  9176  06F4  3A73               	xorlw	115
  9177  06F5  1903               	skipnz
  9178  06F6  2EFB               	goto	l6824
  9179  06F7  0860               	movf	PS_2_Update@temp^(0+640),w
  9180  06F8  3A53               	xorlw	83
  9181  06F9  1D03               	skipz
  9182  06FA  2F09               	goto	l6828
  9183  06FB                     l6824:	
  9184                           
  9185                           ;PS_2.c: 739: {
  9186                           ;PS_2.c: 740: ParityTyped = 4;
  9187  06FB  3004               	movlw	4
  9188  06FC  0023               	movlb	3	; select bank3
  9189  06FD  00AF               	movwf	??_PS_2_Update^(0+384)
  9190  06FE  082F               	movf	??_PS_2_Update^(0+384),w
  9191  06FF  00AB               	movwf	_ParityTyped^(0+384)
  9192                           
  9193                           ;PS_2.c: 741: UARTchar(temp, 0, 0);
  9194  0700  0020               	movlb	0	; select bank0
  9195  0701  01AD               	clrf	UARTchar@NinethBit_override
  9196  0702  01AE               	clrf	UARTchar@NinethBit_override_data
  9197  0703  0025               	movlb	5	; select bank5
  9198  0704  0860               	movf	PS_2_Update@temp^(0+640),w
  9199  0705  319D  253A  3181   	fcall	_UARTchar
  9200  0708  2FC5               	goto	l746
  9201  0709                     l6828:	
  9202                           ;PS_2.c: 742: }
  9203                           
  9204                           
  9205                           ;PS_2.c: 743: else if(temp == '\r')
  9206  0709  0025               	movlb	5	; select bank5
  9207  070A  0860               	movf	PS_2_Update@temp^(0+640),w
  9208  070B  3A0D               	xorlw	13
  9209  070C  1D03               	skipz
  9210  070D  2FC6               	goto	l6868
  9211                           
  9212                           ;PS_2.c: 744: {
  9213                           ;PS_2.c: 745: UARTstringWAIT("\r\n");
  9214  070E  3052               	movlw	low ((STR_11+17)| (0+32768))
  9215  070F  0020               	movlb	0	; select bank0
  9216  0710  00B4               	movwf	UARTstringWAIT@data
  9217  0711  308B               	movlw	high ((STR_11+17)| (0+32768))
  9218  0712  00B5               	movwf	UARTstringWAIT@data+1
  9219  0713  319B  23C2  3181   	fcall	_UARTstringWAIT
  9220                           
  9221                           ;PS_2.c: 746: delayUS(10000);
  9222  0716  3000               	movlw	0
  9223  0717  0020               	movlb	0	; select bank0
  9224  0718  00A8               	movwf	delayUS@US+3
  9225  0719  3000               	movlw	0
  9226  071A  00A7               	movwf	delayUS@US+2
  9227  071B  3027               	movlw	39
  9228  071C  00A6               	movwf	delayUS@US+1
  9229  071D  3010               	movlw	16
  9230  071E  00A5               	movwf	delayUS@US
  9231  071F  319B  23F5  3181   	fcall	_delayUS
  9232                           
  9233                           ;PS_2.c: 747: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9234  0722  3000               	movlw	0
  9235  0723  0022               	movlb	2	; select bank2
  9236  0724  0262               	subwf	(_BaudTyped+3)^(0+256),w
  9237  0725  1D03               	skipz
  9238  0726  2F31               	goto	u9555
  9239  0727  3000               	movlw	0
  9240  0728  0261               	subwf	(_BaudTyped+2)^(0+256),w
  9241  0729  1D03               	skipz
  9242  072A  2F31               	goto	u9555
  9243  072B  3009               	movlw	9
  9244  072C  0260               	subwf	(_BaudTyped+1)^(0+256),w
  9245  072D  1D03               	skipz
  9246  072E  2F31               	goto	u9555
  9247  072F  3060               	movlw	96
  9248  0730  025F               	subwf	_BaudTyped^(0+256),w
  9249  0731                     u9555:	
  9250  0731  1C03               	skipc
  9251  0732  2FAF               	goto	l6862
  9252  0733  3000               	movlw	0
  9253  0734  0262               	subwf	(_BaudTyped+3)^(0+256),w
  9254  0735  1D03               	skipz
  9255  0736  2F41               	goto	u9565
  9256  0737  3001               	movlw	1
  9257  0738  0261               	subwf	(_BaudTyped+2)^(0+256),w
  9258  0739  1D03               	skipz
  9259  073A  2F41               	goto	u9565
  9260  073B  30C2               	movlw	194
  9261  073C  0260               	subwf	(_BaudTyped+1)^(0+256),w
  9262  073D  1D03               	skipz
  9263  073E  2F41               	goto	u9565
  9264  073F  3001               	movlw	1
  9265  0740  025F               	subwf	_BaudTyped^(0+256),w
  9266  0741                     u9565:	
  9267  0741  1803               	skipnc
  9268  0742  2FAF               	goto	l6862
  9269                           
  9270                           ;PS_2.c: 748: {
  9271                           ;PS_2.c: 749: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
  9272  0743  30A0               	movlw	low PS_2_Update@buf
  9273  0744  0020               	movlb	0	; select bank0
  9274  0745  00BD               	movwf	sprintf@sp
  9275  0746  3002               	movlw	high PS_2_Update@buf
  9276  0747  00BE               	movwf	sprintf@sp+1
  9277  0748  304A               	movlw	low (STR_31| (0+32768))
  9278  0749  00BF               	movwf	sprintf@f
  9279  074A  308A               	movlw	high (STR_31| (0+32768))
  9280  074B  00C0               	movwf	sprintf@f+1
  9281  074C  0022               	movlb	2	; select bank2
  9282  074D  0862               	movf	(_BaudTyped+3)^(0+256),w
  9283  074E  0020               	movlb	0	; select bank0
  9284  074F  00C4               	movwf	?_sprintf+7
  9285  0750  0022               	movlb	2	; select bank2
  9286  0751  0861               	movf	(_BaudTyped+2)^(0+256),w
  9287  0752  0020               	movlb	0	; select bank0
  9288  0753  00C3               	movwf	?_sprintf+6
  9289  0754  0022               	movlb	2	; select bank2
  9290  0755  0860               	movf	(_BaudTyped+1)^(0+256),w
  9291  0756  0020               	movlb	0	; select bank0
  9292  0757  00C2               	movwf	?_sprintf+5
  9293  0758  0022               	movlb	2	; select bank2
  9294  0759  085F               	movf	_BaudTyped^(0+256),w
  9295  075A  0020               	movlb	0	; select bank0
  9296  075B  00C1               	movwf	?_sprintf+4
  9297  075C  3194  249F  3181   	fcall	_sprintf
  9298                           
  9299                           ;PS_2.c: 750: UARTstringWAIT(buf);
  9300  075F  30A0               	movlw	low PS_2_Update@buf
  9301  0760  0020               	movlb	0	; select bank0
  9302  0761  00B4               	movwf	UARTstringWAIT@data
  9303  0762  3002               	movlw	high PS_2_Update@buf
  9304  0763  00B5               	movwf	UARTstringWAIT@data+1
  9305  0764  319B  23C2  3181   	fcall	_UARTstringWAIT
  9306                           
  9307                           ;PS_2.c: 751: if(ParityTyped)
  9308  0767  0023               	movlb	3	; select bank3
  9309  0768  082B               	movf	_ParityTyped^(0+384),w
  9310  0769  1903               	btfsc	3,2
  9311  076A  2F8D               	goto	l6858
  9312                           
  9313                           ;PS_2.c: 752: {
  9314                           ;PS_2.c: 753: switch (ParityTyped)
  9315  076B  2F80               	goto	l6856
  9316  076C                     l6846:	
  9317                           ;PS_2.c: 754: {
  9318                           ;PS_2.c: 755: case 1:
  9319                           
  9320                           
  9321                           ;PS_2.c: 756: UARTstringWAIT(" with Odd parity bit\r\n");
  9322  076C  30EA               	movlw	low (STR_14| (0+32768))
  9323  076D  0020               	movlb	0	; select bank0
  9324  076E  00B4               	movwf	UARTstringWAIT@data
  9325  076F  308A               	movlw	high (STR_14| (0+32768))
  9326  0770  2F91               	goto	L14
  9327  0771                     l6848:	
  9328                           ;PS_2.c: 758: case 2:
  9329                           
  9330                           ;PS_2.c: 757: break;
  9331                           
  9332                           
  9333                           ;PS_2.c: 759: UARTstringWAIT(" with Even parity bit\r\n");
  9334  0771  30BA               	movlw	low (STR_15| (0+32768))
  9335  0772  0020               	movlb	0	; select bank0
  9336  0773  00B4               	movwf	UARTstringWAIT@data
  9337  0774  308A               	movlw	high (STR_15| (0+32768))
  9338  0775  2F91               	goto	L14
  9339  0776                     l6850:	
  9340                           ;PS_2.c: 761: case 3:
  9341                           
  9342                           ;PS_2.c: 760: break;
  9343                           
  9344                           
  9345                           ;PS_2.c: 762: UARTstringWAIT(" with Mark bit\r\n");
  9346  0776  309F               	movlw	low (STR_16| (0+32768))
  9347  0777  0020               	movlb	0	; select bank0
  9348  0778  00B4               	movwf	UARTstringWAIT@data
  9349  0779  308B               	movlw	high (STR_16| (0+32768))
  9350  077A  2F91               	goto	L14
  9351  077B                     l6852:	
  9352                           ;PS_2.c: 764: default:
  9353                           
  9354                           ;PS_2.c: 763: break;
  9355                           
  9356                           
  9357                           ;PS_2.c: 765: UARTstringWAIT(" with Space bit\r\n");
  9358  077B  308D               	movlw	low (STR_17| (0+32768))
  9359  077C  0020               	movlb	0	; select bank0
  9360  077D  00B4               	movwf	UARTstringWAIT@data
  9361  077E  308B               	movlw	high (STR_17| (0+32768))
  9362  077F  2F91               	goto	L14
  9363  0780                     l6856:	
  9364                           ;PS_2.c: 767: }
  9365                           
  9366                           ;PS_2.c: 766: break;
  9367                           
  9368  0780  0023               	movlb	3	; select bank3
  9369  0781  082B               	movf	_ParityTyped^(0+384),w
  9370                           
  9371                           ; Switch size 1, requested type "space"
  9372                           ; Number of cases is 3, Range of values is 1 to 3
  9373                           ; switch strategies available:
  9374                           ; Name         Instructions Cycles
  9375                           ; simple_byte           10     6 (average)
  9376                           ; direct_byte           15     9 (fixed)
  9377                           ; jumptable            263     9 (fixed)
  9378                           ;	Chosen strategy is simple_byte
  9379  0782  3A01               	xorlw	1	; case 1
  9380  0783  1903               	skipnz
  9381  0784  2F6C               	goto	l6846
  9382  0785  3A03               	xorlw	3	; case 2
  9383  0786  1903               	skipnz
  9384  0787  2F71               	goto	l6848
  9385  0788  3A01               	xorlw	1	; case 3
  9386  0789  1903               	skipnz
  9387  078A  2F76               	goto	l6850
  9388  078B  2F7B               	goto	l6852
  9389                           
  9390                           ;PS_2.c: 768: }
  9391  078C  2F95               	goto	l6860
  9392  078D                     l6858:	
  9393                           
  9394                           ;PS_2.c: 769: else
  9395                           ;PS_2.c: 770: {
  9396                           ;PS_2.c: 771: UARTstringWAIT(" with no parity bit\r\n");
  9397  078D  3011               	movlw	low ((STR_29+22)| (0+32768))
  9398  078E  0020               	movlb	0	; select bank0
  9399  078F  00B4               	movwf	UARTstringWAIT@data
  9400  0790  308A               	movlw	high ((STR_29+22)| (0+32768))
  9401  0791                     L14:	
  9402  0791  00B5               	movwf	UARTstringWAIT@data+1
  9403  0792  319B  23C2  3181   	fcall	_UARTstringWAIT
  9404  0795                     l6860:	
  9405                           
  9406                           ;PS_2.c: 772: }
  9407                           ;PS_2.c: 773: SetBaud(BaudTyped, ParityTyped);
  9408  0795  0022               	movlb	2	; select bank2
  9409  0796  0862               	movf	(_BaudTyped+3)^(0+256),w
  9410  0797  0020               	movlb	0	; select bank0
  9411  0798  00D7               	movwf	SetBaud@Baud+3
  9412  0799  0022               	movlb	2	; select bank2
  9413  079A  0861               	movf	(_BaudTyped+2)^(0+256),w
  9414  079B  0020               	movlb	0	; select bank0
  9415  079C  00D6               	movwf	SetBaud@Baud+2
  9416  079D  0022               	movlb	2	; select bank2
  9417  079E  0860               	movf	(_BaudTyped+1)^(0+256),w
  9418  079F  0020               	movlb	0	; select bank0
  9419  07A0  00D5               	movwf	SetBaud@Baud+1
  9420  07A1  0022               	movlb	2	; select bank2
  9421  07A2  085F               	movf	_BaudTyped^(0+256),w
  9422  07A3  0020               	movlb	0	; select bank0
  9423  07A4  00D4               	movwf	SetBaud@Baud
  9424  07A5  0023               	movlb	3	; select bank3
  9425  07A6  082B               	movf	_ParityTyped^(0+384),w
  9426  07A7  00AF               	movwf	??_PS_2_Update^(0+384)
  9427  07A8  082F               	movf	??_PS_2_Update^(0+384),w
  9428  07A9  0020               	movlb	0	; select bank0
  9429  07AA  00D8               	movwf	SetBaud@Parity
  9430  07AB  3196  269B  3181   	fcall	_SetBaud
  9431                           
  9432                           ;PS_2.c: 774: }
  9433  07AE  2FC3               	goto	l6866
  9434  07AF                     l6862:	
  9435                           
  9436                           ;PS_2.c: 775: else
  9437                           ;PS_2.c: 776: {
  9438                           ;PS_2.c: 777: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
  9439  07AF  306B               	movlw	low (STR_37| (0+32768))
  9440  07B0  0020               	movlb	0	; select bank0
  9441  07B1  00B4               	movwf	UARTstringWAIT@data
  9442  07B2  308A               	movlw	high (STR_37| (0+32768))
  9443  07B3  00B5               	movwf	UARTstringWAIT@data+1
  9444  07B4  319B  23C2  3181   	fcall	_UARTstringWAIT
  9445                           
  9446                           ;PS_2.c: 778: delayUS(10000);
  9447  07B7  3000               	movlw	0
  9448  07B8  0020               	movlb	0	; select bank0
  9449  07B9  00A8               	movwf	delayUS@US+3
  9450  07BA  3000               	movlw	0
  9451  07BB  00A7               	movwf	delayUS@US+2
  9452  07BC  3027               	movlw	39
  9453  07BD  00A6               	movwf	delayUS@US+1
  9454  07BE  3010               	movlw	16
  9455  07BF  00A5               	movwf	delayUS@US
  9456  07C0  319B  23F5  3181   	fcall	_delayUS
  9457  07C3                     l6866:	
  9458                           
  9459                           ;PS_2.c: 779: }
  9460                           ;PS_2.c: 780: BAUDMODE=0;
  9461  07C3  0022               	movlb	2	; select bank2
  9462  07C4  01E3               	clrf	_BAUDMODE^(0+256)
  9463  07C5                     l746:	
  9464  07C5  0025               	movlb	5	; select bank5
  9465  07C6                     l6868:	
  9466                           
  9467                           ;PS_2.c: 781: }
  9468                           ;PS_2.c: 782: }
  9469                           ;PS_2.c: 783: }
  9470                           ;PS_2.c: 784: }
  9471                           ;PS_2.c: 785: PS_2_Read_Data_First =0;
  9472  07C6  0023               	movlb	3	; select bank3
  9473  07C7  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  9474  07C8  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9475                           
  9476                           ;PS_2.c: 786: PS_2_Read_Data_Second =0;
  9477  07C9  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  9478  07CA  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9479                           
  9480                           ;PS_2.c: 787: PS_2_Read_Data_Third =0;
  9481  07CB  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  9482  07CC  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9483                           
  9484                           ;PS_2.c: 788: PS_2_Read_Data_Forth =0;
  9485  07CD  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9486  07CE  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9487                           
  9488                           ;PS_2.c: 789: PS_2_Read_Data_FirstTEMP =0;
  9489  07CF  0024               	movlb	4	; select bank4
  9490  07D0  01A0               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9491  07D1  01A1               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9492                           
  9493                           ;PS_2.c: 790: PS_2_Read_Data_SecondTEMP =0;
  9494  07D2  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9495  07D3  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9496                           
  9497                           ;PS_2.c: 791: PS_2_Read_Data_ThirdTEMP =0;
  9498  07D4  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9499  07D5  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9500                           
  9501                           ;PS_2.c: 792: PS_2_Read_Data_ForthTEMP =0;
  9502  07D6  01A2               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9503  07D7  01A3               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9504                           
  9505                           ;PS_2.c: 793: Caps_Lock_Key_old = Caps_Lock_Key;
  9506  07D8  0022               	movlb	2	; select bank2
  9507  07D9  0864               	movf	_Caps_Lock_Key^(0+256),w
  9508  07DA  0023               	movlb	3	; select bank3
  9509  07DB  00AF               	movwf	??_PS_2_Update^(0+384)
  9510  07DC  082F               	movf	??_PS_2_Update^(0+384),w
  9511  07DD  0022               	movlb	2	; select bank2
  9512  07DE  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9513                           
  9514                           ;PS_2.c: 794: Right_Shift_Key_old = Right_Shift_Key;
  9515  07DF  0023               	movlb	3	; select bank3
  9516  07E0  082D               	movf	_Right_Shift_Key^(0+384),w
  9517  07E1  00AF               	movwf	??_PS_2_Update^(0+384)
  9518  07E2  082F               	movf	??_PS_2_Update^(0+384),w
  9519  07E3  0022               	movlb	2	; select bank2
  9520  07E4  00EB               	movwf	_Right_Shift_Key_old^(0+256)
  9521                           
  9522                           ;PS_2.c: 795: Left_Shift_Key_old = Left_Shift_Key;
  9523  07E5  0023               	movlb	3	; select bank3
  9524  07E6  082A               	movf	_Left_Shift_Key^(0+384),w
  9525  07E7  00AF               	movwf	??_PS_2_Update^(0+384)
  9526  07E8  082F               	movf	??_PS_2_Update^(0+384),w
  9527  07E9  0022               	movlb	2	; select bank2
  9528  07EA  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9529                           
  9530                           ;PS_2.c: 796: LATC &= ~0b00010000;
  9531  07EB  30EF               	movlw	239
  9532  07EC  0023               	movlb	3	; select bank3
  9533  07ED  00AF               	movwf	??_PS_2_Update^(0+384)
  9534  07EE  082F               	movf	??_PS_2_Update^(0+384),w
  9535  07EF  0022               	movlb	2	; select bank2
  9536  07F0  058E               	andwf	14,f	;volatile
  9537                           
  9538                           ;PS_2.c: 797: PIE1bits.RCIE = 1;
  9539  07F1  0021               	movlb	1	; select bank1
  9540  07F2  1691               	bsf	17,5	;volatile
  9541                           
  9542                           ;PS_2.c: 798: PS_2_ENABLE_INTERRUPT(0b00100000);
  9543  07F3  3020               	movlw	32
  9544  07F4  3199  21E0         	fcall	_PS_2_ENABLE_INTERRUPT
  9545  07F6  0020               	movlb	0	; select bank0
  9546  07F7  0008               	return
  9547  07F8                     __end_of_PS_2_Update:	
  9548                           
  9549                           	psect	text13
  9550  1ACB                     __ptext13:	
  9551 ;; *************** function ___lmul *****************
  9552 ;; Defined at:
  9553 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9556 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;  product         4   13[BANK0 ] unsigned long 
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  4    5[BANK0 ] unsigned long 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9568 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;Total ram usage:       12 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    3
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_PS_2_Update
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function ___lmul
  9584  1ACB                     ___lmul:	
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9588  1ACB  3000               	movlw	0
  9589  1ACC  0020               	movlb	0	; select bank0
  9590  1ACD  00B0               	movwf	___lmul@product+3
  9591  1ACE  3000               	movlw	0
  9592  1ACF  00AF               	movwf	___lmul@product+2
  9593  1AD0  3000               	movlw	0
  9594  1AD1  00AE               	movwf	___lmul@product+1
  9595  1AD2  3000               	movlw	0
  9596  1AD3  00AD               	movwf	___lmul@product
  9597  1AD4                     l6316:	
  9598  1AD4  1C25               	btfss	___lmul@multiplier,0
  9599  1AD5  2ADE               	goto	l6320
  9600  1AD6  0829               	movf	___lmul@multiplicand,w
  9601  1AD7  07AD               	addwf	___lmul@product,f
  9602  1AD8  082A               	movf	___lmul@multiplicand+1,w
  9603  1AD9  3DAE               	addwfc	___lmul@product+1,f
  9604  1ADA  082B               	movf	___lmul@multiplicand+2,w
  9605  1ADB  3DAF               	addwfc	___lmul@product+2,f
  9606  1ADC  082C               	movf	___lmul@multiplicand+3,w
  9607  1ADD  3DB0               	addwfc	___lmul@product+3,f
  9608  1ADE                     l6320:	
  9609  1ADE  3001               	movlw	1
  9610  1ADF                     u8185:	
  9611  1ADF  35A9               	lslf	___lmul@multiplicand,f
  9612  1AE0  0DAA               	rlf	___lmul@multiplicand+1,f
  9613  1AE1  0DAB               	rlf	___lmul@multiplicand+2,f
  9614  1AE2  0DAC               	rlf	___lmul@multiplicand+3,f
  9615  1AE3  0B89               	decfsz	9,f
  9616  1AE4  2ADF               	goto	u8185
  9617  1AE5  3001               	movlw	1
  9618  1AE6                     u8195:	
  9619  1AE6  36A8               	lsrf	___lmul@multiplier+3,f
  9620  1AE7  0CA7               	rrf	___lmul@multiplier+2,f
  9621  1AE8  0CA6               	rrf	___lmul@multiplier+1,f
  9622  1AE9  0CA5               	rrf	___lmul@multiplier,f
  9623  1AEA  0B89               	decfsz	9,f
  9624  1AEB  2AE6               	goto	u8195
  9625  1AEC  0828               	movf	___lmul@multiplier+3,w
  9626  1AED  0427               	iorwf	___lmul@multiplier+2,w
  9627  1AEE  0426               	iorwf	___lmul@multiplier+1,w
  9628  1AEF  0425               	iorwf	___lmul@multiplier,w
  9629  1AF0  1D03               	skipz
  9630  1AF1  2AD4               	goto	l6316
  9631  1AF2  0830               	movf	___lmul@product+3,w
  9632  1AF3  00A8               	movwf	?___lmul+3
  9633  1AF4  082F               	movf	___lmul@product+2,w
  9634  1AF5  00A7               	movwf	?___lmul+2
  9635  1AF6  082E               	movf	___lmul@product+1,w
  9636  1AF7  00A6               	movwf	?___lmul+1
  9637  1AF8  082D               	movf	___lmul@product,w
  9638  1AF9  00A5               	movwf	?___lmul
  9639  1AFA  0008               	return
  9640  1AFB                     __end_of___lmul:	
  9641                           
  9642                           	psect	text14
  9643  1A74                     __ptext14:	
  9644 ;; *************** function _UART_send_break_timed *****************
  9645 ;; Defined at:
  9646 ;;		line 313 in file "UART.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  US              2   15[BANK0 ] unsigned int 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;		None               void
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        3 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    4
  9667 ;; This function calls:
  9668 ;;		_delayUS
  9669 ;; This function is called by:
  9670 ;;		_PS_2_Update
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _UART_send_break_timed
  9676  1A74                     _UART_send_break_timed:	
  9677                           
  9678                           ;UART.c: 316: LATC |= 0b00000100;
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
  9682  1A74  0022               	movlb	2	; select bank2
  9683  1A75  150E               	bsf	14,2	;volatile
  9684                           
  9685                           ;UART.c: 317: PPSLOCK =0;
  9686  1A76  003C               	movlb	28	; select bank28
  9687  1A77  018F               	clrf	15	;volatile
  9688                           
  9689                           ;UART.c: 318: RC2PPS = 0b00000000;
  9690  1A78  003D               	movlb	29	; select bank29
  9691  1A79  01A2               	clrf	34	;volatile
  9692                           
  9693                           ;UART.c: 319: PPSLOCK =1;
  9694  1A7A  3001               	movlw	1
  9695  1A7B  003C               	movlb	28	; select bank28
  9696  1A7C  008F               	movwf	15	;volatile
  9697                           
  9698                           ;UART.c: 321: LATC &= ~0b00000100;
  9699  1A7D  30FB               	movlw	251
  9700  1A7E  0020               	movlb	0	; select bank0
  9701  1A7F  00B1               	movwf	??_UART_send_break_timed
  9702  1A80  0831               	movf	??_UART_send_break_timed,w
  9703  1A81  0022               	movlb	2	; select bank2
  9704  1A82  058E               	andwf	14,f	;volatile
  9705                           
  9706                           ;UART.c: 322: delayUS(US);
  9707  1A83  0020               	movlb	0	; select bank0
  9708  1A84  082F               	movf	UART_send_break_timed@US,w
  9709  1A85  00A5               	movwf	delayUS@US
  9710  1A86  0830               	movf	UART_send_break_timed@US+1,w
  9711  1A87  00A6               	movwf	delayUS@US+1
  9712  1A88  01A7               	clrf	delayUS@US+2
  9713  1A89  01A8               	clrf	delayUS@US+3
  9714  1A8A  319B  23F5         	fcall	_delayUS
  9715                           
  9716                           ;UART.c: 323: LATC |= 0b00000100;
  9717  1A8C  0022               	movlb	2	; select bank2
  9718  1A8D  150E               	bsf	14,2	;volatile
  9719                           
  9720                           ;UART.c: 325: PPSLOCK =0;
  9721  1A8E  003C               	movlb	28	; select bank28
  9722  1A8F  018F               	clrf	15	;volatile
  9723                           
  9724                           ;UART.c: 326: RC2PPS = 0b00010100;
  9725  1A90  3014               	movlw	20
  9726  1A91  003D               	movlb	29	; select bank29
  9727  1A92  00A2               	movwf	34	;volatile
  9728                           
  9729                           ;UART.c: 327: CKPPS = 0b00010010;
  9730  1A93  3012               	movlw	18
  9731  1A94  003C               	movlb	28	; select bank28
  9732  1A95  00A5               	movwf	37	;volatile
  9733                           
  9734                           ;UART.c: 328: RXPPS = 0b00010101;
  9735  1A96  3015               	movlw	21
  9736  1A97  00A4               	movwf	36	;volatile
  9737                           
  9738                           ;UART.c: 329: PPSLOCK =1;
  9739  1A98  3001               	movlw	1
  9740  1A99  008F               	movwf	15	;volatile
  9741  1A9A  0008               	return
  9742  1A9B                     __end_of_UART_send_break_timed:	
  9743                           
  9744                           	psect	text15
  9745  169B                     __ptext15:	
  9746 ;; *************** function _SetBaud *****************
  9747 ;; Defined at:
  9748 ;;		line 357 in file "UART.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;  Baud            4   52[BANK0 ] unsigned long 
  9751 ;;  Parity          1   56[BANK0 ] unsigned char 
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9754 ;;  temp            4   58[BANK2 ] unsigned long 
  9755 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9756 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9757 ;;  i               1   62[BANK2 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9767 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;Total ram usage:       76 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    7
  9774 ;; This function calls:
  9775 ;;		_InitUART
  9776 ;;		_ReadBaud
  9777 ;;		_UARTstringWAIT
  9778 ;;		_WriteBaud
  9779 ;;		_delayUS
  9780 ;;		_sprintf
  9781 ;; This function is called by:
  9782 ;;		_PS_2_Update
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           
  9787                           ;psect for function _SetBaud
  9788  169B                     _SetBaud:	
  9789                           
  9790                           ;UART.c: 359: unsigned char buf[50];
  9791                           ;UART.c: 360: unsigned long Baudtemp=0;
  9792                           
  9793                           ;incstack = 0
  9794                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9795  169B  3000               	movlw	0
  9796  169C  0022               	movlb	2	; select bank2
  9797  169D  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9798  169E  3000               	movlw	0
  9799  169F  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9800  16A0  3000               	movlw	0
  9801  16A1  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9802  16A2  3000               	movlw	0
  9803  16A3  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9804                           
  9805                           ;UART.c: 361: unsigned long Paritytemp=0;
  9806  16A4  3000               	movlw	0
  9807  16A5  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9808  16A6  3000               	movlw	0
  9809  16A7  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9810  16A8  3000               	movlw	0
  9811  16A9  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9812  16AA  3000               	movlw	0
  9813  16AB  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9814                           
  9815                           ;UART.c: 362: unsigned long temp;
  9816                           ;UART.c: 363: unsigned char i =0;
  9817  16AC  01DE               	clrf	SetBaud@i^(0+256)
  9818                           
  9819                           ;UART.c: 365: WriteBaud((0x1800 >> 5), Baud, Parity);
  9820  16AD  30C0               	movlw	192
  9821  16AE  0020               	movlb	0	; select bank0
  9822  16AF  00B6               	movwf	WriteBaud@row
  9823  16B0  3000               	movlw	0
  9824  16B1  00B7               	movwf	WriteBaud@row+1
  9825  16B2  0857               	movf	SetBaud@Baud+3,w
  9826  16B3  00BB               	movwf	WriteBaud@Baud+3
  9827  16B4  0856               	movf	SetBaud@Baud+2,w
  9828  16B5  00BA               	movwf	WriteBaud@Baud+2
  9829  16B6  0855               	movf	SetBaud@Baud+1,w
  9830  16B7  00B9               	movwf	WriteBaud@Baud+1
  9831  16B8  0854               	movf	SetBaud@Baud,w
  9832  16B9  00B8               	movwf	WriteBaud@Baud
  9833  16BA  0858               	movf	SetBaud@Parity,w
  9834  16BB  00D9               	movwf	??_SetBaud
  9835  16BC  0859               	movf	??_SetBaud,w
  9836  16BD  00BC               	movwf	WriteBaud@Parity
  9837  16BE  319E  26D8  3196   	fcall	_WriteBaud
  9838                           
  9839                           ;UART.c: 366: temp = ReadBaud((0x1800 >> 5), 0);
  9840  16C1  30C0               	movlw	192
  9841  16C2  0020               	movlb	0	; select bank0
  9842  16C3  00B7               	movwf	ReadBaud@row
  9843  16C4  3000               	movlw	0
  9844  16C5  00B8               	movwf	ReadBaud@row+1
  9845  16C6  01B9               	clrf	ReadBaud@column
  9846  16C7  319F  2736  3196   	fcall	_ReadBaud
  9847  16CA  0020               	movlb	0	; select bank0
  9848  16CB  083A               	movf	?_ReadBaud+3,w
  9849  16CC  0022               	movlb	2	; select bank2
  9850  16CD  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9851  16CE  0020               	movlb	0	; select bank0
  9852  16CF  0839               	movf	?_ReadBaud+2,w
  9853  16D0  0022               	movlb	2	; select bank2
  9854  16D1  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9855  16D2  0020               	movlb	0	; select bank0
  9856  16D3  0838               	movf	?_ReadBaud+1,w
  9857  16D4  0022               	movlb	2	; select bank2
  9858  16D5  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9859  16D6  0020               	movlb	0	; select bank0
  9860  16D7  0837               	movf	?_ReadBaud,w
  9861  16D8  0022               	movlb	2	; select bank2
  9862  16D9  00DA               	movwf	SetBaud@temp^(0+256)
  9863                           
  9864                           ;UART.c: 367: Baudtemp = temp & 0x000FFFFF;
  9865  16DA  30FF               	movlw	255
  9866  16DB  055A               	andwf	SetBaud@temp^(0+256),w
  9867  16DC  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9868  16DD  30FF               	movlw	255
  9869  16DE  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9870  16DF  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9871  16E0  300F               	movlw	15
  9872  16E1  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9873  16E2  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9874  16E3  3000               	movlw	0
  9875  16E4  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9876  16E5  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9877                           
  9878                           ;UART.c: 368: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9879  16E6  085A               	movf	SetBaud@temp^(0+256),w
  9880  16E7  0020               	movlb	0	; select bank0
  9881  16E8  00D9               	movwf	??_SetBaud
  9882  16E9  0022               	movlb	2	; select bank2
  9883  16EA  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9884  16EB  0020               	movlb	0	; select bank0
  9885  16EC  00DA               	movwf	??_SetBaud+1
  9886  16ED  0022               	movlb	2	; select bank2
  9887  16EE  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9888  16EF  0020               	movlb	0	; select bank0
  9889  16F0  00DB               	movwf	??_SetBaud+2
  9890  16F1  0022               	movlb	2	; select bank2
  9891  16F2  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9892  16F3  0020               	movlb	0	; select bank0
  9893  16F4  00DC               	movwf	??_SetBaud+3
  9894  16F5  3014               	movlw	20
  9895  16F6                     u7855:	
  9896  16F6  36DC               	lsrf	??_SetBaud+3,f
  9897  16F7  0CDB               	rrf	??_SetBaud+2,f
  9898  16F8  0CDA               	rrf	??_SetBaud+1,f
  9899  16F9  0CD9               	rrf	??_SetBaud,f
  9900  16FA  0B89               	decfsz	9,f
  9901  16FB  2EF6               	goto	u7855
  9902  16FC  0859               	movf	??_SetBaud,w
  9903  16FD  390F               	andlw	15
  9904  16FE  00DD               	movwf	??_SetBaud+4
  9905  16FF  01DE               	clrf	??_SetBaud+5
  9906  1700  01DF               	clrf	??_SetBaud+6
  9907  1701  01E0               	clrf	??_SetBaud+7
  9908  1702  0860               	movf	??_SetBaud+7,w
  9909  1703  0022               	movlb	2	; select bank2
  9910  1704  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9911  1705  0020               	movlb	0	; select bank0
  9912  1706  085F               	movf	??_SetBaud+6,w
  9913  1707  0022               	movlb	2	; select bank2
  9914  1708  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9915  1709  0020               	movlb	0	; select bank0
  9916  170A  085E               	movf	??_SetBaud+5,w
  9917  170B  0022               	movlb	2	; select bank2
  9918  170C  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9919  170D  0020               	movlb	0	; select bank0
  9920  170E  085D               	movf	??_SetBaud+4,w
  9921  170F  0022               	movlb	2	; select bank2
  9922  1710  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9923                           
  9924                           ;UART.c: 370: InitUART(Baud, Parity);
  9925  1711  0020               	movlb	0	; select bank0
  9926  1712  0857               	movf	SetBaud@Baud+3,w
  9927  1713  00B6               	movwf	InitUART@Baud+3
  9928  1714  0856               	movf	SetBaud@Baud+2,w
  9929  1715  00B5               	movwf	InitUART@Baud+2
  9930  1716  0855               	movf	SetBaud@Baud+1,w
  9931  1717  00B4               	movwf	InitUART@Baud+1
  9932  1718  0854               	movf	SetBaud@Baud,w
  9933  1719  00B3               	movwf	InitUART@Baud
  9934  171A  0858               	movf	SetBaud@Parity,w
  9935  171B  00D9               	movwf	??_SetBaud
  9936  171C  0859               	movf	??_SetBaud,w
  9937  171D  00B7               	movwf	InitUART@parity
  9938  171E  3191  21CA  3196   	fcall	_InitUART
  9939                           
  9940                           ;UART.c: 371: UARTstringWAIT("\r\n");
  9941  1721  3052               	movlw	low ((STR_11+17)| (0+32768))
  9942  1722  0020               	movlb	0	; select bank0
  9943  1723  00B4               	movwf	UARTstringWAIT@data
  9944  1724  308B               	movlw	high ((STR_11+17)| (0+32768))
  9945  1725  00B5               	movwf	UARTstringWAIT@data+1
  9946  1726  319B  23C2  3196   	fcall	_UARTstringWAIT
  9947                           
  9948                           ;UART.c: 372: delayUS(10000);
  9949  1729  3000               	movlw	0
  9950  172A  0020               	movlb	0	; select bank0
  9951  172B  00A8               	movwf	delayUS@US+3
  9952  172C  3000               	movlw	0
  9953  172D  00A7               	movwf	delayUS@US+2
  9954  172E  3027               	movlw	39
  9955  172F  00A6               	movwf	delayUS@US+1
  9956  1730  3010               	movlw	16
  9957  1731  00A5               	movwf	delayUS@US
  9958  1732  319B  23F5  3196   	fcall	_delayUS
  9959                           
  9960                           ;UART.c: 373: if((Baud != Baudtemp) || (Parity != Paritytemp))
  9961  1735  0022               	movlb	2	; select bank2
  9962  1736  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
  9963  1737  0020               	movlb	0	; select bank0
  9964  1738  0657               	xorwf	SetBaud@Baud+3,w
  9965  1739  1D03               	skipz
  9966  173A  2F4B               	goto	u7865
  9967  173B  0022               	movlb	2	; select bank2
  9968  173C  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
  9969  173D  0020               	movlb	0	; select bank0
  9970  173E  0656               	xorwf	SetBaud@Baud+2,w
  9971  173F  1D03               	skipz
  9972  1740  2F4B               	goto	u7865
  9973  1741  0022               	movlb	2	; select bank2
  9974  1742  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
  9975  1743  0020               	movlb	0	; select bank0
  9976  1744  0655               	xorwf	SetBaud@Baud+1,w
  9977  1745  1D03               	skipz
  9978  1746  2F4B               	goto	u7865
  9979  1747  0022               	movlb	2	; select bank2
  9980  1748  0852               	movf	SetBaud@Baudtemp^(0+256),w
  9981  1749  0020               	movlb	0	; select bank0
  9982  174A  0654               	xorwf	SetBaud@Baud,w
  9983  174B                     u7865:	
  9984  174B  1D03               	skipz
  9985  174C  2F6A               	goto	l6074
  9986  174D  0858               	movf	SetBaud@Parity,w
  9987  174E  00D9               	movwf	??_SetBaud
  9988  174F  01DA               	clrf	??_SetBaud+1
  9989  1750  01DB               	clrf	??_SetBaud+2
  9990  1751  01DC               	clrf	??_SetBaud+3
  9991  1752  0022               	movlb	2	; select bank2
  9992  1753  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
  9993  1754  0020               	movlb	0	; select bank0
  9994  1755  065C               	xorwf	??_SetBaud+3,w
  9995  1756  1D03               	skipz
  9996  1757  2F68               	goto	u7875
  9997  1758  0022               	movlb	2	; select bank2
  9998  1759  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
  9999  175A  0020               	movlb	0	; select bank0
 10000  175B  065B               	xorwf	??_SetBaud+2,w
 10001  175C  1D03               	skipz
 10002  175D  2F68               	goto	u7875
 10003  175E  0022               	movlb	2	; select bank2
 10004  175F  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
 10005  1760  0020               	movlb	0	; select bank0
 10006  1761  065A               	xorwf	??_SetBaud+1,w
 10007  1762  1D03               	skipz
 10008  1763  2F68               	goto	u7875
 10009  1764  0022               	movlb	2	; select bank2
 10010  1765  0856               	movf	SetBaud@Paritytemp^(0+256),w
 10011  1766  0020               	movlb	0	; select bank0
 10012  1767  0659               	xorwf	??_SetBaud,w
 10013  1768                     u7875:	
 10014  1768  1903               	skipnz
 10015  1769  2F7D               	goto	l6078
 10016  176A                     l6074:	
 10017                           
 10018                           ;UART.c: 374: {
 10019                           ;UART.c: 375: UARTstringWAIT("KeyBoard Program Fail\r\n");
 10020  176A  30A2               	movlw	low (STR_20| (0+32768))
 10021  176B  00B4               	movwf	UARTstringWAIT@data
 10022  176C  308A               	movlw	high (STR_20| (0+32768))
 10023  176D  00B5               	movwf	UARTstringWAIT@data+1
 10024  176E  319B  23C2  3196   	fcall	_UARTstringWAIT
 10025                           
 10026                           ;UART.c: 376: delayUS(10000);
 10027  1771  3000               	movlw	0
 10028  1772  0020               	movlb	0	; select bank0
 10029  1773  00A8               	movwf	delayUS@US+3
 10030  1774  3000               	movlw	0
 10031  1775  00A7               	movwf	delayUS@US+2
 10032  1776  3027               	movlw	39
 10033  1777  00A6               	movwf	delayUS@US+1
 10034  1778  3010               	movlw	16
 10035  1779  00A5               	movwf	delayUS@US
 10036  177A  319B  23F5  3196   	fcall	_delayUS
 10037  177D                     l6078:	
 10038                           
 10039                           ;UART.c: 377: }
 10040                           ;UART.c: 380: for(i =0;i<10;i++)
 10041  177D  0022               	movlb	2	; select bank2
 10042  177E  01DE               	clrf	SetBaud@i^(0+256)
 10043  177F  300A               	movlw	10
 10044  1780  025E               	subwf	SetBaud@i^(0+256),w
 10045  1781  1803               	btfsc	3,0
 10046  1782  2FAC               	goto	l6092
 10047  1783                     l429:	
 10048                           
 10049                           ;UART.c: 381: {
 10050                           ;UART.c: 382: LATC |= 0b00010000;
 10051  1783  160E               	bsf	14,4	;volatile
 10052                           
 10053                           ;UART.c: 383: delayUS(10000);
 10054  1784  3000               	movlw	0
 10055  1785  0020               	movlb	0	; select bank0
 10056  1786  00A8               	movwf	delayUS@US+3
 10057  1787  3000               	movlw	0
 10058  1788  00A7               	movwf	delayUS@US+2
 10059  1789  3027               	movlw	39
 10060  178A  00A6               	movwf	delayUS@US+1
 10061  178B  3010               	movlw	16
 10062  178C  00A5               	movwf	delayUS@US
 10063  178D  319B  23F5  3196   	fcall	_delayUS
 10064                           
 10065                           ;UART.c: 384: LATC &= ~0b00010000;
 10066  1790  30EF               	movlw	239
 10067  1791  0020               	movlb	0	; select bank0
 10068  1792  00D9               	movwf	??_SetBaud
 10069  1793  0859               	movf	??_SetBaud,w
 10070  1794  0022               	movlb	2	; select bank2
 10071  1795  058E               	andwf	14,f	;volatile
 10072                           
 10073                           ;UART.c: 385: delayUS(10000);
 10074  1796  3000               	movlw	0
 10075  1797  0020               	movlb	0	; select bank0
 10076  1798  00A8               	movwf	delayUS@US+3
 10077  1799  3000               	movlw	0
 10078  179A  00A7               	movwf	delayUS@US+2
 10079  179B  3027               	movlw	39
 10080  179C  00A6               	movwf	delayUS@US+1
 10081  179D  3010               	movlw	16
 10082  179E  00A5               	movwf	delayUS@US
 10083  179F  319B  23F5  3196   	fcall	_delayUS
 10084  17A2  3001               	movlw	1
 10085  17A3  0020               	movlb	0	; select bank0
 10086  17A4  00D9               	movwf	??_SetBaud
 10087  17A5  0859               	movf	??_SetBaud,w
 10088  17A6  0022               	movlb	2	; select bank2
 10089  17A7  07DE               	addwf	SetBaud@i^(0+256),f
 10090  17A8  300A               	movlw	10
 10091  17A9  025E               	subwf	SetBaud@i^(0+256),w
 10092  17AA  1C03               	skipc
 10093  17AB  2F83               	goto	l429
 10094  17AC                     l6092:	
 10095                           
 10096                           ;UART.c: 386: }
 10097                           ;UART.c: 388: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 10098  17AC  3020               	movlw	low SetBaud@buf
 10099  17AD  0020               	movlb	0	; select bank0
 10100  17AE  00BD               	movwf	sprintf@sp
 10101  17AF  3001               	movlw	high SetBaud@buf
 10102  17B0  00BE               	movwf	sprintf@sp+1
 10103  17B1  3017               	movlw	low (STR_13| (0+32768))
 10104  17B2  00BF               	movwf	sprintf@f
 10105  17B3  308B               	movlw	high (STR_13| (0+32768))
 10106  17B4  00C0               	movwf	sprintf@f+1
 10107  17B5  0857               	movf	SetBaud@Baud+3,w
 10108  17B6  00C4               	movwf	?_sprintf+7
 10109  17B7  0856               	movf	SetBaud@Baud+2,w
 10110  17B8  00C3               	movwf	?_sprintf+6
 10111  17B9  0855               	movf	SetBaud@Baud+1,w
 10112  17BA  00C2               	movwf	?_sprintf+5
 10113  17BB  0854               	movf	SetBaud@Baud,w
 10114  17BC  00C1               	movwf	?_sprintf+4
 10115  17BD  3194  249F  3196   	fcall	_sprintf
 10116                           
 10117                           ;UART.c: 389: UARTstringWAIT(buf);
 10118  17C0  3020               	movlw	low SetBaud@buf
 10119  17C1  0020               	movlb	0	; select bank0
 10120  17C2  00B4               	movwf	UARTstringWAIT@data
 10121  17C3  3001               	movlw	high SetBaud@buf
 10122  17C4  00B5               	movwf	UARTstringWAIT@data+1
 10123  17C5  319B  23C2  3196   	fcall	_UARTstringWAIT
 10124                           
 10125                           ;UART.c: 390: if(Parity)
 10126  17C8  0020               	movlb	0	; select bank0
 10127  17C9  0858               	movf	SetBaud@Parity,w
 10128  17CA  1903               	btfsc	3,2
 10129  17CB  2FED               	goto	l6112
 10130                           
 10131                           ;UART.c: 391: {
 10132                           ;UART.c: 392: switch (Parity)
 10133  17CC  2FE0               	goto	l6110
 10134  17CD                     l6100:	
 10135                           ;UART.c: 393: {
 10136                           ;UART.c: 394: case 1:
 10137                           
 10138                           
 10139                           ;UART.c: 395: UARTstringWAIT(" with Odd parity bit\r\n");
 10140  17CD  30EA               	movlw	low (STR_14| (0+32768))
 10141  17CE  00B4               	movwf	UARTstringWAIT@data
 10142  17CF  308A               	movlw	high (STR_14| (0+32768))
 10143  17D0  2FF0               	goto	L15
 10144  17D1                     l6102:	
 10145                           ;UART.c: 397: case 2:
 10146                           
 10147                           ;UART.c: 396: break;
 10148                           
 10149                           
 10150                           ;UART.c: 398: UARTstringWAIT(" with Even parity bit\r\n");
 10151  17D1  30BA               	movlw	low (STR_15| (0+32768))
 10152  17D2  0020               	movlb	0	; select bank0
 10153  17D3  00B4               	movwf	UARTstringWAIT@data
 10154  17D4  308A               	movlw	high (STR_15| (0+32768))
 10155  17D5  2FF0               	goto	L15
 10156  17D6                     l6104:	
 10157                           ;UART.c: 400: case 3:
 10158                           
 10159                           ;UART.c: 399: break;
 10160                           
 10161                           
 10162                           ;UART.c: 401: UARTstringWAIT(" with Mark bit\r\n");
 10163  17D6  309F               	movlw	low (STR_16| (0+32768))
 10164  17D7  0020               	movlb	0	; select bank0
 10165  17D8  00B4               	movwf	UARTstringWAIT@data
 10166  17D9  308B               	movlw	high (STR_16| (0+32768))
 10167  17DA  2FF0               	goto	L15
 10168  17DB                     l6106:	
 10169                           ;UART.c: 403: default:
 10170                           
 10171                           ;UART.c: 402: break;
 10172                           
 10173                           
 10174                           ;UART.c: 404: UARTstringWAIT(" with Space bit\r\n");
 10175  17DB  308D               	movlw	low (STR_17| (0+32768))
 10176  17DC  0020               	movlb	0	; select bank0
 10177  17DD  00B4               	movwf	UARTstringWAIT@data
 10178  17DE  308B               	movlw	high (STR_17| (0+32768))
 10179  17DF  2FF0               	goto	L15
 10180  17E0                     l6110:	
 10181                           ;UART.c: 406: }
 10182                           
 10183                           ;UART.c: 405: break;
 10184                           
 10185  17E0  0020               	movlb	0	; select bank0
 10186  17E1  0858               	movf	SetBaud@Parity,w
 10187                           
 10188                           ; Switch size 1, requested type "space"
 10189                           ; Number of cases is 3, Range of values is 1 to 3
 10190                           ; switch strategies available:
 10191                           ; Name         Instructions Cycles
 10192                           ; simple_byte           10     6 (average)
 10193                           ; direct_byte           15     9 (fixed)
 10194                           ; jumptable            263     9 (fixed)
 10195                           ;	Chosen strategy is simple_byte
 10196  17E2  3A01               	xorlw	1	; case 1
 10197  17E3  1903               	skipnz
 10198  17E4  2FCD               	goto	l6100
 10199  17E5  3A03               	xorlw	3	; case 2
 10200  17E6  1903               	skipnz
 10201  17E7  2FD1               	goto	l6102
 10202  17E8  3A01               	xorlw	1	; case 3
 10203  17E9  1903               	skipnz
 10204  17EA  2FD6               	goto	l6104
 10205  17EB  2FDB               	goto	l6106
 10206                           
 10207                           ;UART.c: 407: }
 10208  17EC  2FF4               	goto	l6114
 10209  17ED                     l6112:	
 10210                           
 10211                           ;UART.c: 408: else
 10212                           ;UART.c: 409: {
 10213                           ;UART.c: 410: UARTstringWAIT(" with no parity bit\r\n");
 10214  17ED  3011               	movlw	low ((STR_29+22)| (0+32768))
 10215  17EE  00B4               	movwf	UARTstringWAIT@data
 10216  17EF  308A               	movlw	high ((STR_29+22)| (0+32768))
 10217  17F0                     L15:	
 10218  17F0  00B5               	movwf	UARTstringWAIT@data+1
 10219  17F1  319B  23C2  3196   	fcall	_UARTstringWAIT
 10220  17F4                     l6114:	
 10221                           
 10222                           ;UART.c: 411: }
 10223                           ;UART.c: 412: delayUS(10000);
 10224  17F4  3000               	movlw	0
 10225  17F5  0020               	movlb	0	; select bank0
 10226  17F6  00A8               	movwf	delayUS@US+3
 10227  17F7  3000               	movlw	0
 10228  17F8  00A7               	movwf	delayUS@US+2
 10229  17F9  3027               	movlw	39
 10230  17FA  00A6               	movwf	delayUS@US+1
 10231  17FB  3010               	movlw	16
 10232  17FC  00A5               	movwf	delayUS@US
 10233  17FD  319B  23F5         	fcall	_delayUS
 10234  17FF  0008               	return
 10235  1800                     __end_of_SetBaud:	
 10236                           
 10237                           	psect	text16
 10238  1ED8                     __ptext16:	
 10239 ;; *************** function _WriteBaud *****************
 10240 ;; Defined at:
 10241 ;;		line 171 in file "FLASH.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;  row             2   22[BANK0 ] unsigned int 
 10244 ;;  Baud            4   24[BANK0 ] unsigned long 
 10245 ;;  Parity          1   28[BANK0 ] unsigned char 
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;  temp            4   37[BANK0 ] unsigned long 
 10248 ;; Return value:  Size  Location     Type
 10249 ;;		None               void
 10250 ;; Registers used:
 10251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10257 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;Total ram usage:       19 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    6
 10264 ;; This function calls:
 10265 ;;		_WriteFlash_Sequential
 10266 ;; This function is called by:
 10267 ;;		_SetBaud
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _WriteBaud
 10273  1ED8                     _WriteBaud:	
 10274                           
 10275                           ;FLASH.c: 173: unsigned long temp;
 10276                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10280  1ED8  0020               	movlb	0	; select bank0
 10281  1ED9  083C               	movf	WriteBaud@Parity,w
 10282  1EDA  3907               	andlw	7
 10283  1EDB  00BD               	movwf	??_WriteBaud
 10284  1EDC  01BE               	clrf	??_WriteBaud+1
 10285  1EDD  01BF               	clrf	??_WriteBaud+2
 10286  1EDE  01C0               	clrf	??_WriteBaud+3
 10287  1EDF  3014               	movlw	20
 10288  1EE0                     u7725:	
 10289  1EE0  35BD               	lslf	??_WriteBaud,f
 10290  1EE1  0DBE               	rlf	??_WriteBaud+1,f
 10291  1EE2  0DBF               	rlf	??_WriteBaud+2,f
 10292  1EE3  0DC0               	rlf	??_WriteBaud+3,f
 10293  1EE4  0B89               	decfsz	9,f
 10294  1EE5  2EE0               	goto	u7725
 10295  1EE6  30FF               	movlw	255
 10296  1EE7  0538               	andwf	WriteBaud@Baud,w
 10297  1EE8  00C1               	movwf	??_WriteBaud+4
 10298  1EE9  30FF               	movlw	255
 10299  1EEA  0539               	andwf	WriteBaud@Baud+1,w
 10300  1EEB  00C2               	movwf	??_WriteBaud+5
 10301  1EEC  300F               	movlw	15
 10302  1EED  053A               	andwf	WriteBaud@Baud+2,w
 10303  1EEE  00C3               	movwf	??_WriteBaud+6
 10304  1EEF  3000               	movlw	0
 10305  1EF0  053B               	andwf	WriteBaud@Baud+3,w
 10306  1EF1  00C4               	movwf	??_WriteBaud+7
 10307  1EF2  0841               	movf	??_WriteBaud+4,w
 10308  1EF3  07BD               	addwf	??_WriteBaud,f
 10309  1EF4  0842               	movf	??_WriteBaud+5,w
 10310  1EF5  3DBE               	addwfc	??_WriteBaud+1,f
 10311  1EF6  0843               	movf	??_WriteBaud+6,w
 10312  1EF7  3DBF               	addwfc	??_WriteBaud+2,f
 10313  1EF8  0844               	movf	??_WriteBaud+7,w
 10314  1EF9  3DC0               	addwfc	??_WriteBaud+3,f
 10315  1EFA  0840               	movf	??_WriteBaud+3,w
 10316  1EFB  00C8               	movwf	WriteBaud@temp+3
 10317  1EFC  083F               	movf	??_WriteBaud+2,w
 10318  1EFD  00C7               	movwf	WriteBaud@temp+2
 10319  1EFE  083E               	movf	??_WriteBaud+1,w
 10320  1EFF  00C6               	movwf	WriteBaud@temp+1
 10321  1F00  083D               	movf	??_WriteBaud,w
 10322  1F01  00C5               	movwf	WriteBaud@temp
 10323                           
 10324                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10325  1F02  30FF               	movlw	255
 10326  1F03  0545               	andwf	WriteBaud@temp,w
 10327  1F04  0024               	movlb	4	; select bank4
 10328  1F05  00B2               	movwf	(_MEM^(0+512)+2)
 10329  1F06  303F               	movlw	63
 10330  1F07  0020               	movlb	0	; select bank0
 10331  1F08  0546               	andwf	WriteBaud@temp+1,w
 10332  1F09  0024               	movlb	4	; select bank4
 10333  1F0A  00B3               	movwf	((_MEM+1)^(0+512)+2)
 10334                           
 10335                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10336  1F0B  0020               	movlb	0	; select bank0
 10337  1F0C  0845               	movf	WriteBaud@temp,w
 10338  1F0D  00BD               	movwf	??_WriteBaud
 10339  1F0E  0846               	movf	WriteBaud@temp+1,w
 10340  1F0F  00BE               	movwf	??_WriteBaud+1
 10341  1F10  0847               	movf	WriteBaud@temp+2,w
 10342  1F11  00BF               	movwf	??_WriteBaud+2
 10343  1F12  0848               	movf	WriteBaud@temp+3,w
 10344  1F13  00C0               	movwf	??_WriteBaud+3
 10345  1F14  300E               	movlw	14
 10346  1F15                     u7735:	
 10347  1F15  36C0               	lsrf	??_WriteBaud+3,f
 10348  1F16  0CBF               	rrf	??_WriteBaud+2,f
 10349  1F17  0CBE               	rrf	??_WriteBaud+1,f
 10350  1F18  0CBD               	rrf	??_WriteBaud,f
 10351  1F19  0B89               	decfsz	9,f
 10352  1F1A  2F15               	goto	u7735
 10353  1F1B  30FF               	movlw	255
 10354  1F1C  053D               	andwf	??_WriteBaud,w
 10355  1F1D  0024               	movlb	4	; select bank4
 10356  1F1E  00B0               	movwf	_MEM^(0+512)
 10357  1F1F  303F               	movlw	63
 10358  1F20  0020               	movlb	0	; select bank0
 10359  1F21  053E               	andwf	??_WriteBaud+1,w
 10360  1F22  0024               	movlb	4	; select bank4
 10361  1F23  00B1               	movwf	(_MEM+1)^(0+512)
 10362                           
 10363                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 10364  1F24  0020               	movlb	0	; select bank0
 10365  1F25  0837               	movf	WriteBaud@row+1,w
 10366  1F26  01B0               	clrf	WriteFlash_Sequential@row+1
 10367  1F27  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10368  1F28  0836               	movf	WriteBaud@row,w
 10369  1F29  01AF               	clrf	WriteFlash_Sequential@row
 10370  1F2A  07AF               	addwf	WriteFlash_Sequential@row,f
 10371  1F2B  3030               	movlw	_MEM& (0+255)
 10372  1F2C  00BD               	movwf	??_WriteBaud
 10373  1F2D  083D               	movf	??_WriteBaud,w
 10374  1F2E  00B1               	movwf	WriteFlash_Sequential@buffer
 10375  1F2F  3002               	movlw	2
 10376  1F30  00BE               	movwf	??_WriteBaud+1
 10377  1F31  083E               	movf	??_WriteBaud+1,w
 10378  1F32  00B2               	movwf	WriteFlash_Sequential@amount
 10379  1F33  3192  22BA         	fcall	_WriteFlash_Sequential
 10380  1F35  0008               	return
 10381  1F36                     __end_of_WriteBaud:	
 10382                           
 10383                           	psect	text17
 10384  12BA                     __ptext17:	
 10385 ;; *************** function _WriteFlash_Sequential *****************
 10386 ;; Defined at:
 10387 ;;		line 112 in file "FLASH.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;  row             2   15[BANK0 ] unsigned int 
 10390 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10391 ;;		 -> MEM(4), 
 10392 ;;  amount          1   18[BANK0 ] unsigned char 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10395 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10396 ;;  temp            2   67[BANK1 ] unsigned int 
 10397 ;;  i               1   70[BANK1 ] unsigned char 
 10398 ;;  spaces          1   69[BANK1 ] unsigned char 
 10399 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10400 ;;  tempL           1   65[BANK1 ] unsigned char 
 10401 ;;  tempH           1   64[BANK1 ] unsigned char 
 10402 ;; Return value:  Size  Location     Type
 10403 ;;		None               void
 10404 ;; Registers used:
 10405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:       78 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    5
 10418 ;; This function calls:
 10419 ;;		_BlockErase
 10420 ;;		_ReadFlash_2Byte
 10421 ;;		_UNLOCK
 10422 ;;		_delayUS
 10423 ;; This function is called by:
 10424 ;;		_WriteBaud
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _WriteFlash_Sequential
 10430  12BA                     _WriteFlash_Sequential:	
 10431                           
 10432                           ;FLASH.c: 114: unsigned char spaces = 32;
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10436  12BA  3020               	movlw	32
 10437  12BB  0020               	movlb	0	; select bank0
 10438  12BC  00B3               	movwf	??_WriteFlash_Sequential
 10439  12BD  0833               	movf	??_WriteFlash_Sequential,w
 10440  12BE  0021               	movlb	1	; select bank1
 10441  12BF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10442                           
 10443                           ;FLASH.c: 115: unsigned char tempH;
 10444                           ;FLASH.c: 116: unsigned char tempL;
 10445                           ;FLASH.c: 117: unsigned char i;
 10446                           ;FLASH.c: 118: unsigned int temp;
 10447                           ;FLASH.c: 119: unsigned char amountTemp =0;
 10448  12C0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10449                           
 10450                           ;FLASH.c: 120: unsigned char TempBufH[32];
 10451                           ;FLASH.c: 121: unsigned char TempBufL[32];
 10452                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 10453  12C1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10454  12C2                     l5718:	
 10455  12C2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10456  12C3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10457  12C4  1803               	btfsc	3,0
 10458  12C5  2B33               	goto	l5720
 10459                           
 10460                           ;FLASH.c: 124: {
 10461                           ;FLASH.c: 125: amountTemp++;
 10462  12C6  3001               	movlw	1
 10463  12C7  0020               	movlb	0	; select bank0
 10464  12C8  00B3               	movwf	??_WriteFlash_Sequential
 10465  12C9  0833               	movf	??_WriteFlash_Sequential,w
 10466  12CA  0021               	movlb	1	; select bank1
 10467  12CB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10468                           
 10469                           ;FLASH.c: 126: if(amountTemp <= amount)
 10470  12CC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10471  12CD  0020               	movlb	0	; select bank0
 10472  12CE  0232               	subwf	WriteFlash_Sequential@amount,w
 10473  12CF  1C03               	skipc
 10474  12D0  2AEF               	goto	l5706
 10475                           
 10476                           ;FLASH.c: 127: {
 10477                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10478  12D1  0831               	movf	WriteFlash_Sequential@buffer,w
 10479  12D2  0086               	movwf	6
 10480  12D3  3002               	movlw	2	; select bank4/5
 10481  12D4  0087               	movwf	7
 10482  12D5  3F40               	moviw [0]fsr1
 10483  12D6  00B3               	movwf	??_WriteFlash_Sequential
 10484  12D7  3F41               	moviw [1]fsr1
 10485  12D8  00B4               	movwf	??_WriteFlash_Sequential+1
 10486  12D9  0834               	movf	??_WriteFlash_Sequential+1,w
 10487  12DA  393F               	andlw	63
 10488  12DB  00B5               	movwf	??_WriteFlash_Sequential+2
 10489  12DC  0835               	movf	??_WriteFlash_Sequential+2,w
 10490  12DD  0021               	movlb	1	; select bank1
 10491  12DE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10492                           
 10493                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 10494  12DF  0020               	movlb	0	; select bank0
 10495  12E0  0831               	movf	WriteFlash_Sequential@buffer,w
 10496  12E1  0086               	movwf	6
 10497  12E2  3002               	movlw	2	; select bank4/5
 10498  12E3  0087               	movwf	7
 10499  12E4  0801               	movf	1,w
 10500  12E5  00B3               	movwf	??_WriteFlash_Sequential
 10501  12E6  0833               	movf	??_WriteFlash_Sequential,w
 10502  12E7  0021               	movlb	1	; select bank1
 10503  12E8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10504                           
 10505                           ;FLASH.c: 130: buffer++;
 10506  12E9  3002               	movlw	2
 10507  12EA  0020               	movlb	0	; select bank0
 10508  12EB  00B3               	movwf	??_WriteFlash_Sequential
 10509  12EC  0833               	movf	??_WriteFlash_Sequential,w
 10510  12ED  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10511                           
 10512                           ;FLASH.c: 131: }
 10513  12EE  2B15               	goto	l5712
 10514  12EF                     l5706:	
 10515                           
 10516                           ;FLASH.c: 132: else
 10517                           ;FLASH.c: 133: {
 10518                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 10519  12EF  0830               	movf	WriteFlash_Sequential@row+1,w
 10520  12F0  01A6               	clrf	ReadFlash_2Byte@row+1
 10521  12F1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10522  12F2  082F               	movf	WriteFlash_Sequential@row,w
 10523  12F3  01A5               	clrf	ReadFlash_2Byte@row
 10524  12F4  07A5               	addwf	ReadFlash_2Byte@row,f
 10525  12F5  0021               	movlb	1	; select bank1
 10526  12F6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10527  12F7  0020               	movlb	0	; select bank0
 10528  12F8  00B3               	movwf	??_WriteFlash_Sequential
 10529  12F9  0833               	movf	??_WriteFlash_Sequential,w
 10530  12FA  00A7               	movwf	ReadFlash_2Byte@column
 10531  12FB  319B  235D  3192   	fcall	_ReadFlash_2Byte
 10532  12FE  0020               	movlb	0	; select bank0
 10533  12FF  0826               	movf	?_ReadFlash_2Byte+1,w
 10534  1300  0021               	movlb	1	; select bank1
 10535  1301  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10536  1302  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10537  1303  0020               	movlb	0	; select bank0
 10538  1304  0825               	movf	?_ReadFlash_2Byte,w
 10539  1305  0021               	movlb	1	; select bank1
 10540  1306  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10541  1307  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10542                           
 10543                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10544  1308  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10545  1309  393F               	andlw	63
 10546  130A  0020               	movlb	0	; select bank0
 10547  130B  00B3               	movwf	??_WriteFlash_Sequential
 10548  130C  0833               	movf	??_WriteFlash_Sequential,w
 10549  130D  0021               	movlb	1	; select bank1
 10550  130E  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10551                           
 10552                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 10553  130F  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10554  1310  0020               	movlb	0	; select bank0
 10555  1311  00B3               	movwf	??_WriteFlash_Sequential
 10556  1312  0833               	movf	??_WriteFlash_Sequential,w
 10557  1313  0021               	movlb	1	; select bank1
 10558  1314  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10559  1315                     l5712:	
 10560                           
 10561                           ;FLASH.c: 138: }
 10562                           ;FLASH.c: 139: TempBufH[i] = tempH;
 10563  1315  0021               	movlb	1	; select bank1
 10564  1316  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10565  1317  0020               	movlb	0	; select bank0
 10566  1318  00B3               	movwf	??_WriteFlash_Sequential
 10567  1319  0021               	movlb	1	; select bank1
 10568  131A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10569  131B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10570  131C  0086               	movwf	6
 10571  131D  0187               	clrf	7
 10572  131E  0020               	movlb	0	; select bank0
 10573  131F  0833               	movf	??_WriteFlash_Sequential,w
 10574  1320  0081               	movwf	1
 10575                           
 10576                           ;FLASH.c: 140: TempBufL[i] = tempL;
 10577  1321  0021               	movlb	1	; select bank1
 10578  1322  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10579  1323  0020               	movlb	0	; select bank0
 10580  1324  00B3               	movwf	??_WriteFlash_Sequential
 10581  1325  0021               	movlb	1	; select bank1
 10582  1326  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10583  1327  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10584  1328  0086               	movwf	6
 10585  1329  0187               	clrf	7
 10586  132A  0020               	movlb	0	; select bank0
 10587  132B  0833               	movf	??_WriteFlash_Sequential,w
 10588  132C  0081               	movwf	1
 10589  132D  3001               	movlw	1
 10590  132E  00B3               	movwf	??_WriteFlash_Sequential
 10591  132F  0833               	movf	??_WriteFlash_Sequential,w
 10592  1330  0021               	movlb	1	; select bank1
 10593  1331  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10594  1332  2AC2               	goto	l5718
 10595  1333                     l5720:	
 10596                           
 10597                           ;FLASH.c: 141: }
 10598                           ;FLASH.c: 142: BlockErase(row);
 10599  1333  0020               	movlb	0	; select bank0
 10600  1334  0830               	movf	WriteFlash_Sequential@row+1,w
 10601  1335  01A6               	clrf	BlockErase@row+1
 10602  1336  07A6               	addwf	BlockErase@row+1,f
 10603  1337  082F               	movf	WriteFlash_Sequential@row,w
 10604  1338  01A5               	clrf	BlockErase@row
 10605  1339  07A5               	addwf	BlockErase@row,f
 10606  133A  319B  232C  3192   	fcall	_BlockErase
 10607                           
 10608                           ;FLASH.c: 143: delayUS(1000);
 10609  133D  3000               	movlw	0
 10610  133E  0020               	movlb	0	; select bank0
 10611  133F  00A8               	movwf	delayUS@US+3
 10612  1340  3000               	movlw	0
 10613  1341  00A7               	movwf	delayUS@US+2
 10614  1342  3003               	movlw	3
 10615  1343  00A6               	movwf	delayUS@US+1
 10616  1344  30E8               	movlw	232
 10617  1345  00A5               	movwf	delayUS@US
 10618  1346  319B  23F5  3192   	fcall	_delayUS
 10619                           
 10620                           ;FLASH.c: 144: INTCON &= ~0x80;
 10621  1349  307F               	movlw	127
 10622  134A  0020               	movlb	0	; select bank0
 10623  134B  00B3               	movwf	??_WriteFlash_Sequential
 10624  134C  0833               	movf	??_WriteFlash_Sequential,w
 10625  134D  058B               	andwf	11,f	;volatile
 10626                           
 10627                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 10628  134E  0023               	movlb	3	; select bank3
 10629  134F  1515               	bsf	21,2	;volatile
 10630                           
 10631                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 10632  1350  30BF               	movlw	191
 10633  1351  0020               	movlb	0	; select bank0
 10634  1352  00B3               	movwf	??_WriteFlash_Sequential
 10635  1353  0833               	movf	??_WriteFlash_Sequential,w
 10636  1354  0023               	movlb	3	; select bank3
 10637  1355  0595               	andwf	21,f	;volatile
 10638                           
 10639                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 10640  1356  30DF               	movlw	223
 10641  1357  0020               	movlb	0	; select bank0
 10642  1358  00B3               	movwf	??_WriteFlash_Sequential
 10643  1359  0833               	movf	??_WriteFlash_Sequential,w
 10644  135A  0023               	movlb	3	; select bank3
 10645  135B  0595               	andwf	21,f	;volatile
 10646                           
 10647                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 10648  135C  30EF               	movlw	239
 10649  135D  0020               	movlb	0	; select bank0
 10650  135E  00B3               	movwf	??_WriteFlash_Sequential
 10651  135F  0833               	movf	??_WriteFlash_Sequential,w
 10652  1360  0023               	movlb	3	; select bank3
 10653  1361  0595               	andwf	21,f	;volatile
 10654                           
 10655                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10656  1362  0020               	movlb	0	; select bank0
 10657  1363  0830               	movf	WriteFlash_Sequential@row+1,w
 10658  1364  00B4               	movwf	??_WriteFlash_Sequential+1
 10659  1365  082F               	movf	WriteFlash_Sequential@row,w
 10660  1366  00B3               	movwf	??_WriteFlash_Sequential
 10661  1367  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10662  1368  0CB3               	rrf	??_WriteFlash_Sequential,f
 10663  1369  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10664  136A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10665  136B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10666  136C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10667  136D  0833               	movf	??_WriteFlash_Sequential,w
 10668  136E  397F               	andlw	127
 10669  136F  0023               	movlb	3	; select bank3
 10670  1370  0092               	movwf	18	;volatile
 10671                           
 10672                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 10673  1371  0020               	movlb	0	; select bank0
 10674  1372  082F               	movf	WriteFlash_Sequential@row,w
 10675  1373  3907               	andlw	7
 10676  1374  00B3               	movwf	??_WriteFlash_Sequential
 10677  1375  3004               	movlw	4
 10678  1376                     u7395:	
 10679  1376  35B3               	lslf	??_WriteFlash_Sequential,f
 10680  1377  3EFF               	addlw	-1
 10681  1378  1D03               	skipz
 10682  1379  2B76               	goto	u7395
 10683  137A  3533               	lslf	??_WriteFlash_Sequential,w
 10684  137B  0023               	movlb	3	; select bank3
 10685  137C  0091               	movwf	17	;volatile
 10686                           
 10687                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 10688  137D  0021               	movlb	1	; select bank1
 10689  137E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10690  137F                     l5750:	
 10691  137F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10692  1380  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10693  1381  1803               	btfsc	3,0
 10694  1382  2BA4               	goto	l5752
 10695                           
 10696                           ;FLASH.c: 153: {
 10697                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 10698  1383  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10699  1384  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10700  1385  0086               	movwf	6
 10701  1386  0187               	clrf	7
 10702  1387  0801               	movf	1,w
 10703  1388  0023               	movlb	3	; select bank3
 10704  1389  0094               	movwf	20	;volatile
 10705                           
 10706                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 10707  138A  0021               	movlb	1	; select bank1
 10708  138B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10709  138C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10710  138D  0086               	movwf	6
 10711  138E  0187               	clrf	7
 10712  138F  0801               	movf	1,w
 10713  1390  0023               	movlb	3	; select bank3
 10714  1391  0093               	movwf	19	;volatile
 10715                           
 10716                           ;FLASH.c: 156: __nop();
 10717  1392  0000               	nop
 10718                           
 10719                           ;FLASH.c: 157: __nop();
 10720  1393  0000               	nop
 10721                           
 10722                           ;FLASH.c: 158: UNLOCK();
 10723  1394  3199  2110  3192   	fcall	_UNLOCK
 10724                           
 10725                           ;FLASH.c: 159: PMADRL++;
 10726  1397  3001               	movlw	1
 10727  1398  0020               	movlb	0	; select bank0
 10728  1399  00B3               	movwf	??_WriteFlash_Sequential
 10729  139A  0833               	movf	??_WriteFlash_Sequential,w
 10730  139B  0023               	movlb	3	; select bank3
 10731  139C  0791               	addwf	17,f	;volatile
 10732  139D  3001               	movlw	1
 10733  139E  0020               	movlb	0	; select bank0
 10734  139F  00B3               	movwf	??_WriteFlash_Sequential
 10735  13A0  0833               	movf	??_WriteFlash_Sequential,w
 10736  13A1  0021               	movlb	1	; select bank1
 10737  13A2  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10738  13A3  2B7F               	goto	l5750
 10739  13A4                     l5752:	
 10740                           
 10741                           ;FLASH.c: 161: }
 10742                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 10743  13A4  30FB               	movlw	251
 10744  13A5  0020               	movlb	0	; select bank0
 10745  13A6  00B3               	movwf	??_WriteFlash_Sequential
 10746  13A7  0833               	movf	??_WriteFlash_Sequential,w
 10747  13A8  0023               	movlb	3	; select bank3
 10748  13A9  0595               	andwf	21,f	;volatile
 10749                           
 10750                           ;FLASH.c: 163: INTCON |= 0x80;
 10751  13AA  178B               	bsf	11,7	;volatile
 10752  13AB  0008               	return
 10753  13AC                     __end_of_WriteFlash_Sequential:	
 10754                           
 10755                           	psect	text18
 10756  1B2C                     __ptext18:	
 10757 ;; *************** function _BlockErase *****************
 10758 ;; Defined at:
 10759 ;;		line 91 in file "FLASH.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  row             2    5[BANK0 ] unsigned int 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;		None
 10764 ;; Return value:  Size  Location     Type
 10765 ;;		None               void
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0, pclath, cstack
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10773 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;Total ram usage:        4 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    4
 10780 ;; This function calls:
 10781 ;;		_UNLOCK
 10782 ;; This function is called by:
 10783 ;;		_WriteFlash_Sequential
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function _BlockErase
 10789  1B2C                     _BlockErase:	
 10790                           
 10791                           ;FLASH.c: 93: INTCON &= ~0x80;
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10795  1B2C  307F               	movlw	127
 10796  1B2D  0020               	movlb	0	; select bank0
 10797  1B2E  00A7               	movwf	??_BlockErase
 10798  1B2F  0827               	movf	??_BlockErase,w
 10799  1B30  058B               	andwf	11,f	;volatile
 10800                           
 10801                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 10802  1B31  30BF               	movlw	191
 10803  1B32  00A7               	movwf	??_BlockErase
 10804  1B33  0827               	movf	??_BlockErase,w
 10805  1B34  0023               	movlb	3	; select bank3
 10806  1B35  0595               	andwf	21,f	;volatile
 10807                           
 10808                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10809  1B36  0020               	movlb	0	; select bank0
 10810  1B37  0826               	movf	BlockErase@row+1,w
 10811  1B38  00A8               	movwf	??_BlockErase+1
 10812  1B39  0825               	movf	BlockErase@row,w
 10813  1B3A  00A7               	movwf	??_BlockErase
 10814  1B3B  36A8               	lsrf	??_BlockErase+1,f
 10815  1B3C  0CA7               	rrf	??_BlockErase,f
 10816  1B3D  36A8               	lsrf	??_BlockErase+1,f
 10817  1B3E  0CA7               	rrf	??_BlockErase,f
 10818  1B3F  36A8               	lsrf	??_BlockErase+1,f
 10819  1B40  0CA7               	rrf	??_BlockErase,f
 10820  1B41  0827               	movf	??_BlockErase,w
 10821  1B42  397F               	andlw	127
 10822  1B43  0023               	movlb	3	; select bank3
 10823  1B44  0092               	movwf	18	;volatile
 10824                           
 10825                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 10826  1B45  0020               	movlb	0	; select bank0
 10827  1B46  0825               	movf	BlockErase@row,w
 10828  1B47  3907               	andlw	7
 10829  1B48  00A7               	movwf	??_BlockErase
 10830  1B49  3004               	movlw	4
 10831  1B4A                     u7255:	
 10832  1B4A  35A7               	lslf	??_BlockErase,f
 10833  1B4B  3EFF               	addlw	-1
 10834  1B4C  1D03               	skipz
 10835  1B4D  2B4A               	goto	u7255
 10836  1B4E  3527               	lslf	??_BlockErase,w
 10837  1B4F  0023               	movlb	3	; select bank3
 10838  1B50  0091               	movwf	17	;volatile
 10839                           
 10840                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 10841  1B51  1615               	bsf	21,4	;volatile
 10842                           
 10843                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 10844  1B52  1515               	bsf	21,2	;volatile
 10845                           
 10846                           ;FLASH.c: 99: UNLOCK();
 10847  1B53  3199  2110         	fcall	_UNLOCK
 10848                           
 10849                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 10850  1B55  30FB               	movlw	251
 10851  1B56  0020               	movlb	0	; select bank0
 10852  1B57  00A7               	movwf	??_BlockErase
 10853  1B58  0827               	movf	??_BlockErase,w
 10854  1B59  0023               	movlb	3	; select bank3
 10855  1B5A  0595               	andwf	21,f	;volatile
 10856                           
 10857                           ;FLASH.c: 101: INTCON |= 0x80;
 10858  1B5B  178B               	bsf	11,7	;volatile
 10859  1B5C  0008               	return
 10860  1B5D                     __end_of_BlockErase:	
 10861                           
 10862                           	psect	text19
 10863  1910                     __ptext19:	
 10864 ;; *************** function _UNLOCK *****************
 10865 ;; Defined at:
 10866 ;;		line 76 in file "FLASH.c"
 10867 ;; Parameters:    Size  Location     Type
 10868 ;;		None
 10869 ;; Auto vars:     Size  Location     Type
 10870 ;;		None
 10871 ;; Return value:  Size  Location     Type
 10872 ;;		None               void
 10873 ;; Registers used:
 10874 ;;		wreg
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;Total ram usage:        0 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    3
 10887 ;; This function calls:
 10888 ;;		Nothing
 10889 ;; This function is called by:
 10890 ;;		_BlockErase
 10891 ;;		_WriteFlash_Sequential
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _UNLOCK
 10897  1910                     _UNLOCK:	
 10898                           
 10899                           ;FLASH.c: 78: PMCON2 = 0x55;
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _UNLOCK: [wreg]
 10903  1910  3055               	movlw	85
 10904  1911  0023               	movlb	3	; select bank3
 10905  1912  0096               	movwf	22	;volatile
 10906                           
 10907                           ;FLASH.c: 79: PMCON2 = 0xAA;
 10908  1913  30AA               	movlw	170
 10909  1914  0096               	movwf	22	;volatile
 10910                           
 10911                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 10912  1915  1495               	bsf	21,1	;volatile
 10913  1916                     l901:	
 10914                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 10915                           
 10916  1916  1895               	btfsc	21,1	;volatile
 10917  1917  2916               	goto	l901
 10918                           
 10919                           ;FLASH.c: 82: __nop();
 10920  1918  0000               	nop
 10921                           
 10922                           ;FLASH.c: 83: __nop();
 10923  1919  0000               	nop
 10924  191A  0008               	return
 10925  191B                     __end_of_UNLOCK:	
 10926                           
 10927                           	psect	text20
 10928  1E2E                     __ptext20:	
 10929 ;; *************** function _Reverse_Byte *****************
 10930 ;; Defined at:
 10931 ;;		line 105 in file "MISC.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  This            1    wreg     unsigned char 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  This            1    8[BANK0 ] unsigned char 
 10936 ;;  temp            1    7[BANK0 ] unsigned char 
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      unsigned char 
 10939 ;; Registers used:
 10940 ;;		wreg, status,2, status,0
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        4 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    3
 10953 ;; This function calls:
 10954 ;;		Nothing
 10955 ;; This function is called by:
 10956 ;;		_PS_2_Update
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _Reverse_Byte
 10962  1E2E                     _Reverse_Byte:	
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 10966                           ;Reverse_Byte@This stored from wreg
 10967  1E2E  0020               	movlb	0	; select bank0
 10968  1E2F  00A8               	movwf	Reverse_Byte@This
 10969                           
 10970                           ;MISC.c: 107: unsigned char temp=0;
 10971  1E30  01A7               	clrf	Reverse_Byte@temp
 10972                           
 10973                           ;MISC.c: 109: temp += (This & 0x01) << 7;
 10974  1E31  0828               	movf	Reverse_Byte@This,w
 10975  1E32  3901               	andlw	1
 10976  1E33  00A5               	movwf	??_Reverse_Byte
 10977  1E34  3006               	movlw	6
 10978  1E35                     u7775:	
 10979  1E35  35A5               	lslf	??_Reverse_Byte,f
 10980  1E36  3EFF               	addlw	-1
 10981  1E37  1D03               	skipz
 10982  1E38  2E35               	goto	u7775
 10983  1E39  3525               	lslf	??_Reverse_Byte,w
 10984  1E3A  00A6               	movwf	??_Reverse_Byte+1
 10985  1E3B  0826               	movf	??_Reverse_Byte+1,w
 10986  1E3C  07A7               	addwf	Reverse_Byte@temp,f
 10987                           
 10988                           ;MISC.c: 110: temp += (This & 0x02) << 5;
 10989  1E3D  0828               	movf	Reverse_Byte@This,w
 10990  1E3E  3902               	andlw	2
 10991  1E3F  00A5               	movwf	??_Reverse_Byte
 10992  1E40  3004               	movlw	4
 10993  1E41                     u7785:	
 10994  1E41  35A5               	lslf	??_Reverse_Byte,f
 10995  1E42  3EFF               	addlw	-1
 10996  1E43  1D03               	skipz
 10997  1E44  2E41               	goto	u7785
 10998  1E45  3525               	lslf	??_Reverse_Byte,w
 10999  1E46  00A6               	movwf	??_Reverse_Byte+1
 11000  1E47  0826               	movf	??_Reverse_Byte+1,w
 11001  1E48  07A7               	addwf	Reverse_Byte@temp,f
 11002                           
 11003                           ;MISC.c: 111: temp += (This & 0x04) << 3;
 11004  1E49  0828               	movf	Reverse_Byte@This,w
 11005  1E4A  3904               	andlw	4
 11006  1E4B  00A5               	movwf	??_Reverse_Byte
 11007  1E4C  3002               	movlw	2
 11008  1E4D                     u7795:	
 11009  1E4D  35A5               	lslf	??_Reverse_Byte,f
 11010  1E4E  3EFF               	addlw	-1
 11011  1E4F  1D03               	skipz
 11012  1E50  2E4D               	goto	u7795
 11013  1E51  3525               	lslf	??_Reverse_Byte,w
 11014  1E52  00A6               	movwf	??_Reverse_Byte+1
 11015  1E53  0826               	movf	??_Reverse_Byte+1,w
 11016  1E54  07A7               	addwf	Reverse_Byte@temp,f
 11017                           
 11018                           ;MISC.c: 112: temp += (This & 0x08) << 1;
 11019  1E55  0828               	movf	Reverse_Byte@This,w
 11020  1E56  3908               	andlw	8
 11021  1E57  0709               	addwf	9,w
 11022  1E58  00A5               	movwf	??_Reverse_Byte
 11023  1E59  0825               	movf	??_Reverse_Byte,w
 11024  1E5A  07A7               	addwf	Reverse_Byte@temp,f
 11025                           
 11026                           ;MISC.c: 113: temp += (This & 0x10) >> 1;
 11027  1E5B  3628               	lsrf	Reverse_Byte@This,w
 11028  1E5C  3908               	andlw	8
 11029  1E5D  00A5               	movwf	??_Reverse_Byte
 11030  1E5E  0825               	movf	??_Reverse_Byte,w
 11031  1E5F  07A7               	addwf	Reverse_Byte@temp,f
 11032                           
 11033                           ;MISC.c: 114: temp += (This & 0x20) >> 3;
 11034  1E60  0828               	movf	Reverse_Byte@This,w
 11035  1E61  00A5               	movwf	??_Reverse_Byte
 11036  1E62  3003               	movlw	3
 11037  1E63                     u7805:	
 11038  1E63  36A5               	lsrf	??_Reverse_Byte,f
 11039  1E64  0B89               	decfsz	9,f
 11040  1E65  2E63               	goto	u7805
 11041  1E66  0825               	movf	??_Reverse_Byte,w
 11042  1E67  3904               	andlw	4
 11043  1E68  00A6               	movwf	??_Reverse_Byte+1
 11044  1E69  0826               	movf	??_Reverse_Byte+1,w
 11045  1E6A  07A7               	addwf	Reverse_Byte@temp,f
 11046                           
 11047                           ;MISC.c: 115: temp += (This & 0x40) >> 5;
 11048  1E6B  0828               	movf	Reverse_Byte@This,w
 11049  1E6C  00A5               	movwf	??_Reverse_Byte
 11050  1E6D  3005               	movlw	5
 11051  1E6E                     u7815:	
 11052  1E6E  36A5               	lsrf	??_Reverse_Byte,f
 11053  1E6F  0B89               	decfsz	9,f
 11054  1E70  2E6E               	goto	u7815
 11055  1E71  0825               	movf	??_Reverse_Byte,w
 11056  1E72  3902               	andlw	2
 11057  1E73  00A6               	movwf	??_Reverse_Byte+1
 11058  1E74  0826               	movf	??_Reverse_Byte+1,w
 11059  1E75  07A7               	addwf	Reverse_Byte@temp,f
 11060                           
 11061                           ;MISC.c: 116: temp += (This & 0x80) >> 7;
 11062  1E76  0828               	movf	Reverse_Byte@This,w
 11063  1E77  00A5               	movwf	??_Reverse_Byte
 11064  1E78  3007               	movlw	7
 11065  1E79                     u7825:	
 11066  1E79  36A5               	lsrf	??_Reverse_Byte,f
 11067  1E7A  0B89               	decfsz	9,f
 11068  1E7B  2E79               	goto	u7825
 11069  1E7C  0825               	movf	??_Reverse_Byte,w
 11070  1E7D  3901               	andlw	1
 11071  1E7E  00A6               	movwf	??_Reverse_Byte+1
 11072  1E7F  0826               	movf	??_Reverse_Byte+1,w
 11073  1E80  07A7               	addwf	Reverse_Byte@temp,f
 11074                           
 11075                           ;MISC.c: 118: return temp;
 11076  1E81  0827               	movf	Reverse_Byte@temp,w
 11077  1E82  0008               	return
 11078  1E83                     __end_of_Reverse_Byte:	
 11079                           
 11080                           	psect	text21
 11081  1941                     __ptext21:	
 11082 ;; *************** function _ISNUMBER *****************
 11083 ;; Defined at:
 11084 ;;		line 126 in file "MISC.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;  ascii           1    wreg     unsigned char 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  ascii           1    5[BANK0 ] unsigned char 
 11089 ;; Return value:  Size  Location     Type
 11090 ;;                  1    wreg      unsigned char 
 11091 ;; Registers used:
 11092 ;;		wreg
 11093 ;; Tracked objects:
 11094 ;;		On entry : 0/0
 11095 ;;		On exit  : 0/0
 11096 ;;		Unchanged: 0/0
 11097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;Total ram usage:        1 bytes
 11103 ;; Hardware stack levels used:    1
 11104 ;; Hardware stack levels required when called:    3
 11105 ;; This function calls:
 11106 ;;		Nothing
 11107 ;; This function is called by:
 11108 ;;		_PS_2_Update
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           
 11113                           ;psect for function _ISNUMBER
 11114  1941                     _ISNUMBER:	
 11115                           
 11116                           ;incstack = 0
 11117                           ; Regs used in _ISNUMBER: [wreg]
 11118                           ;ISNUMBER@ascii stored from wreg
 11119  1941  0020               	movlb	0	; select bank0
 11120  1942  00A5               	movwf	ISNUMBER@ascii
 11121                           
 11122                           ;MISC.c: 128: if(ascii >= '0' && ascii <='9')
 11123  1943  3030               	movlw	48
 11124  1944  0225               	subwf	ISNUMBER@ascii,w
 11125  1945  1C03               	skipc
 11126  1946  294D               	goto	l6048
 11127  1947  303A               	movlw	58
 11128  1948  0225               	subwf	ISNUMBER@ascii,w
 11129  1949  1803               	skipnc
 11130  194A  294D               	goto	l6048
 11131                           
 11132                           ;MISC.c: 129: {
 11133                           ;MISC.c: 130: return 1;
 11134  194B  3001               	movlw	1
 11135                           
 11136                           ;MISC.c: 131: }
 11137  194C  0008               	return
 11138  194D                     l6048:	
 11139                           
 11140                           ;MISC.c: 132: else
 11141                           ;MISC.c: 133: {
 11142                           ;MISC.c: 134: return 0;
 11143  194D  3000               	movlw	0
 11144  194E  0008               	return
 11145  194F                     __end_of_ISNUMBER:	
 11146                           
 11147                           	psect	text22
 11148  19CD                     __ptext22:	
 11149 ;; *************** function _Decode_Scan_Code_Shift *****************
 11150 ;; Defined at:
 11151 ;;		line 826 in file "PS_2.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;  Code            1    wreg     unsigned char 
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  Code            1    5[BANK0 ] unsigned char 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      unsigned char 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;Total ram usage:        1 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:    3
 11172 ;; This function calls:
 11173 ;;		Nothing
 11174 ;; This function is called by:
 11175 ;;		_PS_2_Update
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _Decode_Scan_Code_Shift
 11181  19CD                     _Decode_Scan_Code_Shift:	
 11182                           
 11183                           ;incstack = 0
 11184                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 11185                           ;Decode_Scan_Code_Shift@Code stored from wreg
 11186  19CD  0020               	movlb	0	; select bank0
 11187  19CE  00A5               	movwf	Decode_Scan_Code_Shift@Code
 11188                           
 11189                           ;PS_2.c: 828: Code -= 13;
 11190  19CF  300D               	movlw	13
 11191  19D0  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 11192                           
 11193                           ;PS_2.c: 829: if(Code <=112)
 11194  19D1  3071               	movlw	113
 11195  19D2  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 11196  19D3  1803               	skipnc
 11197  19D4  29DE               	goto	l6124
 11198                           
 11199                           ;PS_2.c: 830: {
 11200                           ;PS_2.c: 831: return ScanCodeSHIFT[Code];
 11201  19D5  0825               	movf	Decode_Scan_Code_Shift@Code,w
 11202  19D6  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 11203  19D7  0084               	movwf	4
 11204  19D8  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 11205  19D9  1803               	skipnc
 11206  19DA  3E01               	addlw	1
 11207  19DB  0085               	movwf	5
 11208  19DC  0800               	movf	0,w	;code access
 11209                           
 11210                           ;PS_2.c: 832: }
 11211  19DD  0008               	return
 11212  19DE                     l6124:	
 11213                           
 11214                           ;PS_2.c: 833: else
 11215                           ;PS_2.c: 834: {
 11216                           ;PS_2.c: 835: return 0;
 11217  19DE  3000               	movlw	0
 11218  19DF  0008               	return
 11219  19E0                     __end_of_Decode_Scan_Code_Shift:	
 11220                           
 11221                           	psect	text23
 11222  19BA                     __ptext23:	
 11223 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11224 ;; Defined at:
 11225 ;;		line 845 in file "PS_2.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  Code            1    wreg     unsigned char 
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;  Code            1    5[BANK0 ] unsigned char 
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  1    wreg      unsigned char 
 11232 ;; Registers used:
 11233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;Total ram usage:        1 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    3
 11246 ;; This function calls:
 11247 ;;		Nothing
 11248 ;; This function is called by:
 11249 ;;		_PS_2_Update
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           
 11254                           ;psect for function _Decode_Scan_Code_FunctionE0
 11255  19BA                     _Decode_Scan_Code_FunctionE0:	
 11256                           
 11257                           ;incstack = 0
 11258                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11259                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11260  19BA  0020               	movlb	0	; select bank0
 11261  19BB  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11262                           
 11263                           ;PS_2.c: 847: Code -= 17;
 11264  19BC  3011               	movlw	17
 11265  19BD  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11266                           
 11267                           ;PS_2.c: 848: if(Code <=108)
 11268  19BE  306D               	movlw	109
 11269  19BF  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11270  19C0  1803               	skipnc
 11271  19C1  29CB               	goto	l6286
 11272                           
 11273                           ;PS_2.c: 849: {
 11274                           ;PS_2.c: 850: return ScanCodeFunctionE0[Code];
 11275  19C2  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11276  19C3  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11277  19C4  0084               	movwf	4
 11278  19C5  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11279  19C6  1803               	skipnc
 11280  19C7  3E01               	addlw	1
 11281  19C8  0085               	movwf	5
 11282  19C9  0800               	movf	0,w	;code access
 11283                           
 11284                           ;PS_2.c: 851: }
 11285  19CA  0008               	return
 11286  19CB                     l6286:	
 11287                           
 11288                           ;PS_2.c: 852: else
 11289                           ;PS_2.c: 853: {
 11290                           ;PS_2.c: 854: return 0;
 11291  19CB  3000               	movlw	0
 11292  19CC  0008               	return
 11293  19CD                     __end_of_Decode_Scan_Code_FunctionE0:	
 11294                           
 11295                           	psect	text24
 11296  195F                     __ptext24:	
 11297 ;; *************** function _Decode_Scan_Code_Function *****************
 11298 ;; Defined at:
 11299 ;;		line 864 in file "PS_2.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  Code            1    wreg     unsigned char 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  Code            1    5[BANK0 ] unsigned char 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      unsigned char 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr0l, fsr0h, pclath
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;Total ram usage:        1 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    3
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_PS_2_Update
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _Decode_Scan_Code_Function
 11329  195F                     _Decode_Scan_Code_Function:	
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11333                           ;Decode_Scan_Code_Function@Code stored from wreg
 11334  195F  0020               	movlb	0	; select bank0
 11335  1960  00A5               	movwf	Decode_Scan_Code_Function@Code
 11336                           
 11337                           ;PS_2.c: 866: if(Code <=131)
 11338  1961  3084               	movlw	132
 11339  1962  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11340  1963  1803               	skipnc
 11341  1964  296E               	goto	l6310
 11342                           
 11343                           ;PS_2.c: 867: {
 11344                           ;PS_2.c: 868: return ScanCodeFunctionNoE0[Code];
 11345  1965  0825               	movf	Decode_Scan_Code_Function@Code,w
 11346  1966  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11347  1967  0084               	movwf	4
 11348  1968  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11349  1969  1803               	skipnc
 11350  196A  3E01               	addlw	1
 11351  196B  0085               	movwf	5
 11352  196C  0800               	movf	0,w	;code access
 11353                           
 11354                           ;PS_2.c: 869: }
 11355  196D  0008               	return
 11356  196E                     l6310:	
 11357                           
 11358                           ;PS_2.c: 870: else
 11359                           ;PS_2.c: 871: {
 11360                           ;PS_2.c: 872: return 0;
 11361  196E  3000               	movlw	0
 11362  196F  0008               	return
 11363  1970                     __end_of_Decode_Scan_Code_Function:	
 11364                           
 11365                           	psect	text25
 11366  19A7                     __ptext25:	
 11367 ;; *************** function _Decode_Scan_Code *****************
 11368 ;; Defined at:
 11369 ;;		line 807 in file "PS_2.c"
 11370 ;; Parameters:    Size  Location     Type
 11371 ;;  Code            1    wreg     unsigned char 
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  Code            1    5[BANK0 ] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  1    wreg      unsigned char 
 11376 ;; Registers used:
 11377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:        1 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    3
 11390 ;; This function calls:
 11391 ;;		Nothing
 11392 ;; This function is called by:
 11393 ;;		_PS_2_Update
 11394 ;; This function uses a non-reentrant model
 11395 ;;
 11396                           
 11397                           
 11398                           ;psect for function _Decode_Scan_Code
 11399  19A7                     _Decode_Scan_Code:	
 11400                           
 11401                           ;incstack = 0
 11402                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11403                           ;Decode_Scan_Code@Code stored from wreg
 11404  19A7  0020               	movlb	0	; select bank0
 11405  19A8  00A5               	movwf	Decode_Scan_Code@Code
 11406                           
 11407                           ;PS_2.c: 809: Code -= 13;
 11408  19A9  300D               	movlw	13
 11409  19AA  02A5               	subwf	Decode_Scan_Code@Code,f
 11410                           
 11411                           ;PS_2.c: 810: if(Code <=112)
 11412  19AB  3071               	movlw	113
 11413  19AC  0225               	subwf	Decode_Scan_Code@Code,w
 11414  19AD  1803               	skipnc
 11415  19AE  29B8               	goto	l6298
 11416                           
 11417                           ;PS_2.c: 811: {
 11418                           ;PS_2.c: 812: return ScanCode[Code];
 11419  19AF  0825               	movf	Decode_Scan_Code@Code,w
 11420  19B0  3E84               	addlw	low (_ScanCode| (0+32768))
 11421  19B1  0084               	movwf	4
 11422  19B2  3088               	movlw	high (_ScanCode| (0+32768))
 11423  19B3  1803               	skipnc
 11424  19B4  3E01               	addlw	1
 11425  19B5  0085               	movwf	5
 11426  19B6  0800               	movf	0,w	;code access
 11427                           
 11428                           ;PS_2.c: 813: }
 11429  19B7  0008               	return
 11430  19B8                     l6298:	
 11431                           
 11432                           ;PS_2.c: 814: else
 11433                           ;PS_2.c: 815: {
 11434                           ;PS_2.c: 816: return 0;
 11435  19B8  3000               	movlw	0
 11436  19B9  0008               	return
 11437  19BA                     __end_of_Decode_Scan_Code:	
 11438                           
 11439                           	psect	text26
 11440  1593                     __ptext26:	
 11441 ;; *************** function _Init_System *****************
 11442 ;; Defined at:
 11443 ;;		line 96 in file "user.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;		None
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11448 ;;  Baud            4   65[BANK1 ] unsigned long 
 11449 ;;  temp            4   60[BANK1 ] unsigned long 
 11450 ;;  Parity          1   64[BANK1 ] unsigned char 
 11451 ;; Return value:  Size  Location     Type
 11452 ;;		None               void
 11453 ;; Registers used:
 11454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;Total ram usage:       74 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:    6
 11467 ;; This function calls:
 11468 ;;		_InitUART
 11469 ;;		_ReadBaud
 11470 ;;		_UARTstringWAIT
 11471 ;;		_delayUS
 11472 ;;		_sprintf
 11473 ;; This function is called by:
 11474 ;;		_main
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           
 11479                           ;psect for function _Init_System
 11480  1593                     _Init_System:	
 11481                           
 11482                           ;user.c: 98: unsigned long temp =0;
 11483                           
 11484                           ;incstack = 0
 11485                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11486  1593  3000               	movlw	0
 11487  1594  0021               	movlb	1	; select bank1
 11488  1595  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11489  1596  3000               	movlw	0
 11490  1597  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11491  1598  3000               	movlw	0
 11492  1599  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11493  159A  3000               	movlw	0
 11494  159B  00DC               	movwf	Init_System@temp^(0+128)
 11495                           
 11496                           ;user.c: 99: unsigned long Baud =0;
 11497  159C  3000               	movlw	0
 11498  159D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11499  159E  3000               	movlw	0
 11500  159F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11501  15A0  3000               	movlw	0
 11502  15A1  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11503  15A2  3000               	movlw	0
 11504  15A3  00E1               	movwf	Init_System@Baud^(0+128)
 11505                           
 11506                           ;user.c: 100: unsigned char Parity =0;
 11507  15A4  01E0               	clrf	Init_System@Parity^(0+128)
 11508                           
 11509                           ;user.c: 101: unsigned char buf[60];
 11510                           ;user.c: 103: temp = ReadBaud((0x1800 >> 5),0);
 11511  15A5  30C0               	movlw	192
 11512  15A6  0020               	movlb	0	; select bank0
 11513  15A7  00B7               	movwf	ReadBaud@row
 11514  15A8  3000               	movlw	0
 11515  15A9  00B8               	movwf	ReadBaud@row+1
 11516  15AA  01B9               	clrf	ReadBaud@column
 11517  15AB  319F  2736  3195   	fcall	_ReadBaud
 11518  15AE  0020               	movlb	0	; select bank0
 11519  15AF  083A               	movf	?_ReadBaud+3,w
 11520  15B0  0021               	movlb	1	; select bank1
 11521  15B1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11522  15B2  0020               	movlb	0	; select bank0
 11523  15B3  0839               	movf	?_ReadBaud+2,w
 11524  15B4  0021               	movlb	1	; select bank1
 11525  15B5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11526  15B6  0020               	movlb	0	; select bank0
 11527  15B7  0838               	movf	?_ReadBaud+1,w
 11528  15B8  0021               	movlb	1	; select bank1
 11529  15B9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11530  15BA  0020               	movlb	0	; select bank0
 11531  15BB  0837               	movf	?_ReadBaud,w
 11532  15BC  0021               	movlb	1	; select bank1
 11533  15BD  00DC               	movwf	Init_System@temp^(0+128)
 11534                           
 11535                           ;user.c: 104: Baud = temp & 0x000FFFFF;
 11536  15BE  30FF               	movlw	255
 11537  15BF  055C               	andwf	Init_System@temp^(0+128),w
 11538  15C0  00E1               	movwf	Init_System@Baud^(0+128)
 11539  15C1  30FF               	movlw	255
 11540  15C2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11541  15C3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11542  15C4  300F               	movlw	15
 11543  15C5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11544  15C6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11545  15C7  3000               	movlw	0
 11546  15C8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11547  15C9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11548                           
 11549                           ;user.c: 105: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11550  15CA  085C               	movf	Init_System@temp^(0+128),w
 11551  15CB  0020               	movlb	0	; select bank0
 11552  15CC  00D4               	movwf	??_Init_System
 11553  15CD  0021               	movlb	1	; select bank1
 11554  15CE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11555  15CF  0020               	movlb	0	; select bank0
 11556  15D0  00D5               	movwf	??_Init_System+1
 11557  15D1  0021               	movlb	1	; select bank1
 11558  15D2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11559  15D3  0020               	movlb	0	; select bank0
 11560  15D4  00D6               	movwf	??_Init_System+2
 11561  15D5  0021               	movlb	1	; select bank1
 11562  15D6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11563  15D7  0020               	movlb	0	; select bank0
 11564  15D8  00D7               	movwf	??_Init_System+3
 11565  15D9  3014               	movlw	20
 11566  15DA                     u9815:	
 11567  15DA  36D7               	lsrf	??_Init_System+3,f
 11568  15DB  0CD6               	rrf	??_Init_System+2,f
 11569  15DC  0CD5               	rrf	??_Init_System+1,f
 11570  15DD  0CD4               	rrf	??_Init_System,f
 11571  15DE  0B89               	decfsz	9,f
 11572  15DF  2DDA               	goto	u9815
 11573  15E0  0854               	movf	??_Init_System,w
 11574  15E1  390F               	andlw	15
 11575  15E2  00D8               	movwf	??_Init_System+4
 11576  15E3  0858               	movf	??_Init_System+4,w
 11577  15E4  0021               	movlb	1	; select bank1
 11578  15E5  00E0               	movwf	Init_System@Parity^(0+128)
 11579                           
 11580                           ;user.c: 106: if(Baud <2400 || Baud > 115200)
 11581  15E6  3000               	movlw	0
 11582  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11583  15E8  1D03               	skipz
 11584  15E9  2DF4               	goto	u9825
 11585  15EA  3000               	movlw	0
 11586  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11587  15EC  1D03               	skipz
 11588  15ED  2DF4               	goto	u9825
 11589  15EE  3009               	movlw	9
 11590  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11591  15F0  1D03               	skipz
 11592  15F1  2DF4               	goto	u9825
 11593  15F2  3060               	movlw	96
 11594  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11595  15F4                     u9825:	
 11596  15F4  1C03               	skipc
 11597  15F5  2E06               	goto	l7026
 11598  15F6  3000               	movlw	0
 11599  15F7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11600  15F8  1D03               	skipz
 11601  15F9  2E04               	goto	u9835
 11602  15FA  3001               	movlw	1
 11603  15FB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11604  15FC  1D03               	skipz
 11605  15FD  2E04               	goto	u9835
 11606  15FE  30C2               	movlw	194
 11607  15FF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11608  1600  1D03               	skipz
 11609  1601  2E04               	goto	u9835
 11610  1602  3001               	movlw	1
 11611  1603  0261               	subwf	Init_System@Baud^(0+128),w
 11612  1604                     u9835:	
 11613  1604  1C03               	skipc
 11614  1605  2E0F               	goto	l7030
 11615  1606                     l7026:	
 11616                           
 11617                           ;user.c: 107: {
 11618                           ;user.c: 109: Baud = 9600;
 11619  1606  3000               	movlw	0
 11620  1607  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11621  1608  3000               	movlw	0
 11622  1609  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11623  160A  3025               	movlw	37
 11624  160B  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11625  160C  3080               	movlw	128
 11626  160D  00E1               	movwf	Init_System@Baud^(0+128)
 11627                           
 11628                           ;user.c: 110: Parity = 0;
 11629  160E  01E0               	clrf	Init_System@Parity^(0+128)
 11630  160F                     l7030:	
 11631                           
 11632                           ;user.c: 111: }
 11633                           ;user.c: 112: InitUART(Baud, Parity);
 11634  160F  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11635  1610  0020               	movlb	0	; select bank0
 11636  1611  00B6               	movwf	InitUART@Baud+3
 11637  1612  0021               	movlb	1	; select bank1
 11638  1613  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11639  1614  0020               	movlb	0	; select bank0
 11640  1615  00B5               	movwf	InitUART@Baud+2
 11641  1616  0021               	movlb	1	; select bank1
 11642  1617  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11643  1618  0020               	movlb	0	; select bank0
 11644  1619  00B4               	movwf	InitUART@Baud+1
 11645  161A  0021               	movlb	1	; select bank1
 11646  161B  0861               	movf	Init_System@Baud^(0+128),w
 11647  161C  0020               	movlb	0	; select bank0
 11648  161D  00B3               	movwf	InitUART@Baud
 11649  161E  0021               	movlb	1	; select bank1
 11650  161F  0860               	movf	Init_System@Parity^(0+128),w
 11651  1620  0020               	movlb	0	; select bank0
 11652  1621  00D4               	movwf	??_Init_System
 11653  1622  0854               	movf	??_Init_System,w
 11654  1623  00B7               	movwf	InitUART@parity
 11655  1624  3191  21CA  3195   	fcall	_InitUART
 11656                           
 11657                           ;user.c: 113: UARTstringWAIT("\r\n");
 11658  1627  3052               	movlw	low ((STR_11+17)| (0+32768))
 11659  1628  0020               	movlb	0	; select bank0
 11660  1629  00B4               	movwf	UARTstringWAIT@data
 11661  162A  308B               	movlw	high ((STR_11+17)| (0+32768))
 11662  162B  00B5               	movwf	UARTstringWAIT@data+1
 11663  162C  319B  23C2  3195   	fcall	_UARTstringWAIT
 11664                           
 11665                           ;user.c: 114: delayUS(10000);
 11666  162F  3000               	movlw	0
 11667  1630  0020               	movlb	0	; select bank0
 11668  1631  00A8               	movwf	delayUS@US+3
 11669  1632  3000               	movlw	0
 11670  1633  00A7               	movwf	delayUS@US+2
 11671  1634  3027               	movlw	39
 11672  1635  00A6               	movwf	delayUS@US+1
 11673  1636  3010               	movlw	16
 11674  1637  00A5               	movwf	delayUS@US
 11675  1638  319B  23F5  3195   	fcall	_delayUS
 11676                           
 11677                           ;user.c: 115: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 11678  163B  30A0               	movlw	low Init_System@buf
 11679  163C  0020               	movlb	0	; select bank0
 11680  163D  00BD               	movwf	sprintf@sp
 11681  163E  3000               	movlw	high Init_System@buf
 11682  163F  00BE               	movwf	sprintf@sp+1
 11683  1640  3017               	movlw	low (STR_13| (0+32768))
 11684  1641  00BF               	movwf	sprintf@f
 11685  1642  308B               	movlw	high (STR_13| (0+32768))
 11686  1643  00C0               	movwf	sprintf@f+1
 11687  1644  0021               	movlb	1	; select bank1
 11688  1645  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11689  1646  0020               	movlb	0	; select bank0
 11690  1647  00C4               	movwf	?_sprintf+7
 11691  1648  0021               	movlb	1	; select bank1
 11692  1649  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11693  164A  0020               	movlb	0	; select bank0
 11694  164B  00C3               	movwf	?_sprintf+6
 11695  164C  0021               	movlb	1	; select bank1
 11696  164D  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11697  164E  0020               	movlb	0	; select bank0
 11698  164F  00C2               	movwf	?_sprintf+5
 11699  1650  0021               	movlb	1	; select bank1
 11700  1651  0861               	movf	Init_System@Baud^(0+128),w
 11701  1652  0020               	movlb	0	; select bank0
 11702  1653  00C1               	movwf	?_sprintf+4
 11703  1654  3194  249F  3195   	fcall	_sprintf
 11704                           
 11705                           ;user.c: 116: UARTstringWAIT(buf);
 11706  1657  30A0               	movlw	low Init_System@buf
 11707  1658  0020               	movlb	0	; select bank0
 11708  1659  00B4               	movwf	UARTstringWAIT@data
 11709  165A  3000               	movlw	high Init_System@buf
 11710  165B  00B5               	movwf	UARTstringWAIT@data+1
 11711  165C  319B  23C2  3195   	fcall	_UARTstringWAIT
 11712                           
 11713                           ;user.c: 117: if(Parity)
 11714  165F  0021               	movlb	1	; select bank1
 11715  1660  0860               	movf	Init_System@Parity^(0+128),w
 11716  1661  1903               	btfsc	3,2
 11717  1662  2E85               	goto	l7056
 11718                           
 11719                           ;user.c: 118: {
 11720                           ;user.c: 119: switch (Parity)
 11721  1663  2E78               	goto	l7054
 11722  1664                     l7044:	
 11723                           ;user.c: 120: {
 11724                           ;user.c: 121: case 1:
 11725                           
 11726                           
 11727                           ;user.c: 122: UARTstringWAIT(" with Odd parity bit\r\n");
 11728  1664  30EA               	movlw	low (STR_14| (0+32768))
 11729  1665  0020               	movlb	0	; select bank0
 11730  1666  00B4               	movwf	UARTstringWAIT@data
 11731  1667  308A               	movlw	high (STR_14| (0+32768))
 11732  1668  2E89               	goto	L16
 11733  1669                     l7046:	
 11734                           ;user.c: 124: case 2:
 11735                           
 11736                           ;user.c: 123: break;
 11737                           
 11738                           
 11739                           ;user.c: 125: UARTstringWAIT(" with Even parity bit\r\n");
 11740  1669  30BA               	movlw	low (STR_15| (0+32768))
 11741  166A  0020               	movlb	0	; select bank0
 11742  166B  00B4               	movwf	UARTstringWAIT@data
 11743  166C  308A               	movlw	high (STR_15| (0+32768))
 11744  166D  2E89               	goto	L16
 11745  166E                     l7048:	
 11746                           ;user.c: 127: case 3:
 11747                           
 11748                           ;user.c: 126: break;
 11749                           
 11750                           
 11751                           ;user.c: 128: UARTstringWAIT(" with Mark bit\r\n");
 11752  166E  309F               	movlw	low (STR_16| (0+32768))
 11753  166F  0020               	movlb	0	; select bank0
 11754  1670  00B4               	movwf	UARTstringWAIT@data
 11755  1671  308B               	movlw	high (STR_16| (0+32768))
 11756  1672  2E89               	goto	L16
 11757  1673                     l7050:	
 11758                           ;user.c: 130: default:
 11759                           
 11760                           ;user.c: 129: break;
 11761                           
 11762                           
 11763                           ;user.c: 131: UARTstringWAIT(" with Space bit\r\n");
 11764  1673  308D               	movlw	low (STR_17| (0+32768))
 11765  1674  0020               	movlb	0	; select bank0
 11766  1675  00B4               	movwf	UARTstringWAIT@data
 11767  1676  308B               	movlw	high (STR_17| (0+32768))
 11768  1677  2E89               	goto	L16
 11769  1678                     l7054:	
 11770                           ;user.c: 133: }
 11771                           
 11772                           ;user.c: 132: break;
 11773                           
 11774  1678  0021               	movlb	1	; select bank1
 11775  1679  0860               	movf	Init_System@Parity^(0+128),w
 11776                           
 11777                           ; Switch size 1, requested type "space"
 11778                           ; Number of cases is 3, Range of values is 1 to 3
 11779                           ; switch strategies available:
 11780                           ; Name         Instructions Cycles
 11781                           ; simple_byte           10     6 (average)
 11782                           ; direct_byte           15     9 (fixed)
 11783                           ; jumptable            263     9 (fixed)
 11784                           ;	Chosen strategy is simple_byte
 11785  167A  3A01               	xorlw	1	; case 1
 11786  167B  1903               	skipnz
 11787  167C  2E64               	goto	l7044
 11788  167D  3A03               	xorlw	3	; case 2
 11789  167E  1903               	skipnz
 11790  167F  2E69               	goto	l7046
 11791  1680  3A01               	xorlw	1	; case 3
 11792  1681  1903               	skipnz
 11793  1682  2E6E               	goto	l7048
 11794  1683  2E73               	goto	l7050
 11795                           
 11796                           ;user.c: 134: }
 11797  1684  2E8D               	goto	l7058
 11798  1685                     l7056:	
 11799                           
 11800                           ;user.c: 135: else
 11801                           ;user.c: 136: {
 11802                           ;user.c: 137: UARTstringWAIT(" with no parity bit\r\n");
 11803  1685  3011               	movlw	low ((STR_29+22)| (0+32768))
 11804  1686  0020               	movlb	0	; select bank0
 11805  1687  00B4               	movwf	UARTstringWAIT@data
 11806  1688  308A               	movlw	high ((STR_29+22)| (0+32768))
 11807  1689                     L16:	
 11808  1689  00B5               	movwf	UARTstringWAIT@data+1
 11809  168A  319B  23C2  3195   	fcall	_UARTstringWAIT
 11810  168D                     l7058:	
 11811                           
 11812                           ;user.c: 138: }
 11813                           ;user.c: 139: delayUS(10000);
 11814  168D  3000               	movlw	0
 11815  168E  0020               	movlb	0	; select bank0
 11816  168F  00A8               	movwf	delayUS@US+3
 11817  1690  3000               	movlw	0
 11818  1691  00A7               	movwf	delayUS@US+2
 11819  1692  3027               	movlw	39
 11820  1693  00A6               	movwf	delayUS@US+1
 11821  1694  3010               	movlw	16
 11822  1695  00A5               	movwf	delayUS@US
 11823  1696  319B  23F5         	fcall	_delayUS
 11824                           
 11825                           ;user.c: 141: INTCON |= 0x08;
 11826  1698  158B               	bsf	11,3	;volatile
 11827                           
 11828                           ;user.c: 142: INTCONbits.GIE = 1;
 11829  1699  178B               	bsf	11,7	;volatile
 11830  169A  0008               	return
 11831  169B                     __end_of_Init_System:	
 11832                           
 11833                           	psect	text27
 11834  149F                     __ptext27:	
 11835 ;; *************** function _sprintf *****************
 11836 ;; Defined at:
 11837 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11840 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11841 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11842 ;;		 -> STR_31(33), STR_21(21), STR_13(21), 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  _val            4   46[BANK0 ] struct .
 11845 ;;  prec            2   44[BANK0 ] int 
 11846 ;;  c               1   51[BANK0 ] char 
 11847 ;;  ap              1   50[BANK0 ] PTR void [1]
 11848 ;;		 -> ?_sprintf(2), 
 11849 ;;  flag            1   43[BANK0 ] unsigned char 
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  2   29[BANK0 ] int 
 11852 ;; Registers used:
 11853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:       23 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    4
 11866 ;; This function calls:
 11867 ;;		___lldiv
 11868 ;;		___llmod
 11869 ;; This function is called by:
 11870 ;;		_Init_System
 11871 ;;		_SetBaud
 11872 ;;		_PS_2_Update
 11873 ;; This function uses a non-reentrant model
 11874 ;;
 11875                           
 11876                           
 11877                           ;psect for function _sprintf
 11878  149F                     _sprintf:	
 11879                           
 11880                           ;doprnt.c: 494: va_list ap;
 11881                           ;doprnt.c: 499: signed char c;
 11882                           ;doprnt.c: 504: int prec;
 11883                           ;doprnt.c: 508: unsigned char flag;
 11884                           ;doprnt.c: 527: union {
 11885                           ;doprnt.c: 528: unsigned long _val;
 11886                           ;doprnt.c: 529: struct {
 11887                           ;doprnt.c: 530: const char * _cp;
 11888                           ;doprnt.c: 531: unsigned _len;
 11889                           ;doprnt.c: 532: } _str;
 11890                           ;doprnt.c: 533: } _val;
 11891                           ;doprnt.c: 542: *ap = __va_start();
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11895  149F  3041               	movlw	(?_sprintf+4)& (0+255)
 11896  14A0  0020               	movlb	0	; select bank0
 11897  14A1  00C5               	movwf	??_sprintf
 11898  14A2  0845               	movf	??_sprintf,w
 11899  14A3  00D2               	movwf	sprintf@ap
 11900  14A4                     l5966:	
 11901                           ;doprnt.c: 545: while(c = *f++) {
 11902                           
 11903  14A4  0840               	movf	sprintf@f+1,w
 11904  14A5  00C6               	movwf	??_sprintf+1
 11905  14A6  083F               	movf	sprintf@f,w
 11906  14A7  00C5               	movwf	??_sprintf
 11907  14A8  0ABF               	incf	sprintf@f,f
 11908  14A9  1903               	skipnz
 11909  14AA  0AC0               	incf	sprintf@f+1,f
 11910  14AB  0845               	movf	??_sprintf,w
 11911  14AC  0084               	movwf	4
 11912  14AD  0846               	movf	??_sprintf+1,w
 11913  14AE  0085               	movwf	5
 11914  14AF  0800               	movf	0,w	;code access
 11915  14B0  00C7               	movwf	??_sprintf+2
 11916  14B1  0847               	movf	??_sprintf+2,w
 11917  14B2  00D3               	movwf	sprintf@c
 11918  14B3  08D3               	movf	sprintf@c,f
 11919  14B4  1903               	btfsc	3,2
 11920  14B5  2D8D               	goto	l5968
 11921                           
 11922                           ;doprnt.c: 547: if(c != '%')
 11923  14B6  0853               	movf	sprintf@c,w
 11924  14B7  3A25               	xorlw	37
 11925  14B8  1903               	skipnz
 11926  14B9  2CC5               	goto	l5926
 11927                           
 11928                           ;doprnt.c: 549: {
 11929                           ;doprnt.c: 550: ((*sp++ = (c)));
 11930  14BA  083D               	movf	sprintf@sp,w
 11931  14BB  0086               	movwf	6
 11932  14BC  083E               	movf	sprintf@sp+1,w
 11933  14BD  0087               	movwf	7
 11934  14BE  0853               	movf	sprintf@c,w
 11935  14BF  0081               	movwf	1
 11936  14C0  3001               	movlw	1
 11937  14C1  07BD               	addwf	sprintf@sp,f
 11938  14C2  3000               	movlw	0
 11939  14C3  3DBE               	addwfc	sprintf@sp+1,f
 11940                           
 11941                           ;doprnt.c: 551: continue;
 11942  14C4  2CA4               	goto	l5966
 11943  14C5                     l5926:	
 11944                           
 11945                           ;doprnt.c: 552: }
 11946                           ;doprnt.c: 557: flag = 0;
 11947  14C5  01CB               	clrf	sprintf@flag
 11948                           
 11949                           ;doprnt.c: 644: switch(c = *f++) {
 11950                           
 11951                           ;doprnt.c: 642: loop:
 11952  14C6  2CCE               	goto	l5932
 11953  14C7                     l1002:	
 11954                           ;doprnt.c: 650: case 'l':
 11955                           
 11956                           ;doprnt.c: 647: goto alldone;
 11957                           
 11958                           ;doprnt.c: 646: case 0:
 11959                           
 11960                           
 11961                           ;doprnt.c: 652: flag |= 0x10;
 11962  14C7  164B               	bsf	sprintf@flag,4
 11963                           
 11964                           ;doprnt.c: 653: goto loop;
 11965  14C8  2CCE               	goto	l5932
 11966  14C9                     l5928:	
 11967                           ;doprnt.c: 826: case 'u':
 11968                           
 11969                           ;doprnt.c: 822: continue;
 11970                           
 11971                           ;doprnt.c: 811: default:
 11972                           
 11973                           
 11974                           ;doprnt.c: 827: flag |= 0xC0;
 11975  14C9  30C0               	movlw	192
 11976  14CA  00C5               	movwf	??_sprintf
 11977  14CB  0845               	movf	??_sprintf,w
 11978  14CC  04CB               	iorwf	sprintf@flag,f
 11979                           
 11980                           ;doprnt.c: 831: }
 11981                           
 11982                           ;doprnt.c: 828: break;
 11983  14CD  2CE5               	goto	l1005
 11984  14CE                     l5932:	
 11985  14CE  0840               	movf	sprintf@f+1,w
 11986  14CF  00C6               	movwf	??_sprintf+1
 11987  14D0  083F               	movf	sprintf@f,w
 11988  14D1  00C5               	movwf	??_sprintf
 11989  14D2  0ABF               	incf	sprintf@f,f
 11990  14D3  1903               	skipnz
 11991  14D4  0AC0               	incf	sprintf@f+1,f
 11992  14D5  0845               	movf	??_sprintf,w
 11993  14D6  0084               	movwf	4
 11994  14D7  0846               	movf	??_sprintf+1,w
 11995  14D8  0085               	movwf	5
 11996  14D9  0800               	movf	0,w	;code access
 11997  14DA  00D3               	movwf	sprintf@c
 11998                           
 11999                           ; Switch size 1, requested type "space"
 12000                           ; Number of cases is 3, Range of values is 0 to 117
 12001                           ; switch strategies available:
 12002                           ; Name         Instructions Cycles
 12003                           ; simple_byte           10     6 (average)
 12004                           ; direct_byte          242     6 (fixed)
 12005                           ; jumptable            260     6 (fixed)
 12006                           ;	Chosen strategy is simple_byte
 12007  14DB  3A00               	xorlw	0	; case 0
 12008  14DC  1903               	skipnz
 12009  14DD  2D8D               	goto	l5968
 12010  14DE  3A6C               	xorlw	108	; case 108
 12011  14DF  1903               	skipnz
 12012  14E0  2CC7               	goto	l1002
 12013  14E1  3A19               	xorlw	25	; case 117
 12014  14E2  1903               	skipnz
 12015  14E3  2CC9               	goto	l5928
 12016  14E4  2CA4               	goto	l5966
 12017  14E5                     l1005:	
 12018                           
 12019                           ;doprnt.c: 1282: {
 12020                           ;doprnt.c: 1290: if(flag & 0x10)
 12021  14E5  1E4B               	btfss	sprintf@flag,4
 12022  14E6  2CF4               	goto	l5938
 12023                           
 12024                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 12025  14E7  0852               	movf	sprintf@ap,w
 12026  14E8  0086               	movwf	6
 12027  14E9  0187               	clrf	7
 12028  14EA  3F40               	moviw [0]fsr1
 12029  14EB  00CE               	movwf	sprintf@_val
 12030  14EC  3F41               	moviw [1]fsr1
 12031  14ED  00CF               	movwf	sprintf@_val+1
 12032  14EE  3F42               	moviw [2]fsr1
 12033  14EF  00D0               	movwf	sprintf@_val+2
 12034  14F0  3F43               	moviw [3]fsr1
 12035  14F1  00D1               	movwf	sprintf@_val+3
 12036  14F2  3004               	movlw	4
 12037  14F3  2D02               	goto	L17
 12038  14F4                     l5938:	
 12039                           
 12040                           ;doprnt.c: 1292: else
 12041                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12042  14F4  0852               	movf	sprintf@ap,w
 12043  14F5  0086               	movwf	6
 12044  14F6  0187               	clrf	7
 12045  14F7  3F40               	moviw [0]fsr1
 12046  14F8  00C5               	movwf	??_sprintf
 12047  14F9  3F41               	moviw [1]fsr1
 12048  14FA  00C6               	movwf	??_sprintf+1
 12049  14FB  0845               	movf	??_sprintf,w
 12050  14FC  00CE               	movwf	sprintf@_val
 12051  14FD  0846               	movf	??_sprintf+1,w
 12052  14FE  00CF               	movwf	sprintf@_val+1
 12053  14FF  01D0               	clrf	sprintf@_val+2
 12054  1500  01D1               	clrf	sprintf@_val+3
 12055  1501  3002               	movlw	2
 12056  1502                     L17:	
 12057  1502  00C5               	movwf	??_sprintf
 12058  1503  0845               	movf	??_sprintf,w
 12059  1504  07D2               	addwf	sprintf@ap,f
 12060                           
 12061                           ;doprnt.c: 1296: }
 12062                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12063  1505  01D3               	clrf	sprintf@c
 12064  1506  0AD3               	incf	sprintf@c,f
 12065  1507  0853               	movf	sprintf@c,w
 12066  1508  3A0A               	xorlw	10
 12067  1509  1903               	btfsc	3,2
 12068  150A  2D38               	goto	l5956
 12069  150B                     l5948:	
 12070                           
 12071                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 12072  150B  0853               	movf	sprintf@c,w
 12073  150C  00C5               	movwf	??_sprintf
 12074  150D  01C6               	clrf	??_sprintf+1
 12075  150E  35C5               	lslf	??_sprintf,f
 12076  150F  0DC6               	rlf	??_sprintf+1,f
 12077  1510  35C5               	lslf	??_sprintf,f
 12078  1511  0DC6               	rlf	??_sprintf+1,f
 12079  1512  30D3               	movlw	low (_dpowers| (0+32768))
 12080  1513  0745               	addwf	??_sprintf,w
 12081  1514  0084               	movwf	4
 12082  1515  3089               	movlw	high (_dpowers| (0+32768))
 12083  1516  3D46               	addwfc	??_sprintf+1,w
 12084  1517  0085               	movwf	5
 12085  1518  3F00               	moviw [0]fsr0
 12086  1519  00C7               	movwf	??_sprintf+2
 12087  151A  3F01               	moviw [1]fsr0
 12088  151B  00C8               	movwf	??_sprintf+3
 12089  151C  3F02               	moviw [2]fsr0
 12090  151D  00C9               	movwf	??_sprintf+4
 12091  151E  3F03               	moviw [3]fsr0
 12092  151F  00CA               	movwf	??_sprintf+5
 12093  1520  084A               	movf	??_sprintf+5,w
 12094  1521  0251               	subwf	sprintf@_val+3,w
 12095  1522  1D03               	skipz
 12096  1523  2D2E               	goto	u7685
 12097  1524  0849               	movf	??_sprintf+4,w
 12098  1525  0250               	subwf	sprintf@_val+2,w
 12099  1526  1D03               	skipz
 12100  1527  2D2E               	goto	u7685
 12101  1528  0848               	movf	??_sprintf+3,w
 12102  1529  024F               	subwf	sprintf@_val+1,w
 12103  152A  1D03               	skipz
 12104  152B  2D2E               	goto	u7685
 12105  152C  0847               	movf	??_sprintf+2,w
 12106  152D  024E               	subwf	sprintf@_val,w
 12107  152E                     u7685:	
 12108  152E  1C03               	btfss	3,0
 12109  152F  2D38               	goto	l5956
 12110                           
 12111                           ;doprnt.c: 1316: break;
 12112  1530  3001               	movlw	1
 12113  1531  00C5               	movwf	??_sprintf
 12114  1532  0845               	movf	??_sprintf,w
 12115  1533  07D3               	addwf	sprintf@c,f
 12116  1534  0853               	movf	sprintf@c,w
 12117  1535  3A0A               	xorlw	10
 12118  1536  1D03               	skipz
 12119  1537  2D0B               	goto	l5948
 12120  1538                     l5956:	
 12121                           
 12122                           ;doprnt.c: 1431: {
 12123                           ;doprnt.c: 1478: }
 12124                           ;doprnt.c: 1481: prec = c;
 12125  1538  0853               	movf	sprintf@c,w
 12126  1539  00CC               	movwf	sprintf@prec
 12127  153A  01CD               	clrf	sprintf@prec+1
 12128  153B  1BCC               	btfsc	sprintf@prec,7
 12129  153C  03CD               	decf	sprintf@prec+1,f
 12130  153D                     l5964:	
 12131                           ;doprnt.c: 1483: while(prec--) {
 12132                           
 12133  153D  30FF               	movlw	255
 12134  153E  07CC               	addwf	sprintf@prec,f
 12135  153F  30FF               	movlw	255
 12136  1540  3DCD               	addwfc	sprintf@prec+1,f
 12137  1541  30FF               	movlw	255
 12138  1542  064D               	xorwf	sprintf@prec+1,w
 12139  1543  1D03               	skipz
 12140  1544  2D47               	goto	u7705
 12141  1545  30FF               	movlw	255
 12142  1546  064C               	xorwf	sprintf@prec,w
 12143  1547                     u7705:	
 12144  1547  1903               	btfsc	3,2
 12145  1548  2CA4               	goto	l5966
 12146                           
 12147                           ;doprnt.c: 1487: {
 12148                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 12149  1549  3000               	movlw	0
 12150  154A  00B6               	movwf	___llmod@divisor+3
 12151  154B  3000               	movlw	0
 12152  154C  00B5               	movwf	___llmod@divisor+2
 12153  154D  3000               	movlw	0
 12154  154E  00B4               	movwf	___llmod@divisor+1
 12155  154F  300A               	movlw	10
 12156  1550  00B3               	movwf	___llmod@divisor
 12157  1551  084D               	movf	sprintf@prec+1,w
 12158  1552  0085               	movwf	5
 12159  1553  084C               	movf	sprintf@prec,w
 12160  1554  0084               	movwf	4
 12161  1555  3584               	lslf	4,f
 12162  1556  0D85               	rlf	5,f
 12163  1557  3584               	lslf	4,f
 12164  1558  0D85               	rlf	5,f
 12165  1559  30D3               	movlw	low (_dpowers| (0+32768))
 12166  155A  0784               	addwf	4,f
 12167  155B  3089               	movlw	high (_dpowers| (0+32768))
 12168  155C  3D85               	addwfc	5,f
 12169  155D  3F00               	moviw [0]fsr0
 12170  155E  00A5               	movwf	___lldiv@divisor
 12171  155F  3F01               	moviw [1]fsr0
 12172  1560  00A6               	movwf	___lldiv@divisor+1
 12173  1561  3F02               	moviw [2]fsr0
 12174  1562  00A7               	movwf	___lldiv@divisor+2
 12175  1563  3F03               	moviw [3]fsr0
 12176  1564  00A8               	movwf	___lldiv@divisor+3
 12177  1565  0851               	movf	sprintf@_val+3,w
 12178  1566  00AC               	movwf	___lldiv@dividend+3
 12179  1567  0850               	movf	sprintf@_val+2,w
 12180  1568  00AB               	movwf	___lldiv@dividend+2
 12181  1569  084F               	movf	sprintf@_val+1,w
 12182  156A  00AA               	movwf	___lldiv@dividend+1
 12183  156B  084E               	movf	sprintf@_val,w
 12184  156C  00A9               	movwf	___lldiv@dividend
 12185  156D  319D  25DB  3194   	fcall	___lldiv
 12186  1570  0020               	movlb	0	; select bank0
 12187  1571  0828               	movf	?___lldiv+3,w
 12188  1572  00BA               	movwf	___llmod@dividend+3
 12189  1573  0827               	movf	?___lldiv+2,w
 12190  1574  00B9               	movwf	___llmod@dividend+2
 12191  1575  0826               	movf	?___lldiv+1,w
 12192  1576  00B8               	movwf	___llmod@dividend+1
 12193  1577  0825               	movf	?___lldiv,w
 12194  1578  00B7               	movwf	___llmod@dividend
 12195  1579  319C  2469  3194   	fcall	___llmod
 12196  157C  0020               	movlb	0	; select bank0
 12197  157D  0833               	movf	?___llmod,w
 12198  157E  3E30               	addlw	48
 12199  157F  00C5               	movwf	??_sprintf
 12200  1580  0845               	movf	??_sprintf,w
 12201  1581  00D3               	movwf	sprintf@c
 12202                           
 12203                           ;doprnt.c: 1532: }
 12204                           ;doprnt.c: 1533: ((*sp++ = (c)));
 12205  1582  083D               	movf	sprintf@sp,w
 12206  1583  0086               	movwf	6
 12207  1584  083E               	movf	sprintf@sp+1,w
 12208  1585  0087               	movwf	7
 12209  1586  0853               	movf	sprintf@c,w
 12210  1587  0081               	movwf	1
 12211  1588  3001               	movlw	1
 12212  1589  07BD               	addwf	sprintf@sp,f
 12213  158A  3000               	movlw	0
 12214  158B  3DBE               	addwfc	sprintf@sp+1,f
 12215  158C  2D3D               	goto	l5964
 12216  158D                     l5968:	
 12217                           ;doprnt.c: 1534: }
 12218                           ;doprnt.c: 1542: }
 12219                           ;doprnt.c: 1544: alldone:
 12220                           
 12221                           
 12222                           ;doprnt.c: 1547: *sp = 0;
 12223  158D  083D               	movf	sprintf@sp,w
 12224  158E  0086               	movwf	6
 12225  158F  083E               	movf	sprintf@sp+1,w
 12226  1590  0087               	movwf	7
 12227  1591  0181               	clrf	1
 12228  1592  0008               	return
 12229  1593                     __end_of_sprintf:	
 12230                           ;doprnt.c: 1549: return 0;
 12231                           ;	Return value of _sprintf is never used
 12232                           
 12233                           
 12234                           	psect	text28
 12235  1C69                     __ptext28:	
 12236 ;; *************** function ___llmod *****************
 12237 ;; Defined at:
 12238 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;  divisor         4   19[BANK0 ] unsigned long 
 12241 ;;  dividend        4   23[BANK0 ] unsigned long 
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;  counter         1   28[BANK0 ] unsigned char 
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  4   19[BANK0 ] unsigned long 
 12246 ;; Registers used:
 12247 ;;		wreg, status,2, status,0
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12253 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;Total ram usage:       10 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    3
 12260 ;; This function calls:
 12261 ;;		Nothing
 12262 ;; This function is called by:
 12263 ;;		_sprintf
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           
 12268                           ;psect for function ___llmod
 12269  1C69                     ___llmod:	
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12273  1C69  0020               	movlb	0	; select bank0
 12274  1C6A  0836               	movf	___llmod@divisor+3,w
 12275  1C6B  0435               	iorwf	___llmod@divisor+2,w
 12276  1C6C  0434               	iorwf	___llmod@divisor+1,w
 12277  1C6D  0433               	iorwf	___llmod@divisor,w
 12278  1C6E  1903               	skipnz
 12279  1C6F  2CA3               	goto	l5796
 12280  1C70  01BC               	clrf	___llmod@counter
 12281  1C71  0ABC               	incf	___llmod@counter,f
 12282  1C72                     l5786:	
 12283  1C72  1BB6               	btfsc	___llmod@divisor+3,7
 12284  1C73  2C80               	goto	l5788
 12285  1C74  3001               	movlw	1
 12286  1C75                     u7495:	
 12287  1C75  35B3               	lslf	___llmod@divisor,f
 12288  1C76  0DB4               	rlf	___llmod@divisor+1,f
 12289  1C77  0DB5               	rlf	___llmod@divisor+2,f
 12290  1C78  0DB6               	rlf	___llmod@divisor+3,f
 12291  1C79  0B89               	decfsz	9,f
 12292  1C7A  2C75               	goto	u7495
 12293  1C7B  3001               	movlw	1
 12294  1C7C  00BB               	movwf	??___llmod
 12295  1C7D  083B               	movf	??___llmod,w
 12296  1C7E  07BC               	addwf	___llmod@counter,f
 12297  1C7F  2C72               	goto	l5786
 12298  1C80                     l5788:	
 12299  1C80  0836               	movf	___llmod@divisor+3,w
 12300  1C81  023A               	subwf	___llmod@dividend+3,w
 12301  1C82  1D03               	skipz
 12302  1C83  2C8E               	goto	u7515
 12303  1C84  0835               	movf	___llmod@divisor+2,w
 12304  1C85  0239               	subwf	___llmod@dividend+2,w
 12305  1C86  1D03               	skipz
 12306  1C87  2C8E               	goto	u7515
 12307  1C88  0834               	movf	___llmod@divisor+1,w
 12308  1C89  0238               	subwf	___llmod@dividend+1,w
 12309  1C8A  1D03               	skipz
 12310  1C8B  2C8E               	goto	u7515
 12311  1C8C  0833               	movf	___llmod@divisor,w
 12312  1C8D  0237               	subwf	___llmod@dividend,w
 12313  1C8E                     u7515:	
 12314  1C8E  1C03               	skipc
 12315  1C8F  2C98               	goto	l5792
 12316  1C90  0833               	movf	___llmod@divisor,w
 12317  1C91  02B7               	subwf	___llmod@dividend,f
 12318  1C92  0834               	movf	___llmod@divisor+1,w
 12319  1C93  3BB8               	subwfb	___llmod@dividend+1,f
 12320  1C94  0835               	movf	___llmod@divisor+2,w
 12321  1C95  3BB9               	subwfb	___llmod@dividend+2,f
 12322  1C96  0836               	movf	___llmod@divisor+3,w
 12323  1C97  3BBA               	subwfb	___llmod@dividend+3,f
 12324  1C98                     l5792:	
 12325  1C98  3001               	movlw	1
 12326  1C99                     u7525:	
 12327  1C99  36B6               	lsrf	___llmod@divisor+3,f
 12328  1C9A  0CB5               	rrf	___llmod@divisor+2,f
 12329  1C9B  0CB4               	rrf	___llmod@divisor+1,f
 12330  1C9C  0CB3               	rrf	___llmod@divisor,f
 12331  1C9D  0B89               	decfsz	9,f
 12332  1C9E  2C99               	goto	u7525
 12333  1C9F  3001               	movlw	1
 12334  1CA0  02BC               	subwf	___llmod@counter,f
 12335  1CA1  1D03               	btfss	3,2
 12336  1CA2  2C80               	goto	l5788
 12337  1CA3                     l5796:	
 12338  1CA3  083A               	movf	___llmod@dividend+3,w
 12339  1CA4  00B6               	movwf	?___llmod+3
 12340  1CA5  0839               	movf	___llmod@dividend+2,w
 12341  1CA6  00B5               	movwf	?___llmod+2
 12342  1CA7  0838               	movf	___llmod@dividend+1,w
 12343  1CA8  00B4               	movwf	?___llmod+1
 12344  1CA9  0837               	movf	___llmod@dividend,w
 12345  1CAA  00B3               	movwf	?___llmod
 12346  1CAB  0008               	return
 12347  1CAC                     __end_of___llmod:	
 12348                           
 12349                           	psect	text29
 12350  1BC2                     __ptext29:	
 12351 ;; *************** function _UARTstringWAIT *****************
 12352 ;; Defined at:
 12353 ;;		line 338 in file "UART.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12356 ;;		 -> STR_37(29), STR_36(22), STR_35(18), STR_34(17), 
 12357 ;;		 -> STR_33(24), STR_32(23), PS_2_Update@buf(60), STR_30(3), 
 12358 ;;		 -> STR_29(44), STR_28(18), STR_27(3), STR_26(22), 
 12359 ;;		 -> STR_25(18), STR_24(17), STR_23(24), STR_22(23), 
 12360 ;;		 -> SetBaud@buf(50), STR_20(24), STR_19(3), STR_18(22), 
 12361 ;;		 -> STR_17(18), STR_16(17), STR_15(24), STR_14(23), 
 12362 ;;		 -> Init_System@buf(60), STR_12(3), STR_11(20), STR_10(19), 
 12363 ;;		 -> STR_9(17), STR_8(22), STR_7(21), STR_6(24), 
 12364 ;;		 -> STR_5(35), STR_4(3), Version(4), STR_3(19), 
 12365 ;;		 -> STR_2(26), STR_1(3), 
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;		None
 12368 ;; Return value:  Size  Location     Type
 12369 ;;		None               void
 12370 ;; Registers used:
 12371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;Total ram usage:        4 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    5
 12384 ;; This function calls:
 12385 ;;		_UARTchar
 12386 ;;		_delayUS
 12387 ;; This function is called by:
 12388 ;;		_main
 12389 ;;		_Init_System
 12390 ;;		_SetBaud
 12391 ;;		_PS_2_Update
 12392 ;; This function uses a non-reentrant model
 12393 ;;
 12394                           
 12395                           
 12396                           ;psect for function _UARTstringWAIT
 12397  1BC2                     _UARTstringWAIT:	
 12398  1BC2                     l417:	
 12399                           ;incstack = 0
 12400                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12401                           ;UART.c: 340: do
 12402                           
 12403                           
 12404                           ;UART.c: 341: {
 12405                           ;UART.c: 342: delayUS(5000);
 12406  1BC2  3000               	movlw	0
 12407  1BC3  0020               	movlb	0	; select bank0
 12408  1BC4  00A8               	movwf	delayUS@US+3
 12409  1BC5  3000               	movlw	0
 12410  1BC6  00A7               	movwf	delayUS@US+2
 12411  1BC7  3013               	movlw	19
 12412  1BC8  00A6               	movwf	delayUS@US+1
 12413  1BC9  3088               	movlw	136
 12414  1BCA  00A5               	movwf	delayUS@US
 12415  1BCB  319B  23F5  319B   	fcall	_delayUS
 12416                           
 12417                           ;UART.c: 343: if(*data != 0)
 12418  1BCE  0020               	movlb	0	; select bank0
 12419  1BCF  0834               	movf	UARTstringWAIT@data,w
 12420  1BD0  0084               	movwf	4
 12421  1BD1  0835               	movf	UARTstringWAIT@data+1,w
 12422  1BD2  0085               	movwf	5
 12423  1BD3  0800               	movf	0,w	;code access
 12424  1BD4  3A00               	xorlw	0
 12425  1BD5  1903               	skipnz
 12426  1BD6  2BE4               	goto	l5830
 12427                           
 12428                           ;UART.c: 344: {
 12429                           ;UART.c: 345: UARTchar(*data, 0, 0);
 12430  1BD7  01AD               	clrf	UARTchar@NinethBit_override
 12431  1BD8  01AE               	clrf	UARTchar@NinethBit_override_data
 12432  1BD9  0834               	movf	UARTstringWAIT@data,w
 12433  1BDA  0084               	movwf	4
 12434  1BDB  0835               	movf	UARTstringWAIT@data+1,w
 12435  1BDC  0085               	movwf	5
 12436  1BDD  0800               	movf	0,w	;code access
 12437  1BDE  319D  253A  319B   	fcall	_UARTchar
 12438  1BE1                     l419:	
 12439                           ;UART.c: 346: while((!TX1STAbits.TRMT));
 12440                           
 12441  1BE1  0023               	movlb	3	; select bank3
 12442  1BE2  1C9E               	btfss	30,1	;volatile
 12443  1BE3  2BE1               	goto	l419
 12444  1BE4                     l5830:	
 12445                           
 12446                           ;UART.c: 347: }
 12447                           ;UART.c: 348: } while( *data++);
 12448  1BE4  0020               	movlb	0	; select bank0
 12449  1BE5  0835               	movf	UARTstringWAIT@data+1,w
 12450  1BE6  00B7               	movwf	??_UARTstringWAIT+1
 12451  1BE7  0834               	movf	UARTstringWAIT@data,w
 12452  1BE8  00B6               	movwf	??_UARTstringWAIT
 12453  1BE9  0AB4               	incf	UARTstringWAIT@data,f
 12454  1BEA  1903               	skipnz
 12455  1BEB  0AB5               	incf	UARTstringWAIT@data+1,f
 12456  1BEC  0836               	movf	??_UARTstringWAIT,w
 12457  1BED  0084               	movwf	4
 12458  1BEE  0837               	movf	??_UARTstringWAIT+1,w
 12459  1BEF  0085               	movwf	5
 12460  1BF0  0800               	movf	0,w	;code access
 12461  1BF1  3800               	iorlw	0
 12462  1BF2  1903               	btfsc	3,2
 12463  1BF3  0008               	return
 12464  1BF4  2BC2               	goto	l417
 12465  1BF5                     __end_of_UARTstringWAIT:	
 12466                           
 12467                           	psect	text30
 12468  1D3A                     __ptext30:	
 12469 ;; *************** function _UARTchar *****************
 12470 ;; Defined at:
 12471 ;;		line 227 in file "UART.c"
 12472 ;; Parameters:    Size  Location     Type
 12473 ;;  data            1    wreg     unsigned char 
 12474 ;;  NinethBit_ov    1   13[BANK0 ] unsigned char 
 12475 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  data            1   19[BANK0 ] unsigned char 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;		None               void
 12480 ;; Registers used:
 12481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;Total ram usage:        7 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    4
 12494 ;; This function calls:
 12495 ;;		_CheckSum_byte
 12496 ;; This function is called by:
 12497 ;;		_UARTstringWAIT
 12498 ;;		_PS_2_Update
 12499 ;;		_UARTstring
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _UARTchar
 12505  1D3A                     _UARTchar:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12509                           ;UARTchar@data stored from wreg
 12510  1D3A  0020               	movlb	0	; select bank0
 12511  1D3B  00B3               	movwf	UARTchar@data
 12512                           
 12513                           ;UART.c: 229: if(TXSTAbits.TX9)
 12514  1D3C  0023               	movlb	3	; select bank3
 12515  1D3D  1F1E               	btfss	30,6	;volatile
 12516  1D3E  2D85               	goto	l5632
 12517                           
 12518                           ;UART.c: 230: {
 12519                           ;UART.c: 232: if(!NinethBit_override)
 12520  1D3F  0020               	movlb	0	; select bank0
 12521  1D40  08AD               	movf	UARTchar@NinethBit_override,f
 12522  1D41  1903               	btfsc	3,2
 12523  1D42  2D6C               	goto	l5628
 12524  1D43  2D79               	goto	l5630
 12525  1D44                     l5622:	
 12526                           ;UART.c: 236: {
 12527                           ;UART.c: 237: case 1:
 12528                           
 12529                           ;UART.c: 233: {
 12530                           ;UART.c: 235: switch (PARITY)
 12531                           
 12532                           
 12533                           ;UART.c: 238: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12534  1D44  0020               	movlb	0	; select bank0
 12535  1D45  0833               	movf	UARTchar@data,w
 12536  1D46  00AF               	movwf	??_UARTchar
 12537  1D47  01B0               	clrf	??_UARTchar+1
 12538  1D48  082F               	movf	??_UARTchar,w
 12539  1D49  00A5               	movwf	CheckSum_byte@This
 12540  1D4A  0830               	movf	??_UARTchar+1,w
 12541  1D4B  00A6               	movwf	CheckSum_byte@This+1
 12542  1D4C  3003               	movlw	3
 12543  1D4D  2D57               	goto	L20
 12544  1D4E                     l5624:	
 12545                           ;UART.c: 240: case 2:
 12546                           
 12547                           ;UART.c: 239: break;
 12548                           
 12549                           
 12550                           ;UART.c: 241: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12551  1D4E  0020               	movlb	0	; select bank0
 12552  1D4F  0833               	movf	UARTchar@data,w
 12553  1D50  00AF               	movwf	??_UARTchar
 12554  1D51  01B0               	clrf	??_UARTchar+1
 12555  1D52  082F               	movf	??_UARTchar,w
 12556  1D53  00A5               	movwf	CheckSum_byte@This
 12557  1D54  0830               	movf	??_UARTchar+1,w
 12558  1D55  00A6               	movwf	CheckSum_byte@This+1
 12559  1D56  3002               	movlw	2
 12560  1D57                     L20:	
 12561  1D57  00B1               	movwf	??_UARTchar+2
 12562  1D58  0831               	movf	??_UARTchar+2,w
 12563  1D59  00A7               	movwf	CheckSum_byte@Odd_Even
 12564  1D5A  319A  22FB  319D   	fcall	_CheckSum_byte
 12565  1D5D  0020               	movlb	0	; select bank0
 12566  1D5E  00B2               	movwf	??_UARTchar+3
 12567  1D5F  0023               	movlb	3	; select bank3
 12568  1D60  081E               	movf	30,w	;volatile
 12569  1D61  0020               	movlb	0	; select bank0
 12570  1D62  0632               	xorwf	??_UARTchar+3,w
 12571  1D63  39FE               	andlw	-2
 12572  1D64  0632               	xorwf	??_UARTchar+3,w
 12573  1D65  2D83               	goto	L19
 12574  1D66                     l392:	
 12575                           ;UART.c: 243: case 3:
 12576                           
 12577                           ;UART.c: 242: break;
 12578                           
 12579                           
 12580                           ;UART.c: 244: TXSTAbits.TX9D = 1;
 12581  1D66  0023               	movlb	3	; select bank3
 12582  1D67  141E               	bsf	30,0	;volatile
 12583                           
 12584                           ;UART.c: 245: break;
 12585  1D68  2D85               	goto	l5632
 12586  1D69                     l393:	
 12587                           ;UART.c: 246: default:
 12588                           
 12589                           
 12590                           ;UART.c: 247: TXSTAbits.TX9D = 0;
 12591  1D69  0023               	movlb	3	; select bank3
 12592  1D6A  101E               	bcf	30,0	;volatile
 12593                           
 12594                           ;UART.c: 249: }
 12595                           
 12596                           ;UART.c: 248: break;
 12597  1D6B  2D85               	goto	l5632
 12598  1D6C                     l5628:	
 12599  1D6C  0021               	movlb	1	; select bank1
 12600  1D6D  086A               	movf	_PARITY^(0+128),w
 12601                           
 12602                           ; Switch size 1, requested type "space"
 12603                           ; Number of cases is 3, Range of values is 1 to 3
 12604                           ; switch strategies available:
 12605                           ; Name         Instructions Cycles
 12606                           ; simple_byte           10     6 (average)
 12607                           ; direct_byte           15     9 (fixed)
 12608                           ; jumptable            263     9 (fixed)
 12609                           ;	Chosen strategy is simple_byte
 12610  1D6E  3A01               	xorlw	1	; case 1
 12611  1D6F  1903               	skipnz
 12612  1D70  2D44               	goto	l5622
 12613  1D71  3A03               	xorlw	3	; case 2
 12614  1D72  1903               	skipnz
 12615  1D73  2D4E               	goto	l5624
 12616  1D74  3A01               	xorlw	1	; case 3
 12617  1D75  1903               	skipnz
 12618  1D76  2D66               	goto	l392
 12619  1D77  2D69               	goto	l393
 12620                           
 12621                           ;UART.c: 250: }
 12622  1D78  2D85               	goto	l5632
 12623  1D79                     l5630:	
 12624                           
 12625                           ;UART.c: 251: else
 12626                           ;UART.c: 252: {
 12627                           ;UART.c: 253: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12628  1D79  3001               	movlw	1
 12629  1D7A  0020               	movlb	0	; select bank0
 12630  1D7B  052E               	andwf	UARTchar@NinethBit_override_data,w
 12631  1D7C  00AF               	movwf	??_UARTchar
 12632  1D7D  0023               	movlb	3	; select bank3
 12633  1D7E  081E               	movf	30,w	;volatile
 12634  1D7F  0020               	movlb	0	; select bank0
 12635  1D80  062F               	xorwf	??_UARTchar,w
 12636  1D81  39FE               	andlw	-2
 12637  1D82  062F               	xorwf	??_UARTchar,w
 12638  1D83                     L19:	
 12639  1D83  0023               	movlb	3	; select bank3
 12640  1D84  009E               	movwf	30	;volatile
 12641  1D85                     l5632:	
 12642                           
 12643                           ;UART.c: 254: }
 12644                           ;UART.c: 255: }
 12645                           ;UART.c: 256: TXREG = data;
 12646  1D85  0020               	movlb	0	; select bank0
 12647  1D86  0833               	movf	UARTchar@data,w
 12648  1D87  0023               	movlb	3	; select bank3
 12649  1D88  009A               	movwf	26	;volatile
 12650  1D89  0008               	return
 12651  1D8A                     __end_of_UARTchar:	
 12652                           
 12653                           	psect	text31
 12654  1F36                     __ptext31:	
 12655 ;; *************** function _ReadBaud *****************
 12656 ;; Defined at:
 12657 ;;		line 187 in file "FLASH.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  row             2   23[BANK0 ] unsigned int 
 12660 ;;  column          1   25[BANK0 ] unsigned char 
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  temp            4   35[BANK0 ] unsigned long 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  4   23[BANK0 ] unsigned long 
 12665 ;; Registers used:
 12666 ;;		wreg, status,2, status,0, pclath, cstack
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;Total ram usage:       16 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    5
 12679 ;; This function calls:
 12680 ;;		_ReadFlash_4Byte
 12681 ;; This function is called by:
 12682 ;;		_Init_System
 12683 ;;		_SetBaud
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           
 12688                           ;psect for function _ReadBaud
 12689  1F36                     _ReadBaud:	
 12690                           
 12691                           ;FLASH.c: 189: unsigned long temp;
 12692                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12696  1F36  0020               	movlb	0	; select bank0
 12697  1F37  0838               	movf	ReadBaud@row+1,w
 12698  1F38  01AB               	clrf	ReadFlash_4Byte@row+1
 12699  1F39  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12700  1F3A  0837               	movf	ReadBaud@row,w
 12701  1F3B  01AA               	clrf	ReadFlash_4Byte@row
 12702  1F3C  07AA               	addwf	ReadFlash_4Byte@row,f
 12703  1F3D  0839               	movf	ReadBaud@column,w
 12704  1F3E  00BB               	movwf	??_ReadBaud
 12705  1F3F  083B               	movf	??_ReadBaud,w
 12706  1F40  00AC               	movwf	ReadFlash_4Byte@column
 12707  1F41  319D  258A  319F   	fcall	_ReadFlash_4Byte
 12708  1F44  0020               	movlb	0	; select bank0
 12709  1F45  082D               	movf	?_ReadFlash_4Byte+3,w
 12710  1F46  00C6               	movwf	ReadBaud@temp+3
 12711  1F47  082C               	movf	?_ReadFlash_4Byte+2,w
 12712  1F48  00C5               	movwf	ReadBaud@temp+2
 12713  1F49  082B               	movf	?_ReadFlash_4Byte+1,w
 12714  1F4A  00C4               	movwf	ReadBaud@temp+1
 12715  1F4B  082A               	movf	?_ReadFlash_4Byte,w
 12716  1F4C  00C3               	movwf	ReadBaud@temp
 12717                           
 12718                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12719  1F4D  30FF               	movlw	255
 12720  1F4E  0543               	andwf	ReadBaud@temp,w
 12721  1F4F  0024               	movlb	4	; select bank4
 12722  1F50  00B2               	movwf	(_MEM^(0+512)+2)
 12723  1F51  303F               	movlw	63
 12724  1F52  0020               	movlb	0	; select bank0
 12725  1F53  0544               	andwf	ReadBaud@temp+1,w
 12726  1F54  0024               	movlb	4	; select bank4
 12727  1F55  00B3               	movwf	((_MEM+1)^(0+512)+2)
 12728                           
 12729                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12730  1F56  0020               	movlb	0	; select bank0
 12731  1F57  0843               	movf	ReadBaud@temp,w
 12732  1F58  00BB               	movwf	??_ReadBaud
 12733  1F59  0844               	movf	ReadBaud@temp+1,w
 12734  1F5A  00BC               	movwf	??_ReadBaud+1
 12735  1F5B  0845               	movf	ReadBaud@temp+2,w
 12736  1F5C  00BD               	movwf	??_ReadBaud+2
 12737  1F5D  0846               	movf	ReadBaud@temp+3,w
 12738  1F5E  00BE               	movwf	??_ReadBaud+3
 12739  1F5F  300E               	movlw	14
 12740  1F60                     u7615:	
 12741  1F60  36BE               	lsrf	??_ReadBaud+3,f
 12742  1F61  0CBD               	rrf	??_ReadBaud+2,f
 12743  1F62  0CBC               	rrf	??_ReadBaud+1,f
 12744  1F63  0CBB               	rrf	??_ReadBaud,f
 12745  1F64  0B89               	decfsz	9,f
 12746  1F65  2F60               	goto	u7615
 12747  1F66  30FF               	movlw	255
 12748  1F67  053B               	andwf	??_ReadBaud,w
 12749  1F68  0024               	movlb	4	; select bank4
 12750  1F69  00B0               	movwf	_MEM^(0+512)
 12751  1F6A  303F               	movlw	63
 12752  1F6B  0020               	movlb	0	; select bank0
 12753  1F6C  053C               	andwf	??_ReadBaud+1,w
 12754  1F6D  0024               	movlb	4	; select bank4
 12755  1F6E  00B1               	movwf	(_MEM+1)^(0+512)
 12756                           
 12757                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12758  1F6F  0832               	movf	(_MEM^(0+512)+2),w
 12759  1F70  0020               	movlb	0	; select bank0
 12760  1F71  00BB               	movwf	??_ReadBaud
 12761  1F72  0024               	movlb	4	; select bank4
 12762  1F73  0833               	movf	((_MEM+1)^(0+512)+2),w
 12763  1F74  0020               	movlb	0	; select bank0
 12764  1F75  00BC               	movwf	??_ReadBaud+1
 12765  1F76  01BD               	clrf	??_ReadBaud+2
 12766  1F77  01BE               	clrf	??_ReadBaud+3
 12767  1F78  0024               	movlb	4	; select bank4
 12768  1F79  0830               	movf	_MEM^(0+512),w
 12769  1F7A  0020               	movlb	0	; select bank0
 12770  1F7B  00BF               	movwf	??_ReadBaud+4
 12771  1F7C  0024               	movlb	4	; select bank4
 12772  1F7D  0831               	movf	(_MEM+1)^(0+512),w
 12773  1F7E  0020               	movlb	0	; select bank0
 12774  1F7F  00C0               	movwf	??_ReadBaud+5
 12775  1F80  01C1               	clrf	??_ReadBaud+6
 12776  1F81  01C2               	clrf	??_ReadBaud+7
 12777  1F82  300C               	movlw	12
 12778  1F83                     u7625:	
 12779  1F83  35BF               	lslf	??_ReadBaud+4,f
 12780  1F84  0DC0               	rlf	??_ReadBaud+5,f
 12781  1F85  0DC1               	rlf	??_ReadBaud+6,f
 12782  1F86  0DC2               	rlf	??_ReadBaud+7,f
 12783  1F87  0B89               	decfsz	9,f
 12784  1F88  2F83               	goto	u7625
 12785  1F89  083F               	movf	??_ReadBaud+4,w
 12786  1F8A  07BB               	addwf	??_ReadBaud,f
 12787  1F8B  0840               	movf	??_ReadBaud+5,w
 12788  1F8C  3DBC               	addwfc	??_ReadBaud+1,f
 12789  1F8D  0841               	movf	??_ReadBaud+6,w
 12790  1F8E  3DBD               	addwfc	??_ReadBaud+2,f
 12791  1F8F  0842               	movf	??_ReadBaud+7,w
 12792  1F90  3DBE               	addwfc	??_ReadBaud+3,f
 12793  1F91  083E               	movf	??_ReadBaud+3,w
 12794  1F92  00BA               	movwf	?_ReadBaud+3
 12795  1F93  083D               	movf	??_ReadBaud+2,w
 12796  1F94  00B9               	movwf	?_ReadBaud+2
 12797  1F95  083C               	movf	??_ReadBaud+1,w
 12798  1F96  00B8               	movwf	?_ReadBaud+1
 12799  1F97  083B               	movf	??_ReadBaud,w
 12800  1F98  00B7               	movwf	?_ReadBaud
 12801  1F99  0008               	return
 12802  1F9A                     __end_of_ReadBaud:	
 12803                           
 12804                           	psect	text32
 12805  1D8A                     __ptext32:	
 12806 ;; *************** function _ReadFlash_4Byte *****************
 12807 ;; Defined at:
 12808 ;;		line 62 in file "FLASH.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;  row             2   10[BANK0 ] unsigned int 
 12811 ;;  column          1   12[BANK0 ] unsigned char 
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;  temp            4   19[BANK0 ] unsigned long 
 12814 ;; Return value:  Size  Location     Type
 12815 ;;                  4   10[BANK0 ] unsigned long 
 12816 ;; Registers used:
 12817 ;;		wreg, status,2, status,0, pclath, cstack
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12826 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;Total ram usage:       13 bytes
 12828 ;; Hardware stack levels used:    1
 12829 ;; Hardware stack levels required when called:    4
 12830 ;; This function calls:
 12831 ;;		_ReadFlash_2Byte
 12832 ;; This function is called by:
 12833 ;;		_ReadBaud
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           
 12838                           ;psect for function _ReadFlash_4Byte
 12839  1D8A                     _ReadFlash_4Byte:	
 12840                           
 12841                           ;FLASH.c: 64: unsigned long temp =0;
 12842                           
 12843                           ;incstack = 0
 12844                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12845  1D8A  3000               	movlw	0
 12846  1D8B  0020               	movlb	0	; select bank0
 12847  1D8C  00B6               	movwf	ReadFlash_4Byte@temp+3
 12848  1D8D  3000               	movlw	0
 12849  1D8E  00B5               	movwf	ReadFlash_4Byte@temp+2
 12850  1D8F  3000               	movlw	0
 12851  1D90  00B4               	movwf	ReadFlash_4Byte@temp+1
 12852  1D91  3000               	movlw	0
 12853  1D92  00B3               	movwf	ReadFlash_4Byte@temp
 12854                           
 12855                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12856  1D93  082B               	movf	ReadFlash_4Byte@row+1,w
 12857  1D94  01A6               	clrf	ReadFlash_2Byte@row+1
 12858  1D95  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12859  1D96  082A               	movf	ReadFlash_4Byte@row,w
 12860  1D97  01A5               	clrf	ReadFlash_2Byte@row
 12861  1D98  07A5               	addwf	ReadFlash_2Byte@row,f
 12862  1D99  082C               	movf	ReadFlash_4Byte@column,w
 12863  1D9A  00AE               	movwf	??_ReadFlash_4Byte
 12864  1D9B  082E               	movf	??_ReadFlash_4Byte,w
 12865  1D9C  00A7               	movwf	ReadFlash_2Byte@column
 12866  1D9D  319B  235D  319D   	fcall	_ReadFlash_2Byte
 12867  1DA0  0020               	movlb	0	; select bank0
 12868  1DA1  0825               	movf	?_ReadFlash_2Byte,w
 12869  1DA2  00AF               	movwf	??_ReadFlash_4Byte+1
 12870  1DA3  0826               	movf	?_ReadFlash_2Byte+1,w
 12871  1DA4  00B0               	movwf	??_ReadFlash_4Byte+2
 12872  1DA5  01B1               	clrf	??_ReadFlash_4Byte+3
 12873  1DA6  01B2               	clrf	??_ReadFlash_4Byte+4
 12874  1DA7  3010               	movlw	16
 12875  1DA8                     u7365:	
 12876  1DA8  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12877  1DA9  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12878  1DAA  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12879  1DAB  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12880  1DAC  0B89               	decfsz	9,f
 12881  1DAD  2DA8               	goto	u7365
 12882  1DAE  0832               	movf	??_ReadFlash_4Byte+4,w
 12883  1DAF  00B6               	movwf	ReadFlash_4Byte@temp+3
 12884  1DB0  0831               	movf	??_ReadFlash_4Byte+3,w
 12885  1DB1  00B5               	movwf	ReadFlash_4Byte@temp+2
 12886  1DB2  0830               	movf	??_ReadFlash_4Byte+2,w
 12887  1DB3  00B4               	movwf	ReadFlash_4Byte@temp+1
 12888  1DB4  082F               	movf	??_ReadFlash_4Byte+1,w
 12889  1DB5  00B3               	movwf	ReadFlash_4Byte@temp
 12890                           
 12891                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12892  1DB6  082B               	movf	ReadFlash_4Byte@row+1,w
 12893  1DB7  01A6               	clrf	ReadFlash_2Byte@row+1
 12894  1DB8  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12895  1DB9  082A               	movf	ReadFlash_4Byte@row,w
 12896  1DBA  01A5               	clrf	ReadFlash_2Byte@row
 12897  1DBB  07A5               	addwf	ReadFlash_2Byte@row,f
 12898  1DBC  082C               	movf	ReadFlash_4Byte@column,w
 12899  1DBD  3E01               	addlw	1
 12900  1DBE  00AE               	movwf	??_ReadFlash_4Byte
 12901  1DBF  082E               	movf	??_ReadFlash_4Byte,w
 12902  1DC0  00A7               	movwf	ReadFlash_2Byte@column
 12903  1DC1  319B  235D         	fcall	_ReadFlash_2Byte
 12904  1DC3  0020               	movlb	0	; select bank0
 12905  1DC4  0825               	movf	?_ReadFlash_2Byte,w
 12906  1DC5  00AF               	movwf	??_ReadFlash_4Byte+1
 12907  1DC6  0826               	movf	?_ReadFlash_2Byte+1,w
 12908  1DC7  00B0               	movwf	??_ReadFlash_4Byte+2
 12909  1DC8  01B1               	clrf	??_ReadFlash_4Byte+3
 12910  1DC9  01B2               	clrf	??_ReadFlash_4Byte+4
 12911  1DCA  082F               	movf	??_ReadFlash_4Byte+1,w
 12912  1DCB  04B3               	iorwf	ReadFlash_4Byte@temp,f
 12913  1DCC  0830               	movf	??_ReadFlash_4Byte+2,w
 12914  1DCD  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 12915  1DCE  0831               	movf	??_ReadFlash_4Byte+3,w
 12916  1DCF  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 12917  1DD0  0832               	movf	??_ReadFlash_4Byte+4,w
 12918  1DD1  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 12919                           
 12920                           ;FLASH.c: 67: return temp;
 12921  1DD2  0836               	movf	ReadFlash_4Byte@temp+3,w
 12922  1DD3  00AD               	movwf	?_ReadFlash_4Byte+3
 12923  1DD4  0835               	movf	ReadFlash_4Byte@temp+2,w
 12924  1DD5  00AC               	movwf	?_ReadFlash_4Byte+2
 12925  1DD6  0834               	movf	ReadFlash_4Byte@temp+1,w
 12926  1DD7  00AB               	movwf	?_ReadFlash_4Byte+1
 12927  1DD8  0833               	movf	ReadFlash_4Byte@temp,w
 12928  1DD9  00AA               	movwf	?_ReadFlash_4Byte
 12929  1DDA  0008               	return
 12930  1DDB                     __end_of_ReadFlash_4Byte:	
 12931                           
 12932                           	psect	text33
 12933  1B5D                     __ptext33:	
 12934 ;; *************** function _ReadFlash_2Byte *****************
 12935 ;; Defined at:
 12936 ;;		line 43 in file "FLASH.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  row             2    5[BANK0 ] unsigned int 
 12939 ;;  column          1    7[BANK0 ] unsigned char 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;		None
 12942 ;; Return value:  Size  Location     Type
 12943 ;;                  2    5[BANK0 ] unsigned int 
 12944 ;; Registers used:
 12945 ;;		wreg, status,2, status,0
 12946 ;; Tracked objects:
 12947 ;;		On entry : 0/0
 12948 ;;		On exit  : 0/0
 12949 ;;		Unchanged: 0/0
 12950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12951 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;Total ram usage:        5 bytes
 12956 ;; Hardware stack levels used:    1
 12957 ;; Hardware stack levels required when called:    3
 12958 ;; This function calls:
 12959 ;;		Nothing
 12960 ;; This function is called by:
 12961 ;;		_ReadFlash_4Byte
 12962 ;;		_WriteFlash_Sequential
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           
 12967                           ;psect for function _ReadFlash_2Byte
 12968  1B5D                     _ReadFlash_2Byte:	
 12969                           
 12970                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 12974  1B5D  30BF               	movlw	191
 12975  1B5E  0020               	movlb	0	; select bank0
 12976  1B5F  00A8               	movwf	??_ReadFlash_2Byte
 12977  1B60  0828               	movf	??_ReadFlash_2Byte,w
 12978  1B61  0023               	movlb	3	; select bank3
 12979  1B62  0595               	andwf	21,f	;volatile
 12980                           
 12981                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 12982  1B63  0020               	movlb	0	; select bank0
 12983  1B64  0826               	movf	ReadFlash_2Byte@row+1,w
 12984  1B65  00A9               	movwf	??_ReadFlash_2Byte+1
 12985  1B66  0825               	movf	ReadFlash_2Byte@row,w
 12986  1B67  00A8               	movwf	??_ReadFlash_2Byte
 12987  1B68  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12988  1B69  0CA8               	rrf	??_ReadFlash_2Byte,f
 12989  1B6A  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12990  1B6B  0CA8               	rrf	??_ReadFlash_2Byte,f
 12991  1B6C  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12992  1B6D  0CA8               	rrf	??_ReadFlash_2Byte,f
 12993  1B6E  0828               	movf	??_ReadFlash_2Byte,w
 12994  1B6F  397F               	andlw	127
 12995  1B70  0023               	movlb	3	; select bank3
 12996  1B71  0092               	movwf	18	;volatile
 12997                           
 12998                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 12999  1B72  0020               	movlb	0	; select bank0
 13000  1B73  0825               	movf	ReadFlash_2Byte@row,w
 13001  1B74  3907               	andlw	7
 13002  1B75  00A8               	movwf	??_ReadFlash_2Byte
 13003  1B76  3004               	movlw	4
 13004  1B77                     u7235:	
 13005  1B77  35A8               	lslf	??_ReadFlash_2Byte,f
 13006  1B78  3EFF               	addlw	-1
 13007  1B79  1D03               	skipz
 13008  1B7A  2B77               	goto	u7235
 13009  1B7B  3528               	lslf	??_ReadFlash_2Byte,w
 13010  1B7C  0727               	addwf	ReadFlash_2Byte@column,w
 13011  1B7D  0023               	movlb	3	; select bank3
 13012  1B7E  0091               	movwf	17	;volatile
 13013                           
 13014                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 13015  1B7F  1415               	bsf	21,0	;volatile
 13016  1B80                     l892:	
 13017                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 13018                           
 13019  1B80  1815               	btfsc	21,0	;volatile
 13020  1B81  2B80               	goto	l892
 13021                           
 13022                           ;FLASH.c: 50: __nop();
 13023  1B82  0000               	nop
 13024                           
 13025                           ;FLASH.c: 51: __nop();
 13026  1B83  0000               	nop
 13027                           
 13028                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 13029  1B84  0023               	movlb	3	; select bank3
 13030  1B85  0814               	movf	20,w	;volatile
 13031  1B86  0020               	movlb	0	; select bank0
 13032  1B87  01A6               	clrf	?_ReadFlash_2Byte+1
 13033  1B88  07A6               	addwf	?_ReadFlash_2Byte+1,f
 13034  1B89  0023               	movlb	3	; select bank3
 13035  1B8A  0813               	movf	19,w	;volatile
 13036  1B8B  0020               	movlb	0	; select bank0
 13037  1B8C  01A5               	clrf	?_ReadFlash_2Byte
 13038  1B8D  07A5               	addwf	?_ReadFlash_2Byte,f
 13039  1B8E  0008               	return
 13040  1B8F                     __end_of_ReadFlash_2Byte:	
 13041                           
 13042                           	psect	text34
 13043  11CA                     __ptext34:	
 13044 ;; *************** function _InitUART *****************
 13045 ;; Defined at:
 13046 ;;		line 73 in file "UART.c"
 13047 ;; Parameters:    Size  Location     Type
 13048 ;;  Baud            4   19[BANK0 ] unsigned long 
 13049 ;;  parity          1   23[BANK0 ] unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  temp            4   36[BANK0 ] unsigned long 
 13052 ;;  spbrg           2   32[BANK0 ] unsigned int 
 13053 ;;  config          1   35[BANK0 ] unsigned char 
 13054 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 13055 ;; Return value:  Size  Location     Type
 13056 ;;		None               void
 13057 ;; Registers used:
 13058 ;;		wreg, status,2, status,0, pclath, cstack
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13064 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;Total ram usage:       21 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    4
 13071 ;; This function calls:
 13072 ;;		_CloseUSART
 13073 ;;		_OpenUSART
 13074 ;;		_ReadUSART
 13075 ;;		___lldiv
 13076 ;;		_baudUSART
 13077 ;; This function is called by:
 13078 ;;		_Init_System
 13079 ;;		_SetBaud
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           
 13084                           ;psect for function _InitUART
 13085  11CA                     _InitUART:	
 13086                           
 13087                           ;UART.c: 75: unsigned long temp;
 13088                           ;UART.c: 76: unsigned char config;
 13089                           ;UART.c: 77: unsigned int spbrg;
 13090                           ;UART.c: 78: unsigned char baudconfig;
 13091                           ;UART.c: 88: LATC |= 0b00000100;
 13092                           
 13093                           ;incstack = 0
 13094                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 13095  11CA  0022               	movlb	2	; select bank2
 13096  11CB  150E               	bsf	14,2	;volatile
 13097                           
 13098                           ;UART.c: 89: PPSLOCK =0;
 13099  11CC  003C               	movlb	28	; select bank28
 13100  11CD  018F               	clrf	15	;volatile
 13101                           
 13102                           ;UART.c: 90: RC2PPS = 0b00000000;
 13103  11CE  003D               	movlb	29	; select bank29
 13104  11CF  01A2               	clrf	34	;volatile
 13105                           
 13106                           ;UART.c: 91: PPSLOCK =1;
 13107  11D0  3001               	movlw	1
 13108  11D1  003C               	movlb	28	; select bank28
 13109  11D2  008F               	movwf	15	;volatile
 13110                           
 13111                           ;UART.c: 93: CloseUSART();
 13112  11D3  3199  2133  3191   	fcall	_CloseUSART
 13113                           
 13114                           ;UART.c: 94: config =0;
 13115  11D6  0020               	movlb	0	; select bank0
 13116  11D7  01C3               	clrf	InitUART@config
 13117                           
 13118                           ;UART.c: 95: baudconfig =0;
 13119  11D8  01C2               	clrf	InitUART@baudconfig
 13120                           
 13121                           ;UART.c: 99: config |= 0b01000000;
 13122  11D9  1743               	bsf	InitUART@config,6
 13123                           
 13124                           ;UART.c: 101: config |= 0b00001000;
 13125  11DA  15C3               	bsf	InitUART@config,3
 13126                           
 13127                           ;UART.c: 102: config |= 0b00010000;
 13128  11DB  1643               	bsf	InitUART@config,4
 13129                           
 13130                           ;UART.c: 103: PARITY = parity;
 13131  11DC  0837               	movf	InitUART@parity,w
 13132  11DD  00B8               	movwf	??_InitUART
 13133  11DE  0838               	movf	??_InitUART,w
 13134  11DF  0021               	movlb	1	; select bank1
 13135  11E0  00EA               	movwf	_PARITY^(0+128)
 13136                           
 13137                           ;UART.c: 104: BAUD = Baud;
 13138  11E1  0020               	movlb	0	; select bank0
 13139  11E2  0836               	movf	InitUART@Baud+3,w
 13140  11E3  0024               	movlb	4	; select bank4
 13141  11E4  00AF               	movwf	(_BAUD+3)^(0+512)
 13142  11E5  0020               	movlb	0	; select bank0
 13143  11E6  0835               	movf	InitUART@Baud+2,w
 13144  11E7  0024               	movlb	4	; select bank4
 13145  11E8  00AE               	movwf	(_BAUD+2)^(0+512)
 13146  11E9  0020               	movlb	0	; select bank0
 13147  11EA  0834               	movf	InitUART@Baud+1,w
 13148  11EB  0024               	movlb	4	; select bank4
 13149  11EC  00AD               	movwf	(_BAUD+1)^(0+512)
 13150  11ED  0020               	movlb	0	; select bank0
 13151  11EE  0833               	movf	InitUART@Baud,w
 13152  11EF  0024               	movlb	4	; select bank4
 13153  11F0  00AC               	movwf	_BAUD^(0+512)
 13154                           
 13155                           ;UART.c: 105: if(parity)
 13156  11F1  0020               	movlb	0	; select bank0
 13157  11F2  0837               	movf	InitUART@parity,w
 13158  11F3  1903               	btfsc	3,2
 13159  11F4  29F7               	goto	l5878
 13160                           
 13161                           ;UART.c: 106: {
 13162                           ;UART.c: 107: config |= 0b00000010;
 13163  11F5  14C3               	bsf	InitUART@config,1
 13164                           
 13165                           ;UART.c: 108: }
 13166  11F6  29FB               	goto	l5880
 13167  11F7                     l5878:	
 13168                           
 13169                           ;UART.c: 109: else
 13170                           ;UART.c: 110: {
 13171                           ;UART.c: 111: config &= ~0b00000010;
 13172  11F7  30FD               	movlw	253
 13173  11F8  00B8               	movwf	??_InitUART
 13174  11F9  0838               	movf	??_InitUART,w
 13175  11FA  05C3               	andwf	InitUART@config,f
 13176  11FB                     l5880:	
 13177                           
 13178                           ;UART.c: 112: }
 13179                           ;UART.c: 113: baudconfig |= 0b00001000;
 13180  11FB  15C2               	bsf	InitUART@baudconfig,3
 13181                           
 13182                           ;UART.c: 116: temp = (32000000L / Baud) - 1;
 13183  11FC  0836               	movf	InitUART@Baud+3,w
 13184  11FD  00A8               	movwf	___lldiv@divisor+3
 13185  11FE  0835               	movf	InitUART@Baud+2,w
 13186  11FF  00A7               	movwf	___lldiv@divisor+2
 13187  1200  0834               	movf	InitUART@Baud+1,w
 13188  1201  00A6               	movwf	___lldiv@divisor+1
 13189  1202  0833               	movf	InitUART@Baud,w
 13190  1203  00A5               	movwf	___lldiv@divisor
 13191  1204  3001               	movlw	1
 13192  1205  00AC               	movwf	___lldiv@dividend+3
 13193  1206  30E8               	movlw	232
 13194  1207  00AB               	movwf	___lldiv@dividend+2
 13195  1208  3048               	movlw	72
 13196  1209  00AA               	movwf	___lldiv@dividend+1
 13197  120A  3000               	movlw	0
 13198  120B  00A9               	movwf	___lldiv@dividend
 13199  120C  319D  25DB  3191   	fcall	___lldiv
 13200  120F  30FF               	movlw	255
 13201  1210  0020               	movlb	0	; select bank0
 13202  1211  0725               	addwf	?___lldiv,w
 13203  1212  00C4               	movwf	InitUART@temp
 13204  1213  30FF               	movlw	255
 13205  1214  3D26               	addwfc	?___lldiv+1,w
 13206  1215  00C5               	movwf	InitUART@temp+1
 13207  1216  30FF               	movlw	255
 13208  1217  3D27               	addwfc	?___lldiv+2,w
 13209  1218  00C6               	movwf	InitUART@temp+2
 13210  1219  30FF               	movlw	255
 13211  121A  3D28               	addwfc	?___lldiv+3,w
 13212  121B  00C7               	movwf	InitUART@temp+3
 13213                           
 13214                           ;UART.c: 117: temp = (temp >> 2) - 1;
 13215  121C  30FF               	movlw	255
 13216  121D  00B8               	movwf	??_InitUART
 13217  121E  30FF               	movlw	255
 13218  121F  00B9               	movwf	??_InitUART+1
 13219  1220  30FF               	movlw	255
 13220  1221  00BA               	movwf	??_InitUART+2
 13221  1222  30FF               	movlw	255
 13222  1223  00BB               	movwf	??_InitUART+3
 13223  1224  0844               	movf	InitUART@temp,w
 13224  1225  00BC               	movwf	??_InitUART+4
 13225  1226  0845               	movf	InitUART@temp+1,w
 13226  1227  00BD               	movwf	??_InitUART+5
 13227  1228  0846               	movf	InitUART@temp+2,w
 13228  1229  00BE               	movwf	??_InitUART+6
 13229  122A  0847               	movf	InitUART@temp+3,w
 13230  122B  00BF               	movwf	??_InitUART+7
 13231  122C  3002               	movlw	2
 13232  122D                     u7645:	
 13233  122D  36BF               	lsrf	??_InitUART+7,f
 13234  122E  0CBE               	rrf	??_InitUART+6,f
 13235  122F  0CBD               	rrf	??_InitUART+5,f
 13236  1230  0CBC               	rrf	??_InitUART+4,f
 13237  1231  0B89               	decfsz	9,f
 13238  1232  2A2D               	goto	u7645
 13239  1233  083C               	movf	??_InitUART+4,w
 13240  1234  07B8               	addwf	??_InitUART,f
 13241  1235  083D               	movf	??_InitUART+5,w
 13242  1236  3DB9               	addwfc	??_InitUART+1,f
 13243  1237  083E               	movf	??_InitUART+6,w
 13244  1238  3DBA               	addwfc	??_InitUART+2,f
 13245  1239  083F               	movf	??_InitUART+7,w
 13246  123A  3DBB               	addwfc	??_InitUART+3,f
 13247  123B  083B               	movf	??_InitUART+3,w
 13248  123C  00C7               	movwf	InitUART@temp+3
 13249  123D  083A               	movf	??_InitUART+2,w
 13250  123E  00C6               	movwf	InitUART@temp+2
 13251  123F  0839               	movf	??_InitUART+1,w
 13252  1240  00C5               	movwf	InitUART@temp+1
 13253  1241  0838               	movf	??_InitUART,w
 13254  1242  00C4               	movwf	InitUART@temp
 13255                           
 13256                           ;UART.c: 118: spbrg = (unsigned int)temp;
 13257  1243  0845               	movf	InitUART@temp+1,w
 13258  1244  01C1               	clrf	InitUART@spbrg+1
 13259  1245  07C1               	addwf	InitUART@spbrg+1,f
 13260  1246  0844               	movf	InitUART@temp,w
 13261  1247  01C0               	clrf	InitUART@spbrg
 13262  1248  07C0               	addwf	InitUART@spbrg,f
 13263                           
 13264                           ;UART.c: 120: RCSTAbits.CREN = 0;
 13265  1249  0023               	movlb	3	; select bank3
 13266  124A  121D               	bcf	29,4	;volatile
 13267                           
 13268                           ;UART.c: 121: OpenUSART(config, spbrg);
 13269  124B  0020               	movlb	0	; select bank0
 13270  124C  0841               	movf	InitUART@spbrg+1,w
 13271  124D  01A6               	clrf	OpenUSART@spbrg+1
 13272  124E  07A6               	addwf	OpenUSART@spbrg+1,f
 13273  124F  0840               	movf	InitUART@spbrg,w
 13274  1250  01A5               	clrf	OpenUSART@spbrg
 13275  1251  07A5               	addwf	OpenUSART@spbrg,f
 13276  1252  0843               	movf	InitUART@config,w
 13277  1253  319C  242A  3191   	fcall	_OpenUSART
 13278                           
 13279                           ;UART.c: 122: baudUSART(baudconfig);
 13280  1256  0020               	movlb	0	; select bank0
 13281  1257  0842               	movf	InitUART@baudconfig,w
 13282  1258  318B  23C1  3191   	fcall	_baudUSART
 13283                           
 13284                           ;UART.c: 123: temp = ReadUSART();
 13285  125B  3198  20F0  3191   	fcall	_ReadUSART
 13286  125E  0020               	movlb	0	; select bank0
 13287  125F  00B8               	movwf	??_InitUART
 13288  1260  01B9               	clrf	??_InitUART+1
 13289  1261  01BA               	clrf	??_InitUART+2
 13290  1262  01BB               	clrf	??_InitUART+3
 13291  1263  083B               	movf	??_InitUART+3,w
 13292  1264  00C7               	movwf	InitUART@temp+3
 13293  1265  083A               	movf	??_InitUART+2,w
 13294  1266  00C6               	movwf	InitUART@temp+2
 13295  1267  0839               	movf	??_InitUART+1,w
 13296  1268  00C5               	movwf	InitUART@temp+1
 13297  1269  0838               	movf	??_InitUART,w
 13298  126A  00C4               	movwf	InitUART@temp
 13299                           
 13300                           ;UART.c: 124: temp = ReadUSART();
 13301  126B  3198  20F0  3191   	fcall	_ReadUSART
 13302  126E  0020               	movlb	0	; select bank0
 13303  126F  00B8               	movwf	??_InitUART
 13304  1270  01B9               	clrf	??_InitUART+1
 13305  1271  01BA               	clrf	??_InitUART+2
 13306  1272  01BB               	clrf	??_InitUART+3
 13307  1273  083B               	movf	??_InitUART+3,w
 13308  1274  00C7               	movwf	InitUART@temp+3
 13309  1275  083A               	movf	??_InitUART+2,w
 13310  1276  00C6               	movwf	InitUART@temp+2
 13311  1277  0839               	movf	??_InitUART+1,w
 13312  1278  00C5               	movwf	InitUART@temp+1
 13313  1279  0838               	movf	??_InitUART,w
 13314  127A  00C4               	movwf	InitUART@temp
 13315                           
 13316                           ;UART.c: 125: temp = ReadUSART();
 13317  127B  3198  20F0  3191   	fcall	_ReadUSART
 13318  127E  0020               	movlb	0	; select bank0
 13319  127F  00B8               	movwf	??_InitUART
 13320  1280  01B9               	clrf	??_InitUART+1
 13321  1281  01BA               	clrf	??_InitUART+2
 13322  1282  01BB               	clrf	??_InitUART+3
 13323  1283  083B               	movf	??_InitUART+3,w
 13324  1284  00C7               	movwf	InitUART@temp+3
 13325  1285  083A               	movf	??_InitUART+2,w
 13326  1286  00C6               	movwf	InitUART@temp+2
 13327  1287  0839               	movf	??_InitUART+1,w
 13328  1288  00C5               	movwf	InitUART@temp+1
 13329  1289  0838               	movf	??_InitUART,w
 13330  128A  00C4               	movwf	InitUART@temp
 13331                           
 13332                           ;UART.c: 126: temp = ReadUSART();
 13333  128B  3198  20F0  3191   	fcall	_ReadUSART
 13334  128E  0020               	movlb	0	; select bank0
 13335  128F  00B8               	movwf	??_InitUART
 13336  1290  01B9               	clrf	??_InitUART+1
 13337  1291  01BA               	clrf	??_InitUART+2
 13338  1292  01BB               	clrf	??_InitUART+3
 13339  1293  083B               	movf	??_InitUART+3,w
 13340  1294  00C7               	movwf	InitUART@temp+3
 13341  1295  083A               	movf	??_InitUART+2,w
 13342  1296  00C6               	movwf	InitUART@temp+2
 13343  1297  0839               	movf	??_InitUART+1,w
 13344  1298  00C5               	movwf	InitUART@temp+1
 13345  1299  0838               	movf	??_InitUART,w
 13346  129A  00C4               	movwf	InitUART@temp
 13347                           
 13348                           ;UART.c: 127: temp = ReadUSART();
 13349  129B  3198  20F0         	fcall	_ReadUSART
 13350  129D  0020               	movlb	0	; select bank0
 13351  129E  00B8               	movwf	??_InitUART
 13352  129F  01B9               	clrf	??_InitUART+1
 13353  12A0  01BA               	clrf	??_InitUART+2
 13354  12A1  01BB               	clrf	??_InitUART+3
 13355  12A2  083B               	movf	??_InitUART+3,w
 13356  12A3  00C7               	movwf	InitUART@temp+3
 13357  12A4  083A               	movf	??_InitUART+2,w
 13358  12A5  00C6               	movwf	InitUART@temp+2
 13359  12A6  0839               	movf	??_InitUART+1,w
 13360  12A7  00C5               	movwf	InitUART@temp+1
 13361  12A8  0838               	movf	??_InitUART,w
 13362  12A9  00C4               	movwf	InitUART@temp
 13363                           
 13364                           ;UART.c: 129: PPSLOCK =0;
 13365  12AA  003C               	movlb	28	; select bank28
 13366  12AB  018F               	clrf	15	;volatile
 13367                           
 13368                           ;UART.c: 130: RC2PPS = 0b00010100;
 13369  12AC  3014               	movlw	20
 13370  12AD  003D               	movlb	29	; select bank29
 13371  12AE  00A2               	movwf	34	;volatile
 13372                           
 13373                           ;UART.c: 131: CKPPS = 0b00010010;
 13374  12AF  3012               	movlw	18
 13375  12B0  003C               	movlb	28	; select bank28
 13376  12B1  00A5               	movwf	37	;volatile
 13377                           
 13378                           ;UART.c: 132: RXPPS = 0b00010101;
 13379  12B2  3015               	movlw	21
 13380  12B3  00A4               	movwf	36	;volatile
 13381                           
 13382                           ;UART.c: 133: PPSLOCK =1;
 13383  12B4  3001               	movlw	1
 13384  12B5  008F               	movwf	15	;volatile
 13385                           
 13386                           ;UART.c: 135: PIR1bits.RCIF = 0;
 13387  12B6  0020               	movlb	0	; select bank0
 13388  12B7  1291               	bcf	17,5	;volatile
 13389                           
 13390                           ;UART.c: 136: INTCONbits.PEIE = 1;
 13391  12B8  170B               	bsf	11,6	;volatile
 13392  12B9  0008               	return
 13393  12BA                     __end_of_InitUART:	
 13394                           
 13395                           	psect	text35
 13396  0BC1                     __ptext35:	
 13397 ;; *************** function _baudUSART *****************
 13398 ;; Defined at:
 13399 ;;		line 144 in file "UART.c"
 13400 ;; Parameters:    Size  Location     Type
 13401 ;;  baudconfig      1    wreg     unsigned char 
 13402 ;; Auto vars:     Size  Location     Type
 13403 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;		None               void
 13406 ;; Registers used:
 13407 ;;		wreg, status,2
 13408 ;; Tracked objects:
 13409 ;;		On entry : 0/0
 13410 ;;		On exit  : 0/0
 13411 ;;		Unchanged: 0/0
 13412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;Total ram usage:        1 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; Hardware stack levels required when called:    3
 13420 ;; This function calls:
 13421 ;;		Nothing
 13422 ;; This function is called by:
 13423 ;;		_InitUART
 13424 ;; This function uses a non-reentrant model
 13425 ;;
 13426                           
 13427                           
 13428                           ;psect for function _baudUSART
 13429  0BC1                     _baudUSART:	
 13430                           
 13431                           ;incstack = 0
 13432                           ; Regs used in _baudUSART: [wreg+status,2]
 13433                           ;baudUSART@baudconfig stored from wreg
 13434  0BC1  0020               	movlb	0	; select bank0
 13435  0BC2  00A5               	movwf	baudUSART@baudconfig
 13436                           
 13437                           ;UART.c: 146: BAUD1CON =0;
 13438  0BC3  0023               	movlb	3	; select bank3
 13439  0BC4  019F               	clrf	31	;volatile
 13440                           
 13441                           ;UART.c: 147: BAUD1CON = baudconfig;
 13442  0BC5  0020               	movlb	0	; select bank0
 13443  0BC6  0825               	movf	baudUSART@baudconfig,w
 13444  0BC7  0023               	movlb	3	; select bank3
 13445  0BC8  009F               	movwf	31	;volatile
 13446  0BC9  0008               	return
 13447  0BCA                     __end_of_baudUSART:	
 13448                           
 13449                           	psect	text36
 13450  1DDB                     __ptext36:	
 13451 ;; *************** function ___lldiv *****************
 13452 ;; Defined at:
 13453 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  divisor         4    5[BANK0 ] unsigned long 
 13456 ;;  dividend        4    9[BANK0 ] unsigned long 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;  quotient        4   14[BANK0 ] unsigned long 
 13459 ;;  counter         1   18[BANK0 ] unsigned char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  4    5[BANK0 ] unsigned long 
 13462 ;; Registers used:
 13463 ;;		wreg, status,2, status,0
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13469 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;Total ram usage:       14 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    3
 13476 ;; This function calls:
 13477 ;;		Nothing
 13478 ;; This function is called by:
 13479 ;;		_InitUART
 13480 ;;		_sprintf
 13481 ;; This function uses a non-reentrant model
 13482 ;;
 13483                           
 13484                           
 13485                           ;psect for function ___lldiv
 13486  1DDB                     ___lldiv:	
 13487                           
 13488                           ;incstack = 0
 13489                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13490  1DDB  3000               	movlw	0
 13491  1DDC  0020               	movlb	0	; select bank0
 13492  1DDD  00B1               	movwf	___lldiv@quotient+3
 13493  1DDE  3000               	movlw	0
 13494  1DDF  00B0               	movwf	___lldiv@quotient+2
 13495  1DE0  3000               	movlw	0
 13496  1DE1  00AF               	movwf	___lldiv@quotient+1
 13497  1DE2  3000               	movlw	0
 13498  1DE3  00AE               	movwf	___lldiv@quotient
 13499  1DE4  0828               	movf	___lldiv@divisor+3,w
 13500  1DE5  0427               	iorwf	___lldiv@divisor+2,w
 13501  1DE6  0426               	iorwf	___lldiv@divisor+1,w
 13502  1DE7  0425               	iorwf	___lldiv@divisor,w
 13503  1DE8  1903               	skipnz
 13504  1DE9  2E25               	goto	l5776
 13505  1DEA  01B2               	clrf	___lldiv@counter
 13506  1DEB  0AB2               	incf	___lldiv@counter,f
 13507  1DEC                     l5762:	
 13508  1DEC  1BA8               	btfsc	___lldiv@divisor+3,7
 13509  1DED  2DFA               	goto	l5764
 13510  1DEE  3001               	movlw	1
 13511  1DEF                     u7425:	
 13512  1DEF  35A5               	lslf	___lldiv@divisor,f
 13513  1DF0  0DA6               	rlf	___lldiv@divisor+1,f
 13514  1DF1  0DA7               	rlf	___lldiv@divisor+2,f
 13515  1DF2  0DA8               	rlf	___lldiv@divisor+3,f
 13516  1DF3  0B89               	decfsz	9,f
 13517  1DF4  2DEF               	goto	u7425
 13518  1DF5  3001               	movlw	1
 13519  1DF6  00AD               	movwf	??___lldiv
 13520  1DF7  082D               	movf	??___lldiv,w
 13521  1DF8  07B2               	addwf	___lldiv@counter,f
 13522  1DF9  2DEC               	goto	l5762
 13523  1DFA                     l5764:	
 13524  1DFA  3001               	movlw	1
 13525  1DFB                     u7445:	
 13526  1DFB  35AE               	lslf	___lldiv@quotient,f
 13527  1DFC  0DAF               	rlf	___lldiv@quotient+1,f
 13528  1DFD  0DB0               	rlf	___lldiv@quotient+2,f
 13529  1DFE  0DB1               	rlf	___lldiv@quotient+3,f
 13530  1DFF  0B89               	decfsz	9,f
 13531  1E00  2DFB               	goto	u7445
 13532  1E01  0828               	movf	___lldiv@divisor+3,w
 13533  1E02  022C               	subwf	___lldiv@dividend+3,w
 13534  1E03  1D03               	skipz
 13535  1E04  2E0F               	goto	u7455
 13536  1E05  0827               	movf	___lldiv@divisor+2,w
 13537  1E06  022B               	subwf	___lldiv@dividend+2,w
 13538  1E07  1D03               	skipz
 13539  1E08  2E0F               	goto	u7455
 13540  1E09  0826               	movf	___lldiv@divisor+1,w
 13541  1E0A  022A               	subwf	___lldiv@dividend+1,w
 13542  1E0B  1D03               	skipz
 13543  1E0C  2E0F               	goto	u7455
 13544  1E0D  0825               	movf	___lldiv@divisor,w
 13545  1E0E  0229               	subwf	___lldiv@dividend,w
 13546  1E0F                     u7455:	
 13547  1E0F  1C03               	skipc
 13548  1E10  2E1A               	goto	l5772
 13549  1E11  0825               	movf	___lldiv@divisor,w
 13550  1E12  02A9               	subwf	___lldiv@dividend,f
 13551  1E13  0826               	movf	___lldiv@divisor+1,w
 13552  1E14  3BAA               	subwfb	___lldiv@dividend+1,f
 13553  1E15  0827               	movf	___lldiv@divisor+2,w
 13554  1E16  3BAB               	subwfb	___lldiv@dividend+2,f
 13555  1E17  0828               	movf	___lldiv@divisor+3,w
 13556  1E18  3BAC               	subwfb	___lldiv@dividend+3,f
 13557  1E19  142E               	bsf	___lldiv@quotient,0
 13558  1E1A                     l5772:	
 13559  1E1A  3001               	movlw	1
 13560  1E1B                     u7465:	
 13561  1E1B  36A8               	lsrf	___lldiv@divisor+3,f
 13562  1E1C  0CA7               	rrf	___lldiv@divisor+2,f
 13563  1E1D  0CA6               	rrf	___lldiv@divisor+1,f
 13564  1E1E  0CA5               	rrf	___lldiv@divisor,f
 13565  1E1F  0B89               	decfsz	9,f
 13566  1E20  2E1B               	goto	u7465
 13567  1E21  3001               	movlw	1
 13568  1E22  02B2               	subwf	___lldiv@counter,f
 13569  1E23  1D03               	btfss	3,2
 13570  1E24  2DFA               	goto	l5764
 13571  1E25                     l5776:	
 13572  1E25  0831               	movf	___lldiv@quotient+3,w
 13573  1E26  00A8               	movwf	?___lldiv+3
 13574  1E27  0830               	movf	___lldiv@quotient+2,w
 13575  1E28  00A7               	movwf	?___lldiv+2
 13576  1E29  082F               	movf	___lldiv@quotient+1,w
 13577  1E2A  00A6               	movwf	?___lldiv+1
 13578  1E2B  082E               	movf	___lldiv@quotient,w
 13579  1E2C  00A5               	movwf	?___lldiv
 13580  1E2D  0008               	return
 13581  1E2E                     __end_of___lldiv:	
 13582                           
 13583                           	psect	text37
 13584  18F0                     __ptext37:	
 13585 ;; *************** function _ReadUSART *****************
 13586 ;; Defined at:
 13587 ;;		line 281 in file "UART.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;		None
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;  data            1    6[BANK0 ] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  1    wreg      unsigned char 
 13594 ;; Registers used:
 13595 ;;		wreg
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;Total ram usage:        2 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    3
 13608 ;; This function calls:
 13609 ;;		Nothing
 13610 ;; This function is called by:
 13611 ;;		_InitUART
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           
 13616                           ;psect for function _ReadUSART
 13617  18F0                     _ReadUSART:	
 13618                           
 13619                           ;UART.c: 283: char data;
 13620                           ;UART.c: 285: if(RCSTAbits.OERR)
 13621                           
 13622                           ;incstack = 0
 13623                           ; Regs used in _ReadUSART: [wreg]
 13624  18F0  0023               	movlb	3	; select bank3
 13625  18F1  189D               	btfsc	29,1	;volatile
 13626                           
 13627                           ;UART.c: 286: {
 13628                           ;UART.c: 287: RCSTAbits.CREN = 0;
 13629  18F2  121D               	bcf	29,4	;volatile
 13630                           
 13631                           ;UART.c: 288: }
 13632                           ;UART.c: 290: data = RCREG;
 13633  18F3  0819               	movf	25,w	;volatile
 13634  18F4  0020               	movlb	0	; select bank0
 13635  18F5  00A5               	movwf	??_ReadUSART
 13636  18F6  0825               	movf	??_ReadUSART,w
 13637  18F7  00A6               	movwf	ReadUSART@data
 13638                           
 13639                           ;UART.c: 292: return (data);
 13640  18F8  0826               	movf	ReadUSART@data,w
 13641  18F9  0008               	return
 13642  18FA                     __end_of_ReadUSART:	
 13643                           
 13644                           	psect	text38
 13645  1C2A                     __ptext38:	
 13646 ;; *************** function _OpenUSART *****************
 13647 ;; Defined at:
 13648 ;;		line 155 in file "UART.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  config          1    wreg     unsigned char 
 13651 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;  config          1    7[BANK0 ] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;		None               void
 13656 ;; Registers used:
 13657 ;;		wreg, status,2
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:        3 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    3
 13670 ;; This function calls:
 13671 ;;		Nothing
 13672 ;; This function is called by:
 13673 ;;		_InitUART
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           
 13678                           ;psect for function _OpenUSART
 13679  1C2A                     _OpenUSART:	
 13680                           
 13681                           ;incstack = 0
 13682                           ; Regs used in _OpenUSART: [wreg+status,2]
 13683                           ;OpenUSART@config stored from wreg
 13684  1C2A  0020               	movlb	0	; select bank0
 13685  1C2B  00A7               	movwf	OpenUSART@config
 13686                           
 13687                           ;UART.c: 157: TX1STA = 0;
 13688  1C2C  0023               	movlb	3	; select bank3
 13689  1C2D  019E               	clrf	30	;volatile
 13690                           
 13691                           ;UART.c: 158: RC1STA = 0;
 13692  1C2E  019D               	clrf	29	;volatile
 13693                           
 13694                           ;UART.c: 160: if(config&0x01)
 13695  1C2F  0020               	movlb	0	; select bank0
 13696  1C30  1C27               	btfss	OpenUSART@config,0
 13697  1C31  2C34               	goto	l5644
 13698                           
 13699                           ;UART.c: 161: {
 13700                           ;UART.c: 162: TX1STAbits.SYNC = 1;
 13701  1C32  0023               	movlb	3	; select bank3
 13702  1C33  161E               	bsf	30,4	;volatile
 13703  1C34                     l5644:	
 13704                           
 13705                           ;UART.c: 163: }
 13706                           ;UART.c: 165: if(config&0x02)
 13707  1C34  0020               	movlb	0	; select bank0
 13708  1C35  1CA7               	btfss	OpenUSART@config,1
 13709  1C36  2C3A               	goto	l5648
 13710                           
 13711                           ;UART.c: 166: {
 13712                           ;UART.c: 167: TX1STAbits.TX9 = 1;
 13713  1C37  0023               	movlb	3	; select bank3
 13714  1C38  171E               	bsf	30,6	;volatile
 13715                           
 13716                           ;UART.c: 168: RC1STAbits.RX9 = 1;
 13717  1C39  171D               	bsf	29,6	;volatile
 13718  1C3A                     l5648:	
 13719                           
 13720                           ;UART.c: 169: }
 13721                           ;UART.c: 171: if(config&0x04)
 13722  1C3A  0020               	movlb	0	; select bank0
 13723  1C3B  1D27               	btfss	OpenUSART@config,2
 13724  1C3C  2C3F               	goto	l5652
 13725                           
 13726                           ;UART.c: 172: {
 13727                           ;UART.c: 173: TX1STAbits.CSRC = 1;
 13728  1C3D  0023               	movlb	3	; select bank3
 13729  1C3E  179E               	bsf	30,7	;volatile
 13730  1C3F                     l5652:	
 13731                           
 13732                           ;UART.c: 174: }
 13733                           ;UART.c: 176: if(config&0x08)
 13734  1C3F  0020               	movlb	0	; select bank0
 13735  1C40  1DA7               	btfss	OpenUSART@config,3
 13736  1C41  2C45               	goto	l375
 13737                           
 13738                           ;UART.c: 177: {
 13739                           ;UART.c: 178: RC1STAbits.CREN = 1;
 13740  1C42  0023               	movlb	3	; select bank3
 13741  1C43  161D               	bsf	29,4	;volatile
 13742                           
 13743                           ;UART.c: 179: }
 13744  1C44  2C47               	goto	l5656
 13745  1C45                     l375:	
 13746                           
 13747                           ;UART.c: 180: else
 13748                           ;UART.c: 181: {
 13749                           ;UART.c: 182: RC1STAbits.SREN = 1;
 13750  1C45  0023               	movlb	3	; select bank3
 13751  1C46  169D               	bsf	29,5	;volatile
 13752  1C47                     l5656:	
 13753                           
 13754                           ;UART.c: 183: }
 13755                           ;UART.c: 185: if(config&0x10)
 13756  1C47  0020               	movlb	0	; select bank0
 13757  1C48  1E27               	btfss	OpenUSART@config,4
 13758  1C49  2C4C               	goto	l5662
 13759                           
 13760                           ;UART.c: 186: {
 13761                           ;UART.c: 187: TX1STAbits.BRGH = 1;
 13762  1C4A  0023               	movlb	3	; select bank3
 13763  1C4B  151E               	bsf	30,2	;volatile
 13764  1C4C                     l5662:	
 13765                           ;UART.c: 191: {
 13766                           
 13767                           
 13768                           ;UART.c: 193: }
 13769                           ;UART.c: 195: if(config&0x40)
 13770  1C4C  0020               	movlb	0	; select bank0
 13771  1C4D  1F27               	btfss	OpenUSART@config,6
 13772  1C4E  2C53               	goto	l379
 13773                           
 13774                           ;UART.c: 196: {
 13775                           ;UART.c: 197: PIR1bits.RCIF = 0;
 13776  1C4F  1291               	bcf	17,5	;volatile
 13777                           
 13778                           ;UART.c: 198: PIE1bits.RCIE = 1;
 13779  1C50  0021               	movlb	1	; select bank1
 13780  1C51  1691               	bsf	17,5	;volatile
 13781                           
 13782                           ;UART.c: 199: }
 13783  1C52  2C55               	goto	l5666
 13784  1C53                     l379:	
 13785                           
 13786                           ;UART.c: 200: else
 13787                           ;UART.c: 201: {
 13788                           ;UART.c: 202: PIE1bits.RCIE = 0;
 13789  1C53  0021               	movlb	1	; select bank1
 13790  1C54  1291               	bcf	17,5	;volatile
 13791  1C55                     l5666:	
 13792                           
 13793                           ;UART.c: 203: }
 13794                           ;UART.c: 205: if(config&0x80)
 13795  1C55  0020               	movlb	0	; select bank0
 13796  1C56  1FA7               	btfss	OpenUSART@config,7
 13797  1C57  2C5C               	goto	l381
 13798                           
 13799                           ;UART.c: 206: {
 13800                           ;UART.c: 207: PIR1bits.TXIF = 0;
 13801  1C58  1211               	bcf	17,4	;volatile
 13802                           
 13803                           ;UART.c: 208: PIE1bits.TXIE = 1;
 13804  1C59  0021               	movlb	1	; select bank1
 13805  1C5A  1611               	bsf	17,4	;volatile
 13806                           
 13807                           ;UART.c: 209: }
 13808  1C5B  2C5E               	goto	l5670
 13809  1C5C                     l381:	
 13810                           
 13811                           ;UART.c: 210: else
 13812                           ;UART.c: 211: {
 13813                           ;UART.c: 212: PIE1bits.TXIE = 0;
 13814  1C5C  0021               	movlb	1	; select bank1
 13815  1C5D  1211               	bcf	17,4	;volatile
 13816  1C5E                     l5670:	
 13817                           
 13818                           ;UART.c: 213: }
 13819                           ;UART.c: 215: SPBRG = spbrg;
 13820  1C5E  0020               	movlb	0	; select bank0
 13821  1C5F  0825               	movf	OpenUSART@spbrg,w
 13822  1C60  0023               	movlb	3	; select bank3
 13823  1C61  009B               	movwf	27	;volatile
 13824                           
 13825                           ;UART.c: 216: SPBRGH = spbrg >> 8;
 13826  1C62  0020               	movlb	0	; select bank0
 13827  1C63  0826               	movf	OpenUSART@spbrg+1,w
 13828  1C64  0023               	movlb	3	; select bank3
 13829  1C65  009C               	movwf	28	;volatile
 13830                           
 13831                           ;UART.c: 218: TX1STAbits.TXEN = 1;
 13832  1C66  169E               	bsf	30,5	;volatile
 13833                           
 13834                           ;UART.c: 219: RC1STAbits.SPEN = 1;
 13835  1C67  179D               	bsf	29,7	;volatile
 13836  1C68  0008               	return
 13837  1C69                     __end_of_OpenUSART:	
 13838                           
 13839                           	psect	text39
 13840  1933                     __ptext39:	
 13841 ;; *************** function _CloseUSART *****************
 13842 ;; Defined at:
 13843 ;;		line 60 in file "UART.c"
 13844 ;; Parameters:    Size  Location     Type
 13845 ;;		None
 13846 ;; Auto vars:     Size  Location     Type
 13847 ;;		None
 13848 ;; Return value:  Size  Location     Type
 13849 ;;		None               void
 13850 ;; Registers used:
 13851 ;;		wreg, status,2, status,0
 13852 ;; Tracked objects:
 13853 ;;		On entry : 0/0
 13854 ;;		On exit  : 0/0
 13855 ;;		Unchanged: 0/0
 13856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;Total ram usage:        1 bytes
 13862 ;; Hardware stack levels used:    1
 13863 ;; Hardware stack levels required when called:    3
 13864 ;; This function calls:
 13865 ;;		Nothing
 13866 ;; This function is called by:
 13867 ;;		_InitUART
 13868 ;; This function uses a non-reentrant model
 13869 ;;
 13870                           
 13871                           
 13872                           ;psect for function _CloseUSART
 13873  1933                     _CloseUSART:	
 13874                           
 13875                           ;UART.c: 62: RCSTA&=0b01001111;
 13876                           
 13877                           ;incstack = 0
 13878                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13879  1933  304F               	movlw	79
 13880  1934  0020               	movlb	0	; select bank0
 13881  1935  00A5               	movwf	??_CloseUSART
 13882  1936  0825               	movf	??_CloseUSART,w
 13883  1937  0023               	movlb	3	; select bank3
 13884  1938  059D               	andwf	29,f	;volatile
 13885                           
 13886                           ;UART.c: 63: TX1STAbits.TXEN=0;
 13887  1939  129E               	bcf	30,5	;volatile
 13888                           
 13889                           ;UART.c: 64: PIE1&=0b11001111;
 13890  193A  30CF               	movlw	207
 13891  193B  0020               	movlb	0	; select bank0
 13892  193C  00A5               	movwf	??_CloseUSART
 13893  193D  0825               	movf	??_CloseUSART,w
 13894  193E  0021               	movlb	1	; select bank1
 13895  193F  0591               	andwf	17,f	;volatile
 13896  1940  0008               	return
 13897  1941                     __end_of_CloseUSART:	
 13898                           
 13899                           	psect	text40
 13900  13AC                     __ptext40:	
 13901 ;; *************** function _Init_PS_2_Send *****************
 13902 ;; Defined at:
 13903 ;;		line 1041 in file "PS_2.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;		None
 13906 ;; Auto vars:     Size  Location     Type
 13907 ;;		None
 13908 ;; Return value:  Size  Location     Type
 13909 ;;                  1    wreg      unsigned char 
 13910 ;; Registers used:
 13911 ;;		wreg, status,2, status,0, pclath, cstack
 13912 ;; Tracked objects:
 13913 ;;		On entry : 0/0
 13914 ;;		On exit  : 0/0
 13915 ;;		Unchanged: 0/0
 13916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;Total ram usage:        0 bytes
 13922 ;; Hardware stack levels used:    1
 13923 ;; Hardware stack levels required when called:    5
 13924 ;; This function calls:
 13925 ;;		_PS_2_DISABLE_INTERRUPT
 13926 ;;		_PS_2_ENABLE_INTERRUPT
 13927 ;;		_Send_PS2
 13928 ;;		_delayUS
 13929 ;; This function is called by:
 13930 ;;		_main
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934                           
 13935                           ;psect for function _Init_PS_2_Send
 13936  13AC                     _Init_PS_2_Send:	
 13937                           
 13938                           ;PS_2.c: 1043: PS_2_DISABLE_INTERRUPT(0b00100000);
 13939                           
 13940                           ;incstack = 0
 13941                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 13942  13AC  3020               	movlw	32
 13943  13AD  319A  220D  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 13944                           
 13945                           ;PS_2.c: 1046: if(Send_PS2(0xED))
 13946  13B0  30ED               	movlw	237
 13947  13B1  318C  248B  3193   	fcall	_Send_PS2
 13948  13B4  3A00               	xorlw	0
 13949  13B5  1903               	skipnz
 13950  13B6  2BB9               	goto	l7130
 13951                           
 13952                           ;PS_2.c: 1047: {
 13953                           ;PS_2.c: 1048: return 0;
 13954  13B7  3000               	movlw	0
 13955  13B8  0008               	return
 13956  13B9                     l7130:	
 13957                           
 13958                           ;PS_2.c: 1049: }
 13959                           ;PS_2.c: 1050: delayUS(100);
 13960  13B9  3000               	movlw	0
 13961  13BA  0020               	movlb	0	; select bank0
 13962  13BB  00A8               	movwf	delayUS@US+3
 13963  13BC  3000               	movlw	0
 13964  13BD  00A7               	movwf	delayUS@US+2
 13965  13BE  3000               	movlw	0
 13966  13BF  00A6               	movwf	delayUS@US+1
 13967  13C0  3064               	movlw	100
 13968  13C1  00A5               	movwf	delayUS@US
 13969  13C2  319B  23F5  3193   	fcall	_delayUS
 13970                           
 13971                           ;PS_2.c: 1051: if(Send_PS2(0x01))
 13972  13C5  3001               	movlw	1
 13973  13C6  318C  248B  3193   	fcall	_Send_PS2
 13974  13C9  3A00               	xorlw	0
 13975  13CA  1903               	skipnz
 13976  13CB  2BCE               	goto	l7136
 13977                           
 13978                           ;PS_2.c: 1052: {
 13979                           ;PS_2.c: 1053: return 0;
 13980  13CC  3000               	movlw	0
 13981  13CD  0008               	return
 13982  13CE                     l7136:	
 13983                           
 13984                           ;PS_2.c: 1054: }
 13985                           ;PS_2.c: 1055: delayUS(5000);
 13986  13CE  3000               	movlw	0
 13987  13CF  0020               	movlb	0	; select bank0
 13988  13D0  00A8               	movwf	delayUS@US+3
 13989  13D1  3000               	movlw	0
 13990  13D2  00A7               	movwf	delayUS@US+2
 13991  13D3  3013               	movlw	19
 13992  13D4  00A6               	movwf	delayUS@US+1
 13993  13D5  3088               	movlw	136
 13994  13D6  00A5               	movwf	delayUS@US
 13995  13D7  319B  23F5  3193   	fcall	_delayUS
 13996                           
 13997                           ;PS_2.c: 1058: if(Send_PS2(0xED))
 13998  13DA  30ED               	movlw	237
 13999  13DB  318C  248B  3193   	fcall	_Send_PS2
 14000  13DE  3A00               	xorlw	0
 14001  13DF  1903               	skipnz
 14002  13E0  2BE3               	goto	l7142
 14003                           
 14004                           ;PS_2.c: 1059: {
 14005                           ;PS_2.c: 1060: return 0;
 14006  13E1  3000               	movlw	0
 14007  13E2  0008               	return
 14008  13E3                     l7142:	
 14009                           
 14010                           ;PS_2.c: 1061: }
 14011                           ;PS_2.c: 1062: delayUS(100);
 14012  13E3  3000               	movlw	0
 14013  13E4  0020               	movlb	0	; select bank0
 14014  13E5  00A8               	movwf	delayUS@US+3
 14015  13E6  3000               	movlw	0
 14016  13E7  00A7               	movwf	delayUS@US+2
 14017  13E8  3000               	movlw	0
 14018  13E9  00A6               	movwf	delayUS@US+1
 14019  13EA  3064               	movlw	100
 14020  13EB  00A5               	movwf	delayUS@US
 14021  13EC  319B  23F5  3193   	fcall	_delayUS
 14022                           
 14023                           ;PS_2.c: 1063: if(Send_PS2(0x04))
 14024  13EF  3004               	movlw	4
 14025  13F0  318C  248B  3193   	fcall	_Send_PS2
 14026  13F3  3A00               	xorlw	0
 14027  13F4  1903               	skipnz
 14028  13F5  2BF8               	goto	l7148
 14029                           
 14030                           ;PS_2.c: 1064: {
 14031                           ;PS_2.c: 1065: return 0;
 14032  13F6  3000               	movlw	0
 14033  13F7  0008               	return
 14034  13F8                     l7148:	
 14035                           
 14036                           ;PS_2.c: 1066: }
 14037                           ;PS_2.c: 1067: delayUS(5000);
 14038  13F8  3000               	movlw	0
 14039  13F9  0020               	movlb	0	; select bank0
 14040  13FA  00A8               	movwf	delayUS@US+3
 14041  13FB  3000               	movlw	0
 14042  13FC  00A7               	movwf	delayUS@US+2
 14043  13FD  3013               	movlw	19
 14044  13FE  00A6               	movwf	delayUS@US+1
 14045  13FF  3088               	movlw	136
 14046  1400  00A5               	movwf	delayUS@US
 14047  1401  319B  23F5  3193   	fcall	_delayUS
 14048                           
 14049                           ;PS_2.c: 1070: if(Send_PS2(0xED))
 14050  1404  30ED               	movlw	237
 14051  1405  318C  248B  3193   	fcall	_Send_PS2
 14052  1408  3A00               	xorlw	0
 14053  1409  1903               	skipnz
 14054  140A  2C0D               	goto	l7154
 14055                           
 14056                           ;PS_2.c: 1071: {
 14057                           ;PS_2.c: 1072: return 0;
 14058  140B  3000               	movlw	0
 14059  140C  0008               	return
 14060  140D                     l7154:	
 14061                           
 14062                           ;PS_2.c: 1073: }
 14063                           ;PS_2.c: 1074: delayUS(1000);
 14064  140D  3000               	movlw	0
 14065  140E  0020               	movlb	0	; select bank0
 14066  140F  00A8               	movwf	delayUS@US+3
 14067  1410  3000               	movlw	0
 14068  1411  00A7               	movwf	delayUS@US+2
 14069  1412  3003               	movlw	3
 14070  1413  00A6               	movwf	delayUS@US+1
 14071  1414  30E8               	movlw	232
 14072  1415  00A5               	movwf	delayUS@US
 14073  1416  319B  23F5  3193   	fcall	_delayUS
 14074                           
 14075                           ;PS_2.c: 1075: if(Send_PS2(0x02))
 14076  1419  3002               	movlw	2
 14077  141A  318C  248B  3193   	fcall	_Send_PS2
 14078  141D  3A00               	xorlw	0
 14079  141E  1903               	skipnz
 14080  141F  2C22               	goto	l7160
 14081                           
 14082                           ;PS_2.c: 1076: {
 14083                           ;PS_2.c: 1077: return 0;
 14084  1420  3000               	movlw	0
 14085  1421  0008               	return
 14086  1422                     l7160:	
 14087                           
 14088                           ;PS_2.c: 1078: }
 14089                           ;PS_2.c: 1079: delayUS(5000);
 14090  1422  3000               	movlw	0
 14091  1423  0020               	movlb	0	; select bank0
 14092  1424  00A8               	movwf	delayUS@US+3
 14093  1425  3000               	movlw	0
 14094  1426  00A7               	movwf	delayUS@US+2
 14095  1427  3013               	movlw	19
 14096  1428  00A6               	movwf	delayUS@US+1
 14097  1429  3088               	movlw	136
 14098  142A  00A5               	movwf	delayUS@US
 14099  142B  319B  23F5  3193   	fcall	_delayUS
 14100                           
 14101                           ;PS_2.c: 1082: if(Send_PS2(0xED))
 14102  142E  30ED               	movlw	237
 14103  142F  318C  248B  3193   	fcall	_Send_PS2
 14104  1432  3A00               	xorlw	0
 14105  1433  1903               	skipnz
 14106  1434  2C37               	goto	l7166
 14107                           
 14108                           ;PS_2.c: 1083: {
 14109                           ;PS_2.c: 1084: return 0;
 14110  1435  3000               	movlw	0
 14111  1436  0008               	return
 14112  1437                     l7166:	
 14113                           
 14114                           ;PS_2.c: 1085: }
 14115                           ;PS_2.c: 1086: delayUS(100);
 14116  1437  3000               	movlw	0
 14117  1438  0020               	movlb	0	; select bank0
 14118  1439  00A8               	movwf	delayUS@US+3
 14119  143A  3000               	movlw	0
 14120  143B  00A7               	movwf	delayUS@US+2
 14121  143C  3000               	movlw	0
 14122  143D  00A6               	movwf	delayUS@US+1
 14123  143E  3064               	movlw	100
 14124  143F  00A5               	movwf	delayUS@US
 14125  1440  319B  23F5  3193   	fcall	_delayUS
 14126                           
 14127                           ;PS_2.c: 1087: if(Send_PS2(0x00))
 14128  1443  3000               	movlw	0
 14129  1444  318C  248B  3193   	fcall	_Send_PS2
 14130  1447  3A00               	xorlw	0
 14131  1448  1903               	skipnz
 14132  1449  2C4C               	goto	l7172
 14133                           
 14134                           ;PS_2.c: 1088: {
 14135                           ;PS_2.c: 1089: return 0;
 14136  144A  3000               	movlw	0
 14137  144B  0008               	return
 14138  144C                     l7172:	
 14139                           
 14140                           ;PS_2.c: 1090: }
 14141                           ;PS_2.c: 1093: if(Send_PS2(0xf4))
 14142  144C  30F4               	movlw	244
 14143  144D  318C  248B  3193   	fcall	_Send_PS2
 14144  1450  3A00               	xorlw	0
 14145  1451  1903               	skipnz
 14146  1452  2C55               	goto	l7178
 14147                           
 14148                           ;PS_2.c: 1094: {
 14149                           ;PS_2.c: 1095: return 0;
 14150  1453  3000               	movlw	0
 14151  1454  0008               	return
 14152  1455                     l7178:	
 14153                           
 14154                           ;PS_2.c: 1096: }
 14155                           ;PS_2.c: 1099: if(Send_PS2(0xf4))
 14156  1455  30F4               	movlw	244
 14157  1456  318C  248B  3193   	fcall	_Send_PS2
 14158  1459  3A00               	xorlw	0
 14159  145A  1903               	skipnz
 14160  145B  2C5E               	goto	l7184
 14161                           
 14162                           ;PS_2.c: 1100: {
 14163                           ;PS_2.c: 1101: return 0;
 14164  145C  3000               	movlw	0
 14165  145D  0008               	return
 14166  145E                     l7184:	
 14167                           
 14168                           ;PS_2.c: 1102: }
 14169                           ;PS_2.c: 1105: if(Send_PS2(0xf0))
 14170  145E  30F0               	movlw	240
 14171  145F  318C  248B  3193   	fcall	_Send_PS2
 14172  1462  3A00               	xorlw	0
 14173  1463  1903               	skipnz
 14174  1464  2C67               	goto	l7190
 14175                           
 14176                           ;PS_2.c: 1106: {
 14177                           ;PS_2.c: 1107: return 0;
 14178  1465  3000               	movlw	0
 14179  1466  0008               	return
 14180  1467                     l7190:	
 14181                           
 14182                           ;PS_2.c: 1108: }
 14183                           ;PS_2.c: 1109: delayUS(100);
 14184  1467  3000               	movlw	0
 14185  1468  0020               	movlb	0	; select bank0
 14186  1469  00A8               	movwf	delayUS@US+3
 14187  146A  3000               	movlw	0
 14188  146B  00A7               	movwf	delayUS@US+2
 14189  146C  3000               	movlw	0
 14190  146D  00A6               	movwf	delayUS@US+1
 14191  146E  3064               	movlw	100
 14192  146F  00A5               	movwf	delayUS@US
 14193  1470  319B  23F5  3193   	fcall	_delayUS
 14194                           
 14195                           ;PS_2.c: 1110: if(Send_PS2(0x02))
 14196  1473  3002               	movlw	2
 14197  1474  318C  248B  3193   	fcall	_Send_PS2
 14198  1477  3A00               	xorlw	0
 14199  1478  1903               	skipnz
 14200  1479  2C7C               	goto	l7196
 14201                           
 14202                           ;PS_2.c: 1111: {
 14203                           ;PS_2.c: 1112: return 0;
 14204  147A  3000               	movlw	0
 14205  147B  0008               	return
 14206  147C                     l7196:	
 14207                           
 14208                           ;PS_2.c: 1113: }
 14209                           ;PS_2.c: 1116: if(Send_PS2(0xf3))
 14210  147C  30F3               	movlw	243
 14211  147D  318C  248B  3193   	fcall	_Send_PS2
 14212  1480  3A00               	xorlw	0
 14213  1481  1903               	skipnz
 14214  1482  2C85               	goto	l7202
 14215                           
 14216                           ;PS_2.c: 1117: {
 14217                           ;PS_2.c: 1118: return 0;
 14218  1483  3000               	movlw	0
 14219  1484  0008               	return
 14220  1485                     l7202:	
 14221                           
 14222                           ;PS_2.c: 1119: }
 14223                           ;PS_2.c: 1120: delayUS(100);
 14224  1485  3000               	movlw	0
 14225  1486  0020               	movlb	0	; select bank0
 14226  1487  00A8               	movwf	delayUS@US+3
 14227  1488  3000               	movlw	0
 14228  1489  00A7               	movwf	delayUS@US+2
 14229  148A  3000               	movlw	0
 14230  148B  00A6               	movwf	delayUS@US+1
 14231  148C  3064               	movlw	100
 14232  148D  00A5               	movwf	delayUS@US
 14233  148E  319B  23F5  3193   	fcall	_delayUS
 14234                           
 14235                           ;PS_2.c: 1121: if(Send_PS2(0x2F))
 14236  1491  302F               	movlw	47
 14237  1492  318C  248B  3193   	fcall	_Send_PS2
 14238  1495  3A00               	xorlw	0
 14239  1496  1903               	skipnz
 14240  1497  2C9A               	goto	l7208
 14241                           
 14242                           ;PS_2.c: 1122: {
 14243                           ;PS_2.c: 1123: return 0;
 14244  1498  3000               	movlw	0
 14245  1499  0008               	return
 14246  149A                     l7208:	
 14247                           
 14248                           ;PS_2.c: 1124: }
 14249                           ;PS_2.c: 1126: PS_2_ENABLE_INTERRUPT(0b00100000);
 14250  149A  3020               	movlw	32
 14251  149B  3199  21E0         	fcall	_PS_2_ENABLE_INTERRUPT
 14252                           
 14253                           ;PS_2.c: 1127: return 1;
 14254  149D  3001               	movlw	1
 14255  149E  0008               	return
 14256  149F                     __end_of_Init_PS_2_Send:	
 14257                           
 14258                           	psect	text41
 14259  0C8B                     __ptext41:	
 14260 ;; *************** function _Send_PS2 *****************
 14261 ;; Defined at:
 14262 ;;		line 881 in file "PS_2.c"
 14263 ;; Parameters:    Size  Location     Type
 14264 ;;  command         1    wreg     unsigned char 
 14265 ;; Auto vars:     Size  Location     Type
 14266 ;;  command         1   20[BANK0 ] unsigned char 
 14267 ;;  timeout         2   22[BANK0 ] unsigned int 
 14268 ;;  i               1   21[BANK0 ] unsigned char 
 14269 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14270 ;; Return value:  Size  Location     Type
 14271 ;;                  1    wreg      unsigned char 
 14272 ;; Registers used:
 14273 ;;		wreg, status,2, status,0, pclath, cstack
 14274 ;; Tracked objects:
 14275 ;;		On entry : 0/0
 14276 ;;		On exit  : 0/0
 14277 ;;		Unchanged: 0/0
 14278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;Total ram usage:        9 bytes
 14284 ;; Hardware stack levels used:    1
 14285 ;; Hardware stack levels required when called:    4
 14286 ;; This function calls:
 14287 ;;		_CheckSum_byte
 14288 ;;		_Clock_TRIS
 14289 ;;		_Data_TRIS
 14290 ;;		_PS_2_ENABLE_INTERRUPT
 14291 ;;		_READ_PS_2_PIN
 14292 ;;		_delayUS
 14293 ;; This function is called by:
 14294 ;;		_PS_2_Update
 14295 ;;		_Init_PS_2_Send
 14296 ;;		_Keyboard_Connected
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           
 14301                           ;psect for function _Send_PS2
 14302  0C8B                     _Send_PS2:	
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14306                           ;Send_PS2@command stored from wreg
 14307  0C8B  0020               	movlb	0	; select bank0
 14308  0C8C  00B4               	movwf	Send_PS2@command
 14309                           
 14310                           ;PS_2.c: 883: unsigned char i=0;
 14311  0C8D  01B5               	clrf	Send_PS2@i
 14312                           
 14313                           ;PS_2.c: 884: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14314  0C8E  0834               	movf	Send_PS2@command,w
 14315  0C8F  00AF               	movwf	??_Send_PS2
 14316  0C90  01B0               	clrf	??_Send_PS2+1
 14317  0C91  082F               	movf	??_Send_PS2,w
 14318  0C92  00A5               	movwf	CheckSum_byte@This
 14319  0C93  0830               	movf	??_Send_PS2+1,w
 14320  0C94  00A6               	movwf	CheckSum_byte@This+1
 14321  0C95  3003               	movlw	3
 14322  0C96  00B1               	movwf	??_Send_PS2+2
 14323  0C97  0831               	movf	??_Send_PS2+2,w
 14324  0C98  00A7               	movwf	CheckSum_byte@Odd_Even
 14325  0C99  319A  22FB  318C   	fcall	_CheckSum_byte
 14326  0C9C  0020               	movlb	0	; select bank0
 14327  0C9D  00B2               	movwf	??_Send_PS2+3
 14328  0C9E  0832               	movf	??_Send_PS2+3,w
 14329  0C9F  00B3               	movwf	Send_PS2@oddparity
 14330                           
 14331                           ;PS_2.c: 885: unsigned int timeout =0;
 14332  0CA0  01B6               	clrf	Send_PS2@timeout
 14333  0CA1  01B7               	clrf	Send_PS2@timeout+1
 14334                           
 14335                           ;PS_2.c: 887: Clock_TRIS(0);
 14336  0CA2  3000               	movlw	0
 14337  0CA3  3198  20FA  318C   	fcall	_Clock_TRIS
 14338                           
 14339                           ;PS_2.c: 888: Data_TRIS(0);
 14340  0CA6  3000               	movlw	0
 14341  0CA7  3199  2105  318C   	fcall	_Data_TRIS
 14342                           
 14343                           ;PS_2.c: 889: LATA &= ~0b00100000;
 14344  0CAA  30DF               	movlw	223
 14345  0CAB  0020               	movlb	0	; select bank0
 14346  0CAC  00AF               	movwf	??_Send_PS2
 14347  0CAD  082F               	movf	??_Send_PS2,w
 14348  0CAE  0022               	movlb	2	; select bank2
 14349  0CAF  058C               	andwf	12,f	;volatile
 14350                           
 14351                           ;PS_2.c: 890: delayUS(300);
 14352  0CB0  3000               	movlw	0
 14353  0CB1  0020               	movlb	0	; select bank0
 14354  0CB2  00A8               	movwf	delayUS@US+3
 14355  0CB3  3000               	movlw	0
 14356  0CB4  00A7               	movwf	delayUS@US+2
 14357  0CB5  3001               	movlw	1
 14358  0CB6  00A6               	movwf	delayUS@US+1
 14359  0CB7  302C               	movlw	44
 14360  0CB8  00A5               	movwf	delayUS@US
 14361  0CB9  319B  23F5  318C   	fcall	_delayUS
 14362                           
 14363                           ;PS_2.c: 891: LATA &= ~0b00010000;
 14364  0CBC  30EF               	movlw	239
 14365  0CBD  0020               	movlb	0	; select bank0
 14366  0CBE  00AF               	movwf	??_Send_PS2
 14367  0CBF  082F               	movf	??_Send_PS2,w
 14368  0CC0  0022               	movlb	2	; select bank2
 14369  0CC1  058C               	andwf	12,f	;volatile
 14370                           
 14371                           ;PS_2.c: 892: delayUS(20);
 14372  0CC2  3000               	movlw	0
 14373  0CC3  0020               	movlb	0	; select bank0
 14374  0CC4  00A8               	movwf	delayUS@US+3
 14375  0CC5  3000               	movlw	0
 14376  0CC6  00A7               	movwf	delayUS@US+2
 14377  0CC7  3000               	movlw	0
 14378  0CC8  00A6               	movwf	delayUS@US+1
 14379  0CC9  3014               	movlw	20
 14380  0CCA  00A5               	movwf	delayUS@US
 14381  0CCB  319B  23F5  318C   	fcall	_delayUS
 14382                           
 14383                           ;PS_2.c: 893: Clock_TRIS(1);
 14384  0CCE  3001               	movlw	1
 14385  0CCF  3198  20FA  318C   	fcall	_Clock_TRIS
 14386                           
 14387                           ;PS_2.c: 894: timeout=0;
 14388  0CD2  0020               	movlb	0	; select bank0
 14389  0CD3  01B6               	clrf	Send_PS2@timeout
 14390  0CD4  01B7               	clrf	Send_PS2@timeout+1
 14391  0CD5                     l6152:	
 14392                           ;PS_2.c: 895: while(READ_PS_2_PIN(0b00100000))
 14393                           
 14394  0CD5  3020               	movlw	32
 14395  0CD6  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14396  0CD9  3800               	iorlw	0
 14397  0CDA  1903               	btfsc	3,2
 14398  0CDB  2CF2               	goto	l6154
 14399                           
 14400                           ;PS_2.c: 896: {
 14401                           ;PS_2.c: 897: __nop();
 14402  0CDC  0000               	nop
 14403                           
 14404                           ;PS_2.c: 898: timeout++;
 14405  0CDD  3001               	movlw	1
 14406  0CDE  0020               	movlb	0	; select bank0
 14407  0CDF  07B6               	addwf	Send_PS2@timeout,f
 14408  0CE0  3000               	movlw	0
 14409  0CE1  3DB7               	addwfc	Send_PS2@timeout+1,f
 14410                           
 14411                           ;PS_2.c: 899: if(timeout > 15000)
 14412  0CE2  303A               	movlw	58
 14413  0CE3  0237               	subwf	Send_PS2@timeout+1,w
 14414  0CE4  3099               	movlw	153
 14415  0CE5  1903               	skipnz
 14416  0CE6  0236               	subwf	Send_PS2@timeout,w
 14417  0CE7  1C03               	skipc
 14418  0CE8  2CD5               	goto	l6152
 14419                           
 14420                           ;PS_2.c: 900: {
 14421                           ;PS_2.c: 901: Clock_TRIS(1);
 14422  0CE9  3001               	movlw	1
 14423  0CEA  3198  20FA  318C   	fcall	_Clock_TRIS
 14424                           
 14425                           ;PS_2.c: 902: Data_TRIS(1);
 14426  0CED  3001               	movlw	1
 14427  0CEE  3199  2105         	fcall	_Data_TRIS
 14428                           
 14429                           ;PS_2.c: 903: return 1;
 14430  0CF0  3001               	movlw	1
 14431  0CF1  0008               	return
 14432  0CF2                     l6154:	
 14433                           
 14434                           ;PS_2.c: 904: }
 14435                           ;PS_2.c: 905: }
 14436                           ;PS_2.c: 906: for(i=0;i<8;i++)
 14437  0CF2  0020               	movlb	0	; select bank0
 14438  0CF3  01B5               	clrf	Send_PS2@i
 14439  0CF4  3008               	movlw	8
 14440  0CF5  0235               	subwf	Send_PS2@i,w
 14441  0CF6  1803               	btfsc	3,0
 14442  0CF7  2D4E               	goto	l808
 14443  0CF8                     l807:	
 14444                           
 14445                           ;PS_2.c: 907: {
 14446                           ;PS_2.c: 908: if(command & 0x1)
 14447  0CF8  1C34               	btfss	Send_PS2@command,0
 14448  0CF9  2CFD               	goto	l6162
 14449                           
 14450                           ;PS_2.c: 909: {
 14451                           ;PS_2.c: 910: LATA |= 0b00010000;
 14452  0CFA  0022               	movlb	2	; select bank2
 14453  0CFB  160C               	bsf	12,4	;volatile
 14454                           
 14455                           ;PS_2.c: 911: }
 14456  0CFC  2D03               	goto	l6164
 14457  0CFD                     l6162:	
 14458                           
 14459                           ;PS_2.c: 912: else
 14460                           ;PS_2.c: 913: {
 14461                           ;PS_2.c: 914: LATA &= ~0b00010000;
 14462  0CFD  30EF               	movlw	239
 14463  0CFE  0020               	movlb	0	; select bank0
 14464  0CFF  00AF               	movwf	??_Send_PS2
 14465  0D00  082F               	movf	??_Send_PS2,w
 14466  0D01  0022               	movlb	2	; select bank2
 14467  0D02  058C               	andwf	12,f	;volatile
 14468  0D03                     l6164:	
 14469                           
 14470                           ;PS_2.c: 915: }
 14471                           ;PS_2.c: 916: command >> = 1;
 14472  0D03  1003               	clrc
 14473  0D04  0020               	movlb	0	; select bank0
 14474  0D05  0CB4               	rrf	Send_PS2@command,f
 14475                           
 14476                           ;PS_2.c: 917: timeout=0;
 14477  0D06  01B6               	clrf	Send_PS2@timeout
 14478  0D07  01B7               	clrf	Send_PS2@timeout+1
 14479  0D08                     l6176:	
 14480                           ;PS_2.c: 918: while(!READ_PS_2_PIN(0b00100000))
 14481                           
 14482  0D08  3020               	movlw	32
 14483  0D09  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14484  0D0C  3A00               	xorlw	0
 14485  0D0D  1D03               	btfss	3,2
 14486  0D0E  2D25               	goto	l6178
 14487                           
 14488                           ;PS_2.c: 919: {
 14489                           ;PS_2.c: 920: __nop();
 14490  0D0F  0000               	nop
 14491                           
 14492                           ;PS_2.c: 921: timeout++;
 14493  0D10  3001               	movlw	1
 14494  0D11  0020               	movlb	0	; select bank0
 14495  0D12  07B6               	addwf	Send_PS2@timeout,f
 14496  0D13  3000               	movlw	0
 14497  0D14  3DB7               	addwfc	Send_PS2@timeout+1,f
 14498                           
 14499                           ;PS_2.c: 922: if(timeout > 15000)
 14500  0D15  303A               	movlw	58
 14501  0D16  0237               	subwf	Send_PS2@timeout+1,w
 14502  0D17  3099               	movlw	153
 14503  0D18  1903               	skipnz
 14504  0D19  0236               	subwf	Send_PS2@timeout,w
 14505  0D1A  1C03               	skipc
 14506  0D1B  2D08               	goto	l6176
 14507                           
 14508                           ;PS_2.c: 923: {
 14509                           ;PS_2.c: 924: Clock_TRIS(1);
 14510  0D1C  3001               	movlw	1
 14511  0D1D  3198  20FA  318C   	fcall	_Clock_TRIS
 14512                           
 14513                           ;PS_2.c: 925: Data_TRIS(1);
 14514  0D20  3001               	movlw	1
 14515  0D21  3199  2105         	fcall	_Data_TRIS
 14516                           
 14517                           ;PS_2.c: 926: return 1;
 14518  0D23  3001               	movlw	1
 14519  0D24  0008               	return
 14520  0D25                     l6178:	
 14521                           
 14522                           ;PS_2.c: 927: }
 14523                           ;PS_2.c: 928: }
 14524                           ;PS_2.c: 929: timeout=0;
 14525  0D25  0020               	movlb	0	; select bank0
 14526  0D26  01B6               	clrf	Send_PS2@timeout
 14527  0D27  01B7               	clrf	Send_PS2@timeout+1
 14528  0D28                     l6188:	
 14529                           ;PS_2.c: 930: while(READ_PS_2_PIN(0b00100000))
 14530                           
 14531  0D28  3020               	movlw	32
 14532  0D29  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14533  0D2C  3800               	iorlw	0
 14534  0D2D  1903               	btfsc	3,2
 14535  0D2E  2D45               	goto	l6190
 14536                           
 14537                           ;PS_2.c: 931: {
 14538                           ;PS_2.c: 932: __nop();
 14539  0D2F  0000               	nop
 14540                           
 14541                           ;PS_2.c: 933: timeout++;
 14542  0D30  3001               	movlw	1
 14543  0D31  0020               	movlb	0	; select bank0
 14544  0D32  07B6               	addwf	Send_PS2@timeout,f
 14545  0D33  3000               	movlw	0
 14546  0D34  3DB7               	addwfc	Send_PS2@timeout+1,f
 14547                           
 14548                           ;PS_2.c: 934: if(timeout > 15000)
 14549  0D35  303A               	movlw	58
 14550  0D36  0237               	subwf	Send_PS2@timeout+1,w
 14551  0D37  3099               	movlw	153
 14552  0D38  1903               	skipnz
 14553  0D39  0236               	subwf	Send_PS2@timeout,w
 14554  0D3A  1C03               	skipc
 14555  0D3B  2D28               	goto	l6188
 14556                           
 14557                           ;PS_2.c: 935: {
 14558                           ;PS_2.c: 936: Clock_TRIS(1);
 14559  0D3C  3001               	movlw	1
 14560  0D3D  3198  20FA  318C   	fcall	_Clock_TRIS
 14561                           
 14562                           ;PS_2.c: 937: Data_TRIS(1);
 14563  0D40  3001               	movlw	1
 14564  0D41  3199  2105         	fcall	_Data_TRIS
 14565                           
 14566                           ;PS_2.c: 938: return 1;
 14567  0D43  3001               	movlw	1
 14568  0D44  0008               	return
 14569  0D45                     l6190:	
 14570  0D45  3001               	movlw	1
 14571  0D46  0020               	movlb	0	; select bank0
 14572  0D47  00AF               	movwf	??_Send_PS2
 14573  0D48  082F               	movf	??_Send_PS2,w
 14574  0D49  07B5               	addwf	Send_PS2@i,f
 14575  0D4A  3008               	movlw	8
 14576  0D4B  0235               	subwf	Send_PS2@i,w
 14577  0D4C  1C03               	skipc
 14578  0D4D  2CF8               	goto	l807
 14579  0D4E                     l808:	
 14580                           
 14581                           ;PS_2.c: 939: }
 14582                           ;PS_2.c: 940: }
 14583                           ;PS_2.c: 941: }
 14584                           ;PS_2.c: 943: if(oddparity & 0x1)
 14585  0D4E  1C33               	btfss	Send_PS2@oddparity,0
 14586  0D4F  2D53               	goto	l6196
 14587                           
 14588                           ;PS_2.c: 944: {
 14589                           ;PS_2.c: 945: LATA |= 0b00010000;
 14590  0D50  0022               	movlb	2	; select bank2
 14591  0D51  160C               	bsf	12,4	;volatile
 14592                           
 14593                           ;PS_2.c: 946: }
 14594  0D52  2D59               	goto	l6198
 14595  0D53                     l6196:	
 14596                           
 14597                           ;PS_2.c: 947: else
 14598                           ;PS_2.c: 948: {
 14599                           ;PS_2.c: 949: LATA &= ~0b00010000;
 14600  0D53  30EF               	movlw	239
 14601  0D54  0020               	movlb	0	; select bank0
 14602  0D55  00AF               	movwf	??_Send_PS2
 14603  0D56  082F               	movf	??_Send_PS2,w
 14604  0D57  0022               	movlb	2	; select bank2
 14605  0D58  058C               	andwf	12,f	;volatile
 14606  0D59                     l6198:	
 14607                           
 14608                           ;PS_2.c: 950: }
 14609                           ;PS_2.c: 951: timeout=0;
 14610  0D59  0020               	movlb	0	; select bank0
 14611  0D5A  01B6               	clrf	Send_PS2@timeout
 14612  0D5B  01B7               	clrf	Send_PS2@timeout+1
 14613  0D5C                     l6208:	
 14614                           ;PS_2.c: 952: while(!READ_PS_2_PIN(0b00100000))
 14615                           
 14616  0D5C  3020               	movlw	32
 14617  0D5D  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14618  0D60  3A00               	xorlw	0
 14619  0D61  1D03               	btfss	3,2
 14620  0D62  2D79               	goto	l6210
 14621                           
 14622                           ;PS_2.c: 953: {
 14623                           ;PS_2.c: 954: __nop();
 14624  0D63  0000               	nop
 14625                           
 14626                           ;PS_2.c: 955: timeout++;
 14627  0D64  3001               	movlw	1
 14628  0D65  0020               	movlb	0	; select bank0
 14629  0D66  07B6               	addwf	Send_PS2@timeout,f
 14630  0D67  3000               	movlw	0
 14631  0D68  3DB7               	addwfc	Send_PS2@timeout+1,f
 14632                           
 14633                           ;PS_2.c: 956: if(timeout > 15000)
 14634  0D69  303A               	movlw	58
 14635  0D6A  0237               	subwf	Send_PS2@timeout+1,w
 14636  0D6B  3099               	movlw	153
 14637  0D6C  1903               	skipnz
 14638  0D6D  0236               	subwf	Send_PS2@timeout,w
 14639  0D6E  1C03               	skipc
 14640  0D6F  2D5C               	goto	l6208
 14641                           
 14642                           ;PS_2.c: 957: {
 14643                           ;PS_2.c: 958: Clock_TRIS(1);
 14644  0D70  3001               	movlw	1
 14645  0D71  3198  20FA  318C   	fcall	_Clock_TRIS
 14646                           
 14647                           ;PS_2.c: 959: Data_TRIS(1);
 14648  0D74  3001               	movlw	1
 14649  0D75  3199  2105         	fcall	_Data_TRIS
 14650                           
 14651                           ;PS_2.c: 960: return 1;
 14652  0D77  3001               	movlw	1
 14653  0D78  0008               	return
 14654  0D79                     l6210:	
 14655                           
 14656                           ;PS_2.c: 961: }
 14657                           ;PS_2.c: 962: }
 14658                           ;PS_2.c: 963: timeout=0;
 14659  0D79  0020               	movlb	0	; select bank0
 14660  0D7A  01B6               	clrf	Send_PS2@timeout
 14661  0D7B  01B7               	clrf	Send_PS2@timeout+1
 14662  0D7C                     l6220:	
 14663                           ;PS_2.c: 964: while(READ_PS_2_PIN(0b00100000))
 14664                           
 14665  0D7C  3020               	movlw	32
 14666  0D7D  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14667  0D80  3800               	iorlw	0
 14668  0D81  1903               	btfsc	3,2
 14669  0D82  2D99               	goto	l6222
 14670                           
 14671                           ;PS_2.c: 965: {
 14672                           ;PS_2.c: 966: __nop();
 14673  0D83  0000               	nop
 14674                           
 14675                           ;PS_2.c: 967: timeout++;
 14676  0D84  3001               	movlw	1
 14677  0D85  0020               	movlb	0	; select bank0
 14678  0D86  07B6               	addwf	Send_PS2@timeout,f
 14679  0D87  3000               	movlw	0
 14680  0D88  3DB7               	addwfc	Send_PS2@timeout+1,f
 14681                           
 14682                           ;PS_2.c: 968: if(timeout > 15000)
 14683  0D89  303A               	movlw	58
 14684  0D8A  0237               	subwf	Send_PS2@timeout+1,w
 14685  0D8B  3099               	movlw	153
 14686  0D8C  1903               	skipnz
 14687  0D8D  0236               	subwf	Send_PS2@timeout,w
 14688  0D8E  1C03               	skipc
 14689  0D8F  2D7C               	goto	l6220
 14690                           
 14691                           ;PS_2.c: 969: {
 14692                           ;PS_2.c: 970: Clock_TRIS(1);
 14693  0D90  3001               	movlw	1
 14694  0D91  3198  20FA  318C   	fcall	_Clock_TRIS
 14695                           
 14696                           ;PS_2.c: 971: Data_TRIS(1);
 14697  0D94  3001               	movlw	1
 14698  0D95  3199  2105         	fcall	_Data_TRIS
 14699                           
 14700                           ;PS_2.c: 972: return 1;
 14701  0D97  3001               	movlw	1
 14702  0D98  0008               	return
 14703  0D99                     l6222:	
 14704                           
 14705                           ;PS_2.c: 973: }
 14706                           ;PS_2.c: 974: }
 14707                           ;PS_2.c: 976: Data_TRIS(1);
 14708  0D99  3001               	movlw	1
 14709  0D9A  3199  2105  318C   	fcall	_Data_TRIS
 14710                           
 14711                           ;PS_2.c: 978: timeout=0;
 14712  0D9D  0020               	movlb	0	; select bank0
 14713  0D9E  01B6               	clrf	Send_PS2@timeout
 14714  0D9F  01B7               	clrf	Send_PS2@timeout+1
 14715  0DA0                     l6234:	
 14716                           ;PS_2.c: 979: while(READ_PS_2_PIN(0b00010000))
 14717                           
 14718  0DA0  3010               	movlw	16
 14719  0DA1  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14720  0DA4  3800               	iorlw	0
 14721  0DA5  1903               	btfsc	3,2
 14722  0DA6  2DBD               	goto	l6236
 14723                           
 14724                           ;PS_2.c: 980: {
 14725                           ;PS_2.c: 981: __nop();
 14726  0DA7  0000               	nop
 14727                           
 14728                           ;PS_2.c: 982: timeout++;
 14729  0DA8  3001               	movlw	1
 14730  0DA9  0020               	movlb	0	; select bank0
 14731  0DAA  07B6               	addwf	Send_PS2@timeout,f
 14732  0DAB  3000               	movlw	0
 14733  0DAC  3DB7               	addwfc	Send_PS2@timeout+1,f
 14734                           
 14735                           ;PS_2.c: 983: if(timeout > 15000)
 14736  0DAD  303A               	movlw	58
 14737  0DAE  0237               	subwf	Send_PS2@timeout+1,w
 14738  0DAF  3099               	movlw	153
 14739  0DB0  1903               	skipnz
 14740  0DB1  0236               	subwf	Send_PS2@timeout,w
 14741  0DB2  1C03               	skipc
 14742  0DB3  2DA0               	goto	l6234
 14743                           
 14744                           ;PS_2.c: 984: {
 14745                           ;PS_2.c: 985: Clock_TRIS(1);
 14746  0DB4  3001               	movlw	1
 14747  0DB5  3198  20FA  318C   	fcall	_Clock_TRIS
 14748                           
 14749                           ;PS_2.c: 986: Data_TRIS(1);
 14750  0DB8  3001               	movlw	1
 14751  0DB9  3199  2105         	fcall	_Data_TRIS
 14752                           
 14753                           ;PS_2.c: 987: return 1;
 14754  0DBB  3001               	movlw	1
 14755  0DBC  0008               	return
 14756  0DBD                     l6236:	
 14757                           
 14758                           ;PS_2.c: 988: }
 14759                           ;PS_2.c: 989: }
 14760                           ;PS_2.c: 990: timeout=0;
 14761  0DBD  0020               	movlb	0	; select bank0
 14762  0DBE  01B6               	clrf	Send_PS2@timeout
 14763  0DBF  01B7               	clrf	Send_PS2@timeout+1
 14764  0DC0                     l6246:	
 14765                           ;PS_2.c: 991: while(READ_PS_2_PIN(0b00100000))
 14766                           
 14767  0DC0  3020               	movlw	32
 14768  0DC1  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14769  0DC4  3800               	iorlw	0
 14770  0DC5  1903               	btfsc	3,2
 14771  0DC6  2DDD               	goto	l6248
 14772                           
 14773                           ;PS_2.c: 992: {
 14774                           ;PS_2.c: 993: __nop();
 14775  0DC7  0000               	nop
 14776                           
 14777                           ;PS_2.c: 994: timeout++;
 14778  0DC8  3001               	movlw	1
 14779  0DC9  0020               	movlb	0	; select bank0
 14780  0DCA  07B6               	addwf	Send_PS2@timeout,f
 14781  0DCB  3000               	movlw	0
 14782  0DCC  3DB7               	addwfc	Send_PS2@timeout+1,f
 14783                           
 14784                           ;PS_2.c: 995: if(timeout > 15000)
 14785  0DCD  303A               	movlw	58
 14786  0DCE  0237               	subwf	Send_PS2@timeout+1,w
 14787  0DCF  3099               	movlw	153
 14788  0DD0  1903               	skipnz
 14789  0DD1  0236               	subwf	Send_PS2@timeout,w
 14790  0DD2  1C03               	skipc
 14791  0DD3  2DC0               	goto	l6246
 14792                           
 14793                           ;PS_2.c: 996: {
 14794                           ;PS_2.c: 997: Clock_TRIS(1);
 14795  0DD4  3001               	movlw	1
 14796  0DD5  3198  20FA  318C   	fcall	_Clock_TRIS
 14797                           
 14798                           ;PS_2.c: 998: Data_TRIS(1);
 14799  0DD8  3001               	movlw	1
 14800  0DD9  3199  2105         	fcall	_Data_TRIS
 14801                           
 14802                           ;PS_2.c: 999: return 1;
 14803  0DDB  3001               	movlw	1
 14804  0DDC  0008               	return
 14805  0DDD                     l6248:	
 14806                           
 14807                           ;PS_2.c: 1000: }
 14808                           ;PS_2.c: 1001: }
 14809                           ;PS_2.c: 1002: timeout=0;
 14810  0DDD  0020               	movlb	0	; select bank0
 14811  0DDE  01B6               	clrf	Send_PS2@timeout
 14812  0DDF  01B7               	clrf	Send_PS2@timeout+1
 14813  0DE0                     l6258:	
 14814                           ;PS_2.c: 1003: while(!READ_PS_2_PIN(0b00010000))
 14815                           
 14816  0DE0  3010               	movlw	16
 14817  0DE1  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14818  0DE4  3A00               	xorlw	0
 14819  0DE5  1D03               	btfss	3,2
 14820  0DE6  2DFD               	goto	l6260
 14821                           
 14822                           ;PS_2.c: 1004: {
 14823                           ;PS_2.c: 1005: __nop();
 14824  0DE7  0000               	nop
 14825                           
 14826                           ;PS_2.c: 1006: timeout++;
 14827  0DE8  3001               	movlw	1
 14828  0DE9  0020               	movlb	0	; select bank0
 14829  0DEA  07B6               	addwf	Send_PS2@timeout,f
 14830  0DEB  3000               	movlw	0
 14831  0DEC  3DB7               	addwfc	Send_PS2@timeout+1,f
 14832                           
 14833                           ;PS_2.c: 1007: if(timeout > 15000)
 14834  0DED  303A               	movlw	58
 14835  0DEE  0237               	subwf	Send_PS2@timeout+1,w
 14836  0DEF  3099               	movlw	153
 14837  0DF0  1903               	skipnz
 14838  0DF1  0236               	subwf	Send_PS2@timeout,w
 14839  0DF2  1C03               	skipc
 14840  0DF3  2DE0               	goto	l6258
 14841                           
 14842                           ;PS_2.c: 1008: {
 14843                           ;PS_2.c: 1009: Clock_TRIS(1);
 14844  0DF4  3001               	movlw	1
 14845  0DF5  3198  20FA  318C   	fcall	_Clock_TRIS
 14846                           
 14847                           ;PS_2.c: 1010: Data_TRIS(1);
 14848  0DF8  3001               	movlw	1
 14849  0DF9  3199  2105         	fcall	_Data_TRIS
 14850                           
 14851                           ;PS_2.c: 1011: return 1;
 14852  0DFB  3001               	movlw	1
 14853  0DFC  0008               	return
 14854  0DFD                     l6260:	
 14855                           
 14856                           ;PS_2.c: 1012: }
 14857                           ;PS_2.c: 1013: }
 14858                           ;PS_2.c: 1014: timeout=0;
 14859  0DFD  0020               	movlb	0	; select bank0
 14860  0DFE  01B6               	clrf	Send_PS2@timeout
 14861  0DFF  01B7               	clrf	Send_PS2@timeout+1
 14862  0E00                     l6270:	
 14863                           ;PS_2.c: 1015: while(!READ_PS_2_PIN(0b00100000))
 14864                           
 14865  0E00  3020               	movlw	32
 14866  0E01  3199  2182  318C   	fcall	_READ_PS_2_PIN
 14867  0E04  3A00               	xorlw	0
 14868  0E05  1D03               	btfss	3,2
 14869  0E06  2E1D               	goto	l6272
 14870                           
 14871                           ;PS_2.c: 1016: {
 14872                           ;PS_2.c: 1017: __nop();
 14873  0E07  0000               	nop
 14874                           
 14875                           ;PS_2.c: 1018: timeout++;
 14876  0E08  3001               	movlw	1
 14877  0E09  0020               	movlb	0	; select bank0
 14878  0E0A  07B6               	addwf	Send_PS2@timeout,f
 14879  0E0B  3000               	movlw	0
 14880  0E0C  3DB7               	addwfc	Send_PS2@timeout+1,f
 14881                           
 14882                           ;PS_2.c: 1019: if(timeout > 15000)
 14883  0E0D  303A               	movlw	58
 14884  0E0E  0237               	subwf	Send_PS2@timeout+1,w
 14885  0E0F  3099               	movlw	153
 14886  0E10  1903               	skipnz
 14887  0E11  0236               	subwf	Send_PS2@timeout,w
 14888  0E12  1C03               	skipc
 14889  0E13  2E00               	goto	l6270
 14890                           
 14891                           ;PS_2.c: 1020: {
 14892                           ;PS_2.c: 1021: Clock_TRIS(1);
 14893  0E14  3001               	movlw	1
 14894  0E15  3198  20FA  318C   	fcall	_Clock_TRIS
 14895                           
 14896                           ;PS_2.c: 1022: Data_TRIS(1);
 14897  0E18  3001               	movlw	1
 14898  0E19  3199  2105         	fcall	_Data_TRIS
 14899                           
 14900                           ;PS_2.c: 1023: return 1;
 14901  0E1B  3001               	movlw	1
 14902  0E1C  0008               	return
 14903  0E1D                     l6272:	
 14904                           
 14905                           ;PS_2.c: 1024: }
 14906                           ;PS_2.c: 1025: }
 14907                           ;PS_2.c: 1028: Clock_TRIS(1);
 14908  0E1D  3001               	movlw	1
 14909  0E1E  3198  20FA  318C   	fcall	_Clock_TRIS
 14910                           
 14911                           ;PS_2.c: 1029: Data_TRIS(1);
 14912  0E21  3001               	movlw	1
 14913  0E22  3199  2105  318C   	fcall	_Data_TRIS
 14914                           
 14915                           ;PS_2.c: 1030: PS_2_ENABLE_INTERRUPT(0b00100000);
 14916  0E25  3020               	movlw	32
 14917  0E26  3199  21E0         	fcall	_PS_2_ENABLE_INTERRUPT
 14918                           
 14919                           ;PS_2.c: 1031: return 0;
 14920  0E28  3000               	movlw	0
 14921  0E29  0008               	return
 14922  0E2A                     __end_of_Send_PS2:	
 14923                           
 14924                           	psect	text42
 14925  1BF5                     __ptext42:	
 14926 ;; *************** function _delayUS *****************
 14927 ;; Defined at:
 14928 ;;		line 48 in file "MISC.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;  US              4    5[BANK0 ] long 
 14931 ;; Auto vars:     Size  Location     Type
 14932 ;;  i               4   10[BANK0 ] long 
 14933 ;;  j               1   14[BANK0 ] unsigned char 
 14934 ;; Return value:  Size  Location     Type
 14935 ;;		None               void
 14936 ;; Registers used:
 14937 ;;		wreg, status,2, status,0
 14938 ;; Tracked objects:
 14939 ;;		On entry : 0/0
 14940 ;;		On exit  : 0/0
 14941 ;;		Unchanged: 0/0
 14942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14947 ;;Total ram usage:       10 bytes
 14948 ;; Hardware stack levels used:    1
 14949 ;; Hardware stack levels required when called:    3
 14950 ;; This function calls:
 14951 ;;		Nothing
 14952 ;; This function is called by:
 14953 ;;		_main
 14954 ;;		_Init_System
 14955 ;;		_UART_send_break_timed
 14956 ;;		_UARTstringWAIT
 14957 ;;		_SetBaud
 14958 ;;		_PS_2_Update
 14959 ;;		_Send_PS2
 14960 ;;		_Init_PS_2_Send
 14961 ;;		_Keyboard_Connected
 14962 ;;		_WriteFlash_Sequential
 14963 ;;		_InternalADC_Read
 14964 ;; This function uses a non-reentrant model
 14965 ;;
 14966                           
 14967                           
 14968                           ;psect for function _delayUS
 14969  1BF5                     _delayUS:	
 14970                           
 14971                           ;MISC.c: 50: long i;
 14972                           ;MISC.c: 51: unsigned char j;
 14973                           ;MISC.c: 52: for(i=0;i<US;i+=6)
 14974                           
 14975                           ;incstack = 0
 14976                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 14977  1BF5  3000               	movlw	0
 14978  1BF6  0020               	movlb	0	; select bank0
 14979  1BF7  00AD               	movwf	delayUS@i+3
 14980  1BF8  3000               	movlw	0
 14981  1BF9  00AC               	movwf	delayUS@i+2
 14982  1BFA  3000               	movlw	0
 14983  1BFB  00AB               	movwf	delayUS@i+1
 14984  1BFC  3000               	movlw	0
 14985  1BFD  00AA               	movwf	delayUS@i
 14986  1BFE                     l271:	
 14987  1BFE  082D               	movf	delayUS@i+3,w
 14988  1BFF  3A80               	xorlw	128
 14989  1C00  00A9               	movwf	??_delayUS
 14990  1C01  0828               	movf	delayUS@US+3,w
 14991  1C02  3A80               	xorlw	128
 14992  1C03  0229               	subwf	??_delayUS,w
 14993  1C04  1D03               	skipz
 14994  1C05  2C10               	goto	u7153
 14995  1C06  0827               	movf	delayUS@US+2,w
 14996  1C07  022C               	subwf	delayUS@i+2,w
 14997  1C08  1D03               	skipz
 14998  1C09  2C10               	goto	u7153
 14999  1C0A  0826               	movf	delayUS@US+1,w
 15000  1C0B  022B               	subwf	delayUS@i+1,w
 15001  1C0C  1D03               	skipz
 15002  1C0D  2C10               	goto	u7153
 15003  1C0E  0825               	movf	delayUS@US,w
 15004  1C0F  022A               	subwf	delayUS@i,w
 15005  1C10                     u7153:	
 15006  1C10  1803               	btfsc	3,0
 15007  1C11  0008               	return
 15008                           
 15009                           ;MISC.c: 53: {
 15010                           ;MISC.c: 54: for(j=0;j<32;j++)
 15011  1C12  01AE               	clrf	delayUS@j
 15012  1C13  3020               	movlw	32
 15013  1C14  022E               	subwf	delayUS@j,w
 15014  1C15  1803               	btfsc	3,0
 15015  1C16  2C21               	goto	l5550
 15016  1C17                     l273:	
 15017                           
 15018                           ;MISC.c: 55: {
 15019                           ;MISC.c: 56: __nop();
 15020  1C17  0000               	nop
 15021  1C18  3001               	movlw	1
 15022  1C19  0020               	movlb	0	; select bank0
 15023  1C1A  00A9               	movwf	??_delayUS
 15024  1C1B  0829               	movf	??_delayUS,w
 15025  1C1C  07AE               	addwf	delayUS@j,f
 15026  1C1D  3020               	movlw	32
 15027  1C1E  022E               	subwf	delayUS@j,w
 15028  1C1F  1C03               	skipc
 15029  1C20  2C17               	goto	l273
 15030  1C21                     l5550:	
 15031  1C21  3006               	movlw	6
 15032  1C22  07AA               	addwf	delayUS@i,f
 15033  1C23  3000               	movlw	0
 15034  1C24  3DAB               	addwfc	delayUS@i+1,f
 15035  1C25  3000               	movlw	0
 15036  1C26  3DAC               	addwfc	delayUS@i+2,f
 15037  1C27  3000               	movlw	0
 15038  1C28  3DAD               	addwfc	delayUS@i+3,f
 15039  1C29  2BFE               	goto	l271
 15040  1C2A                     __end_of_delayUS:	
 15041                           
 15042                           	psect	text43
 15043  1982                     __ptext43:	
 15044 ;; *************** function _READ_PS_2_PIN *****************
 15045 ;; Defined at:
 15046 ;;		line 223 in file "PS_2.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;  DATA_CLK        1    wreg     unsigned char 
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 15051 ;; Return value:  Size  Location     Type
 15052 ;;                  1    wreg      unsigned char 
 15053 ;; Registers used:
 15054 ;;		wreg
 15055 ;; Tracked objects:
 15056 ;;		On entry : 0/0
 15057 ;;		On exit  : 0/0
 15058 ;;		Unchanged: 0/0
 15059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;Total ram usage:        1 bytes
 15065 ;; Hardware stack levels used:    1
 15066 ;; Hardware stack levels required when called:    3
 15067 ;; This function calls:
 15068 ;;		Nothing
 15069 ;; This function is called by:
 15070 ;;		_Send_PS2
 15071 ;; This function uses a non-reentrant model
 15072 ;;
 15073                           
 15074                           
 15075                           ;psect for function _READ_PS_2_PIN
 15076  1982                     _READ_PS_2_PIN:	
 15077                           
 15078                           ;incstack = 0
 15079                           ; Regs used in _READ_PS_2_PIN: [wreg]
 15080                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 15081  1982  0020               	movlb	0	; select bank0
 15082  1983  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 15083                           
 15084                           ;PS_2.c: 225: if(DATA_CLK == 0b00100000)
 15085  1984  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 15086  1985  3A20               	xorlw	32
 15087  1986  1D03               	skipz
 15088  1987  298E               	goto	l594
 15089                           
 15090                           ;PS_2.c: 226: {
 15091                           ;PS_2.c: 228: if((PORTA & 0b00100000) == 0b00100000)
 15092  1988  1E8C               	btfss	12,5	;volatile
 15093  1989  298C               	goto	l5810
 15094                           
 15095                           ;PS_2.c: 229: {
 15096                           ;PS_2.c: 230: return (1);
 15097  198A  3001               	movlw	1
 15098                           
 15099                           ;PS_2.c: 231: }
 15100  198B  0008               	return
 15101  198C                     l5810:	
 15102                           
 15103                           ;PS_2.c: 232: else
 15104                           ;PS_2.c: 233: {
 15105                           ;PS_2.c: 234: return 0;
 15106  198C  3000               	movlw	0
 15107                           
 15108                           ;PS_2.c: 235: }
 15109                           ;PS_2.c: 236: }
 15110  198D  0008               	return
 15111  198E                     l594:	
 15112                           
 15113                           ;PS_2.c: 237: else
 15114                           ;PS_2.c: 238: {
 15115                           ;PS_2.c: 240: if((PORTA & 0b00010000) == 0b00010000)
 15116  198E  1E0C               	btfss	12,4	;volatile
 15117  198F  2992               	goto	l5820
 15118                           
 15119                           ;PS_2.c: 241: {
 15120                           ;PS_2.c: 242: return (1);
 15121  1990  3001               	movlw	1
 15122                           
 15123                           ;PS_2.c: 243: }
 15124  1991  0008               	return
 15125  1992                     l5820:	
 15126                           
 15127                           ;PS_2.c: 244: else
 15128                           ;PS_2.c: 245: {
 15129                           ;PS_2.c: 246: return 0;
 15130  1992  3000               	movlw	0
 15131  1993  0008               	return
 15132  1994                     __end_of_READ_PS_2_PIN:	
 15133                           
 15134                           	psect	text44
 15135  19E0                     __ptext44:	
 15136 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 15137 ;; Defined at:
 15138 ;;		line 198 in file "PS_2.c"
 15139 ;; Parameters:    Size  Location     Type
 15140 ;;  DATA_CLK        1    wreg     unsigned char 
 15141 ;; Auto vars:     Size  Location     Type
 15142 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15143 ;; Return value:  Size  Location     Type
 15144 ;;		None               void
 15145 ;; Registers used:
 15146 ;;		wreg, status,2, status,0
 15147 ;; Tracked objects:
 15148 ;;		On entry : 0/0
 15149 ;;		On exit  : 0/0
 15150 ;;		Unchanged: 0/0
 15151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;Total ram usage:        2 bytes
 15157 ;; Hardware stack levels used:    1
 15158 ;; Hardware stack levels required when called:    3
 15159 ;; This function calls:
 15160 ;;		Nothing
 15161 ;; This function is called by:
 15162 ;;		_main
 15163 ;;		_PS_2_Update
 15164 ;;		_Send_PS2
 15165 ;;		_Init_PS_2_Send
 15166 ;;		_Keyboard_Connected
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           
 15171                           ;psect for function _PS_2_ENABLE_INTERRUPT
 15172  19E0                     _PS_2_ENABLE_INTERRUPT:	
 15173                           
 15174                           ;incstack = 0
 15175                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 15176                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 15177  19E0  0020               	movlb	0	; select bank0
 15178  19E1  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 15179                           
 15180                           ;PS_2.c: 200: if(DATA_CLK == 0b00100000)
 15181  19E2  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 15182  19E3  3A20               	xorlw	32
 15183  19E4  1D03               	skipz
 15184  19E5  29ED               	goto	l5838
 15185                           
 15186                           ;PS_2.c: 201: {
 15187                           ;PS_2.c: 204: IOCAF &= ~0b00100000;
 15188  19E6  30DF               	movlw	223
 15189  19E7  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15190  19E8  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15191  19E9  0027               	movlb	7	; select bank7
 15192  19EA  0593               	andwf	19,f	;volatile
 15193                           
 15194                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 15195  19EB  1692               	bsf	18,5	;volatile
 15196                           
 15197                           ;PS_2.c: 207: }
 15198  19EC  0008               	return
 15199  19ED                     l5838:	
 15200                           
 15201                           ;PS_2.c: 208: else
 15202                           ;PS_2.c: 209: {
 15203                           ;PS_2.c: 212: IOCAF &= ~0b00010000;
 15204  19ED  30EF               	movlw	239
 15205  19EE  0020               	movlb	0	; select bank0
 15206  19EF  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 15207  19F0  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 15208  19F1  0027               	movlb	7	; select bank7
 15209  19F2  0593               	andwf	19,f	;volatile
 15210                           
 15211                           ;PS_2.c: 213: IOCAN |= 0b00010000;
 15212  19F3  1612               	bsf	18,4	;volatile
 15213  19F4  0008               	return
 15214  19F5                     __end_of_PS_2_ENABLE_INTERRUPT:	
 15215                           
 15216                           	psect	text45
 15217  1905                     __ptext45:	
 15218 ;; *************** function _Data_TRIS *****************
 15219 ;; Defined at:
 15220 ;;		line 134 in file "PS_2.c"
 15221 ;; Parameters:    Size  Location     Type
 15222 ;;  direction       1    wreg     unsigned char 
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;  direction       1    5[BANK0 ] unsigned char 
 15225 ;; Return value:  Size  Location     Type
 15226 ;;		None               void
 15227 ;; Registers used:
 15228 ;;		wreg, status,2, status,0
 15229 ;; Tracked objects:
 15230 ;;		On entry : 0/0
 15231 ;;		On exit  : 0/0
 15232 ;;		Unchanged: 0/0
 15233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;Total ram usage:        1 bytes
 15239 ;; Hardware stack levels used:    1
 15240 ;; Hardware stack levels required when called:    3
 15241 ;; This function calls:
 15242 ;;		Nothing
 15243 ;; This function is called by:
 15244 ;;		_PS_2_INIT
 15245 ;;		_Send_PS2
 15246 ;; This function uses a non-reentrant model
 15247 ;;
 15248                           
 15249                           
 15250                           ;psect for function _Data_TRIS
 15251  1905                     _Data_TRIS:	
 15252                           
 15253                           ;incstack = 0
 15254                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15255                           ;Data_TRIS@direction stored from wreg
 15256  1905  0020               	movlb	0	; select bank0
 15257  1906  00A5               	movwf	Data_TRIS@direction
 15258                           
 15259                           ;PS_2.c: 136: if(direction == 0)
 15260  1907  08A5               	movf	Data_TRIS@direction,f
 15261  1908  1D03               	skipz
 15262  1909  290D               	goto	l574
 15263                           
 15264                           ;PS_2.c: 137: {
 15265                           ;PS_2.c: 138: TRISAbits.TRISA4 = 0;
 15266  190A  0021               	movlb	1	; select bank1
 15267  190B  120C               	bcf	12,4	;volatile
 15268                           
 15269                           ;PS_2.c: 139: }
 15270  190C  0008               	return
 15271  190D                     l574:	
 15272                           
 15273                           ;PS_2.c: 140: else
 15274                           ;PS_2.c: 141: {
 15275                           ;PS_2.c: 142: TRISAbits.TRISA4 = 1;
 15276  190D  0021               	movlb	1	; select bank1
 15277  190E  160C               	bsf	12,4	;volatile
 15278  190F  0008               	return
 15279  1910                     __end_of_Data_TRIS:	
 15280                           
 15281                           	psect	text46
 15282  18FA                     __ptext46:	
 15283 ;; *************** function _Clock_TRIS *****************
 15284 ;; Defined at:
 15285 ;;		line 117 in file "PS_2.c"
 15286 ;; Parameters:    Size  Location     Type
 15287 ;;  direction       1    wreg     unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  direction       1    5[BANK0 ] unsigned char 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;		None               void
 15292 ;; Registers used:
 15293 ;;		wreg, status,2, status,0
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;Total ram usage:        1 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:    3
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		_PS_2_INIT
 15310 ;;		_Send_PS2
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           
 15315                           ;psect for function _Clock_TRIS
 15316  18FA                     _Clock_TRIS:	
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15320                           ;Clock_TRIS@direction stored from wreg
 15321  18FA  0020               	movlb	0	; select bank0
 15322  18FB  00A5               	movwf	Clock_TRIS@direction
 15323                           
 15324                           ;PS_2.c: 119: if(direction == 0)
 15325  18FC  08A5               	movf	Clock_TRIS@direction,f
 15326  18FD  1D03               	skipz
 15327  18FE  2902               	goto	l569
 15328                           
 15329                           ;PS_2.c: 120: {
 15330                           ;PS_2.c: 121: TRISAbits.TRISA5 = 0;
 15331  18FF  0021               	movlb	1	; select bank1
 15332  1900  128C               	bcf	12,5	;volatile
 15333                           
 15334                           ;PS_2.c: 122: }
 15335  1901  0008               	return
 15336  1902                     l569:	
 15337                           
 15338                           ;PS_2.c: 123: else
 15339                           ;PS_2.c: 124: {
 15340                           ;PS_2.c: 125: TRISAbits.TRISA5 = 1;
 15341  1902  0021               	movlb	1	; select bank1
 15342  1903  168C               	bsf	12,5	;volatile
 15343  1904  0008               	return
 15344  1905                     __end_of_Clock_TRIS:	
 15345                           
 15346                           	psect	text47
 15347  1AFB                     __ptext47:	
 15348 ;; *************** function _CheckSum_byte *****************
 15349 ;; Defined at:
 15350 ;;		line 68 in file "MISC.c"
 15351 ;; Parameters:    Size  Location     Type
 15352 ;;  This            2    5[BANK0 ] unsigned int 
 15353 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15354 ;; Auto vars:     Size  Location     Type
 15355 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15356 ;;  i               1   12[BANK0 ] unsigned char 
 15357 ;;  Parity          1   11[BANK0 ] unsigned char 
 15358 ;; Return value:  Size  Location     Type
 15359 ;;                  1    wreg      unsigned char 
 15360 ;; Registers used:
 15361 ;;		wreg, status,2, status,0
 15362 ;; Tracked objects:
 15363 ;;		On entry : 0/0
 15364 ;;		On exit  : 0/0
 15365 ;;		Unchanged: 0/0
 15366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;Total ram usage:        8 bytes
 15372 ;; Hardware stack levels used:    1
 15373 ;; Hardware stack levels required when called:    3
 15374 ;; This function calls:
 15375 ;;		Nothing
 15376 ;; This function is called by:
 15377 ;;		_UARTchar
 15378 ;;		_PS_2_Update
 15379 ;;		_Send_PS2
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           
 15384                           ;psect for function _CheckSum_byte
 15385  1AFB                     _CheckSum_byte:	
 15386                           
 15387                           ;MISC.c: 70: char i = 0;
 15388                           
 15389                           ;incstack = 0
 15390                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15391  1AFB  0020               	movlb	0	; select bank0
 15392  1AFC  01AC               	clrf	CheckSum_byte@i
 15393                           
 15394                           ;MISC.c: 71: unsigned char Parity = 0;
 15395  1AFD  01AB               	clrf	CheckSum_byte@Parity
 15396                           
 15397                           ;MISC.c: 72: unsigned int ThisTemp = This;
 15398  1AFE  0826               	movf	CheckSum_byte@This+1,w
 15399  1AFF  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15400  1B00  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15401  1B01  0825               	movf	CheckSum_byte@This,w
 15402  1B02  01A9               	clrf	CheckSum_byte@ThisTemp
 15403  1B03  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15404                           
 15405                           ;MISC.c: 74: for (i =0; i<8; i++)
 15406  1B04  01AC               	clrf	CheckSum_byte@i
 15407  1B05  3008               	movlw	8
 15408  1B06  022C               	subwf	CheckSum_byte@i,w
 15409  1B07  1803               	btfsc	3,0
 15410  1B08  2B1C               	goto	l5566
 15411  1B09                     l279:	
 15412                           
 15413                           ;MISC.c: 75: {
 15414                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 15415  1B09  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15416  1B0A  2B0F               	goto	l281
 15417                           
 15418                           ;MISC.c: 77: {
 15419                           ;MISC.c: 78: Parity++;
 15420  1B0B  3001               	movlw	1
 15421  1B0C  00A8               	movwf	??_CheckSum_byte
 15422  1B0D  0828               	movf	??_CheckSum_byte,w
 15423  1B0E  07AB               	addwf	CheckSum_byte@Parity,f
 15424  1B0F                     l281:	
 15425                           
 15426                           ;MISC.c: 79: }
 15427                           ;MISC.c: 80: ThisTemp >>= 1;
 15428  1B0F  3001               	movlw	1
 15429  1B10                     u7185:	
 15430  1B10  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15431  1B11  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15432  1B12  0B89               	decfsz	9,f
 15433  1B13  2B10               	goto	u7185
 15434  1B14  3001               	movlw	1
 15435  1B15  00A8               	movwf	??_CheckSum_byte
 15436  1B16  0828               	movf	??_CheckSum_byte,w
 15437  1B17  07AC               	addwf	CheckSum_byte@i,f
 15438  1B18  3008               	movlw	8
 15439  1B19  022C               	subwf	CheckSum_byte@i,w
 15440  1B1A  1C03               	skipc
 15441  1B1B  2B09               	goto	l279
 15442  1B1C                     l5566:	
 15443                           
 15444                           ;MISC.c: 81: }
 15445                           ;MISC.c: 82: if(Odd_Even == 3)
 15446  1B1C  0827               	movf	CheckSum_byte@Odd_Even,w
 15447  1B1D  3A03               	xorlw	3
 15448  1B1E  1D03               	skipz
 15449  1B1F  2B26               	goto	l282
 15450                           
 15451                           ;MISC.c: 83: {
 15452                           ;MISC.c: 84: if(Parity % 2 == 0)
 15453  1B20  182B               	btfsc	CheckSum_byte@Parity,0
 15454  1B21  2B24               	goto	l5574
 15455                           
 15456                           ;MISC.c: 85: {
 15457                           ;MISC.c: 86: return 1;
 15458  1B22  3001               	movlw	1
 15459  1B23  0008               	return
 15460  1B24                     l5574:	
 15461                           
 15462                           ;MISC.c: 87: }
 15463                           ;MISC.c: 88: return 0;
 15464  1B24  3000               	movlw	0
 15465                           
 15466                           ;MISC.c: 89: }
 15467  1B25  0008               	return
 15468  1B26                     l282:	
 15469                           
 15470                           ;MISC.c: 90: else
 15471                           ;MISC.c: 91: {
 15472                           ;MISC.c: 92: if(Parity % 2 == 1)
 15473  1B26  1C2B               	btfss	CheckSum_byte@Parity,0
 15474  1B27  2B2A               	goto	l5584
 15475                           
 15476                           ;MISC.c: 93: {
 15477                           ;MISC.c: 94: return 1;
 15478  1B28  3001               	movlw	1
 15479  1B29  0008               	return
 15480  1B2A                     l5584:	
 15481                           
 15482                           ;MISC.c: 95: }
 15483                           ;MISC.c: 96: return 0;
 15484  1B2A  3000               	movlw	0
 15485  1B2B  0008               	return
 15486  1B2C                     __end_of_CheckSum_byte:	
 15487                           
 15488                           	psect	text48
 15489  1A0D                     __ptext48:	
 15490 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15491 ;; Defined at:
 15492 ;;		line 175 in file "PS_2.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;  DATA_CLK        1    wreg     unsigned char 
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15497 ;; Return value:  Size  Location     Type
 15498 ;;		None               void
 15499 ;; Registers used:
 15500 ;;		wreg, status,2, status,0
 15501 ;; Tracked objects:
 15502 ;;		On entry : 0/0
 15503 ;;		On exit  : 0/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;Total ram usage:        2 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    3
 15513 ;; This function calls:
 15514 ;;		Nothing
 15515 ;; This function is called by:
 15516 ;;		_main
 15517 ;;		_PS_2_Update
 15518 ;;		_Init_PS_2_Send
 15519 ;;		_Keyboard_Connected
 15520 ;; This function uses a non-reentrant model
 15521 ;;
 15522                           
 15523                           
 15524                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15525  1A0D                     _PS_2_DISABLE_INTERRUPT:	
 15526                           
 15527                           ;incstack = 0
 15528                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15529                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15530  1A0D  0020               	movlb	0	; select bank0
 15531  1A0E  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15532                           
 15533                           ;PS_2.c: 177: if(DATA_CLK == 0b00100000)
 15534  1A0F  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15535  1A10  3A20               	xorlw	32
 15536  1A11  1D03               	skipz
 15537  1A12  2A1F               	goto	l6014
 15538                           
 15539                           ;PS_2.c: 178: {
 15540                           ;PS_2.c: 181: IOCAN &= ~0b00100000;
 15541  1A13  30DF               	movlw	223
 15542  1A14  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15543  1A15  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15544  1A16  0027               	movlb	7	; select bank7
 15545  1A17  0592               	andwf	18,f	;volatile
 15546                           
 15547                           ;PS_2.c: 182: IOCAF &= ~0b00100000;
 15548  1A18  30DF               	movlw	223
 15549  1A19  0020               	movlb	0	; select bank0
 15550  1A1A  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15551  1A1B  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15552  1A1C  0027               	movlb	7	; select bank7
 15553  1A1D  0593               	andwf	19,f	;volatile
 15554                           
 15555                           ;PS_2.c: 183: }
 15556  1A1E  0008               	return
 15557  1A1F                     l6014:	
 15558                           
 15559                           ;PS_2.c: 184: else
 15560                           ;PS_2.c: 185: {
 15561                           ;PS_2.c: 188: IOCAN &= ~0b00010000;
 15562  1A1F  30EF               	movlw	239
 15563  1A20  0020               	movlb	0	; select bank0
 15564  1A21  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15565  1A22  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15566  1A23  0027               	movlb	7	; select bank7
 15567  1A24  0592               	andwf	18,f	;volatile
 15568                           
 15569                           ;PS_2.c: 189: IOCAF &= ~0b00010000;
 15570  1A25  30EF               	movlw	239
 15571  1A26  0020               	movlb	0	; select bank0
 15572  1A27  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15573  1A28  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15574  1A29  0027               	movlb	7	; select bank7
 15575  1A2A  0593               	andwf	19,f	;volatile
 15576  1A2B  0008               	return
 15577  1A2C                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15578                           
 15579                           	psect	text49
 15580  1A2C                     __ptext49:	
 15581 ;; *************** function _InitApp *****************
 15582 ;; Defined at:
 15583 ;;		line 63 in file "user.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;		None
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;		None
 15588 ;; Return value:  Size  Location     Type
 15589 ;;		None               void
 15590 ;; Registers used:
 15591 ;;		wreg, status,2
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;Total ram usage:        0 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    3
 15604 ;; This function calls:
 15605 ;;		Nothing
 15606 ;; This function is called by:
 15607 ;;		_main
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           
 15612                           ;psect for function _InitApp
 15613  1A2C                     _InitApp:	
 15614                           
 15615                           ;user.c: 65: LATC =0;
 15616                           
 15617                           ;incstack = 0
 15618                           ; Regs used in _InitApp: [wreg+status,2]
 15619  1A2C  0022               	movlb	2	; select bank2
 15620  1A2D  018E               	clrf	14	;volatile
 15621                           
 15622                           ;user.c: 66: LATA =0;
 15623  1A2E  018C               	clrf	12	;volatile
 15624                           
 15625                           ;user.c: 67: TRISCbits.TRISC2 = 0;
 15626  1A2F  0021               	movlb	1	; select bank1
 15627  1A30  110E               	bcf	14,2	;volatile
 15628                           
 15629                           ;user.c: 68: TRISCbits.TRISC1 = 0;
 15630  1A31  108E               	bcf	14,1	;volatile
 15631                           
 15632                           ;user.c: 69: TRISCbits.TRISC3 = 0;
 15633  1A32  118E               	bcf	14,3	;volatile
 15634                           
 15635                           ;user.c: 70: TRISCbits.TRISC4 = 0;
 15636  1A33  120E               	bcf	14,4	;volatile
 15637                           
 15638                           ;user.c: 71: TRISAbits.TRISA2 = 1;
 15639  1A34  150C               	bsf	12,2	;volatile
 15640                           
 15641                           ;user.c: 72: TRISCbits.TRISC0 = 0;
 15642  1A35  100E               	bcf	14,0	;volatile
 15643                           
 15644                           ;user.c: 75: LATC |= 0b00000010;
 15645  1A36  0022               	movlb	2	; select bank2
 15646  1A37  148E               	bsf	14,1	;volatile
 15647                           
 15648                           ;user.c: 76: PPSLOCK =0;
 15649  1A38  003C               	movlb	28	; select bank28
 15650  1A39  018F               	clrf	15	;volatile
 15651                           
 15652                           ;user.c: 77: RC2PPS = 0b00010100;
 15653  1A3A  3014               	movlw	20
 15654  1A3B  003D               	movlb	29	; select bank29
 15655  1A3C  00A2               	movwf	34	;volatile
 15656                           
 15657                           ;user.c: 78: CKPPS = 0b00010010;
 15658  1A3D  3012               	movlw	18
 15659  1A3E  003C               	movlb	28	; select bank28
 15660  1A3F  00A5               	movwf	37	;volatile
 15661                           
 15662                           ;user.c: 79: RXPPS = 0b00010101;
 15663  1A40  3015               	movlw	21
 15664  1A41  00A4               	movwf	36	;volatile
 15665                           
 15666                           ;user.c: 80: PPSLOCK =1;
 15667  1A42  3001               	movlw	1
 15668  1A43  008F               	movwf	15	;volatile
 15669                           
 15670                           ;user.c: 82: ANSELA &= ~0xFF;
 15671  1A44  0023               	movlb	3	; select bank3
 15672  1A45  018C               	clrf	12	;volatile
 15673                           
 15674                           ;user.c: 83: ANSELA |= 0b00000100;
 15675  1A46  150C               	bsf	12,2	;volatile
 15676                           
 15677                           ;user.c: 84: ANSELC &= ~0xFF;
 15678  1A47  018E               	clrf	14	;volatile
 15679                           
 15680                           ;user.c: 85: OPTION_REGbits.nWPUEN = 0;
 15681  1A48  0021               	movlb	1	; select bank1
 15682  1A49  1395               	bcf	21,7	;volatile
 15683                           
 15684                           ;user.c: 86: WPUC = 0b00100000;
 15685  1A4A  3020               	movlw	32
 15686  1A4B  0024               	movlb	4	; select bank4
 15687  1A4C  008E               	movwf	14	;volatile
 15688                           
 15689                           ;user.c: 87: WPUA = 0;
 15690  1A4D  018C               	clrf	12	;volatile
 15691  1A4E  0008               	return
 15692  1A4F                     __end_of_InitApp:	
 15693                           
 15694                           	psect	text50
 15695  1970                     __ptext50:	
 15696 ;; *************** function _ConfigureOscillator *****************
 15697 ;; Defined at:
 15698 ;;		line 40 in file "system.c"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;		None
 15701 ;; Auto vars:     Size  Location     Type
 15702 ;;		None
 15703 ;; Return value:  Size  Location     Type
 15704 ;;		None               void
 15705 ;; Registers used:
 15706 ;;		wreg, status,2, status,0
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;Total ram usage:        1 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:    3
 15719 ;; This function calls:
 15720 ;;		Nothing
 15721 ;; This function is called by:
 15722 ;;		_main
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           
 15727                           ;psect for function _ConfigureOscillator
 15728  1970                     _ConfigureOscillator:	
 15729                           
 15730                           ;system.c: 42: OSCCON= 0b11110000;
 15731                           
 15732                           ;incstack = 0
 15733                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15734  1970  30F0               	movlw	240
 15735  1971  0021               	movlb	1	; select bank1
 15736  1972  0099               	movwf	25	;volatile
 15737  1973                     l5014:	
 15738                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 15739                           
 15740  1973  3000               	movlw	0
 15741  1974  181A               	btfsc	26,0	;volatile
 15742  1975  3001               	movlw	1
 15743  1976  051A               	andwf	26,w	;volatile
 15744  1977  1903               	btfsc	3,2
 15745  1978  2973               	goto	l5014
 15746  1979                     l5016:	
 15747                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 15748                           
 15749  1979  3040               	movlw	64
 15750  197A  0020               	movlb	0	; select bank0
 15751  197B  00A5               	movwf	??_ConfigureOscillator
 15752  197C  0825               	movf	??_ConfigureOscillator,w
 15753  197D  0021               	movlb	1	; select bank1
 15754  197E  059A               	andwf	26,f	;volatile
 15755  197F  1D03               	btfss	3,2
 15756  1980  0008               	return
 15757  1981  2979               	goto	l5016
 15758  1982                     __end_of_ConfigureOscillator:	
 15759                           
 15760                           	psect	intentry
 15761  0004                     __pintentry:	
 15762 ;; *************** function _isr *****************
 15763 ;; Defined at:
 15764 ;;		line 72 in file "interrupts.c"
 15765 ;; Parameters:    Size  Location     Type
 15766 ;;		None
 15767 ;; Auto vars:     Size  Location     Type
 15768 ;;  rx              1    4[BANK0 ] unsigned char 
 15769 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;		None               void
 15772 ;; Registers used:
 15773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;Total ram usage:        4 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    2
 15786 ;; This function calls:
 15787 ;;		i1_READ_PS_2_PIN
 15788 ;;		i1_ReadUSART
 15789 ;;		i1_UART_send_break_timed
 15790 ;;		i1_UARTchar
 15791 ;; This function is called by:
 15792 ;;		Interrupt level 1
 15793 ;; This function uses a non-reentrant model
 15794 ;;
 15795                           
 15796  0004                     _isr:	
 15797                           
 15798                           ;incstack = 0
 15799                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15800  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15801  0005  3180               	pagesel	$
 15802  0006  0020               	movlb	0	; select bank0
 15803  0007  087F               	movf	127,w
 15804  0008  00A2               	movwf	??_isr+1
 15805                           
 15806                           ;interrupts.c: 74: unsigned char rx;
 15807                           ;interrupts.c: 75: unsigned char Rx_fault =0;
 15808  0009  01A3               	clrf	isr@Rx_fault
 15809                           
 15810                           ;interrupts.c: 77: if(IOCAF & 0b00100000)
 15811  000A  0027               	movlb	7	; select bank7
 15812  000B  1E93               	btfss	19,5	;volatile
 15813  000C  287C               	goto	i1l63
 15814                           
 15815                           ;interrupts.c: 78: {
 15816                           ;interrupts.c: 80: LATC |= 0b00010000;
 15817  000D  0022               	movlb	2	; select bank2
 15818  000E  160E               	bsf	14,4	;volatile
 15819                           
 15820                           ;interrupts.c: 81: if(PS_2_bits <44)
 15821  000F  302C               	movlw	44
 15822  0010  0020               	movlb	0	; select bank0
 15823  0011  026A               	subwf	_PS_2_bits,w
 15824  0012  1803               	skipnc
 15825  0013  287A               	goto	i1l5390
 15826                           
 15827                           ;interrupts.c: 82: {
 15828                           ;interrupts.c: 83: if(PS_2_bits <11 )
 15829  0014  300B               	movlw	11
 15830  0015  026A               	subwf	_PS_2_bits,w
 15831  0016  1803               	skipnc
 15832  0017  2830               	goto	i1l5364
 15833                           
 15834                           ;interrupts.c: 84: {
 15835                           ;interrupts.c: 85: PS_2_Read_Data_FirstTEMP <<= 1;
 15836  0018  3001               	movlw	1
 15837  0019  0024               	movlb	4	; select bank4
 15838  001A                     u677_25:	
 15839  001A  35A0               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15840  001B  0DA1               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15841  001C  0B89               	decfsz	9,f
 15842  001D  281A               	goto	u677_25
 15843                           
 15844                           ;interrupts.c: 86: if(READ_PS_2_PIN(0b00010000))
 15845  001E  3010               	movlw	16
 15846  001F  3199  2194  3180   	fcall	i1_READ_PS_2_PIN
 15847  0022  3A00               	xorlw	0
 15848  0023  1903               	skipnz
 15849  0024  282A               	goto	i1l5360
 15850                           
 15851                           ;interrupts.c: 87: {
 15852                           ;interrupts.c: 88: PS_2_Read_Data_FirstTEMP++;
 15853  0025  3001               	movlw	1
 15854  0026  0024               	movlb	4	; select bank4
 15855  0027  07A0               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15856  0028  3000               	movlw	0
 15857  0029  3DA1               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15858  002A                     i1l5360:	
 15859                           
 15860                           ;interrupts.c: 89: }
 15861                           ;interrupts.c: 90: PS_2_Read_Data_SecondTEMP = 0;
 15862  002A  0024               	movlb	4	; select bank4
 15863  002B  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15864  002C  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15865                           
 15866                           ;interrupts.c: 91: PS_2_Read_Data_ThirdTEMP = 0;
 15867  002D  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15868  002E  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15869                           
 15870                           ;interrupts.c: 92: }
 15871  002F  2872               	goto	i1l5386
 15872  0030                     i1l5364:	
 15873                           
 15874                           ;interrupts.c: 93: else if(PS_2_bits <22 )
 15875  0030  3016               	movlw	22
 15876  0031  0020               	movlb	0	; select bank0
 15877  0032  026A               	subwf	_PS_2_bits,w
 15878  0033  1803               	skipnc
 15879  0034  2848               	goto	i1l5372
 15880                           
 15881                           ;interrupts.c: 94: {
 15882                           ;interrupts.c: 95: PS_2_Read_Data_SecondTEMP <<= 1;
 15883  0035  3001               	movlw	1
 15884  0036  0024               	movlb	4	; select bank4
 15885  0037                     u680_25:	
 15886  0037  35A4               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15887  0038  0DA5               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15888  0039  0B89               	decfsz	9,f
 15889  003A  2837               	goto	u680_25
 15890                           
 15891                           ;interrupts.c: 96: if(READ_PS_2_PIN(0b00010000))
 15892  003B  3010               	movlw	16
 15893  003C  3199  2194  3180   	fcall	i1_READ_PS_2_PIN
 15894  003F  3A00               	xorlw	0
 15895  0040  1903               	skipnz
 15896  0041  2872               	goto	i1l5386
 15897                           
 15898                           ;interrupts.c: 97: {
 15899                           ;interrupts.c: 98: PS_2_Read_Data_SecondTEMP++;
 15900  0042  3001               	movlw	1
 15901  0043  0024               	movlb	4	; select bank4
 15902  0044  07A4               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15903  0045  3000               	movlw	0
 15904  0046  3DA5               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15905                           
 15906                           ;interrupts.c: 99: }
 15907                           ;interrupts.c: 100: }
 15908  0047  2872               	goto	i1l5386
 15909  0048                     i1l5372:	
 15910                           
 15911                           ;interrupts.c: 101: else if(PS_2_bits <33 )
 15912  0048  3021               	movlw	33
 15913  0049  0020               	movlb	0	; select bank0
 15914  004A  026A               	subwf	_PS_2_bits,w
 15915  004B  1803               	skipnc
 15916  004C  2860               	goto	i1l5380
 15917                           
 15918                           ;interrupts.c: 102: {
 15919                           ;interrupts.c: 103: PS_2_Read_Data_ThirdTEMP <<= 1;
 15920  004D  3001               	movlw	1
 15921  004E  0024               	movlb	4	; select bank4
 15922  004F                     u683_25:	
 15923  004F  35A6               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15924  0050  0DA7               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15925  0051  0B89               	decfsz	9,f
 15926  0052  284F               	goto	u683_25
 15927                           
 15928                           ;interrupts.c: 104: if(READ_PS_2_PIN(0b00010000))
 15929  0053  3010               	movlw	16
 15930  0054  3199  2194  3180   	fcall	i1_READ_PS_2_PIN
 15931  0057  3A00               	xorlw	0
 15932  0058  1903               	skipnz
 15933  0059  2872               	goto	i1l5386
 15934                           
 15935                           ;interrupts.c: 105: {
 15936                           ;interrupts.c: 106: PS_2_Read_Data_ThirdTEMP++;
 15937  005A  3001               	movlw	1
 15938  005B  0024               	movlb	4	; select bank4
 15939  005C  07A6               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15940  005D  3000               	movlw	0
 15941  005E  3DA7               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15942                           
 15943                           ;interrupts.c: 107: }
 15944                           ;interrupts.c: 108: }
 15945  005F  2872               	goto	i1l5386
 15946  0060                     i1l5380:	
 15947                           
 15948                           ;interrupts.c: 109: else
 15949                           ;interrupts.c: 110: {
 15950                           ;interrupts.c: 111: PS_2_Read_Data_ForthTEMP <<= 1;
 15951  0060  3001               	movlw	1
 15952  0061  0024               	movlb	4	; select bank4
 15953  0062                     u685_25:	
 15954  0062  35A2               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 15955  0063  0DA3               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 15956  0064  0B89               	decfsz	9,f
 15957  0065  2862               	goto	u685_25
 15958                           
 15959                           ;interrupts.c: 112: if(READ_PS_2_PIN(0b00010000))
 15960  0066  3010               	movlw	16
 15961  0067  3199  2194  3180   	fcall	i1_READ_PS_2_PIN
 15962  006A  3A00               	xorlw	0
 15963  006B  1903               	skipnz
 15964  006C  2872               	goto	i1l5386
 15965                           
 15966                           ;interrupts.c: 113: {
 15967                           ;interrupts.c: 114: PS_2_Read_Data_ForthTEMP++;
 15968  006D  3001               	movlw	1
 15969  006E  0024               	movlb	4	; select bank4
 15970  006F  07A2               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 15971  0070  3000               	movlw	0
 15972  0071  3DA3               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 15973  0072                     i1l5386:	
 15974                           
 15975                           ;interrupts.c: 115: }
 15976                           ;interrupts.c: 116: }
 15977                           ;interrupts.c: 117: PS_2_bits++;
 15978  0072  3001               	movlw	1
 15979  0073  0020               	movlb	0	; select bank0
 15980  0074  00A1               	movwf	??_isr
 15981  0075  0821               	movf	??_isr,w
 15982  0076  07EA               	addwf	_PS_2_bits,f
 15983                           
 15984                           ;interrupts.c: 118: Read_Timer = 0;
 15985  0077  0022               	movlb	2	; select bank2
 15986  0078  01ED               	clrf	_Read_Timer^(0+256)
 15987  0079  01EE               	clrf	(_Read_Timer+1)^(0+256)
 15988  007A                     i1l5390:	
 15989                           
 15990                           ;interrupts.c: 119: }
 15991                           ;interrupts.c: 120: IOCAF &= ~0b00100000;
 15992  007A  30DF               	movlw	223
 15993  007B  287F               	goto	L21
 15994  007C                     i1l63:	
 15995                           ;interrupts.c: 121: }
 15996                           
 15997                           
 15998                           ;interrupts.c: 122: else if (IOCAF & 0b00010000)
 15999  007C  1E13               	btfss	19,4	;volatile
 16000  007D  2885               	goto	i1l76
 16001                           
 16002                           ;interrupts.c: 123: {
 16003                           ;interrupts.c: 124: IOCAF &= ~0b00010000;
 16004  007E  30EF               	movlw	239
 16005  007F                     L21:	
 16006  007F  0020               	movlb	0	; select bank0
 16007  0080  00A1               	movwf	??_isr
 16008  0081  0821               	movf	??_isr,w
 16009  0082  0027               	movlb	7	; select bank7
 16010  0083  0593               	andwf	19,f	;volatile
 16011                           
 16012                           ;interrupts.c: 125: }
 16013  0084  28DC               	goto	i1l89
 16014  0085                     i1l76:	
 16015                           
 16016                           ;interrupts.c: 126: else if (PIR1bits.RCIF)
 16017  0085  0020               	movlb	0	; select bank0
 16018  0086  1E91               	btfss	17,5	;volatile
 16019  0087  28BA               	goto	i1l78
 16020                           
 16021                           ;interrupts.c: 127: {
 16022                           ;interrupts.c: 129: LATC |= 0b00001000;
 16023  0088  0022               	movlb	2	; select bank2
 16024  0089  158E               	bsf	14,3	;volatile
 16025                           
 16026                           ;interrupts.c: 130: SinLEDtimer = 0;
 16027  008A  0024               	movlb	4	; select bank4
 16028  008B  01A8               	clrf	_SinLEDtimer^(0+512)
 16029  008C  01A9               	clrf	(_SinLEDtimer+1)^(0+512)
 16030                           
 16031                           ;interrupts.c: 131: Rx_fault = 0;
 16032  008D  0020               	movlb	0	; select bank0
 16033  008E  01A3               	clrf	isr@Rx_fault
 16034                           
 16035                           ;interrupts.c: 132: if(RC1STAbits.FERR)
 16036  008F  0023               	movlb	3	; select bank3
 16037  0090  1D1D               	btfss	29,2	;volatile
 16038  0091  2895               	goto	i1l5402
 16039                           
 16040                           ;interrupts.c: 133: {
 16041                           ;interrupts.c: 134: Rx_fault =1;
 16042  0092  0020               	movlb	0	; select bank0
 16043  0093  01A3               	clrf	isr@Rx_fault
 16044  0094  0AA3               	incf	isr@Rx_fault,f
 16045  0095                     i1l5402:	
 16046                           
 16047                           ;interrupts.c: 135: }
 16048                           ;interrupts.c: 136: rx = ReadUSART();
 16049  0095  3198  20E7  3180   	fcall	i1_ReadUSART
 16050  0098  0020               	movlb	0	; select bank0
 16051  0099  00A1               	movwf	??_isr
 16052  009A  0821               	movf	??_isr,w
 16053  009B  00A4               	movwf	isr@rx
 16054                           
 16055                           ;interrupts.c: 137: if(Rx_fault == 1)
 16056  009C  0823               	movf	isr@Rx_fault,w
 16057  009D  3A01               	xorlw	1
 16058  009E  1D03               	skipz
 16059  009F  28AB               	goto	i1l5410
 16060                           
 16061                           ;interrupts.c: 138: {
 16062                           ;interrupts.c: 139: if(rx == 0)
 16063  00A0  08A4               	movf	isr@rx,f
 16064  00A1  1D03               	skipz
 16065  00A2  28B7               	goto	i1l5412
 16066                           
 16067                           ;interrupts.c: 140: {
 16068                           ;interrupts.c: 142: UART_send_break_timed(100000);
 16069  00A3  30A0               	movlw	160
 16070  00A4  00FA               	movwf	i1UART_send_break_timed@US
 16071  00A5  3086               	movlw	134
 16072  00A6  00FB               	movwf	i1UART_send_break_timed@US+1
 16073  00A7  319A  224F  3180   	fcall	i1_UART_send_break_timed
 16074                           
 16075                           ;interrupts.c: 143: }
 16076                           ;interrupts.c: 144: }
 16077  00AA  28B7               	goto	i1l5412
 16078  00AB                     i1l5410:	
 16079                           
 16080                           ;interrupts.c: 145: else
 16081                           ;interrupts.c: 146: {
 16082                           ;interrupts.c: 147: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 16083  00AB  01F8               	clrf	i1UARTchar@NinethBit_override
 16084  00AC  0AF8               	incf	i1UARTchar@NinethBit_override,f
 16085  00AD  3000               	movlw	0
 16086  00AE  0023               	movlb	3	; select bank3
 16087  00AF  181D               	btfsc	29,0	;volatile
 16088  00B0  3001               	movlw	1
 16089  00B1  00F9               	movwf	i1UARTchar@NinethBit_override_data
 16090  00B2  0020               	movlb	0	; select bank0
 16091  00B3  0824               	movf	isr@rx,w
 16092  00B4  319C  24F0  3180   	fcall	i1_UARTchar
 16093  00B7                     i1l5412:	
 16094                           
 16095                           ;interrupts.c: 148: }
 16096                           ;interrupts.c: 149: PIR1bits.RCIF = 0;
 16097  00B7  0020               	movlb	0	; select bank0
 16098  00B8  1291               	bcf	17,5	;volatile
 16099                           
 16100                           ;interrupts.c: 150: }
 16101  00B9  28DC               	goto	i1l89
 16102  00BA                     i1l78:	
 16103                           
 16104                           ;interrupts.c: 151: else if(PIR1bits.TMR2IF)
 16105  00BA  1C91               	btfss	17,1	;volatile
 16106  00BB  28DB               	goto	i1l84
 16107                           
 16108                           ;interrupts.c: 152: {
 16109                           ;interrupts.c: 154: PIE1bits.TMR2IE = 0;
 16110  00BC  0021               	movlb	1	; select bank1
 16111  00BD  1091               	bcf	17,1	;volatile
 16112                           
 16113                           ;interrupts.c: 155: blinkdelay++;LATC ^= 0b00000010;
 16114  00BE  3001               	movlw	1
 16115  00BF  0020               	movlb	0	; select bank0
 16116  00C0  00A1               	movwf	??_isr
 16117  00C1  0821               	movf	??_isr,w
 16118  00C2  0021               	movlb	1	; select bank1
 16119  00C3  07EB               	addwf	_blinkdelay^(0+128),f
 16120  00C4  3002               	movlw	2
 16121  00C5  0020               	movlb	0	; select bank0
 16122  00C6  00A1               	movwf	??_isr
 16123  00C7  0821               	movf	??_isr,w
 16124  00C8  0022               	movlb	2	; select bank2
 16125  00C9  068E               	xorwf	14,f	;volatile
 16126                           
 16127                           ;interrupts.c: 156: if(blinkdelay > 4)
 16128  00CA  3005               	movlw	5
 16129  00CB  0021               	movlb	1	; select bank1
 16130  00CC  026B               	subwf	_blinkdelay^(0+128),w
 16131  00CD  1C03               	skipc
 16132  00CE  28D8               	goto	i1l5426
 16133                           
 16134                           ;interrupts.c: 157: {
 16135                           ;interrupts.c: 158: if(Alarm)
 16136  00CF  0868               	movf	_Alarm^(0+128),w
 16137  00D0  1903               	btfsc	3,2
 16138  00D1  28D4               	goto	i1l86
 16139                           
 16140                           ;interrupts.c: 159: {
 16141                           ;interrupts.c: 160: __nop();
 16142  00D2  0000               	nop
 16143                           
 16144                           ;interrupts.c: 161: }
 16145  00D3  28D6               	goto	i1l5424
 16146  00D4                     i1l86:	
 16147                           
 16148                           ;interrupts.c: 162: else
 16149                           ;interrupts.c: 163: {
 16150                           ;interrupts.c: 164: LATC |= 0b00000010;
 16151  00D4  0022               	movlb	2	; select bank2
 16152  00D5  148E               	bsf	14,1	;volatile
 16153  00D6                     i1l5424:	
 16154                           
 16155                           ;interrupts.c: 165: }
 16156                           ;interrupts.c: 166: blinkdelay =0;
 16157  00D6  0021               	movlb	1	; select bank1
 16158  00D7  01EB               	clrf	_blinkdelay^(0+128)
 16159  00D8                     i1l5426:	
 16160                           
 16161                           ;interrupts.c: 167: }
 16162                           ;interrupts.c: 168: PIR1bits.TMR2IF =0;
 16163  00D8  0020               	movlb	0	; select bank0
 16164  00D9  1091               	bcf	17,1	;volatile
 16165                           
 16166                           ;interrupts.c: 170: }
 16167  00DA  28DC               	goto	i1l89
 16168  00DB                     i1l84:	
 16169                           
 16170                           ;interrupts.c: 171: else
 16171                           ;interrupts.c: 172: {
 16172                           ;interrupts.c: 174: __nop();
 16173  00DB  0000               	nop
 16174  00DC                     i1l89:	
 16175  00DC  0020               	movlb	0	; select bank0
 16176  00DD  0822               	movf	??_isr+1,w
 16177  00DE  00FF               	movwf	127
 16178  00DF  107E               	bcf	126,0	;clear compiler interrupt flag
 16179  00E0  0009               	retfie
 16180  00E1                     __end_of_isr:	
 16181                           
 16182                           	psect	text52
 16183  1CF0                     __ptext52:	
 16184 ;; *************** function i1_UARTchar *****************
 16185 ;; Defined at:
 16186 ;;		line 227 in file "UART.c"
 16187 ;; Parameters:    Size  Location     Type
 16188 ;;  data            1    wreg     unsigned char 
 16189 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 16190 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;  data            1    0[BANK0 ] unsigned char 
 16193 ;; Return value:  Size  Location     Type
 16194 ;;		None               void
 16195 ;; Registers used:
 16196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16197 ;; Tracked objects:
 16198 ;;		On entry : 0/0
 16199 ;;		On exit  : 0/0
 16200 ;;		Unchanged: 0/0
 16201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;Total ram usage:        7 bytes
 16207 ;; Hardware stack levels used:    1
 16208 ;; Hardware stack levels required when called:    1
 16209 ;; This function calls:
 16210 ;;		i1_CheckSum_byte
 16211 ;; This function is called by:
 16212 ;;		_isr
 16213 ;; This function uses a non-reentrant model
 16214 ;;
 16215                           
 16216                           
 16217                           ;psect for function i1_UARTchar
 16218  1CF0                     i1_UARTchar:	
 16219                           
 16220                           ;incstack = 0
 16221                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16222                           ;i1UARTchar@data stored from wreg
 16223  1CF0  0020               	movlb	0	; select bank0
 16224  1CF1  00A0               	movwf	i1UARTchar@data
 16225                           
 16226                           ;UART.c: 229: if(TXSTAbits.TX9)
 16227  1CF2  0023               	movlb	3	; select bank3
 16228  1CF3  1F1E               	btfss	30,6	;volatile
 16229  1CF4  2D35               	goto	i1l5288
 16230                           
 16231                           ;UART.c: 230: {
 16232                           ;UART.c: 232: if(!NinethBit_override)
 16233  1CF5  08F8               	movf	i1UARTchar@NinethBit_override,f
 16234  1CF6  1903               	btfsc	3,2
 16235  1CF7  2D1F               	goto	i1l5284
 16236  1CF8  2D2C               	goto	i1l5286
 16237  1CF9                     i1l5278:	
 16238                           ;UART.c: 236: {
 16239                           ;UART.c: 237: case 1:
 16240                           
 16241                           ;UART.c: 233: {
 16242                           ;UART.c: 235: switch (PARITY)
 16243                           
 16244                           
 16245                           ;UART.c: 238: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16246  1CF9  0020               	movlb	0	; select bank0
 16247  1CFA  0820               	movf	i1UARTchar@data,w
 16248  1CFB  00FA               	movwf	??i1_UARTchar
 16249  1CFC  01FB               	clrf	??i1_UARTchar+1
 16250  1CFD  087A               	movf	??i1_UARTchar,w
 16251  1CFE  00F0               	movwf	i1CheckSum_byte@This
 16252  1CFF  087B               	movf	??i1_UARTchar+1,w
 16253  1D00  00F1               	movwf	i1CheckSum_byte@This+1
 16254  1D01  3003               	movlw	3
 16255  1D02  2D0C               	goto	L24
 16256  1D03                     i1l5280:	
 16257                           ;UART.c: 240: case 2:
 16258                           
 16259                           ;UART.c: 239: break;
 16260                           
 16261                           
 16262                           ;UART.c: 241: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16263  1D03  0020               	movlb	0	; select bank0
 16264  1D04  0820               	movf	i1UARTchar@data,w
 16265  1D05  00FA               	movwf	??i1_UARTchar
 16266  1D06  01FB               	clrf	??i1_UARTchar+1
 16267  1D07  087A               	movf	??i1_UARTchar,w
 16268  1D08  00F0               	movwf	i1CheckSum_byte@This
 16269  1D09  087B               	movf	??i1_UARTchar+1,w
 16270  1D0A  00F1               	movwf	i1CheckSum_byte@This+1
 16271  1D0B  3002               	movlw	2
 16272  1D0C                     L24:	
 16273  1D0C  00FC               	movwf	??i1_UARTchar+2
 16274  1D0D  087C               	movf	??i1_UARTchar+2,w
 16275  1D0E  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16276  1D0F  319A  229B  319C   	fcall	i1_CheckSum_byte
 16277  1D12  00FD               	movwf	??i1_UARTchar+3
 16278  1D13  0023               	movlb	3	; select bank3
 16279  1D14  081E               	movf	30,w	;volatile
 16280  1D15  067D               	xorwf	??i1_UARTchar+3,w
 16281  1D16  39FE               	andlw	-2
 16282  1D17  067D               	xorwf	??i1_UARTchar+3,w
 16283  1D18  2D34               	goto	L23
 16284  1D19                     i1l392:	
 16285                           ;UART.c: 243: case 3:
 16286                           
 16287                           ;UART.c: 242: break;
 16288                           
 16289                           
 16290                           ;UART.c: 244: TXSTAbits.TX9D = 1;
 16291  1D19  0023               	movlb	3	; select bank3
 16292  1D1A  141E               	bsf	30,0	;volatile
 16293                           
 16294                           ;UART.c: 245: break;
 16295  1D1B  2D35               	goto	i1l5288
 16296  1D1C                     i1l393:	
 16297                           ;UART.c: 246: default:
 16298                           
 16299                           
 16300                           ;UART.c: 247: TXSTAbits.TX9D = 0;
 16301  1D1C  0023               	movlb	3	; select bank3
 16302  1D1D  101E               	bcf	30,0	;volatile
 16303                           
 16304                           ;UART.c: 249: }
 16305                           
 16306                           ;UART.c: 248: break;
 16307  1D1E  2D35               	goto	i1l5288
 16308  1D1F                     i1l5284:	
 16309  1D1F  0021               	movlb	1	; select bank1
 16310  1D20  086A               	movf	_PARITY^(0+128),w
 16311                           
 16312                           ; Switch size 1, requested type "space"
 16313                           ; Number of cases is 3, Range of values is 1 to 3
 16314                           ; switch strategies available:
 16315                           ; Name         Instructions Cycles
 16316                           ; simple_byte           10     6 (average)
 16317                           ; direct_byte           15     9 (fixed)
 16318                           ; jumptable            263     9 (fixed)
 16319                           ;	Chosen strategy is simple_byte
 16320  1D21  3A01               	xorlw	1	; case 1
 16321  1D22  1903               	skipnz
 16322  1D23  2CF9               	goto	i1l5278
 16323  1D24  3A03               	xorlw	3	; case 2
 16324  1D25  1903               	skipnz
 16325  1D26  2D03               	goto	i1l5280
 16326  1D27  3A01               	xorlw	1	; case 3
 16327  1D28  1903               	skipnz
 16328  1D29  2D19               	goto	i1l392
 16329  1D2A  2D1C               	goto	i1l393
 16330                           
 16331                           ;UART.c: 250: }
 16332  1D2B  2D35               	goto	i1l5288
 16333  1D2C                     i1l5286:	
 16334                           
 16335                           ;UART.c: 251: else
 16336                           ;UART.c: 252: {
 16337                           ;UART.c: 253: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16338  1D2C  3001               	movlw	1
 16339  1D2D  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16340  1D2E  00FA               	movwf	??i1_UARTchar
 16341  1D2F  0023               	movlb	3	; select bank3
 16342  1D30  081E               	movf	30,w	;volatile
 16343  1D31  067A               	xorwf	??i1_UARTchar,w
 16344  1D32  39FE               	andlw	-2
 16345  1D33  067A               	xorwf	??i1_UARTchar,w
 16346  1D34                     L23:	
 16347  1D34  009E               	movwf	30	;volatile
 16348  1D35                     i1l5288:	
 16349                           
 16350                           ;UART.c: 254: }
 16351                           ;UART.c: 255: }
 16352                           ;UART.c: 256: TXREG = data;
 16353  1D35  0020               	movlb	0	; select bank0
 16354  1D36  0820               	movf	i1UARTchar@data,w
 16355  1D37  0023               	movlb	3	; select bank3
 16356  1D38  009A               	movwf	26	;volatile
 16357  1D39  0008               	return
 16358  1D3A                     __end_ofi1_UARTchar:	
 16359                           
 16360                           	psect	text53
 16361  1A9B                     __ptext53:	
 16362 ;; *************** function i1_CheckSum_byte *****************
 16363 ;; Defined at:
 16364 ;;		line 68 in file "MISC.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;  This            2    0[COMMON] unsigned int 
 16367 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16368 ;; Auto vars:     Size  Location     Type
 16369 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16370 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16371 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      unsigned char 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;Total ram usage:        8 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; This function calls:
 16388 ;;		Nothing
 16389 ;; This function is called by:
 16390 ;;		i1_UARTchar
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394                           
 16395                           ;psect for function i1_CheckSum_byte
 16396  1A9B                     i1_CheckSum_byte:	
 16397                           
 16398                           ;MISC.c: 70: char i = 0;
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16402  1A9B  01F7               	clrf	i1CheckSum_byte@i
 16403                           
 16404                           ;MISC.c: 71: unsigned char Parity = 0;
 16405  1A9C  01F6               	clrf	i1CheckSum_byte@Parity
 16406                           
 16407                           ;MISC.c: 72: unsigned int ThisTemp = This;
 16408  1A9D  0871               	movf	i1CheckSum_byte@This+1,w
 16409  1A9E  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16410  1A9F  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16411  1AA0  0870               	movf	i1CheckSum_byte@This,w
 16412  1AA1  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16413  1AA2  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16414                           
 16415                           ;MISC.c: 74: for (i =0; i<8; i++)
 16416  1AA3  01F7               	clrf	i1CheckSum_byte@i
 16417  1AA4  3008               	movlw	8
 16418  1AA5  0277               	subwf	i1CheckSum_byte@i,w
 16419  1AA6  1803               	btfsc	3,0
 16420  1AA7  2ABB               	goto	i1l4990
 16421  1AA8                     i1l279:	
 16422                           
 16423                           ;MISC.c: 75: {
 16424                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 16425  1AA8  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16426  1AA9  2AAE               	goto	i1l281
 16427                           
 16428                           ;MISC.c: 77: {
 16429                           ;MISC.c: 78: Parity++;
 16430  1AAA  3001               	movlw	1
 16431  1AAB  00F3               	movwf	??i1_CheckSum_byte
 16432  1AAC  0873               	movf	??i1_CheckSum_byte,w
 16433  1AAD  07F6               	addwf	i1CheckSum_byte@Parity,f
 16434  1AAE                     i1l281:	
 16435                           
 16436                           ;MISC.c: 79: }
 16437                           ;MISC.c: 80: ThisTemp >>= 1;
 16438  1AAE  3001               	movlw	1
 16439  1AAF                     u632_25:	
 16440  1AAF  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16441  1AB0  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16442  1AB1  0B89               	decfsz	9,f
 16443  1AB2  2AAF               	goto	u632_25
 16444  1AB3  3001               	movlw	1
 16445  1AB4  00F3               	movwf	??i1_CheckSum_byte
 16446  1AB5  0873               	movf	??i1_CheckSum_byte,w
 16447  1AB6  07F7               	addwf	i1CheckSum_byte@i,f
 16448  1AB7  3008               	movlw	8
 16449  1AB8  0277               	subwf	i1CheckSum_byte@i,w
 16450  1AB9  1C03               	skipc
 16451  1ABA  2AA8               	goto	i1l279
 16452  1ABB                     i1l4990:	
 16453                           
 16454                           ;MISC.c: 81: }
 16455                           ;MISC.c: 82: if(Odd_Even == 3)
 16456  1ABB  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16457  1ABC  3A03               	xorlw	3
 16458  1ABD  1D03               	skipz
 16459  1ABE  2AC5               	goto	i1l282
 16460                           
 16461                           ;MISC.c: 83: {
 16462                           ;MISC.c: 84: if(Parity % 2 == 0)
 16463  1ABF  1876               	btfsc	i1CheckSum_byte@Parity,0
 16464  1AC0  2AC3               	goto	i1l4998
 16465                           
 16466                           ;MISC.c: 85: {
 16467                           ;MISC.c: 86: return 1;
 16468  1AC1  3001               	movlw	1
 16469  1AC2  0008               	return
 16470  1AC3                     i1l4998:	
 16471                           
 16472                           ;MISC.c: 87: }
 16473                           ;MISC.c: 88: return 0;
 16474  1AC3  3000               	movlw	0
 16475                           
 16476                           ;MISC.c: 89: }
 16477  1AC4  0008               	return
 16478  1AC5                     i1l282:	
 16479                           
 16480                           ;MISC.c: 90: else
 16481                           ;MISC.c: 91: {
 16482                           ;MISC.c: 92: if(Parity % 2 == 1)
 16483  1AC5  1C76               	btfss	i1CheckSum_byte@Parity,0
 16484  1AC6  2AC9               	goto	i1l5008
 16485                           
 16486                           ;MISC.c: 93: {
 16487                           ;MISC.c: 94: return 1;
 16488  1AC7  3001               	movlw	1
 16489  1AC8  0008               	return
 16490  1AC9                     i1l5008:	
 16491                           
 16492                           ;MISC.c: 95: }
 16493                           ;MISC.c: 96: return 0;
 16494  1AC9  3000               	movlw	0
 16495  1ACA  0008               	return
 16496  1ACB                     __end_ofi1_CheckSum_byte:	
 16497                           
 16498                           	psect	text54
 16499  1A4F                     __ptext54:	
 16500 ;; *************** function i1_UART_send_break_timed *****************
 16501 ;; Defined at:
 16502 ;;		line 313 in file "UART.c"
 16503 ;; Parameters:    Size  Location     Type
 16504 ;;  US              2   10[COMMON] unsigned int 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;		None
 16507 ;; Return value:  Size  Location     Type
 16508 ;;		None               void
 16509 ;; Registers used:
 16510 ;;		wreg, status,2, status,0, pclath, cstack
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;Total ram usage:        3 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; Hardware stack levels required when called:    1
 16523 ;; This function calls:
 16524 ;;		i1_delayUS
 16525 ;; This function is called by:
 16526 ;;		_isr
 16527 ;; This function uses a non-reentrant model
 16528 ;;
 16529                           
 16530                           
 16531                           ;psect for function i1_UART_send_break_timed
 16532  1A4F                     i1_UART_send_break_timed:	
 16533                           
 16534                           ;UART.c: 316: LATC |= 0b00000100;
 16535                           
 16536                           ;incstack = 0
 16537                           ; Regs used in i1_UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 16538  1A4F  0022               	movlb	2	; select bank2
 16539  1A50  150E               	bsf	14,2	;volatile
 16540                           
 16541                           ;UART.c: 317: PPSLOCK =0;
 16542  1A51  003C               	movlb	28	; select bank28
 16543  1A52  018F               	clrf	15	;volatile
 16544                           
 16545                           ;UART.c: 318: RC2PPS = 0b00000000;
 16546  1A53  003D               	movlb	29	; select bank29
 16547  1A54  01A2               	clrf	34	;volatile
 16548                           
 16549                           ;UART.c: 319: PPSLOCK =1;
 16550  1A55  3001               	movlw	1
 16551  1A56  003C               	movlb	28	; select bank28
 16552  1A57  008F               	movwf	15	;volatile
 16553                           
 16554                           ;UART.c: 321: LATC &= ~0b00000100;
 16555  1A58  30FB               	movlw	251
 16556  1A59  00FC               	movwf	??i1_UART_send_break_timed
 16557  1A5A  087C               	movf	??i1_UART_send_break_timed,w
 16558  1A5B  0022               	movlb	2	; select bank2
 16559  1A5C  058E               	andwf	14,f	;volatile
 16560                           
 16561                           ;UART.c: 322: delayUS(US);
 16562  1A5D  087A               	movf	i1UART_send_break_timed@US,w
 16563  1A5E  00F0               	movwf	i1delayUS@US
 16564  1A5F  087B               	movf	i1UART_send_break_timed@US+1,w
 16565  1A60  00F1               	movwf	i1delayUS@US+1
 16566  1A61  01F2               	clrf	i1delayUS@US+2
 16567  1A62  01F3               	clrf	i1delayUS@US+3
 16568  1A63  319B  238F         	fcall	i1_delayUS
 16569                           
 16570                           ;UART.c: 323: LATC |= 0b00000100;
 16571  1A65  0022               	movlb	2	; select bank2
 16572  1A66  150E               	bsf	14,2	;volatile
 16573                           
 16574                           ;UART.c: 325: PPSLOCK =0;
 16575  1A67  003C               	movlb	28	; select bank28
 16576  1A68  018F               	clrf	15	;volatile
 16577                           
 16578                           ;UART.c: 326: RC2PPS = 0b00010100;
 16579  1A69  3014               	movlw	20
 16580  1A6A  003D               	movlb	29	; select bank29
 16581  1A6B  00A2               	movwf	34	;volatile
 16582                           
 16583                           ;UART.c: 327: CKPPS = 0b00010010;
 16584  1A6C  3012               	movlw	18
 16585  1A6D  003C               	movlb	28	; select bank28
 16586  1A6E  00A5               	movwf	37	;volatile
 16587                           
 16588                           ;UART.c: 328: RXPPS = 0b00010101;
 16589  1A6F  3015               	movlw	21
 16590  1A70  00A4               	movwf	36	;volatile
 16591                           
 16592                           ;UART.c: 329: PPSLOCK =1;
 16593  1A71  3001               	movlw	1
 16594  1A72  008F               	movwf	15	;volatile
 16595  1A73  0008               	return
 16596  1A74                     __end_ofi1_UART_send_break_timed:	
 16597                           
 16598                           	psect	text55
 16599  1B8F                     __ptext55:	
 16600 ;; *************** function i1_delayUS *****************
 16601 ;; Defined at:
 16602 ;;		line 48 in file "MISC.c"
 16603 ;; Parameters:    Size  Location     Type
 16604 ;;  US              4    0[COMMON] long 
 16605 ;; Auto vars:     Size  Location     Type
 16606 ;;  delayUS         4    5[COMMON] long 
 16607 ;;  delayUS         1    9[COMMON] unsigned char 
 16608 ;; Return value:  Size  Location     Type
 16609 ;;		None               void
 16610 ;; Registers used:
 16611 ;;		wreg, status,2, status,0
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;Total ram usage:       10 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; This function calls:
 16624 ;;		Nothing
 16625 ;; This function is called by:
 16626 ;;		i1_UART_send_break_timed
 16627 ;; This function uses a non-reentrant model
 16628 ;;
 16629                           
 16630                           
 16631                           ;psect for function i1_delayUS
 16632  1B8F                     i1_delayUS:	
 16633                           
 16634                           ;MISC.c: 50: long i;
 16635                           ;MISC.c: 51: unsigned char j;
 16636                           ;MISC.c: 52: for(i=0;i<US;i+=6)
 16637                           
 16638                           ;incstack = 0
 16639                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 16640  1B8F  3000               	movlw	0
 16641  1B90  00F8               	movwf	i1delayUS@i+3
 16642  1B91  3000               	movlw	0
 16643  1B92  00F7               	movwf	i1delayUS@i+2
 16644  1B93  3000               	movlw	0
 16645  1B94  00F6               	movwf	i1delayUS@i+1
 16646  1B95  3000               	movlw	0
 16647  1B96  00F5               	movwf	i1delayUS@i
 16648  1B97                     i1l271:	
 16649  1B97  0878               	movf	i1delayUS@i+3,w
 16650  1B98  3A80               	xorlw	128
 16651  1B99  00F4               	movwf	??i1_delayUS
 16652  1B9A  0873               	movf	i1delayUS@US+3,w
 16653  1B9B  3A80               	xorlw	128
 16654  1B9C  0274               	subwf	??i1_delayUS,w
 16655  1B9D  1D03               	skipz
 16656  1B9E  2BA9               	goto	u629_23
 16657  1B9F  0872               	movf	i1delayUS@US+2,w
 16658  1BA0  0277               	subwf	i1delayUS@i+2,w
 16659  1BA1  1D03               	skipz
 16660  1BA2  2BA9               	goto	u629_23
 16661  1BA3  0871               	movf	i1delayUS@US+1,w
 16662  1BA4  0276               	subwf	i1delayUS@i+1,w
 16663  1BA5  1D03               	skipz
 16664  1BA6  2BA9               	goto	u629_23
 16665  1BA7  0870               	movf	i1delayUS@US,w
 16666  1BA8  0275               	subwf	i1delayUS@i,w
 16667  1BA9                     u629_23:	
 16668  1BA9  1803               	btfsc	3,0
 16669  1BAA  0008               	return
 16670                           
 16671                           ;MISC.c: 53: {
 16672                           ;MISC.c: 54: for(j=0;j<32;j++)
 16673  1BAB  01F9               	clrf	i1delayUS@j
 16674  1BAC  3020               	movlw	32
 16675  1BAD  0279               	subwf	i1delayUS@j,w
 16676  1BAE  1803               	btfsc	3,0
 16677  1BAF  2BB9               	goto	i1l4974
 16678  1BB0                     i1l273:	
 16679                           
 16680                           ;MISC.c: 55: {
 16681                           ;MISC.c: 56: __nop();
 16682  1BB0  0000               	nop
 16683  1BB1  3001               	movlw	1
 16684  1BB2  00F4               	movwf	??i1_delayUS
 16685  1BB3  0874               	movf	??i1_delayUS,w
 16686  1BB4  07F9               	addwf	i1delayUS@j,f
 16687  1BB5  3020               	movlw	32
 16688  1BB6  0279               	subwf	i1delayUS@j,w
 16689  1BB7  1C03               	skipc
 16690  1BB8  2BB0               	goto	i1l273
 16691  1BB9                     i1l4974:	
 16692  1BB9  3006               	movlw	6
 16693  1BBA  07F5               	addwf	i1delayUS@i,f
 16694  1BBB  3000               	movlw	0
 16695  1BBC  3DF6               	addwfc	i1delayUS@i+1,f
 16696  1BBD  3000               	movlw	0
 16697  1BBE  3DF7               	addwfc	i1delayUS@i+2,f
 16698  1BBF  3000               	movlw	0
 16699  1BC0  3DF8               	addwfc	i1delayUS@i+3,f
 16700  1BC1  2B97               	goto	i1l271
 16701  1BC2                     __end_ofi1_delayUS:	
 16702                           
 16703                           	psect	text56
 16704  18E7                     __ptext56:	
 16705 ;; *************** function i1_ReadUSART *****************
 16706 ;; Defined at:
 16707 ;;		line 281 in file "UART.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;		None
 16710 ;; Auto vars:     Size  Location     Type
 16711 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16712 ;; Return value:  Size  Location     Type
 16713 ;;                  1    wreg      unsigned char 
 16714 ;; Registers used:
 16715 ;;		wreg
 16716 ;; Tracked objects:
 16717 ;;		On entry : 0/0
 16718 ;;		On exit  : 0/0
 16719 ;;		Unchanged: 0/0
 16720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;Total ram usage:        2 bytes
 16726 ;; Hardware stack levels used:    1
 16727 ;; This function calls:
 16728 ;;		Nothing
 16729 ;; This function is called by:
 16730 ;;		_isr
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           
 16735                           ;psect for function i1_ReadUSART
 16736  18E7                     i1_ReadUSART:	
 16737                           
 16738                           ;UART.c: 283: char data;
 16739                           ;UART.c: 285: if(RCSTAbits.OERR)
 16740                           
 16741                           ;incstack = 0
 16742                           ; Regs used in i1_ReadUSART: [wreg]
 16743  18E7  0023               	movlb	3	; select bank3
 16744  18E8  189D               	btfsc	29,1	;volatile
 16745                           
 16746                           ;UART.c: 286: {
 16747                           ;UART.c: 287: RCSTAbits.CREN = 0;
 16748  18E9  121D               	bcf	29,4	;volatile
 16749                           
 16750                           ;UART.c: 288: }
 16751                           ;UART.c: 290: data = RCREG;
 16752  18EA  0819               	movf	25,w	;volatile
 16753  18EB  00F0               	movwf	??i1_ReadUSART
 16754  18EC  0870               	movf	??i1_ReadUSART,w
 16755  18ED  00F1               	movwf	i1ReadUSART@data
 16756                           
 16757                           ;UART.c: 292: return (data);
 16758  18EE  0871               	movf	i1ReadUSART@data,w
 16759  18EF  0008               	return
 16760  18F0                     __end_ofi1_ReadUSART:	
 16761                           
 16762                           	psect	text57
 16763  1994                     __ptext57:	
 16764 ;; *************** function i1_READ_PS_2_PIN *****************
 16765 ;; Defined at:
 16766 ;;		line 223 in file "PS_2.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;  DATA_CLK        1    wreg     unsigned char 
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  1    wreg      unsigned char 
 16773 ;; Registers used:
 16774 ;;		wreg
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;Total ram usage:        1 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; This function calls:
 16787 ;;		Nothing
 16788 ;; This function is called by:
 16789 ;;		_isr
 16790 ;; This function uses a non-reentrant model
 16791 ;;
 16792                           
 16793                           
 16794                           ;psect for function i1_READ_PS_2_PIN
 16795  1994                     i1_READ_PS_2_PIN:	
 16796                           
 16797                           ;incstack = 0
 16798                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16799                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16800  1994  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16801                           
 16802                           ;PS_2.c: 225: if(DATA_CLK == 0b00100000)
 16803  1995  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16804  1996  3A20               	xorlw	32
 16805  1997  1D03               	skipz
 16806  1998  29A0               	goto	i1l594
 16807                           
 16808                           ;PS_2.c: 226: {
 16809                           ;PS_2.c: 228: if((PORTA & 0b00100000) == 0b00100000)
 16810  1999  0020               	movlb	0	; select bank0
 16811  199A  1E8C               	btfss	12,5	;volatile
 16812  199B  299E               	goto	i1l5330
 16813                           
 16814                           ;PS_2.c: 229: {
 16815                           ;PS_2.c: 230: return (1);
 16816  199C  3001               	movlw	1
 16817                           
 16818                           ;PS_2.c: 231: }
 16819  199D  0008               	return
 16820  199E                     i1l5330:	
 16821                           
 16822                           ;PS_2.c: 232: else
 16823                           ;PS_2.c: 233: {
 16824                           ;PS_2.c: 234: return 0;
 16825  199E  3000               	movlw	0
 16826                           
 16827                           ;PS_2.c: 235: }
 16828                           ;PS_2.c: 236: }
 16829  199F  0008               	return
 16830  19A0                     i1l594:	
 16831                           
 16832                           ;PS_2.c: 237: else
 16833                           ;PS_2.c: 238: {
 16834                           ;PS_2.c: 240: if((PORTA & 0b00010000) == 0b00010000)
 16835  19A0  0020               	movlb	0	; select bank0
 16836  19A1  1E0C               	btfss	12,4	;volatile
 16837  19A2  29A5               	goto	i1l5340
 16838                           
 16839                           ;PS_2.c: 241: {
 16840                           ;PS_2.c: 242: return (1);
 16841  19A3  3001               	movlw	1
 16842                           
 16843                           ;PS_2.c: 243: }
 16844  19A4  0008               	return
 16845  19A5                     i1l5340:	
 16846                           
 16847                           ;PS_2.c: 244: else
 16848                           ;PS_2.c: 245: {
 16849                           ;PS_2.c: 246: return 0;
 16850  19A5  3000               	movlw	0
 16851  19A6  0008               	return
 16852  19A7                     __end_ofi1_READ_PS_2_PIN:	
 16853  007E                     btemp	set	126	;btemp
 16854  007E                     pic14e$flags	set	126
 16855  007E                     wtemp	set	126
 16856  007E                     wtemp0	set	126
 16857  0080                     wtemp1	set	128
 16858  0082                     wtemp2	set	130
 16859  0084                     wtemp3	set	132
 16860  0086                     wtemp4	set	134
 16861  0088                     wtemp5	set	136
 16862  007F                     wtemp6	set	127
 16863  007E                     ttemp	set	126
 16864  007E                     ttemp0	set	126
 16865  0081                     ttemp1	set	129
 16866  0084                     ttemp2	set	132
 16867  0087                     ttemp3	set	135
 16868  007F                     ttemp4	set	127
 16869  007E                     ltemp	set	126
 16870  007E                     ltemp0	set	126
 16871  0082                     ltemp1	set	130
 16872  0086                     ltemp2	set	134
 16873  0080                     ltemp3	set	128


Data Sizes:
    Strings     454
    Constant    507
    Data        14
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      24
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_31(CODE[33]), STR_21(CODE[21]), STR_13(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1045$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_37(CODE[29]), STR_36(CODE[22]), STR_35(CODE[18]), STR_34(CODE[17]), 
		 -> STR_33(CODE[24]), STR_32(CODE[23]), PS_2_Update@buf(BANK5[60]), STR_30(CODE[3]), 
		 -> STR_29(CODE[44]), STR_28(CODE[18]), STR_27(CODE[3]), STR_26(CODE[22]), 
		 -> STR_25(CODE[18]), STR_24(CODE[17]), STR_23(CODE[24]), STR_22(CODE[23]), 
		 -> SetBaud@buf(BANK2[50]), STR_20(CODE[24]), STR_19(CODE[3]), STR_18(CODE[22]), 
		 -> STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[24]), STR_14(CODE[23]), 
		 -> Init_System@buf(BANK1[60]), STR_12(CODE[3]), STR_11(CODE[20]), STR_10(CODE[19]), 
		 -> STR_9(CODE[17]), STR_8(CODE[22]), STR_7(CODE[21]), STR_6(CODE[24]), 
		 -> STR_5(CODE[35]), STR_4(CODE[3]), Version(BANK4[4]), STR_3(CODE[19]), 
		 -> STR_2(CODE[26]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_UART_send_break_timed->i1_delayUS

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _UART_send_break_timed->_delayUS
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  161059
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     904
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11530
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3016
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   59523
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   51474
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
              _UART_send_break_timed
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break_timed                                3     1      2    3135
                                             15 BANK0      3     1      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   22974
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5131
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4742
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17349
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    1929
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    9099
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3095
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    7978
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    4931
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2985
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     708
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
            i1_UART_send_break_timed
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     427
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break_timed                              3     1      2     166
                                             10 COMMON     3     1      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (10) i1_delayUS                                          10     6      4     118
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break_timed
         _delayUS
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break_timed
       _delayUS
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break_timed
     i1_delayUS
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      18      13       30.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     165      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     165      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jan 26 10:29:01 2015

              _PS_2_DISABLE_INTERRUPT 1A0D                     ??_ReadFlash_2Byte 0028  
                   ??_ReadFlash_4Byte 002E                                     _i 016C  
                        ___fldiv@cntr 0045                          ___fldiv@sign 0047  
                         __CFG_CP$OFF 0000                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l160 0E3E                                   l166 0F27  
                                 l271 1BFE                                   l281 1B0F  
                                 l273 1C17                                   l417 1BC2  
                                 l177 0FE6                                   l282 1B26  
                                 l419 1BE1                                   l381 1C5C  
                                 l429 1783                                   l279 1B09  
                                 l375 1C45                                   l392 1D66  
                                 l393 1D69                                   l379 1C53  
                                 l901 1916                                   l574 190D  
                                 l734 0554                                   l807 0CF8  
                                 l808 0D4E                                   l664 03D1  
                                 l569 1902                                   l594 198E  
                                 l746 07C5                                   l754 06B8  
                                 l579 195C                                   l961 1CBF  
                                 l892 1B80                                   l964 1CE4  
                                 _MEM 0230                                   _PR2 001B  
                                 _isr 0004                          __CFG_BORV$LO 0000  
                                 wreg 0009                          ___flmul@cntr 005A  
                        ___flmul@sign 005B            __end_of_ScanCodeFunctionE0 09D3  
             UART_send_break_timed@US 002F                         ___flpack@sign 002A  
                                l1002 14C7                                  l1005 14E5  
                                l1183 1051                                  l1177 1037  
                                l5014 1973                                  l5016 1979  
                                l6100 17CD                                  l6014 1A1F  
                                l6102 17D1                                  l6110 17E0  
                                l6104 17D6                                  l6112 17ED  
                                l6210 0D79                                  l6106 17DB  
                                l6114 17F4                                  l6220 0D7C  
                                l6124 19DE                                  l7100 1ED6  
                                l5260 1FED                                  l6222 0D99  
                                l7030 160F                                  l6310 196E  
                                l6208 0D5C                                  l6152 0CD5  
                                l6048 194D                                  l6320 1ADE  
                                l5256 1FC4                                  l6234 0DA0  
                                l6162 0CFD                                  l6154 0CF2  
                                l7202 1485                                  l7130 13B9  
                                l7050 1673                                  l7026 1606  
                                l6074 176A                                  l6410 0258  
                                l7114 1094                                  l6260 0DFD  
                                l6236 0DBD                                  l6164 0D03  
                                l7044 1664                                  l6092 17AC  
                                l6316 1AD4                                  l6420 02B2  
                                l6340 1024                                  l6332 100B  
                                l7300 0FD0                                  l5550 1C21  
                                l6270 0E00                                  l6246 0DC0  
                                l6190 0D45                                  l7142 13E3  
                                l5622 1D44                                  l5630 1D79  
                                l7046 1669                                  l7054 1678  
                                l6078 177D                                  l6422 02BA  
                                l7118 10A3                                  l7310 0FF7  
                                l6272 0E1D                                  l6248 0DDD  
                                l6176 0D08                                  l7208 149A  
                                l7160 1422                                  l7136 13CE  
                                l5624 1D4E                                  l5632 1D85  
                                l7048 166E                                  l7056 1685  
                                l5720 1333                                  l5712 1315  
                                l6504 0371                                  l6408 0252  
                                l6336 1014                                  l7312 0FFC  
                                l5810 198C                                  l6258 0DE0  
                                l6178 0D25                                  l7154 140D  
                                l7058 168D                                  l5706 12EF  
                                l6602 0459                                  l6514 0388  
                                l6530 03A7                                  l6434 02D5  
                                l7090 1ECC                                  l6346 103C  
                                l6338 101F                                  l7306 0FE8  
                                l5820 1992                                  l6196 0D53  
                                l6188 0D28                                  l7172 144C  
                                l7148 13F8                                  l5652 1C3F  
                                l5644 1C34                                  l5628 1D6C  
                                l6612 0478                                  l6604 0447  
                                l6540 03BE                                  l6516 0376  
                                l6364 012C                                  l6348 1045  
                                l5574 1B24                                  l5566 1B1C  
                                l6198 0D59                                  l7190 1467  
                                l7166 1437                                  l5670 1C5E  
                                l5662 1C4C                                  l5830 1BE4  
                                l6286 19CB                                  l5750 137F  
                                l5718 12C2                                  l6702 053B  
                                l6630 0499                                  l6622 0485  
                                l6614 0461                                  l6606 045F  
                                l6526 03A1                                  l6518 038E  
                                l6534 03AF                                  l6462 0318  
                                l6454 0305                                  l6470 032A  
                                l6366 012E                                  l7270 0EE0  
                                l7238 0E68                                  l5584 1B2A  
                                l7184 145E                                  l5656 1C47  
                                l5648 1C3A                                  l5752 13A4  
                                l6712 0555                                  l6616 0466  
                                l6544 03C8                                  l6528 038F  
                                l6384 0198                                  l7088 1EA0  
                                l7280 0F49                                  l7272 0F2A  
                                l7178 1455                                  l5666 1C55  
                                l5762 1DEC                                  l6298 19B8  
                                l6650 04AD                                  l6626 048E  
                                l6618 047B                                  l6562 03EA  
                                l6554 03DE                                  l6482 0342  
                                l6490 0350                                  l6466 0321  
                                l6386 019A                                  l7266 0F1D  
                                l7196 147C                                  l5772 1E1A  
                                l5764 1DFA                                  l5932 14CE  
                                l6820 06F2                                  l6812 06DB  
                                l6804 06C4                                  l6732 057C  
                                l6724 0570                                  l6660 04DB  
                                l6652 04C5                                  l6716 0563  
                                l6396 01F4                                  l7292 0F95  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 0015  
                                l5838 19ED                                  l5926 14C5  
                                l6662 04C6                                  l6590 043B  
                                l6582 042A                                  l6494 035B  
                                l6486 034A                                  l6478 033B  
                                l6566 040A                                  l6398 01F8  
                                l7294 0F99                                  l5776 1E25  
                                l5880 11FB                                  l5792 1C98  
                                l5928 14C9                                  l6824 06FB  
                                l6816 06E4                                  l6808 06CD  
                                l6752 05D4                                  l6648 04BF  
                                l6664 04E1                                  l7288 0F77  
                                l5786 1C72                                  l5938 14F4  
                                l6850 0776                                  l6762 0607  
                                l6674 04F7                                  l6658 04D8  
                                l6690 051A                                  l6586 0432  
                                l6578 0423                                  l5788 1C80  
                                l5796 1CA3                                  l5964 153D  
                                l5956 1538                                  l5948 150B  
                                l6852 077B                                  l6860 0795  
                                l6828 0709                                  l6772 060F  
                                l6684 0510                                  l6676 04E5  
                                l6932 0BFF                                  l5878 11F7  
                                l5966 14A4                                  l6846 076C  
                                l6862 07AF                                  l6790 0651  
                                l6686 0514                                  l6678 04FD  
                                l6950 0C64                                  l6926 0BE5  
                                l5968 158D                                  l6848 0771  
                                l6856 0780                                  l6688 04FE  
                                l6944 0C44                                  l6866 07C3  
                                l6858 078D                                  l6778 0620  
                                l6970 112D                                  _BAUD 022C  
                                l6868 07C6                                  l6964 1113  
                                l6798 06AF                                  l6982 1172  
                                l6994 1192                                  l6986 117C  
                                l6998 119C                                  _ECHO 00E9  
                                STR_1 0B52                                  STR_2 0A88  
                                STR_3 0B68                                  STR_4 0B52  
                                STR_5 0A27                                  STR_6 0AD2  
                                STR_7 0B2C                                  STR_8 0B01  
                                STR_9 0BB0                                  _LATA 010C  
                                _LATC 010E                                  _LALT 0167  
       __end_of_PS_2_ENABLE_INTERRUPT 19F5                                  _PIE1 0091  
                                i1l63 007C                                  u7153 1C10  
                                u7235 1B77                                  i1l84 00DB  
                                i1l76 0085                                  i1l86 00D4  
                                i1l78 00BA                                  u7255 1B4A  
                                _RALT 01AC                                  i1l89 00DC  
                                u7185 1B10                                  u7425 1DEF  
                                u8305 1059                                  u7515 1C8E  
                                u8235 1019                                  u7445 1DFB  
                                u7365 1DA8                                  u7525 1C99  
                                u8405 0236                                  u7455 1E0F  
                                u7615 1F60                                  u8255 1031  
                                u7465 1E1B                                  u7625 1F83  
                                u7705 1547                                  u8185 1ADF  
                                u8425 0296                                  u7395 1376  
                                u8195 1AE6                                  u8275 103F  
                                u7645 122D                                  u7805 1E63  
                                u7725 1EE0                                  u8365 017C  
                                u7495 1C75                                  u7815 1E6E  
                                u7735 1F15                                  u7825 1E79  
                                u8385 01D8                                  u7685 152E  
                                u7775 1E35                                  u7855 16F6  
                                u7785 1E41                                  u7865 174B  
                                u7795 1E4D                                  u7875 1768  
                                u9555 0731                                  u9635 0C0D  
                                u9715 113B                                  u9565 0741  
                                u9645 0C20                                  u9725 114E  
                                u9815 15DA                                  u9655 0C45  
                                u9825 15F4                                  u9665 0C59  
                                u9745 117D                                  u9905 108F  
                                u9835 1604                                  u9595 1CC5  
                                u9675 0C65                                  u9755 1184  
                                u9925 109F                                  u9785 119D  
                                u9875 1EB7                                  u9795 11A4  
                                _WPUA 020C                                  _WPUC 020E  
                          i1delayUS@i 0075                            i1delayUS@j 0079  
                        __CFG_WRT$OFF 0000                                  _main 0E2A  
                  UARTstringWAIT@data 0034                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                 baudUSART@baudconfig 0025                         __CFG_BOREN$ON 0000  
                                ltemp 007E                     SetBaud@Paritytemp 0156  
                                start 00E1                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0028             i1UART_send_break_timed@US 007A  
           WriteFlash_Sequential@temp 00E3                      Reverse_Byte@temp 0027  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1B2C  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                     __end_of_InitApp 1A4F                       __end_of_SetBaud 1800  
                          _Clock_TRIS 18FA                         ??_Init_System 0054  
              __size_of_READ_PS_2_PIN 0012                                 ??_isr 0021  
                 _Right_Shift_Key_old 016B                        _Init_PS_2_Send 13AC  
                   ??i1_READ_PS_2_PIN 0070       UARTchar@NinethBit_override_data 002E  
   i1UARTchar@NinethBit_override_data 0079                 ??_INIT_PS_2_INTERRUPT 0025  
           _Decode_Scan_Code_Function 195F                           ReadBaud@row 0037  
     WriteFlash_Sequential@amountTemp 00E2                         ??_ReadVoltage 0060  
                          _CloseUSART 1933                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                       __end_of___fldiv 0C8B  
                               STR_10 0B55                                 STR_11 0B41  
                               STR_12 0B52                                 STR_20 0AA2  
                               STR_21 0B17                                 STR_13 0B17  
                               STR_30 0B52                                 STR_22 0AEA  
                               STR_14 0AEA                                 STR_23 0ABA  
                               STR_15 0ABA                                 STR_31 0A4A  
                               STR_24 0B9F                                 STR_32 0AEA  
                               STR_16 0B9F                                 STR_25 0B8D  
                               STR_33 0ABA                                 STR_17 0B8D  
                       __CFG_WDTE$OFF 0000                                 STR_34 0B9F  
                               STR_26 0A11                                 STR_18 0A11  
                               STR_27 0B52                                 STR_19 0B52  
                               STR_35 0B8D                                 STR_36 0A11  
                               STR_28 0B7B                                 STR_37 0A6B  
                               STR_29 09FB                       __end_of___flmul 11CA  
                    __end_of_ISNUMBER 194F                       __end_of___lldiv 1E2E  
                               _CKPPS 0E25                       __end_of___llmod 1CAC  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l271 1B97                                 i1l273 1BB0  
                               i1l281 1AAE                                 i1l282 1AC5  
                               i1l279 1AA8                                 i1l392 1D19  
                               i1l393 1D1C                                 i1l594 19A0  
      __size_of_UART_send_break_timed 0027                                 _RCREG 0199  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 1A9B                  _PS_2_Read_Data_First 01A0  
                               _PORTA 000C                  _PS_2_Read_Data_Forth 01A2  
                        InitUART@Baud 0033                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 1970  
                               _Alarm 00E8                  _PS_2_Read_Data_Third 01A6  
                     __end_of_delayUS 1C2A                      _InternalADC_Read 1CAC  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0029  
    __size_ofi1_UART_send_break_timed 0025                        __CFG_FCMEN$OFF 0000  
          __end_of_Keyboard_Connected 1ED8                          InitUART@temp 0044  
               _WriteFlash_Sequential 12BA                 ReadFlash_2Byte@column 0027  
                    __end_of_UARTchar 1D8A                            SetBaud@buf 0120  
                     __end_of_dpowers 09FB                    __size_of_PS_2_INIT 000C  
                               main@i 00E7                                 isr@rx 0024  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 0033                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 1593                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 19E0                         _ScanCodeSHIFT 08F5  
                  __size_ofi1_delayUS 0033                       __initialization 00E3  
              __end_of_Init_PS_2_Send 149F                    __size_of_Data_TRIS 000B  
                        __end_of_main 1000                      __end_of_InitUART 12BA  
                          _Read_Timer 016D                      ??_UARTstringWAIT 0036  
                         isr@Rx_fault 0023                      __end_of_ReadBaud 1F9A  
          __end_of_DisableInternalADC 07FF                      __end_of_ScanCode 08F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 0E2A  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 169B  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 10F8  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                                _ADCON2 009F  
                 __size_ofi1_UARTchar 004A                      ___llmod@dividend 0037  
                              _ADRESH 009C                                _ADRESL 009B  
                    __end_of___flpack 106C                         _READ_PS_2_PIN 1982  
                      __CFG_ZCDDIS$ON 0000                                _ANSELA 018C  
                              _ANSELC 018E                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l5008 1AC9                                i1l5330 199E  
                              i1l5410 00AB                                i1l5402 0095  
                              i1l5340 19A5                                i1l5412 00B7  
                              i1l5280 1D03                                i1l5424 00D6  
                              i1l5360 002A                                i1l5426 00D8  
                              i1l5284 1D1F                                i1l5380 0060  
                              i1l5372 0048                                i1l5364 0030  
                              i1l5278 1CF9                                i1l5286 1D2C  
                              i1l5390 007A                                i1l5288 1D35  
                              i1l5386 0072                                i1l4974 1BB9  
                              i1l4990 1ABB                                i1l4998 1AC3  
                              _INTCON 000B                                _FVRCON 0117  
                              _PARITY 00EA                                _PMADRH 0192  
                              _PMADRL 0191                      __end_of___lwtofl 1A0D  
                              _PMDATH 0194                                _PMDATL 0193  
                              _PMCON1 0195                                _PMCON2 0196  
                  __size_of_ReadUSART 000A                                u632_25 1AAF  
                              _OSCCON 0099                                u629_23 1BA9  
                              u680_25 0037                                u683_25 004F  
                              u685_25 0062                                u677_25 001A  
                              _SPBRGH 019C                                _TX1STA 019E  
                              _UNLOCK 1910                 _PS_2_Read_Data_Second 01A4  
                           ??_InitApp 0025                 ??_ConfigureOscillator 0025  
                              _Delete 0166                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 0059                           ?_BlockErase 0025  
                       InitUART@spbrg 0040                           SetBaud@Baud 0054  
                  __size_of_OpenUSART 003F                       ?_Init_PS_2_Send 0070  
                              ___flge 1F9A                     ?_Decode_Scan_Code 0070  
                              ___lmul 1ACB                             ??___fldiv 003C  
                      __CFG_STVREN$ON 0000                             ??___flmul 0050  
                           ??___lldiv 002D                           ?_Clock_TRIS 0070  
                           ??___llmod 003B                           SetBaud@temp 015A  
                   __end_of_PS_2_INIT 1927                    ??_Decode_Scan_Code 0025  
                        ?i1_ReadUSART 0070                             ??_delayUS 0029  
__size_of_Decode_Scan_Code_FunctionE0 0013                           ?_CloseUSART 0070  
              ?_WriteFlash_Sequential 002F                     __end_ofi1_delayUS 1BC2  
                     SetBaud@Baudtemp 0152                __size_of_CheckSum_byte 0031  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 1910                             ??_sprintf 0045  
             i1READ_PS_2_PIN@DATA_CLK 0070                            ___flge@ff1 0025  
                          ___flge@ff2 0029                          ?_PS_2_Update 0070  
                     _ReadFlash_2Byte 1B5D                       _ReadFlash_4Byte 1D8A  
                          ___fldiv@f1 0038                            ___fldiv@f2 0034  
                          ___fldiv@f3 0041               __end_of__initialization 0119  
                  __size_of_WriteBaud 005E                            ___flmul@f1 0048  
                          ___flmul@f2 004C                        PS_2_Update@buf 02A0  
             ?_PS_2_DISABLE_INTERRUPT 0070                             ?_ISNUMBER 0070  
                  __size_of_baudUSART 0009                        __pcstackCOMMON 0070  
                        __pidataBANK2 18D9                          __pidataBANK4 1927  
                           ?_UARTchar 002D                    InitUART@baudconfig 0042  
                         _Init_System 1593                     __end_of_ReadUSART 18FA  
                          ___lwtofl@c 002F                           _ReadVoltage 106C  
                     ReadVoltage@temp 00A4                          WriteBaud@row 0036  
             i1_UART_send_break_timed 1A4F                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 0033                         ReadUSART@data 0026  
                         _SinLEDtimer 0228    __size_of_Decode_Scan_Code_Function 0011  
                   __end_of_OpenUSART 1C69                   __size_of_BlockErase 0031  
                     WriteBaud@Parity 003C                     Send_PS2@oddparity 0033  
                          __pbssBANK0 0066                            __pbssBANK1 00E8  
                          __pbssBANK2 015F                            __pbssBANK3 01A0  
                          __pbssBANK4 0220                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 0033                             ?_ReadBaud 0037  
      __end_of_PS_2_DISABLE_INTERRUPT 1A2C                    ReadVoltage@voltage 00A0  
                             ?_UNLOCK 0070                       i1_READ_PS_2_PIN 1994  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0025                  _ScanCodeFunctionNoE0 0800  
            __end_of_InternalADC_Read 1CF0                    _ScanCodeFunctionE0 0966  
                       _CheckSum_byte 1AFB                            __pmaintext 0E2A  
                        ??i1_UARTchar 007A                           _ParityTyped 01AB  
                       BlockErase@row 0025                               ?___flge 0025  
                             ?___lmul 0025                   i1CheckSum_byte@This 0070  
                       _Caps_Lock_Key 0164                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 002F  
                          _blinkdelay 00EB                             ?___flpack 0025  
                      ___lmul@product 002D                 i1CheckSum_byte@Parity 0076  
                           ?___lwtofl 002F                     __end_of_WriteBaud 1F36  
                     ??_READ_PS_2_PIN 0025                     __end_of_baudUSART 0BCA  
             __end_of_ReadFlash_2Byte 1B8F               __end_of_ReadFlash_4Byte 1DDB  
                             _OSCSTAT 009A                   Clock_TRIS@direction 0025  
                             _PPSLOCK 0E0F                    __end_ofi1_UARTchar 1D3A  
                          ??_InitUART 0038                            ??_ReadBaud 003B  
               READ_PS_2_PIN@DATA_CLK 0025                 _PS_2_ENABLE_INTERRUPT 19E0  
                     __size_of_UNLOCK 000B                               _InitApp 1A2C  
                          ??_Send_PS2 002F                    _Keyboard_Connected 1E83  
                             _SetBaud 169B                        InitUART@config 0043  
                      ?_CheckSum_byte 0025           __end_of_INIT_PS_2_INTERRUPT 195F  
                      InitUART@parity 0037               i1CheckSum_byte@Odd_Even 0072  
                      ??_Reverse_Byte 0025                               _Version 0234  
                     __size_of___flge 0066                               ___fldiv 0BCA  
                     __size_of___lmul 0030                               ___flmul 10F8  
                 ?_Keyboard_Connected 0070                               ___lldiv 1DDB  
                             ___llmod 1C69                            ??___flpack 002B  
                             _delayUS 1BF5             ??i1_UART_send_break_timed 007C  
                             __ptext1 1F9A                               __ptext2 106C  
                             __ptext3 19F5                               __ptext4 10F8  
                             __ptext5 0BCA                               __ptext6 1001  
                             __ptext7 1CAC                               __ptext8 07F8  
                             __ptext9 191B                            ??___lwtofl 0033  
                __size_ofi1_ReadUSART 0009                               _dpowers 09D3  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00DD           WriteFlash_Sequential@amount 0032  
         WriteFlash_Sequential@buffer 0031                 _UART_send_break_timed 1A74  
                  _DisableInternalADC 07F8           WriteFlash_Sequential@spaces 00E5  
             __end_ofi1_READ_PS_2_PIN 19A7                  ??_Keyboard_Connected 0061  
                             _sprintf 149F                               clrloop0 18E2  
                   _Caps_Lock_Key_old 0165                  end_of_initialization 0119  
                     i1ReadUSART@data 0071                               init_ram 18DB  
                 ?_DisableInternalADC 0070                               initloop 18DC  
                    ??_Init_PS_2_Send 0038          ?_Decode_Scan_Code_FunctionE0 0070  
                __size_of_PS_2_Update 06DB                       ___lldiv@divisor 0025  
                     ___lldiv@counter 0032                          ??_BlockErase 0027  
                           _RCSTAbits 019D                          ??_Clock_TRIS 0025  
                        __pstringtext 0800              _PS_2_Read_Data_FirstTEMP 0220  
                     i1_CheckSum_byte 1A9B               ??_WriteFlash_Sequential 0033  
                        ??_CloseUSART 0025                  ??_DisableInternalADC 0025  
            _PS_2_Read_Data_ForthTEMP 0222                             _PS_2_INIT 191B  
                    __CFG_FOSC$INTOSC 0000                             _PS_2_bits 006A  
                           _TRISAbits 008C                             _TRISCbits 008E  
           __size_of_Decode_Scan_Code 0013                      ?_ReadFlash_2Byte 0025  
                    ?_ReadFlash_4Byte 002A                           ___fldiv@exp 0046  
                  __end_of_BlockErase 1B5D           __end_of_ConfigureOscillator 1982  
                           i1_delayUS 1B8F                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 1905                           ___flmul@exp 0055  
                           _BaudTyped 015F                             _Data_TRIS 1905  
                     PS_2_Update@temp 02E0                             _CapsCount 01A8  
                           _Caps_Lock 01A9              _PS_2_Read_Data_ThirdTEMP 0226  
                     ??_CheckSum_byte 0028                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 191B  
                  __end_of_CloseUSART 1941         ??_Decode_Scan_Code_FunctionE0 0025  
                   __size_of_ISNUMBER 000E                        __end_of___flge 2000  
               CheckSum_byte@Odd_Even 0027                          ?_Init_System 0070  
                      __end_of___lmul 1AFB                     __size_of_UARTchar 0050  
                        ?_ReadVoltage 005C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0035           INIT_PS_2_INTERRUPT@DATA_CLK 0025  
              ?_UART_send_break_timed 002F                   start_initialization 00E3  
                           _ReadUSART 18F0               __size_of_UARTstringWAIT 0033  
               CheckSum_byte@ThisTemp 0029                           __end_of_isr 00E1  
                       WriteBaud@Baud 0038                  __end_of_Reverse_Byte 1E83  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0025                         WriteBaud@temp 0045  
                           _OpenUSART 1C2A                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0025                       ___llmod@divisor 0033  
                   __size_of_InitUART 00F0                       ___llmod@counter 003C  
                   __size_of_ReadBaud 0064                             _Shift_Key 01AE  
             __end_ofi1_CheckSum_byte 1ACB                     ?_InternalADC_Read 002F  
                   __size_of_Send_PS2 019F                              ??___flge 002D  
                            ??___lmul 002D             _PS_2_Read_Data_SecondTEMP 0224  
                  ??_InternalADC_Read 0031                           __pdataBANK2 016D  
                         __pdataBANK4 022C                     __size_of___flpack 006B  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtofl 0018                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01AF                         __pcstackBANK5 02A0  
                           _WriteBaud 1ED8                   __end_of__stringdata 0BC1  
                  ReadFlash_2Byte@row 0025                             _baudUSART 0BC1  
                  ReadFlash_4Byte@row 002A                            ?_OpenUSART 0025  
                         sprintf@_val 004E                           sprintf@flag 004B  
                         sprintf@prec 004C                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0966       Decode_Scan_Code_FunctionE0@Code 0025  
                            ?_SetBaud 0054                        ReadBaud@column 0039  
                            ?___fldiv 0034                              ?___flmul 0048  
                            ?___lldiv 0025                              ?___llmod 0033  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 00A0  
       WriteFlash_Sequential@TempBufL 00C0                              ?_delayUS 0025  
              WriteFlash_Sequential@i 00E6            Decode_Scan_Code_Shift@Code 0025  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0026  
                            _BAUDMODE 0163                      _Decode_Scan_Code 19A7  
                          ?_WriteBaud 0036                 __end_of_READ_PS_2_PIN 1994  
                            ?_sprintf 003D            UARTchar@NinethBit_override 002D  
                     _PS_2_Update$820 02DE                       _PS_2_Update$821 02DF  
                     _PS_2_Update$818 02DC                       _PS_2_Update$819 02DD  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 0025       __size_of_Decode_Scan_Code_Shift 0013  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 0025  
          WriteFlash_Sequential@tempH 00E0            WriteFlash_Sequential@tempL 00E1  
                           clear_ram0 18E1                              _PIE1bits 0091  
                            _ISNUMBER 1941                              _PIR1bits 0011  
                    ?i1_CheckSum_byte 0070              WriteFlash_Sequential@row 002F  
                            _UARTchar 1D3A                         ??i1_ReadUSART 0070  
                            _LControl 0168          __size_of_INIT_PS_2_INTERRUPT 0010  
                         __stringdata 09FB                  __size_of_Init_System 0108  
      __size_of_WriteFlash_Sequential 00F2         __end_of_WriteFlash_Sequential 13AC  
               __size_of_Reverse_Byte 0055                        _UARTstringWAIT 1BC2  
                         ??_ReadUSART 0025                  __size_of_ReadVoltage 008C  
                            _RControl 016A              ??_PS_2_DISABLE_INTERRUPT 0025  
             ??_PS_2_ENABLE_INTERRUPT 0025                     ___lmul@multiplier 0025  
         __size_of_Keyboard_Connected 0055                              SetBaud@i 015E  
                       ??_PS_2_Update 01AF                              _InitUART 11CA  
                            _ReadBaud 1F36                           ??_OpenUSART 0027  
                            _ScanCode 0884                       OpenUSART@config 0027  
   __end_of_Decode_Scan_Code_Function 1970                              _Send_PS2 0C8B  
                    __size_of_InitApp 0023                      __size_of_SetBaud 0165  
            ?i1_UART_send_break_timed 007A                          _Reverse_Byte 1E2E  
                    __size_of___fldiv 00C1                      __size_of___flmul 00D2  
              _Decode_Scan_Code_Shift 19CD                      __size_of___lldiv 0053  
                    __size_of___llmod 0043                              ___flpack 1001  
                       SetBaud@Parity 0058               ??_UART_send_break_timed 0031  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1BF5                              ___lwtofl 19F5  
                     Send_PS2@command 0034                   __end_ofi1_ReadUSART 18F0  
                         ??_WriteBaud 003D                       Send_PS2@timeout 0036  
                       ISNUMBER@ascii 0025                              __ptext10 194F  
                            __ptext11 1E83                              __ptext20 1E2E  
                            __ptext12 011D                              __ptext21 1941  
                            __ptext13 1ACB                              __ptext30 1D3A  
                            __ptext22 19CD                              __ptext14 1A74  
                            __ptext31 1F36                              __ptext23 19BA  
                            __ptext15 169B                              __ptext40 13AC  
                            __ptext32 1D8A                              __ptext24 195F  
                            __ptext16 1ED8                              __ptext41 0C8B  
                            __ptext33 1B5D                              __ptext25 19A7  
                            __ptext17 12BA                              __ptext50 1970  
                            __ptext42 1BF5                              __ptext34 11CA  
                            __ptext26 1593                              __ptext18 1B2C  
                            __ptext43 1982                              __ptext35 0BC1  
                            __ptext27 149F                              __ptext19 1910  
                            __ptext52 1CF0                              __ptext44 19E0  
                            __ptext36 1DDB                              __ptext28 1C69  
                            __ptext53 1A9B                              __ptext45 1905  
                            __ptext37 18F0                              __ptext29 1BC2  
                            __ptext54 1A4F                              __ptext46 18FA  
                            __ptext38 1C2A                              __ptext55 1B8F  
                            __ptext47 1AFB                              __ptext39 1933  
                            __ptext56 18E7                              __ptext48 1A0D  
                            __ptext57 1994                              __ptext49 1A2C  
       PS_2_ENABLE_INTERRUPT@DATA_CLK 0026                           ??_baudUSART 0025  
                    __size_of_sprintf 00F4                   Keyboard_Connected@i 0061  
                       __size_of_main 01D6              __size_of_ReadFlash_2Byte 0032  
            __size_of_ReadFlash_4Byte 0051                              delayUS@i 002A  
                            delayUS@j 002E                          _pwrLEDtoggle 022A  
        __size_of_ConfigureOscillator 0012                 __end_of_CheckSum_byte 1B2C  
                 __end_of_PS_2_Update 07F8                            _RC1STAbits 019D  
                      CheckSum_byte@i 002C                        _Left_Shift_Key 01AA  
             __size_of_Init_PS_2_Send 00F3                 ___flmul@f3_as_product 0056  
                     ?_UARTstringWAIT 0034                   CheckSum_byte@Parity 002B  
                          _INTCONbits 000B             __size_of_InternalADC_Read 0044  
                      OpenUSART@spbrg 0025                          UARTchar@data 0033  
        i1UARTchar@NinethBit_override 0078                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 001F                              intlevel1 0000  
                           sprintf@ap 0052                             sprintf@sp 003D  
                    ___lldiv@dividend 0029   __end_of_Decode_Scan_Code_FunctionE0 19CD  
         _Decode_Scan_Code_FunctionE0 19BA                     __CFG_CLKOUTEN$OFF 0000  
     __end_ofi1_UART_send_break_timed 1A74                        _BatteryVoltage 0066  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 19BA  
                          i1_UARTchar 1CF0                       _Right_Shift_Key 01AD  
                         i1_ReadUSART 18E7                              sprintf@c 0053  
                            sprintf@f 003F                      ___lldiv@quotient 002E  
                Decode_Scan_Code@Code 0025                     Init_System@Parity 00E0  
                  _Left_Shift_Key_old 0169                            _TX1STAbits 019E  
                   CheckSum_byte@This 0025                        i1UARTchar@data 0020  
                         _PS_2_Update 011D                   _INIT_PS_2_INTERRUPT 194F  
         ??_Decode_Scan_Code_Function 0025                       Init_System@Baud 00E1  
                     Init_System@temp 00DC                        Init_System@buf 00A0  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
