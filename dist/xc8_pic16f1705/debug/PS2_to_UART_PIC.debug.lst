

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jan 23 18:50:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011C                     	;# 
   136  018C                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019D                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019E                     	;# 
   166  019E                     	;# 
   167  019F                     	;# 
   168  019F                     	;# 
   169  019F                     	;# 
   170  019F                     	;# 
   171  019F                     	;# 
   172  020C                     	;# 
   173  020E                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0212                     	;# 
   178  0213                     	;# 
   179  0213                     	;# 
   180  0214                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0216                     	;# 
   188  0217                     	;# 
   189  0217                     	;# 
   190  028C                     	;# 
   191  028E                     	;# 
   192  0291                     	;# 
   193  0291                     	;# 
   194  0292                     	;# 
   195  0293                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029A                     	;# 
   202  029E                     	;# 
   203  030C                     	;# 
   204  030E                     	;# 
   205  038C                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0397                     	;# 
   211  0398                     	;# 
   212  0399                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  041C                     	;# 
   217  041D                     	;# 
   218  041E                     	;# 
   219  0511                     	;# 
   220  0515                     	;# 
   221  0617                     	;# 
   222  0618                     	;# 
   223  0619                     	;# 
   224  0619                     	;# 
   225  061A                     	;# 
   226  061B                     	;# 
   227  061C                     	;# 
   228  061C                     	;# 
   229  0691                     	;# 
   230  0692                     	;# 
   231  0693                     	;# 
   232  0694                     	;# 
   233  0695                     	;# 
   234  0696                     	;# 
   235  0697                     	;# 
   236  0698                     	;# 
   237  0699                     	;# 
   238  069A                     	;# 
   239  069B                     	;# 
   240  069C                     	;# 
   241  069D                     	;# 
   242  069E                     	;# 
   243  069F                     	;# 
   244  0E0F                     	;# 
   245  0E10                     	;# 
   246  0E11                     	;# 
   247  0E12                     	;# 
   248  0E13                     	;# 
   249  0E14                     	;# 
   250  0E15                     	;# 
   251  0E17                     	;# 
   252  0E20                     	;# 
   253  0E21                     	;# 
   254  0E22                     	;# 
   255  0E24                     	;# 
   256  0E25                     	;# 
   257  0E28                     	;# 
   258  0E29                     	;# 
   259  0E2A                     	;# 
   260  0E2B                     	;# 
   261  0E90                     	;# 
   262  0E91                     	;# 
   263  0E92                     	;# 
   264  0E94                     	;# 
   265  0E95                     	;# 
   266  0EA0                     	;# 
   267  0EA1                     	;# 
   268  0EA2                     	;# 
   269  0EA3                     	;# 
   270  0EA4                     	;# 
   271  0EA5                     	;# 
   272  0F0F                     	;# 
   273  0F10                     	;# 
   274  0F11                     	;# 
   275  0F12                     	;# 
   276  0F13                     	;# 
   277  0F14                     	;# 
   278  0F15                     	;# 
   279  0F16                     	;# 
   280  0F17                     	;# 
   281  0F18                     	;# 
   282  0F19                     	;# 
   283  0F1A                     	;# 
   284  0F1B                     	;# 
   285  0F1C                     	;# 
   286  0F1D                     	;# 
   287  0F1E                     	;# 
   288  0F1F                     	;# 
   289  0F20                     	;# 
   290  0F21                     	;# 
   291  0F22                     	;# 
   292  0F23                     	;# 
   293  0F24                     	;# 
   294  0F25                     	;# 
   295  0F26                     	;# 
   296  0F27                     	;# 
   297  0F28                     	;# 
   298  0F29                     	;# 
   299  0F2A                     	;# 
   300  0F2B                     	;# 
   301  0F2C                     	;# 
   302  0F2D                     	;# 
   303  0F9E                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000E                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  008C                     	;# 
   342  008E                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009B                     	;# 
   354  009C                     	;# 
   355  009D                     	;# 
   356  009E                     	;# 
   357  009F                     	;# 
   358  010C                     	;# 
   359  010E                     	;# 
   360  0111                     	;# 
   361  0112                     	;# 
   362  0113                     	;# 
   363  0114                     	;# 
   364  0115                     	;# 
   365  0116                     	;# 
   366  0117                     	;# 
   367  0118                     	;# 
   368  0119                     	;# 
   369  011C                     	;# 
   370  018C                     	;# 
   371  018E                     	;# 
   372  0191                     	;# 
   373  0191                     	;# 
   374  0192                     	;# 
   375  0193                     	;# 
   376  0193                     	;# 
   377  0194                     	;# 
   378  0195                     	;# 
   379  0196                     	;# 
   380  0197                     	;# 
   381  0199                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019F                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  0211                     	;# 
   409  0211                     	;# 
   410  0212                     	;# 
   411  0212                     	;# 
   412  0213                     	;# 
   413  0213                     	;# 
   414  0214                     	;# 
   415  0214                     	;# 
   416  0215                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0216                     	;# 
   421  0216                     	;# 
   422  0217                     	;# 
   423  0217                     	;# 
   424  028C                     	;# 
   425  028E                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0293                     	;# 
   431  0298                     	;# 
   432  0298                     	;# 
   433  0299                     	;# 
   434  029A                     	;# 
   435  029A                     	;# 
   436  029E                     	;# 
   437  030C                     	;# 
   438  030E                     	;# 
   439  038C                     	;# 
   440  038E                     	;# 
   441  0391                     	;# 
   442  0392                     	;# 
   443  0393                     	;# 
   444  0397                     	;# 
   445  0398                     	;# 
   446  0399                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0511                     	;# 
   454  0515                     	;# 
   455  0617                     	;# 
   456  0618                     	;# 
   457  0619                     	;# 
   458  0619                     	;# 
   459  061A                     	;# 
   460  061B                     	;# 
   461  061C                     	;# 
   462  061C                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0696                     	;# 
   469  0697                     	;# 
   470  0698                     	;# 
   471  0699                     	;# 
   472  069A                     	;# 
   473  069B                     	;# 
   474  069C                     	;# 
   475  069D                     	;# 
   476  069E                     	;# 
   477  069F                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E17                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E28                     	;# 
   492  0E29                     	;# 
   493  0E2A                     	;# 
   494  0E2B                     	;# 
   495  0E90                     	;# 
   496  0E91                     	;# 
   497  0E92                     	;# 
   498  0E94                     	;# 
   499  0E95                     	;# 
   500  0EA0                     	;# 
   501  0EA1                     	;# 
   502  0EA2                     	;# 
   503  0EA3                     	;# 
   504  0EA4                     	;# 
   505  0EA5                     	;# 
   506  0F0F                     	;# 
   507  0F10                     	;# 
   508  0F11                     	;# 
   509  0F12                     	;# 
   510  0F13                     	;# 
   511  0F14                     	;# 
   512  0F15                     	;# 
   513  0F16                     	;# 
   514  0F17                     	;# 
   515  0F18                     	;# 
   516  0F19                     	;# 
   517  0F1A                     	;# 
   518  0F1B                     	;# 
   519  0F1C                     	;# 
   520  0F1D                     	;# 
   521  0F1E                     	;# 
   522  0F1F                     	;# 
   523  0F20                     	;# 
   524  0F21                     	;# 
   525  0F22                     	;# 
   526  0F23                     	;# 
   527  0F24                     	;# 
   528  0F25                     	;# 
   529  0F26                     	;# 
   530  0F27                     	;# 
   531  0F28                     	;# 
   532  0F29                     	;# 
   533  0F2A                     	;# 
   534  0F2B                     	;# 
   535  0F2C                     	;# 
   536  0F2D                     	;# 
   537  0F9E                     	;# 
   538  0FE4                     	;# 
   539  0FE5                     	;# 
   540  0FE6                     	;# 
   541  0FE7                     	;# 
   542  0FE8                     	;# 
   543  0FE9                     	;# 
   544  0FEA                     	;# 
   545  0FEB                     	;# 
   546  0FED                     	;# 
   547  0FEE                     	;# 
   548  0FEF                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000E                     	;# 
   563  0011                     	;# 
   564  0012                     	;# 
   565  0013                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  001A                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  008C                     	;# 
   576  008E                     	;# 
   577  0091                     	;# 
   578  0092                     	;# 
   579  0093                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0098                     	;# 
   584  0099                     	;# 
   585  009A                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  009F                     	;# 
   592  010C                     	;# 
   593  010E                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  011C                     	;# 
   604  018C                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  0199                     	;# 
   617  0199                     	;# 
   618  019A                     	;# 
   619  019A                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019C                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019E                     	;# 
   634  019E                     	;# 
   635  019F                     	;# 
   636  019F                     	;# 
   637  019F                     	;# 
   638  019F                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020E                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  028C                     	;# 
   659  028E                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029A                     	;# 
   670  029E                     	;# 
   671  030C                     	;# 
   672  030E                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  0397                     	;# 
   679  0398                     	;# 
   680  0399                     	;# 
   681  0415                     	;# 
   682  0416                     	;# 
   683  0417                     	;# 
   684  041C                     	;# 
   685  041D                     	;# 
   686  041E                     	;# 
   687  0511                     	;# 
   688  0515                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0696                     	;# 
   703  0697                     	;# 
   704  0698                     	;# 
   705  0699                     	;# 
   706  069A                     	;# 
   707  069B                     	;# 
   708  069C                     	;# 
   709  069D                     	;# 
   710  069E                     	;# 
   711  069F                     	;# 
   712  0E0F                     	;# 
   713  0E10                     	;# 
   714  0E11                     	;# 
   715  0E12                     	;# 
   716  0E13                     	;# 
   717  0E14                     	;# 
   718  0E15                     	;# 
   719  0E17                     	;# 
   720  0E20                     	;# 
   721  0E21                     	;# 
   722  0E22                     	;# 
   723  0E24                     	;# 
   724  0E25                     	;# 
   725  0E28                     	;# 
   726  0E29                     	;# 
   727  0E2A                     	;# 
   728  0E2B                     	;# 
   729  0E90                     	;# 
   730  0E91                     	;# 
   731  0E92                     	;# 
   732  0E94                     	;# 
   733  0E95                     	;# 
   734  0EA0                     	;# 
   735  0EA1                     	;# 
   736  0EA2                     	;# 
   737  0EA3                     	;# 
   738  0EA4                     	;# 
   739  0EA5                     	;# 
   740  0F0F                     	;# 
   741  0F10                     	;# 
   742  0F11                     	;# 
   743  0F12                     	;# 
   744  0F13                     	;# 
   745  0F14                     	;# 
   746  0F15                     	;# 
   747  0F16                     	;# 
   748  0F17                     	;# 
   749  0F18                     	;# 
   750  0F19                     	;# 
   751  0F1A                     	;# 
   752  0F1B                     	;# 
   753  0F1C                     	;# 
   754  0F1D                     	;# 
   755  0F1E                     	;# 
   756  0F1F                     	;# 
   757  0F20                     	;# 
   758  0F21                     	;# 
   759  0F22                     	;# 
   760  0F23                     	;# 
   761  0F24                     	;# 
   762  0F25                     	;# 
   763  0F26                     	;# 
   764  0F27                     	;# 
   765  0F28                     	;# 
   766  0F29                     	;# 
   767  0F2A                     	;# 
   768  0F2B                     	;# 
   769  0F2C                     	;# 
   770  0F2D                     	;# 
   771  0F9E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0016                     	;# 
   803  0017                     	;# 
   804  0018                     	;# 
   805  0019                     	;# 
   806  001A                     	;# 
   807  001B                     	;# 
   808  001C                     	;# 
   809  008C                     	;# 
   810  008E                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  009F                     	;# 
   826  010C                     	;# 
   827  010E                     	;# 
   828  0111                     	;# 
   829  0112                     	;# 
   830  0113                     	;# 
   831  0114                     	;# 
   832  0115                     	;# 
   833  0116                     	;# 
   834  0117                     	;# 
   835  0118                     	;# 
   836  0119                     	;# 
   837  011C                     	;# 
   838  018C                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  028C                     	;# 
   893  028E                     	;# 
   894  0291                     	;# 
   895  0291                     	;# 
   896  0292                     	;# 
   897  0293                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  029A                     	;# 
   904  029E                     	;# 
   905  030C                     	;# 
   906  030E                     	;# 
   907  038C                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0397                     	;# 
   913  0398                     	;# 
   914  0399                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  041C                     	;# 
   919  041D                     	;# 
   920  041E                     	;# 
   921  0511                     	;# 
   922  0515                     	;# 
   923  0617                     	;# 
   924  0618                     	;# 
   925  0619                     	;# 
   926  0619                     	;# 
   927  061A                     	;# 
   928  061B                     	;# 
   929  061C                     	;# 
   930  061C                     	;# 
   931  0691                     	;# 
   932  0692                     	;# 
   933  0693                     	;# 
   934  0694                     	;# 
   935  0695                     	;# 
   936  0696                     	;# 
   937  0697                     	;# 
   938  0698                     	;# 
   939  0699                     	;# 
   940  069A                     	;# 
   941  069B                     	;# 
   942  069C                     	;# 
   943  069D                     	;# 
   944  069E                     	;# 
   945  069F                     	;# 
   946  0E0F                     	;# 
   947  0E10                     	;# 
   948  0E11                     	;# 
   949  0E12                     	;# 
   950  0E13                     	;# 
   951  0E14                     	;# 
   952  0E15                     	;# 
   953  0E17                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E24                     	;# 
   958  0E25                     	;# 
   959  0E28                     	;# 
   960  0E29                     	;# 
   961  0E2A                     	;# 
   962  0E2B                     	;# 
   963  0E90                     	;# 
   964  0E91                     	;# 
   965  0E92                     	;# 
   966  0E94                     	;# 
   967  0E95                     	;# 
   968  0EA0                     	;# 
   969  0EA1                     	;# 
   970  0EA2                     	;# 
   971  0EA3                     	;# 
   972  0EA4                     	;# 
   973  0EA5                     	;# 
   974  0F0F                     	;# 
   975  0F10                     	;# 
   976  0F11                     	;# 
   977  0F12                     	;# 
   978  0F13                     	;# 
   979  0F14                     	;# 
   980  0F15                     	;# 
   981  0F16                     	;# 
   982  0F17                     	;# 
   983  0F18                     	;# 
   984  0F19                     	;# 
   985  0F1A                     	;# 
   986  0F1B                     	;# 
   987  0F1C                     	;# 
   988  0F1D                     	;# 
   989  0F1E                     	;# 
   990  0F1F                     	;# 
   991  0F20                     	;# 
   992  0F21                     	;# 
   993  0F22                     	;# 
   994  0F23                     	;# 
   995  0F24                     	;# 
   996  0F25                     	;# 
   997  0F26                     	;# 
   998  0F27                     	;# 
   999  0F28                     	;# 
  1000  0F29                     	;# 
  1001  0F2A                     	;# 
  1002  0F2B                     	;# 
  1003  0F2C                     	;# 
  1004  0F2D                     	;# 
  1005  0F9E                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000E                     	;# 
  1031  0011                     	;# 
  1032  0012                     	;# 
  1033  0013                     	;# 
  1034  0015                     	;# 
  1035  0016                     	;# 
  1036  0016                     	;# 
  1037  0017                     	;# 
  1038  0018                     	;# 
  1039  0019                     	;# 
  1040  001A                     	;# 
  1041  001B                     	;# 
  1042  001C                     	;# 
  1043  008C                     	;# 
  1044  008E                     	;# 
  1045  0091                     	;# 
  1046  0092                     	;# 
  1047  0093                     	;# 
  1048  0095                     	;# 
  1049  0096                     	;# 
  1050  0097                     	;# 
  1051  0098                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  009F                     	;# 
  1060  010C                     	;# 
  1061  010E                     	;# 
  1062  0111                     	;# 
  1063  0112                     	;# 
  1064  0113                     	;# 
  1065  0114                     	;# 
  1066  0115                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  0118                     	;# 
  1070  0119                     	;# 
  1071  011C                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0197                     	;# 
  1083  0199                     	;# 
  1084  0199                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019A                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019C                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019D                     	;# 
  1099  019D                     	;# 
  1100  019E                     	;# 
  1101  019E                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  028C                     	;# 
  1127  028E                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  029A                     	;# 
  1138  029E                     	;# 
  1139  030C                     	;# 
  1140  030E                     	;# 
  1141  038C                     	;# 
  1142  038E                     	;# 
  1143  0391                     	;# 
  1144  0392                     	;# 
  1145  0393                     	;# 
  1146  0397                     	;# 
  1147  0398                     	;# 
  1148  0399                     	;# 
  1149  0415                     	;# 
  1150  0416                     	;# 
  1151  0417                     	;# 
  1152  041C                     	;# 
  1153  041D                     	;# 
  1154  041E                     	;# 
  1155  0511                     	;# 
  1156  0515                     	;# 
  1157  0617                     	;# 
  1158  0618                     	;# 
  1159  0619                     	;# 
  1160  0619                     	;# 
  1161  061A                     	;# 
  1162  061B                     	;# 
  1163  061C                     	;# 
  1164  061C                     	;# 
  1165  0691                     	;# 
  1166  0692                     	;# 
  1167  0693                     	;# 
  1168  0694                     	;# 
  1169  0695                     	;# 
  1170  0696                     	;# 
  1171  0697                     	;# 
  1172  0698                     	;# 
  1173  0699                     	;# 
  1174  069A                     	;# 
  1175  069B                     	;# 
  1176  069C                     	;# 
  1177  069D                     	;# 
  1178  069E                     	;# 
  1179  069F                     	;# 
  1180  0E0F                     	;# 
  1181  0E10                     	;# 
  1182  0E11                     	;# 
  1183  0E12                     	;# 
  1184  0E13                     	;# 
  1185  0E14                     	;# 
  1186  0E15                     	;# 
  1187  0E17                     	;# 
  1188  0E20                     	;# 
  1189  0E21                     	;# 
  1190  0E22                     	;# 
  1191  0E24                     	;# 
  1192  0E25                     	;# 
  1193  0E28                     	;# 
  1194  0E29                     	;# 
  1195  0E2A                     	;# 
  1196  0E2B                     	;# 
  1197  0E90                     	;# 
  1198  0E91                     	;# 
  1199  0E92                     	;# 
  1200  0E94                     	;# 
  1201  0E95                     	;# 
  1202  0EA0                     	;# 
  1203  0EA1                     	;# 
  1204  0EA2                     	;# 
  1205  0EA3                     	;# 
  1206  0EA4                     	;# 
  1207  0EA5                     	;# 
  1208  0F0F                     	;# 
  1209  0F10                     	;# 
  1210  0F11                     	;# 
  1211  0F12                     	;# 
  1212  0F13                     	;# 
  1213  0F14                     	;# 
  1214  0F15                     	;# 
  1215  0F16                     	;# 
  1216  0F17                     	;# 
  1217  0F18                     	;# 
  1218  0F19                     	;# 
  1219  0F1A                     	;# 
  1220  0F1B                     	;# 
  1221  0F1C                     	;# 
  1222  0F1D                     	;# 
  1223  0F1E                     	;# 
  1224  0F1F                     	;# 
  1225  0F20                     	;# 
  1226  0F21                     	;# 
  1227  0F22                     	;# 
  1228  0F23                     	;# 
  1229  0F24                     	;# 
  1230  0F25                     	;# 
  1231  0F26                     	;# 
  1232  0F27                     	;# 
  1233  0F28                     	;# 
  1234  0F29                     	;# 
  1235  0F2A                     	;# 
  1236  0F2B                     	;# 
  1237  0F2C                     	;# 
  1238  0F2D                     	;# 
  1239  0F9E                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000E                     	;# 
  1265  0011                     	;# 
  1266  0012                     	;# 
  1267  0013                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008E                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0093                     	;# 
  1282  0095                     	;# 
  1283  0096                     	;# 
  1284  0097                     	;# 
  1285  0098                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  009F                     	;# 
  1294  010C                     	;# 
  1295  010E                     	;# 
  1296  0111                     	;# 
  1297  0112                     	;# 
  1298  0113                     	;# 
  1299  0114                     	;# 
  1300  0115                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  0118                     	;# 
  1304  0119                     	;# 
  1305  011C                     	;# 
  1306  018C                     	;# 
  1307  018E                     	;# 
  1308  0191                     	;# 
  1309  0191                     	;# 
  1310  0192                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0199                     	;# 
  1318  0199                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019A                     	;# 
  1322  019A                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019D                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019E                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  019F                     	;# 
  1339  019F                     	;# 
  1340  019F                     	;# 
  1341  019F                     	;# 
  1342  020C                     	;# 
  1343  020E                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  028C                     	;# 
  1361  028E                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  029A                     	;# 
  1372  029E                     	;# 
  1373  030C                     	;# 
  1374  030E                     	;# 
  1375  038C                     	;# 
  1376  038E                     	;# 
  1377  0391                     	;# 
  1378  0392                     	;# 
  1379  0393                     	;# 
  1380  0397                     	;# 
  1381  0398                     	;# 
  1382  0399                     	;# 
  1383  0415                     	;# 
  1384  0416                     	;# 
  1385  0417                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  0511                     	;# 
  1390  0515                     	;# 
  1391  0617                     	;# 
  1392  0618                     	;# 
  1393  0619                     	;# 
  1394  0619                     	;# 
  1395  061A                     	;# 
  1396  061B                     	;# 
  1397  061C                     	;# 
  1398  061C                     	;# 
  1399  0691                     	;# 
  1400  0692                     	;# 
  1401  0693                     	;# 
  1402  0694                     	;# 
  1403  0695                     	;# 
  1404  0696                     	;# 
  1405  0697                     	;# 
  1406  0698                     	;# 
  1407  0699                     	;# 
  1408  069A                     	;# 
  1409  069B                     	;# 
  1410  069C                     	;# 
  1411  069D                     	;# 
  1412  069E                     	;# 
  1413  069F                     	;# 
  1414  0E0F                     	;# 
  1415  0E10                     	;# 
  1416  0E11                     	;# 
  1417  0E12                     	;# 
  1418  0E13                     	;# 
  1419  0E14                     	;# 
  1420  0E15                     	;# 
  1421  0E17                     	;# 
  1422  0E20                     	;# 
  1423  0E21                     	;# 
  1424  0E22                     	;# 
  1425  0E24                     	;# 
  1426  0E25                     	;# 
  1427  0E28                     	;# 
  1428  0E29                     	;# 
  1429  0E2A                     	;# 
  1430  0E2B                     	;# 
  1431  0E90                     	;# 
  1432  0E91                     	;# 
  1433  0E92                     	;# 
  1434  0E94                     	;# 
  1435  0E95                     	;# 
  1436  0EA0                     	;# 
  1437  0EA1                     	;# 
  1438  0EA2                     	;# 
  1439  0EA3                     	;# 
  1440  0EA4                     	;# 
  1441  0EA5                     	;# 
  1442  0F0F                     	;# 
  1443  0F10                     	;# 
  1444  0F11                     	;# 
  1445  0F12                     	;# 
  1446  0F13                     	;# 
  1447  0F14                     	;# 
  1448  0F15                     	;# 
  1449  0F16                     	;# 
  1450  0F17                     	;# 
  1451  0F18                     	;# 
  1452  0F19                     	;# 
  1453  0F1A                     	;# 
  1454  0F1B                     	;# 
  1455  0F1C                     	;# 
  1456  0F1D                     	;# 
  1457  0F1E                     	;# 
  1458  0F1F                     	;# 
  1459  0F20                     	;# 
  1460  0F21                     	;# 
  1461  0F22                     	;# 
  1462  0F23                     	;# 
  1463  0F24                     	;# 
  1464  0F25                     	;# 
  1465  0F26                     	;# 
  1466  0F27                     	;# 
  1467  0F28                     	;# 
  1468  0F29                     	;# 
  1469  0F2A                     	;# 
  1470  0F2B                     	;# 
  1471  0F2C                     	;# 
  1472  0F2D                     	;# 
  1473  0F9E                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0098                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011C                     	;# 
  1540  018C                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020E                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  028C                     	;# 
  1595  028E                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0293                     	;# 
  1601  0298                     	;# 
  1602  0298                     	;# 
  1603  0299                     	;# 
  1604  029A                     	;# 
  1605  029A                     	;# 
  1606  029E                     	;# 
  1607  030C                     	;# 
  1608  030E                     	;# 
  1609  038C                     	;# 
  1610  038E                     	;# 
  1611  0391                     	;# 
  1612  0392                     	;# 
  1613  0393                     	;# 
  1614  0397                     	;# 
  1615  0398                     	;# 
  1616  0399                     	;# 
  1617  0415                     	;# 
  1618  0416                     	;# 
  1619  0417                     	;# 
  1620  041C                     	;# 
  1621  041D                     	;# 
  1622  041E                     	;# 
  1623  0511                     	;# 
  1624  0515                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  0619                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061C                     	;# 
  1633  0691                     	;# 
  1634  0692                     	;# 
  1635  0693                     	;# 
  1636  0694                     	;# 
  1637  0695                     	;# 
  1638  0696                     	;# 
  1639  0697                     	;# 
  1640  0698                     	;# 
  1641  0699                     	;# 
  1642  069A                     	;# 
  1643  069B                     	;# 
  1644  069C                     	;# 
  1645  069D                     	;# 
  1646  069E                     	;# 
  1647  069F                     	;# 
  1648  0E0F                     	;# 
  1649  0E10                     	;# 
  1650  0E11                     	;# 
  1651  0E12                     	;# 
  1652  0E13                     	;# 
  1653  0E14                     	;# 
  1654  0E15                     	;# 
  1655  0E17                     	;# 
  1656  0E20                     	;# 
  1657  0E21                     	;# 
  1658  0E22                     	;# 
  1659  0E24                     	;# 
  1660  0E25                     	;# 
  1661  0E28                     	;# 
  1662  0E29                     	;# 
  1663  0E2A                     	;# 
  1664  0E2B                     	;# 
  1665  0E90                     	;# 
  1666  0E91                     	;# 
  1667  0E92                     	;# 
  1668  0E94                     	;# 
  1669  0E95                     	;# 
  1670  0EA0                     	;# 
  1671  0EA1                     	;# 
  1672  0EA2                     	;# 
  1673  0EA3                     	;# 
  1674  0EA4                     	;# 
  1675  0EA5                     	;# 
  1676  0F0F                     	;# 
  1677  0F10                     	;# 
  1678  0F11                     	;# 
  1679  0F12                     	;# 
  1680  0F13                     	;# 
  1681  0F14                     	;# 
  1682  0F15                     	;# 
  1683  0F16                     	;# 
  1684  0F17                     	;# 
  1685  0F18                     	;# 
  1686  0F19                     	;# 
  1687  0F1A                     	;# 
  1688  0F1B                     	;# 
  1689  0F1C                     	;# 
  1690  0F1D                     	;# 
  1691  0F1E                     	;# 
  1692  0F1F                     	;# 
  1693  0F20                     	;# 
  1694  0F21                     	;# 
  1695  0F22                     	;# 
  1696  0F23                     	;# 
  1697  0F24                     	;# 
  1698  0F25                     	;# 
  1699  0F26                     	;# 
  1700  0F27                     	;# 
  1701  0F28                     	;# 
  1702  0F29                     	;# 
  1703  0F2A                     	;# 
  1704  0F2B                     	;# 
  1705  0F2C                     	;# 
  1706  0F2D                     	;# 
  1707  0F9E                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000E                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0013                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008E                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0093                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0098                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  009F                     	;# 
  1762  010C                     	;# 
  1763  010E                     	;# 
  1764  0111                     	;# 
  1765  0112                     	;# 
  1766  0113                     	;# 
  1767  0114                     	;# 
  1768  0115                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  0118                     	;# 
  1772  0119                     	;# 
  1773  011C                     	;# 
  1774  018C                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  0199                     	;# 
  1787  0199                     	;# 
  1788  019A                     	;# 
  1789  019A                     	;# 
  1790  019A                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019D                     	;# 
  1800  019D                     	;# 
  1801  019D                     	;# 
  1802  019E                     	;# 
  1803  019E                     	;# 
  1804  019E                     	;# 
  1805  019F                     	;# 
  1806  019F                     	;# 
  1807  019F                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  020C                     	;# 
  1811  020E                     	;# 
  1812  0211                     	;# 
  1813  0211                     	;# 
  1814  0212                     	;# 
  1815  0212                     	;# 
  1816  0213                     	;# 
  1817  0213                     	;# 
  1818  0214                     	;# 
  1819  0214                     	;# 
  1820  0215                     	;# 
  1821  0215                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0216                     	;# 
  1825  0216                     	;# 
  1826  0217                     	;# 
  1827  0217                     	;# 
  1828  028C                     	;# 
  1829  028E                     	;# 
  1830  0291                     	;# 
  1831  0291                     	;# 
  1832  0292                     	;# 
  1833  0293                     	;# 
  1834  0293                     	;# 
  1835  0298                     	;# 
  1836  0298                     	;# 
  1837  0299                     	;# 
  1838  029A                     	;# 
  1839  029A                     	;# 
  1840  029E                     	;# 
  1841  030C                     	;# 
  1842  030E                     	;# 
  1843  038C                     	;# 
  1844  038E                     	;# 
  1845  0391                     	;# 
  1846  0392                     	;# 
  1847  0393                     	;# 
  1848  0397                     	;# 
  1849  0398                     	;# 
  1850  0399                     	;# 
  1851  0415                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  041C                     	;# 
  1855  041D                     	;# 
  1856  041E                     	;# 
  1857  0511                     	;# 
  1858  0515                     	;# 
  1859  0617                     	;# 
  1860  0618                     	;# 
  1861  0619                     	;# 
  1862  0619                     	;# 
  1863  061A                     	;# 
  1864  061B                     	;# 
  1865  061C                     	;# 
  1866  061C                     	;# 
  1867  0691                     	;# 
  1868  0692                     	;# 
  1869  0693                     	;# 
  1870  0694                     	;# 
  1871  0695                     	;# 
  1872  0696                     	;# 
  1873  0697                     	;# 
  1874  0698                     	;# 
  1875  0699                     	;# 
  1876  069A                     	;# 
  1877  069B                     	;# 
  1878  069C                     	;# 
  1879  069D                     	;# 
  1880  069E                     	;# 
  1881  069F                     	;# 
  1882  0E0F                     	;# 
  1883  0E10                     	;# 
  1884  0E11                     	;# 
  1885  0E12                     	;# 
  1886  0E13                     	;# 
  1887  0E14                     	;# 
  1888  0E15                     	;# 
  1889  0E17                     	;# 
  1890  0E20                     	;# 
  1891  0E21                     	;# 
  1892  0E22                     	;# 
  1893  0E24                     	;# 
  1894  0E25                     	;# 
  1895  0E28                     	;# 
  1896  0E29                     	;# 
  1897  0E2A                     	;# 
  1898  0E2B                     	;# 
  1899  0E90                     	;# 
  1900  0E91                     	;# 
  1901  0E92                     	;# 
  1902  0E94                     	;# 
  1903  0E95                     	;# 
  1904  0EA0                     	;# 
  1905  0EA1                     	;# 
  1906  0EA2                     	;# 
  1907  0EA3                     	;# 
  1908  0EA4                     	;# 
  1909  0EA5                     	;# 
  1910  0F0F                     	;# 
  1911  0F10                     	;# 
  1912  0F11                     	;# 
  1913  0F12                     	;# 
  1914  0F13                     	;# 
  1915  0F14                     	;# 
  1916  0F15                     	;# 
  1917  0F16                     	;# 
  1918  0F17                     	;# 
  1919  0F18                     	;# 
  1920  0F19                     	;# 
  1921  0F1A                     	;# 
  1922  0F1B                     	;# 
  1923  0F1C                     	;# 
  1924  0F1D                     	;# 
  1925  0F1E                     	;# 
  1926  0F1F                     	;# 
  1927  0F20                     	;# 
  1928  0F21                     	;# 
  1929  0F22                     	;# 
  1930  0F23                     	;# 
  1931  0F24                     	;# 
  1932  0F25                     	;# 
  1933  0F26                     	;# 
  1934  0F27                     	;# 
  1935  0F28                     	;# 
  1936  0F29                     	;# 
  1937  0F2A                     	;# 
  1938  0F2B                     	;# 
  1939  0F2C                     	;# 
  1940  0F2D                     	;# 
  1941  0F9E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000E                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  008C                     	;# 
  1980  008E                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0093                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0098                     	;# 
  1988  0099                     	;# 
  1989  009A                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  009F                     	;# 
  1996  010C                     	;# 
  1997  010E                     	;# 
  1998  0111                     	;# 
  1999  0112                     	;# 
  2000  0113                     	;# 
  2001  0114                     	;# 
  2002  0115                     	;# 
  2003  0116                     	;# 
  2004  0117                     	;# 
  2005  0118                     	;# 
  2006  0119                     	;# 
  2007  011C                     	;# 
  2008  018C                     	;# 
  2009  018E                     	;# 
  2010  0191                     	;# 
  2011  0191                     	;# 
  2012  0192                     	;# 
  2013  0193                     	;# 
  2014  0193                     	;# 
  2015  0194                     	;# 
  2016  0195                     	;# 
  2017  0196                     	;# 
  2018  0197                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  020C                     	;# 
  2045  020E                     	;# 
  2046  0211                     	;# 
  2047  0211                     	;# 
  2048  0212                     	;# 
  2049  0212                     	;# 
  2050  0213                     	;# 
  2051  0213                     	;# 
  2052  0214                     	;# 
  2053  0214                     	;# 
  2054  0215                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0216                     	;# 
  2059  0216                     	;# 
  2060  0217                     	;# 
  2061  0217                     	;# 
  2062  028C                     	;# 
  2063  028E                     	;# 
  2064  0291                     	;# 
  2065  0291                     	;# 
  2066  0292                     	;# 
  2067  0293                     	;# 
  2068  0293                     	;# 
  2069  0298                     	;# 
  2070  0298                     	;# 
  2071  0299                     	;# 
  2072  029A                     	;# 
  2073  029A                     	;# 
  2074  029E                     	;# 
  2075  030C                     	;# 
  2076  030E                     	;# 
  2077  038C                     	;# 
  2078  038E                     	;# 
  2079  0391                     	;# 
  2080  0392                     	;# 
  2081  0393                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  0415                     	;# 
  2086  0416                     	;# 
  2087  0417                     	;# 
  2088  041C                     	;# 
  2089  041D                     	;# 
  2090  041E                     	;# 
  2091  0511                     	;# 
  2092  0515                     	;# 
  2093  0617                     	;# 
  2094  0618                     	;# 
  2095  0619                     	;# 
  2096  0619                     	;# 
  2097  061A                     	;# 
  2098  061B                     	;# 
  2099  061C                     	;# 
  2100  061C                     	;# 
  2101  0691                     	;# 
  2102  0692                     	;# 
  2103  0693                     	;# 
  2104  0694                     	;# 
  2105  0695                     	;# 
  2106  0696                     	;# 
  2107  0697                     	;# 
  2108  0698                     	;# 
  2109  0699                     	;# 
  2110  069A                     	;# 
  2111  069B                     	;# 
  2112  069C                     	;# 
  2113  069D                     	;# 
  2114  069E                     	;# 
  2115  069F                     	;# 
  2116  0E0F                     	;# 
  2117  0E10                     	;# 
  2118  0E11                     	;# 
  2119  0E12                     	;# 
  2120  0E13                     	;# 
  2121  0E14                     	;# 
  2122  0E15                     	;# 
  2123  0E17                     	;# 
  2124  0E20                     	;# 
  2125  0E21                     	;# 
  2126  0E22                     	;# 
  2127  0E24                     	;# 
  2128  0E25                     	;# 
  2129  0E28                     	;# 
  2130  0E29                     	;# 
  2131  0E2A                     	;# 
  2132  0E2B                     	;# 
  2133  0E90                     	;# 
  2134  0E91                     	;# 
  2135  0E92                     	;# 
  2136  0E94                     	;# 
  2137  0E95                     	;# 
  2138  0EA0                     	;# 
  2139  0EA1                     	;# 
  2140  0EA2                     	;# 
  2141  0EA3                     	;# 
  2142  0EA4                     	;# 
  2143  0EA5                     	;# 
  2144  0F0F                     	;# 
  2145  0F10                     	;# 
  2146  0F11                     	;# 
  2147  0F12                     	;# 
  2148  0F13                     	;# 
  2149  0F14                     	;# 
  2150  0F15                     	;# 
  2151  0F16                     	;# 
  2152  0F17                     	;# 
  2153  0F18                     	;# 
  2154  0F19                     	;# 
  2155  0F1A                     	;# 
  2156  0F1B                     	;# 
  2157  0F1C                     	;# 
  2158  0F1D                     	;# 
  2159  0F1E                     	;# 
  2160  0F1F                     	;# 
  2161  0F20                     	;# 
  2162  0F21                     	;# 
  2163  0F22                     	;# 
  2164  0F23                     	;# 
  2165  0F24                     	;# 
  2166  0F25                     	;# 
  2167  0F26                     	;# 
  2168  0F27                     	;# 
  2169  0F28                     	;# 
  2170  0F29                     	;# 
  2171  0F2A                     	;# 
  2172  0F2B                     	;# 
  2173  0F2C                     	;# 
  2174  0F2D                     	;# 
  2175  0F9E                     	;# 
  2176  0FE4                     	;# 
  2177  0FE5                     	;# 
  2178  0FE6                     	;# 
  2179  0FE7                     	;# 
  2180  0FE8                     	;# 
  2181  0FE9                     	;# 
  2182  0FEA                     	;# 
  2183  0FEB                     	;# 
  2184  0FED                     	;# 
  2185  0FEE                     	;# 
  2186  0FEF                     	;# 
  2187  0000                     	;# 
  2188  0001                     	;# 
  2189  0002                     	;# 
  2190  0003                     	;# 
  2191  0004                     	;# 
  2192  0005                     	;# 
  2193  0006                     	;# 
  2194  0007                     	;# 
  2195  0008                     	;# 
  2196  0009                     	;# 
  2197  000A                     	;# 
  2198  000B                     	;# 
  2199  000C                     	;# 
  2200  000E                     	;# 
  2201  0011                     	;# 
  2202  0012                     	;# 
  2203  0013                     	;# 
  2204  0015                     	;# 
  2205  0016                     	;# 
  2206  0016                     	;# 
  2207  0017                     	;# 
  2208  0018                     	;# 
  2209  0019                     	;# 
  2210  001A                     	;# 
  2211  001B                     	;# 
  2212  001C                     	;# 
  2213  008C                     	;# 
  2214  008E                     	;# 
  2215  0091                     	;# 
  2216  0092                     	;# 
  2217  0093                     	;# 
  2218  0095                     	;# 
  2219  0096                     	;# 
  2220  0097                     	;# 
  2221  0098                     	;# 
  2222  0099                     	;# 
  2223  009A                     	;# 
  2224  009B                     	;# 
  2225  009B                     	;# 
  2226  009C                     	;# 
  2227  009D                     	;# 
  2228  009E                     	;# 
  2229  009F                     	;# 
  2230  010C                     	;# 
  2231  010E                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0115                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0118                     	;# 
  2240  0119                     	;# 
  2241  011C                     	;# 
  2242  018C                     	;# 
  2243  018E                     	;# 
  2244  0191                     	;# 
  2245  0191                     	;# 
  2246  0192                     	;# 
  2247  0193                     	;# 
  2248  0193                     	;# 
  2249  0194                     	;# 
  2250  0195                     	;# 
  2251  0196                     	;# 
  2252  0197                     	;# 
  2253  0199                     	;# 
  2254  0199                     	;# 
  2255  0199                     	;# 
  2256  019A                     	;# 
  2257  019A                     	;# 
  2258  019A                     	;# 
  2259  019B                     	;# 
  2260  019B                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019C                     	;# 
  2265  019C                     	;# 
  2266  019C                     	;# 
  2267  019D                     	;# 
  2268  019D                     	;# 
  2269  019D                     	;# 
  2270  019E                     	;# 
  2271  019E                     	;# 
  2272  019E                     	;# 
  2273  019F                     	;# 
  2274  019F                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  020C                     	;# 
  2279  020E                     	;# 
  2280  0211                     	;# 
  2281  0211                     	;# 
  2282  0212                     	;# 
  2283  0212                     	;# 
  2284  0213                     	;# 
  2285  0213                     	;# 
  2286  0214                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  028C                     	;# 
  2297  028E                     	;# 
  2298  0291                     	;# 
  2299  0291                     	;# 
  2300  0292                     	;# 
  2301  0293                     	;# 
  2302  0293                     	;# 
  2303  0298                     	;# 
  2304  0298                     	;# 
  2305  0299                     	;# 
  2306  029A                     	;# 
  2307  029A                     	;# 
  2308  029E                     	;# 
  2309  030C                     	;# 
  2310  030E                     	;# 
  2311  038C                     	;# 
  2312  038E                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  0393                     	;# 
  2316  0397                     	;# 
  2317  0398                     	;# 
  2318  0399                     	;# 
  2319  0415                     	;# 
  2320  0416                     	;# 
  2321  0417                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  0511                     	;# 
  2326  0515                     	;# 
  2327  0617                     	;# 
  2328  0618                     	;# 
  2329  0619                     	;# 
  2330  0619                     	;# 
  2331  061A                     	;# 
  2332  061B                     	;# 
  2333  061C                     	;# 
  2334  061C                     	;# 
  2335  0691                     	;# 
  2336  0692                     	;# 
  2337  0693                     	;# 
  2338  0694                     	;# 
  2339  0695                     	;# 
  2340  0696                     	;# 
  2341  0697                     	;# 
  2342  0698                     	;# 
  2343  0699                     	;# 
  2344  069A                     	;# 
  2345  069B                     	;# 
  2346  069C                     	;# 
  2347  069D                     	;# 
  2348  069E                     	;# 
  2349  069F                     	;# 
  2350  0E0F                     	;# 
  2351  0E10                     	;# 
  2352  0E11                     	;# 
  2353  0E12                     	;# 
  2354  0E13                     	;# 
  2355  0E14                     	;# 
  2356  0E15                     	;# 
  2357  0E17                     	;# 
  2358  0E20                     	;# 
  2359  0E21                     	;# 
  2360  0E22                     	;# 
  2361  0E24                     	;# 
  2362  0E25                     	;# 
  2363  0E28                     	;# 
  2364  0E29                     	;# 
  2365  0E2A                     	;# 
  2366  0E2B                     	;# 
  2367  0E90                     	;# 
  2368  0E91                     	;# 
  2369  0E92                     	;# 
  2370  0E94                     	;# 
  2371  0E95                     	;# 
  2372  0EA0                     	;# 
  2373  0EA1                     	;# 
  2374  0EA2                     	;# 
  2375  0EA3                     	;# 
  2376  0EA4                     	;# 
  2377  0EA5                     	;# 
  2378  0F0F                     	;# 
  2379  0F10                     	;# 
  2380  0F11                     	;# 
  2381  0F12                     	;# 
  2382  0F13                     	;# 
  2383  0F14                     	;# 
  2384  0F15                     	;# 
  2385  0F16                     	;# 
  2386  0F17                     	;# 
  2387  0F18                     	;# 
  2388  0F19                     	;# 
  2389  0F1A                     	;# 
  2390  0F1B                     	;# 
  2391  0F1C                     	;# 
  2392  0F1D                     	;# 
  2393  0F1E                     	;# 
  2394  0F1F                     	;# 
  2395  0F20                     	;# 
  2396  0F21                     	;# 
  2397  0F22                     	;# 
  2398  0F23                     	;# 
  2399  0F24                     	;# 
  2400  0F25                     	;# 
  2401  0F26                     	;# 
  2402  0F27                     	;# 
  2403  0F28                     	;# 
  2404  0F29                     	;# 
  2405  0F2A                     	;# 
  2406  0F2B                     	;# 
  2407  0F2C                     	;# 
  2408  0F2D                     	;# 
  2409  0F9E                     	;# 
  2410  0FE4                     	;# 
  2411  0FE5                     	;# 
  2412  0FE6                     	;# 
  2413  0FE7                     	;# 
  2414  0FE8                     	;# 
  2415  0FE9                     	;# 
  2416  0FEA                     	;# 
  2417  0FEB                     	;# 
  2418  0FED                     	;# 
  2419  0FEE                     	;# 
  2420  0FEF                     	;# 
  2421  0000                     	;# 
  2422  0001                     	;# 
  2423  0002                     	;# 
  2424  0003                     	;# 
  2425  0004                     	;# 
  2426  0005                     	;# 
  2427  0006                     	;# 
  2428  0007                     	;# 
  2429  0008                     	;# 
  2430  0009                     	;# 
  2431  000A                     	;# 
  2432  000B                     	;# 
  2433  000C                     	;# 
  2434  000E                     	;# 
  2435  0011                     	;# 
  2436  0012                     	;# 
  2437  0013                     	;# 
  2438  0015                     	;# 
  2439  0016                     	;# 
  2440  0016                     	;# 
  2441  0017                     	;# 
  2442  0018                     	;# 
  2443  0019                     	;# 
  2444  001A                     	;# 
  2445  001B                     	;# 
  2446  001C                     	;# 
  2447  008C                     	;# 
  2448  008E                     	;# 
  2449  0091                     	;# 
  2450  0092                     	;# 
  2451  0093                     	;# 
  2452  0095                     	;# 
  2453  0096                     	;# 
  2454  0097                     	;# 
  2455  0098                     	;# 
  2456  0099                     	;# 
  2457  009A                     	;# 
  2458  009B                     	;# 
  2459  009B                     	;# 
  2460  009C                     	;# 
  2461  009D                     	;# 
  2462  009E                     	;# 
  2463  009F                     	;# 
  2464  010C                     	;# 
  2465  010E                     	;# 
  2466  0111                     	;# 
  2467  0112                     	;# 
  2468  0113                     	;# 
  2469  0114                     	;# 
  2470  0115                     	;# 
  2471  0116                     	;# 
  2472  0117                     	;# 
  2473  0118                     	;# 
  2474  0119                     	;# 
  2475  011C                     	;# 
  2476  018C                     	;# 
  2477  018E                     	;# 
  2478  0191                     	;# 
  2479  0191                     	;# 
  2480  0192                     	;# 
  2481  0193                     	;# 
  2482  0193                     	;# 
  2483  0194                     	;# 
  2484  0195                     	;# 
  2485  0196                     	;# 
  2486  0197                     	;# 
  2487  0199                     	;# 
  2488  0199                     	;# 
  2489  0199                     	;# 
  2490  019A                     	;# 
  2491  019A                     	;# 
  2492  019A                     	;# 
  2493  019B                     	;# 
  2494  019B                     	;# 
  2495  019B                     	;# 
  2496  019B                     	;# 
  2497  019B                     	;# 
  2498  019C                     	;# 
  2499  019C                     	;# 
  2500  019C                     	;# 
  2501  019D                     	;# 
  2502  019D                     	;# 
  2503  019D                     	;# 
  2504  019E                     	;# 
  2505  019E                     	;# 
  2506  019E                     	;# 
  2507  019F                     	;# 
  2508  019F                     	;# 
  2509  019F                     	;# 
  2510  019F                     	;# 
  2511  019F                     	;# 
  2512  020C                     	;# 
  2513  020E                     	;# 
  2514  0211                     	;# 
  2515  0211                     	;# 
  2516  0212                     	;# 
  2517  0212                     	;# 
  2518  0213                     	;# 
  2519  0213                     	;# 
  2520  0214                     	;# 
  2521  0214                     	;# 
  2522  0215                     	;# 
  2523  0215                     	;# 
  2524  0215                     	;# 
  2525  0215                     	;# 
  2526  0216                     	;# 
  2527  0216                     	;# 
  2528  0217                     	;# 
  2529  0217                     	;# 
  2530  028C                     	;# 
  2531  028E                     	;# 
  2532  0291                     	;# 
  2533  0291                     	;# 
  2534  0292                     	;# 
  2535  0293                     	;# 
  2536  0293                     	;# 
  2537  0298                     	;# 
  2538  0298                     	;# 
  2539  0299                     	;# 
  2540  029A                     	;# 
  2541  029A                     	;# 
  2542  029E                     	;# 
  2543  030C                     	;# 
  2544  030E                     	;# 
  2545  038C                     	;# 
  2546  038E                     	;# 
  2547  0391                     	;# 
  2548  0392                     	;# 
  2549  0393                     	;# 
  2550  0397                     	;# 
  2551  0398                     	;# 
  2552  0399                     	;# 
  2553  0415                     	;# 
  2554  0416                     	;# 
  2555  0417                     	;# 
  2556  041C                     	;# 
  2557  041D                     	;# 
  2558  041E                     	;# 
  2559  0511                     	;# 
  2560  0515                     	;# 
  2561  0617                     	;# 
  2562  0618                     	;# 
  2563  0619                     	;# 
  2564  0619                     	;# 
  2565  061A                     	;# 
  2566  061B                     	;# 
  2567  061C                     	;# 
  2568  061C                     	;# 
  2569  0691                     	;# 
  2570  0692                     	;# 
  2571  0693                     	;# 
  2572  0694                     	;# 
  2573  0695                     	;# 
  2574  0696                     	;# 
  2575  0697                     	;# 
  2576  0698                     	;# 
  2577  0699                     	;# 
  2578  069A                     	;# 
  2579  069B                     	;# 
  2580  069C                     	;# 
  2581  069D                     	;# 
  2582  069E                     	;# 
  2583  069F                     	;# 
  2584  0E0F                     	;# 
  2585  0E10                     	;# 
  2586  0E11                     	;# 
  2587  0E12                     	;# 
  2588  0E13                     	;# 
  2589  0E14                     	;# 
  2590  0E15                     	;# 
  2591  0E17                     	;# 
  2592  0E20                     	;# 
  2593  0E21                     	;# 
  2594  0E22                     	;# 
  2595  0E24                     	;# 
  2596  0E25                     	;# 
  2597  0E28                     	;# 
  2598  0E29                     	;# 
  2599  0E2A                     	;# 
  2600  0E2B                     	;# 
  2601  0E90                     	;# 
  2602  0E91                     	;# 
  2603  0E92                     	;# 
  2604  0E94                     	;# 
  2605  0E95                     	;# 
  2606  0EA0                     	;# 
  2607  0EA1                     	;# 
  2608  0EA2                     	;# 
  2609  0EA3                     	;# 
  2610  0EA4                     	;# 
  2611  0EA5                     	;# 
  2612  0F0F                     	;# 
  2613  0F10                     	;# 
  2614  0F11                     	;# 
  2615  0F12                     	;# 
  2616  0F13                     	;# 
  2617  0F14                     	;# 
  2618  0F15                     	;# 
  2619  0F16                     	;# 
  2620  0F17                     	;# 
  2621  0F18                     	;# 
  2622  0F19                     	;# 
  2623  0F1A                     	;# 
  2624  0F1B                     	;# 
  2625  0F1C                     	;# 
  2626  0F1D                     	;# 
  2627  0F1E                     	;# 
  2628  0F1F                     	;# 
  2629  0F20                     	;# 
  2630  0F21                     	;# 
  2631  0F22                     	;# 
  2632  0F23                     	;# 
  2633  0F24                     	;# 
  2634  0F25                     	;# 
  2635  0F26                     	;# 
  2636  0F27                     	;# 
  2637  0F28                     	;# 
  2638  0F29                     	;# 
  2639  0F2A                     	;# 
  2640  0F2B                     	;# 
  2641  0F2C                     	;# 
  2642  0F2D                     	;# 
  2643  0F9E                     	;# 
  2644  0FE4                     	;# 
  2645  0FE5                     	;# 
  2646  0FE6                     	;# 
  2647  0FE7                     	;# 
  2648  0FE8                     	;# 
  2649  0FE9                     	;# 
  2650  0FEA                     	;# 
  2651  0FEB                     	;# 
  2652  0FED                     	;# 
  2653  0FEE                     	;# 
  2654  0FEF                     	;# 
  2655                           
  2656                           	psect	idataBANK2
  2657  07FD                     __pidataBANK2:	
  2658                           
  2659                           ;initializer for _Read_Timer
  2660  07FD  3414               	retlw	20
  2661  07FE  3400               	retlw	0
  2662                           
  2663                           	psect	idataBANK4
  2664  1A25                     __pidataBANK4:	
  2665                           
  2666                           ;initializer for _BAUD
  2667  1A25  3480               	retlw	128
  2668  1A26  3425               	retlw	37
  2669  1A27  3400               	retlw	0
  2670  1A28  3400               	retlw	0
  2671                           
  2672                           ;initializer for _MEM
  2673  1A29  3400               	retlw	0
  2674  1A2A  3400               	retlw	0
  2675  1A2B  3480               	retlw	128
  2676  1A2C  3425               	retlw	37
  2677                           
  2678                           ;initializer for _Version
  2679  1A2D  3431               	retlw	49
  2680  1A2E  342E               	retlw	46
  2681  1A2F  3432               	retlw	50
  2682  1A30  3400               	retlw	0
  2683                           
  2684                           	psect	stringtext
  2685  0800                     __pstringtext:	
  2686  0800                     _ScanCodeFunctionNoE0:	
  2687  0800  3400               	retlw	0
  2688  0801  3411               	retlw	17
  2689  0802  3400               	retlw	0
  2690  0803  340C               	retlw	12
  2691  0804  340A               	retlw	10
  2692  0805  3406               	retlw	6
  2693  0806  3407               	retlw	7
  2694  0807  3414               	retlw	20
  2695  0808  3400               	retlw	0
  2696  0809  3412               	retlw	18
  2697  080A  3410               	retlw	16
  2698  080B  340E               	retlw	14
  2699  080C  340B               	retlw	11
  2700  080D  3400               	retlw	0
  2701  080E  3400               	retlw	0
  2702  080F  3400               	retlw	0
  2703  0810  3400               	retlw	0
  2704  0811  341C               	retlw	28
  2705  0812  3400               	retlw	0
  2706  0813  3400               	retlw	0
  2707  0814  341A               	retlw	26
  2708  0815  3400               	retlw	0
  2709  0816  3400               	retlw	0
  2710  0817  3400               	retlw	0
  2711  0818  3400               	retlw	0
  2712  0819  3400               	retlw	0
  2713  081A  3400               	retlw	0
  2714  081B  3400               	retlw	0
  2715  081C  3400               	retlw	0
  2716  081D  3400               	retlw	0
  2717  081E  3400               	retlw	0
  2718  081F  3400               	retlw	0
  2719  0820  3400               	retlw	0
  2720  0821  3400               	retlw	0
  2721  0822  3400               	retlw	0
  2722  0823  3400               	retlw	0
  2723  0824  3400               	retlw	0
  2724  0825  3400               	retlw	0
  2725  0826  3400               	retlw	0
  2726  0827  3400               	retlw	0
  2727  0828  3400               	retlw	0
  2728  0829  3400               	retlw	0
  2729  082A  3400               	retlw	0
  2730  082B  3400               	retlw	0
  2731  082C  3400               	retlw	0
  2732  082D  3400               	retlw	0
  2733  082E  3400               	retlw	0
  2734  082F  3400               	retlw	0
  2735  0830  3400               	retlw	0
  2736  0831  3400               	retlw	0
  2737  0832  3400               	retlw	0
  2738  0833  3400               	retlw	0
  2739  0834  3400               	retlw	0
  2740  0835  3400               	retlw	0
  2741  0836  3400               	retlw	0
  2742  0837  3400               	retlw	0
  2743  0838  3400               	retlw	0
  2744  0839  3400               	retlw	0
  2745  083A  3400               	retlw	0
  2746  083B  3400               	retlw	0
  2747  083C  3400               	retlw	0
  2748  083D  3400               	retlw	0
  2749  083E  3400               	retlw	0
  2750  083F  3400               	retlw	0
  2751  0840  3400               	retlw	0
  2752  0841  3400               	retlw	0
  2753  0842  3400               	retlw	0
  2754  0843  3400               	retlw	0
  2755  0844  3400               	retlw	0
  2756  0845  3400               	retlw	0
  2757  0846  3400               	retlw	0
  2758  0847  3400               	retlw	0
  2759  0848  3400               	retlw	0
  2760  0849  3400               	retlw	0
  2761  084A  3400               	retlw	0
  2762  084B  3400               	retlw	0
  2763  084C  3400               	retlw	0
  2764  084D  3400               	retlw	0
  2765  084E  3400               	retlw	0
  2766  084F  3400               	retlw	0
  2767  0850  3400               	retlw	0
  2768  0851  3400               	retlw	0
  2769  0852  3400               	retlw	0
  2770  0853  3400               	retlw	0
  2771  0854  3400               	retlw	0
  2772  0855  3400               	retlw	0
  2773  0856  3400               	retlw	0
  2774  0857  3400               	retlw	0
  2775  0858  3400               	retlw	0
  2776  0859  3400               	retlw	0
  2777  085A  3400               	retlw	0
  2778  085B  3400               	retlw	0
  2779  085C  3400               	retlw	0
  2780  085D  3400               	retlw	0
  2781  085E  3400               	retlw	0
  2782  085F  3400               	retlw	0
  2783  0860  3400               	retlw	0
  2784  0861  3400               	retlw	0
  2785  0862  3400               	retlw	0
  2786  0863  3400               	retlw	0
  2787  0864  3400               	retlw	0
  2788  0865  3400               	retlw	0
  2789  0866  3400               	retlw	0
  2790  0867  3400               	retlw	0
  2791  0868  3400               	retlw	0
  2792  0869  3400               	retlw	0
  2793  086A  3400               	retlw	0
  2794  086B  3400               	retlw	0
  2795  086C  3400               	retlw	0
  2796  086D  3400               	retlw	0
  2797  086E  3400               	retlw	0
  2798  086F  3400               	retlw	0
  2799  0870  3400               	retlw	0
  2800  0871  3400               	retlw	0
  2801  0872  3400               	retlw	0
  2802  0873  3400               	retlw	0
  2803  0874  3400               	retlw	0
  2804  0875  3400               	retlw	0
  2805  0876  3400               	retlw	0
  2806  0877  3400               	retlw	0
  2807  0878  3413               	retlw	19
  2808  0879  3400               	retlw	0
  2809  087A  3400               	retlw	0
  2810  087B  3400               	retlw	0
  2811  087C  3400               	retlw	0
  2812  087D  3400               	retlw	0
  2813  087E  3400               	retlw	0
  2814  087F  3400               	retlw	0
  2815  0880  3400               	retlw	0
  2816  0881  3400               	retlw	0
  2817  0882  3400               	retlw	0
  2818  0883  340F               	retlw	15
  2819  0884                     __end_of_ScanCodeFunctionNoE0:	
  2820  0884                     _ScanCode:	
  2821  0884  3409               	retlw	9
  2822  0885  3460               	retlw	96
  2823  0886  3400               	retlw	0
  2824  0887  3400               	retlw	0
  2825  0888  3400               	retlw	0
  2826  0889  3400               	retlw	0
  2827  088A  3400               	retlw	0
  2828  088B  3400               	retlw	0
  2829  088C  3471               	retlw	113
  2830  088D  3431               	retlw	49
  2831  088E  3400               	retlw	0
  2832  088F  3400               	retlw	0
  2833  0890  3400               	retlw	0
  2834  0891  347A               	retlw	122
  2835  0892  3473               	retlw	115
  2836  0893  3461               	retlw	97
  2837  0894  3477               	retlw	119
  2838  0895  3432               	retlw	50
  2839  0896  3400               	retlw	0
  2840  0897  3400               	retlw	0
  2841  0898  3463               	retlw	99
  2842  0899  3478               	retlw	120
  2843  089A  3464               	retlw	100
  2844  089B  3465               	retlw	101
  2845  089C  3434               	retlw	52
  2846  089D  3433               	retlw	51
  2847  089E  3400               	retlw	0
  2848  089F  3400               	retlw	0
  2849  08A0  3420               	retlw	32
  2850  08A1  3476               	retlw	118
  2851  08A2  3466               	retlw	102
  2852  08A3  3474               	retlw	116
  2853  08A4  3472               	retlw	114
  2854  08A5  3435               	retlw	53
  2855  08A6  3400               	retlw	0
  2856  08A7  3400               	retlw	0
  2857  08A8  346E               	retlw	110
  2858  08A9  3462               	retlw	98
  2859  08AA  3468               	retlw	104
  2860  08AB  3467               	retlw	103
  2861  08AC  3479               	retlw	121
  2862  08AD  3436               	retlw	54
  2863  08AE  3400               	retlw	0
  2864  08AF  3400               	retlw	0
  2865  08B0  3400               	retlw	0
  2866  08B1  346D               	retlw	109
  2867  08B2  346A               	retlw	106
  2868  08B3  3475               	retlw	117
  2869  08B4  3437               	retlw	55
  2870  08B5  3438               	retlw	56
  2871  08B6  3400               	retlw	0
  2872  08B7  3400               	retlw	0
  2873  08B8  342C               	retlw	44
  2874  08B9  346B               	retlw	107
  2875  08BA  3469               	retlw	105
  2876  08BB  346F               	retlw	111
  2877  08BC  3430               	retlw	48
  2878  08BD  3439               	retlw	57
  2879  08BE  3400               	retlw	0
  2880  08BF  3400               	retlw	0
  2881  08C0  342E               	retlw	46
  2882  08C1  342F               	retlw	47
  2883  08C2  346C               	retlw	108
  2884  08C3  343B               	retlw	59
  2885  08C4  3470               	retlw	112
  2886  08C5  342D               	retlw	45
  2887  08C6  3400               	retlw	0
  2888  08C7  3400               	retlw	0
  2889  08C8  3400               	retlw	0
  2890  08C9  3427               	retlw	39
  2891  08CA  3400               	retlw	0
  2892  08CB  345B               	retlw	91
  2893  08CC  343D               	retlw	61
  2894  08CD  3400               	retlw	0
  2895  08CE  3400               	retlw	0
  2896  08CF  3400               	retlw	0
  2897  08D0  3400               	retlw	0
  2898  08D1  340D               	retlw	13
  2899  08D2  345D               	retlw	93
  2900  08D3  3400               	retlw	0
  2901  08D4  345C               	retlw	92
  2902  08D5  3400               	retlw	0
  2903  08D6  3400               	retlw	0
  2904  08D7  3400               	retlw	0
  2905  08D8  3400               	retlw	0
  2906  08D9  3400               	retlw	0
  2907  08DA  3400               	retlw	0
  2908  08DB  3400               	retlw	0
  2909  08DC  3400               	retlw	0
  2910  08DD  3408               	retlw	8
  2911  08DE  3400               	retlw	0
  2912  08DF  3400               	retlw	0
  2913  08E0  3431               	retlw	49
  2914  08E1  3400               	retlw	0
  2915  08E2  3434               	retlw	52
  2916  08E3  3437               	retlw	55
  2917  08E4  3400               	retlw	0
  2918  08E5  3400               	retlw	0
  2919  08E6  3400               	retlw	0
  2920  08E7  3430               	retlw	48
  2921  08E8  342E               	retlw	46
  2922  08E9  3432               	retlw	50
  2923  08EA  3435               	retlw	53
  2924  08EB  3436               	retlw	54
  2925  08EC  3438               	retlw	56
  2926  08ED  341B               	retlw	27
  2927  08EE  3400               	retlw	0
  2928  08EF  3400               	retlw	0
  2929  08F0  342B               	retlw	43
  2930  08F1  3433               	retlw	51
  2931  08F2  342D               	retlw	45
  2932  08F3  342A               	retlw	42
  2933  08F4  3439               	retlw	57
  2934  08F5                     __end_of_ScanCode:	
  2935  08F5                     _ScanCodeSHIFT:	
  2936  08F5  3409               	retlw	9
  2937  08F6  347E               	retlw	126
  2938  08F7  3400               	retlw	0
  2939  08F8  3400               	retlw	0
  2940  08F9  3400               	retlw	0
  2941  08FA  3400               	retlw	0
  2942  08FB  3400               	retlw	0
  2943  08FC  3400               	retlw	0
  2944  08FD  3451               	retlw	81
  2945  08FE  3421               	retlw	33
  2946  08FF  3400               	retlw	0
  2947  0900  3400               	retlw	0
  2948  0901  3400               	retlw	0
  2949  0902  345A               	retlw	90
  2950  0903  3453               	retlw	83
  2951  0904  3441               	retlw	65
  2952  0905  3457               	retlw	87
  2953  0906  3440               	retlw	64
  2954  0907  3400               	retlw	0
  2955  0908  3400               	retlw	0
  2956  0909  3443               	retlw	67
  2957  090A  3458               	retlw	88
  2958  090B  3444               	retlw	68
  2959  090C  3445               	retlw	69
  2960  090D  3424               	retlw	36
  2961  090E  3423               	retlw	35
  2962  090F  3400               	retlw	0
  2963  0910  3400               	retlw	0
  2964  0911  3420               	retlw	32
  2965  0912  3456               	retlw	86
  2966  0913  3446               	retlw	70
  2967  0914  3454               	retlw	84
  2968  0915  3452               	retlw	82
  2969  0916  3425               	retlw	37
  2970  0917  3400               	retlw	0
  2971  0918  3400               	retlw	0
  2972  0919  344E               	retlw	78
  2973  091A  3442               	retlw	66
  2974  091B  3448               	retlw	72
  2975  091C  3447               	retlw	71
  2976  091D  3459               	retlw	89
  2977  091E  345E               	retlw	94
  2978  091F  3400               	retlw	0
  2979  0920  3400               	retlw	0
  2980  0921  3400               	retlw	0
  2981  0922  344D               	retlw	77
  2982  0923  344A               	retlw	74
  2983  0924  3455               	retlw	85
  2984  0925  3426               	retlw	38
  2985  0926  342A               	retlw	42
  2986  0927  3400               	retlw	0
  2987  0928  3400               	retlw	0
  2988  0929  343C               	retlw	60
  2989  092A  344B               	retlw	75
  2990  092B  3449               	retlw	73
  2991  092C  344F               	retlw	79
  2992  092D  3429               	retlw	41
  2993  092E  3428               	retlw	40
  2994  092F  3400               	retlw	0
  2995  0930  3400               	retlw	0
  2996  0931  343E               	retlw	62
  2997  0932  343F               	retlw	63
  2998  0933  344C               	retlw	76
  2999  0934  343A               	retlw	58
  3000  0935  3450               	retlw	80
  3001  0936  345F               	retlw	95
  3002  0937  3400               	retlw	0
  3003  0938  3400               	retlw	0
  3004  0939  3400               	retlw	0
  3005  093A  3422               	retlw	34
  3006  093B  3400               	retlw	0
  3007  093C  347B               	retlw	123
  3008  093D  342B               	retlw	43
  3009  093E  3400               	retlw	0
  3010  093F  3400               	retlw	0
  3011  0940  3400               	retlw	0
  3012  0941  3400               	retlw	0
  3013  0942  340D               	retlw	13
  3014  0943  347D               	retlw	125
  3015  0944  3400               	retlw	0
  3016  0945  347C               	retlw	124
  3017  0946  3400               	retlw	0
  3018  0947  3400               	retlw	0
  3019  0948  3400               	retlw	0
  3020  0949  3400               	retlw	0
  3021  094A  3400               	retlw	0
  3022  094B  3400               	retlw	0
  3023  094C  3400               	retlw	0
  3024  094D  3400               	retlw	0
  3025  094E  3408               	retlw	8
  3026  094F  3400               	retlw	0
  3027  0950  3400               	retlw	0
  3028  0951  3431               	retlw	49
  3029  0952  3400               	retlw	0
  3030  0953  3434               	retlw	52
  3031  0954  3437               	retlw	55
  3032  0955  3400               	retlw	0
  3033  0956  3400               	retlw	0
  3034  0957  3400               	retlw	0
  3035  0958  3430               	retlw	48
  3036  0959  342E               	retlw	46
  3037  095A  3432               	retlw	50
  3038  095B  3435               	retlw	53
  3039  095C  3436               	retlw	54
  3040  095D  3438               	retlw	56
  3041  095E  341B               	retlw	27
  3042  095F  3400               	retlw	0
  3043  0960  3400               	retlw	0
  3044  0961  342B               	retlw	43
  3045  0962  3433               	retlw	51
  3046  0963  342D               	retlw	45
  3047  0964  342A               	retlw	42
  3048  0965  3439               	retlw	57
  3049  0966                     __end_of_ScanCodeSHIFT:	
  3050  0966                     _ScanCodeFunctionE0:	
  3051  0966  341E               	retlw	30
  3052  0967  3400               	retlw	0
  3053  0968  3400               	retlw	0
  3054  0969  341F               	retlw	31
  3055  096A  3400               	retlw	0
  3056  096B  3400               	retlw	0
  3057  096C  3400               	retlw	0
  3058  096D  3400               	retlw	0
  3059  096E  3400               	retlw	0
  3060  096F  3400               	retlw	0
  3061  0970  3400               	retlw	0
  3062  0971  3400               	retlw	0
  3063  0972  3400               	retlw	0
  3064  0973  3400               	retlw	0
  3065  0974  3419               	retlw	25
  3066  0975  3400               	retlw	0
  3067  0976  3400               	retlw	0
  3068  0977  3400               	retlw	0
  3069  0978  3400               	retlw	0
  3070  0979  3400               	retlw	0
  3071  097A  3400               	retlw	0
  3072  097B  3400               	retlw	0
  3073  097C  341D               	retlw	29
  3074  097D  3400               	retlw	0
  3075  097E  3400               	retlw	0
  3076  097F  3400               	retlw	0
  3077  0980  3400               	retlw	0
  3078  0981  3400               	retlw	0
  3079  0982  3400               	retlw	0
  3080  0983  3400               	retlw	0
  3081  0984  3400               	retlw	0
  3082  0985  3400               	retlw	0
  3083  0986  3400               	retlw	0
  3084  0987  3400               	retlw	0
  3085  0988  3400               	retlw	0
  3086  0989  3400               	retlw	0
  3087  098A  3400               	retlw	0
  3088  098B  3400               	retlw	0
  3089  098C  3400               	retlw	0
  3090  098D  3400               	retlw	0
  3091  098E  3400               	retlw	0
  3092  098F  3400               	retlw	0
  3093  0990  3400               	retlw	0
  3094  0991  3400               	retlw	0
  3095  0992  3400               	retlw	0
  3096  0993  3400               	retlw	0
  3097  0994  3400               	retlw	0
  3098  0995  3400               	retlw	0
  3099  0996  3400               	retlw	0
  3100  0997  3400               	retlw	0
  3101  0998  3400               	retlw	0
  3102  0999  3400               	retlw	0
  3103  099A  3400               	retlw	0
  3104  099B  3400               	retlw	0
  3105  099C  3400               	retlw	0
  3106  099D  3400               	retlw	0
  3107  099E  3400               	retlw	0
  3108  099F  342F               	retlw	47
  3109  09A0  3400               	retlw	0
  3110  09A1  3400               	retlw	0
  3111  09A2  3400               	retlw	0
  3112  09A3  3400               	retlw	0
  3113  09A4  3400               	retlw	0
  3114  09A5  3400               	retlw	0
  3115  09A6  3400               	retlw	0
  3116  09A7  3400               	retlw	0
  3117  09A8  3400               	retlw	0
  3118  09A9  3400               	retlw	0
  3119  09AA  3400               	retlw	0
  3120  09AB  3400               	retlw	0
  3121  09AC  3400               	retlw	0
  3122  09AD  3400               	retlw	0
  3123  09AE  3400               	retlw	0
  3124  09AF  340D               	retlw	13
  3125  09B0  3400               	retlw	0
  3126  09B1  3400               	retlw	0
  3127  09B2  3400               	retlw	0
  3128  09B3  3400               	retlw	0
  3129  09B4  3400               	retlw	0
  3130  09B5  3400               	retlw	0
  3131  09B6  3400               	retlw	0
  3132  09B7  3400               	retlw	0
  3133  09B8  3400               	retlw	0
  3134  09B9  3400               	retlw	0
  3135  09BA  3400               	retlw	0
  3136  09BB  3400               	retlw	0
  3137  09BC  3400               	retlw	0
  3138  09BD  3400               	retlw	0
  3139  09BE  3401               	retlw	1
  3140  09BF  3400               	retlw	0
  3141  09C0  3403               	retlw	3
  3142  09C1  3416               	retlw	22
  3143  09C2  3400               	retlw	0
  3144  09C3  3400               	retlw	0
  3145  09C4  3400               	retlw	0
  3146  09C5  3415               	retlw	21
  3147  09C6  347F               	retlw	127
  3148  09C7  3404               	retlw	4
  3149  09C8  3400               	retlw	0
  3150  09C9  3405               	retlw	5
  3151  09CA  3402               	retlw	2
  3152  09CB  3400               	retlw	0
  3153  09CC  3400               	retlw	0
  3154  09CD  3400               	retlw	0
  3155  09CE  3400               	retlw	0
  3156  09CF  3418               	retlw	24
  3157  09D0  3400               	retlw	0
  3158  09D1  3400               	retlw	0
  3159  09D2  3417               	retlw	23
  3160  09D3                     __end_of_ScanCodeFunctionE0:	
  3161  09D3                     _dpowers:	
  3162  09D3  3401               	retlw	1
  3163  09D4  3400               	retlw	0
  3164  09D5  3400               	retlw	0
  3165  09D6  3400               	retlw	0
  3166  09D7  340A               	retlw	10
  3167  09D8  3400               	retlw	0
  3168  09D9  3400               	retlw	0
  3169  09DA  3400               	retlw	0
  3170  09DB  3464               	retlw	100
  3171  09DC  3400               	retlw	0
  3172  09DD  3400               	retlw	0
  3173  09DE  3400               	retlw	0
  3174  09DF  34E8               	retlw	232
  3175  09E0  3403               	retlw	3
  3176  09E1  3400               	retlw	0
  3177  09E2  3400               	retlw	0
  3178  09E3  3410               	retlw	16
  3179  09E4  3427               	retlw	39
  3180  09E5  3400               	retlw	0
  3181  09E6  3400               	retlw	0
  3182  09E7  34A0               	retlw	160
  3183  09E8  3486               	retlw	134
  3184  09E9  3401               	retlw	1
  3185  09EA  3400               	retlw	0
  3186  09EB  3440               	retlw	64
  3187  09EC  3442               	retlw	66
  3188  09ED  340F               	retlw	15
  3189  09EE  3400               	retlw	0
  3190  09EF  3480               	retlw	128
  3191  09F0  3496               	retlw	150
  3192  09F1  3498               	retlw	152
  3193  09F2  3400               	retlw	0
  3194  09F3  3400               	retlw	0
  3195  09F4  34E1               	retlw	225
  3196  09F5  34F5               	retlw	245
  3197  09F6  3405               	retlw	5
  3198  09F7  3400               	retlw	0
  3199  09F8  34CA               	retlw	202
  3200  09F9  349A               	retlw	154
  3201  09FA  343B               	retlw	59
  3202  09FB                     __end_of_dpowers:	
  3203  000B                     _INTCON	set	11
  3204  000B                     _INTCONbits	set	11
  3205  0011                     _PIR1bits	set	17
  3206  000C                     _PORTA	set	12
  3207  001B                     _PR2	set	27
  3208  001C                     _T2CON	set	28
  3209  001C                     _T2CONbits	set	28
  3210  009D                     _ADCON0	set	157
  3211  009E                     _ADCON1	set	158
  3212  009C                     _ADRESH	set	156
  3213  009B                     _ADRESL	set	155
  3214  0095                     _OPTION_REGbits	set	149
  3215  0099                     _OSCCON	set	153
  3216  009A                     _OSCSTAT	set	154
  3217  0091                     _PIE1	set	145
  3218  0091                     _PIE1bits	set	145
  3219  008C                     _TRISAbits	set	140
  3220  008E                     _TRISCbits	set	142
  3221  04D0                     _HFIOFS	set	1232
  3222  0117                     _FVRCON	set	279
  3223  010C                     _LATA	set	268
  3224  010E                     _LATC	set	270
  3225  018C                     _ANSELA	set	396
  3226  018E                     _ANSELC	set	398
  3227  019F                     _BAUD1CON	set	415
  3228  0192                     _PMADRH	set	402
  3229  0191                     _PMADRL	set	401
  3230  0195                     _PMCON1	set	405
  3231  0196                     _PMCON2	set	406
  3232  0194                     _PMDATH	set	404
  3233  0193                     _PMDATL	set	403
  3234  019D                     _RC1STA	set	413
  3235  019D                     _RC1STAbits	set	413
  3236  0199                     _RCREG	set	409
  3237  019D                     _RCSTA	set	413
  3238  019D                     _RCSTAbits	set	413
  3239  019B                     _SPBRG	set	411
  3240  019C                     _SPBRGH	set	412
  3241  019E                     _TX1STA	set	414
  3242  019E                     _TX1STAbits	set	414
  3243  019A                     _TXREG	set	410
  3244  019E                     _TXSTAbits	set	414
  3245  020C                     _WPUA	set	524
  3246  020E                     _WPUC	set	526
  3247  029A                     _CCP2CONbits	set	666
  3248  0393                     _IOCAF	set	915
  3249  0392                     _IOCAN	set	914
  3250  0391                     _IOCAP	set	913
  3251  0E25                     _CKPPS	set	3621
  3252  0E0F                     _PPSLOCK	set	3599
  3253  0E24                     _RXPPS	set	3620
  3254  0EA2                     _RC2PPS	set	3746
  3255  09FB                     __stringdata:	
  3256  09FB                     STR_29:	
  3257  09FB  344B               	retlw	75	;'K'
  3258  09FC  3465               	retlw	101	;'e'
  3259  09FD  3479               	retlw	121	;'y'
  3260  09FE  3442               	retlw	66	;'B'
  3261  09FF  346F               	retlw	111	;'o'
  3262  0A00  3461               	retlw	97	;'a'
  3263  0A01  3472               	retlw	114	;'r'
  3264  0A02  3464               	retlw	100	;'d'
  3265  0A03  3420               	retlw	32	;' '
  3266  0A04  3452               	retlw	82	;'R'
  3267  0A05  3465               	retlw	101	;'e'
  3268  0A06  3473               	retlw	115	;'s'
  3269  0A07  3465               	retlw	101	;'e'
  3270  0A08  3474               	retlw	116	;'t'
  3271  0A09  3420               	retlw	32	;' '
  3272  0A0A  3474               	retlw	116	;'t'
  3273  0A0B  346F               	retlw	111	;'o'
  3274  0A0C  3420               	retlw	32	;' '
  3275  0A0D  3439               	retlw	57	;'9'
  3276  0A0E  3436               	retlw	54	;'6'
  3277  0A0F  3430               	retlw	48	;'0'
  3278  0A10  3430               	retlw	48	;'0'
  3279  0A11  3420               	retlw	32	;' '
  3280  0A12  3477               	retlw	119	;'w'
  3281  0A13  3469               	retlw	105	;'i'
  3282  0A14  3474               	retlw	116	;'t'
  3283  0A15  3468               	retlw	104	;'h'
  3284  0A16  3420               	retlw	32	;' '
  3285  0A17  346E               	retlw	110	;'n'
  3286  0A18  346F               	retlw	111	;'o'
  3287  0A19  3420               	retlw	32	;' '
  3288  0A1A  3470               	retlw	112	;'p'
  3289  0A1B  3461               	retlw	97	;'a'
  3290  0A1C  3472               	retlw	114	;'r'
  3291  0A1D  3469               	retlw	105	;'i'
  3292  0A1E  3474               	retlw	116	;'t'
  3293  0A1F  3479               	retlw	121	;'y'
  3294  0A20  3420               	retlw	32	;' '
  3295  0A21  3462               	retlw	98	;'b'
  3296  0A22  3469               	retlw	105	;'i'
  3297  0A23  3474               	retlw	116	;'t'
  3298  0A24  340D               	retlw	13
  3299  0A25  340A               	retlw	10
  3300  0A26  3400               	retlw	0
  3301  0A27                     STR_5:	
  3302  0A27  3454               	retlw	84	;'T'
  3303  0A28  346F               	retlw	111	;'o'
  3304  0A29  3420               	retlw	32	;' '
  3305  0A2A  3443               	retlw	67	;'C'
  3306  0A2B  3468               	retlw	104	;'h'
  3307  0A2C  3461               	retlw	97	;'a'
  3308  0A2D  346E               	retlw	110	;'n'
  3309  0A2E  3467               	retlw	103	;'g'
  3310  0A2F  3465               	retlw	101	;'e'
  3311  0A30  3420               	retlw	32	;' '
  3312  0A31  3442               	retlw	66	;'B'
  3313  0A32  3441               	retlw	65	;'A'
  3314  0A33  3455               	retlw	85	;'U'
  3315  0A34  3444               	retlw	68	;'D'
  3316  0A35  3420               	retlw	32	;' '
  3317  0A36  3468               	retlw	104	;'h'
  3318  0A37  3469               	retlw	105	;'i'
  3319  0A38  3474               	retlw	116	;'t'
  3320  0A39  3420               	retlw	32	;' '
  3321  0A3A  3422               	retlw	34	;'"'
  3322  0A3B  3443               	retlw	67	;'C'
  3323  0A3C  344E               	retlw	78	;'N'
  3324  0A3D  3454               	retlw	84	;'T'
  3325  0A3E  342B               	retlw	43	;'+'
  3326  0A3F  3441               	retlw	65	;'A'
  3327  0A40  344C               	retlw	76	;'L'
  3328  0A41  3454               	retlw	84	;'T'
  3329  0A42  342B               	retlw	43	;'+'
  3330  0A43  3444               	retlw	68	;'D'
  3331  0A44  3445               	retlw	69	;'E'
  3332  0A45  344C               	retlw	76	;'L'
  3333  0A46  3422               	retlw	34	;'"'
  3334  0A47  340D               	retlw	13
  3335  0A48  340A               	retlw	10
  3336  0A49  3400               	retlw	0
  3337  0A4A                     STR_31:	
  3338  0A4A  344B               	retlw	75	;'K'
  3339  0A4B  3465               	retlw	101	;'e'
  3340  0A4C  3479               	retlw	121	;'y'
  3341  0A4D  3442               	retlw	66	;'B'
  3342  0A4E  346F               	retlw	111	;'o'
  3343  0A4F  3461               	retlw	97	;'a'
  3344  0A50  3472               	retlw	114	;'r'
  3345  0A51  3464               	retlw	100	;'d'
  3346  0A52  3420               	retlw	32	;' '
  3347  0A53  3442               	retlw	66	;'B'
  3348  0A54  3461               	retlw	97	;'a'
  3349  0A55  3475               	retlw	117	;'u'
  3350  0A56  3464               	retlw	100	;'d'
  3351  0A57  3420               	retlw	32	;' '
  3352  0A58  3477               	retlw	119	;'w'
  3353  0A59  3469               	retlw	105	;'i'
  3354  0A5A  346C               	retlw	108	;'l'
  3355  0A5B  346C               	retlw	108	;'l'
  3356  0A5C  3420               	retlw	32	;' '
  3357  0A5D  3462               	retlw	98	;'b'
  3358  0A5E  3465               	retlw	101	;'e'
  3359  0A5F  3420               	retlw	32	;' '
  3360  0A60  3473               	retlw	115	;'s'
  3361  0A61  3465               	retlw	101	;'e'
  3362  0A62  3474               	retlw	116	;'t'
  3363  0A63  3420               	retlw	32	;' '
  3364  0A64  3474               	retlw	116	;'t'
  3365  0A65  346F               	retlw	111	;'o'
  3366  0A66  3420               	retlw	32	;' '
  3367  0A67  3425               	retlw	37	;'%'
  3368  0A68  346C               	retlw	108	;'l'
  3369  0A69  3475               	retlw	117	;'u'
  3370  0A6A  3400               	retlw	0
  3371  0A6B                     STR_37:	
  3372  0A6B  344B               	retlw	75	;'K'
  3373  0A6C  3465               	retlw	101	;'e'
  3374  0A6D  3479               	retlw	121	;'y'
  3375  0A6E  3442               	retlw	66	;'B'
  3376  0A6F  346F               	retlw	111	;'o'
  3377  0A70  3461               	retlw	97	;'a'
  3378  0A71  3472               	retlw	114	;'r'
  3379  0A72  3464               	retlw	100	;'d'
  3380  0A73  3420               	retlw	32	;' '
  3381  0A74  3442               	retlw	66	;'B'
  3382  0A75  3461               	retlw	97	;'a'
  3383  0A76  3475               	retlw	117	;'u'
  3384  0A77  3464               	retlw	100	;'d'
  3385  0A78  3420               	retlw	32	;' '
  3386  0A79  344F               	retlw	79	;'O'
  3387  0A7A  3475               	retlw	117	;'u'
  3388  0A7B  3474               	retlw	116	;'t'
  3389  0A7C  3420               	retlw	32	;' '
  3390  0A7D  346F               	retlw	111	;'o'
  3391  0A7E  3466               	retlw	102	;'f'
  3392  0A7F  3420               	retlw	32	;' '
  3393  0A80  3452               	retlw	82	;'R'
  3394  0A81  3461               	retlw	97	;'a'
  3395  0A82  346E               	retlw	110	;'n'
  3396  0A83  3467               	retlw	103	;'g'
  3397  0A84  3465               	retlw	101	;'e'
  3398  0A85  340D               	retlw	13
  3399  0A86  340A               	retlw	10
  3400  0A87  3400               	retlw	0
  3401  0A88                     STR_2:	
  3402  0A88  3450               	retlw	80	;'P'
  3403  0A89  3453               	retlw	83	;'S'
  3404  0A8A  342F               	retlw	47	;'/'
  3405  0A8B  3432               	retlw	50	;'2'
  3406  0A8C  3420               	retlw	32	;' '
  3407  0A8D  344B               	retlw	75	;'K'
  3408  0A8E  3465               	retlw	101	;'e'
  3409  0A8F  3479               	retlw	121	;'y'
  3410  0A90  3462               	retlw	98	;'b'
  3411  0A91  346F               	retlw	111	;'o'
  3412  0A92  3461               	retlw	97	;'a'
  3413  0A93  3472               	retlw	114	;'r'
  3414  0A94  3464               	retlw	100	;'d'
  3415  0A95  3420               	retlw	32	;' '
  3416  0A96  3474               	retlw	116	;'t'
  3417  0A97  346F               	retlw	111	;'o'
  3418  0A98  3420               	retlw	32	;' '
  3419  0A99  3452               	retlw	82	;'R'
  3420  0A9A  3453               	retlw	83	;'S'
  3421  0A9B  342D               	retlw	45	;'-'
  3422  0A9C  3432               	retlw	50	;'2'
  3423  0A9D  3433               	retlw	51	;'3'
  3424  0A9E  3432               	retlw	50	;'2'
  3425  0A9F  340D               	retlw	13
  3426  0AA0  340A               	retlw	10
  3427  0AA1  3400               	retlw	0
  3428  0AA2                     STR_20:	
  3429  0AA2  344B               	retlw	75	;'K'
  3430  0AA3  3465               	retlw	101	;'e'
  3431  0AA4  3479               	retlw	121	;'y'
  3432  0AA5  3442               	retlw	66	;'B'
  3433  0AA6  346F               	retlw	111	;'o'
  3434  0AA7  3461               	retlw	97	;'a'
  3435  0AA8  3472               	retlw	114	;'r'
  3436  0AA9  3464               	retlw	100	;'d'
  3437  0AAA  3420               	retlw	32	;' '
  3438  0AAB  3450               	retlw	80	;'P'
  3439  0AAC  3472               	retlw	114	;'r'
  3440  0AAD  346F               	retlw	111	;'o'
  3441  0AAE  3467               	retlw	103	;'g'
  3442  0AAF  3472               	retlw	114	;'r'
  3443  0AB0  3461               	retlw	97	;'a'
  3444  0AB1  346D               	retlw	109	;'m'
  3445  0AB2  3420               	retlw	32	;' '
  3446  0AB3  3446               	retlw	70	;'F'
  3447  0AB4  3461               	retlw	97	;'a'
  3448  0AB5  3469               	retlw	105	;'i'
  3449  0AB6  346C               	retlw	108	;'l'
  3450  0AB7  340D               	retlw	13
  3451  0AB8  340A               	retlw	10
  3452  0AB9  3400               	retlw	0
  3453  0ABA                     STR_15:	
  3454  0ABA  3420               	retlw	32	;' '
  3455  0ABB  3477               	retlw	119	;'w'
  3456  0ABC  3469               	retlw	105	;'i'
  3457  0ABD  3474               	retlw	116	;'t'
  3458  0ABE  3468               	retlw	104	;'h'
  3459  0ABF  3420               	retlw	32	;' '
  3460  0AC0  3445               	retlw	69	;'E'
  3461  0AC1  3476               	retlw	118	;'v'
  3462  0AC2  3465               	retlw	101	;'e'
  3463  0AC3  346E               	retlw	110	;'n'
  3464  0AC4  3420               	retlw	32	;' '
  3465  0AC5  3470               	retlw	112	;'p'
  3466  0AC6  3461               	retlw	97	;'a'
  3467  0AC7  3472               	retlw	114	;'r'
  3468  0AC8  3469               	retlw	105	;'i'
  3469  0AC9  3474               	retlw	116	;'t'
  3470  0ACA  3479               	retlw	121	;'y'
  3471  0ACB  3420               	retlw	32	;' '
  3472  0ACC  3462               	retlw	98	;'b'
  3473  0ACD  3469               	retlw	105	;'i'
  3474  0ACE  3474               	retlw	116	;'t'
  3475  0ACF  340D               	retlw	13
  3476  0AD0  340A               	retlw	10
  3477  0AD1  3400               	retlw	0
  3478  0AD2                     STR_6:	
  3479  0AD2  344E               	retlw	78	;'N'
  3480  0AD3  346F               	retlw	111	;'o'
  3481  0AD4  3420               	retlw	32	;' '
  3482  0AD5  344B               	retlw	75	;'K'
  3483  0AD6  3465               	retlw	101	;'e'
  3484  0AD7  3479               	retlw	121	;'y'
  3485  0AD8  3462               	retlw	98	;'b'
  3486  0AD9  346F               	retlw	111	;'o'
  3487  0ADA  3461               	retlw	97	;'a'
  3488  0ADB  3472               	retlw	114	;'r'
  3489  0ADC  3464               	retlw	100	;'d'
  3490  0ADD  3420               	retlw	32	;' '
  3491  0ADE  3463               	retlw	99	;'c'
  3492  0ADF  346F               	retlw	111	;'o'
  3493  0AE0  346E               	retlw	110	;'n'
  3494  0AE1  346E               	retlw	110	;'n'
  3495  0AE2  3465               	retlw	101	;'e'
  3496  0AE3  3463               	retlw	99	;'c'
  3497  0AE4  3474               	retlw	116	;'t'
  3498  0AE5  3465               	retlw	101	;'e'
  3499  0AE6  3464               	retlw	100	;'d'
  3500  0AE7  340D               	retlw	13
  3501  0AE8  340A               	retlw	10
  3502  0AE9  3400               	retlw	0
  3503  0AEA                     STR_14:	
  3504  0AEA  3420               	retlw	32	;' '
  3505  0AEB  3477               	retlw	119	;'w'
  3506  0AEC  3469               	retlw	105	;'i'
  3507  0AED  3474               	retlw	116	;'t'
  3508  0AEE  3468               	retlw	104	;'h'
  3509  0AEF  3420               	retlw	32	;' '
  3510  0AF0  344F               	retlw	79	;'O'
  3511  0AF1  3464               	retlw	100	;'d'
  3512  0AF2  3464               	retlw	100	;'d'
  3513  0AF3  3420               	retlw	32	;' '
  3514  0AF4  3470               	retlw	112	;'p'
  3515  0AF5  3461               	retlw	97	;'a'
  3516  0AF6  3472               	retlw	114	;'r'
  3517  0AF7  3469               	retlw	105	;'i'
  3518  0AF8  3474               	retlw	116	;'t'
  3519  0AF9  3479               	retlw	121	;'y'
  3520  0AFA  3420               	retlw	32	;' '
  3521  0AFB  3462               	retlw	98	;'b'
  3522  0AFC  3469               	retlw	105	;'i'
  3523  0AFD  3474               	retlw	116	;'t'
  3524  0AFE  340D               	retlw	13
  3525  0AFF  340A               	retlw	10
  3526  0B00  3400               	retlw	0
  3527  0B01                     STR_8:	
  3528  0B01  3449               	retlw	73	;'I'
  3529  0B02  346E               	retlw	110	;'n'
  3530  0B03  3469               	retlw	105	;'i'
  3531  0B04  3474               	retlw	116	;'t'
  3532  0B05  3469               	retlw	105	;'i'
  3533  0B06  3461               	retlw	97	;'a'
  3534  0B07  346C               	retlw	108	;'l'
  3535  0B08  3469               	retlw	105	;'i'
  3536  0B09  347A               	retlw	122	;'z'
  3537  0B0A  3461               	retlw	97	;'a'
  3538  0B0B  3474               	retlw	116	;'t'
  3539  0B0C  3469               	retlw	105	;'i'
  3540  0B0D  346F               	retlw	111	;'o'
  3541  0B0E  346E               	retlw	110	;'n'
  3542  0B0F  3420               	retlw	32	;' '
  3543  0B10  3446               	retlw	70	;'F'
  3544  0B11  3461               	retlw	97	;'a'
  3545  0B12  3469               	retlw	105	;'i'
  3546  0B13  346C               	retlw	108	;'l'
  3547  0B14  340D               	retlw	13
  3548  0B15  340A               	retlw	10
  3549  0B16  3400               	retlw	0
  3550  0B17                     STR_13:	
  3551  0B17  344B               	retlw	75	;'K'
  3552  0B18  3465               	retlw	101	;'e'
  3553  0B19  3479               	retlw	121	;'y'
  3554  0B1A  3442               	retlw	66	;'B'
  3555  0B1B  346F               	retlw	111	;'o'
  3556  0B1C  3461               	retlw	97	;'a'
  3557  0B1D  3472               	retlw	114	;'r'
  3558  0B1E  3464               	retlw	100	;'d'
  3559  0B1F  3420               	retlw	32	;' '
  3560  0B20  3442               	retlw	66	;'B'
  3561  0B21  3461               	retlw	97	;'a'
  3562  0B22  3475               	retlw	117	;'u'
  3563  0B23  3464               	retlw	100	;'d'
  3564  0B24  3420               	retlw	32	;' '
  3565  0B25  3469               	retlw	105	;'i'
  3566  0B26  3473               	retlw	115	;'s'
  3567  0B27  3420               	retlw	32	;' '
  3568  0B28  3425               	retlw	37	;'%'
  3569  0B29  346C               	retlw	108	;'l'
  3570  0B2A  3475               	retlw	117	;'u'
  3571  0B2B  3400               	retlw	0
  3572  0B2C                     STR_7:	
  3573  0B2C  344B               	retlw	75	;'K'
  3574  0B2D  3465               	retlw	101	;'e'
  3575  0B2E  3479               	retlw	121	;'y'
  3576  0B2F  3462               	retlw	98	;'b'
  3577  0B30  346F               	retlw	111	;'o'
  3578  0B31  3461               	retlw	97	;'a'
  3579  0B32  3472               	retlw	114	;'r'
  3580  0B33  3464               	retlw	100	;'d'
  3581  0B34  3420               	retlw	32	;' '
  3582  0B35  3443               	retlw	67	;'C'
  3583  0B36  346F               	retlw	111	;'o'
  3584  0B37  346E               	retlw	110	;'n'
  3585  0B38  346E               	retlw	110	;'n'
  3586  0B39  3465               	retlw	101	;'e'
  3587  0B3A  3463               	retlw	99	;'c'
  3588  0B3B  3474               	retlw	116	;'t'
  3589  0B3C  3465               	retlw	101	;'e'
  3590  0B3D  3464               	retlw	100	;'d'
  3591  0B3E  340D               	retlw	13
  3592  0B3F  340A               	retlw	10
  3593  0B40  3400               	retlw	0
  3594  0B41                     STR_11:	
  3595  0B41  3456               	retlw	86	;'V'
  3596  0B42  346F               	retlw	111	;'o'
  3597  0B43  346C               	retlw	108	;'l'
  3598  0B44  3474               	retlw	116	;'t'
  3599  0B45  3461               	retlw	97	;'a'
  3600  0B46  3467               	retlw	103	;'g'
  3601  0B47  3465               	retlw	101	;'e'
  3602  0B48  3420               	retlw	32	;' '
  3603  0B49  3474               	retlw	116	;'t'
  3604  0B4A  346F               	retlw	111	;'o'
  3605  0B4B  346F               	retlw	111	;'o'
  3606  0B4C  3420               	retlw	32	;' '
  3607  0B4D  3448               	retlw	72	;'H'
  3608  0B4E  3469               	retlw	105	;'i'
  3609  0B4F  3467               	retlw	103	;'g'
  3610  0B50  3468               	retlw	104	;'h'
  3611  0B51  3421               	retlw	33	;'!'
  3612  0B52  340D               	retlw	13
  3613  0B53  340A               	retlw	10
  3614  0B54  3400               	retlw	0
  3615  0B55                     STR_10:	
  3616  0B55  3456               	retlw	86	;'V'
  3617  0B56  346F               	retlw	111	;'o'
  3618  0B57  346C               	retlw	108	;'l'
  3619  0B58  3474               	retlw	116	;'t'
  3620  0B59  3461               	retlw	97	;'a'
  3621  0B5A  3467               	retlw	103	;'g'
  3622  0B5B  3465               	retlw	101	;'e'
  3623  0B5C  3420               	retlw	32	;' '
  3624  0B5D  3474               	retlw	116	;'t'
  3625  0B5E  346F               	retlw	111	;'o'
  3626  0B5F  346F               	retlw	111	;'o'
  3627  0B60  3420               	retlw	32	;' '
  3628  0B61  344C               	retlw	76	;'L'
  3629  0B62  346F               	retlw	111	;'o'
  3630  0B63  3477               	retlw	119	;'w'
  3631  0B64  3421               	retlw	33	;'!'
  3632  0B65  340D               	retlw	13
  3633  0B66  340A               	retlw	10
  3634  0B67  3400               	retlw	0
  3635  0B68                     STR_3:	
  3636  0B68  3446               	retlw	70	;'F'
  3637  0B69  3469               	retlw	105	;'i'
  3638  0B6A  3472               	retlw	114	;'r'
  3639  0B6B  346D               	retlw	109	;'m'
  3640  0B6C  3477               	retlw	119	;'w'
  3641  0B6D  3461               	retlw	97	;'a'
  3642  0B6E  3472               	retlw	114	;'r'
  3643  0B6F  3465               	retlw	101	;'e'
  3644  0B70  3420               	retlw	32	;' '
  3645  0B71  3456               	retlw	86	;'V'
  3646  0B72  3465               	retlw	101	;'e'
  3647  0B73  3472               	retlw	114	;'r'
  3648  0B74  3473               	retlw	115	;'s'
  3649  0B75  3469               	retlw	105	;'i'
  3650  0B76  346F               	retlw	111	;'o'
  3651  0B77  346E               	retlw	110	;'n'
  3652  0B78  343A               	retlw	58	;':'
  3653  0B79  3420               	retlw	32	;' '
  3654  0B7A  3400               	retlw	0
  3655  0B7B                     STR_28:	
  3656  0B7B  3445               	retlw	69	;'E'
  3657  0B7C  346E               	retlw	110	;'n'
  3658  0B7D  3474               	retlw	116	;'t'
  3659  0B7E  3465               	retlw	101	;'e'
  3660  0B7F  3472               	retlw	114	;'r'
  3661  0B80  3420               	retlw	32	;' '
  3662  0B81  3442               	retlw	66	;'B'
  3663  0B82  3461               	retlw	97	;'a'
  3664  0B83  3475               	retlw	117	;'u'
  3665  0B84  3464               	retlw	100	;'d'
  3666  0B85  3420               	retlw	32	;' '
  3667  0B86  3472               	retlw	114	;'r'
  3668  0B87  3461               	retlw	97	;'a'
  3669  0B88  3474               	retlw	116	;'t'
  3670  0B89  3465               	retlw	101	;'e'
  3671  0B8A  340D               	retlw	13
  3672  0B8B  340A               	retlw	10
  3673  0B8C  3400               	retlw	0
  3674  0B8D                     STR_17:	
  3675  0B8D  3420               	retlw	32	;' '
  3676  0B8E  3477               	retlw	119	;'w'
  3677  0B8F  3469               	retlw	105	;'i'
  3678  0B90  3474               	retlw	116	;'t'
  3679  0B91  3468               	retlw	104	;'h'
  3680  0B92  3420               	retlw	32	;' '
  3681  0B93  3453               	retlw	83	;'S'
  3682  0B94  3470               	retlw	112	;'p'
  3683  0B95  3461               	retlw	97	;'a'
  3684  0B96  3463               	retlw	99	;'c'
  3685  0B97  3465               	retlw	101	;'e'
  3686  0B98  3420               	retlw	32	;' '
  3687  0B99  3462               	retlw	98	;'b'
  3688  0B9A  3469               	retlw	105	;'i'
  3689  0B9B  3474               	retlw	116	;'t'
  3690  0B9C  340D               	retlw	13
  3691  0B9D  340A               	retlw	10
  3692  0B9E  3400               	retlw	0
  3693  0B9F                     STR_16:	
  3694  0B9F  3420               	retlw	32	;' '
  3695  0BA0  3477               	retlw	119	;'w'
  3696  0BA1  3469               	retlw	105	;'i'
  3697  0BA2  3474               	retlw	116	;'t'
  3698  0BA3  3468               	retlw	104	;'h'
  3699  0BA4  3420               	retlw	32	;' '
  3700  0BA5  344D               	retlw	77	;'M'
  3701  0BA6  3461               	retlw	97	;'a'
  3702  0BA7  3472               	retlw	114	;'r'
  3703  0BA8  346B               	retlw	107	;'k'
  3704  0BA9  3420               	retlw	32	;' '
  3705  0BAA  3462               	retlw	98	;'b'
  3706  0BAB  3469               	retlw	105	;'i'
  3707  0BAC  3474               	retlw	116	;'t'
  3708  0BAD  340D               	retlw	13
  3709  0BAE  340A               	retlw	10
  3710  0BAF  3400               	retlw	0
  3711  0BB0                     STR_9:	
  3712  0BB0  344B               	retlw	75	;'K'
  3713  0BB1  3465               	retlw	101	;'e'
  3714  0BB2  3479               	retlw	121	;'y'
  3715  0BB3  3462               	retlw	98	;'b'
  3716  0BB4  346F               	retlw	111	;'o'
  3717  0BB5  3461               	retlw	97	;'a'
  3718  0BB6  3472               	retlw	114	;'r'
  3719  0BB7  3464               	retlw	100	;'d'
  3720  0BB8  3420               	retlw	32	;' '
  3721  0BB9  3450               	retlw	80	;'P'
  3722  0BBA  3461               	retlw	97	;'a'
  3723  0BBB  3473               	retlw	115	;'s'
  3724  0BBC  3473               	retlw	115	;'s'
  3725  0BBD  3421               	retlw	33	;'!'
  3726  0BBE  340D               	retlw	13
  3727  0BBF  340A               	retlw	10
  3728  0BC0  3400               	retlw	0
  3729  0BC1                     __end_of__stringdata:	
  3730                           
  3731                           ; #config settings
  3732  0000                     
  3733                           	psect	cinit
  3734  00DF                     start_initialization:	
  3735  00DF                     __initialization:	
  3736                           
  3737                           ; Clear objects allocated to BANK0
  3738  00DF  01E6               	clrf	__pbssBANK0& (0+127)
  3739  00E0  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3740  00E1  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3741  00E2  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3742  00E3  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3743                           
  3744                           ; Clear objects allocated to BANK1
  3745  00E4  0021               	movlb	1	; select bank1
  3746  00E5  01E8               	clrf	__pbssBANK1& (0+127)
  3747  00E6  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3748  00E7  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  3749  00E8  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  3750                           
  3751                           ; Clear objects allocated to BANK2
  3752  00E9  305F               	movlw	low __pbssBANK2
  3753  00EA  0084               	movwf	4
  3754  00EB  3001               	movlw	high __pbssBANK2
  3755  00EC  0085               	movwf	5
  3756  00ED  300E               	movlw	14
  3757  00EE  3199  21CF  3180   	fcall	clear_ram0
  3758                           
  3759                           ; Clear objects allocated to BANK3
  3760  00F1  30A0               	movlw	low __pbssBANK3
  3761  00F2  0084               	movwf	4
  3762  00F3  3001               	movlw	high __pbssBANK3
  3763  00F4  0085               	movwf	5
  3764  00F5  300F               	movlw	15
  3765  00F6  3199  21CF  3180   	fcall	clear_ram0
  3766                           
  3767                           ; Clear objects allocated to BANK4
  3768  00F9  3020               	movlw	low __pbssBANK4
  3769  00FA  0084               	movwf	4
  3770  00FB  3002               	movlw	high __pbssBANK4
  3771  00FC  0085               	movwf	5
  3772  00FD  300C               	movlw	12
  3773  00FE  3199  21CF  3180   	fcall	clear_ram0
  3774                           
  3775                           ; Initialize objects allocated to BANK2
  3776  0101  0022               	movlb	2	; select bank2
  3777  0102  3187  27FD  3180   	fcall	__pidataBANK2	;fetch initializer
  3778  0105  00ED               	movwf	__pdataBANK2& (0+127)
  3779  0106  3187  27FE  3180   	fcall	__pidataBANK2+1	;fetch initializer
  3780  0109  00EE               	movwf	(__pdataBANK2+1)& (0+127)
  3781                           
  3782                           ; Initialize objects allocated to BANK4
  3783  010A  3025               	movlw	low __pidataBANK4
  3784  010B  0084               	movwf	4
  3785  010C  309A               	movlw	(high __pidataBANK4)| (0+128)
  3786  010D  0085               	movwf	5
  3787  010E  302C               	movlw	low __pdataBANK4
  3788  010F  0086               	movwf	6
  3789  0110  3002               	movlw	high __pdataBANK4
  3790  0111  0087               	movwf	7
  3791  0112  300C               	movlw	12
  3792  0113  3199  21C9         	fcall	init_ram
  3793  0115                     end_of_initialization:	
  3794                           ;End of C runtime variable initialization code
  3795                           
  3796  0115                     __end_of__initialization:	
  3797  0115  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3798  0116  0020               	movlb	0
  3799  0117  318E  2E48         	ljmp	_main	;jump to C main() function
  3800                           
  3801                           	psect	bssBANK0
  3802  0066                     __pbssBANK0:	
  3803  0066                     _BaudTyped:	
  3804  0066                     	ds	4
  3805  006A                     _PS_2_bits:	
  3806  006A                     	ds	1
  3807                           
  3808                           	psect	bssBANK1
  3809  00E8                     __pbssBANK1:	
  3810  00E8                     _Alarm:	
  3811  00E8                     	ds	1
  3812  00E9                     _ECHO:	
  3813  00E9                     	ds	1
  3814  00EA                     _PARITY:	
  3815  00EA                     	ds	1
  3816  00EB                     _blinkdelay:	
  3817  00EB                     	ds	1
  3818                           
  3819                           	psect	bssBANK2
  3820  015F                     __pbssBANK2:	
  3821  015F                     _BatteryVoltage:	
  3822  015F                     	ds	4
  3823  0163                     _BAUDMODE:	
  3824  0163                     	ds	1
  3825  0164                     _Caps_Lock_Key:	
  3826  0164                     	ds	1
  3827  0165                     _Caps_Lock_Key_old:	
  3828  0165                     	ds	1
  3829  0166                     _Delete:	
  3830  0166                     	ds	1
  3831  0167                     _LALT:	
  3832  0167                     	ds	1
  3833  0168                     _LControl:	
  3834  0168                     	ds	1
  3835  0169                     _Left_Shift_Key_old:	
  3836  0169                     	ds	1
  3837  016A                     _RControl:	
  3838  016A                     	ds	1
  3839  016B                     _Right_Shift_Key_old:	
  3840  016B                     	ds	1
  3841  016C                     _i:	
  3842  016C                     	ds	1
  3843                           
  3844                           	psect	dataBANK2
  3845  016D                     __pdataBANK2:	
  3846  016D                     _Read_Timer:	
  3847  016D                     	ds	2
  3848                           
  3849                           	psect	bssBANK3
  3850  01A0                     __pbssBANK3:	
  3851  01A0                     _PS_2_Read_Data_First:	
  3852  01A0                     	ds	2
  3853  01A2                     _PS_2_Read_Data_Forth:	
  3854  01A2                     	ds	2
  3855  01A4                     _PS_2_Read_Data_Second:	
  3856  01A4                     	ds	2
  3857  01A6                     _PS_2_Read_Data_Third:	
  3858  01A6                     	ds	2
  3859  01A8                     _CapsCount:	
  3860  01A8                     	ds	1
  3861  01A9                     _Caps_Lock:	
  3862  01A9                     	ds	1
  3863  01AA                     _Left_Shift_Key:	
  3864  01AA                     	ds	1
  3865  01AB                     _ParityTyped:	
  3866  01AB                     	ds	1
  3867  01AC                     _RALT:	
  3868  01AC                     	ds	1
  3869  01AD                     _Right_Shift_Key:	
  3870  01AD                     	ds	1
  3871  01AE                     _Shift_Key:	
  3872  01AE                     	ds	1
  3873                           
  3874                           	psect	bssBANK4
  3875  0220                     __pbssBANK4:	
  3876  0220                     _PS_2_Read_Data_FirstTEMP:	
  3877  0220                     	ds	2
  3878  0222                     _PS_2_Read_Data_ForthTEMP:	
  3879  0222                     	ds	2
  3880  0224                     _PS_2_Read_Data_SecondTEMP:	
  3881  0224                     	ds	2
  3882  0226                     _PS_2_Read_Data_ThirdTEMP:	
  3883  0226                     	ds	2
  3884  0228                     _SinLEDtimer:	
  3885  0228                     	ds	2
  3886  022A                     _pwrLEDtoggle:	
  3887  022A                     	ds	2
  3888                           
  3889                           	psect	dataBANK4
  3890  022C                     __pdataBANK4:	
  3891  022C                     _BAUD:	
  3892  022C                     	ds	4
  3893  0230                     _MEM:	
  3894  0230                     	ds	4
  3895  0234                     _Version:	
  3896  0234                     	ds	4
  3897                           
  3898                           	psect	clrtext
  3899  19CF                     clear_ram0:	
  3900                           ;	Called with FSR0 containing the base address, and
  3901                           ;	WREG with the size to clear
  3902                           
  3903  19CF  0064               	clrwdt	;clear the watchdog before getting into this loop
  3904  19D0                     clrloop0:	
  3905  19D0  0180               	clrf	0	;clear RAM location pointed to by FSR
  3906  19D1  3101               	addfsr 0,1
  3907  19D2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3908  19D3  29D0               	goto	clrloop0	;have we reached the end yet?
  3909  19D4  3400               	retlw	0	;all done for this memory range, return
  3910                           
  3911                           	psect	inittext
  3912  19C9                     init_ram:	
  3913  19C9  00FE               	movwf	126
  3914  19CA                     initloop:	
  3915  19CA  0012               	moviw fsr0++
  3916  19CB  001E               	movwi fsr1++
  3917  19CC  0BFE               	decfsz	126,f
  3918  19CD  29CA               	goto	initloop
  3919  19CE  3400               	retlw	0
  3920                           
  3921                           	psect	cstackBANK5
  3922  02A0                     __pcstackBANK5:	
  3923  02A0                     PS_2_Update@buf:	
  3924                           
  3925                           ; 60 bytes @ 0x0
  3926  02A0                     	ds	60
  3927  02DC                     _PS_2_Update$817:	
  3928                           
  3929                           ; 1 bytes @ 0x3C
  3930  02DC                     	ds	1
  3931  02DD                     _PS_2_Update$818:	
  3932                           
  3933                           ; 1 bytes @ 0x3D
  3934  02DD                     	ds	1
  3935  02DE                     _PS_2_Update$819:	
  3936                           
  3937                           ; 1 bytes @ 0x3E
  3938  02DE                     	ds	1
  3939  02DF                     _PS_2_Update$820:	
  3940                           
  3941                           ; 1 bytes @ 0x3F
  3942  02DF                     	ds	1
  3943  02E0                     PS_2_Update@temp:	
  3944                           
  3945                           ; 1 bytes @ 0x40
  3946  02E0                     	ds	1
  3947                           
  3948                           	psect	cstackBANK3
  3949  01AF                     __pcstackBANK3:	
  3950  01AF                     ??_PS_2_Update:	
  3951                           
  3952                           ; 0 bytes @ 0x0
  3953  01AF                     	ds	9
  3954                           
  3955                           	psect	cstackBANK2
  3956  0120                     __pcstackBANK2:	
  3957  0120                     SetBaud@buf:	
  3958                           
  3959                           ; 50 bytes @ 0x0
  3960  0120                     	ds	50
  3961  0152                     SetBaud@Baudtemp:	
  3962                           
  3963                           ; 4 bytes @ 0x32
  3964  0152                     	ds	4
  3965  0156                     SetBaud@Paritytemp:	
  3966                           
  3967                           ; 4 bytes @ 0x36
  3968  0156                     	ds	4
  3969  015A                     SetBaud@temp:	
  3970                           
  3971                           ; 4 bytes @ 0x3A
  3972  015A                     	ds	4
  3973  015E                     SetBaud@i:	
  3974                           
  3975                           ; 1 bytes @ 0x3E
  3976  015E                     	ds	1
  3977                           
  3978                           	psect	cstackBANK1
  3979  00A0                     __pcstackBANK1:	
  3980  00A0                     ReadVoltage@voltage:	
  3981  00A0                     WriteFlash_Sequential@TempBufH:	
  3982                           ; 4 bytes @ 0x0
  3983                           
  3984  00A0                     Init_System@buf:	
  3985                           ; 32 bytes @ 0x0
  3986                           
  3987                           
  3988                           ; 60 bytes @ 0x0
  3989  00A0                     	ds	4
  3990  00A4                     ReadVoltage@temp:	
  3991                           
  3992                           ; 2 bytes @ 0x4
  3993  00A4                     	ds	28
  3994  00C0                     WriteFlash_Sequential@TempBufL:	
  3995                           
  3996                           ; 32 bytes @ 0x20
  3997  00C0                     	ds	28
  3998  00DC                     Init_System@temp:	
  3999                           
  4000                           ; 4 bytes @ 0x3C
  4001  00DC                     	ds	4
  4002  00E0                     Init_System@Parity:	
  4003  00E0                     WriteFlash_Sequential@tempH:	
  4004                           ; 1 bytes @ 0x40
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x40
  4008  00E0                     	ds	1
  4009  00E1                     WriteFlash_Sequential@tempL:	
  4010  00E1                     Init_System@Baud:	
  4011                           ; 1 bytes @ 0x41
  4012                           
  4013                           
  4014                           ; 4 bytes @ 0x41
  4015  00E1                     	ds	1
  4016  00E2                     WriteFlash_Sequential@amountTemp:	
  4017                           
  4018                           ; 1 bytes @ 0x42
  4019  00E2                     	ds	1
  4020  00E3                     WriteFlash_Sequential@temp:	
  4021                           
  4022                           ; 2 bytes @ 0x43
  4023  00E3                     	ds	2
  4024  00E5                     WriteFlash_Sequential@spaces:	
  4025                           
  4026                           ; 1 bytes @ 0x45
  4027  00E5                     	ds	1
  4028  00E6                     WriteFlash_Sequential@i:	
  4029                           
  4030                           ; 1 bytes @ 0x46
  4031  00E6                     	ds	1
  4032  00E7                     main@i:	
  4033                           
  4034                           ; 1 bytes @ 0x47
  4035  00E7                     	ds	1
  4036                           
  4037                           	psect	cstackCOMMON
  4038  0070                     __pcstackCOMMON:	
  4039  0070                     ?_UART_send_break:	
  4040  0070                     ?_ConfigureOscillator:	
  4041                           ; 0 bytes @ 0x0
  4042                           
  4043  0070                     ?_InitApp:	
  4044                           ; 0 bytes @ 0x0
  4045                           
  4046  0070                     ?_Init_System:	
  4047                           ; 0 bytes @ 0x0
  4048                           
  4049  0070                     ?_PS_2_INIT:	
  4050                           ; 0 bytes @ 0x0
  4051                           
  4052  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  4053                           ; 0 bytes @ 0x0
  4054                           
  4055  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  4056                           ; 0 bytes @ 0x0
  4057                           
  4058  0070                     ?_PS_2_Update:	
  4059                           ; 0 bytes @ 0x0
  4060                           
  4061  0070                     ?_baudUSART:	
  4062                           ; 0 bytes @ 0x0
  4063                           
  4064  0070                     ?_Clock_TRIS:	
  4065                           ; 0 bytes @ 0x0
  4066                           
  4067  0070                     ?_Data_TRIS:	
  4068                           ; 0 bytes @ 0x0
  4069                           
  4070  0070                     ?_INIT_PS_2_INTERRUPT:	
  4071                           ; 0 bytes @ 0x0
  4072                           
  4073  0070                     ?_DisableInternalADC:	
  4074                           ; 0 bytes @ 0x0
  4075                           
  4076  0070                     ?_isr:	
  4077                           ; 0 bytes @ 0x0
  4078                           
  4079  0070                     ?_main:	
  4080                           ; 0 bytes @ 0x0
  4081                           
  4082  0070                     ?_CloseUSART:	
  4083                           ; 0 bytes @ 0x0
  4084                           
  4085  0070                     ?_UNLOCK:	
  4086                           ; 0 bytes @ 0x0
  4087                           
  4088  0070                     ??i1_ReadUSART:	
  4089                           ; 0 bytes @ 0x0
  4090                           
  4091  0070                     ?i1_UART_send_break:	
  4092                           ; 0 bytes @ 0x0
  4093                           
  4094  0070                     ??i1_UART_send_break:	
  4095                           ; 0 bytes @ 0x0
  4096                           
  4097  0070                     ??i1_READ_PS_2_PIN:	
  4098                           ; 0 bytes @ 0x0
  4099                           
  4100  0070                     ?_READ_PS_2_PIN:	
  4101                           ; 0 bytes @ 0x0
  4102                           
  4103  0070                     ?_ReadUSART:	
  4104                           ; 1 bytes @ 0x0
  4105                           
  4106  0070                     ?_Keyboard_Connected:	
  4107                           ; 1 bytes @ 0x0
  4108                           
  4109  0070                     ?_Init_PS_2_Send:	
  4110                           ; 1 bytes @ 0x0
  4111                           
  4112  0070                     ?_Decode_Scan_Code_Shift:	
  4113                           ; 1 bytes @ 0x0
  4114                           
  4115  0070                     ?_Send_PS2:	
  4116                           ; 1 bytes @ 0x0
  4117                           
  4118  0070                     ?_Decode_Scan_Code_FunctionE0:	
  4119                           ; 1 bytes @ 0x0
  4120                           
  4121  0070                     ?_Decode_Scan_Code:	
  4122                           ; 1 bytes @ 0x0
  4123                           
  4124  0070                     ?_Decode_Scan_Code_Function:	
  4125                           ; 1 bytes @ 0x0
  4126                           
  4127  0070                     ?_Reverse_Byte:	
  4128                           ; 1 bytes @ 0x0
  4129                           
  4130  0070                     ?_ISNUMBER:	
  4131                           ; 1 bytes @ 0x0
  4132                           
  4133  0070                     ?i1_CheckSum_byte:	
  4134                           ; 1 bytes @ 0x0
  4135                           
  4136  0070                     ?i1_ReadUSART:	
  4137                           ; 1 bytes @ 0x0
  4138                           
  4139  0070                     ?i1_READ_PS_2_PIN:	
  4140                           ; 1 bytes @ 0x0
  4141                           
  4142  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  4143                           ; 1 bytes @ 0x0
  4144                           
  4145  0070                     i1CheckSum_byte@This:	
  4146                           ; 1 bytes @ 0x0
  4147                           
  4148                           
  4149                           ; 2 bytes @ 0x0
  4150  0070                     	ds	1
  4151  0071                     i1ReadUSART@data:	
  4152                           
  4153                           ; 1 bytes @ 0x1
  4154  0071                     	ds	1
  4155  0072                     i1CheckSum_byte@Odd_Even:	
  4156                           
  4157                           ; 1 bytes @ 0x2
  4158  0072                     	ds	1
  4159  0073                     ??i1_CheckSum_byte:	
  4160                           
  4161                           ; 0 bytes @ 0x3
  4162  0073                     	ds	1
  4163  0074                     i1CheckSum_byte@ThisTemp:	
  4164                           
  4165                           ; 2 bytes @ 0x4
  4166  0074                     	ds	2
  4167  0076                     i1CheckSum_byte@Parity:	
  4168                           
  4169                           ; 1 bytes @ 0x6
  4170  0076                     	ds	1
  4171  0077                     i1CheckSum_byte@i:	
  4172                           
  4173                           ; 1 bytes @ 0x7
  4174  0077                     	ds	1
  4175  0078                     ?i1_UARTchar:	
  4176  0078                     i1UARTchar@NinethBit_override:	
  4177                           ; 0 bytes @ 0x8
  4178                           
  4179                           
  4180                           ; 1 bytes @ 0x8
  4181  0078                     	ds	1
  4182  0079                     i1UARTchar@NinethBit_override_data:	
  4183                           
  4184                           ; 1 bytes @ 0x9
  4185  0079                     	ds	1
  4186  007A                     ??i1_UARTchar:	
  4187                           
  4188                           ; 0 bytes @ 0xA
  4189  007A                     	ds	4
  4190                           
  4191                           	psect	cstackBANK0
  4192  0020                     __pcstackBANK0:	
  4193  0020                     i1UARTchar@data:	
  4194                           
  4195                           ; 1 bytes @ 0x0
  4196  0020                     	ds	1
  4197  0021                     ??_isr:	
  4198                           
  4199                           ; 0 bytes @ 0x1
  4200  0021                     	ds	2
  4201  0023                     isr@Rx_fault:	
  4202                           
  4203                           ; 1 bytes @ 0x3
  4204  0023                     	ds	1
  4205  0024                     isr@rx:	
  4206                           
  4207                           ; 1 bytes @ 0x4
  4208  0024                     	ds	1
  4209  0025                     ??_READ_PS_2_PIN:	
  4210  0025                     ??_ReadUSART:	
  4211                           ; 0 bytes @ 0x5
  4212                           
  4213  0025                     ??_UART_send_break:	
  4214                           ; 0 bytes @ 0x5
  4215                           
  4216  0025                     ??_ConfigureOscillator:	
  4217                           ; 0 bytes @ 0x5
  4218                           
  4219  0025                     ??_InitApp:	
  4220                           ; 0 bytes @ 0x5
  4221                           
  4222  0025                     ?_delayUS:	
  4223                           ; 0 bytes @ 0x5
  4224                           
  4225  0025                     ??_PS_2_DISABLE_INTERRUPT:	
  4226                           ; 0 bytes @ 0x5
  4227                           
  4228  0025                     ??_PS_2_ENABLE_INTERRUPT:	
  4229                           ; 0 bytes @ 0x5
  4230                           
  4231  0025                     ?_OpenUSART:	
  4232                           ; 0 bytes @ 0x5
  4233                           
  4234  0025                     ??_baudUSART:	
  4235                           ; 0 bytes @ 0x5
  4236                           
  4237  0025                     ??_Clock_TRIS:	
  4238                           ; 0 bytes @ 0x5
  4239                           
  4240  0025                     ??_Data_TRIS:	
  4241                           ; 0 bytes @ 0x5
  4242                           
  4243  0025                     ??_INIT_PS_2_INTERRUPT:	
  4244                           ; 0 bytes @ 0x5
  4245                           
  4246  0025                     ??_Decode_Scan_Code_Shift:	
  4247                           ; 0 bytes @ 0x5
  4248                           
  4249  0025                     ??_Decode_Scan_Code_FunctionE0:	
  4250                           ; 0 bytes @ 0x5
  4251                           
  4252  0025                     ??_Decode_Scan_Code:	
  4253                           ; 0 bytes @ 0x5
  4254                           
  4255  0025                     ??_Decode_Scan_Code_Function:	
  4256                           ; 0 bytes @ 0x5
  4257                           
  4258  0025                     ??_DisableInternalADC:	
  4259                           ; 0 bytes @ 0x5
  4260                           
  4261  0025                     ??_Reverse_Byte:	
  4262                           ; 0 bytes @ 0x5
  4263                           
  4264  0025                     ??_ISNUMBER:	
  4265                           ; 0 bytes @ 0x5
  4266                           
  4267  0025                     ??_CloseUSART:	
  4268                           ; 0 bytes @ 0x5
  4269                           
  4270  0025                     ??_UNLOCK:	
  4271                           ; 0 bytes @ 0x5
  4272                           
  4273  0025                     ?_BlockErase:	
  4274                           ; 0 bytes @ 0x5
  4275                           
  4276  0025                     ?___flge:	
  4277                           ; 0 bytes @ 0x5
  4278                           
  4279  0025                     ?_CheckSum_byte:	
  4280                           ; 1 bit 
  4281                           
  4282  0025                     ?_ReadFlash_2Byte:	
  4283                           ; 1 bytes @ 0x5
  4284                           
  4285  0025                     ?___flpack:	
  4286                           ; 2 bytes @ 0x5
  4287                           
  4288  0025                     ?___lmul:	
  4289                           ; 4 bytes @ 0x5
  4290                           
  4291  0025                     ?___lldiv:	
  4292                           ; 4 bytes @ 0x5
  4293                           
  4294  0025                     ISNUMBER@ascii:	
  4295                           ; 4 bytes @ 0x5
  4296                           
  4297  0025                     baudUSART@baudconfig:	
  4298                           ; 1 bytes @ 0x5
  4299                           
  4300  0025                     Clock_TRIS@direction:	
  4301                           ; 1 bytes @ 0x5
  4302                           
  4303  0025                     Data_TRIS@direction:	
  4304                           ; 1 bytes @ 0x5
  4305                           
  4306  0025                     INIT_PS_2_INTERRUPT@DATA_CLK:	
  4307                           ; 1 bytes @ 0x5
  4308                           
  4309  0025                     READ_PS_2_PIN@DATA_CLK:	
  4310                           ; 1 bytes @ 0x5
  4311                           
  4312  0025                     Decode_Scan_Code@Code:	
  4313                           ; 1 bytes @ 0x5
  4314                           
  4315  0025                     Decode_Scan_Code_Shift@Code:	
  4316                           ; 1 bytes @ 0x5
  4317                           
  4318  0025                     Decode_Scan_Code_FunctionE0@Code:	
  4319                           ; 1 bytes @ 0x5
  4320                           
  4321  0025                     Decode_Scan_Code_Function@Code:	
  4322                           ; 1 bytes @ 0x5
  4323                           
  4324  0025                     CheckSum_byte@This:	
  4325                           ; 1 bytes @ 0x5
  4326                           
  4327  0025                     OpenUSART@spbrg:	
  4328                           ; 2 bytes @ 0x5
  4329                           
  4330  0025                     ReadFlash_2Byte@row:	
  4331                           ; 2 bytes @ 0x5
  4332                           
  4333  0025                     BlockErase@row:	
  4334                           ; 2 bytes @ 0x5
  4335                           
  4336  0025                     delayUS@US:	
  4337                           ; 2 bytes @ 0x5
  4338                           
  4339  0025                     ___lmul@multiplier:	
  4340                           ; 4 bytes @ 0x5
  4341                           
  4342  0025                     ___flpack@arg:	
  4343                           ; 4 bytes @ 0x5
  4344                           
  4345  0025                     ___flge@ff1:	
  4346                           ; 4 bytes @ 0x5
  4347                           
  4348  0025                     ___lldiv@divisor:	
  4349                           ; 4 bytes @ 0x5
  4350                           
  4351                           
  4352                           ; 4 bytes @ 0x5
  4353  0025                     	ds	1
  4354  0026                     ??_PS_2_INIT:	
  4355  0026                     ReadUSART@data:	
  4356                           ; 0 bytes @ 0x6
  4357                           
  4358  0026                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  4359                           ; 1 bytes @ 0x6
  4360                           
  4361  0026                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  4362                           ; 1 bytes @ 0x6
  4363                           
  4364                           
  4365                           ; 1 bytes @ 0x6
  4366  0026                     	ds	1
  4367  0027                     ??_OpenUSART:	
  4368  0027                     ??_BlockErase:	
  4369                           ; 0 bytes @ 0x7
  4370                           
  4371  0027                     CheckSum_byte@Odd_Even:	
  4372                           ; 0 bytes @ 0x7
  4373                           
  4374  0027                     Reverse_Byte@temp:	
  4375                           ; 1 bytes @ 0x7
  4376                           
  4377  0027                     OpenUSART@config:	
  4378                           ; 1 bytes @ 0x7
  4379                           
  4380  0027                     ReadFlash_2Byte@column:	
  4381                           ; 1 bytes @ 0x7
  4382                           
  4383                           
  4384                           ; 1 bytes @ 0x7
  4385  0027                     	ds	1
  4386  0028                     ??_CheckSum_byte:	
  4387  0028                     ??_ReadFlash_2Byte:	
  4388                           ; 0 bytes @ 0x8
  4389                           
  4390  0028                     Reverse_Byte@This:	
  4391                           ; 0 bytes @ 0x8
  4392                           
  4393                           
  4394                           ; 1 bytes @ 0x8
  4395  0028                     	ds	1
  4396  0029                     ??_delayUS:	
  4397  0029                     ___flpack@exp:	
  4398                           ; 0 bytes @ 0x9
  4399                           
  4400  0029                     CheckSum_byte@ThisTemp:	
  4401                           ; 1 bytes @ 0x9
  4402                           
  4403  0029                     ___lmul@multiplicand:	
  4404                           ; 2 bytes @ 0x9
  4405                           
  4406  0029                     ___flge@ff2:	
  4407                           ; 4 bytes @ 0x9
  4408                           
  4409  0029                     ___lldiv@dividend:	
  4410                           ; 4 bytes @ 0x9
  4411                           
  4412                           
  4413                           ; 4 bytes @ 0x9
  4414  0029                     	ds	1
  4415  002A                     ?_ReadFlash_4Byte:	
  4416  002A                     ___flpack@sign:	
  4417                           ; 4 bytes @ 0xA
  4418                           
  4419  002A                     ReadFlash_4Byte@row:	
  4420                           ; 1 bytes @ 0xA
  4421                           
  4422  002A                     delayUS@i:	
  4423                           ; 2 bytes @ 0xA
  4424                           
  4425                           
  4426                           ; 4 bytes @ 0xA
  4427  002A                     	ds	1
  4428  002B                     ??___flpack:	
  4429  002B                     CheckSum_byte@Parity:	
  4430                           ; 0 bytes @ 0xB
  4431                           
  4432                           
  4433                           ; 1 bytes @ 0xB
  4434  002B                     	ds	1
  4435  002C                     CheckSum_byte@i:	
  4436  002C                     ReadFlash_4Byte@column:	
  4437                           ; 1 bytes @ 0xC
  4438                           
  4439                           
  4440                           ; 1 bytes @ 0xC
  4441  002C                     	ds	1
  4442  002D                     ?_UARTchar:	
  4443  002D                     ??___lmul:	
  4444                           ; 0 bytes @ 0xD
  4445                           
  4446  002D                     ??___flge:	
  4447                           ; 0 bytes @ 0xD
  4448                           
  4449  002D                     ??___lldiv:	
  4450                           ; 0 bytes @ 0xD
  4451                           
  4452  002D                     UARTchar@NinethBit_override:	
  4453                           ; 0 bytes @ 0xD
  4454                           
  4455  002D                     ___lmul@product:	
  4456                           ; 1 bytes @ 0xD
  4457                           
  4458                           
  4459                           ; 4 bytes @ 0xD
  4460  002D                     	ds	1
  4461  002E                     ??_ReadFlash_4Byte:	
  4462  002E                     delayUS@j:	
  4463                           ; 0 bytes @ 0xE
  4464                           
  4465  002E                     UARTchar@NinethBit_override_data:	
  4466                           ; 1 bytes @ 0xE
  4467                           
  4468  002E                     ___lldiv@quotient:	
  4469                           ; 1 bytes @ 0xE
  4470                           
  4471                           
  4472                           ; 4 bytes @ 0xE
  4473  002E                     	ds	1
  4474  002F                     ??_UARTchar:	
  4475  002F                     ??_Send_PS2:	
  4476                           ; 0 bytes @ 0xF
  4477                           
  4478  002F                     ?_WriteFlash_Sequential:	
  4479                           ; 0 bytes @ 0xF
  4480                           
  4481  002F                     ?_InternalADC_Read:	
  4482                           ; 0 bytes @ 0xF
  4483                           
  4484  002F                     ?___lwtofl:	
  4485                           ; 2 bytes @ 0xF
  4486                           
  4487  002F                     WriteFlash_Sequential@row:	
  4488                           ; 4 bytes @ 0xF
  4489                           
  4490  002F                     ___lwtofl@c:	
  4491                           ; 2 bytes @ 0xF
  4492                           
  4493                           
  4494                           ; 2 bytes @ 0xF
  4495  002F                     	ds	2
  4496  0031                     ??_InternalADC_Read:	
  4497  0031                     WriteFlash_Sequential@buffer:	
  4498                           ; 0 bytes @ 0x11
  4499                           
  4500                           
  4501                           ; 1 bytes @ 0x11
  4502  0031                     	ds	1
  4503  0032                     WriteFlash_Sequential@amount:	
  4504  0032                     ___lldiv@counter:	
  4505                           ; 1 bytes @ 0x12
  4506                           
  4507                           
  4508                           ; 1 bytes @ 0x12
  4509  0032                     	ds	1
  4510  0033                     ?_InitUART:	
  4511  0033                     ??_WriteFlash_Sequential:	
  4512                           ; 0 bytes @ 0x13
  4513                           
  4514  0033                     ??___lwtofl:	
  4515                           ; 0 bytes @ 0x13
  4516                           
  4517  0033                     ?___llmod:	
  4518                           ; 0 bytes @ 0x13
  4519                           
  4520  0033                     UARTchar@data:	
  4521                           ; 4 bytes @ 0x13
  4522                           
  4523  0033                     Send_PS2@oddparity:	
  4524                           ; 1 bytes @ 0x13
  4525                           
  4526  0033                     InternalADC_Read@channel:	
  4527                           ; 1 bytes @ 0x13
  4528                           
  4529  0033                     InitUART@Baud:	
  4530                           ; 1 bytes @ 0x13
  4531                           
  4532  0033                     ReadFlash_4Byte@temp:	
  4533                           ; 4 bytes @ 0x13
  4534                           
  4535  0033                     ___llmod@divisor:	
  4536                           ; 4 bytes @ 0x13
  4537                           
  4538                           
  4539                           ; 4 bytes @ 0x13
  4540  0033                     	ds	1
  4541  0034                     ?_UARTstringWAIT:	
  4542  0034                     ?___fldiv:	
  4543                           ; 0 bytes @ 0x14
  4544                           
  4545  0034                     Send_PS2@command:	
  4546                           ; 4 bytes @ 0x14
  4547                           
  4548  0034                     UARTstringWAIT@data:	
  4549                           ; 1 bytes @ 0x14
  4550                           
  4551  0034                     ___fldiv@f2:	
  4552                           ; 2 bytes @ 0x14
  4553                           
  4554                           
  4555                           ; 4 bytes @ 0x14
  4556  0034                     	ds	1
  4557  0035                     Send_PS2@i:	
  4558                           
  4559                           ; 1 bytes @ 0x15
  4560  0035                     	ds	1
  4561  0036                     ??_UARTstringWAIT:	
  4562  0036                     ?_WriteBaud:	
  4563                           ; 0 bytes @ 0x16
  4564                           
  4565  0036                     Send_PS2@timeout:	
  4566                           ; 0 bytes @ 0x16
  4567                           
  4568  0036                     WriteBaud@row:	
  4569                           ; 2 bytes @ 0x16
  4570                           
  4571                           
  4572                           ; 2 bytes @ 0x16
  4573  0036                     	ds	1
  4574  0037                     ?_ReadBaud:	
  4575  0037                     InitUART@parity:	
  4576                           ; 4 bytes @ 0x17
  4577                           
  4578  0037                     ReadBaud@row:	
  4579                           ; 1 bytes @ 0x17
  4580                           
  4581  0037                     ___llmod@dividend:	
  4582                           ; 2 bytes @ 0x17
  4583                           
  4584                           
  4585                           ; 4 bytes @ 0x17
  4586  0037                     	ds	1
  4587  0038                     ??_Init_PS_2_Send:	
  4588  0038                     ??_InitUART:	
  4589                           ; 0 bytes @ 0x18
  4590                           
  4591  0038                     WriteBaud@Baud:	
  4592                           ; 0 bytes @ 0x18
  4593                           
  4594  0038                     ___fldiv@f1:	
  4595                           ; 4 bytes @ 0x18
  4596                           
  4597                           
  4598                           ; 4 bytes @ 0x18
  4599  0038                     	ds	1
  4600  0039                     ReadBaud@column:	
  4601                           
  4602                           ; 1 bytes @ 0x19
  4603  0039                     	ds	2
  4604  003B                     ??_ReadBaud:	
  4605  003B                     ??___llmod:	
  4606                           ; 0 bytes @ 0x1B
  4607                           
  4608                           
  4609                           ; 0 bytes @ 0x1B
  4610  003B                     	ds	1
  4611  003C                     ??___fldiv:	
  4612  003C                     WriteBaud@Parity:	
  4613                           ; 0 bytes @ 0x1C
  4614                           
  4615  003C                     ___llmod@counter:	
  4616                           ; 1 bytes @ 0x1C
  4617                           
  4618                           
  4619                           ; 1 bytes @ 0x1C
  4620  003C                     	ds	1
  4621  003D                     ??_WriteBaud:	
  4622  003D                     ?_sprintf:	
  4623                           ; 0 bytes @ 0x1D
  4624                           
  4625  003D                     sprintf@sp:	
  4626                           ; 2 bytes @ 0x1D
  4627                           
  4628                           
  4629                           ; 2 bytes @ 0x1D
  4630  003D                     	ds	2
  4631  003F                     sprintf@f:	
  4632                           
  4633                           ; 2 bytes @ 0x1F
  4634  003F                     	ds	1
  4635  0040                     InitUART@spbrg:	
  4636                           
  4637                           ; 2 bytes @ 0x20
  4638  0040                     	ds	1
  4639  0041                     ___fldiv@f3:	
  4640                           
  4641                           ; 4 bytes @ 0x21
  4642  0041                     	ds	1
  4643  0042                     InitUART@baudconfig:	
  4644                           
  4645                           ; 1 bytes @ 0x22
  4646  0042                     	ds	1
  4647  0043                     InitUART@config:	
  4648  0043                     ReadBaud@temp:	
  4649                           ; 1 bytes @ 0x23
  4650                           
  4651                           
  4652                           ; 4 bytes @ 0x23
  4653  0043                     	ds	1
  4654  0044                     InitUART@temp:	
  4655                           
  4656                           ; 4 bytes @ 0x24
  4657  0044                     	ds	1
  4658  0045                     ??_sprintf:	
  4659  0045                     ___fldiv@cntr:	
  4660                           ; 0 bytes @ 0x25
  4661                           
  4662  0045                     WriteBaud@temp:	
  4663                           ; 1 bytes @ 0x25
  4664                           
  4665                           
  4666                           ; 4 bytes @ 0x25
  4667  0045                     	ds	1
  4668  0046                     ___fldiv@exp:	
  4669                           
  4670                           ; 1 bytes @ 0x26
  4671  0046                     	ds	1
  4672  0047                     ___fldiv@sign:	
  4673                           
  4674                           ; 1 bytes @ 0x27
  4675  0047                     	ds	1
  4676  0048                     ?___flmul:	
  4677  0048                     ___flmul@f1:	
  4678                           ; 4 bytes @ 0x28
  4679                           
  4680                           
  4681                           ; 4 bytes @ 0x28
  4682  0048                     	ds	3
  4683  004B                     sprintf@flag:	
  4684                           
  4685                           ; 1 bytes @ 0x2B
  4686  004B                     	ds	1
  4687  004C                     sprintf@prec:	
  4688  004C                     ___flmul@f2:	
  4689                           ; 2 bytes @ 0x2C
  4690                           
  4691                           
  4692                           ; 4 bytes @ 0x2C
  4693  004C                     	ds	2
  4694  004E                     sprintf@_val:	
  4695                           
  4696                           ; 4 bytes @ 0x2E
  4697  004E                     	ds	2
  4698  0050                     ??___flmul:	
  4699                           
  4700                           ; 0 bytes @ 0x30
  4701  0050                     	ds	2
  4702  0052                     sprintf@ap:	
  4703                           
  4704                           ; 1 bytes @ 0x32
  4705  0052                     	ds	1
  4706  0053                     sprintf@c:	
  4707                           
  4708                           ; 1 bytes @ 0x33
  4709  0053                     	ds	1
  4710  0054                     ??_Init_System:	
  4711  0054                     ?_SetBaud:	
  4712                           ; 0 bytes @ 0x34
  4713                           
  4714  0054                     SetBaud@Baud:	
  4715                           ; 0 bytes @ 0x34
  4716                           
  4717                           
  4718                           ; 4 bytes @ 0x34
  4719  0054                     	ds	1
  4720  0055                     ___flmul@exp:	
  4721                           
  4722                           ; 1 bytes @ 0x35
  4723  0055                     	ds	1
  4724  0056                     ___flmul@f3_as_product:	
  4725                           
  4726                           ; 4 bytes @ 0x36
  4727  0056                     	ds	2
  4728  0058                     SetBaud@Parity:	
  4729                           
  4730                           ; 1 bytes @ 0x38
  4731  0058                     	ds	1
  4732  0059                     ??_SetBaud:	
  4733                           
  4734                           ; 0 bytes @ 0x39
  4735  0059                     	ds	1
  4736  005A                     ___flmul@cntr:	
  4737                           
  4738                           ; 1 bytes @ 0x3A
  4739  005A                     	ds	1
  4740  005B                     ___flmul@sign:	
  4741                           
  4742                           ; 1 bytes @ 0x3B
  4743  005B                     	ds	1
  4744  005C                     ?_ReadVoltage:	
  4745                           
  4746                           ; 4 bytes @ 0x3C
  4747  005C                     	ds	4
  4748  0060                     ??_ReadVoltage:	
  4749                           
  4750                           ; 0 bytes @ 0x40
  4751  0060                     	ds	1
  4752  0061                     ??_Keyboard_Connected:	
  4753  0061                     Keyboard_Connected@i:	
  4754                           ; 0 bytes @ 0x41
  4755                           
  4756                           
  4757                           ; 4 bytes @ 0x41
  4758  0061                     	ds	4
  4759  0065                     ??_main:	
  4760                           
  4761                           ; 0 bytes @ 0x45
  4762  0065                     	ds	1
  4763                           
  4764                           	psect	maintext
  4765  0E48                     __pmaintext:	
  4766 ;;
  4767 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4768 ;;
  4769 ;; *************** function _main *****************
  4770 ;; Defined at:
  4771 ;;		line 81 in file "main.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  i               1   71[BANK1 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;		None               void
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 17F/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;Total ram usage:        2 bytes
  4790 ;; Hardware stack levels required when called:   10
  4791 ;; This function calls:
  4792 ;;		_ConfigureOscillator
  4793 ;;		_InitApp
  4794 ;;		_Init_PS_2_Send
  4795 ;;		_Init_System
  4796 ;;		_Keyboard_Connected
  4797 ;;		_PS_2_DISABLE_INTERRUPT
  4798 ;;		_PS_2_ENABLE_INTERRUPT
  4799 ;;		_PS_2_INIT
  4800 ;;		_PS_2_Update
  4801 ;;		_ReadVoltage
  4802 ;;		_UARTstringWAIT
  4803 ;;		___flge
  4804 ;;		_delayUS
  4805 ;; This function is called by:
  4806 ;;		Startup code after reset
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _main
  4812  0E48                     _main:	
  4813                           
  4814                           ;main.c: 83: unsigned char i=0;
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4818  0E48  0021               	movlb	1	; select bank1
  4819  0E49  01E7               	clrf	main@i^(0+128)
  4820                           
  4821                           ;main.c: 85: ConfigureOscillator();
  4822  0E4A  319A  226E  318E   	fcall	_ConfigureOscillator
  4823                           
  4824                           ;main.c: 86: InitApp();
  4825  0E4D  319B  2315  318E   	fcall	_InitApp
  4826                           
  4827                           ;main.c: 87: Init_System();
  4828  0E50  3195  2593  318E   	fcall	_Init_System
  4829                           
  4830                           ;main.c: 88: PS_2_INIT();
  4831  0E53  319A  2219  318E   	fcall	_PS_2_INIT
  4832                           
  4833                           ;main.c: 91: for(i =0;i<10;i++)
  4834  0E56  0021               	movlb	1	; select bank1
  4835  0E57  01E7               	clrf	main@i^(0+128)
  4836  0E58  300A               	movlw	10
  4837  0E59  0267               	subwf	main@i^(0+128),w
  4838  0E5A  1803               	btfsc	3,0
  4839  0E5B  2E86               	goto	l7107
  4840  0E5C                     l160:	
  4841                           
  4842                           ;main.c: 92: {
  4843                           ;main.c: 93: LATC |= 0b00010000;
  4844  0E5C  0022               	movlb	2	; select bank2
  4845  0E5D  160E               	bsf	14,4	;volatile
  4846                           
  4847                           ;main.c: 94: delayUS(10000);
  4848  0E5E  3000               	movlw	0
  4849  0E5F  0020               	movlb	0	; select bank0
  4850  0E60  00A8               	movwf	delayUS@US+3
  4851  0E61  3000               	movlw	0
  4852  0E62  00A7               	movwf	delayUS@US+2
  4853  0E63  3027               	movlw	39
  4854  0E64  00A6               	movwf	delayUS@US+1
  4855  0E65  3010               	movlw	16
  4856  0E66  00A5               	movwf	delayUS@US
  4857  0E67  3187  27C8  318E   	fcall	_delayUS
  4858                           
  4859                           ;main.c: 95: LATC &= ~0b00010000;
  4860  0E6A  30EF               	movlw	239
  4861  0E6B  0020               	movlb	0	; select bank0
  4862  0E6C  00E5               	movwf	??_main
  4863  0E6D  0865               	movf	??_main,w
  4864  0E6E  0022               	movlb	2	; select bank2
  4865  0E6F  058E               	andwf	14,f	;volatile
  4866                           
  4867                           ;main.c: 96: delayUS(10000);
  4868  0E70  3000               	movlw	0
  4869  0E71  0020               	movlb	0	; select bank0
  4870  0E72  00A8               	movwf	delayUS@US+3
  4871  0E73  3000               	movlw	0
  4872  0E74  00A7               	movwf	delayUS@US+2
  4873  0E75  3027               	movlw	39
  4874  0E76  00A6               	movwf	delayUS@US+1
  4875  0E77  3010               	movlw	16
  4876  0E78  00A5               	movwf	delayUS@US
  4877  0E79  3187  27C8  318E   	fcall	_delayUS
  4878  0E7C  3001               	movlw	1
  4879  0E7D  0020               	movlb	0	; select bank0
  4880  0E7E  00E5               	movwf	??_main
  4881  0E7F  0865               	movf	??_main,w
  4882  0E80  0021               	movlb	1	; select bank1
  4883  0E81  07E7               	addwf	main@i^(0+128),f
  4884  0E82  300A               	movlw	10
  4885  0E83  0267               	subwf	main@i^(0+128),w
  4886  0E84  1C03               	skipc
  4887  0E85  2E5C               	goto	l160
  4888  0E86                     l7107:	
  4889                           
  4890                           ;main.c: 97: }
  4891                           ;main.c: 99: PS_2_DISABLE_INTERRUPT(0b00100000);
  4892  0E86  3020               	movlw	32
  4893  0E87  319A  22F6  318E   	fcall	_PS_2_DISABLE_INTERRUPT
  4894                           
  4895                           ;main.c: 101: UARTstringWAIT("\r\n");
  4896  0E8A  3052               	movlw	low ((STR_11+17)| (0+32768))
  4897  0E8B  0020               	movlb	0	; select bank0
  4898  0E8C  00B4               	movwf	UARTstringWAIT@data
  4899  0E8D  308B               	movlw	high ((STR_11+17)| (0+32768))
  4900  0E8E  00B5               	movwf	UARTstringWAIT@data+1
  4901  0E8F  319B  23FC  318E   	fcall	_UARTstringWAIT
  4902                           
  4903                           ;main.c: 102: delayUS(10000);
  4904  0E92  3000               	movlw	0
  4905  0E93  0020               	movlb	0	; select bank0
  4906  0E94  00A8               	movwf	delayUS@US+3
  4907  0E95  3000               	movlw	0
  4908  0E96  00A7               	movwf	delayUS@US+2
  4909  0E97  3027               	movlw	39
  4910  0E98  00A6               	movwf	delayUS@US+1
  4911  0E99  3010               	movlw	16
  4912  0E9A  00A5               	movwf	delayUS@US
  4913  0E9B  3187  27C8  318E   	fcall	_delayUS
  4914                           
  4915                           ;main.c: 103: UARTstringWAIT("PS/2 Keyboard to RS-232\r\n");
  4916  0E9E  3088               	movlw	low (STR_2| (0+32768))
  4917  0E9F  0020               	movlb	0	; select bank0
  4918  0EA0  00B4               	movwf	UARTstringWAIT@data
  4919  0EA1  308A               	movlw	high (STR_2| (0+32768))
  4920  0EA2  00B5               	movwf	UARTstringWAIT@data+1
  4921  0EA3  319B  23FC  318E   	fcall	_UARTstringWAIT
  4922                           
  4923                           ;main.c: 104: delayUS(5000);
  4924  0EA6  3000               	movlw	0
  4925  0EA7  0020               	movlb	0	; select bank0
  4926  0EA8  00A8               	movwf	delayUS@US+3
  4927  0EA9  3000               	movlw	0
  4928  0EAA  00A7               	movwf	delayUS@US+2
  4929  0EAB  3013               	movlw	19
  4930  0EAC  00A6               	movwf	delayUS@US+1
  4931  0EAD  3088               	movlw	136
  4932  0EAE  00A5               	movwf	delayUS@US
  4933  0EAF  3187  27C8  318E   	fcall	_delayUS
  4934                           
  4935                           ;main.c: 105: UARTstringWAIT("Firmware Version: ");
  4936  0EB2  3068               	movlw	low (STR_3| (0+32768))
  4937  0EB3  0020               	movlb	0	; select bank0
  4938  0EB4  00B4               	movwf	UARTstringWAIT@data
  4939  0EB5  308B               	movlw	high (STR_3| (0+32768))
  4940  0EB6  00B5               	movwf	UARTstringWAIT@data+1
  4941  0EB7  319B  23FC  318E   	fcall	_UARTstringWAIT
  4942                           
  4943                           ;main.c: 106: UARTstringWAIT(Version);
  4944  0EBA  3034               	movlw	low _Version
  4945  0EBB  0020               	movlb	0	; select bank0
  4946  0EBC  00B4               	movwf	UARTstringWAIT@data
  4947  0EBD  3002               	movlw	high _Version
  4948  0EBE  00B5               	movwf	UARTstringWAIT@data+1
  4949  0EBF  319B  23FC  318E   	fcall	_UARTstringWAIT
  4950                           
  4951                           ;main.c: 107: UARTstringWAIT("\r\n");
  4952  0EC2  3052               	movlw	low ((STR_11+17)| (0+32768))
  4953  0EC3  0020               	movlb	0	; select bank0
  4954  0EC4  00B4               	movwf	UARTstringWAIT@data
  4955  0EC5  308B               	movlw	high ((STR_11+17)| (0+32768))
  4956  0EC6  00B5               	movwf	UARTstringWAIT@data+1
  4957  0EC7  319B  23FC  318E   	fcall	_UARTstringWAIT
  4958                           
  4959                           ;main.c: 108: delayUS(5000);
  4960  0ECA  3000               	movlw	0
  4961  0ECB  0020               	movlb	0	; select bank0
  4962  0ECC  00A8               	movwf	delayUS@US+3
  4963  0ECD  3000               	movlw	0
  4964  0ECE  00A7               	movwf	delayUS@US+2
  4965  0ECF  3013               	movlw	19
  4966  0ED0  00A6               	movwf	delayUS@US+1
  4967  0ED1  3088               	movlw	136
  4968  0ED2  00A5               	movwf	delayUS@US
  4969  0ED3  3187  27C8  318E   	fcall	_delayUS
  4970                           
  4971                           ;main.c: 109: UARTstringWAIT("To Change BAUD hit \"CNT+ALT+DEL\"\r\n");
  4972  0ED6  3027               	movlw	low (STR_5| (0+32768))
  4973  0ED7  0020               	movlb	0	; select bank0
  4974  0ED8  00B4               	movwf	UARTstringWAIT@data
  4975  0ED9  308A               	movlw	high (STR_5| (0+32768))
  4976  0EDA  00B5               	movwf	UARTstringWAIT@data+1
  4977  0EDB  319B  23FC  318E   	fcall	_UARTstringWAIT
  4978                           
  4979                           ;main.c: 110: delayUS(10000);
  4980  0EDE  3000               	movlw	0
  4981  0EDF  0020               	movlb	0	; select bank0
  4982  0EE0  00A8               	movwf	delayUS@US+3
  4983  0EE1  3000               	movlw	0
  4984  0EE2  00A7               	movwf	delayUS@US+2
  4985  0EE3  3027               	movlw	39
  4986  0EE4  00A6               	movwf	delayUS@US+1
  4987  0EE5  3010               	movlw	16
  4988  0EE6  00A5               	movwf	delayUS@US
  4989  0EE7  3187  27C8  318E   	fcall	_delayUS
  4990                           
  4991                           ;main.c: 112: if(!Keyboard_Connected())
  4992  0EEA  319E  2683  318E   	fcall	_Keyboard_Connected
  4993  0EED  3800               	iorlw	0
  4994  0EEE  1D03               	skipz
  4995  0EEF  2EFE               	goto	l7131
  4996                           
  4997                           ;main.c: 113: {
  4998                           ;main.c: 114: UARTstringWAIT("No Keyboard connected\r\n");
  4999  0EF0  30D2               	movlw	low (STR_6| (0+32768))
  5000  0EF1  0020               	movlb	0	; select bank0
  5001  0EF2  00B4               	movwf	UARTstringWAIT@data
  5002  0EF3  308A               	movlw	high (STR_6| (0+32768))
  5003  0EF4  00B5               	movwf	UARTstringWAIT@data+1
  5004  0EF5  319B  23FC  318E   	fcall	_UARTstringWAIT
  5005  0EF8                     l7129:	
  5006                           ;main.c: 116: while(!Keyboard_Connected());
  5007                           
  5008  0EF8  319E  2683  318E   	fcall	_Keyboard_Connected
  5009  0EFB  3A00               	xorlw	0
  5010  0EFC  1903               	skipnz
  5011  0EFD  2EF8               	goto	l7129
  5012  0EFE                     l7131:	
  5013                           
  5014                           ;main.c: 117: }
  5015                           ;main.c: 118: UARTstringWAIT("Keyboard Connected\r\n");
  5016  0EFE  302C               	movlw	low (STR_7| (0+32768))
  5017  0EFF  0020               	movlb	0	; select bank0
  5018  0F00  00B4               	movwf	UARTstringWAIT@data
  5019  0F01  308B               	movlw	high (STR_7| (0+32768))
  5020  0F02  00B5               	movwf	UARTstringWAIT@data+1
  5021  0F03  319B  23FC  318E   	fcall	_UARTstringWAIT
  5022                           
  5023                           ;main.c: 119: if(!Init_PS_2_Send())
  5024  0F06  3193  23AC  318E   	fcall	_Init_PS_2_Send
  5025  0F09  3800               	iorlw	0
  5026  0F0A  1D03               	skipz
  5027  0F0B  2F1D               	goto	l7139
  5028                           
  5029                           ;main.c: 120: {
  5030                           ;main.c: 121: delayUS(10000);
  5031  0F0C  3000               	movlw	0
  5032  0F0D  0020               	movlb	0	; select bank0
  5033  0F0E  00A8               	movwf	delayUS@US+3
  5034  0F0F  3000               	movlw	0
  5035  0F10  00A7               	movwf	delayUS@US+2
  5036  0F11  3027               	movlw	39
  5037  0F12  00A6               	movwf	delayUS@US+1
  5038  0F13  3010               	movlw	16
  5039  0F14  00A5               	movwf	delayUS@US
  5040  0F15  3187  27C8  318E   	fcall	_delayUS
  5041                           
  5042                           ;main.c: 122: UARTstringWAIT("Initialization Fail\r\n");
  5043  0F18  3001               	movlw	low (STR_8| (0+32768))
  5044  0F19  0020               	movlb	0	; select bank0
  5045  0F1A  00B4               	movwf	UARTstringWAIT@data
  5046  0F1B  308B               	movlw	high (STR_8| (0+32768))
  5047  0F1C  2F21               	goto	L1
  5048  0F1D                     l7139:	
  5049                           ;main.c: 123: }
  5050                           
  5051                           
  5052                           ;main.c: 124: else
  5053                           ;main.c: 125: {
  5054                           ;main.c: 126: UARTstringWAIT("Keyboard Pass!\r\n");
  5055  0F1D  30B0               	movlw	low (STR_9| (0+32768))
  5056  0F1E  0020               	movlb	0	; select bank0
  5057  0F1F  00B4               	movwf	UARTstringWAIT@data
  5058  0F20  308B               	movlw	high (STR_9| (0+32768))
  5059  0F21                     L1:	
  5060  0F21  00B5               	movwf	UARTstringWAIT@data+1
  5061  0F22  319B  23FC  318E   	fcall	_UARTstringWAIT
  5062                           
  5063                           ;main.c: 127: }
  5064                           ;main.c: 128: BatteryVoltage = ReadVoltage();
  5065  0F25  3190  209B  318E   	fcall	_ReadVoltage
  5066  0F28  0020               	movlb	0	; select bank0
  5067  0F29  085F               	movf	?_ReadVoltage+3,w
  5068  0F2A  0022               	movlb	2	; select bank2
  5069  0F2B  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5070  0F2C  0020               	movlb	0	; select bank0
  5071  0F2D  085E               	movf	?_ReadVoltage+2,w
  5072  0F2E  0022               	movlb	2	; select bank2
  5073  0F2F  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5074  0F30  0020               	movlb	0	; select bank0
  5075  0F31  085D               	movf	?_ReadVoltage+1,w
  5076  0F32  0022               	movlb	2	; select bank2
  5077  0F33  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5078  0F34  0020               	movlb	0	; select bank0
  5079  0F35  085C               	movf	?_ReadVoltage,w
  5080  0F36  0022               	movlb	2	; select bank2
  5081  0F37  00DF               	movwf	_BatteryVoltage^(0+256)
  5082                           
  5083                           ;main.c: 129: if(BatteryVoltage < 4.65 )
  5084  0F38  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5085  0F39  0020               	movlb	0	; select bank0
  5086  0F3A  00A8               	movwf	___flge@ff1+3
  5087  0F3B  0022               	movlb	2	; select bank2
  5088  0F3C  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5089  0F3D  0020               	movlb	0	; select bank0
  5090  0F3E  00A7               	movwf	___flge@ff1+2
  5091  0F3F  0022               	movlb	2	; select bank2
  5092  0F40  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5093  0F41  0020               	movlb	0	; select bank0
  5094  0F42  00A6               	movwf	___flge@ff1+1
  5095  0F43  0022               	movlb	2	; select bank2
  5096  0F44  085F               	movf	_BatteryVoltage^(0+256),w
  5097  0F45  0020               	movlb	0	; select bank0
  5098  0F46  00A5               	movwf	___flge@ff1
  5099  0F47  3040               	movlw	64
  5100  0F48  00AC               	movwf	___flge@ff2+3
  5101  0F49  3094               	movlw	148
  5102  0F4A  00AB               	movwf	___flge@ff2+2
  5103  0F4B  30CC               	movlw	204
  5104  0F4C  00AA               	movwf	___flge@ff2+1
  5105  0F4D  30CD               	movlw	205
  5106  0F4E  00A9               	movwf	___flge@ff2
  5107  0F4F  319F  279A  318E   	fcall	___flge
  5108  0F52  1803               	btfsc	3,0
  5109  0F53  2F59               	goto	l7147
  5110                           
  5111                           ;main.c: 130: {
  5112                           ;main.c: 131: UARTstringWAIT("Voltage too Low!\r\n");
  5113  0F54  3055               	movlw	low (STR_10| (0+32768))
  5114  0F55  0020               	movlb	0	; select bank0
  5115  0F56  00B4               	movwf	UARTstringWAIT@data
  5116  0F57  308B               	movlw	high (STR_10| (0+32768))
  5117  0F58  2F7B               	goto	L2
  5118  0F59                     l7147:	
  5119                           ;main.c: 132: }
  5120                           
  5121                           
  5122                           ;main.c: 133: else if (BatteryVoltage > 5.35)
  5123  0F59  3040               	movlw	64
  5124  0F5A  0020               	movlb	0	; select bank0
  5125  0F5B  00A8               	movwf	___flge@ff1+3
  5126  0F5C  30AB               	movlw	171
  5127  0F5D  00A7               	movwf	___flge@ff1+2
  5128  0F5E  3033               	movlw	51
  5129  0F5F  00A6               	movwf	___flge@ff1+1
  5130  0F60  3033               	movlw	51
  5131  0F61  00A5               	movwf	___flge@ff1
  5132  0F62  0022               	movlb	2	; select bank2
  5133  0F63  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5134  0F64  0020               	movlb	0	; select bank0
  5135  0F65  00AC               	movwf	___flge@ff2+3
  5136  0F66  0022               	movlb	2	; select bank2
  5137  0F67  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5138  0F68  0020               	movlb	0	; select bank0
  5139  0F69  00AB               	movwf	___flge@ff2+2
  5140  0F6A  0022               	movlb	2	; select bank2
  5141  0F6B  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5142  0F6C  0020               	movlb	0	; select bank0
  5143  0F6D  00AA               	movwf	___flge@ff2+1
  5144  0F6E  0022               	movlb	2	; select bank2
  5145  0F6F  085F               	movf	_BatteryVoltage^(0+256),w
  5146  0F70  0020               	movlb	0	; select bank0
  5147  0F71  00A9               	movwf	___flge@ff2
  5148  0F72  319F  279A  318E   	fcall	___flge
  5149  0F75  1803               	btfsc	3,0
  5150  0F76  2F7F               	goto	l7151
  5151                           
  5152                           ;main.c: 134: {
  5153                           ;main.c: 135: UARTstringWAIT("Voltage too High!\r\n");
  5154  0F77  3041               	movlw	low (STR_11| (0+32768))
  5155  0F78  0020               	movlb	0	; select bank0
  5156  0F79  00B4               	movwf	UARTstringWAIT@data
  5157  0F7A  308B               	movlw	high (STR_11| (0+32768))
  5158  0F7B                     L2:	
  5159  0F7B  00B5               	movwf	UARTstringWAIT@data+1
  5160  0F7C  319B  23FC  318E   	fcall	_UARTstringWAIT
  5161  0F7F                     l7151:	
  5162                           
  5163                           ;main.c: 136: }
  5164                           ;main.c: 137: PS_2_ENABLE_INTERRUPT(0b00100000);
  5165  0F7F  3020               	movlw	32
  5166  0F80  318B  23C2  318E   	fcall	_PS_2_ENABLE_INTERRUPT
  5167  0F83                     l7153:	
  5168                           ;main.c: 139: while(1)
  5169                           
  5170                           
  5171                           ;main.c: 140: {
  5172                           ;main.c: 141: BatteryVoltage = ReadVoltage();
  5173  0F83  3190  209B  318E   	fcall	_ReadVoltage
  5174  0F86  0020               	movlb	0	; select bank0
  5175  0F87  085F               	movf	?_ReadVoltage+3,w
  5176  0F88  0022               	movlb	2	; select bank2
  5177  0F89  00E2               	movwf	(_BatteryVoltage+3)^(0+256)
  5178  0F8A  0020               	movlb	0	; select bank0
  5179  0F8B  085E               	movf	?_ReadVoltage+2,w
  5180  0F8C  0022               	movlb	2	; select bank2
  5181  0F8D  00E1               	movwf	(_BatteryVoltage+2)^(0+256)
  5182  0F8E  0020               	movlb	0	; select bank0
  5183  0F8F  085D               	movf	?_ReadVoltage+1,w
  5184  0F90  0022               	movlb	2	; select bank2
  5185  0F91  00E0               	movwf	(_BatteryVoltage+1)^(0+256)
  5186  0F92  0020               	movlb	0	; select bank0
  5187  0F93  085C               	movf	?_ReadVoltage,w
  5188  0F94  0022               	movlb	2	; select bank2
  5189  0F95  00DF               	movwf	_BatteryVoltage^(0+256)
  5190                           
  5191                           ;main.c: 142: if(BatteryVoltage < 4.65 || BatteryVoltage > 5.35)
  5192  0F96  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5193  0F97  0020               	movlb	0	; select bank0
  5194  0F98  00A8               	movwf	___flge@ff1+3
  5195  0F99  0022               	movlb	2	; select bank2
  5196  0F9A  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5197  0F9B  0020               	movlb	0	; select bank0
  5198  0F9C  00A7               	movwf	___flge@ff1+2
  5199  0F9D  0022               	movlb	2	; select bank2
  5200  0F9E  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5201  0F9F  0020               	movlb	0	; select bank0
  5202  0FA0  00A6               	movwf	___flge@ff1+1
  5203  0FA1  0022               	movlb	2	; select bank2
  5204  0FA2  085F               	movf	_BatteryVoltage^(0+256),w
  5205  0FA3  0020               	movlb	0	; select bank0
  5206  0FA4  00A5               	movwf	___flge@ff1
  5207  0FA5  3040               	movlw	64
  5208  0FA6  00AC               	movwf	___flge@ff2+3
  5209  0FA7  3094               	movlw	148
  5210  0FA8  00AB               	movwf	___flge@ff2+2
  5211  0FA9  30CC               	movlw	204
  5212  0FAA  00AA               	movwf	___flge@ff2+1
  5213  0FAB  30CD               	movlw	205
  5214  0FAC  00A9               	movwf	___flge@ff2
  5215  0FAD  319F  279A  318E   	fcall	___flge
  5216  0FB0  1C03               	btfss	3,0
  5217  0FB1  2FD0               	goto	l7159
  5218  0FB2  3040               	movlw	64
  5219  0FB3  0020               	movlb	0	; select bank0
  5220  0FB4  00A8               	movwf	___flge@ff1+3
  5221  0FB5  30AB               	movlw	171
  5222  0FB6  00A7               	movwf	___flge@ff1+2
  5223  0FB7  3033               	movlw	51
  5224  0FB8  00A6               	movwf	___flge@ff1+1
  5225  0FB9  3033               	movlw	51
  5226  0FBA  00A5               	movwf	___flge@ff1
  5227  0FBB  0022               	movlb	2	; select bank2
  5228  0FBC  0862               	movf	(_BatteryVoltage+3)^(0+256),w
  5229  0FBD  0020               	movlb	0	; select bank0
  5230  0FBE  00AC               	movwf	___flge@ff2+3
  5231  0FBF  0022               	movlb	2	; select bank2
  5232  0FC0  0861               	movf	(_BatteryVoltage+2)^(0+256),w
  5233  0FC1  0020               	movlb	0	; select bank0
  5234  0FC2  00AB               	movwf	___flge@ff2+2
  5235  0FC3  0022               	movlb	2	; select bank2
  5236  0FC4  0860               	movf	(_BatteryVoltage+1)^(0+256),w
  5237  0FC5  0020               	movlb	0	; select bank0
  5238  0FC6  00AA               	movwf	___flge@ff2+1
  5239  0FC7  0022               	movlb	2	; select bank2
  5240  0FC8  085F               	movf	_BatteryVoltage^(0+256),w
  5241  0FC9  0020               	movlb	0	; select bank0
  5242  0FCA  00A9               	movwf	___flge@ff2
  5243  0FCB  319F  279A  318E   	fcall	___flge
  5244  0FCE  1803               	btfsc	3,0
  5245  0FCF  2FE6               	goto	l172
  5246  0FD0                     l7159:	
  5247                           
  5248                           ;main.c: 143: {
  5249                           ;main.c: 144: pwrLEDtoggle++;
  5250  0FD0  3001               	movlw	1
  5251  0FD1  0024               	movlb	4	; select bank4
  5252  0FD2  07AA               	addwf	_pwrLEDtoggle^(0+512),f
  5253  0FD3  3000               	movlw	0
  5254  0FD4  3DAB               	addwfc	(_pwrLEDtoggle+1)^(0+512),f
  5255                           
  5256                           ;main.c: 145: if(pwrLEDtoggle > 1000)
  5257  0FD5  3003               	movlw	3
  5258  0FD6  022B               	subwf	(_pwrLEDtoggle+1)^(0+512),w
  5259  0FD7  30E9               	movlw	233
  5260  0FD8  1903               	skipnz
  5261  0FD9  022A               	subwf	_pwrLEDtoggle^(0+512),w
  5262  0FDA  1C03               	skipc
  5263  0FDB  2FE8               	goto	l7165
  5264                           
  5265                           ;main.c: 146: {
  5266                           ;main.c: 147: LATC ^= 0b00000010;
  5267  0FDC  3002               	movlw	2
  5268  0FDD  0020               	movlb	0	; select bank0
  5269  0FDE  00E5               	movwf	??_main
  5270  0FDF  0865               	movf	??_main,w
  5271  0FE0  0022               	movlb	2	; select bank2
  5272  0FE1  068E               	xorwf	14,f	;volatile
  5273                           
  5274                           ;main.c: 148: pwrLEDtoggle = 0;
  5275  0FE2  0024               	movlb	4	; select bank4
  5276  0FE3  01AA               	clrf	_pwrLEDtoggle^(0+512)
  5277  0FE4  01AB               	clrf	(_pwrLEDtoggle+1)^(0+512)
  5278                           
  5279                           ;main.c: 149: }
  5280                           ;main.c: 150: }
  5281  0FE5  2FE8               	goto	l7165
  5282  0FE6                     l172:	
  5283                           
  5284                           ;main.c: 151: else
  5285                           ;main.c: 152: {
  5286                           ;main.c: 153: LATC |= 0b00000010;
  5287  0FE6  0022               	movlb	2	; select bank2
  5288  0FE7  148E               	bsf	14,1	;volatile
  5289  0FE8                     l7165:	
  5290                           
  5291                           ;main.c: 154: }
  5292                           ;main.c: 155: if(SinLEDtimer >= 100)
  5293  0FE8  3000               	movlw	0
  5294  0FE9  0024               	movlb	4	; select bank4
  5295  0FEA  0229               	subwf	(_SinLEDtimer+1)^(0+512),w
  5296  0FEB  3064               	movlw	100
  5297  0FEC  1903               	skipnz
  5298  0FED  0228               	subwf	_SinLEDtimer^(0+512),w
  5299  0FEE  1C03               	skipc
  5300  0FEF  2FF7               	goto	l7169
  5301                           
  5302                           ;main.c: 156: {
  5303                           ;main.c: 157: LATC &= ~0b00001000;
  5304  0FF0  30F7               	movlw	247
  5305  0FF1  0020               	movlb	0	; select bank0
  5306  0FF2  00E5               	movwf	??_main
  5307  0FF3  0865               	movf	??_main,w
  5308  0FF4  0022               	movlb	2	; select bank2
  5309  0FF5  058E               	andwf	14,f	;volatile
  5310                           
  5311                           ;main.c: 158: }
  5312  0FF6  2FFC               	goto	l7171
  5313  0FF7                     l7169:	
  5314                           
  5315                           ;main.c: 159: else
  5316                           ;main.c: 160: {
  5317                           ;main.c: 161: SinLEDtimer++;
  5318  0FF7  3001               	movlw	1
  5319  0FF8  0024               	movlb	4	; select bank4
  5320  0FF9  07A8               	addwf	_SinLEDtimer^(0+512),f
  5321  0FFA  3000               	movlw	0
  5322  0FFB  3DA9               	addwfc	(_SinLEDtimer+1)^(0+512),f
  5323  0FFC                     l7171:	
  5324                           
  5325                           ;main.c: 162: }
  5326                           ;main.c: 163: PS_2_Update();
  5327  0FFC  3181  2119  318E   	fcall	_PS_2_Update
  5328  0FFF  2F83               	goto	l7153
  5329  1000                     __end_of_main:	
  5330                           
  5331                           	psect	text1
  5332  1F9A                     __ptext1:	
  5333 ;; *************** function ___flge *****************
  5334 ;; Defined at:
  5335 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  ff1             4    5[BANK0 ] unsigned char 
  5338 ;;  ff2             4    9[BANK0 ] unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;		None               void
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:       16 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    3
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function ___flge
  5366  1F9A                     ___flge:	
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5370  1F9A  0020               	movlb	0	; select bank0
  5371  1F9B  1FA8               	btfss	___flge@ff1+3,7
  5372  1F9C  2FC4               	goto	l5155
  5373  1F9D  3000               	movlw	0
  5374  1F9E  00AD               	movwf	??___flge
  5375  1F9F  3000               	movlw	0
  5376  1FA0  00AE               	movwf	??___flge+1
  5377  1FA1  3000               	movlw	0
  5378  1FA2  00AF               	movwf	??___flge+2
  5379  1FA3  3080               	movlw	128
  5380  1FA4  00B0               	movwf	??___flge+3
  5381  1FA5  0925               	comf	___flge@ff1,w
  5382  1FA6  00B1               	movwf	??___flge+4
  5383  1FA7  0926               	comf	___flge@ff1+1,w
  5384  1FA8  00B2               	movwf	??___flge+5
  5385  1FA9  0927               	comf	___flge@ff1+2,w
  5386  1FAA  00B3               	movwf	??___flge+6
  5387  1FAB  0928               	comf	___flge@ff1+3,w
  5388  1FAC  00B4               	movwf	??___flge+7
  5389  1FAD  0AB1               	incf	??___flge+4,f
  5390  1FAE  1903               	skipnz
  5391  1FAF  0AB2               	incf	??___flge+5,f
  5392  1FB0  1903               	skipnz
  5393  1FB1  0AB3               	incf	??___flge+6,f
  5394  1FB2  1903               	skipnz
  5395  1FB3  0AB4               	incf	??___flge+7,f
  5396  1FB4  0831               	movf	??___flge+4,w
  5397  1FB5  07AD               	addwf	??___flge,f
  5398  1FB6  0832               	movf	??___flge+5,w
  5399  1FB7  3DAE               	addwfc	??___flge+1,f
  5400  1FB8  0833               	movf	??___flge+6,w
  5401  1FB9  3DAF               	addwfc	??___flge+2,f
  5402  1FBA  0834               	movf	??___flge+7,w
  5403  1FBB  3DB0               	addwfc	??___flge+3,f
  5404  1FBC  0830               	movf	??___flge+3,w
  5405  1FBD  00A8               	movwf	___flge@ff1+3
  5406  1FBE  082F               	movf	??___flge+2,w
  5407  1FBF  00A7               	movwf	___flge@ff1+2
  5408  1FC0  082E               	movf	??___flge+1,w
  5409  1FC1  00A6               	movwf	___flge@ff1+1
  5410  1FC2  082D               	movf	??___flge,w
  5411  1FC3  00A5               	movwf	___flge@ff1
  5412  1FC4                     l5155:	
  5413  1FC4  1FAC               	btfss	___flge@ff2+3,7
  5414  1FC5  2FED               	goto	l5159
  5415  1FC6  3000               	movlw	0
  5416  1FC7  00AD               	movwf	??___flge
  5417  1FC8  3000               	movlw	0
  5418  1FC9  00AE               	movwf	??___flge+1
  5419  1FCA  3000               	movlw	0
  5420  1FCB  00AF               	movwf	??___flge+2
  5421  1FCC  3080               	movlw	128
  5422  1FCD  00B0               	movwf	??___flge+3
  5423  1FCE  0929               	comf	___flge@ff2,w
  5424  1FCF  00B1               	movwf	??___flge+4
  5425  1FD0  092A               	comf	___flge@ff2+1,w
  5426  1FD1  00B2               	movwf	??___flge+5
  5427  1FD2  092B               	comf	___flge@ff2+2,w
  5428  1FD3  00B3               	movwf	??___flge+6
  5429  1FD4  092C               	comf	___flge@ff2+3,w
  5430  1FD5  00B4               	movwf	??___flge+7
  5431  1FD6  0AB1               	incf	??___flge+4,f
  5432  1FD7  1903               	skipnz
  5433  1FD8  0AB2               	incf	??___flge+5,f
  5434  1FD9  1903               	skipnz
  5435  1FDA  0AB3               	incf	??___flge+6,f
  5436  1FDB  1903               	skipnz
  5437  1FDC  0AB4               	incf	??___flge+7,f
  5438  1FDD  0831               	movf	??___flge+4,w
  5439  1FDE  07AD               	addwf	??___flge,f
  5440  1FDF  0832               	movf	??___flge+5,w
  5441  1FE0  3DAE               	addwfc	??___flge+1,f
  5442  1FE1  0833               	movf	??___flge+6,w
  5443  1FE2  3DAF               	addwfc	??___flge+2,f
  5444  1FE3  0834               	movf	??___flge+7,w
  5445  1FE4  3DB0               	addwfc	??___flge+3,f
  5446  1FE5  0830               	movf	??___flge+3,w
  5447  1FE6  00AC               	movwf	___flge@ff2+3
  5448  1FE7  082F               	movf	??___flge+2,w
  5449  1FE8  00AB               	movwf	___flge@ff2+2
  5450  1FE9  082E               	movf	??___flge+1,w
  5451  1FEA  00AA               	movwf	___flge@ff2+1
  5452  1FEB  082D               	movf	??___flge,w
  5453  1FEC  00A9               	movwf	___flge@ff2
  5454  1FED                     l5159:	
  5455  1FED  3080               	movlw	128
  5456  1FEE  06A8               	xorwf	___flge@ff1+3,f
  5457  1FEF  3080               	movlw	128
  5458  1FF0  06AC               	xorwf	___flge@ff2+3,f
  5459  1FF1  082C               	movf	___flge@ff2+3,w
  5460  1FF2  0228               	subwf	___flge@ff1+3,w
  5461  1FF3  1D03               	skipz
  5462  1FF4  0008               	return
  5463  1FF5  082B               	movf	___flge@ff2+2,w
  5464  1FF6  0227               	subwf	___flge@ff1+2,w
  5465  1FF7  1D03               	skipz
  5466  1FF8  0008               	return
  5467  1FF9  082A               	movf	___flge@ff2+1,w
  5468  1FFA  0226               	subwf	___flge@ff1+1,w
  5469  1FFB  1D03               	skipz
  5470  1FFC  0008               	return
  5471  1FFD  0829               	movf	___flge@ff2,w
  5472  1FFE  0225               	subwf	___flge@ff1,w
  5473  1FFF  0008               	return
  5474  2000                     __end_of___flge:	
  5475                           
  5476                           	psect	text2
  5477  109B                     __ptext2:	
  5478 ;; *************** function _ReadVoltage *****************
  5479 ;; Defined at:
  5480 ;;		line 61 in file "ADC.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  voltage         4    0[BANK1 ] unsigned char 
  5485 ;;  temp            2    4[BANK1 ] unsigned int 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  4   60[BANK0 ] unsigned int 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0       5       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:       11 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    5
  5502 ;; This function calls:
  5503 ;;		_DisableInternalADC
  5504 ;;		_InternalADC_Read
  5505 ;;		___fldiv
  5506 ;;		___flmul
  5507 ;;		___lwtofl
  5508 ;; This function is called by:
  5509 ;;		_main
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _ReadVoltage
  5515  109B                     _ReadVoltage:	
  5516                           
  5517                           ;ADC.c: 63: unsigned int temp;
  5518                           ;ADC.c: 64: double voltage;
  5519                           ;ADC.c: 65: LATC &= ~0b00000001;
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  5523  109B  30FE               	movlw	254
  5524  109C  0020               	movlb	0	; select bank0
  5525  109D  00E0               	movwf	??_ReadVoltage
  5526  109E  0860               	movf	??_ReadVoltage,w
  5527  109F  0022               	movlb	2	; select bank2
  5528  10A0  058E               	andwf	14,f	;volatile
  5529                           
  5530                           ;ADC.c: 66: temp = InternalADC_Read(2);
  5531  10A1  3002               	movlw	2
  5532  10A2  319C  246E  3190   	fcall	_InternalADC_Read
  5533  10A5  0020               	movlb	0	; select bank0
  5534  10A6  0830               	movf	?_InternalADC_Read+1,w
  5535  10A7  0021               	movlb	1	; select bank1
  5536  10A8  01A5               	clrf	(ReadVoltage@temp+1)^(0+128)
  5537  10A9  07A5               	addwf	(ReadVoltage@temp+1)^(0+128),f
  5538  10AA  0020               	movlb	0	; select bank0
  5539  10AB  082F               	movf	?_InternalADC_Read,w
  5540  10AC  0021               	movlb	1	; select bank1
  5541  10AD  01A4               	clrf	ReadVoltage@temp^(0+128)
  5542  10AE  07A4               	addwf	ReadVoltage@temp^(0+128),f
  5543                           
  5544                           ;ADC.c: 67: DisableInternalADC();
  5545  10AF  3199  21D5  3190   	fcall	_DisableInternalADC
  5546                           
  5547                           ;ADC.c: 68: LATC |= 0b00000001;
  5548  10B2  0022               	movlb	2	; select bank2
  5549  10B3  140E               	bsf	14,0	;volatile
  5550                           
  5551                           ;ADC.c: 71: voltage = ((double)temp / 1000) * 5.7;
  5552  10B4  3040               	movlw	64
  5553  10B5  0020               	movlb	0	; select bank0
  5554  10B6  00CB               	movwf	___flmul@f1+3
  5555  10B7  30B6               	movlw	182
  5556  10B8  00CA               	movwf	___flmul@f1+2
  5557  10B9  3066               	movlw	102
  5558  10BA  00C9               	movwf	___flmul@f1+1
  5559  10BB  3066               	movlw	102
  5560  10BC  00C8               	movwf	___flmul@f1
  5561  10BD  3044               	movlw	68
  5562  10BE  00B7               	movwf	___fldiv@f2+3
  5563  10BF  307A               	movlw	122
  5564  10C0  00B6               	movwf	___fldiv@f2+2
  5565  10C1  3000               	movlw	0
  5566  10C2  00B5               	movwf	___fldiv@f2+1
  5567  10C3  3000               	movlw	0
  5568  10C4  00B4               	movwf	___fldiv@f2
  5569  10C5  0021               	movlb	1	; select bank1
  5570  10C6  0825               	movf	(ReadVoltage@temp+1)^(0+128),w
  5571  10C7  0020               	movlb	0	; select bank0
  5572  10C8  01B0               	clrf	___lwtofl@c+1
  5573  10C9  07B0               	addwf	___lwtofl@c+1,f
  5574  10CA  0021               	movlb	1	; select bank1
  5575  10CB  0824               	movf	ReadVoltage@temp^(0+128),w
  5576  10CC  0020               	movlb	0	; select bank0
  5577  10CD  01AF               	clrf	___lwtofl@c
  5578  10CE  07AF               	addwf	___lwtofl@c,f
  5579  10CF  319A  22DE  3190   	fcall	___lwtofl
  5580  10D2  0020               	movlb	0	; select bank0
  5581  10D3  0832               	movf	?___lwtofl+3,w
  5582  10D4  00BB               	movwf	___fldiv@f1+3
  5583  10D5  0831               	movf	?___lwtofl+2,w
  5584  10D6  00BA               	movwf	___fldiv@f1+2
  5585  10D7  0830               	movf	?___lwtofl+1,w
  5586  10D8  00B9               	movwf	___fldiv@f1+1
  5587  10D9  082F               	movf	?___lwtofl,w
  5588  10DA  00B8               	movwf	___fldiv@f1
  5589  10DB  3191  2109  3190   	fcall	___fldiv
  5590  10DE  0020               	movlb	0	; select bank0
  5591  10DF  0837               	movf	?___fldiv+3,w
  5592  10E0  00CF               	movwf	___flmul@f2+3
  5593  10E1  0836               	movf	?___fldiv+2,w
  5594  10E2  00CE               	movwf	___flmul@f2+2
  5595  10E3  0835               	movf	?___fldiv+1,w
  5596  10E4  00CD               	movwf	___flmul@f2+1
  5597  10E5  0834               	movf	?___fldiv,w
  5598  10E6  00CC               	movwf	___flmul@f2
  5599  10E7  318B  23D7         	fcall	___flmul
  5600  10E9  0020               	movlb	0	; select bank0
  5601  10EA  084B               	movf	?___flmul+3,w
  5602  10EB  0021               	movlb	1	; select bank1
  5603  10EC  00A3               	movwf	(ReadVoltage@voltage+3)^(0+128)
  5604  10ED  0020               	movlb	0	; select bank0
  5605  10EE  084A               	movf	?___flmul+2,w
  5606  10EF  0021               	movlb	1	; select bank1
  5607  10F0  00A2               	movwf	(ReadVoltage@voltage+2)^(0+128)
  5608  10F1  0020               	movlb	0	; select bank0
  5609  10F2  0849               	movf	?___flmul+1,w
  5610  10F3  0021               	movlb	1	; select bank1
  5611  10F4  00A1               	movwf	(ReadVoltage@voltage+1)^(0+128)
  5612  10F5  0020               	movlb	0	; select bank0
  5613  10F6  0848               	movf	?___flmul,w
  5614  10F7  0021               	movlb	1	; select bank1
  5615  10F8  00A0               	movwf	ReadVoltage@voltage^(0+128)
  5616                           
  5617                           ;ADC.c: 72: return voltage;
  5618  10F9  0823               	movf	(ReadVoltage@voltage+3)^(0+128),w
  5619  10FA  0020               	movlb	0	; select bank0
  5620  10FB  00DF               	movwf	?_ReadVoltage+3
  5621  10FC  0021               	movlb	1	; select bank1
  5622  10FD  0822               	movf	(ReadVoltage@voltage+2)^(0+128),w
  5623  10FE  0020               	movlb	0	; select bank0
  5624  10FF  00DE               	movwf	?_ReadVoltage+2
  5625  1100  0021               	movlb	1	; select bank1
  5626  1101  0821               	movf	(ReadVoltage@voltage+1)^(0+128),w
  5627  1102  0020               	movlb	0	; select bank0
  5628  1103  00DD               	movwf	?_ReadVoltage+1
  5629  1104  0021               	movlb	1	; select bank1
  5630  1105  0820               	movf	ReadVoltage@voltage^(0+128),w
  5631  1106  0020               	movlb	0	; select bank0
  5632  1107  00DC               	movwf	?_ReadVoltage
  5633  1108  0008               	return
  5634  1109                     __end_of_ReadVoltage:	
  5635                           
  5636                           	psect	text3
  5637  1ADE                     __ptext3:	
  5638 ;; *************** function ___lwtofl *****************
  5639 ;; Defined at:
  5640 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  c               2   15[BANK0 ] unsigned int 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  4   15[BANK0 ] unsigned int 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5654 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;Total ram usage:        5 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    4
  5661 ;; This function calls:
  5662 ;;		___flpack
  5663 ;; This function is called by:
  5664 ;;		_ReadVoltage
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function ___lwtofl
  5670  1ADE                     ___lwtofl:	
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in ___lwtofl: [wreg+status,2+status,0+pclath+cstack]
  5674  1ADE  0020               	movlb	0	; select bank0
  5675  1ADF  082F               	movf	___lwtofl@c,w
  5676  1AE0  00A5               	movwf	___flpack@arg
  5677  1AE1  0830               	movf	___lwtofl@c+1,w
  5678  1AE2  00A6               	movwf	___flpack@arg+1
  5679  1AE3  01A7               	clrf	___flpack@arg+2
  5680  1AE4  01A8               	clrf	___flpack@arg+3
  5681  1AE5  3096               	movlw	150
  5682  1AE6  00B3               	movwf	??___lwtofl
  5683  1AE7  0833               	movf	??___lwtofl,w
  5684  1AE8  00A9               	movwf	___flpack@exp
  5685  1AE9  01AA               	clrf	___flpack@sign
  5686  1AEA  3190  2030         	fcall	___flpack
  5687  1AEC  0020               	movlb	0	; select bank0
  5688  1AED  0828               	movf	?___flpack+3,w
  5689  1AEE  00B2               	movwf	?___lwtofl+3
  5690  1AEF  0827               	movf	?___flpack+2,w
  5691  1AF0  00B1               	movwf	?___lwtofl+2
  5692  1AF1  0826               	movf	?___flpack+1,w
  5693  1AF2  00B0               	movwf	?___lwtofl+1
  5694  1AF3  0825               	movf	?___flpack,w
  5695  1AF4  00AF               	movwf	?___lwtofl
  5696  1AF5  0008               	return
  5697  1AF6                     __end_of___lwtofl:	
  5698                           
  5699                           	psect	text4
  5700  0BD7                     __ptext4:	
  5701 ;; *************** function ___flmul *****************
  5702 ;; Defined at:
  5703 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  f1              4   40[BANK0 ] unsigned int 
  5706 ;;  f2              4   44[BANK0 ] unsigned int 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  f3_as_produc    4   54[BANK0 ] unsigned long 
  5709 ;;  sign            1   59[BANK0 ] unsigned char 
  5710 ;;  cntr            1   58[BANK0 ] unsigned char 
  5711 ;;  exp             1   53[BANK0 ] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  4   40[BANK0 ] unsigned char 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:       20 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    4
  5728 ;; This function calls:
  5729 ;;		___flpack
  5730 ;; This function is called by:
  5731 ;;		_ReadVoltage
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function ___flmul
  5737  0BD7                     ___flmul:	
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  5741  0BD7  0020               	movlb	0	; select bank0
  5742  0BD8  0848               	movf	___flmul@f1,w
  5743  0BD9  00D0               	movwf	??___flmul
  5744  0BDA  0849               	movf	___flmul@f1+1,w
  5745  0BDB  00D1               	movwf	??___flmul+1
  5746  0BDC  084A               	movf	___flmul@f1+2,w
  5747  0BDD  00D2               	movwf	??___flmul+2
  5748  0BDE  084B               	movf	___flmul@f1+3,w
  5749  0BDF  00D3               	movwf	??___flmul+3
  5750  0BE0  1003               	clrc
  5751  0BE1  0D52               	rlf	??___flmul+2,w
  5752  0BE2  0D53               	rlf	??___flmul+3,w
  5753  0BE3  00D4               	movwf	??___flmul+4
  5754  0BE4  0854               	movf	??___flmul+4,w
  5755  0BE5  00D5               	movwf	___flmul@exp
  5756  0BE6  08D5               	movf	___flmul@exp,f
  5757  0BE7  1D03               	skipz
  5758  0BE8  2BF2               	goto	l6839
  5759  0BE9  3000               	movlw	0
  5760  0BEA  00CB               	movwf	?___flmul+3
  5761  0BEB  3000               	movlw	0
  5762  0BEC  00CA               	movwf	?___flmul+2
  5763  0BED  3000               	movlw	0
  5764  0BEE  00C9               	movwf	?___flmul+1
  5765  0BEF  3000               	movlw	0
  5766  0BF0  00C8               	movwf	?___flmul
  5767  0BF1  0008               	return
  5768  0BF2                     l6839:	
  5769  0BF2  084C               	movf	___flmul@f2,w
  5770  0BF3  00D0               	movwf	??___flmul
  5771  0BF4  084D               	movf	___flmul@f2+1,w
  5772  0BF5  00D1               	movwf	??___flmul+1
  5773  0BF6  084E               	movf	___flmul@f2+2,w
  5774  0BF7  00D2               	movwf	??___flmul+2
  5775  0BF8  084F               	movf	___flmul@f2+3,w
  5776  0BF9  00D3               	movwf	??___flmul+3
  5777  0BFA  1003               	clrc
  5778  0BFB  0D52               	rlf	??___flmul+2,w
  5779  0BFC  0D53               	rlf	??___flmul+3,w
  5780  0BFD  00D4               	movwf	??___flmul+4
  5781  0BFE  0854               	movf	??___flmul+4,w
  5782  0BFF  00DB               	movwf	___flmul@sign
  5783  0C00  08DB               	movf	___flmul@sign,f
  5784  0C01  1D03               	skipz
  5785  0C02  2C0C               	goto	l6845
  5786  0C03  3000               	movlw	0
  5787  0C04  00CB               	movwf	?___flmul+3
  5788  0C05  3000               	movlw	0
  5789  0C06  00CA               	movwf	?___flmul+2
  5790  0C07  3000               	movlw	0
  5791  0C08  00C9               	movwf	?___flmul+1
  5792  0C09  3000               	movlw	0
  5793  0C0A  00C8               	movwf	?___flmul
  5794  0C0B  0008               	return
  5795  0C0C                     l6845:	
  5796  0C0C  085B               	movf	___flmul@sign,w
  5797  0C0D  3E7B               	addlw	123
  5798  0C0E  00D0               	movwf	??___flmul
  5799  0C0F  0850               	movf	??___flmul,w
  5800  0C10  07D5               	addwf	___flmul@exp,f
  5801  0C11  0848               	movf	___flmul@f1,w
  5802  0C12  00D0               	movwf	??___flmul
  5803  0C13  0849               	movf	___flmul@f1+1,w
  5804  0C14  00D1               	movwf	??___flmul+1
  5805  0C15  084A               	movf	___flmul@f1+2,w
  5806  0C16  00D2               	movwf	??___flmul+2
  5807  0C17  084B               	movf	___flmul@f1+3,w
  5808  0C18  00D3               	movwf	??___flmul+3
  5809  0C19  3018               	movlw	24
  5810  0C1A                     u9515:	
  5811  0C1A  36D3               	lsrf	??___flmul+3,f
  5812  0C1B  0CD2               	rrf	??___flmul+2,f
  5813  0C1C  0CD1               	rrf	??___flmul+1,f
  5814  0C1D  0CD0               	rrf	??___flmul,f
  5815  0C1E  0B89               	decfsz	9,f
  5816  0C1F  2C1A               	goto	u9515
  5817  0C20  0850               	movf	??___flmul,w
  5818  0C21  00D4               	movwf	??___flmul+4
  5819  0C22  0854               	movf	??___flmul+4,w
  5820  0C23  00DB               	movwf	___flmul@sign
  5821  0C24  084C               	movf	___flmul@f2,w
  5822  0C25  00D0               	movwf	??___flmul
  5823  0C26  084D               	movf	___flmul@f2+1,w
  5824  0C27  00D1               	movwf	??___flmul+1
  5825  0C28  084E               	movf	___flmul@f2+2,w
  5826  0C29  00D2               	movwf	??___flmul+2
  5827  0C2A  084F               	movf	___flmul@f2+3,w
  5828  0C2B  00D3               	movwf	??___flmul+3
  5829  0C2C  3018               	movlw	24
  5830  0C2D                     u9525:	
  5831  0C2D  36D3               	lsrf	??___flmul+3,f
  5832  0C2E  0CD2               	rrf	??___flmul+2,f
  5833  0C2F  0CD1               	rrf	??___flmul+1,f
  5834  0C30  0CD0               	rrf	??___flmul,f
  5835  0C31  0B89               	decfsz	9,f
  5836  0C32  2C2D               	goto	u9525
  5837  0C33  0850               	movf	??___flmul,w
  5838  0C34  00D4               	movwf	??___flmul+4
  5839  0C35  0854               	movf	??___flmul+4,w
  5840  0C36  06DB               	xorwf	___flmul@sign,f
  5841  0C37  3080               	movlw	128
  5842  0C38  00D0               	movwf	??___flmul
  5843  0C39  0850               	movf	??___flmul,w
  5844  0C3A  05DB               	andwf	___flmul@sign,f
  5845  0C3B  17CA               	bsf	___flmul@f1+2,7
  5846  0C3C  17CE               	bsf	___flmul@f2+2,7
  5847  0C3D  30FF               	movlw	255
  5848  0C3E  05CC               	andwf	___flmul@f2,f
  5849  0C3F  30FF               	movlw	255
  5850  0C40  05CD               	andwf	___flmul@f2+1,f
  5851  0C41  30FF               	movlw	255
  5852  0C42  05CE               	andwf	___flmul@f2+2,f
  5853  0C43  3000               	movlw	0
  5854  0C44  05CF               	andwf	___flmul@f2+3,f
  5855  0C45  3000               	movlw	0
  5856  0C46  00D9               	movwf	___flmul@f3_as_product+3
  5857  0C47  3000               	movlw	0
  5858  0C48  00D8               	movwf	___flmul@f3_as_product+2
  5859  0C49  3000               	movlw	0
  5860  0C4A  00D7               	movwf	___flmul@f3_as_product+1
  5861  0C4B  3000               	movlw	0
  5862  0C4C  00D6               	movwf	___flmul@f3_as_product
  5863  0C4D  3007               	movlw	7
  5864  0C4E  00D0               	movwf	??___flmul
  5865  0C4F  0850               	movf	??___flmul,w
  5866  0C50  00DA               	movwf	___flmul@cntr
  5867  0C51                     l6857:	
  5868  0C51  1C48               	btfss	___flmul@f1,0
  5869  0C52  2C5B               	goto	l6861
  5870  0C53  084C               	movf	___flmul@f2,w
  5871  0C54  07D6               	addwf	___flmul@f3_as_product,f
  5872  0C55  084D               	movf	___flmul@f2+1,w
  5873  0C56  3DD7               	addwfc	___flmul@f3_as_product+1,f
  5874  0C57  084E               	movf	___flmul@f2+2,w
  5875  0C58  3DD8               	addwfc	___flmul@f3_as_product+2,f
  5876  0C59  084F               	movf	___flmul@f2+3,w
  5877  0C5A  3DD9               	addwfc	___flmul@f3_as_product+3,f
  5878  0C5B                     l6861:	
  5879  0C5B  3001               	movlw	1
  5880  0C5C                     u9545:	
  5881  0C5C  36CB               	lsrf	___flmul@f1+3,f
  5882  0C5D  0CCA               	rrf	___flmul@f1+2,f
  5883  0C5E  0CC9               	rrf	___flmul@f1+1,f
  5884  0C5F  0CC8               	rrf	___flmul@f1,f
  5885  0C60  0B89               	decfsz	9,f
  5886  0C61  2C5C               	goto	u9545
  5887  0C62  3001               	movlw	1
  5888  0C63                     u9555:	
  5889  0C63  35CC               	lslf	___flmul@f2,f
  5890  0C64  0DCD               	rlf	___flmul@f2+1,f
  5891  0C65  0DCE               	rlf	___flmul@f2+2,f
  5892  0C66  0DCF               	rlf	___flmul@f2+3,f
  5893  0C67  0B89               	decfsz	9,f
  5894  0C68  2C63               	goto	u9555
  5895  0C69  3001               	movlw	1
  5896  0C6A  02DA               	subwf	___flmul@cntr,f
  5897  0C6B  1D03               	btfss	3,2
  5898  0C6C  2C51               	goto	l6857
  5899  0C6D  3011               	movlw	17
  5900  0C6E  00D0               	movwf	??___flmul
  5901  0C6F  0850               	movf	??___flmul,w
  5902  0C70  00DA               	movwf	___flmul@cntr
  5903  0C71                     l6869:	
  5904  0C71  1C48               	btfss	___flmul@f1,0
  5905  0C72  2C7B               	goto	l6873
  5906  0C73  084C               	movf	___flmul@f2,w
  5907  0C74  07D6               	addwf	___flmul@f3_as_product,f
  5908  0C75  084D               	movf	___flmul@f2+1,w
  5909  0C76  3DD7               	addwfc	___flmul@f3_as_product+1,f
  5910  0C77  084E               	movf	___flmul@f2+2,w
  5911  0C78  3DD8               	addwfc	___flmul@f3_as_product+2,f
  5912  0C79  084F               	movf	___flmul@f2+3,w
  5913  0C7A  3DD9               	addwfc	___flmul@f3_as_product+3,f
  5914  0C7B                     l6873:	
  5915  0C7B  3001               	movlw	1
  5916  0C7C                     u9585:	
  5917  0C7C  36CB               	lsrf	___flmul@f1+3,f
  5918  0C7D  0CCA               	rrf	___flmul@f1+2,f
  5919  0C7E  0CC9               	rrf	___flmul@f1+1,f
  5920  0C7F  0CC8               	rrf	___flmul@f1,f
  5921  0C80  0B89               	decfsz	9,f
  5922  0C81  2C7C               	goto	u9585
  5923  0C82  3001               	movlw	1
  5924  0C83                     u9595:	
  5925  0C83  36D9               	lsrf	___flmul@f3_as_product+3,f
  5926  0C84  0CD8               	rrf	___flmul@f3_as_product+2,f
  5927  0C85  0CD7               	rrf	___flmul@f3_as_product+1,f
  5928  0C86  0CD6               	rrf	___flmul@f3_as_product,f
  5929  0C87  0B89               	decfsz	9,f
  5930  0C88  2C83               	goto	u9595
  5931  0C89  3001               	movlw	1
  5932  0C8A  02DA               	subwf	___flmul@cntr,f
  5933  0C8B  1D03               	btfss	3,2
  5934  0C8C  2C71               	goto	l6869
  5935  0C8D  0859               	movf	___flmul@f3_as_product+3,w
  5936  0C8E  00A8               	movwf	___flpack@arg+3
  5937  0C8F  0858               	movf	___flmul@f3_as_product+2,w
  5938  0C90  00A7               	movwf	___flpack@arg+2
  5939  0C91  0857               	movf	___flmul@f3_as_product+1,w
  5940  0C92  00A6               	movwf	___flpack@arg+1
  5941  0C93  0856               	movf	___flmul@f3_as_product,w
  5942  0C94  00A5               	movwf	___flpack@arg
  5943  0C95  0855               	movf	___flmul@exp,w
  5944  0C96  00D0               	movwf	??___flmul
  5945  0C97  0850               	movf	??___flmul,w
  5946  0C98  00A9               	movwf	___flpack@exp
  5947  0C99  085B               	movf	___flmul@sign,w
  5948  0C9A  00D1               	movwf	??___flmul+1
  5949  0C9B  0851               	movf	??___flmul+1,w
  5950  0C9C  00AA               	movwf	___flpack@sign
  5951  0C9D  3190  2030         	fcall	___flpack
  5952  0C9F  0020               	movlb	0	; select bank0
  5953  0CA0  0828               	movf	?___flpack+3,w
  5954  0CA1  00CB               	movwf	?___flmul+3
  5955  0CA2  0827               	movf	?___flpack+2,w
  5956  0CA3  00CA               	movwf	?___flmul+2
  5957  0CA4  0826               	movf	?___flpack+1,w
  5958  0CA5  00C9               	movwf	?___flmul+1
  5959  0CA6  0825               	movf	?___flpack,w
  5960  0CA7  00C8               	movwf	?___flmul
  5961  0CA8  0008               	return
  5962  0CA9                     __end_of___flmul:	
  5963                           
  5964                           	psect	text5
  5965  1109                     __ptext5:	
  5966 ;; *************** function ___fldiv *****************
  5967 ;; Defined at:
  5968 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\fldiv.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  f2              4   20[BANK0 ] unsigned char 
  5971 ;;  f1              4   24[BANK0 ] unsigned char 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  f3              4   33[BANK0 ] unsigned char 
  5974 ;;  sign            1   39[BANK0 ] unsigned char 
  5975 ;;  exp             1   38[BANK0 ] unsigned char 
  5976 ;;  cntr            1   37[BANK0 ] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  4   20[BANK0 ] unsigned char 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, pclath, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5986 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5988 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5989 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5990 ;;Total ram usage:       20 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    4
  5993 ;; This function calls:
  5994 ;;		___flpack
  5995 ;; This function is called by:
  5996 ;;		_ReadVoltage
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           
  6001                           ;psect for function ___fldiv
  6002  1109                     ___fldiv:	
  6003                           
  6004                           ;incstack = 0
  6005                           ; Regs used in ___fldiv: [wreg+status,2+status,0+pclath+cstack]
  6006  1109  0020               	movlb	0	; select bank0
  6007  110A  0838               	movf	___fldiv@f1,w
  6008  110B  00BC               	movwf	??___fldiv
  6009  110C  0839               	movf	___fldiv@f1+1,w
  6010  110D  00BD               	movwf	??___fldiv+1
  6011  110E  083A               	movf	___fldiv@f1+2,w
  6012  110F  00BE               	movwf	??___fldiv+2
  6013  1110  083B               	movf	___fldiv@f1+3,w
  6014  1111  00BF               	movwf	??___fldiv+3
  6015  1112  1003               	clrc
  6016  1113  0D3E               	rlf	??___fldiv+2,w
  6017  1114  0D3F               	rlf	??___fldiv+3,w
  6018  1115  00C0               	movwf	??___fldiv+4
  6019  1116  0840               	movf	??___fldiv+4,w
  6020  1117  00C6               	movwf	___fldiv@exp
  6021  1118  08C6               	movf	___fldiv@exp,f
  6022  1119  1D03               	skipz
  6023  111A  2924               	goto	l6801
  6024  111B  3000               	movlw	0
  6025  111C  00B7               	movwf	?___fldiv+3
  6026  111D  3000               	movlw	0
  6027  111E  00B6               	movwf	?___fldiv+2
  6028  111F  3000               	movlw	0
  6029  1120  00B5               	movwf	?___fldiv+1
  6030  1121  3000               	movlw	0
  6031  1122  00B4               	movwf	?___fldiv
  6032  1123  0008               	return
  6033  1124                     l6801:	
  6034  1124  0834               	movf	___fldiv@f2,w
  6035  1125  00BC               	movwf	??___fldiv
  6036  1126  0835               	movf	___fldiv@f2+1,w
  6037  1127  00BD               	movwf	??___fldiv+1
  6038  1128  0836               	movf	___fldiv@f2+2,w
  6039  1129  00BE               	movwf	??___fldiv+2
  6040  112A  0837               	movf	___fldiv@f2+3,w
  6041  112B  00BF               	movwf	??___fldiv+3
  6042  112C  1003               	clrc
  6043  112D  0D3E               	rlf	??___fldiv+2,w
  6044  112E  0D3F               	rlf	??___fldiv+3,w
  6045  112F  00C0               	movwf	??___fldiv+4
  6046  1130  0840               	movf	??___fldiv+4,w
  6047  1131  00C7               	movwf	___fldiv@sign
  6048  1132  08C7               	movf	___fldiv@sign,f
  6049  1133  1D03               	skipz
  6050  1134  293E               	goto	l6807
  6051  1135  3000               	movlw	0
  6052  1136  00B7               	movwf	?___fldiv+3
  6053  1137  3000               	movlw	0
  6054  1138  00B6               	movwf	?___fldiv+2
  6055  1139  3000               	movlw	0
  6056  113A  00B5               	movwf	?___fldiv+1
  6057  113B  3000               	movlw	0
  6058  113C  00B4               	movwf	?___fldiv
  6059  113D  0008               	return
  6060  113E                     l6807:	
  6061  113E  3089               	movlw	137
  6062  113F  0747               	addwf	___fldiv@sign,w
  6063  1140  00BC               	movwf	??___fldiv
  6064  1141  083C               	movf	??___fldiv,w
  6065  1142  02C6               	subwf	___fldiv@exp,f
  6066  1143  0838               	movf	___fldiv@f1,w
  6067  1144  00BC               	movwf	??___fldiv
  6068  1145  0839               	movf	___fldiv@f1+1,w
  6069  1146  00BD               	movwf	??___fldiv+1
  6070  1147  083A               	movf	___fldiv@f1+2,w
  6071  1148  00BE               	movwf	??___fldiv+2
  6072  1149  083B               	movf	___fldiv@f1+3,w
  6073  114A  00BF               	movwf	??___fldiv+3
  6074  114B  3018               	movlw	24
  6075  114C                     u9435:	
  6076  114C  36BF               	lsrf	??___fldiv+3,f
  6077  114D  0CBE               	rrf	??___fldiv+2,f
  6078  114E  0CBD               	rrf	??___fldiv+1,f
  6079  114F  0CBC               	rrf	??___fldiv,f
  6080  1150  0B89               	decfsz	9,f
  6081  1151  294C               	goto	u9435
  6082  1152  083C               	movf	??___fldiv,w
  6083  1153  00C0               	movwf	??___fldiv+4
  6084  1154  0840               	movf	??___fldiv+4,w
  6085  1155  00C7               	movwf	___fldiv@sign
  6086  1156  0834               	movf	___fldiv@f2,w
  6087  1157  00BC               	movwf	??___fldiv
  6088  1158  0835               	movf	___fldiv@f2+1,w
  6089  1159  00BD               	movwf	??___fldiv+1
  6090  115A  0836               	movf	___fldiv@f2+2,w
  6091  115B  00BE               	movwf	??___fldiv+2
  6092  115C  0837               	movf	___fldiv@f2+3,w
  6093  115D  00BF               	movwf	??___fldiv+3
  6094  115E  3018               	movlw	24
  6095  115F                     u9445:	
  6096  115F  36BF               	lsrf	??___fldiv+3,f
  6097  1160  0CBE               	rrf	??___fldiv+2,f
  6098  1161  0CBD               	rrf	??___fldiv+1,f
  6099  1162  0CBC               	rrf	??___fldiv,f
  6100  1163  0B89               	decfsz	9,f
  6101  1164  295F               	goto	u9445
  6102  1165  083C               	movf	??___fldiv,w
  6103  1166  00C0               	movwf	??___fldiv+4
  6104  1167  0840               	movf	??___fldiv+4,w
  6105  1168  06C7               	xorwf	___fldiv@sign,f
  6106  1169  3080               	movlw	128
  6107  116A  00BC               	movwf	??___fldiv
  6108  116B  083C               	movf	??___fldiv,w
  6109  116C  05C7               	andwf	___fldiv@sign,f
  6110  116D  17BA               	bsf	___fldiv@f1+2,7
  6111  116E  30FF               	movlw	255
  6112  116F  05B8               	andwf	___fldiv@f1,f
  6113  1170  30FF               	movlw	255
  6114  1171  05B9               	andwf	___fldiv@f1+1,f
  6115  1172  30FF               	movlw	255
  6116  1173  05BA               	andwf	___fldiv@f1+2,f
  6117  1174  3000               	movlw	0
  6118  1175  05BB               	andwf	___fldiv@f1+3,f
  6119  1176  17B6               	bsf	___fldiv@f2+2,7
  6120  1177  30FF               	movlw	255
  6121  1178  05B4               	andwf	___fldiv@f2,f
  6122  1179  30FF               	movlw	255
  6123  117A  05B5               	andwf	___fldiv@f2+1,f
  6124  117B  30FF               	movlw	255
  6125  117C  05B6               	andwf	___fldiv@f2+2,f
  6126  117D  3000               	movlw	0
  6127  117E  05B7               	andwf	___fldiv@f2+3,f
  6128  117F  3020               	movlw	32
  6129  1180  00BC               	movwf	??___fldiv
  6130  1181  083C               	movf	??___fldiv,w
  6131  1182  00C5               	movwf	___fldiv@cntr
  6132  1183                     l6819:	
  6133  1183  3001               	movlw	1
  6134  1184                     u9455:	
  6135  1184  35C1               	lslf	___fldiv@f3,f
  6136  1185  0DC2               	rlf	___fldiv@f3+1,f
  6137  1186  0DC3               	rlf	___fldiv@f3+2,f
  6138  1187  0DC4               	rlf	___fldiv@f3+3,f
  6139  1188  0B89               	decfsz	9,f
  6140  1189  2984               	goto	u9455
  6141  118A  0837               	movf	___fldiv@f2+3,w
  6142  118B  023B               	subwf	___fldiv@f1+3,w
  6143  118C  1D03               	skipz
  6144  118D  2998               	goto	u9465
  6145  118E  0836               	movf	___fldiv@f2+2,w
  6146  118F  023A               	subwf	___fldiv@f1+2,w
  6147  1190  1D03               	skipz
  6148  1191  2998               	goto	u9465
  6149  1192  0835               	movf	___fldiv@f2+1,w
  6150  1193  0239               	subwf	___fldiv@f1+1,w
  6151  1194  1D03               	skipz
  6152  1195  2998               	goto	u9465
  6153  1196  0834               	movf	___fldiv@f2,w
  6154  1197  0238               	subwf	___fldiv@f1,w
  6155  1198                     u9465:	
  6156  1198  1C03               	skipc
  6157  1199  29A3               	goto	l6825
  6158  119A  0834               	movf	___fldiv@f2,w
  6159  119B  02B8               	subwf	___fldiv@f1,f
  6160  119C  0835               	movf	___fldiv@f2+1,w
  6161  119D  3BB9               	subwfb	___fldiv@f1+1,f
  6162  119E  0836               	movf	___fldiv@f2+2,w
  6163  119F  3BBA               	subwfb	___fldiv@f1+2,f
  6164  11A0  0837               	movf	___fldiv@f2+3,w
  6165  11A1  3BBB               	subwfb	___fldiv@f1+3,f
  6166  11A2  1441               	bsf	___fldiv@f3,0
  6167  11A3                     l6825:	
  6168  11A3  3001               	movlw	1
  6169  11A4                     u9475:	
  6170  11A4  35B8               	lslf	___fldiv@f1,f
  6171  11A5  0DB9               	rlf	___fldiv@f1+1,f
  6172  11A6  0DBA               	rlf	___fldiv@f1+2,f
  6173  11A7  0DBB               	rlf	___fldiv@f1+3,f
  6174  11A8  0B89               	decfsz	9,f
  6175  11A9  29A4               	goto	u9475
  6176  11AA  3001               	movlw	1
  6177  11AB  02C5               	subwf	___fldiv@cntr,f
  6178  11AC  1D03               	btfss	3,2
  6179  11AD  2983               	goto	l6819
  6180  11AE  0844               	movf	___fldiv@f3+3,w
  6181  11AF  00A8               	movwf	___flpack@arg+3
  6182  11B0  0843               	movf	___fldiv@f3+2,w
  6183  11B1  00A7               	movwf	___flpack@arg+2
  6184  11B2  0842               	movf	___fldiv@f3+1,w
  6185  11B3  00A6               	movwf	___flpack@arg+1
  6186  11B4  0841               	movf	___fldiv@f3,w
  6187  11B5  00A5               	movwf	___flpack@arg
  6188  11B6  0846               	movf	___fldiv@exp,w
  6189  11B7  00BC               	movwf	??___fldiv
  6190  11B8  083C               	movf	??___fldiv,w
  6191  11B9  00A9               	movwf	___flpack@exp
  6192  11BA  0847               	movf	___fldiv@sign,w
  6193  11BB  00BD               	movwf	??___fldiv+1
  6194  11BC  083D               	movf	??___fldiv+1,w
  6195  11BD  00AA               	movwf	___flpack@sign
  6196  11BE  3190  2030         	fcall	___flpack
  6197  11C0  0020               	movlb	0	; select bank0
  6198  11C1  0828               	movf	?___flpack+3,w
  6199  11C2  00B7               	movwf	?___fldiv+3
  6200  11C3  0827               	movf	?___flpack+2,w
  6201  11C4  00B6               	movwf	?___fldiv+2
  6202  11C5  0826               	movf	?___flpack+1,w
  6203  11C6  00B5               	movwf	?___fldiv+1
  6204  11C7  0825               	movf	?___flpack,w
  6205  11C8  00B4               	movwf	?___fldiv
  6206  11C9  0008               	return
  6207  11CA                     __end_of___fldiv:	
  6208                           
  6209                           	psect	text6
  6210  1030                     __ptext6:	
  6211 ;; *************** function ___flpack *****************
  6212 ;; Defined at:
  6213 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  arg             4    5[BANK0 ] unsigned long 
  6216 ;;  exp             1    9[BANK0 ] unsigned char 
  6217 ;;  sign            1   10[BANK0 ] unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  4    5[BANK0 ] unsigned char 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6229 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;Total ram usage:       10 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    3
  6236 ;; This function calls:
  6237 ;;		Nothing
  6238 ;; This function is called by:
  6239 ;;		___fldiv
  6240 ;;		___flmul
  6241 ;;		___lwtofl
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function ___flpack
  6247  1030                     ___flpack:	
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in ___flpack: [wreg+status,2+status,0]
  6251  1030  0020               	movlb	0	; select bank0
  6252  1031  0829               	movf	___flpack@exp,w
  6253  1032  1903               	btfsc	3,2
  6254  1033  283A               	goto	l6207
  6255  1034  0828               	movf	___flpack@arg+3,w
  6256  1035  0427               	iorwf	___flpack@arg+2,w
  6257  1036  0426               	iorwf	___flpack@arg+1,w
  6258  1037  0425               	iorwf	___flpack@arg,w
  6259  1038  1D03               	skipz
  6260  1039  284E               	goto	l6213
  6261  103A                     l6207:	
  6262  103A  3000               	movlw	0
  6263  103B  00A8               	movwf	?___flpack+3
  6264  103C  3000               	movlw	0
  6265  103D  00A7               	movwf	?___flpack+2
  6266  103E  3000               	movlw	0
  6267  103F  00A6               	movwf	?___flpack+1
  6268  1040  3000               	movlw	0
  6269  1041  00A5               	movwf	?___flpack
  6270  1042  0008               	return
  6271  1043                     l6211:	
  6272  1043  3001               	movlw	1
  6273  1044  00AB               	movwf	??___flpack
  6274  1045  082B               	movf	??___flpack,w
  6275  1046  07A9               	addwf	___flpack@exp,f
  6276  1047  3001               	movlw	1
  6277  1048                     u8035:	
  6278  1048  36A8               	lsrf	___flpack@arg+3,f
  6279  1049  0CA7               	rrf	___flpack@arg+2,f
  6280  104A  0CA6               	rrf	___flpack@arg+1,f
  6281  104B  0CA5               	rrf	___flpack@arg,f
  6282  104C  0B89               	decfsz	9,f
  6283  104D  2848               	goto	u8035
  6284  104E                     l6213:	
  6285  104E  30FE               	movlw	254
  6286  104F  0528               	andwf	___flpack@arg+3,w
  6287  1050  1903               	btfsc	3,2
  6288  1051  2866               	goto	l1164
  6289  1052  2843               	goto	l6211
  6290  1053                     l6215:	
  6291  1053  3001               	movlw	1
  6292  1054  00AB               	movwf	??___flpack
  6293  1055  082B               	movf	??___flpack,w
  6294  1056  07A9               	addwf	___flpack@exp,f
  6295  1057  3001               	movlw	1
  6296  1058  07A5               	addwf	___flpack@arg,f
  6297  1059  3000               	movlw	0
  6298  105A  3DA6               	addwfc	___flpack@arg+1,f
  6299  105B  3000               	movlw	0
  6300  105C  3DA7               	addwfc	___flpack@arg+2,f
  6301  105D  3000               	movlw	0
  6302  105E  3DA8               	addwfc	___flpack@arg+3,f
  6303  105F  3001               	movlw	1
  6304  1060                     u8055:	
  6305  1060  36A8               	lsrf	___flpack@arg+3,f
  6306  1061  0CA7               	rrf	___flpack@arg+2,f
  6307  1062  0CA6               	rrf	___flpack@arg+1,f
  6308  1063  0CA5               	rrf	___flpack@arg,f
  6309  1064  0B89               	decfsz	9,f
  6310  1065  2860               	goto	u8055
  6311  1066                     l1164:	
  6312  1066  30FF               	movlw	255
  6313  1067  0528               	andwf	___flpack@arg+3,w
  6314  1068  1903               	btfsc	3,2
  6315  1069  2874               	goto	l6223
  6316  106A  2853               	goto	l6215
  6317  106B                     l6221:	
  6318  106B  3001               	movlw	1
  6319  106C  02A9               	subwf	___flpack@exp,f
  6320  106D  3001               	movlw	1
  6321  106E                     u8075:	
  6322  106E  35A5               	lslf	___flpack@arg,f
  6323  106F  0DA6               	rlf	___flpack@arg+1,f
  6324  1070  0DA7               	rlf	___flpack@arg+2,f
  6325  1071  0DA8               	rlf	___flpack@arg+3,f
  6326  1072  0B89               	decfsz	9,f
  6327  1073  286E               	goto	u8075
  6328  1074                     l6223:	
  6329  1074  1FA7               	btfss	___flpack@arg+2,7
  6330  1075  286B               	goto	l6221
  6331  1076  1829               	btfsc	___flpack@exp,0
  6332  1077  2880               	goto	l1170
  6333  1078  30FF               	movlw	255
  6334  1079  05A5               	andwf	___flpack@arg,f
  6335  107A  30FF               	movlw	255
  6336  107B  05A6               	andwf	___flpack@arg+1,f
  6337  107C  307F               	movlw	127
  6338  107D  05A7               	andwf	___flpack@arg+2,f
  6339  107E  30FF               	movlw	255
  6340  107F  05A8               	andwf	___flpack@arg+3,f
  6341  1080                     l1170:	
  6342  1080  1003               	clrc
  6343  1081  0CA9               	rrf	___flpack@exp,f
  6344  1082  0829               	movf	___flpack@exp,w
  6345  1083  00AB               	movwf	??___flpack
  6346  1084  01AC               	clrf	??___flpack+1
  6347  1085  01AD               	clrf	??___flpack+2
  6348  1086  01AE               	clrf	??___flpack+3
  6349  1087  3018               	movlw	24
  6350  1088                     u8105:	
  6351  1088  35AB               	lslf	??___flpack,f
  6352  1089  0DAC               	rlf	??___flpack+1,f
  6353  108A  0DAD               	rlf	??___flpack+2,f
  6354  108B  0DAE               	rlf	??___flpack+3,f
  6355  108C  0B89               	decfsz	9,f
  6356  108D  2888               	goto	u8105
  6357  108E  082B               	movf	??___flpack,w
  6358  108F  04A5               	iorwf	___flpack@arg,f
  6359  1090  082C               	movf	??___flpack+1,w
  6360  1091  04A6               	iorwf	___flpack@arg+1,f
  6361  1092  082D               	movf	??___flpack+2,w
  6362  1093  04A7               	iorwf	___flpack@arg+2,f
  6363  1094  082E               	movf	??___flpack+3,w
  6364  1095  04A8               	iorwf	___flpack@arg+3,f
  6365  1096  082A               	movf	___flpack@sign,w
  6366  1097  1903               	btfsc	3,2
  6367  1098  0008               	return
  6368  1099  17A8               	bsf	___flpack@arg+3,7
  6369  109A  0008               	return
  6370  109B                     __end_of___flpack:	
  6371                           
  6372                           	psect	text7
  6373  1C6E                     __ptext7:	
  6374 ;; *************** function _InternalADC_Read *****************
  6375 ;; Defined at:
  6376 ;;		line 80 in file "ADC.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  channel         1    wreg     unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  channel         1   19[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  2   15[BANK0 ] unsigned int 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        5 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    4
  6397 ;; This function calls:
  6398 ;;		_delayUS
  6399 ;; This function is called by:
  6400 ;;		_ReadVoltage
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _InternalADC_Read
  6406  1C6E                     _InternalADC_Read:	
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  6410                           ;InternalADC_Read@channel stored from wreg
  6411  1C6E  0020               	movlb	0	; select bank0
  6412  1C6F  00B3               	movwf	InternalADC_Read@channel
  6413                           
  6414                           ;ADC.c: 82: ADCON0 =0;
  6415  1C70  0021               	movlb	1	; select bank1
  6416  1C71  019D               	clrf	29	;volatile
  6417                           
  6418                           ;ADC.c: 83: ADCON1 =0;
  6419  1C72  019E               	clrf	30	;volatile
  6420                           
  6421                           ;ADC.c: 84: ADCON1 |= 0b01010000;
  6422  1C73  3050               	movlw	80
  6423  1C74  0020               	movlb	0	; select bank0
  6424  1C75  00B1               	movwf	??_InternalADC_Read
  6425  1C76  0831               	movf	??_InternalADC_Read,w
  6426  1C77  0021               	movlb	1	; select bank1
  6427  1C78  049E               	iorwf	30,f	;volatile
  6428                           
  6429                           ;ADC.c: 85: FVRCON |= 0b10000000;
  6430  1C79  0022               	movlb	2	; select bank2
  6431  1C7A  1797               	bsf	23,7	;volatile
  6432                           
  6433                           ;ADC.c: 86: FVRCON |= 0x01;
  6434  1C7B  1417               	bsf	23,0	;volatile
  6435  1C7C                     l951:	
  6436                           ;ADC.c: 87: while(!(FVRCON & 0b01000000));
  6437                           
  6438  1C7C  1F17               	btfss	23,6	;volatile
  6439  1C7D  2C7C               	goto	l951
  6440                           
  6441                           ;ADC.c: 88: ADCON0 |= (channel << 2);
  6442  1C7E  0020               	movlb	0	; select bank0
  6443  1C7F  0833               	movf	InternalADC_Read@channel,w
  6444  1C80  00B1               	movwf	??_InternalADC_Read
  6445  1C81  3001               	movlw	1
  6446  1C82                     u9395:	
  6447  1C82  35B1               	lslf	??_InternalADC_Read,f
  6448  1C83  3EFF               	addlw	-1
  6449  1C84  1D03               	skipz
  6450  1C85  2C82               	goto	u9395
  6451  1C86  3531               	lslf	??_InternalADC_Read,w
  6452  1C87  00B2               	movwf	??_InternalADC_Read+1
  6453  1C88  0832               	movf	??_InternalADC_Read+1,w
  6454  1C89  0021               	movlb	1	; select bank1
  6455  1C8A  049D               	iorwf	29,f	;volatile
  6456                           
  6457                           ;ADC.c: 89: ADCON1 |= 0b10000011;
  6458  1C8B  3083               	movlw	131
  6459  1C8C  0020               	movlb	0	; select bank0
  6460  1C8D  00B1               	movwf	??_InternalADC_Read
  6461  1C8E  0831               	movf	??_InternalADC_Read,w
  6462  1C8F  0021               	movlb	1	; select bank1
  6463  1C90  049E               	iorwf	30,f	;volatile
  6464                           
  6465                           ;ADC.c: 90: ADCON0 |= 0b00000001;
  6466  1C91  141D               	bsf	29,0	;volatile
  6467                           
  6468                           ;ADC.c: 91: (PIE1bits.ADIE=0);
  6469  1C92  1311               	bcf	17,6	;volatile
  6470                           
  6471                           ;ADC.c: 92: delayUS(5);
  6472  1C93  3000               	movlw	0
  6473  1C94  0020               	movlb	0	; select bank0
  6474  1C95  00A8               	movwf	delayUS@US+3
  6475  1C96  3000               	movlw	0
  6476  1C97  00A7               	movwf	delayUS@US+2
  6477  1C98  3000               	movlw	0
  6478  1C99  00A6               	movwf	delayUS@US+1
  6479  1C9A  3005               	movlw	5
  6480  1C9B  00A5               	movwf	delayUS@US
  6481  1C9C  3187  27C8  319C   	fcall	_delayUS
  6482                           
  6483                           ;ADC.c: 93: ADCON0 |= 0b00000010;
  6484  1C9F  0021               	movlb	1	; select bank1
  6485  1CA0  149D               	bsf	29,1	;volatile
  6486  1CA1                     l954:	
  6487                           ;ADC.c: 94: while(ADCON0 & 0b00000010);
  6488                           
  6489  1CA1  189D               	btfsc	29,1	;volatile
  6490  1CA2  2CA1               	goto	l954
  6491                           
  6492                           ;ADC.c: 95: return ((ADRESH << 8) + ADRESL);
  6493  1CA3  081C               	movf	28,w	;volatile
  6494  1CA4  0020               	movlb	0	; select bank0
  6495  1CA5  01B0               	clrf	?_InternalADC_Read+1
  6496  1CA6  07B0               	addwf	?_InternalADC_Read+1,f
  6497  1CA7  0021               	movlb	1	; select bank1
  6498  1CA8  081B               	movf	27,w	;volatile
  6499  1CA9  0020               	movlb	0	; select bank0
  6500  1CAA  01AF               	clrf	?_InternalADC_Read
  6501  1CAB  07AF               	addwf	?_InternalADC_Read,f
  6502  1CAC  0008               	return
  6503  1CAD                     __end_of_InternalADC_Read:	
  6504                           
  6505                           	psect	text8
  6506  19D5                     __ptext8:	
  6507 ;; *************** function _DisableInternalADC *****************
  6508 ;; Defined at:
  6509 ;;		line 103 in file "ADC.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;		None               void
  6516 ;; Registers used:
  6517 ;;		wreg, status,2, status,0
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;Total ram usage:        1 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    3
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_ReadVoltage
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           
  6538                           ;psect for function _DisableInternalADC
  6539  19D5                     _DisableInternalADC:	
  6540                           
  6541                           ;ADC.c: 105: ADCON0 &= ~0b00000001;
  6542                           
  6543                           ;incstack = 0
  6544                           ; Regs used in _DisableInternalADC: [wreg+status,2+status,0]
  6545  19D5  30FE               	movlw	254
  6546  19D6  0020               	movlb	0	; select bank0
  6547  19D7  00A5               	movwf	??_DisableInternalADC
  6548  19D8  0825               	movf	??_DisableInternalADC,w
  6549  19D9  0021               	movlb	1	; select bank1
  6550  19DA  059D               	andwf	29,f	;volatile
  6551  19DB  0008               	return
  6552  19DC                     __end_of_DisableInternalADC:	
  6553                           
  6554                           	psect	text9
  6555  1A19                     __ptext9:	
  6556 ;; *************** function _PS_2_INIT *****************
  6557 ;; Defined at:
  6558 ;;		line 104 in file "PS_2.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    4
  6579 ;; This function calls:
  6580 ;;		_Clock_TRIS
  6581 ;;		_Data_TRIS
  6582 ;;		_INIT_PS_2_INTERRUPT
  6583 ;; This function is called by:
  6584 ;;		_main
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _PS_2_INIT
  6590  1A19                     _PS_2_INIT:	
  6591                           
  6592                           ;PS_2.c: 107: Clock_TRIS(1);
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6596  1A19  3001               	movlw	1
  6597  1A1A  3199  21F8  319A   	fcall	_Clock_TRIS
  6598                           
  6599                           ;PS_2.c: 108: Data_TRIS(1);
  6600  1A1D  3001               	movlw	1
  6601  1A1E  319A  2203  319A   	fcall	_Data_TRIS
  6602                           
  6603                           ;PS_2.c: 109: INIT_PS_2_INTERRUPT(0b00100000);
  6604  1A21  3020               	movlw	32
  6605  1A22  319A  224D         	fcall	_INIT_PS_2_INTERRUPT
  6606  1A24  0008               	return
  6607  1A25                     __end_of_PS_2_INIT:	
  6608                           
  6609                           	psect	text10
  6610  1A4D                     __ptext10:	
  6611 ;; *************** function _INIT_PS_2_INTERRUPT *****************
  6612 ;; Defined at:
  6613 ;;		line 152 in file "PS_2.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  DATA_CLK        1    wreg     unsigned char 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;		None               void
  6620 ;; Registers used:
  6621 ;;		wreg, status,2
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;Total ram usage:        1 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    3
  6634 ;; This function calls:
  6635 ;;		Nothing
  6636 ;; This function is called by:
  6637 ;;		_PS_2_INIT
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function _INIT_PS_2_INTERRUPT
  6643  1A4D                     _INIT_PS_2_INTERRUPT:	
  6644                           
  6645                           ;incstack = 0
  6646                           ; Regs used in _INIT_PS_2_INTERRUPT: [wreg+status,2]
  6647                           ;INIT_PS_2_INTERRUPT@DATA_CLK stored from wreg
  6648  1A4D  0020               	movlb	0	; select bank0
  6649  1A4E  00A5               	movwf	INIT_PS_2_INTERRUPT@DATA_CLK
  6650                           
  6651                           ;PS_2.c: 154: IOCAP =0;
  6652  1A4F  0027               	movlb	7	; select bank7
  6653  1A50  0191               	clrf	17	;volatile
  6654                           
  6655                           ;PS_2.c: 155: IOCAN =0;
  6656  1A51  0192               	clrf	18	;volatile
  6657                           
  6658                           ;PS_2.c: 156: if(DATA_CLK == 0b00100000)
  6659  1A52  0020               	movlb	0	; select bank0
  6660  1A53  0825               	movf	INIT_PS_2_INTERRUPT@DATA_CLK,w
  6661  1A54  3A20               	xorlw	32
  6662  1A55  1D03               	skipz
  6663  1A56  2A5A               	goto	l574
  6664                           
  6665                           ;PS_2.c: 157: {
  6666                           ;PS_2.c: 160: IOCAN |= 0b00100000;
  6667  1A57  0027               	movlb	7	; select bank7
  6668  1A58  1692               	bsf	18,5	;volatile
  6669                           
  6670                           ;PS_2.c: 161: }
  6671  1A59  0008               	return
  6672  1A5A                     l574:	
  6673                           
  6674                           ;PS_2.c: 162: else
  6675                           ;PS_2.c: 163: {
  6676                           ;PS_2.c: 166: IOCAN |= 0b00010000;
  6677  1A5A  0027               	movlb	7	; select bank7
  6678  1A5B  1612               	bsf	18,4	;volatile
  6679  1A5C  0008               	return
  6680  1A5D                     __end_of_INIT_PS_2_INTERRUPT:	
  6681                           
  6682                           	psect	text11
  6683  1E83                     __ptext11:	
  6684 ;; *************** function _Keyboard_Connected *****************
  6685 ;; Defined at:
  6686 ;;		line 1135 in file "PS_2.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  i               4   65[BANK0 ] unsigned long 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      unsigned char 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;Total ram usage:        4 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    9
  6707 ;; This function calls:
  6708 ;;		_PS_2_DISABLE_INTERRUPT
  6709 ;;		_PS_2_ENABLE_INTERRUPT
  6710 ;;		_PS_2_Update
  6711 ;;		_Send_PS2
  6712 ;;		_delayUS
  6713 ;; This function is called by:
  6714 ;;		_main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _Keyboard_Connected
  6720  1E83                     _Keyboard_Connected:	
  6721                           
  6722                           ;PS_2.c: 1137: unsigned long i=0;
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _Keyboard_Connected: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6726  1E83  3000               	movlw	0
  6727  1E84  0020               	movlb	0	; select bank0
  6728  1E85  00E4               	movwf	Keyboard_Connected@i+3
  6729  1E86  3000               	movlw	0
  6730  1E87  00E3               	movwf	Keyboard_Connected@i+2
  6731  1E88  3000               	movlw	0
  6732  1E89  00E2               	movwf	Keyboard_Connected@i+1
  6733  1E8A  3000               	movlw	0
  6734  1E8B  00E1               	movwf	Keyboard_Connected@i
  6735                           
  6736                           ;PS_2.c: 1138: ECHO =0;
  6737  1E8C  0021               	movlb	1	; select bank1
  6738  1E8D  01E9               	clrf	_ECHO^(0+128)	;volatile
  6739                           
  6740                           ;PS_2.c: 1139: Send_PS2(0xEE);
  6741  1E8E  30EE               	movlw	238
  6742  1E8F  318C  24A9  319E   	fcall	_Send_PS2
  6743                           
  6744                           ;PS_2.c: 1140: PS_2_ENABLE_INTERRUPT(0b00100000);
  6745  1E92  3020               	movlw	32
  6746  1E93  318B  23C2  319E   	fcall	_PS_2_ENABLE_INTERRUPT
  6747                           
  6748                           ;PS_2.c: 1141: for(i=0;i<8000;i++)
  6749  1E96  3000               	movlw	0
  6750  1E97  0020               	movlb	0	; select bank0
  6751  1E98  00E4               	movwf	Keyboard_Connected@i+3
  6752  1E99  3000               	movlw	0
  6753  1E9A  00E3               	movwf	Keyboard_Connected@i+2
  6754  1E9B  3000               	movlw	0
  6755  1E9C  00E2               	movwf	Keyboard_Connected@i+1
  6756  1E9D  3000               	movlw	0
  6757  1E9E  00E1               	movwf	Keyboard_Connected@i
  6758  1E9F  2EA9               	goto	L4
  6759  1EA0                     l6963:	
  6760                           ;PS_2.c: 1146: {
  6761                           ;PS_2.c: 1147: break;
  6762                           
  6763  1EA0  3001               	movlw	1
  6764  1EA1  0020               	movlb	0	; select bank0
  6765  1EA2  07E1               	addwf	Keyboard_Connected@i,f
  6766  1EA3  3000               	movlw	0
  6767  1EA4  3DE2               	addwfc	Keyboard_Connected@i+1,f
  6768  1EA5  3000               	movlw	0
  6769  1EA6  3DE3               	addwfc	Keyboard_Connected@i+2,f
  6770  1EA7  3000               	movlw	0
  6771  1EA8  3DE4               	addwfc	Keyboard_Connected@i+3,f
  6772  1EA9                     L4:	
  6773  1EA9  3000               	movlw	0
  6774  1EAA  0264               	subwf	Keyboard_Connected@i+3,w
  6775  1EAB  1D03               	skipz
  6776  1EAC  2EB7               	goto	u9675
  6777  1EAD  3000               	movlw	0
  6778  1EAE  0263               	subwf	Keyboard_Connected@i+2,w
  6779  1EAF  1D03               	skipz
  6780  1EB0  2EB7               	goto	u9675
  6781  1EB1  301F               	movlw	31
  6782  1EB2  0262               	subwf	Keyboard_Connected@i+1,w
  6783  1EB3  1D03               	skipz
  6784  1EB4  2EB7               	goto	u9675
  6785  1EB5  3040               	movlw	64
  6786  1EB6  0261               	subwf	Keyboard_Connected@i,w
  6787  1EB7                     u9675:	
  6788  1EB7  1803               	btfsc	3,0
  6789  1EB8  2ECC               	goto	l6965
  6790                           
  6791                           ;PS_2.c: 1142: {
  6792                           ;PS_2.c: 1143: PS_2_Update();
  6793  1EB9  3181  2119  319E   	fcall	_PS_2_Update
  6794                           
  6795                           ;PS_2.c: 1144: delayUS(10);
  6796  1EBC  3000               	movlw	0
  6797  1EBD  0020               	movlb	0	; select bank0
  6798  1EBE  00A8               	movwf	delayUS@US+3
  6799  1EBF  3000               	movlw	0
  6800  1EC0  00A7               	movwf	delayUS@US+2
  6801  1EC1  3000               	movlw	0
  6802  1EC2  00A6               	movwf	delayUS@US+1
  6803  1EC3  300A               	movlw	10
  6804  1EC4  00A5               	movwf	delayUS@US
  6805  1EC5  3187  27C8  319E   	fcall	_delayUS
  6806                           
  6807                           ;PS_2.c: 1145: if(ECHO)
  6808  1EC8  0021               	movlb	1	; select bank1
  6809  1EC9  0869               	movf	_ECHO^(0+128),w	;volatile
  6810  1ECA  1903               	btfsc	3,2
  6811  1ECB  2EA0               	goto	l6963
  6812  1ECC                     l6965:	
  6813                           
  6814                           ;PS_2.c: 1148: }
  6815                           ;PS_2.c: 1149: }
  6816                           ;PS_2.c: 1150: PS_2_DISABLE_INTERRUPT(0b00100000);
  6817  1ECC  3020               	movlw	32
  6818  1ECD  319A  22F6  319E   	fcall	_PS_2_DISABLE_INTERRUPT
  6819                           
  6820                           ;PS_2.c: 1151: if(ECHO)
  6821  1ED0  0021               	movlb	1	; select bank1
  6822  1ED1  0869               	movf	_ECHO^(0+128),w	;volatile
  6823  1ED2  1903               	btfsc	3,2
  6824  1ED3  2ED6               	goto	l6975
  6825                           
  6826                           ;PS_2.c: 1152: {
  6827                           ;PS_2.c: 1153: return 1;
  6828  1ED4  3001               	movlw	1
  6829                           
  6830                           ;PS_2.c: 1154: }
  6831  1ED5  0008               	return
  6832  1ED6                     l6975:	
  6833                           
  6834                           ;PS_2.c: 1155: else
  6835                           ;PS_2.c: 1156: {
  6836                           ;PS_2.c: 1157: return 0;
  6837  1ED6  3000               	movlw	0
  6838  1ED7  0008               	return
  6839  1ED8                     __end_of_Keyboard_Connected:	
  6840                           
  6841                           	psect	text12
  6842  0119                     __ptext12:	
  6843 ;; *************** function _PS_2_Update *****************
  6844 ;; Defined at:
  6845 ;;		line 258 in file "PS_2.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  buf            60    0[BANK5 ] unsigned char [60]
  6850 ;;  temp            1   64[BANK5 ] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Locals:         0       0       0       0       0       0      65       0       0       0       0       0       
      +0       0
  6862 ;;      Temps:          0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Totals:         0       0       0       0       9       0      65       0       0       0       0       0       
      +0       0
  6864 ;;Total ram usage:       74 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    8
  6867 ;; This function calls:
  6868 ;;		_CheckSum_byte
  6869 ;;		_Decode_Scan_Code
  6870 ;;		_Decode_Scan_Code_Function
  6871 ;;		_Decode_Scan_Code_FunctionE0
  6872 ;;		_Decode_Scan_Code_Shift
  6873 ;;		_ISNUMBER
  6874 ;;		_PS_2_DISABLE_INTERRUPT
  6875 ;;		_PS_2_ENABLE_INTERRUPT
  6876 ;;		_Reverse_Byte
  6877 ;;		_Send_PS2
  6878 ;;		_SetBaud
  6879 ;;		_UART_send_break
  6880 ;;		_UARTchar
  6881 ;;		_UARTstringWAIT
  6882 ;;		___lmul
  6883 ;;		_delayUS
  6884 ;;		_sprintf
  6885 ;; This function is called by:
  6886 ;;		_main
  6887 ;;		_Keyboard_Connected
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           
  6892                           ;psect for function _PS_2_Update
  6893  0119                     _PS_2_Update:	
  6894                           
  6895                           ;PS_2.c: 260: unsigned char temp =0;
  6896                           
  6897                           ;incstack = 0
  6898                           ; Regs used in _PS_2_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6899  0119  0025               	movlb	5	; select bank5
  6900  011A  01E0               	clrf	PS_2_Update@temp^(0+640)
  6901                           
  6902                           ;PS_2.c: 261: unsigned char buf[60];
  6903                           ;PS_2.c: 263: if(Read_Timer < 20)
  6904  011B  3000               	movlw	0
  6905  011C  0022               	movlb	2	; select bank2
  6906  011D  026E               	subwf	(_Read_Timer+1)^(0+256),w
  6907  011E  3014               	movlw	20
  6908  011F  1903               	skipnz
  6909  0120  026D               	subwf	_Read_Timer^(0+256),w
  6910  0121  1803               	skipnc
  6911  0122  2928               	goto	l6239
  6912                           
  6913                           ;PS_2.c: 264: {
  6914                           ;PS_2.c: 265: Read_Timer++;
  6915  0123  3001               	movlw	1
  6916  0124  07ED               	addwf	_Read_Timer^(0+256),f
  6917  0125  3000               	movlw	0
  6918  0126  3DEE               	addwfc	(_Read_Timer+1)^(0+256),f
  6919                           
  6920                           ;PS_2.c: 266: }
  6921  0127  292A               	goto	l6241
  6922  0128                     l6239:	
  6923                           
  6924                           ;PS_2.c: 267: else
  6925                           ;PS_2.c: 268: {
  6926                           ;PS_2.c: 269: PS_2_bits = 0;
  6927  0128  0020               	movlb	0	; select bank0
  6928  0129  01EA               	clrf	_PS_2_bits
  6929  012A                     l6241:	
  6930                           
  6931                           ;PS_2.c: 270: }
  6932                           ;PS_2.c: 272: if(Read_Timer == 20 && PS_2_bits != 0)
  6933  012A  3014               	movlw	20
  6934  012B  0022               	movlb	2	; select bank2
  6935  012C  066D               	xorwf	_Read_Timer^(0+256),w
  6936  012D  046E               	iorwf	(_Read_Timer+1)^(0+256),w
  6937  012E  1D03               	skipz
  6938  012F  0008               	return
  6939  0130  0020               	movlb	0	; select bank0
  6940  0131  086A               	movf	_PS_2_bits,w
  6941  0132  1903               	btfsc	3,2
  6942  0133  0008               	return
  6943                           
  6944                           ;PS_2.c: 273: {
  6945                           ;PS_2.c: 275: PS_2_DISABLE_INTERRUPT(0b00100000);
  6946  0134  3020               	movlw	32
  6947  0135  319A  22F6  3181   	fcall	_PS_2_DISABLE_INTERRUPT
  6948                           
  6949                           ;PS_2.c: 276: PIE1bits.RCIE = 0;
  6950  0138  0021               	movlb	1	; select bank1
  6951  0139  1291               	bcf	17,5	;volatile
  6952                           
  6953                           ;PS_2.c: 278: if(PS_2_bits >= 11)
  6954  013A  300B               	movlw	11
  6955  013B  0020               	movlb	0	; select bank0
  6956  013C  026A               	subwf	_PS_2_bits,w
  6957  013D  1C03               	skipc
  6958  013E  2996               	goto	l6261
  6959                           
  6960                           ;PS_2.c: 279: {
  6961                           ;PS_2.c: 282: PS_2_Read_Data_First = PS_2_Read_Data_FirstTEMP;
  6962  013F  0024               	movlb	4	; select bank4
  6963  0140  0821               	movf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),w
  6964  0141  0023               	movlb	3	; select bank3
  6965  0142  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  6966  0143  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  6967  0144  0024               	movlb	4	; select bank4
  6968  0145  0820               	movf	_PS_2_Read_Data_FirstTEMP^(0+512),w
  6969  0146  0023               	movlb	3	; select bank3
  6970  0147  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  6971  0148  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  6972                           
  6973                           ;PS_2.c: 283: if(CheckSum_byte((PS_2_Read_Data_First >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_First & 0x02)>> 1))
  6974  0149  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  6975  014A  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  6976  014B  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  6977  014C  00AF               	movwf	??_PS_2_Update^(0+384)
  6978  014D  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  6979  014E  0CAF               	rrf	??_PS_2_Update^(0+384),f
  6980  014F  3001               	movlw	1
  6981  0150  052F               	andwf	??_PS_2_Update^(0+384),w
  6982  0151  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  6983  0152  3000               	movlw	0
  6984  0153  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  6985  0154  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  6986  0155  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  6987  0156  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  6988  0157  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  6989  0158  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  6990  0159  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  6991  015A  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  6992  015B  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  6993  015C  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  6994  015D  30FF               	movlw	255
  6995  015E  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  6996  015F  0020               	movlb	0	; select bank0
  6997  0160  00A5               	movwf	CheckSum_byte@This
  6998  0161  3000               	movlw	0
  6999  0162  0023               	movlb	3	; select bank3
  7000  0163  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7001  0164  0020               	movlb	0	; select bank0
  7002  0165  00A6               	movwf	CheckSum_byte@This+1
  7003  0166  3003               	movlw	3
  7004  0167  0023               	movlb	3	; select bank3
  7005  0168  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7006  0169  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7007  016A  0020               	movlb	0	; select bank0
  7008  016B  00A7               	movwf	CheckSum_byte@Odd_Even
  7009  016C  319B  2368  3181   	fcall	_CheckSum_byte
  7010  016F  0023               	movlb	3	; select bank3
  7011  0170  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7012  0171  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7013  0172  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7014  0173  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7015  0174  1D03               	skipz
  7016  0175  2978               	goto	u8165
  7017  0176  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7018  0177  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7019  0178                     u8165:	
  7020  0178  1D03               	skipz
  7021  0179  2994               	goto	l6259
  7022                           
  7023                           ;PS_2.c: 284: {
  7024                           ;PS_2.c: 286: PS_2_Read_Data_First = ((PS_2_Read_Data_First >> 2) & 0xFF);
  7025  017A  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7026  017B  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7027  017C  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7028  017D  00AF               	movwf	??_PS_2_Update^(0+384)
  7029  017E  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7030  017F  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7031  0180  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7032  0181  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7033  0182  30FF               	movlw	255
  7034  0183  052F               	andwf	??_PS_2_Update^(0+384),w
  7035  0184  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7036  0185  3000               	movlw	0
  7037  0186  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7038  0187  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7039                           
  7040                           ;PS_2.c: 287: PS_2_Read_Data_First = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_First);
  7041  0188  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  7042  0189  319E  262E  3181   	fcall	_Reverse_Byte
  7043  018C  0023               	movlb	3	; select bank3
  7044  018D  00AF               	movwf	??_PS_2_Update^(0+384)
  7045  018E  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7046  018F  082F               	movf	??_PS_2_Update^(0+384),w
  7047  0190  00A0               	movwf	_PS_2_Read_Data_First^(0+384)
  7048  0191  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7049  0192  00A1               	movwf	(_PS_2_Read_Data_First+1)^(0+384)
  7050                           
  7051                           ;PS_2.c: 288: }
  7052  0193  2996               	goto	l6261
  7053  0194                     l6259:	
  7054                           
  7055                           ;PS_2.c: 289: else
  7056                           ;PS_2.c: 290: {
  7057                           ;PS_2.c: 292: PS_2_Read_Data_First =0;
  7058  0194  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7059  0195  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7060  0196                     l6261:	
  7061                           
  7062                           ;PS_2.c: 293: }
  7063                           ;PS_2.c: 294: }
  7064                           ;PS_2.c: 295: if(PS_2_bits >= (22))
  7065  0196  3016               	movlw	22
  7066  0197  0020               	movlb	0	; select bank0
  7067  0198  026A               	subwf	_PS_2_bits,w
  7068  0199  1C03               	skipc
  7069  019A  29F4               	goto	l6273
  7070                           
  7071                           ;PS_2.c: 296: {
  7072                           ;PS_2.c: 299: PS_2_Read_Data_Second = PS_2_Read_Data_SecondTEMP;
  7073  019B  0024               	movlb	4	; select bank4
  7074  019C  0825               	movf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),w
  7075  019D  0023               	movlb	3	; select bank3
  7076  019E  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7077  019F  07A5               	addwf	(_PS_2_Read_Data_Second+1)^(0+384),f
  7078  01A0  0024               	movlb	4	; select bank4
  7079  01A1  0824               	movf	_PS_2_Read_Data_SecondTEMP^(0+512),w
  7080  01A2  0023               	movlb	3	; select bank3
  7081  01A3  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7082  01A4  07A4               	addwf	_PS_2_Read_Data_Second^(0+384),f
  7083                           
  7084                           ;PS_2.c: 300: if(CheckSum_byte((PS_2_Read_Data_Second >> 2) & 0xFF , 3) == ((PS_2_Read_D
      +                          ata_Second & 0x02)>> 1))
  7085  01A5  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7086  01A6  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7087  01A7  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7088  01A8  00AF               	movwf	??_PS_2_Update^(0+384)
  7089  01A9  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7090  01AA  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7091  01AB  3001               	movlw	1
  7092  01AC  052F               	andwf	??_PS_2_Update^(0+384),w
  7093  01AD  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7094  01AE  3000               	movlw	0
  7095  01AF  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7096  01B0  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7097  01B1  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7098  01B2  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7099  01B3  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7100  01B4  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7101  01B5  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7102  01B6  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7103  01B7  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7104  01B8  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7105  01B9  30FF               	movlw	255
  7106  01BA  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7107  01BB  0020               	movlb	0	; select bank0
  7108  01BC  00A5               	movwf	CheckSum_byte@This
  7109  01BD  3000               	movlw	0
  7110  01BE  0023               	movlb	3	; select bank3
  7111  01BF  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7112  01C0  0020               	movlb	0	; select bank0
  7113  01C1  00A6               	movwf	CheckSum_byte@This+1
  7114  01C2  3003               	movlw	3
  7115  01C3  0023               	movlb	3	; select bank3
  7116  01C4  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7117  01C5  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7118  01C6  0020               	movlb	0	; select bank0
  7119  01C7  00A7               	movwf	CheckSum_byte@Odd_Even
  7120  01C8  319B  2368  3181   	fcall	_CheckSum_byte
  7121  01CB  0023               	movlb	3	; select bank3
  7122  01CC  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7123  01CD  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7124  01CE  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7125  01CF  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7126  01D0  1D03               	skipz
  7127  01D1  29D4               	goto	u8185
  7128  01D2  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7129  01D3  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7130  01D4                     u8185:	
  7131  01D4  1D03               	skipz
  7132  01D5  29F0               	goto	l6271
  7133                           
  7134                           ;PS_2.c: 301: {
  7135                           ;PS_2.c: 303: PS_2_Read_Data_Second = ((PS_2_Read_Data_Second >> 2) & 0xFF);
  7136  01D6  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7137  01D7  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7138  01D8  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7139  01D9  00AF               	movwf	??_PS_2_Update^(0+384)
  7140  01DA  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7141  01DB  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7142  01DC  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7143  01DD  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7144  01DE  30FF               	movlw	255
  7145  01DF  052F               	andwf	??_PS_2_Update^(0+384),w
  7146  01E0  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7147  01E1  3000               	movlw	0
  7148  01E2  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7149  01E3  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7150                           
  7151                           ;PS_2.c: 304: PS_2_Read_Data_Second = (unsigned int) Reverse_Byte((unsigned char) PS_2_R
      +                          ead_Data_Second);
  7152  01E4  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7153  01E5  319E  262E  3181   	fcall	_Reverse_Byte
  7154  01E8  0023               	movlb	3	; select bank3
  7155  01E9  00AF               	movwf	??_PS_2_Update^(0+384)
  7156  01EA  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7157  01EB  082F               	movf	??_PS_2_Update^(0+384),w
  7158  01EC  00A4               	movwf	_PS_2_Read_Data_Second^(0+384)
  7159  01ED  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7160  01EE  00A5               	movwf	(_PS_2_Read_Data_Second+1)^(0+384)
  7161                           
  7162                           ;PS_2.c: 305: }
  7163  01EF  29F4               	goto	l6273
  7164  01F0                     l6271:	
  7165                           
  7166                           ;PS_2.c: 306: else
  7167                           ;PS_2.c: 307: {
  7168                           ;PS_2.c: 309: PS_2_Read_Data_First =0;
  7169  01F0  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7170  01F1  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7171                           
  7172                           ;PS_2.c: 310: PS_2_Read_Data_Second =0;
  7173  01F2  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7174  01F3  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7175  01F4                     l6273:	
  7176                           
  7177                           ;PS_2.c: 311: }
  7178                           ;PS_2.c: 312: }
  7179                           ;PS_2.c: 313: if(PS_2_bits >= (33))
  7180  01F4  3021               	movlw	33
  7181  01F5  0020               	movlb	0	; select bank0
  7182  01F6  026A               	subwf	_PS_2_bits,w
  7183  01F7  1C03               	skipc
  7184  01F8  2A54               	goto	l6285
  7185                           
  7186                           ;PS_2.c: 314: {
  7187                           ;PS_2.c: 317: PS_2_Read_Data_Third = PS_2_Read_Data_ThirdTEMP;
  7188  01F9  0024               	movlb	4	; select bank4
  7189  01FA  0827               	movf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),w
  7190  01FB  0023               	movlb	3	; select bank3
  7191  01FC  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7192  01FD  07A7               	addwf	(_PS_2_Read_Data_Third+1)^(0+384),f
  7193  01FE  0024               	movlb	4	; select bank4
  7194  01FF  0826               	movf	_PS_2_Read_Data_ThirdTEMP^(0+512),w
  7195  0200  0023               	movlb	3	; select bank3
  7196  0201  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7197  0202  07A6               	addwf	_PS_2_Read_Data_Third^(0+384),f
  7198                           
  7199                           ;PS_2.c: 318: if(CheckSum_byte((PS_2_Read_Data_Third >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Third & 0x02)>> 1))
  7200  0203  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7201  0204  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7202  0205  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7203  0206  00AF               	movwf	??_PS_2_Update^(0+384)
  7204  0207  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7205  0208  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7206  0209  3001               	movlw	1
  7207  020A  052F               	andwf	??_PS_2_Update^(0+384),w
  7208  020B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7209  020C  3000               	movlw	0
  7210  020D  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7211  020E  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7212  020F  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7213  0210  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7214  0211  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7215  0212  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7216  0213  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7217  0214  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7218  0215  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7219  0216  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7220  0217  30FF               	movlw	255
  7221  0218  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7222  0219  0020               	movlb	0	; select bank0
  7223  021A  00A5               	movwf	CheckSum_byte@This
  7224  021B  3000               	movlw	0
  7225  021C  0023               	movlb	3	; select bank3
  7226  021D  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7227  021E  0020               	movlb	0	; select bank0
  7228  021F  00A6               	movwf	CheckSum_byte@This+1
  7229  0220  3003               	movlw	3
  7230  0221  0023               	movlb	3	; select bank3
  7231  0222  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7232  0223  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7233  0224  0020               	movlb	0	; select bank0
  7234  0225  00A7               	movwf	CheckSum_byte@Odd_Even
  7235  0226  319B  2368  3181   	fcall	_CheckSum_byte
  7236  0229  0023               	movlb	3	; select bank3
  7237  022A  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7238  022B  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7239  022C  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7240  022D  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7241  022E  1D03               	skipz
  7242  022F  2A32               	goto	u8205
  7243  0230  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7244  0231  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7245  0232                     u8205:	
  7246  0232  1D03               	skipz
  7247  0233  2A4E               	goto	l6283
  7248                           
  7249                           ;PS_2.c: 319: {
  7250                           ;PS_2.c: 321: PS_2_Read_Data_Third = ((PS_2_Read_Data_Third >> 2) & 0xFF);
  7251  0234  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7252  0235  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7253  0236  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7254  0237  00AF               	movwf	??_PS_2_Update^(0+384)
  7255  0238  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7256  0239  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7257  023A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7258  023B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7259  023C  30FF               	movlw	255
  7260  023D  052F               	andwf	??_PS_2_Update^(0+384),w
  7261  023E  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7262  023F  3000               	movlw	0
  7263  0240  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7264  0241  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7265                           
  7266                           ;PS_2.c: 322: PS_2_Read_Data_Third = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Third);
  7267  0242  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7268  0243  319E  262E  3181   	fcall	_Reverse_Byte
  7269  0246  0023               	movlb	3	; select bank3
  7270  0247  00AF               	movwf	??_PS_2_Update^(0+384)
  7271  0248  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7272  0249  082F               	movf	??_PS_2_Update^(0+384),w
  7273  024A  00A6               	movwf	_PS_2_Read_Data_Third^(0+384)
  7274  024B  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7275  024C  00A7               	movwf	(_PS_2_Read_Data_Third+1)^(0+384)
  7276                           
  7277                           ;PS_2.c: 323: }
  7278  024D  2A54               	goto	l6285
  7279  024E                     l6283:	
  7280                           
  7281                           ;PS_2.c: 324: else
  7282                           ;PS_2.c: 325: {
  7283                           ;PS_2.c: 327: PS_2_Read_Data_First =0;
  7284  024E  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7285  024F  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7286                           
  7287                           ;PS_2.c: 328: PS_2_Read_Data_Second =0;
  7288  0250  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7289  0251  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7290                           
  7291                           ;PS_2.c: 329: PS_2_Read_Data_Third =0;
  7292  0252  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7293  0253  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7294  0254                     l6285:	
  7295                           
  7296                           ;PS_2.c: 330: }
  7297                           ;PS_2.c: 331: }
  7298                           ;PS_2.c: 332: if(PS_2_bits >= (44))
  7299  0254  302C               	movlw	44
  7300  0255  0020               	movlb	0	; select bank0
  7301  0256  026A               	subwf	_PS_2_bits,w
  7302  0257  1C03               	skipc
  7303  0258  2AB6               	goto	l6297
  7304                           
  7305                           ;PS_2.c: 333: {
  7306                           ;PS_2.c: 336: PS_2_Read_Data_Forth = PS_2_Read_Data_ForthTEMP;
  7307  0259  0024               	movlb	4	; select bank4
  7308  025A  0823               	movf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),w
  7309  025B  0023               	movlb	3	; select bank3
  7310  025C  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7311  025D  07A3               	addwf	(_PS_2_Read_Data_Forth+1)^(0+384),f
  7312  025E  0024               	movlb	4	; select bank4
  7313  025F  0822               	movf	_PS_2_Read_Data_ForthTEMP^(0+512),w
  7314  0260  0023               	movlb	3	; select bank3
  7315  0261  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7316  0262  07A2               	addwf	_PS_2_Read_Data_Forth^(0+384),f
  7317                           
  7318                           ;PS_2.c: 337: if(CheckSum_byte((PS_2_Read_Data_Forth >> 2) & 0xFF , 3) == ((PS_2_Read_Da
      +                          ta_Forth & 0x02)>> 1))
  7319  0263  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7320  0264  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7321  0265  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7322  0266  00AF               	movwf	??_PS_2_Update^(0+384)
  7323  0267  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7324  0268  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7325  0269  3001               	movlw	1
  7326  026A  052F               	andwf	??_PS_2_Update^(0+384),w
  7327  026B  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7328  026C  3000               	movlw	0
  7329  026D  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7330  026E  00B2               	movwf	(??_PS_2_Update+3)^(0+384)
  7331  026F  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7332  0270  00B4               	movwf	((??_PS_2_Update+4)^(0+384)+1)
  7333  0271  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7334  0272  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7335  0273  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7336  0274  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7337  0275  36B4               	lsrf	((??_PS_2_Update+4)^(0+384)+1),f
  7338  0276  0CB3               	rrf	(??_PS_2_Update+4)^(0+384),f
  7339  0277  30FF               	movlw	255
  7340  0278  0533               	andwf	(??_PS_2_Update+4)^(0+384),w
  7341  0279  0020               	movlb	0	; select bank0
  7342  027A  00A5               	movwf	CheckSum_byte@This
  7343  027B  3000               	movlw	0
  7344  027C  0023               	movlb	3	; select bank3
  7345  027D  0534               	andwf	(??_PS_2_Update+5)^(0+384),w
  7346  027E  0020               	movlb	0	; select bank0
  7347  027F  00A6               	movwf	CheckSum_byte@This+1
  7348  0280  3003               	movlw	3
  7349  0281  0023               	movlb	3	; select bank3
  7350  0282  00B5               	movwf	(??_PS_2_Update+6)^(0+384)
  7351  0283  0835               	movf	(??_PS_2_Update+6)^(0+384),w
  7352  0284  0020               	movlb	0	; select bank0
  7353  0285  00A7               	movwf	CheckSum_byte@Odd_Even
  7354  0286  319B  2368  3181   	fcall	_CheckSum_byte
  7355  0289  0023               	movlb	3	; select bank3
  7356  028A  00B6               	movwf	(??_PS_2_Update+7)^(0+384)
  7357  028B  01B7               	clrf	((??_PS_2_Update+7)^(0+384)+1)
  7358  028C  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  7359  028D  0637               	xorwf	(??_PS_2_Update+8)^(0+384),w
  7360  028E  1D03               	skipz
  7361  028F  2A92               	goto	u8225
  7362  0290  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  7363  0291  0636               	xorwf	(??_PS_2_Update+7)^(0+384),w
  7364  0292                     u8225:	
  7365  0292  1D03               	skipz
  7366  0293  2AAE               	goto	l6295
  7367                           
  7368                           ;PS_2.c: 338: {
  7369                           ;PS_2.c: 340: PS_2_Read_Data_Forth = ((PS_2_Read_Data_Forth >> 2) & 0xFF);
  7370  0294  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7371  0295  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  7372  0296  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7373  0297  00AF               	movwf	??_PS_2_Update^(0+384)
  7374  0298  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7375  0299  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7376  029A  36B0               	lsrf	(??_PS_2_Update^(0+384)+1),f
  7377  029B  0CAF               	rrf	??_PS_2_Update^(0+384),f
  7378  029C  30FF               	movlw	255
  7379  029D  052F               	andwf	??_PS_2_Update^(0+384),w
  7380  029E  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7381  029F  3000               	movlw	0
  7382  02A0  0530               	andwf	(??_PS_2_Update+1)^(0+384),w
  7383  02A1  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7384                           
  7385                           ;PS_2.c: 341: PS_2_Read_Data_Forth = (unsigned int) Reverse_Byte((unsigned char) PS_2_Re
      +                          ad_Data_Forth);
  7386  02A2  0822               	movf	_PS_2_Read_Data_Forth^(0+384),w
  7387  02A3  319E  262E  3181   	fcall	_Reverse_Byte
  7388  02A6  0023               	movlb	3	; select bank3
  7389  02A7  00AF               	movwf	??_PS_2_Update^(0+384)
  7390  02A8  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7391  02A9  082F               	movf	??_PS_2_Update^(0+384),w
  7392  02AA  00A2               	movwf	_PS_2_Read_Data_Forth^(0+384)
  7393  02AB  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7394  02AC  00A3               	movwf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7395                           
  7396                           ;PS_2.c: 342: }
  7397  02AD  2AB6               	goto	l6297
  7398  02AE                     l6295:	
  7399                           
  7400                           ;PS_2.c: 343: else
  7401                           ;PS_2.c: 344: {
  7402                           ;PS_2.c: 346: PS_2_Read_Data_First =0;
  7403  02AE  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7404  02AF  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7405                           
  7406                           ;PS_2.c: 347: PS_2_Read_Data_Second =0;
  7407  02B0  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7408  02B1  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7409                           
  7410                           ;PS_2.c: 348: PS_2_Read_Data_Third =0;
  7411  02B2  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7412  02B3  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7413                           
  7414                           ;PS_2.c: 349: PS_2_Read_Data_Forth =0;
  7415  02B4  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  7416  02B5  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  7417  02B6                     l6297:	
  7418                           
  7419                           ;PS_2.c: 350: }
  7420                           ;PS_2.c: 351: }
  7421                           ;PS_2.c: 353: if(PS_2_Read_Data_Forth)
  7422  02B6  0023               	movlb	3	; select bank3
  7423  02B7  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7424  02B8  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7425  02B9  1903               	skipnz
  7426  02BA  2AD1               	goto	l6309
  7427                           
  7428                           ;PS_2.c: 354: {
  7429                           ;PS_2.c: 355: if(PS_2_Read_Data_First != 0xF0 && PS_2_Read_Data_Second != 0xF0 &&
  7430                           ;PS_2.c: 356: PS_2_Read_Data_Third != 0xF0 && PS_2_Read_Data_Forth != 0xF0)
  7431  02BB  30F0               	movlw	240
  7432  02BC  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7433  02BD  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7434  02BE  1903               	skipnz
  7435  02BF  2C06               	goto	l6441
  7436  02C0  30F0               	movlw	240
  7437  02C1  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7438  02C2  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7439  02C3  1903               	skipnz
  7440  02C4  2C06               	goto	l6441
  7441  02C5  30F0               	movlw	240
  7442  02C6  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7443  02C7  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7444  02C8  1903               	skipnz
  7445  02C9  2C06               	goto	l6441
  7446  02CA  30F0               	movlw	240
  7447  02CB  0622               	xorwf	_PS_2_Read_Data_Forth^(0+384),w
  7448  02CC  0423               	iorwf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7449  02CD  1903               	skipnz
  7450  02CE  2C06               	goto	l6441
  7451                           
  7452                           ;PS_2.c: 357: {
  7453                           ;PS_2.c: 359: __nop();
  7454  02CF  0000               	nop
  7455                           
  7456                           ;PS_2.c: 360: }
  7457                           ;PS_2.c: 361: }
  7458  02D0  2C06               	goto	l6441
  7459  02D1                     l6309:	
  7460                           
  7461                           ;PS_2.c: 362: else if(PS_2_Read_Data_Third)
  7462  02D1  0023               	movlb	3	; select bank3
  7463  02D2  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7464  02D3  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7465  02D4  1903               	skipnz
  7466  02D5  2B26               	goto	l6345
  7467                           
  7468                           ;PS_2.c: 363: {
  7469                           ;PS_2.c: 365: if(PS_2_Read_Data_First == 0xF0 && PS_2_Read_Data_Third != 0xF0 &&
  7470                           ;PS_2.c: 366: PS_2_Read_Data_First != 0xE0 &&
  7471                           ;PS_2.c: 367: PS_2_Read_Data_Second != 0xE0 &&
  7472                           ;PS_2.c: 368: PS_2_Read_Data_Third != 0xE0)
  7473  02D6  30F0               	movlw	240
  7474  02D7  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7475  02D8  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7476  02D9  1D03               	skipz
  7477  02DA  2B01               	goto	l6329
  7478  02DB  30F0               	movlw	240
  7479  02DC  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7480  02DD  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7481  02DE  1903               	skipnz
  7482  02DF  2B01               	goto	l6329
  7483  02E0  30E0               	movlw	224
  7484  02E1  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7485  02E2  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7486  02E3  1903               	skipnz
  7487  02E4  2B01               	goto	l6329
  7488  02E5  30E0               	movlw	224
  7489  02E6  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7490  02E7  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7491  02E8  1903               	skipnz
  7492  02E9  2B01               	goto	l6329
  7493  02EA  30E0               	movlw	224
  7494  02EB  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7495  02EC  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7496  02ED  1903               	skipnz
  7497  02EE  2B01               	goto	l6329
  7498                           
  7499                           ;PS_2.c: 369: {
  7500                           ;PS_2.c: 371: if(Decode_Scan_Code_Shift(PS_2_Read_Data_Third))
  7501  02EF  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7502  02F0  319A  22CB  3181   	fcall	_Decode_Scan_Code_Shift
  7503  02F3  3A00               	xorlw	0
  7504  02F4  1903               	skipnz
  7505  02F5  2B01               	goto	l6329
  7506                           
  7507                           ;PS_2.c: 372: {
  7508                           ;PS_2.c: 374: PS_2_Read_Data_First = PS_2_Read_Data_Third;
  7509  02F6  0023               	movlb	3	; select bank3
  7510  02F7  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7511  02F8  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  7512  02F9  07A1               	addwf	(_PS_2_Read_Data_First+1)^(0+384),f
  7513  02FA  0826               	movf	_PS_2_Read_Data_Third^(0+384),w
  7514  02FB  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  7515  02FC  07A0               	addwf	_PS_2_Read_Data_First^(0+384),f
  7516                           
  7517                           ;PS_2.c: 375: PS_2_Read_Data_Second = 0;
  7518  02FD  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  7519  02FE  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  7520                           
  7521                           ;PS_2.c: 376: PS_2_Read_Data_Third = 0;
  7522  02FF  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  7523  0300  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  7524  0301                     l6329:	
  7525                           
  7526                           ;PS_2.c: 377: }
  7527                           ;PS_2.c: 378: }
  7528                           ;PS_2.c: 379: if(PS_2_Read_Data_First == 0xE0)
  7529  0301  30E0               	movlw	224
  7530  0302  0023               	movlb	3	; select bank3
  7531  0303  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7532  0304  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7533  0305  1D03               	skipz
  7534  0306  2C06               	goto	l6441
  7535                           
  7536                           ;PS_2.c: 380: {
  7537                           ;PS_2.c: 381: if(PS_2_Read_Data_Second == 0xF0)
  7538  0307  30F0               	movlw	240
  7539  0308  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7540  0309  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7541  030A  1D03               	skipz
  7542  030B  2C06               	goto	l6441
  7543                           
  7544                           ;PS_2.c: 382: {
  7545                           ;PS_2.c: 383: if(PS_2_Read_Data_Third == 0x11 )
  7546  030C  3011               	movlw	17
  7547  030D  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7548  030E  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7549  030F  1D03               	skipz
  7550  0310  2B14               	goto	l6337
  7551                           
  7552                           ;PS_2.c: 384: {
  7553                           ;PS_2.c: 385: LALT = 0;
  7554  0311  0022               	movlb	2	; select bank2
  7555  0312  01E7               	clrf	_LALT^(0+256)
  7556                           
  7557                           ;PS_2.c: 386: }
  7558  0313  2C06               	goto	l6441
  7559  0314                     l6337:	
  7560                           
  7561                           ;PS_2.c: 387: else if(PS_2_Read_Data_Third == 0x14 )
  7562  0314  3014               	movlw	20
  7563  0315  0023               	movlb	3	; select bank3
  7564  0316  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7565  0317  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7566  0318  1D03               	skipz
  7567  0319  2B1D               	goto	l6341
  7568                           
  7569                           ;PS_2.c: 388: {
  7570                           ;PS_2.c: 389: LControl = 0;
  7571  031A  0022               	movlb	2	; select bank2
  7572  031B  01E8               	clrf	_LControl^(0+256)
  7573                           
  7574                           ;PS_2.c: 390: }
  7575  031C  2C06               	goto	l6441
  7576  031D                     l6341:	
  7577                           
  7578                           ;PS_2.c: 391: else if(PS_2_Read_Data_Third == 0x71 )
  7579  031D  3071               	movlw	113
  7580  031E  0023               	movlb	3	; select bank3
  7581  031F  0626               	xorwf	_PS_2_Read_Data_Third^(0+384),w
  7582  0320  0427               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7583  0321  1D03               	skipz
  7584  0322  2C06               	goto	l6441
  7585                           
  7586                           ;PS_2.c: 392: {
  7587                           ;PS_2.c: 393: Delete = 0;
  7588  0323  0022               	movlb	2	; select bank2
  7589  0324  01E6               	clrf	_Delete^(0+256)
  7590                           
  7591                           ;PS_2.c: 394: }
  7592                           ;PS_2.c: 395: }
  7593                           ;PS_2.c: 396: }
  7594                           ;PS_2.c: 397: }
  7595  0325  2C06               	goto	l6441
  7596  0326                     l6345:	
  7597                           
  7598                           ;PS_2.c: 398: else if(PS_2_Read_Data_Second)
  7599  0326  0023               	movlb	3	; select bank3
  7600  0327  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7601  0328  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7602  0329  1903               	skipnz
  7603  032A  2C06               	goto	l6441
  7604                           
  7605                           ;PS_2.c: 399: {
  7606                           ;PS_2.c: 401: if(PS_2_Read_Data_First == 0xF0)
  7607  032B  30F0               	movlw	240
  7608  032C  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7609  032D  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7610  032E  1D03               	skipz
  7611  032F  2BAB               	goto	l6409
  7612                           
  7613                           ;PS_2.c: 402: {
  7614                           ;PS_2.c: 404: if(PS_2_Read_Data_Second == 0x12)
  7615  0330  3012               	movlw	18
  7616  0331  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7617  0332  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7618  0333  1D03               	skipz
  7619  0334  2B37               	goto	l6353
  7620                           
  7621                           ;PS_2.c: 405: {
  7622                           ;PS_2.c: 406: Right_Shift_Key =0;
  7623  0335  01AD               	clrf	_Right_Shift_Key^(0+384)
  7624                           
  7625                           ;PS_2.c: 407: }
  7626  0336  2B4C               	goto	l6365
  7627  0337                     l6353:	
  7628                           
  7629                           ;PS_2.c: 408: else if(PS_2_Read_Data_Second == 0x59)
  7630  0337  3059               	movlw	89
  7631  0338  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7632  0339  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7633  033A  1D03               	skipz
  7634  033B  2B3E               	goto	l6357
  7635                           
  7636                           ;PS_2.c: 409: {
  7637                           ;PS_2.c: 410: Left_Shift_Key =0;
  7638  033C  01AA               	clrf	_Left_Shift_Key^(0+384)
  7639                           
  7640                           ;PS_2.c: 411: }
  7641  033D  2B4C               	goto	l6365
  7642  033E                     l6357:	
  7643                           
  7644                           ;PS_2.c: 412: else if(PS_2_Read_Data_Second == 0x14)
  7645  033E  3014               	movlw	20
  7646  033F  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7647  0340  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7648  0341  1D03               	skipz
  7649  0342  2B46               	goto	l6361
  7650                           
  7651                           ;PS_2.c: 413: {
  7652                           ;PS_2.c: 414: RControl =0;
  7653  0343  0022               	movlb	2	; select bank2
  7654  0344  01EA               	clrf	_RControl^(0+256)
  7655                           
  7656                           ;PS_2.c: 415: }
  7657  0345  2B4C               	goto	l6365
  7658  0346                     l6361:	
  7659                           
  7660                           ;PS_2.c: 416: else if(PS_2_Read_Data_Second == 0x11 )
  7661  0346  3011               	movlw	17
  7662  0347  0023               	movlb	3	; select bank3
  7663  0348  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7664  0349  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7665  034A  1903               	btfsc	3,2
  7666                           
  7667                           ;PS_2.c: 417: {
  7668                           ;PS_2.c: 418: RALT =0;
  7669  034B  01AC               	clrf	_RALT^(0+384)
  7670  034C                     l6365:	
  7671                           
  7672                           ;PS_2.c: 419: }
  7673                           ;PS_2.c: 420: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
  7674  034C  3059               	movlw	89
  7675  034D  0023               	movlb	3	; select bank3
  7676  034E  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7677  034F  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7678  0350  1903               	skipnz
  7679  0351  2B57               	goto	l6369
  7680  0352  3012               	movlw	18
  7681  0353  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7682  0354  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7683  0355  1D03               	skipz
  7684  0356  2BA3               	goto	l6405
  7685  0357                     l6369:	
  7686                           
  7687                           ;PS_2.c: 421: {
  7688                           ;PS_2.c: 422: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
  7689  0357  08AD               	movf	_Right_Shift_Key^(0+384),f
  7690  0358  1D03               	skipz
  7691  0359  2C06               	goto	l6441
  7692  035A  08AA               	movf	_Left_Shift_Key^(0+384),f
  7693  035B  1D03               	skipz
  7694  035C  2C06               	goto	l6441
  7695                           
  7696                           ;PS_2.c: 423: {
  7697                           ;PS_2.c: 424: if(!Send_PS2(0xED))
  7698  035D  30ED               	movlw	237
  7699  035E  318C  24A9  3181   	fcall	_Send_PS2
  7700  0361  3800               	iorlw	0
  7701  0362  1D03               	skipz
  7702  0363  2B6D               	goto	l6379
  7703                           
  7704                           ;PS_2.c: 425: {
  7705                           ;PS_2.c: 426: if(!Send_PS2(0x00))
  7706  0364  3000               	movlw	0
  7707  0365  318C  24A9  3181   	fcall	_Send_PS2
  7708  0368  3800               	iorlw	0
  7709  0369  1D03               	skipz
  7710  036A  2B6D               	goto	l6379
  7711                           
  7712                           ;PS_2.c: 427: {
  7713                           ;PS_2.c: 428: Shift_Key = 0;
  7714  036B  0023               	movlb	3	; select bank3
  7715  036C  01AE               	clrf	_Shift_Key^(0+384)
  7716  036D                     l6379:	
  7717                           
  7718                           ;PS_2.c: 429: }
  7719                           ;PS_2.c: 430: }
  7720                           ;PS_2.c: 431: if(Caps_Lock)
  7721  036D  0023               	movlb	3	; select bank3
  7722  036E  0829               	movf	_Caps_Lock^(0+384),w
  7723  036F  1903               	btfsc	3,2
  7724  0370  2B8A               	goto	l6393
  7725                           
  7726                           ;PS_2.c: 432: {
  7727                           ;PS_2.c: 433: CapsCount=0;
  7728  0371  01A8               	clrf	_CapsCount^(0+384)
  7729  0372                     l6391:	
  7730                           ;PS_2.c: 434: while(CapsCount<10)
  7731                           
  7732  0372  300A               	movlw	10
  7733  0373  0228               	subwf	_CapsCount^(0+384),w
  7734  0374  1803               	btfsc	3,0
  7735  0375  2C06               	goto	l6441
  7736                           
  7737                           ;PS_2.c: 435: {
  7738                           ;PS_2.c: 436: if(!Send_PS2(0xED))
  7739  0376  30ED               	movlw	237
  7740  0377  318C  24A9  3181   	fcall	_Send_PS2
  7741  037A  3800               	iorlw	0
  7742  037B  1D03               	skipz
  7743  037C  2B84               	goto	l6389
  7744                           
  7745                           ;PS_2.c: 437: {
  7746                           ;PS_2.c: 438: if(!Send_PS2(0x04))
  7747  037D  3004               	movlw	4
  7748  037E  318C  24A9  3181   	fcall	_Send_PS2
  7749  0381  3800               	iorlw	0
  7750  0382  1903               	btfsc	3,2
  7751  0383  2C06               	goto	l6441
  7752  0384                     l6389:	
  7753                           ;PS_2.c: 439: {
  7754                           ;PS_2.c: 440: break;
  7755                           
  7756                           
  7757                           ;PS_2.c: 441: }
  7758                           ;PS_2.c: 442: }
  7759                           ;PS_2.c: 443: CapsCount++;
  7760  0384  3001               	movlw	1
  7761  0385  0023               	movlb	3	; select bank3
  7762  0386  00AF               	movwf	??_PS_2_Update^(0+384)
  7763  0387  082F               	movf	??_PS_2_Update^(0+384),w
  7764  0388  07A8               	addwf	_CapsCount^(0+384),f
  7765  0389  2B72               	goto	l6391
  7766  038A                     l6393:	
  7767                           ;PS_2.c: 444: }
  7768                           ;PS_2.c: 445: }
  7769                           
  7770                           
  7771                           ;PS_2.c: 446: else
  7772                           ;PS_2.c: 447: {
  7773                           ;PS_2.c: 448: CapsCount=0;
  7774  038A  01A8               	clrf	_CapsCount^(0+384)
  7775  038B                     l6403:	
  7776                           ;PS_2.c: 449: while(CapsCount<10)
  7777                           
  7778  038B  300A               	movlw	10
  7779  038C  0228               	subwf	_CapsCount^(0+384),w
  7780  038D  1803               	btfsc	3,0
  7781  038E  2C06               	goto	l6441
  7782                           
  7783                           ;PS_2.c: 450: {
  7784                           ;PS_2.c: 451: if(!Send_PS2(0xED))
  7785  038F  30ED               	movlw	237
  7786  0390  318C  24A9  3181   	fcall	_Send_PS2
  7787  0393  3800               	iorlw	0
  7788  0394  1D03               	skipz
  7789  0395  2B9D               	goto	l6401
  7790                           
  7791                           ;PS_2.c: 452: {
  7792                           ;PS_2.c: 453: if(!Send_PS2(0x00))
  7793  0396  3000               	movlw	0
  7794  0397  318C  24A9  3181   	fcall	_Send_PS2
  7795  039A  3800               	iorlw	0
  7796  039B  1903               	btfsc	3,2
  7797  039C  2C06               	goto	l6441
  7798  039D                     l6401:	
  7799                           ;PS_2.c: 454: {
  7800                           ;PS_2.c: 455: break;
  7801                           
  7802                           
  7803                           ;PS_2.c: 456: }
  7804                           ;PS_2.c: 457: }
  7805                           ;PS_2.c: 458: CapsCount++;
  7806  039D  3001               	movlw	1
  7807  039E  0023               	movlb	3	; select bank3
  7808  039F  00AF               	movwf	??_PS_2_Update^(0+384)
  7809  03A0  082F               	movf	??_PS_2_Update^(0+384),w
  7810  03A1  07A8               	addwf	_CapsCount^(0+384),f
  7811  03A2  2B8B               	goto	l6403
  7812  03A3                     l6405:	
  7813                           ;PS_2.c: 459: }
  7814                           ;PS_2.c: 460: }
  7815                           ;PS_2.c: 461: }
  7816                           ;PS_2.c: 462: }
  7817                           
  7818                           
  7819                           ;PS_2.c: 463: else if(PS_2_Read_Data_Second == 0x58)
  7820  03A3  3058               	movlw	88
  7821  03A4  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7822  03A5  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7823  03A6  1D03               	skipz
  7824  03A7  2C06               	goto	l6441
  7825                           
  7826                           ;PS_2.c: 464: {
  7827                           ;PS_2.c: 465: Caps_Lock_Key = 0;
  7828  03A8  0022               	movlb	2	; select bank2
  7829  03A9  01E4               	clrf	_Caps_Lock_Key^(0+256)
  7830                           
  7831                           ;PS_2.c: 466: }
  7832                           ;PS_2.c: 467: }
  7833  03AA  2C06               	goto	l6441
  7834  03AB                     l6409:	
  7835                           
  7836                           ;PS_2.c: 468: else if(PS_2_Read_Data_First == 0xE0)
  7837  03AB  30E0               	movlw	224
  7838  03AC  0023               	movlb	3	; select bank3
  7839  03AD  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7840  03AE  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7841  03AF  1D03               	skipz
  7842  03B0  2C06               	goto	l6441
  7843                           
  7844                           ;PS_2.c: 469: {
  7845                           ;PS_2.c: 471: if(PS_2_Read_Data_Second == 0x11 )
  7846  03B1  3011               	movlw	17
  7847  03B2  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7848  03B3  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7849  03B4  1D03               	skipz
  7850  03B5  2BBA               	goto	l6415
  7851                           
  7852                           ;PS_2.c: 472: {
  7853                           ;PS_2.c: 473: LALT = 1;
  7854  03B6  0022               	movlb	2	; select bank2
  7855  03B7  01E7               	clrf	_LALT^(0+256)
  7856  03B8  0AE7               	incf	_LALT^(0+256),f
  7857                           
  7858                           ;PS_2.c: 474: }
  7859  03B9  2BCD               	goto	l659
  7860  03BA                     l6415:	
  7861                           
  7862                           ;PS_2.c: 475: else if(PS_2_Read_Data_Second == 0x14 )
  7863  03BA  3014               	movlw	20
  7864  03BB  0023               	movlb	3	; select bank3
  7865  03BC  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7866  03BD  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7867  03BE  1D03               	skipz
  7868  03BF  2BC4               	goto	l6419
  7869                           
  7870                           ;PS_2.c: 476: {
  7871                           ;PS_2.c: 477: LControl = 1;
  7872  03C0  0022               	movlb	2	; select bank2
  7873  03C1  01E8               	clrf	_LControl^(0+256)
  7874  03C2  0AE8               	incf	_LControl^(0+256),f
  7875                           
  7876                           ;PS_2.c: 478: }
  7877  03C3  2BCD               	goto	l659
  7878  03C4                     l6419:	
  7879                           
  7880                           ;PS_2.c: 479: else if(PS_2_Read_Data_Second == 0x71 )
  7881  03C4  3071               	movlw	113
  7882  03C5  0023               	movlb	3	; select bank3
  7883  03C6  0624               	xorwf	_PS_2_Read_Data_Second^(0+384),w
  7884  03C7  0425               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7885  03C8  1D03               	skipz
  7886  03C9  2BCD               	goto	l659
  7887                           
  7888                           ;PS_2.c: 480: {
  7889                           ;PS_2.c: 481: Delete = 1;
  7890  03CA  0022               	movlb	2	; select bank2
  7891  03CB  01E6               	clrf	_Delete^(0+256)
  7892  03CC  0AE6               	incf	_Delete^(0+256),f
  7893  03CD                     l659:	
  7894                           
  7895                           ;PS_2.c: 482: }
  7896                           ;PS_2.c: 483: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
  7897  03CD  0025               	movlb	5	; select bank5
  7898  03CE  01DC               	clrf	_PS_2_Update$817^(0+640)
  7899  03CF  0ADC               	incf	_PS_2_Update$817^(0+640),f
  7900  03D0  0022               	movlb	2	; select bank2
  7901  03D1  08E7               	movf	_LALT^(0+256),f
  7902  03D2  1D03               	skipz
  7903  03D3  2BDA               	goto	l6429
  7904  03D4  0023               	movlb	3	; select bank3
  7905  03D5  08AC               	movf	_RALT^(0+384),f
  7906  03D6  1D03               	skipz
  7907  03D7  2BDA               	goto	l6429
  7908  03D8  0025               	movlb	5	; select bank5
  7909  03D9  01DC               	clrf	_PS_2_Update$817^(0+640)
  7910  03DA                     l6429:	
  7911  03DA  0025               	movlb	5	; select bank5
  7912  03DB  01DD               	clrf	_PS_2_Update$818^(0+640)
  7913  03DC  0ADD               	incf	_PS_2_Update$818^(0+640),f
  7914  03DD  0022               	movlb	2	; select bank2
  7915  03DE  08EA               	movf	_RControl^(0+256),f
  7916  03DF  1D03               	skipz
  7917  03E0  2BE6               	goto	l6437
  7918  03E1  08E8               	movf	_LControl^(0+256),f
  7919  03E2  1D03               	skipz
  7920  03E3  2BE6               	goto	l6437
  7921  03E4  0025               	movlb	5	; select bank5
  7922  03E5  01DD               	clrf	_PS_2_Update$818^(0+640)
  7923  03E6                     l6437:	
  7924  03E6  0022               	movlb	2	; select bank2
  7925  03E7  0866               	movf	_Delete^(0+256),w
  7926  03E8  0023               	movlb	3	; select bank3
  7927  03E9  00AF               	movwf	??_PS_2_Update^(0+384)
  7928  03EA  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  7929  03EB  0025               	movlb	5	; select bank5
  7930  03EC  085D               	movf	_PS_2_Update$818^(0+640),w
  7931  03ED  075C               	addwf	_PS_2_Update$817^(0+640),w
  7932  03EE  0023               	movlb	3	; select bank3
  7933  03EF  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  7934  03F0  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  7935  03F1  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  7936  03F2  082F               	movf	??_PS_2_Update^(0+384),w
  7937  03F3  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  7938  03F4  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  7939  03F5  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  7940  03F6  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  7941  03F7  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  7942  03F8  3003               	movlw	3
  7943  03F9  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  7944  03FA  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  7945  03FB  1903               	skipnz
  7946  03FC  2C06               	goto	l6441
  7947                           
  7948                           ;PS_2.c: 484: {
  7949                           ;PS_2.c: 486: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
  7950  03FD  0824               	movf	_PS_2_Read_Data_Second^(0+384),w
  7951  03FE  319A  22B8  3181   	fcall	_Decode_Scan_Code_FunctionE0
  7952  0401  0023               	movlb	3	; select bank3
  7953  0402  00AF               	movwf	??_PS_2_Update^(0+384)
  7954  0403  082F               	movf	??_PS_2_Update^(0+384),w
  7955  0404  0025               	movlb	5	; select bank5
  7956  0405  00E0               	movwf	PS_2_Update@temp^(0+640)
  7957  0406                     l6441:	
  7958                           
  7959                           ;PS_2.c: 487: }
  7960                           ;PS_2.c: 488: }
  7961                           ;PS_2.c: 489: }
  7962                           ;PS_2.c: 490: if(PS_2_Read_Data_First && PS_2_Read_Data_Second == 0 &&
  7963                           ;PS_2.c: 491: PS_2_Read_Data_Third == 0 && PS_2_Read_Data_Forth == 0)
  7964  0406  0023               	movlb	3	; select bank3
  7965  0407  0821               	movf	(_PS_2_Read_Data_First+1)^(0+384),w
  7966  0408  0420               	iorwf	_PS_2_Read_Data_First^(0+384),w
  7967  0409  1903               	skipnz
  7968  040A  2D5F               	goto	l6591
  7969  040B  0825               	movf	(_PS_2_Read_Data_Second+1)^(0+384),w
  7970  040C  0424               	iorwf	_PS_2_Read_Data_Second^(0+384),w
  7971  040D  1D03               	skipz
  7972  040E  2D5F               	goto	l6591
  7973  040F  0827               	movf	(_PS_2_Read_Data_Third+1)^(0+384),w
  7974  0410  0426               	iorwf	_PS_2_Read_Data_Third^(0+384),w
  7975  0411  1D03               	skipz
  7976  0412  2D5F               	goto	l6591
  7977  0413  0823               	movf	(_PS_2_Read_Data_Forth+1)^(0+384),w
  7978  0414  0422               	iorwf	_PS_2_Read_Data_Forth^(0+384),w
  7979  0415  1D03               	skipz
  7980  0416  2D5F               	goto	l6591
  7981                           
  7982                           ;PS_2.c: 492: {
  7983                           ;PS_2.c: 494: if(PS_2_Read_Data_First == 0x12)
  7984  0417  3012               	movlw	18
  7985  0418  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  7986  0419  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  7987  041A  1D03               	skipz
  7988  041B  2C1F               	goto	l6453
  7989                           
  7990                           ;PS_2.c: 495: {
  7991                           ;PS_2.c: 496: Right_Shift_Key = 1;
  7992  041C  01AD               	clrf	_Right_Shift_Key^(0+384)
  7993  041D  0AAD               	incf	_Right_Shift_Key^(0+384),f
  7994                           
  7995                           ;PS_2.c: 497: }
  7996  041E  2C26               	goto	l6457
  7997  041F                     l6453:	
  7998                           
  7999                           ;PS_2.c: 498: else if(PS_2_Read_Data_First == 0x59)
  8000  041F  3059               	movlw	89
  8001  0420  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8002  0421  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8003  0422  1D03               	skipz
  8004  0423  2C26               	goto	l6457
  8005                           
  8006                           ;PS_2.c: 499: {
  8007                           ;PS_2.c: 500: Left_Shift_Key = 1;
  8008  0424  01AA               	clrf	_Left_Shift_Key^(0+384)
  8009  0425  0AAA               	incf	_Left_Shift_Key^(0+384),f
  8010  0426                     l6457:	
  8011                           
  8012                           ;PS_2.c: 501: }
  8013                           ;PS_2.c: 502: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
  8014  0426  082D               	movf	_Right_Shift_Key^(0+384),w
  8015  0427  3A01               	xorlw	1
  8016  0428  1D03               	skipz
  8017  0429  2C2E               	goto	l6461
  8018  042A  0022               	movlb	2	; select bank2
  8019  042B  086B               	movf	_Right_Shift_Key_old^(0+256),w
  8020  042C  1903               	btfsc	3,2
  8021  042D  2C37               	goto	l6465
  8022  042E                     l6461:	
  8023  042E  0023               	movlb	3	; select bank3
  8024  042F  082A               	movf	_Left_Shift_Key^(0+384),w
  8025  0430  3A01               	xorlw	1
  8026  0431  1D03               	skipz
  8027  0432  2C77               	goto	l6493
  8028  0433  0022               	movlb	2	; select bank2
  8029  0434  08E9               	movf	_Left_Shift_Key_old^(0+256),f
  8030  0435  1D03               	skipz
  8031  0436  2C77               	goto	l6493
  8032  0437                     l6465:	
  8033                           
  8034                           ;PS_2.c: 503: {
  8035                           ;PS_2.c: 505: if(!Send_PS2(0xED))
  8036  0437  30ED               	movlw	237
  8037  0438  318C  24A9  3181   	fcall	_Send_PS2
  8038  043B  3800               	iorlw	0
  8039  043C  1D03               	skipz
  8040  043D  2C77               	goto	l6493
  8041                           
  8042                           ;PS_2.c: 506: {
  8043                           ;PS_2.c: 507: if(Caps_Lock)
  8044  043E  0023               	movlb	3	; select bank3
  8045  043F  0829               	movf	_Caps_Lock^(0+384),w
  8046  0440  1903               	btfsc	3,2
  8047  0441  2C5B               	goto	l6481
  8048                           
  8049                           ;PS_2.c: 508: {
  8050                           ;PS_2.c: 509: CapsCount=0;
  8051  0442  01A8               	clrf	_CapsCount^(0+384)
  8052  0443                     l6479:	
  8053                           ;PS_2.c: 510: while(CapsCount<10)
  8054                           
  8055  0443  300A               	movlw	10
  8056  0444  0228               	subwf	_CapsCount^(0+384),w
  8057  0445  1803               	btfsc	3,0
  8058  0446  2C77               	goto	l6493
  8059                           
  8060                           ;PS_2.c: 511: {
  8061                           ;PS_2.c: 512: if(!Send_PS2(0xED))
  8062  0447  30ED               	movlw	237
  8063  0448  318C  24A9  3181   	fcall	_Send_PS2
  8064  044B  3800               	iorlw	0
  8065  044C  1D03               	skipz
  8066  044D  2C55               	goto	l6477
  8067                           
  8068                           ;PS_2.c: 513: {
  8069                           ;PS_2.c: 514: if(!Send_PS2(0x05))
  8070  044E  3005               	movlw	5
  8071  044F  318C  24A9  3181   	fcall	_Send_PS2
  8072  0452  3800               	iorlw	0
  8073  0453  1903               	btfsc	3,2
  8074  0454  2C74               	goto	l6487
  8075  0455                     l6477:	
  8076                           ;PS_2.c: 517: break;
  8077                           
  8078                           ;PS_2.c: 515: {
  8079                           ;PS_2.c: 516: Shift_Key = 1;
  8080                           
  8081                           
  8082                           ;PS_2.c: 518: }
  8083                           ;PS_2.c: 519: }
  8084                           ;PS_2.c: 520: CapsCount++;
  8085  0455  3001               	movlw	1
  8086  0456  0023               	movlb	3	; select bank3
  8087  0457  00AF               	movwf	??_PS_2_Update^(0+384)
  8088  0458  082F               	movf	??_PS_2_Update^(0+384),w
  8089  0459  07A8               	addwf	_CapsCount^(0+384),f
  8090  045A  2C43               	goto	l6479
  8091  045B                     l6481:	
  8092                           ;PS_2.c: 521: }
  8093                           ;PS_2.c: 522: }
  8094                           
  8095                           
  8096                           ;PS_2.c: 523: else
  8097                           ;PS_2.c: 524: {
  8098                           ;PS_2.c: 525: CapsCount=0;
  8099  045B  01A8               	clrf	_CapsCount^(0+384)
  8100                           
  8101                           ;PS_2.c: 526: while(CapsCount<10)
  8102  045C  2C62               	goto	l6491
  8103  045D                     l6489:	
  8104                           ;PS_2.c: 533: break;
  8105                           
  8106                           
  8107                           ;PS_2.c: 534: }
  8108                           ;PS_2.c: 535: }
  8109                           ;PS_2.c: 536: CapsCount++;
  8110  045D  3001               	movlw	1
  8111  045E  0023               	movlb	3	; select bank3
  8112  045F  00AF               	movwf	??_PS_2_Update^(0+384)
  8113  0460  082F               	movf	??_PS_2_Update^(0+384),w
  8114  0461  07A8               	addwf	_CapsCount^(0+384),f
  8115  0462                     l6491:	
  8116  0462  300A               	movlw	10
  8117  0463  0228               	subwf	_CapsCount^(0+384),w
  8118  0464  1803               	btfsc	3,0
  8119  0465  2C77               	goto	l6493
  8120                           
  8121                           ;PS_2.c: 527: {
  8122                           ;PS_2.c: 528: if(!Send_PS2(0xED))
  8123  0466  30ED               	movlw	237
  8124  0467  318C  24A9  3181   	fcall	_Send_PS2
  8125  046A  3800               	iorlw	0
  8126  046B  1D03               	skipz
  8127  046C  2C5D               	goto	l6489
  8128                           
  8129                           ;PS_2.c: 529: {
  8130                           ;PS_2.c: 530: if(!Send_PS2(0x01))
  8131  046D  3001               	movlw	1
  8132  046E  318C  24A9  3181   	fcall	_Send_PS2
  8133  0471  3800               	iorlw	0
  8134  0472  1D03               	skipz
  8135  0473  2C5D               	goto	l6489
  8136  0474                     l6487:	
  8137                           
  8138                           ;PS_2.c: 531: {
  8139                           ;PS_2.c: 532: Shift_Key = 1;
  8140  0474  0023               	movlb	3	; select bank3
  8141  0475  01AE               	clrf	_Shift_Key^(0+384)
  8142  0476  0AAE               	incf	_Shift_Key^(0+384),f
  8143  0477                     l6493:	
  8144                           
  8145                           ;PS_2.c: 537: }
  8146                           ;PS_2.c: 538: }
  8147                           ;PS_2.c: 539: }
  8148                           ;PS_2.c: 540: }
  8149                           ;PS_2.c: 541: if(PS_2_Read_Data_First == 0x14 )
  8150  0477  3014               	movlw	20
  8151  0478  0023               	movlb	3	; select bank3
  8152  0479  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8153  047A  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8154  047B  1D03               	skipz
  8155  047C  2C81               	goto	l6497
  8156                           
  8157                           ;PS_2.c: 542: {
  8158                           ;PS_2.c: 543: RControl = 1;
  8159  047D  0022               	movlb	2	; select bank2
  8160  047E  01EA               	clrf	_RControl^(0+256)
  8161  047F  0AEA               	incf	_RControl^(0+256),f
  8162                           
  8163                           ;PS_2.c: 544: }
  8164  0480  2D5F               	goto	l6591
  8165  0481                     l6497:	
  8166                           
  8167                           ;PS_2.c: 545: else if(PS_2_Read_Data_First == 0x11 )
  8168  0481  3011               	movlw	17
  8169  0482  0023               	movlb	3	; select bank3
  8170  0483  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8171  0484  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8172  0485  1D03               	skipz
  8173  0486  2C8A               	goto	l6501
  8174                           
  8175                           ;PS_2.c: 546: {
  8176                           ;PS_2.c: 547: RALT = 1;
  8177  0487  01AC               	clrf	_RALT^(0+384)
  8178  0488  0AAC               	incf	_RALT^(0+384),f
  8179                           
  8180                           ;PS_2.c: 548: }
  8181  0489  2D5F               	goto	l6591
  8182  048A                     l6501:	
  8183                           
  8184                           ;PS_2.c: 549: else if(PS_2_Read_Data_First == 0xEE )
  8185  048A  30EE               	movlw	238
  8186  048B  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8187  048C  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8188  048D  1D03               	skipz
  8189  048E  2C95               	goto	l6505
  8190                           
  8191                           ;PS_2.c: 550: {
  8192                           ;PS_2.c: 551: ECHO = 1;
  8193  048F  3001               	movlw	1
  8194  0490  00AF               	movwf	??_PS_2_Update^(0+384)
  8195  0491  082F               	movf	??_PS_2_Update^(0+384),w
  8196  0492  0021               	movlb	1	; select bank1
  8197  0493  00E9               	movwf	_ECHO^(0+128)	;volatile
  8198                           
  8199                           ;PS_2.c: 552: }
  8200  0494  2D5F               	goto	l6591
  8201  0495                     l6505:	
  8202                           
  8203                           ;PS_2.c: 553: else if(PS_2_Read_Data_First == 0x58)
  8204  0495  3058               	movlw	88
  8205  0496  0023               	movlb	3	; select bank3
  8206  0497  0620               	xorwf	_PS_2_Read_Data_First^(0+384),w
  8207  0498  0421               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
  8208  0499  1D03               	skipz
  8209  049A  2D16               	goto	l6565
  8210                           
  8211                           ;PS_2.c: 554: {
  8212                           ;PS_2.c: 555: Caps_Lock_Key = 1;
  8213  049B  0022               	movlb	2	; select bank2
  8214  049C  01E4               	clrf	_Caps_Lock_Key^(0+256)
  8215  049D  0AE4               	incf	_Caps_Lock_Key^(0+256),f
  8216                           
  8217                           ;PS_2.c: 556: if(Caps_Lock_Key_old == 0)
  8218  049E  08E5               	movf	_Caps_Lock_Key_old^(0+256),f
  8219  049F  1D03               	skipz
  8220  04A0  2D5F               	goto	l6591
  8221                           
  8222                           ;PS_2.c: 557: {
  8223                           ;PS_2.c: 558: if(Caps_Lock)
  8224  04A1  0023               	movlb	3	; select bank3
  8225  04A2  0829               	movf	_Caps_Lock^(0+384),w
  8226  04A3  1903               	btfsc	3,2
  8227  04A4  2CDD               	goto	l6539
  8228                           
  8229                           ;PS_2.c: 559: {
  8230                           ;PS_2.c: 560: if(Shift_Key)
  8231  04A5  082E               	movf	_Shift_Key^(0+384),w
  8232  04A6  1903               	btfsc	3,2
  8233  04A7  2CC1               	goto	l6527
  8234                           
  8235                           ;PS_2.c: 561: {
  8236                           ;PS_2.c: 562: CapsCount=0;
  8237  04A8  01A8               	clrf	_CapsCount^(0+384)
  8238  04A9                     l6525:	
  8239                           ;PS_2.c: 563: while(CapsCount<10)
  8240                           
  8241  04A9  300A               	movlw	10
  8242  04AA  0228               	subwf	_CapsCount^(0+384),w
  8243  04AB  1803               	btfsc	3,0
  8244  04AC  2D5F               	goto	l6591
  8245                           
  8246                           ;PS_2.c: 564: {
  8247                           ;PS_2.c: 565: if(!Send_PS2(0xED))
  8248  04AD  30ED               	movlw	237
  8249  04AE  318C  24A9  3181   	fcall	_Send_PS2
  8250  04B1  3800               	iorlw	0
  8251  04B2  1D03               	skipz
  8252  04B3  2CBB               	goto	l6523
  8253                           
  8254                           ;PS_2.c: 566: {
  8255                           ;PS_2.c: 567: if(!Send_PS2(0x01))
  8256  04B4  3001               	movlw	1
  8257  04B5  318C  24A9  3181   	fcall	_Send_PS2
  8258  04B8  3800               	iorlw	0
  8259  04B9  1903               	btfsc	3,2
  8260  04BA  2CD4               	goto	l6533
  8261  04BB                     l6523:	
  8262                           ;PS_2.c: 570: break;
  8263                           
  8264                           ;PS_2.c: 568: {
  8265                           ;PS_2.c: 569: Caps_Lock =0;
  8266                           
  8267                           
  8268                           ;PS_2.c: 571: }
  8269                           ;PS_2.c: 572: }
  8270                           ;PS_2.c: 573: CapsCount++;
  8271  04BB  3001               	movlw	1
  8272  04BC  0023               	movlb	3	; select bank3
  8273  04BD  00AF               	movwf	??_PS_2_Update^(0+384)
  8274  04BE  082F               	movf	??_PS_2_Update^(0+384),w
  8275  04BF  07A8               	addwf	_CapsCount^(0+384),f
  8276  04C0  2CA9               	goto	l6525
  8277  04C1                     l6527:	
  8278                           ;PS_2.c: 574: }
  8279                           ;PS_2.c: 575: }
  8280                           
  8281                           
  8282                           ;PS_2.c: 576: else
  8283                           ;PS_2.c: 577: {
  8284                           ;PS_2.c: 578: CapsCount=0;
  8285  04C1  01A8               	clrf	_CapsCount^(0+384)
  8286  04C2                     l6537:	
  8287                           ;PS_2.c: 579: while(CapsCount<10)
  8288                           
  8289  04C2  300A               	movlw	10
  8290  04C3  0228               	subwf	_CapsCount^(0+384),w
  8291  04C4  1803               	btfsc	3,0
  8292  04C5  2D5F               	goto	l6591
  8293                           
  8294                           ;PS_2.c: 580: {
  8295                           ;PS_2.c: 581: if(!Send_PS2(0xED))
  8296  04C6  30ED               	movlw	237
  8297  04C7  318C  24A9  3181   	fcall	_Send_PS2
  8298  04CA  3800               	iorlw	0
  8299  04CB  1D03               	skipz
  8300  04CC  2CD7               	goto	l6535
  8301                           
  8302                           ;PS_2.c: 582: {
  8303                           ;PS_2.c: 583: if(!Send_PS2(0x00))
  8304  04CD  3000               	movlw	0
  8305  04CE  318C  24A9  3181   	fcall	_Send_PS2
  8306  04D1  3800               	iorlw	0
  8307  04D2  1D03               	skipz
  8308  04D3  2CD7               	goto	l6535
  8309  04D4                     l6533:	
  8310                           
  8311                           ;PS_2.c: 584: {
  8312                           ;PS_2.c: 585: Caps_Lock =0;
  8313  04D4  0023               	movlb	3	; select bank3
  8314  04D5  01A9               	clrf	_Caps_Lock^(0+384)
  8315                           
  8316                           ;PS_2.c: 586: break;
  8317  04D6  2D5F               	goto	l6591
  8318  04D7                     l6535:	
  8319                           
  8320                           ;PS_2.c: 587: }
  8321                           ;PS_2.c: 588: }
  8322                           ;PS_2.c: 589: CapsCount++;
  8323  04D7  3001               	movlw	1
  8324  04D8  0023               	movlb	3	; select bank3
  8325  04D9  00AF               	movwf	??_PS_2_Update^(0+384)
  8326  04DA  082F               	movf	??_PS_2_Update^(0+384),w
  8327  04DB  07A8               	addwf	_CapsCount^(0+384),f
  8328  04DC  2CC2               	goto	l6537
  8329  04DD                     l6539:	
  8330                           ;PS_2.c: 590: }
  8331                           ;PS_2.c: 591: }
  8332                           ;PS_2.c: 592: }
  8333                           
  8334                           
  8335                           ;PS_2.c: 593: else
  8336                           ;PS_2.c: 594: {
  8337                           ;PS_2.c: 595: if(Shift_Key)
  8338  04DD  082E               	movf	_Shift_Key^(0+384),w
  8339  04DE  1903               	btfsc	3,2
  8340  04DF  2CF9               	goto	l6553
  8341                           
  8342                           ;PS_2.c: 596: {
  8343                           ;PS_2.c: 597: CapsCount=0;
  8344  04E0  01A8               	clrf	_CapsCount^(0+384)
  8345  04E1                     l6551:	
  8346                           ;PS_2.c: 598: while(CapsCount<10)
  8347                           
  8348  04E1  300A               	movlw	10
  8349  04E2  0228               	subwf	_CapsCount^(0+384),w
  8350  04E3  1803               	btfsc	3,0
  8351  04E4  2D5F               	goto	l6591
  8352                           
  8353                           ;PS_2.c: 599: {
  8354                           ;PS_2.c: 600: if(!Send_PS2(0xED))
  8355  04E5  30ED               	movlw	237
  8356  04E6  318C  24A9  3181   	fcall	_Send_PS2
  8357  04E9  3800               	iorlw	0
  8358  04EA  1D03               	skipz
  8359  04EB  2CF3               	goto	l6549
  8360                           
  8361                           ;PS_2.c: 601: {
  8362                           ;PS_2.c: 602: if(!Send_PS2(0x05))
  8363  04EC  3005               	movlw	5
  8364  04ED  318C  24A9  3181   	fcall	_Send_PS2
  8365  04F0  3800               	iorlw	0
  8366  04F1  1903               	btfsc	3,2
  8367  04F2  2D0C               	goto	l6559
  8368  04F3                     l6549:	
  8369                           ;PS_2.c: 605: break;
  8370                           
  8371                           ;PS_2.c: 603: {
  8372                           ;PS_2.c: 604: Caps_Lock =1;
  8373                           
  8374                           
  8375                           ;PS_2.c: 606: }
  8376                           ;PS_2.c: 607: }
  8377                           ;PS_2.c: 608: CapsCount++;
  8378  04F3  3001               	movlw	1
  8379  04F4  0023               	movlb	3	; select bank3
  8380  04F5  00AF               	movwf	??_PS_2_Update^(0+384)
  8381  04F6  082F               	movf	??_PS_2_Update^(0+384),w
  8382  04F7  07A8               	addwf	_CapsCount^(0+384),f
  8383  04F8  2CE1               	goto	l6551
  8384  04F9                     l6553:	
  8385                           ;PS_2.c: 609: }
  8386                           ;PS_2.c: 610: }
  8387                           
  8388                           
  8389                           ;PS_2.c: 611: else
  8390                           ;PS_2.c: 612: {
  8391                           ;PS_2.c: 613: CapsCount=0;
  8392  04F9  01A8               	clrf	_CapsCount^(0+384)
  8393  04FA                     l6563:	
  8394                           ;PS_2.c: 614: while(CapsCount<10)
  8395                           
  8396  04FA  300A               	movlw	10
  8397  04FB  0228               	subwf	_CapsCount^(0+384),w
  8398  04FC  1803               	btfsc	3,0
  8399  04FD  2D5F               	goto	l6591
  8400                           
  8401                           ;PS_2.c: 615: {
  8402                           ;PS_2.c: 616: if(!Send_PS2(0xED))
  8403  04FE  30ED               	movlw	237
  8404  04FF  318C  24A9  3181   	fcall	_Send_PS2
  8405  0502  3800               	iorlw	0
  8406  0503  1D03               	skipz
  8407  0504  2D10               	goto	l6561
  8408                           
  8409                           ;PS_2.c: 617: {
  8410                           ;PS_2.c: 618: if(!Send_PS2(0x04))
  8411  0505  3004               	movlw	4
  8412  0506  318C  24A9  3181   	fcall	_Send_PS2
  8413  0509  3800               	iorlw	0
  8414  050A  1D03               	skipz
  8415  050B  2D10               	goto	l6561
  8416  050C                     l6559:	
  8417                           
  8418                           ;PS_2.c: 619: {
  8419                           ;PS_2.c: 620: Caps_Lock =1;
  8420  050C  0023               	movlb	3	; select bank3
  8421  050D  01A9               	clrf	_Caps_Lock^(0+384)
  8422  050E  0AA9               	incf	_Caps_Lock^(0+384),f
  8423                           
  8424                           ;PS_2.c: 621: break;
  8425  050F  2D5F               	goto	l6591
  8426  0510                     l6561:	
  8427                           
  8428                           ;PS_2.c: 622: }
  8429                           ;PS_2.c: 623: }
  8430                           ;PS_2.c: 624: CapsCount++;
  8431  0510  3001               	movlw	1
  8432  0511  0023               	movlb	3	; select bank3
  8433  0512  00AF               	movwf	??_PS_2_Update^(0+384)
  8434  0513  082F               	movf	??_PS_2_Update^(0+384),w
  8435  0514  07A8               	addwf	_CapsCount^(0+384),f
  8436  0515  2CFA               	goto	l6563
  8437  0516                     l6565:	
  8438                           ;PS_2.c: 625: }
  8439                           ;PS_2.c: 626: }
  8440                           ;PS_2.c: 627: }
  8441                           ;PS_2.c: 628: }
  8442                           ;PS_2.c: 630: }
  8443                           
  8444                           
  8445                           ;PS_2.c: 631: else
  8446                           ;PS_2.c: 632: {
  8447                           ;PS_2.c: 633: if(Shift_Key ==1)
  8448  0516  082E               	movf	_Shift_Key^(0+384),w
  8449  0517  3A01               	xorlw	1
  8450  0518  1D03               	skipz
  8451  0519  2D37               	goto	l6577
  8452                           
  8453                           ;PS_2.c: 634: {
  8454                           ;PS_2.c: 636: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
  8455  051A  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8456  051B  319A  22CB  3181   	fcall	_Decode_Scan_Code_Shift
  8457  051E  0023               	movlb	3	; select bank3
  8458  051F  00AF               	movwf	??_PS_2_Update^(0+384)
  8459  0520  082F               	movf	??_PS_2_Update^(0+384),w
  8460  0521  0025               	movlb	5	; select bank5
  8461  0522  00E0               	movwf	PS_2_Update@temp^(0+640)
  8462                           
  8463                           ;PS_2.c: 637: if(Caps_Lock)
  8464  0523  0023               	movlb	3	; select bank3
  8465  0524  0829               	movf	_Caps_Lock^(0+384),w
  8466  0525  1903               	btfsc	3,2
  8467  0526  2D51               	goto	l6587
  8468                           
  8469                           ;PS_2.c: 638: {
  8470                           ;PS_2.c: 640: if(temp >= 'A' && temp <= 'Z')
  8471  0527  3041               	movlw	65
  8472  0528  0025               	movlb	5	; select bank5
  8473  0529  0260               	subwf	PS_2_Update@temp^(0+640),w
  8474  052A  1C03               	skipc
  8475  052B  2D50               	goto	l729
  8476  052C  305B               	movlw	91
  8477  052D  0260               	subwf	PS_2_Update@temp^(0+640),w
  8478  052E  1803               	skipnc
  8479  052F  2D50               	goto	l729
  8480                           
  8481                           ;PS_2.c: 641: {
  8482                           ;PS_2.c: 642: temp += 32;
  8483  0530  3020               	movlw	32
  8484  0531  0023               	movlb	3	; select bank3
  8485  0532  00AF               	movwf	??_PS_2_Update^(0+384)
  8486  0533  082F               	movf	??_PS_2_Update^(0+384),w
  8487  0534  0025               	movlb	5	; select bank5
  8488  0535  07E0               	addwf	PS_2_Update@temp^(0+640),f
  8489  0536  2D50               	goto	l729
  8490  0537                     l6577:	
  8491                           ;PS_2.c: 643: }
  8492                           ;PS_2.c: 644: }
  8493                           ;PS_2.c: 645: }
  8494                           
  8495                           
  8496                           ;PS_2.c: 646: else
  8497                           ;PS_2.c: 647: {
  8498                           ;PS_2.c: 648: temp = Decode_Scan_Code(PS_2_Read_Data_First);
  8499  0537  0023               	movlb	3	; select bank3
  8500  0538  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8501  0539  319A  22A5  3181   	fcall	_Decode_Scan_Code
  8502  053C  0023               	movlb	3	; select bank3
  8503  053D  00AF               	movwf	??_PS_2_Update^(0+384)
  8504  053E  082F               	movf	??_PS_2_Update^(0+384),w
  8505  053F  0025               	movlb	5	; select bank5
  8506  0540  00E0               	movwf	PS_2_Update@temp^(0+640)
  8507                           
  8508                           ;PS_2.c: 649: if(Caps_Lock)
  8509  0541  0023               	movlb	3	; select bank3
  8510  0542  0829               	movf	_Caps_Lock^(0+384),w
  8511  0543  1903               	btfsc	3,2
  8512  0544  2D51               	goto	l6587
  8513                           
  8514                           ;PS_2.c: 650: {
  8515                           ;PS_2.c: 652: if(temp >= 'a' && temp <= 'z')
  8516  0545  3061               	movlw	97
  8517  0546  0025               	movlb	5	; select bank5
  8518  0547  0260               	subwf	PS_2_Update@temp^(0+640),w
  8519  0548  1C03               	skipc
  8520  0549  2D50               	goto	l729
  8521  054A  307B               	movlw	123
  8522  054B  0260               	subwf	PS_2_Update@temp^(0+640),w
  8523  054C  1803               	skipnc
  8524  054D  2D50               	goto	l729
  8525                           
  8526                           ;PS_2.c: 653: {
  8527                           ;PS_2.c: 654: temp -= 32;
  8528  054E  3020               	movlw	32
  8529  054F  02E0               	subwf	PS_2_Update@temp^(0+640),f
  8530  0550                     l729:	
  8531  0550  0023               	movlb	3	; select bank3
  8532  0551                     l6587:	
  8533                           
  8534                           ;PS_2.c: 655: }
  8535                           ;PS_2.c: 656: }
  8536                           ;PS_2.c: 657: }
  8537                           ;PS_2.c: 658: if(!temp)
  8538  0551  0025               	movlb	5	; select bank5
  8539  0552  08E0               	movf	PS_2_Update@temp^(0+640),f
  8540  0553  1D03               	skipz
  8541  0554  2D5F               	goto	l6591
  8542                           
  8543                           ;PS_2.c: 659: {
  8544                           ;PS_2.c: 661: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
  8545  0555  0023               	movlb	3	; select bank3
  8546  0556  0820               	movf	_PS_2_Read_Data_First^(0+384),w
  8547  0557  319A  225D  3181   	fcall	_Decode_Scan_Code_Function
  8548  055A  0023               	movlb	3	; select bank3
  8549  055B  00AF               	movwf	??_PS_2_Update^(0+384)
  8550  055C  082F               	movf	??_PS_2_Update^(0+384),w
  8551  055D  0025               	movlb	5	; select bank5
  8552  055E  00E0               	movwf	PS_2_Update@temp^(0+640)
  8553  055F                     l6591:	
  8554                           
  8555                           ;PS_2.c: 662: }
  8556                           ;PS_2.c: 663: }
  8557                           ;PS_2.c: 664: }
  8558                           ;PS_2.c: 665: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
  8559  055F  0025               	movlb	5	; select bank5
  8560  0560  01DE               	clrf	_PS_2_Update$819^(0+640)
  8561  0561  0ADE               	incf	_PS_2_Update$819^(0+640),f
  8562  0562  0022               	movlb	2	; select bank2
  8563  0563  08E7               	movf	_LALT^(0+256),f
  8564  0564  1D03               	skipz
  8565  0565  2D6C               	goto	l6599
  8566  0566  0023               	movlb	3	; select bank3
  8567  0567  08AC               	movf	_RALT^(0+384),f
  8568  0568  1D03               	skipz
  8569  0569  2D6C               	goto	l6599
  8570  056A  0025               	movlb	5	; select bank5
  8571  056B  01DE               	clrf	_PS_2_Update$819^(0+640)
  8572  056C                     l6599:	
  8573  056C  0025               	movlb	5	; select bank5
  8574  056D  01DF               	clrf	_PS_2_Update$820^(0+640)
  8575  056E  0ADF               	incf	_PS_2_Update$820^(0+640),f
  8576  056F  0022               	movlb	2	; select bank2
  8577  0570  08EA               	movf	_RControl^(0+256),f
  8578  0571  1D03               	skipz
  8579  0572  2D78               	goto	l6607
  8580  0573  08E8               	movf	_LControl^(0+256),f
  8581  0574  1D03               	skipz
  8582  0575  2D78               	goto	l6607
  8583  0576  0025               	movlb	5	; select bank5
  8584  0577  01DF               	clrf	_PS_2_Update$820^(0+640)
  8585  0578                     l6607:	
  8586  0578  0022               	movlb	2	; select bank2
  8587  0579  0866               	movf	_Delete^(0+256),w
  8588  057A  0023               	movlb	3	; select bank3
  8589  057B  00AF               	movwf	??_PS_2_Update^(0+384)
  8590  057C  01B0               	clrf	(??_PS_2_Update^(0+384)+1)
  8591  057D  0025               	movlb	5	; select bank5
  8592  057E  085F               	movf	_PS_2_Update$820^(0+640),w
  8593  057F  075E               	addwf	_PS_2_Update$819^(0+640),w
  8594  0580  0023               	movlb	3	; select bank3
  8595  0581  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8596  0582  01B2               	clrf	((??_PS_2_Update+2)^(0+384)+1)
  8597  0583  0DB2               	rlf	(??_PS_2_Update+3)^(0+384),f
  8598  0584  082F               	movf	??_PS_2_Update^(0+384),w
  8599  0585  0731               	addwf	(??_PS_2_Update+2)^(0+384),w
  8600  0586  00B3               	movwf	(??_PS_2_Update+4)^(0+384)
  8601  0587  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8602  0588  3D32               	addwfc	(??_PS_2_Update+3)^(0+384),w
  8603  0589  00B4               	movwf	(??_PS_2_Update+5)^(0+384)
  8604  058A  3003               	movlw	3
  8605  058B  0633               	xorwf	(??_PS_2_Update+4)^(0+384),w
  8606  058C  0434               	iorwf	(??_PS_2_Update+5)^(0+384),w
  8607  058D  1D03               	skipz
  8608  058E  2E04               	goto	l6647
  8609                           
  8610                           ;PS_2.c: 666: {
  8611                           ;PS_2.c: 668: UARTstringWAIT("\r\n");
  8612  058F  3052               	movlw	low ((STR_11+17)| (0+32768))
  8613  0590  0020               	movlb	0	; select bank0
  8614  0591  00B4               	movwf	UARTstringWAIT@data
  8615  0592  308B               	movlw	high ((STR_11+17)| (0+32768))
  8616  0593  00B5               	movwf	UARTstringWAIT@data+1
  8617  0594  319B  23FC  3181   	fcall	_UARTstringWAIT
  8618                           
  8619                           ;PS_2.c: 669: delayUS(10000);
  8620  0597  3000               	movlw	0
  8621  0598  0020               	movlb	0	; select bank0
  8622  0599  00A8               	movwf	delayUS@US+3
  8623  059A  3000               	movlw	0
  8624  059B  00A7               	movwf	delayUS@US+2
  8625  059C  3027               	movlw	39
  8626  059D  00A6               	movwf	delayUS@US+1
  8627  059E  3010               	movlw	16
  8628  059F  00A5               	movwf	delayUS@US
  8629  05A0  3187  27C8  3181   	fcall	_delayUS
  8630                           
  8631                           ;PS_2.c: 670: if(!BAUDMODE)
  8632  05A3  0022               	movlb	2	; select bank2
  8633  05A4  08E3               	movf	_BAUDMODE^(0+256),f
  8634  05A5  1D03               	skipz
  8635  05A6  2DD1               	goto	l6627
  8636                           
  8637                           ;PS_2.c: 671: {
  8638                           ;PS_2.c: 672: BaudTyped =0;
  8639  05A7  3000               	movlw	0
  8640  05A8  0020               	movlb	0	; select bank0
  8641  05A9  00E9               	movwf	_BaudTyped+3
  8642  05AA  3000               	movlw	0
  8643  05AB  00E8               	movwf	_BaudTyped+2
  8644  05AC  3000               	movlw	0
  8645  05AD  00E7               	movwf	_BaudTyped+1
  8646  05AE  3000               	movlw	0
  8647  05AF  00E6               	movwf	_BaudTyped
  8648                           
  8649                           ;PS_2.c: 673: ParityTyped =0;
  8650  05B0  0023               	movlb	3	; select bank3
  8651  05B1  01AB               	clrf	_ParityTyped^(0+384)
  8652                           
  8653                           ;PS_2.c: 674: BAUDMODE = 1;
  8654  05B2  0022               	movlb	2	; select bank2
  8655  05B3  01E3               	clrf	_BAUDMODE^(0+256)
  8656  05B4  0AE3               	incf	_BAUDMODE^(0+256),f
  8657                           
  8658                           ;PS_2.c: 675: UARTstringWAIT("Enter Baud rate\r\n");
  8659  05B5  307B               	movlw	low (STR_28| (0+32768))
  8660  05B6  0020               	movlb	0	; select bank0
  8661  05B7  00B4               	movwf	UARTstringWAIT@data
  8662  05B8  308B               	movlw	high (STR_28| (0+32768))
  8663  05B9  00B5               	movwf	UARTstringWAIT@data+1
  8664  05BA  319B  23FC  3181   	fcall	_UARTstringWAIT
  8665                           
  8666                           ;PS_2.c: 676: delayUS(10000);
  8667  05BD  3000               	movlw	0
  8668  05BE  0020               	movlb	0	; select bank0
  8669  05BF  00A8               	movwf	delayUS@US+3
  8670  05C0  3000               	movlw	0
  8671  05C1  00A7               	movwf	delayUS@US+2
  8672  05C2  3027               	movlw	39
  8673  05C3  00A6               	movwf	delayUS@US+1
  8674  05C4  3010               	movlw	16
  8675  05C5  00A5               	movwf	delayUS@US
  8676  05C6  3187  27C8  3181   	fcall	_delayUS
  8677                           
  8678                           ;PS_2.c: 677: UARTchar('>' , 0, 0);
  8679  05C9  0020               	movlb	0	; select bank0
  8680  05CA  01AD               	clrf	UARTchar@NinethBit_override
  8681  05CB  01AE               	clrf	UARTchar@NinethBit_override_data
  8682  05CC  303E               	movlw	62
  8683  05CD  319D  253A  3181   	fcall	_UARTchar
  8684                           
  8685                           ;PS_2.c: 679: }
  8686  05D0  2DFC               	goto	l6637
  8687  05D1                     l6627:	
  8688                           
  8689                           ;PS_2.c: 680: else
  8690                           ;PS_2.c: 681: {
  8691                           ;PS_2.c: 682: BaudTyped = 9600;
  8692  05D1  3000               	movlw	0
  8693  05D2  0020               	movlb	0	; select bank0
  8694  05D3  00E9               	movwf	_BaudTyped+3
  8695  05D4  3000               	movlw	0
  8696  05D5  00E8               	movwf	_BaudTyped+2
  8697  05D6  3025               	movlw	37
  8698  05D7  00E7               	movwf	_BaudTyped+1
  8699  05D8  3080               	movlw	128
  8700  05D9  00E6               	movwf	_BaudTyped
  8701                           
  8702                           ;PS_2.c: 683: UARTstringWAIT("KeyBoard Reset to 9600 with no parity bit\r\n");
  8703  05DA  30FB               	movlw	low (STR_29| (0+32768))
  8704  05DB  00B4               	movwf	UARTstringWAIT@data
  8705  05DC  3089               	movlw	high (STR_29| (0+32768))
  8706  05DD  00B5               	movwf	UARTstringWAIT@data+1
  8707  05DE  319B  23FC  3181   	fcall	_UARTstringWAIT
  8708                           
  8709                           ;PS_2.c: 684: delayUS(10000);
  8710  05E1  3000               	movlw	0
  8711  05E2  0020               	movlb	0	; select bank0
  8712  05E3  00A8               	movwf	delayUS@US+3
  8713  05E4  3000               	movlw	0
  8714  05E5  00A7               	movwf	delayUS@US+2
  8715  05E6  3027               	movlw	39
  8716  05E7  00A6               	movwf	delayUS@US+1
  8717  05E8  3010               	movlw	16
  8718  05E9  00A5               	movwf	delayUS@US
  8719  05EA  3187  27C8  3181   	fcall	_delayUS
  8720                           
  8721                           ;PS_2.c: 685: SetBaud(BaudTyped, 0);
  8722  05ED  0020               	movlb	0	; select bank0
  8723  05EE  0869               	movf	_BaudTyped+3,w
  8724  05EF  00D7               	movwf	SetBaud@Baud+3
  8725  05F0  0868               	movf	_BaudTyped+2,w
  8726  05F1  00D6               	movwf	SetBaud@Baud+2
  8727  05F2  0867               	movf	_BaudTyped+1,w
  8728  05F3  00D5               	movwf	SetBaud@Baud+1
  8729  05F4  0866               	movf	_BaudTyped,w
  8730  05F5  00D4               	movwf	SetBaud@Baud
  8731  05F6  01D8               	clrf	SetBaud@Parity
  8732  05F7  3196  269B  3181   	fcall	_SetBaud
  8733                           
  8734                           ;PS_2.c: 686: BAUDMODE = 0;
  8735  05FA  0022               	movlb	2	; select bank2
  8736  05FB  01E3               	clrf	_BAUDMODE^(0+256)
  8737  05FC                     l6637:	
  8738                           
  8739                           ;PS_2.c: 687: }
  8740                           ;PS_2.c: 688: RControl =0;
  8741  05FC  0022               	movlb	2	; select bank2
  8742  05FD  01EA               	clrf	_RControl^(0+256)
  8743                           
  8744                           ;PS_2.c: 689: LControl =0;
  8745  05FE  01E8               	clrf	_LControl^(0+256)
  8746                           
  8747                           ;PS_2.c: 690: LALT =0;
  8748  05FF  01E7               	clrf	_LALT^(0+256)
  8749                           
  8750                           ;PS_2.c: 691: RALT =0;
  8751  0600  0023               	movlb	3	; select bank3
  8752  0601  01AC               	clrf	_RALT^(0+384)
  8753                           
  8754                           ;PS_2.c: 692: Delete =0;
  8755  0602  0022               	movlb	2	; select bank2
  8756  0603  01E6               	clrf	_Delete^(0+256)
  8757  0604                     l6647:	
  8758                           
  8759                           ;PS_2.c: 693: }
  8760                           ;PS_2.c: 694: if(temp)
  8761  0604  0025               	movlb	5	; select bank5
  8762  0605  0860               	movf	PS_2_Update@temp^(0+640),w
  8763  0606  1903               	btfsc	3,2
  8764  0607  2F96               	goto	l6743
  8765                           
  8766                           ;PS_2.c: 695: {
  8767                           ;PS_2.c: 697: if(temp == 0x01)
  8768  0608  0860               	movf	PS_2_Update@temp^(0+640),w
  8769  0609  3A01               	xorlw	1
  8770  060A  1D03               	skipz
  8771  060B  2E10               	goto	l6653
  8772                           
  8773                           ;PS_2.c: 698: {
  8774                           ;PS_2.c: 700: UART_send_break();
  8775  060C  3199  21C4  3181   	fcall	_UART_send_break
  8776  060F  2F95               	goto	l741
  8777  0610                     l6653:	
  8778                           ;PS_2.c: 701: }
  8779                           
  8780                           
  8781                           ;PS_2.c: 702: else
  8782                           ;PS_2.c: 703: {
  8783                           ;PS_2.c: 704: if(!BAUDMODE)
  8784  0610  0022               	movlb	2	; select bank2
  8785  0611  08E3               	movf	_BAUDMODE^(0+256),f
  8786  0612  1D03               	skipz
  8787  0613  2E41               	goto	l6665
  8788                           
  8789                           ;PS_2.c: 705: {
  8790                           ;PS_2.c: 706: UARTchar(temp, 0, 0);
  8791  0614  0020               	movlb	0	; select bank0
  8792  0615  01AD               	clrf	UARTchar@NinethBit_override
  8793  0616  01AE               	clrf	UARTchar@NinethBit_override_data
  8794  0617  0025               	movlb	5	; select bank5
  8795  0618  0860               	movf	PS_2_Update@temp^(0+640),w
  8796  0619  319D  253A  3181   	fcall	_UARTchar
  8797                           
  8798                           ;PS_2.c: 707: if(temp == '\r')
  8799  061C  0025               	movlb	5	; select bank5
  8800  061D  0860               	movf	PS_2_Update@temp^(0+640),w
  8801  061E  3A0D               	xorlw	13
  8802  061F  1D03               	skipz
  8803  0620  2F96               	goto	l6743
  8804                           
  8805                           ;PS_2.c: 708: {
  8806                           ;PS_2.c: 709: delayUS(5000);
  8807  0621  3000               	movlw	0
  8808  0622  0020               	movlb	0	; select bank0
  8809  0623  00A8               	movwf	delayUS@US+3
  8810  0624  3000               	movlw	0
  8811  0625  00A7               	movwf	delayUS@US+2
  8812  0626  3013               	movlw	19
  8813  0627  00A6               	movwf	delayUS@US+1
  8814  0628  3088               	movlw	136
  8815  0629  00A5               	movwf	delayUS@US
  8816  062A  3187  27C8  3181   	fcall	_delayUS
  8817                           
  8818                           ;PS_2.c: 710: UARTchar('\n', 0, 0);
  8819  062D  0020               	movlb	0	; select bank0
  8820  062E  01AD               	clrf	UARTchar@NinethBit_override
  8821  062F  01AE               	clrf	UARTchar@NinethBit_override_data
  8822  0630  300A               	movlw	10
  8823  0631  319D  253A  3181   	fcall	_UARTchar
  8824                           
  8825                           ;PS_2.c: 711: delayUS(10000);
  8826  0634  3000               	movlw	0
  8827  0635  0020               	movlb	0	; select bank0
  8828  0636  00A8               	movwf	delayUS@US+3
  8829  0637  3000               	movlw	0
  8830  0638  00A7               	movwf	delayUS@US+2
  8831  0639  3027               	movlw	39
  8832  063A  00A6               	movwf	delayUS@US+1
  8833  063B  3010               	movlw	16
  8834  063C  00A5               	movwf	delayUS@US
  8835  063D  3187  27C8  3181   	fcall	_delayUS
  8836  0640  2F95               	goto	l741
  8837  0641                     l6665:	
  8838                           ;PS_2.c: 712: }
  8839                           ;PS_2.c: 713: }
  8840                           
  8841                           
  8842                           ;PS_2.c: 714: else
  8843                           ;PS_2.c: 715: {
  8844                           ;PS_2.c: 716: if(ISNUMBER(temp))
  8845  0641  0025               	movlb	5	; select bank5
  8846  0642  0860               	movf	PS_2_Update@temp^(0+640),w
  8847  0643  319A  223F  3181   	fcall	_ISNUMBER
  8848  0646  3A00               	xorlw	0
  8849  0647  1903               	skipnz
  8850  0648  2E8F               	goto	l6673
  8851                           
  8852                           ;PS_2.c: 717: {
  8853                           ;PS_2.c: 718: BaudTyped*=10;
  8854  0649  3000               	movlw	0
  8855  064A  0020               	movlb	0	; select bank0
  8856  064B  00A8               	movwf	___lmul@multiplier+3
  8857  064C  3000               	movlw	0
  8858  064D  00A7               	movwf	___lmul@multiplier+2
  8859  064E  3000               	movlw	0
  8860  064F  00A6               	movwf	___lmul@multiplier+1
  8861  0650  300A               	movlw	10
  8862  0651  00A5               	movwf	___lmul@multiplier
  8863  0652  0869               	movf	_BaudTyped+3,w
  8864  0653  00AC               	movwf	___lmul@multiplicand+3
  8865  0654  0868               	movf	_BaudTyped+2,w
  8866  0655  00AB               	movwf	___lmul@multiplicand+2
  8867  0656  0867               	movf	_BaudTyped+1,w
  8868  0657  00AA               	movwf	___lmul@multiplicand+1
  8869  0658  0866               	movf	_BaudTyped,w
  8870  0659  00A9               	movwf	___lmul@multiplicand
  8871  065A  3190  2000  3181   	fcall	___lmul
  8872  065D  0020               	movlb	0	; select bank0
  8873  065E  0828               	movf	?___lmul+3,w
  8874  065F  00E9               	movwf	_BaudTyped+3
  8875  0660  0827               	movf	?___lmul+2,w
  8876  0661  00E8               	movwf	_BaudTyped+2
  8877  0662  0826               	movf	?___lmul+1,w
  8878  0663  00E7               	movwf	_BaudTyped+1
  8879  0664  0825               	movf	?___lmul,w
  8880  0665  00E6               	movwf	_BaudTyped
  8881                           
  8882                           ;PS_2.c: 719: BaudTyped += temp - 48;
  8883  0666  0025               	movlb	5	; select bank5
  8884  0667  0860               	movf	PS_2_Update@temp^(0+640),w
  8885  0668  3ED0               	addlw	208
  8886  0669  0023               	movlb	3	; select bank3
  8887  066A  00AF               	movwf	??_PS_2_Update^(0+384)
  8888  066B  30FF               	movlw	255
  8889  066C  1803               	skipnc
  8890  066D  3000               	movlw	0
  8891  066E  00B0               	movwf	(??_PS_2_Update^(0+384)+1)
  8892  066F  082F               	movf	??_PS_2_Update^(0+384),w
  8893  0670  00B1               	movwf	(??_PS_2_Update+2)^(0+384)
  8894  0671  0830               	movf	(??_PS_2_Update+1)^(0+384),w
  8895  0672  00B2               	movwf	((??_PS_2_Update+2)^(0+384)+1)
  8896  0673  3000               	movlw	0
  8897  0674  1BB2               	btfsc	((??_PS_2_Update+2)^(0+384)+1),7
  8898  0675  30FF               	movlw	255
  8899  0676  00B3               	movwf	((??_PS_2_Update+2)^(0+384)+2)
  8900  0677  00B4               	movwf	((??_PS_2_Update+2)^(0+384)+3)
  8901  0678  0831               	movf	(??_PS_2_Update+2)^(0+384),w
  8902  0679  0020               	movlb	0	; select bank0
  8903  067A  07E6               	addwf	_BaudTyped,f
  8904  067B  0023               	movlb	3	; select bank3
  8905  067C  0832               	movf	(??_PS_2_Update+3)^(0+384),w
  8906  067D  0020               	movlb	0	; select bank0
  8907  067E  3DE7               	addwfc	_BaudTyped+1,f
  8908  067F  0023               	movlb	3	; select bank3
  8909  0680  0833               	movf	(??_PS_2_Update+4)^(0+384),w
  8910  0681  0020               	movlb	0	; select bank0
  8911  0682  3DE8               	addwfc	_BaudTyped+2,f
  8912  0683  0023               	movlb	3	; select bank3
  8913  0684  0834               	movf	(??_PS_2_Update+5)^(0+384),w
  8914  0685  0020               	movlb	0	; select bank0
  8915  0686  3DE9               	addwfc	_BaudTyped+3,f
  8916                           
  8917                           ;PS_2.c: 720: UARTchar(temp, 0, 0);
  8918  0687  01AD               	clrf	UARTchar@NinethBit_override
  8919  0688  01AE               	clrf	UARTchar@NinethBit_override_data
  8920  0689  0025               	movlb	5	; select bank5
  8921  068A  0860               	movf	PS_2_Update@temp^(0+640),w
  8922  068B  319D  253A  3181   	fcall	_UARTchar
  8923  068E  2F95               	goto	l741
  8924  068F                     l6673:	
  8925                           ;PS_2.c: 721: }
  8926                           
  8927                           
  8928                           ;PS_2.c: 722: else if(temp == 'o' || temp == 'O')
  8929  068F  0025               	movlb	5	; select bank5
  8930  0690  0860               	movf	PS_2_Update@temp^(0+640),w
  8931  0691  3A6F               	xorlw	111
  8932  0692  1903               	skipnz
  8933  0693  2E98               	goto	l749
  8934  0694  0860               	movf	PS_2_Update@temp^(0+640),w
  8935  0695  3A4F               	xorlw	79
  8936  0696  1D03               	skipz
  8937  0697  2EA4               	goto	l6679
  8938  0698                     l749:	
  8939                           
  8940                           ;PS_2.c: 723: {
  8941                           ;PS_2.c: 724: ParityTyped = 1;
  8942  0698  0023               	movlb	3	; select bank3
  8943  0699  01AB               	clrf	_ParityTyped^(0+384)
  8944  069A  0AAB               	incf	_ParityTyped^(0+384),f
  8945                           
  8946                           ;PS_2.c: 725: UARTchar(temp, 0, 0);
  8947  069B  0020               	movlb	0	; select bank0
  8948  069C  01AD               	clrf	UARTchar@NinethBit_override
  8949  069D  01AE               	clrf	UARTchar@NinethBit_override_data
  8950  069E  0025               	movlb	5	; select bank5
  8951  069F  0860               	movf	PS_2_Update@temp^(0+640),w
  8952  06A0  319D  253A  3181   	fcall	_UARTchar
  8953  06A3  2F95               	goto	l741
  8954  06A4                     l6679:	
  8955                           ;PS_2.c: 726: }
  8956                           
  8957                           
  8958                           ;PS_2.c: 727: else if(temp == 'e' || temp == 'E')
  8959  06A4  0025               	movlb	5	; select bank5
  8960  06A5  0860               	movf	PS_2_Update@temp^(0+640),w
  8961  06A6  3A65               	xorlw	101
  8962  06A7  1903               	skipnz
  8963  06A8  2EAD               	goto	l6683
  8964  06A9  0860               	movf	PS_2_Update@temp^(0+640),w
  8965  06AA  3A45               	xorlw	69
  8966  06AB  1D03               	skipz
  8967  06AC  2EBB               	goto	l6687
  8968  06AD                     l6683:	
  8969                           
  8970                           ;PS_2.c: 728: {
  8971                           ;PS_2.c: 729: ParityTyped = 2;
  8972  06AD  3002               	movlw	2
  8973  06AE  0023               	movlb	3	; select bank3
  8974  06AF  00AF               	movwf	??_PS_2_Update^(0+384)
  8975  06B0  082F               	movf	??_PS_2_Update^(0+384),w
  8976  06B1  00AB               	movwf	_ParityTyped^(0+384)
  8977                           
  8978                           ;PS_2.c: 730: UARTchar(temp, 0, 0);
  8979  06B2  0020               	movlb	0	; select bank0
  8980  06B3  01AD               	clrf	UARTchar@NinethBit_override
  8981  06B4  01AE               	clrf	UARTchar@NinethBit_override_data
  8982  06B5  0025               	movlb	5	; select bank5
  8983  06B6  0860               	movf	PS_2_Update@temp^(0+640),w
  8984  06B7  319D  253A  3181   	fcall	_UARTchar
  8985  06BA  2F95               	goto	l741
  8986  06BB                     l6687:	
  8987                           ;PS_2.c: 731: }
  8988                           
  8989                           
  8990                           ;PS_2.c: 732: else if(temp == 'm' || temp == 'M')
  8991  06BB  0025               	movlb	5	; select bank5
  8992  06BC  0860               	movf	PS_2_Update@temp^(0+640),w
  8993  06BD  3A6D               	xorlw	109
  8994  06BE  1903               	skipnz
  8995  06BF  2EC4               	goto	l6691
  8996  06C0  0860               	movf	PS_2_Update@temp^(0+640),w
  8997  06C1  3A4D               	xorlw	77
  8998  06C2  1D03               	skipz
  8999  06C3  2ED2               	goto	l6695
  9000  06C4                     l6691:	
  9001                           
  9002                           ;PS_2.c: 733: {
  9003                           ;PS_2.c: 734: ParityTyped = 3;
  9004  06C4  3003               	movlw	3
  9005  06C5  0023               	movlb	3	; select bank3
  9006  06C6  00AF               	movwf	??_PS_2_Update^(0+384)
  9007  06C7  082F               	movf	??_PS_2_Update^(0+384),w
  9008  06C8  00AB               	movwf	_ParityTyped^(0+384)
  9009                           
  9010                           ;PS_2.c: 735: UARTchar(temp, 0, 0);
  9011  06C9  0020               	movlb	0	; select bank0
  9012  06CA  01AD               	clrf	UARTchar@NinethBit_override
  9013  06CB  01AE               	clrf	UARTchar@NinethBit_override_data
  9014  06CC  0025               	movlb	5	; select bank5
  9015  06CD  0860               	movf	PS_2_Update@temp^(0+640),w
  9016  06CE  319D  253A  3181   	fcall	_UARTchar
  9017  06D1  2F95               	goto	l741
  9018  06D2                     l6695:	
  9019                           ;PS_2.c: 736: }
  9020                           
  9021                           
  9022                           ;PS_2.c: 737: else if(temp == 's' || temp == 'S')
  9023  06D2  0025               	movlb	5	; select bank5
  9024  06D3  0860               	movf	PS_2_Update@temp^(0+640),w
  9025  06D4  3A73               	xorlw	115
  9026  06D5  1903               	skipnz
  9027  06D6  2EDB               	goto	l6699
  9028  06D7  0860               	movf	PS_2_Update@temp^(0+640),w
  9029  06D8  3A53               	xorlw	83
  9030  06D9  1D03               	skipz
  9031  06DA  2EE9               	goto	l6703
  9032  06DB                     l6699:	
  9033                           
  9034                           ;PS_2.c: 738: {
  9035                           ;PS_2.c: 739: ParityTyped = 4;
  9036  06DB  3004               	movlw	4
  9037  06DC  0023               	movlb	3	; select bank3
  9038  06DD  00AF               	movwf	??_PS_2_Update^(0+384)
  9039  06DE  082F               	movf	??_PS_2_Update^(0+384),w
  9040  06DF  00AB               	movwf	_ParityTyped^(0+384)
  9041                           
  9042                           ;PS_2.c: 740: UARTchar(temp, 0, 0);
  9043  06E0  0020               	movlb	0	; select bank0
  9044  06E1  01AD               	clrf	UARTchar@NinethBit_override
  9045  06E2  01AE               	clrf	UARTchar@NinethBit_override_data
  9046  06E3  0025               	movlb	5	; select bank5
  9047  06E4  0860               	movf	PS_2_Update@temp^(0+640),w
  9048  06E5  319D  253A  3181   	fcall	_UARTchar
  9049  06E8  2F95               	goto	l741
  9050  06E9                     l6703:	
  9051                           ;PS_2.c: 741: }
  9052                           
  9053                           
  9054                           ;PS_2.c: 742: else if(temp == '\r')
  9055  06E9  0025               	movlb	5	; select bank5
  9056  06EA  0860               	movf	PS_2_Update@temp^(0+640),w
  9057  06EB  3A0D               	xorlw	13
  9058  06EC  1D03               	skipz
  9059  06ED  2F96               	goto	l6743
  9060                           
  9061                           ;PS_2.c: 743: {
  9062                           ;PS_2.c: 744: UARTstringWAIT("\r\n");
  9063  06EE  3052               	movlw	low ((STR_11+17)| (0+32768))
  9064  06EF  0020               	movlb	0	; select bank0
  9065  06F0  00B4               	movwf	UARTstringWAIT@data
  9066  06F1  308B               	movlw	high ((STR_11+17)| (0+32768))
  9067  06F2  00B5               	movwf	UARTstringWAIT@data+1
  9068  06F3  319B  23FC  3181   	fcall	_UARTstringWAIT
  9069                           
  9070                           ;PS_2.c: 745: delayUS(10000);
  9071  06F6  3000               	movlw	0
  9072  06F7  0020               	movlb	0	; select bank0
  9073  06F8  00A8               	movwf	delayUS@US+3
  9074  06F9  3000               	movlw	0
  9075  06FA  00A7               	movwf	delayUS@US+2
  9076  06FB  3027               	movlw	39
  9077  06FC  00A6               	movwf	delayUS@US+1
  9078  06FD  3010               	movlw	16
  9079  06FE  00A5               	movwf	delayUS@US
  9080  06FF  3187  27C8  3181   	fcall	_delayUS
  9081                           
  9082                           ;PS_2.c: 746: if(BaudTyped >=2400 && BaudTyped <= 115200)
  9083  0702  3000               	movlw	0
  9084  0703  0020               	movlb	0	; select bank0
  9085  0704  0269               	subwf	_BaudTyped+3,w
  9086  0705  1D03               	skipz
  9087  0706  2F11               	goto	u9355
  9088  0707  3000               	movlw	0
  9089  0708  0268               	subwf	_BaudTyped+2,w
  9090  0709  1D03               	skipz
  9091  070A  2F11               	goto	u9355
  9092  070B  3009               	movlw	9
  9093  070C  0267               	subwf	_BaudTyped+1,w
  9094  070D  1D03               	skipz
  9095  070E  2F11               	goto	u9355
  9096  070F  3060               	movlw	96
  9097  0710  0266               	subwf	_BaudTyped,w
  9098  0711                     u9355:	
  9099  0711  1C03               	skipc
  9100  0712  2F7F               	goto	l6737
  9101  0713  3000               	movlw	0
  9102  0714  0269               	subwf	_BaudTyped+3,w
  9103  0715  1D03               	skipz
  9104  0716  2F21               	goto	u9365
  9105  0717  3001               	movlw	1
  9106  0718  0268               	subwf	_BaudTyped+2,w
  9107  0719  1D03               	skipz
  9108  071A  2F21               	goto	u9365
  9109  071B  30C2               	movlw	194
  9110  071C  0267               	subwf	_BaudTyped+1,w
  9111  071D  1D03               	skipz
  9112  071E  2F21               	goto	u9365
  9113  071F  3001               	movlw	1
  9114  0720  0266               	subwf	_BaudTyped,w
  9115  0721                     u9365:	
  9116  0721  1803               	skipnc
  9117  0722  2F7F               	goto	l6737
  9118                           
  9119                           ;PS_2.c: 747: {
  9120                           ;PS_2.c: 748: sprintf(buf,"KeyBoard Baud will be set to %lu",BaudTyped);
  9121  0723  30A0               	movlw	low PS_2_Update@buf
  9122  0724  00BD               	movwf	sprintf@sp
  9123  0725  3002               	movlw	high PS_2_Update@buf
  9124  0726  00BE               	movwf	sprintf@sp+1
  9125  0727  304A               	movlw	low (STR_31| (0+32768))
  9126  0728  00BF               	movwf	sprintf@f
  9127  0729  308A               	movlw	high (STR_31| (0+32768))
  9128  072A  00C0               	movwf	sprintf@f+1
  9129  072B  0869               	movf	_BaudTyped+3,w
  9130  072C  00C4               	movwf	?_sprintf+7
  9131  072D  0868               	movf	_BaudTyped+2,w
  9132  072E  00C3               	movwf	?_sprintf+6
  9133  072F  0867               	movf	_BaudTyped+1,w
  9134  0730  00C2               	movwf	?_sprintf+5
  9135  0731  0866               	movf	_BaudTyped,w
  9136  0732  00C1               	movwf	?_sprintf+4
  9137  0733  3194  249F  3181   	fcall	_sprintf
  9138                           
  9139                           ;PS_2.c: 749: UARTstringWAIT(buf);
  9140  0736  30A0               	movlw	low PS_2_Update@buf
  9141  0737  0020               	movlb	0	; select bank0
  9142  0738  00B4               	movwf	UARTstringWAIT@data
  9143  0739  3002               	movlw	high PS_2_Update@buf
  9144  073A  00B5               	movwf	UARTstringWAIT@data+1
  9145  073B  319B  23FC  3181   	fcall	_UARTstringWAIT
  9146                           
  9147                           ;PS_2.c: 750: if(ParityTyped)
  9148  073E  0023               	movlb	3	; select bank3
  9149  073F  082B               	movf	_ParityTyped^(0+384),w
  9150  0740  1903               	btfsc	3,2
  9151  0741  2F64               	goto	l6733
  9152                           
  9153                           ;PS_2.c: 751: {
  9154                           ;PS_2.c: 752: switch (ParityTyped)
  9155  0742  2F57               	goto	l6731
  9156  0743                     l6721:	
  9157                           ;PS_2.c: 753: {
  9158                           ;PS_2.c: 754: case 1:
  9159                           
  9160                           
  9161                           ;PS_2.c: 755: UARTstringWAIT(" with Odd parity bit\r\n");
  9162  0743  30EA               	movlw	low (STR_14| (0+32768))
  9163  0744  0020               	movlb	0	; select bank0
  9164  0745  00B4               	movwf	UARTstringWAIT@data
  9165  0746  308A               	movlw	high (STR_14| (0+32768))
  9166  0747  2F68               	goto	L14
  9167  0748                     l6723:	
  9168                           ;PS_2.c: 757: case 2:
  9169                           
  9170                           ;PS_2.c: 756: break;
  9171                           
  9172                           
  9173                           ;PS_2.c: 758: UARTstringWAIT(" with Even parity bit\r\n");
  9174  0748  30BA               	movlw	low (STR_15| (0+32768))
  9175  0749  0020               	movlb	0	; select bank0
  9176  074A  00B4               	movwf	UARTstringWAIT@data
  9177  074B  308A               	movlw	high (STR_15| (0+32768))
  9178  074C  2F68               	goto	L14
  9179  074D                     l6725:	
  9180                           ;PS_2.c: 760: case 3:
  9181                           
  9182                           ;PS_2.c: 759: break;
  9183                           
  9184                           
  9185                           ;PS_2.c: 761: UARTstringWAIT(" with Mark bit\r\n");
  9186  074D  309F               	movlw	low (STR_16| (0+32768))
  9187  074E  0020               	movlb	0	; select bank0
  9188  074F  00B4               	movwf	UARTstringWAIT@data
  9189  0750  308B               	movlw	high (STR_16| (0+32768))
  9190  0751  2F68               	goto	L14
  9191  0752                     l6727:	
  9192                           ;PS_2.c: 763: default:
  9193                           
  9194                           ;PS_2.c: 762: break;
  9195                           
  9196                           
  9197                           ;PS_2.c: 764: UARTstringWAIT(" with Space bit\r\n");
  9198  0752  308D               	movlw	low (STR_17| (0+32768))
  9199  0753  0020               	movlb	0	; select bank0
  9200  0754  00B4               	movwf	UARTstringWAIT@data
  9201  0755  308B               	movlw	high (STR_17| (0+32768))
  9202  0756  2F68               	goto	L14
  9203  0757                     l6731:	
  9204                           ;PS_2.c: 766: }
  9205                           
  9206                           ;PS_2.c: 765: break;
  9207                           
  9208  0757  0023               	movlb	3	; select bank3
  9209  0758  082B               	movf	_ParityTyped^(0+384),w
  9210                           
  9211                           ; Switch size 1, requested type "space"
  9212                           ; Number of cases is 3, Range of values is 1 to 3
  9213                           ; switch strategies available:
  9214                           ; Name         Instructions Cycles
  9215                           ; simple_byte           10     6 (average)
  9216                           ; direct_byte           15     9 (fixed)
  9217                           ; jumptable            263     9 (fixed)
  9218                           ;	Chosen strategy is simple_byte
  9219  0759  3A01               	xorlw	1	; case 1
  9220  075A  1903               	skipnz
  9221  075B  2F43               	goto	l6721
  9222  075C  3A03               	xorlw	3	; case 2
  9223  075D  1903               	skipnz
  9224  075E  2F48               	goto	l6723
  9225  075F  3A01               	xorlw	1	; case 3
  9226  0760  1903               	skipnz
  9227  0761  2F4D               	goto	l6725
  9228  0762  2F52               	goto	l6727
  9229                           
  9230                           ;PS_2.c: 767: }
  9231  0763  2F6C               	goto	l6735
  9232  0764                     l6733:	
  9233                           
  9234                           ;PS_2.c: 768: else
  9235                           ;PS_2.c: 769: {
  9236                           ;PS_2.c: 770: UARTstringWAIT(" with no parity bit\r\n");
  9237  0764  3011               	movlw	low ((STR_29+22)| (0+32768))
  9238  0765  0020               	movlb	0	; select bank0
  9239  0766  00B4               	movwf	UARTstringWAIT@data
  9240  0767  308A               	movlw	high ((STR_29+22)| (0+32768))
  9241  0768                     L14:	
  9242  0768  00B5               	movwf	UARTstringWAIT@data+1
  9243  0769  319B  23FC  3181   	fcall	_UARTstringWAIT
  9244  076C                     l6735:	
  9245                           
  9246                           ;PS_2.c: 771: }
  9247                           ;PS_2.c: 772: SetBaud(BaudTyped, ParityTyped);
  9248  076C  0020               	movlb	0	; select bank0
  9249  076D  0869               	movf	_BaudTyped+3,w
  9250  076E  00D7               	movwf	SetBaud@Baud+3
  9251  076F  0868               	movf	_BaudTyped+2,w
  9252  0770  00D6               	movwf	SetBaud@Baud+2
  9253  0771  0867               	movf	_BaudTyped+1,w
  9254  0772  00D5               	movwf	SetBaud@Baud+1
  9255  0773  0866               	movf	_BaudTyped,w
  9256  0774  00D4               	movwf	SetBaud@Baud
  9257  0775  0023               	movlb	3	; select bank3
  9258  0776  082B               	movf	_ParityTyped^(0+384),w
  9259  0777  00AF               	movwf	??_PS_2_Update^(0+384)
  9260  0778  082F               	movf	??_PS_2_Update^(0+384),w
  9261  0779  0020               	movlb	0	; select bank0
  9262  077A  00D8               	movwf	SetBaud@Parity
  9263  077B  3196  269B  3181   	fcall	_SetBaud
  9264                           
  9265                           ;PS_2.c: 773: }
  9266  077E  2F93               	goto	l6741
  9267  077F                     l6737:	
  9268                           
  9269                           ;PS_2.c: 774: else
  9270                           ;PS_2.c: 775: {
  9271                           ;PS_2.c: 776: UARTstringWAIT("KeyBoard Baud Out of Range\r\n");
  9272  077F  306B               	movlw	low (STR_37| (0+32768))
  9273  0780  0020               	movlb	0	; select bank0
  9274  0781  00B4               	movwf	UARTstringWAIT@data
  9275  0782  308A               	movlw	high (STR_37| (0+32768))
  9276  0783  00B5               	movwf	UARTstringWAIT@data+1
  9277  0784  319B  23FC  3181   	fcall	_UARTstringWAIT
  9278                           
  9279                           ;PS_2.c: 777: delayUS(10000);
  9280  0787  3000               	movlw	0
  9281  0788  0020               	movlb	0	; select bank0
  9282  0789  00A8               	movwf	delayUS@US+3
  9283  078A  3000               	movlw	0
  9284  078B  00A7               	movwf	delayUS@US+2
  9285  078C  3027               	movlw	39
  9286  078D  00A6               	movwf	delayUS@US+1
  9287  078E  3010               	movlw	16
  9288  078F  00A5               	movwf	delayUS@US
  9289  0790  3187  27C8  3181   	fcall	_delayUS
  9290  0793                     l6741:	
  9291                           
  9292                           ;PS_2.c: 778: }
  9293                           ;PS_2.c: 779: BAUDMODE=0;
  9294  0793  0022               	movlb	2	; select bank2
  9295  0794  01E3               	clrf	_BAUDMODE^(0+256)
  9296  0795                     l741:	
  9297  0795  0025               	movlb	5	; select bank5
  9298  0796                     l6743:	
  9299                           
  9300                           ;PS_2.c: 780: }
  9301                           ;PS_2.c: 781: }
  9302                           ;PS_2.c: 782: }
  9303                           ;PS_2.c: 783: }
  9304                           ;PS_2.c: 784: PS_2_Read_Data_First =0;
  9305  0796  0023               	movlb	3	; select bank3
  9306  0797  01A0               	clrf	_PS_2_Read_Data_First^(0+384)
  9307  0798  01A1               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
  9308                           
  9309                           ;PS_2.c: 785: PS_2_Read_Data_Second =0;
  9310  0799  01A4               	clrf	_PS_2_Read_Data_Second^(0+384)
  9311  079A  01A5               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
  9312                           
  9313                           ;PS_2.c: 786: PS_2_Read_Data_Third =0;
  9314  079B  01A6               	clrf	_PS_2_Read_Data_Third^(0+384)
  9315  079C  01A7               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
  9316                           
  9317                           ;PS_2.c: 787: PS_2_Read_Data_Forth =0;
  9318  079D  01A2               	clrf	_PS_2_Read_Data_Forth^(0+384)
  9319  079E  01A3               	clrf	(_PS_2_Read_Data_Forth+1)^(0+384)
  9320                           
  9321                           ;PS_2.c: 788: PS_2_Read_Data_FirstTEMP =0;
  9322  079F  0024               	movlb	4	; select bank4
  9323  07A0  01A0               	clrf	_PS_2_Read_Data_FirstTEMP^(0+512)
  9324  07A1  01A1               	clrf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512)
  9325                           
  9326                           ;PS_2.c: 789: PS_2_Read_Data_SecondTEMP =0;
  9327  07A2  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
  9328  07A3  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
  9329                           
  9330                           ;PS_2.c: 790: PS_2_Read_Data_ThirdTEMP =0;
  9331  07A4  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
  9332  07A5  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
  9333                           
  9334                           ;PS_2.c: 791: PS_2_Read_Data_ForthTEMP =0;
  9335  07A6  01A2               	clrf	_PS_2_Read_Data_ForthTEMP^(0+512)
  9336  07A7  01A3               	clrf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512)
  9337                           
  9338                           ;PS_2.c: 792: Caps_Lock_Key_old = Caps_Lock_Key;
  9339  07A8  0022               	movlb	2	; select bank2
  9340  07A9  0864               	movf	_Caps_Lock_Key^(0+256),w
  9341  07AA  0023               	movlb	3	; select bank3
  9342  07AB  00AF               	movwf	??_PS_2_Update^(0+384)
  9343  07AC  082F               	movf	??_PS_2_Update^(0+384),w
  9344  07AD  0022               	movlb	2	; select bank2
  9345  07AE  00E5               	movwf	_Caps_Lock_Key_old^(0+256)
  9346                           
  9347                           ;PS_2.c: 793: Right_Shift_Key_old = Right_Shift_Key;
  9348  07AF  0023               	movlb	3	; select bank3
  9349  07B0  082D               	movf	_Right_Shift_Key^(0+384),w
  9350  07B1  00AF               	movwf	??_PS_2_Update^(0+384)
  9351  07B2  082F               	movf	??_PS_2_Update^(0+384),w
  9352  07B3  0022               	movlb	2	; select bank2
  9353  07B4  00EB               	movwf	_Right_Shift_Key_old^(0+256)
  9354                           
  9355                           ;PS_2.c: 794: Left_Shift_Key_old = Left_Shift_Key;
  9356  07B5  0023               	movlb	3	; select bank3
  9357  07B6  082A               	movf	_Left_Shift_Key^(0+384),w
  9358  07B7  00AF               	movwf	??_PS_2_Update^(0+384)
  9359  07B8  082F               	movf	??_PS_2_Update^(0+384),w
  9360  07B9  0022               	movlb	2	; select bank2
  9361  07BA  00E9               	movwf	_Left_Shift_Key_old^(0+256)
  9362                           
  9363                           ;PS_2.c: 795: LATC &= ~0b00010000;
  9364  07BB  30EF               	movlw	239
  9365  07BC  0023               	movlb	3	; select bank3
  9366  07BD  00AF               	movwf	??_PS_2_Update^(0+384)
  9367  07BE  082F               	movf	??_PS_2_Update^(0+384),w
  9368  07BF  0022               	movlb	2	; select bank2
  9369  07C0  058E               	andwf	14,f	;volatile
  9370                           
  9371                           ;PS_2.c: 796: PIE1bits.RCIE = 1;
  9372  07C1  0021               	movlb	1	; select bank1
  9373  07C2  1691               	bsf	17,5	;volatile
  9374                           
  9375                           ;PS_2.c: 797: PS_2_ENABLE_INTERRUPT(0b00100000);
  9376  07C3  3020               	movlw	32
  9377  07C4  318B  23C2         	fcall	_PS_2_ENABLE_INTERRUPT
  9378  07C6  0020               	movlb	0	; select bank0
  9379  07C7  0008               	return
  9380  07C8                     __end_of_PS_2_Update:	
  9381                           
  9382                           	psect	text13
  9383  1000                     __ptext13:	
  9384 ;; *************** function ___lmul *****************
  9385 ;; Defined at:
  9386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;  multiplier      4    5[BANK0 ] unsigned long 
  9389 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;  product         4   13[BANK0 ] unsigned long 
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  4    5[BANK0 ] unsigned long 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9401 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;Total ram usage:       12 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    3
  9408 ;; This function calls:
  9409 ;;		Nothing
  9410 ;; This function is called by:
  9411 ;;		_PS_2_Update
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           
  9416                           ;psect for function ___lmul
  9417  1000                     ___lmul:	
  9418                           
  9419                           ;incstack = 0
  9420                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9421  1000  3000               	movlw	0
  9422  1001  0020               	movlb	0	; select bank0
  9423  1002  00B0               	movwf	___lmul@product+3
  9424  1003  3000               	movlw	0
  9425  1004  00AF               	movwf	___lmul@product+2
  9426  1005  3000               	movlw	0
  9427  1006  00AE               	movwf	___lmul@product+1
  9428  1007  3000               	movlw	0
  9429  1008  00AD               	movwf	___lmul@product
  9430  1009                     l6191:	
  9431  1009  1C25               	btfss	___lmul@multiplier,0
  9432  100A  2813               	goto	l6195
  9433  100B  0829               	movf	___lmul@multiplicand,w
  9434  100C  07AD               	addwf	___lmul@product,f
  9435  100D  082A               	movf	___lmul@multiplicand+1,w
  9436  100E  3DAE               	addwfc	___lmul@product+1,f
  9437  100F  082B               	movf	___lmul@multiplicand+2,w
  9438  1010  3DAF               	addwfc	___lmul@product+2,f
  9439  1011  082C               	movf	___lmul@multiplicand+3,w
  9440  1012  3DB0               	addwfc	___lmul@product+3,f
  9441  1013                     l6195:	
  9442  1013  3001               	movlw	1
  9443  1014                     u7985:	
  9444  1014  35A9               	lslf	___lmul@multiplicand,f
  9445  1015  0DAA               	rlf	___lmul@multiplicand+1,f
  9446  1016  0DAB               	rlf	___lmul@multiplicand+2,f
  9447  1017  0DAC               	rlf	___lmul@multiplicand+3,f
  9448  1018  0B89               	decfsz	9,f
  9449  1019  2814               	goto	u7985
  9450  101A  3001               	movlw	1
  9451  101B                     u7995:	
  9452  101B  36A8               	lsrf	___lmul@multiplier+3,f
  9453  101C  0CA7               	rrf	___lmul@multiplier+2,f
  9454  101D  0CA6               	rrf	___lmul@multiplier+1,f
  9455  101E  0CA5               	rrf	___lmul@multiplier,f
  9456  101F  0B89               	decfsz	9,f
  9457  1020  281B               	goto	u7995
  9458  1021  0828               	movf	___lmul@multiplier+3,w
  9459  1022  0427               	iorwf	___lmul@multiplier+2,w
  9460  1023  0426               	iorwf	___lmul@multiplier+1,w
  9461  1024  0425               	iorwf	___lmul@multiplier,w
  9462  1025  1D03               	skipz
  9463  1026  2809               	goto	l6191
  9464  1027  0830               	movf	___lmul@product+3,w
  9465  1028  00A8               	movwf	?___lmul+3
  9466  1029  082F               	movf	___lmul@product+2,w
  9467  102A  00A7               	movwf	?___lmul+2
  9468  102B  082E               	movf	___lmul@product+1,w
  9469  102C  00A6               	movwf	?___lmul+1
  9470  102D  082D               	movf	___lmul@product,w
  9471  102E  00A5               	movwf	?___lmul
  9472  102F  0008               	return
  9473  1030                     __end_of___lmul:	
  9474                           
  9475                           	psect	text14
  9476  19C4                     __ptext14:	
  9477 ;; *************** function _UART_send_break *****************
  9478 ;; Defined at:
  9479 ;;		line 301 in file "UART.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        0 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    3
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_PS_2_Update
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _UART_send_break
  9509  19C4                     _UART_send_break:	
  9510                           
  9511                           ;UART.c: 303: TX1STA |= 0b00001000;
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _UART_send_break: [wreg]
  9515  19C4  0023               	movlb	3	; select bank3
  9516  19C5  159E               	bsf	30,3	;volatile
  9517                           
  9518                           ;UART.c: 304: TXREG = 'd';
  9519  19C6  3064               	movlw	100
  9520  19C7  009A               	movwf	26	;volatile
  9521  19C8  0008               	return
  9522  19C9                     __end_of_UART_send_break:	
  9523                           
  9524                           	psect	text15
  9525  169B                     __ptext15:	
  9526 ;; *************** function _SetBaud *****************
  9527 ;; Defined at:
  9528 ;;		line 357 in file "UART.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  Baud            4   52[BANK0 ] unsigned long 
  9531 ;;  Parity          1   56[BANK0 ] unsigned char 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  buf            50    0[BANK2 ] unsigned char [50]
  9534 ;;  temp            4   58[BANK2 ] unsigned long 
  9535 ;;  Paritytemp      4   54[BANK2 ] unsigned long 
  9536 ;;  Baudtemp        4   50[BANK2 ] unsigned long 
  9537 ;;  i               1   62[BANK2 ] unsigned char 
  9538 ;; Return value:  Size  Location     Type
  9539 ;;		None               void
  9540 ;; Registers used:
  9541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9547 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Locals:         0       0       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Totals:         0      13       0      63       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;Total ram usage:       76 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    7
  9554 ;; This function calls:
  9555 ;;		_InitUART
  9556 ;;		_ReadBaud
  9557 ;;		_UARTstringWAIT
  9558 ;;		_WriteBaud
  9559 ;;		_delayUS
  9560 ;;		_sprintf
  9561 ;; This function is called by:
  9562 ;;		_PS_2_Update
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _SetBaud
  9568  169B                     _SetBaud:	
  9569                           
  9570                           ;UART.c: 359: unsigned char buf[50];
  9571                           ;UART.c: 360: unsigned long Baudtemp=0;
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9575  169B  3000               	movlw	0
  9576  169C  0022               	movlb	2	; select bank2
  9577  169D  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9578  169E  3000               	movlw	0
  9579  169F  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9580  16A0  3000               	movlw	0
  9581  16A1  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9582  16A2  3000               	movlw	0
  9583  16A3  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9584                           
  9585                           ;UART.c: 361: unsigned long Paritytemp=0;
  9586  16A4  3000               	movlw	0
  9587  16A5  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9588  16A6  3000               	movlw	0
  9589  16A7  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9590  16A8  3000               	movlw	0
  9591  16A9  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9592  16AA  3000               	movlw	0
  9593  16AB  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9594                           
  9595                           ;UART.c: 362: unsigned long temp;
  9596                           ;UART.c: 363: unsigned char i =0;
  9597  16AC  01DE               	clrf	SetBaud@i^(0+256)
  9598                           
  9599                           ;UART.c: 365: WriteBaud((0x1800 >> 5), Baud, Parity);
  9600  16AD  30C0               	movlw	192
  9601  16AE  0020               	movlb	0	; select bank0
  9602  16AF  00B6               	movwf	WriteBaud@row
  9603  16B0  3000               	movlw	0
  9604  16B1  00B7               	movwf	WriteBaud@row+1
  9605  16B2  0857               	movf	SetBaud@Baud+3,w
  9606  16B3  00BB               	movwf	WriteBaud@Baud+3
  9607  16B4  0856               	movf	SetBaud@Baud+2,w
  9608  16B5  00BA               	movwf	WriteBaud@Baud+2
  9609  16B6  0855               	movf	SetBaud@Baud+1,w
  9610  16B7  00B9               	movwf	WriteBaud@Baud+1
  9611  16B8  0854               	movf	SetBaud@Baud,w
  9612  16B9  00B8               	movwf	WriteBaud@Baud
  9613  16BA  0858               	movf	SetBaud@Parity,w
  9614  16BB  00D9               	movwf	??_SetBaud
  9615  16BC  0859               	movf	??_SetBaud,w
  9616  16BD  00BC               	movwf	WriteBaud@Parity
  9617  16BE  319E  26D8  3196   	fcall	_WriteBaud
  9618                           
  9619                           ;UART.c: 366: temp = ReadBaud((0x1800 >> 5), 0);
  9620  16C1  30C0               	movlw	192
  9621  16C2  0020               	movlb	0	; select bank0
  9622  16C3  00B7               	movwf	ReadBaud@row
  9623  16C4  3000               	movlw	0
  9624  16C5  00B8               	movwf	ReadBaud@row+1
  9625  16C6  01B9               	clrf	ReadBaud@column
  9626  16C7  319F  2736  3196   	fcall	_ReadBaud
  9627  16CA  0020               	movlb	0	; select bank0
  9628  16CB  083A               	movf	?_ReadBaud+3,w
  9629  16CC  0022               	movlb	2	; select bank2
  9630  16CD  00DD               	movwf	(SetBaud@temp+3)^(0+256)
  9631  16CE  0020               	movlb	0	; select bank0
  9632  16CF  0839               	movf	?_ReadBaud+2,w
  9633  16D0  0022               	movlb	2	; select bank2
  9634  16D1  00DC               	movwf	(SetBaud@temp+2)^(0+256)
  9635  16D2  0020               	movlb	0	; select bank0
  9636  16D3  0838               	movf	?_ReadBaud+1,w
  9637  16D4  0022               	movlb	2	; select bank2
  9638  16D5  00DB               	movwf	(SetBaud@temp+1)^(0+256)
  9639  16D6  0020               	movlb	0	; select bank0
  9640  16D7  0837               	movf	?_ReadBaud,w
  9641  16D8  0022               	movlb	2	; select bank2
  9642  16D9  00DA               	movwf	SetBaud@temp^(0+256)
  9643                           
  9644                           ;UART.c: 367: Baudtemp = temp & 0x000FFFFF;
  9645  16DA  30FF               	movlw	255
  9646  16DB  055A               	andwf	SetBaud@temp^(0+256),w
  9647  16DC  00D2               	movwf	SetBaud@Baudtemp^(0+256)
  9648  16DD  30FF               	movlw	255
  9649  16DE  055B               	andwf	(SetBaud@temp+1)^(0+256),w
  9650  16DF  00D3               	movwf	(SetBaud@Baudtemp+1)^(0+256)
  9651  16E0  300F               	movlw	15
  9652  16E1  055C               	andwf	(SetBaud@temp+2)^(0+256),w
  9653  16E2  00D4               	movwf	(SetBaud@Baudtemp+2)^(0+256)
  9654  16E3  3000               	movlw	0
  9655  16E4  055D               	andwf	(SetBaud@temp+3)^(0+256),w
  9656  16E5  00D5               	movwf	(SetBaud@Baudtemp+3)^(0+256)
  9657                           
  9658                           ;UART.c: 368: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
  9659  16E6  085A               	movf	SetBaud@temp^(0+256),w
  9660  16E7  0020               	movlb	0	; select bank0
  9661  16E8  00D9               	movwf	??_SetBaud
  9662  16E9  0022               	movlb	2	; select bank2
  9663  16EA  085B               	movf	(SetBaud@temp+1)^(0+256),w
  9664  16EB  0020               	movlb	0	; select bank0
  9665  16EC  00DA               	movwf	??_SetBaud+1
  9666  16ED  0022               	movlb	2	; select bank2
  9667  16EE  085C               	movf	(SetBaud@temp+2)^(0+256),w
  9668  16EF  0020               	movlb	0	; select bank0
  9669  16F0  00DB               	movwf	??_SetBaud+2
  9670  16F1  0022               	movlb	2	; select bank2
  9671  16F2  085D               	movf	(SetBaud@temp+3)^(0+256),w
  9672  16F3  0020               	movlb	0	; select bank0
  9673  16F4  00DC               	movwf	??_SetBaud+3
  9674  16F5  3014               	movlw	20
  9675  16F6                     u7655:	
  9676  16F6  36DC               	lsrf	??_SetBaud+3,f
  9677  16F7  0CDB               	rrf	??_SetBaud+2,f
  9678  16F8  0CDA               	rrf	??_SetBaud+1,f
  9679  16F9  0CD9               	rrf	??_SetBaud,f
  9680  16FA  0B89               	decfsz	9,f
  9681  16FB  2EF6               	goto	u7655
  9682  16FC  0859               	movf	??_SetBaud,w
  9683  16FD  390F               	andlw	15
  9684  16FE  00DD               	movwf	??_SetBaud+4
  9685  16FF  01DE               	clrf	??_SetBaud+5
  9686  1700  01DF               	clrf	??_SetBaud+6
  9687  1701  01E0               	clrf	??_SetBaud+7
  9688  1702  0860               	movf	??_SetBaud+7,w
  9689  1703  0022               	movlb	2	; select bank2
  9690  1704  00D9               	movwf	(SetBaud@Paritytemp+3)^(0+256)
  9691  1705  0020               	movlb	0	; select bank0
  9692  1706  085F               	movf	??_SetBaud+6,w
  9693  1707  0022               	movlb	2	; select bank2
  9694  1708  00D8               	movwf	(SetBaud@Paritytemp+2)^(0+256)
  9695  1709  0020               	movlb	0	; select bank0
  9696  170A  085E               	movf	??_SetBaud+5,w
  9697  170B  0022               	movlb	2	; select bank2
  9698  170C  00D7               	movwf	(SetBaud@Paritytemp+1)^(0+256)
  9699  170D  0020               	movlb	0	; select bank0
  9700  170E  085D               	movf	??_SetBaud+4,w
  9701  170F  0022               	movlb	2	; select bank2
  9702  1710  00D6               	movwf	SetBaud@Paritytemp^(0+256)
  9703                           
  9704                           ;UART.c: 370: InitUART(Baud, Parity);
  9705  1711  0020               	movlb	0	; select bank0
  9706  1712  0857               	movf	SetBaud@Baud+3,w
  9707  1713  00B6               	movwf	InitUART@Baud+3
  9708  1714  0856               	movf	SetBaud@Baud+2,w
  9709  1715  00B5               	movwf	InitUART@Baud+2
  9710  1716  0855               	movf	SetBaud@Baud+1,w
  9711  1717  00B4               	movwf	InitUART@Baud+1
  9712  1718  0854               	movf	SetBaud@Baud,w
  9713  1719  00B3               	movwf	InitUART@Baud
  9714  171A  0858               	movf	SetBaud@Parity,w
  9715  171B  00D9               	movwf	??_SetBaud
  9716  171C  0859               	movf	??_SetBaud,w
  9717  171D  00B7               	movwf	InitUART@parity
  9718  171E  3191  21CA  3196   	fcall	_InitUART
  9719                           
  9720                           ;UART.c: 371: UARTstringWAIT("\r\n");
  9721  1721  3052               	movlw	low ((STR_11+17)| (0+32768))
  9722  1722  0020               	movlb	0	; select bank0
  9723  1723  00B4               	movwf	UARTstringWAIT@data
  9724  1724  308B               	movlw	high ((STR_11+17)| (0+32768))
  9725  1725  00B5               	movwf	UARTstringWAIT@data+1
  9726  1726  319B  23FC  3196   	fcall	_UARTstringWAIT
  9727                           
  9728                           ;UART.c: 372: delayUS(10000);
  9729  1729  3000               	movlw	0
  9730  172A  0020               	movlb	0	; select bank0
  9731  172B  00A8               	movwf	delayUS@US+3
  9732  172C  3000               	movlw	0
  9733  172D  00A7               	movwf	delayUS@US+2
  9734  172E  3027               	movlw	39
  9735  172F  00A6               	movwf	delayUS@US+1
  9736  1730  3010               	movlw	16
  9737  1731  00A5               	movwf	delayUS@US
  9738  1732  3187  27C8  3196   	fcall	_delayUS
  9739                           
  9740                           ;UART.c: 373: if((Baud != Baudtemp) || (Parity != Paritytemp))
  9741  1735  0022               	movlb	2	; select bank2
  9742  1736  0855               	movf	(SetBaud@Baudtemp+3)^(0+256),w
  9743  1737  0020               	movlb	0	; select bank0
  9744  1738  0657               	xorwf	SetBaud@Baud+3,w
  9745  1739  1D03               	skipz
  9746  173A  2F4B               	goto	u7665
  9747  173B  0022               	movlb	2	; select bank2
  9748  173C  0854               	movf	(SetBaud@Baudtemp+2)^(0+256),w
  9749  173D  0020               	movlb	0	; select bank0
  9750  173E  0656               	xorwf	SetBaud@Baud+2,w
  9751  173F  1D03               	skipz
  9752  1740  2F4B               	goto	u7665
  9753  1741  0022               	movlb	2	; select bank2
  9754  1742  0853               	movf	(SetBaud@Baudtemp+1)^(0+256),w
  9755  1743  0020               	movlb	0	; select bank0
  9756  1744  0655               	xorwf	SetBaud@Baud+1,w
  9757  1745  1D03               	skipz
  9758  1746  2F4B               	goto	u7665
  9759  1747  0022               	movlb	2	; select bank2
  9760  1748  0852               	movf	SetBaud@Baudtemp^(0+256),w
  9761  1749  0020               	movlb	0	; select bank0
  9762  174A  0654               	xorwf	SetBaud@Baud,w
  9763  174B                     u7665:	
  9764  174B  1D03               	skipz
  9765  174C  2F6A               	goto	l5949
  9766  174D  0858               	movf	SetBaud@Parity,w
  9767  174E  00D9               	movwf	??_SetBaud
  9768  174F  01DA               	clrf	??_SetBaud+1
  9769  1750  01DB               	clrf	??_SetBaud+2
  9770  1751  01DC               	clrf	??_SetBaud+3
  9771  1752  0022               	movlb	2	; select bank2
  9772  1753  0859               	movf	(SetBaud@Paritytemp+3)^(0+256),w
  9773  1754  0020               	movlb	0	; select bank0
  9774  1755  065C               	xorwf	??_SetBaud+3,w
  9775  1756  1D03               	skipz
  9776  1757  2F68               	goto	u7675
  9777  1758  0022               	movlb	2	; select bank2
  9778  1759  0858               	movf	(SetBaud@Paritytemp+2)^(0+256),w
  9779  175A  0020               	movlb	0	; select bank0
  9780  175B  065B               	xorwf	??_SetBaud+2,w
  9781  175C  1D03               	skipz
  9782  175D  2F68               	goto	u7675
  9783  175E  0022               	movlb	2	; select bank2
  9784  175F  0857               	movf	(SetBaud@Paritytemp+1)^(0+256),w
  9785  1760  0020               	movlb	0	; select bank0
  9786  1761  065A               	xorwf	??_SetBaud+1,w
  9787  1762  1D03               	skipz
  9788  1763  2F68               	goto	u7675
  9789  1764  0022               	movlb	2	; select bank2
  9790  1765  0856               	movf	SetBaud@Paritytemp^(0+256),w
  9791  1766  0020               	movlb	0	; select bank0
  9792  1767  0659               	xorwf	??_SetBaud,w
  9793  1768                     u7675:	
  9794  1768  1903               	skipnz
  9795  1769  2F7D               	goto	l5953
  9796  176A                     l5949:	
  9797                           
  9798                           ;UART.c: 374: {
  9799                           ;UART.c: 375: UARTstringWAIT("KeyBoard Program Fail\r\n");
  9800  176A  30A2               	movlw	low (STR_20| (0+32768))
  9801  176B  00B4               	movwf	UARTstringWAIT@data
  9802  176C  308A               	movlw	high (STR_20| (0+32768))
  9803  176D  00B5               	movwf	UARTstringWAIT@data+1
  9804  176E  319B  23FC  3196   	fcall	_UARTstringWAIT
  9805                           
  9806                           ;UART.c: 376: delayUS(10000);
  9807  1771  3000               	movlw	0
  9808  1772  0020               	movlb	0	; select bank0
  9809  1773  00A8               	movwf	delayUS@US+3
  9810  1774  3000               	movlw	0
  9811  1775  00A7               	movwf	delayUS@US+2
  9812  1776  3027               	movlw	39
  9813  1777  00A6               	movwf	delayUS@US+1
  9814  1778  3010               	movlw	16
  9815  1779  00A5               	movwf	delayUS@US
  9816  177A  3187  27C8  3196   	fcall	_delayUS
  9817  177D                     l5953:	
  9818                           
  9819                           ;UART.c: 377: }
  9820                           ;UART.c: 380: for(i =0;i<10;i++)
  9821  177D  0022               	movlb	2	; select bank2
  9822  177E  01DE               	clrf	SetBaud@i^(0+256)
  9823  177F  300A               	movlw	10
  9824  1780  025E               	subwf	SetBaud@i^(0+256),w
  9825  1781  1803               	btfsc	3,0
  9826  1782  2FAC               	goto	l5967
  9827  1783                     l424:	
  9828                           
  9829                           ;UART.c: 381: {
  9830                           ;UART.c: 382: LATC |= 0b00010000;
  9831  1783  160E               	bsf	14,4	;volatile
  9832                           
  9833                           ;UART.c: 383: delayUS(10000);
  9834  1784  3000               	movlw	0
  9835  1785  0020               	movlb	0	; select bank0
  9836  1786  00A8               	movwf	delayUS@US+3
  9837  1787  3000               	movlw	0
  9838  1788  00A7               	movwf	delayUS@US+2
  9839  1789  3027               	movlw	39
  9840  178A  00A6               	movwf	delayUS@US+1
  9841  178B  3010               	movlw	16
  9842  178C  00A5               	movwf	delayUS@US
  9843  178D  3187  27C8  3196   	fcall	_delayUS
  9844                           
  9845                           ;UART.c: 384: LATC &= ~0b00010000;
  9846  1790  30EF               	movlw	239
  9847  1791  0020               	movlb	0	; select bank0
  9848  1792  00D9               	movwf	??_SetBaud
  9849  1793  0859               	movf	??_SetBaud,w
  9850  1794  0022               	movlb	2	; select bank2
  9851  1795  058E               	andwf	14,f	;volatile
  9852                           
  9853                           ;UART.c: 385: delayUS(10000);
  9854  1796  3000               	movlw	0
  9855  1797  0020               	movlb	0	; select bank0
  9856  1798  00A8               	movwf	delayUS@US+3
  9857  1799  3000               	movlw	0
  9858  179A  00A7               	movwf	delayUS@US+2
  9859  179B  3027               	movlw	39
  9860  179C  00A6               	movwf	delayUS@US+1
  9861  179D  3010               	movlw	16
  9862  179E  00A5               	movwf	delayUS@US
  9863  179F  3187  27C8  3196   	fcall	_delayUS
  9864  17A2  3001               	movlw	1
  9865  17A3  0020               	movlb	0	; select bank0
  9866  17A4  00D9               	movwf	??_SetBaud
  9867  17A5  0859               	movf	??_SetBaud,w
  9868  17A6  0022               	movlb	2	; select bank2
  9869  17A7  07DE               	addwf	SetBaud@i^(0+256),f
  9870  17A8  300A               	movlw	10
  9871  17A9  025E               	subwf	SetBaud@i^(0+256),w
  9872  17AA  1C03               	skipc
  9873  17AB  2F83               	goto	l424
  9874  17AC                     l5967:	
  9875                           
  9876                           ;UART.c: 386: }
  9877                           ;UART.c: 388: sprintf(buf,"KeyBoard Baud is %lu",Baud);
  9878  17AC  3020               	movlw	low SetBaud@buf
  9879  17AD  0020               	movlb	0	; select bank0
  9880  17AE  00BD               	movwf	sprintf@sp
  9881  17AF  3001               	movlw	high SetBaud@buf
  9882  17B0  00BE               	movwf	sprintf@sp+1
  9883  17B1  3017               	movlw	low (STR_13| (0+32768))
  9884  17B2  00BF               	movwf	sprintf@f
  9885  17B3  308B               	movlw	high (STR_13| (0+32768))
  9886  17B4  00C0               	movwf	sprintf@f+1
  9887  17B5  0857               	movf	SetBaud@Baud+3,w
  9888  17B6  00C4               	movwf	?_sprintf+7
  9889  17B7  0856               	movf	SetBaud@Baud+2,w
  9890  17B8  00C3               	movwf	?_sprintf+6
  9891  17B9  0855               	movf	SetBaud@Baud+1,w
  9892  17BA  00C2               	movwf	?_sprintf+5
  9893  17BB  0854               	movf	SetBaud@Baud,w
  9894  17BC  00C1               	movwf	?_sprintf+4
  9895  17BD  3194  249F  3196   	fcall	_sprintf
  9896                           
  9897                           ;UART.c: 389: UARTstringWAIT(buf);
  9898  17C0  3020               	movlw	low SetBaud@buf
  9899  17C1  0020               	movlb	0	; select bank0
  9900  17C2  00B4               	movwf	UARTstringWAIT@data
  9901  17C3  3001               	movlw	high SetBaud@buf
  9902  17C4  00B5               	movwf	UARTstringWAIT@data+1
  9903  17C5  319B  23FC  3196   	fcall	_UARTstringWAIT
  9904                           
  9905                           ;UART.c: 390: if(Parity)
  9906  17C8  0020               	movlb	0	; select bank0
  9907  17C9  0858               	movf	SetBaud@Parity,w
  9908  17CA  1903               	btfsc	3,2
  9909  17CB  2FED               	goto	l5987
  9910                           
  9911                           ;UART.c: 391: {
  9912                           ;UART.c: 392: switch (Parity)
  9913  17CC  2FE0               	goto	l5985
  9914  17CD                     l5975:	
  9915                           ;UART.c: 393: {
  9916                           ;UART.c: 394: case 1:
  9917                           
  9918                           
  9919                           ;UART.c: 395: UARTstringWAIT(" with Odd parity bit\r\n");
  9920  17CD  30EA               	movlw	low (STR_14| (0+32768))
  9921  17CE  00B4               	movwf	UARTstringWAIT@data
  9922  17CF  308A               	movlw	high (STR_14| (0+32768))
  9923  17D0  2FF0               	goto	L15
  9924  17D1                     l5977:	
  9925                           ;UART.c: 397: case 2:
  9926                           
  9927                           ;UART.c: 396: break;
  9928                           
  9929                           
  9930                           ;UART.c: 398: UARTstringWAIT(" with Even parity bit\r\n");
  9931  17D1  30BA               	movlw	low (STR_15| (0+32768))
  9932  17D2  0020               	movlb	0	; select bank0
  9933  17D3  00B4               	movwf	UARTstringWAIT@data
  9934  17D4  308A               	movlw	high (STR_15| (0+32768))
  9935  17D5  2FF0               	goto	L15
  9936  17D6                     l5979:	
  9937                           ;UART.c: 400: case 3:
  9938                           
  9939                           ;UART.c: 399: break;
  9940                           
  9941                           
  9942                           ;UART.c: 401: UARTstringWAIT(" with Mark bit\r\n");
  9943  17D6  309F               	movlw	low (STR_16| (0+32768))
  9944  17D7  0020               	movlb	0	; select bank0
  9945  17D8  00B4               	movwf	UARTstringWAIT@data
  9946  17D9  308B               	movlw	high (STR_16| (0+32768))
  9947  17DA  2FF0               	goto	L15
  9948  17DB                     l5981:	
  9949                           ;UART.c: 403: default:
  9950                           
  9951                           ;UART.c: 402: break;
  9952                           
  9953                           
  9954                           ;UART.c: 404: UARTstringWAIT(" with Space bit\r\n");
  9955  17DB  308D               	movlw	low (STR_17| (0+32768))
  9956  17DC  0020               	movlb	0	; select bank0
  9957  17DD  00B4               	movwf	UARTstringWAIT@data
  9958  17DE  308B               	movlw	high (STR_17| (0+32768))
  9959  17DF  2FF0               	goto	L15
  9960  17E0                     l5985:	
  9961                           ;UART.c: 406: }
  9962                           
  9963                           ;UART.c: 405: break;
  9964                           
  9965  17E0  0020               	movlb	0	; select bank0
  9966  17E1  0858               	movf	SetBaud@Parity,w
  9967                           
  9968                           ; Switch size 1, requested type "space"
  9969                           ; Number of cases is 3, Range of values is 1 to 3
  9970                           ; switch strategies available:
  9971                           ; Name         Instructions Cycles
  9972                           ; simple_byte           10     6 (average)
  9973                           ; direct_byte           15     9 (fixed)
  9974                           ; jumptable            263     9 (fixed)
  9975                           ;	Chosen strategy is simple_byte
  9976  17E2  3A01               	xorlw	1	; case 1
  9977  17E3  1903               	skipnz
  9978  17E4  2FCD               	goto	l5975
  9979  17E5  3A03               	xorlw	3	; case 2
  9980  17E6  1903               	skipnz
  9981  17E7  2FD1               	goto	l5977
  9982  17E8  3A01               	xorlw	1	; case 3
  9983  17E9  1903               	skipnz
  9984  17EA  2FD6               	goto	l5979
  9985  17EB  2FDB               	goto	l5981
  9986                           
  9987                           ;UART.c: 407: }
  9988  17EC  2FF4               	goto	l5989
  9989  17ED                     l5987:	
  9990                           
  9991                           ;UART.c: 408: else
  9992                           ;UART.c: 409: {
  9993                           ;UART.c: 410: UARTstringWAIT(" with no parity bit\r\n");
  9994  17ED  3011               	movlw	low ((STR_29+22)| (0+32768))
  9995  17EE  00B4               	movwf	UARTstringWAIT@data
  9996  17EF  308A               	movlw	high ((STR_29+22)| (0+32768))
  9997  17F0                     L15:	
  9998  17F0  00B5               	movwf	UARTstringWAIT@data+1
  9999  17F1  319B  23FC  3196   	fcall	_UARTstringWAIT
 10000  17F4                     l5989:	
 10001                           
 10002                           ;UART.c: 411: }
 10003                           ;UART.c: 412: delayUS(10000);
 10004  17F4  3000               	movlw	0
 10005  17F5  0020               	movlb	0	; select bank0
 10006  17F6  00A8               	movwf	delayUS@US+3
 10007  17F7  3000               	movlw	0
 10008  17F8  00A7               	movwf	delayUS@US+2
 10009  17F9  3027               	movlw	39
 10010  17FA  00A6               	movwf	delayUS@US+1
 10011  17FB  3010               	movlw	16
 10012  17FC  00A5               	movwf	delayUS@US
 10013  17FD  3187  27C8         	fcall	_delayUS
 10014  17FF  0008               	return
 10015  1800                     __end_of_SetBaud:	
 10016                           
 10017                           	psect	text16
 10018  1ED8                     __ptext16:	
 10019 ;; *************** function _WriteBaud *****************
 10020 ;; Defined at:
 10021 ;;		line 171 in file "FLASH.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  row             2   22[BANK0 ] unsigned int 
 10024 ;;  Baud            4   24[BANK0 ] unsigned long 
 10025 ;;  Parity          1   28[BANK0 ] unsigned char 
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;  temp            4   37[BANK0 ] unsigned long 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;		None               void
 10030 ;; Registers used:
 10031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10037 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;Total ram usage:       19 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    6
 10044 ;; This function calls:
 10045 ;;		_WriteFlash_Sequential
 10046 ;; This function is called by:
 10047 ;;		_SetBaud
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           
 10052                           ;psect for function _WriteBaud
 10053  1ED8                     _WriteBaud:	
 10054                           
 10055                           ;FLASH.c: 173: unsigned long temp;
 10056                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10060  1ED8  0020               	movlb	0	; select bank0
 10061  1ED9  083C               	movf	WriteBaud@Parity,w
 10062  1EDA  3907               	andlw	7
 10063  1EDB  00BD               	movwf	??_WriteBaud
 10064  1EDC  01BE               	clrf	??_WriteBaud+1
 10065  1EDD  01BF               	clrf	??_WriteBaud+2
 10066  1EDE  01C0               	clrf	??_WriteBaud+3
 10067  1EDF  3014               	movlw	20
 10068  1EE0                     u7525:	
 10069  1EE0  35BD               	lslf	??_WriteBaud,f
 10070  1EE1  0DBE               	rlf	??_WriteBaud+1,f
 10071  1EE2  0DBF               	rlf	??_WriteBaud+2,f
 10072  1EE3  0DC0               	rlf	??_WriteBaud+3,f
 10073  1EE4  0B89               	decfsz	9,f
 10074  1EE5  2EE0               	goto	u7525
 10075  1EE6  30FF               	movlw	255
 10076  1EE7  0538               	andwf	WriteBaud@Baud,w
 10077  1EE8  00C1               	movwf	??_WriteBaud+4
 10078  1EE9  30FF               	movlw	255
 10079  1EEA  0539               	andwf	WriteBaud@Baud+1,w
 10080  1EEB  00C2               	movwf	??_WriteBaud+5
 10081  1EEC  300F               	movlw	15
 10082  1EED  053A               	andwf	WriteBaud@Baud+2,w
 10083  1EEE  00C3               	movwf	??_WriteBaud+6
 10084  1EEF  3000               	movlw	0
 10085  1EF0  053B               	andwf	WriteBaud@Baud+3,w
 10086  1EF1  00C4               	movwf	??_WriteBaud+7
 10087  1EF2  0841               	movf	??_WriteBaud+4,w
 10088  1EF3  07BD               	addwf	??_WriteBaud,f
 10089  1EF4  0842               	movf	??_WriteBaud+5,w
 10090  1EF5  3DBE               	addwfc	??_WriteBaud+1,f
 10091  1EF6  0843               	movf	??_WriteBaud+6,w
 10092  1EF7  3DBF               	addwfc	??_WriteBaud+2,f
 10093  1EF8  0844               	movf	??_WriteBaud+7,w
 10094  1EF9  3DC0               	addwfc	??_WriteBaud+3,f
 10095  1EFA  0840               	movf	??_WriteBaud+3,w
 10096  1EFB  00C8               	movwf	WriteBaud@temp+3
 10097  1EFC  083F               	movf	??_WriteBaud+2,w
 10098  1EFD  00C7               	movwf	WriteBaud@temp+2
 10099  1EFE  083E               	movf	??_WriteBaud+1,w
 10100  1EFF  00C6               	movwf	WriteBaud@temp+1
 10101  1F00  083D               	movf	??_WriteBaud,w
 10102  1F01  00C5               	movwf	WriteBaud@temp
 10103                           
 10104                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 10105  1F02  30FF               	movlw	255
 10106  1F03  0545               	andwf	WriteBaud@temp,w
 10107  1F04  0024               	movlb	4	; select bank4
 10108  1F05  00B2               	movwf	(_MEM^(0+512)+2)
 10109  1F06  303F               	movlw	63
 10110  1F07  0020               	movlb	0	; select bank0
 10111  1F08  0546               	andwf	WriteBaud@temp+1,w
 10112  1F09  0024               	movlb	4	; select bank4
 10113  1F0A  00B3               	movwf	((_MEM+1)^(0+512)+2)
 10114                           
 10115                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 10116  1F0B  0020               	movlb	0	; select bank0
 10117  1F0C  0845               	movf	WriteBaud@temp,w
 10118  1F0D  00BD               	movwf	??_WriteBaud
 10119  1F0E  0846               	movf	WriteBaud@temp+1,w
 10120  1F0F  00BE               	movwf	??_WriteBaud+1
 10121  1F10  0847               	movf	WriteBaud@temp+2,w
 10122  1F11  00BF               	movwf	??_WriteBaud+2
 10123  1F12  0848               	movf	WriteBaud@temp+3,w
 10124  1F13  00C0               	movwf	??_WriteBaud+3
 10125  1F14  300E               	movlw	14
 10126  1F15                     u7535:	
 10127  1F15  36C0               	lsrf	??_WriteBaud+3,f
 10128  1F16  0CBF               	rrf	??_WriteBaud+2,f
 10129  1F17  0CBE               	rrf	??_WriteBaud+1,f
 10130  1F18  0CBD               	rrf	??_WriteBaud,f
 10131  1F19  0B89               	decfsz	9,f
 10132  1F1A  2F15               	goto	u7535
 10133  1F1B  30FF               	movlw	255
 10134  1F1C  053D               	andwf	??_WriteBaud,w
 10135  1F1D  0024               	movlb	4	; select bank4
 10136  1F1E  00B0               	movwf	_MEM^(0+512)
 10137  1F1F  303F               	movlw	63
 10138  1F20  0020               	movlb	0	; select bank0
 10139  1F21  053E               	andwf	??_WriteBaud+1,w
 10140  1F22  0024               	movlb	4	; select bank4
 10141  1F23  00B1               	movwf	(_MEM+1)^(0+512)
 10142                           
 10143                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 10144  1F24  0020               	movlb	0	; select bank0
 10145  1F25  0837               	movf	WriteBaud@row+1,w
 10146  1F26  01B0               	clrf	WriteFlash_Sequential@row+1
 10147  1F27  07B0               	addwf	WriteFlash_Sequential@row+1,f
 10148  1F28  0836               	movf	WriteBaud@row,w
 10149  1F29  01AF               	clrf	WriteFlash_Sequential@row
 10150  1F2A  07AF               	addwf	WriteFlash_Sequential@row,f
 10151  1F2B  3030               	movlw	_MEM& (0+255)
 10152  1F2C  00BD               	movwf	??_WriteBaud
 10153  1F2D  083D               	movf	??_WriteBaud,w
 10154  1F2E  00B1               	movwf	WriteFlash_Sequential@buffer
 10155  1F2F  3002               	movlw	2
 10156  1F30  00BE               	movwf	??_WriteBaud+1
 10157  1F31  083E               	movf	??_WriteBaud+1,w
 10158  1F32  00B2               	movwf	WriteFlash_Sequential@amount
 10159  1F33  3192  22BA         	fcall	_WriteFlash_Sequential
 10160  1F35  0008               	return
 10161  1F36                     __end_of_WriteBaud:	
 10162                           
 10163                           	psect	text17
 10164  12BA                     __ptext17:	
 10165 ;; *************** function _WriteFlash_Sequential *****************
 10166 ;; Defined at:
 10167 ;;		line 112 in file "FLASH.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  row             2   15[BANK0 ] unsigned int 
 10170 ;;  buffer          1   17[BANK0 ] PTR unsigned int 
 10171 ;;		 -> MEM(4), 
 10172 ;;  amount          1   18[BANK0 ] unsigned char 
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;  TempBufL       32   32[BANK1 ] unsigned char [32]
 10175 ;;  TempBufH       32    0[BANK1 ] unsigned char [32]
 10176 ;;  temp            2   67[BANK1 ] unsigned int 
 10177 ;;  i               1   70[BANK1 ] unsigned char 
 10178 ;;  spaces          1   69[BANK1 ] unsigned char 
 10179 ;;  amountTemp      1   66[BANK1 ] unsigned char 
 10180 ;;  tempL           1   65[BANK1 ] unsigned char 
 10181 ;;  tempH           1   64[BANK1 ] unsigned char 
 10182 ;; Return value:  Size  Location     Type
 10183 ;;		None               void
 10184 ;; Registers used:
 10185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;      Totals:         0       7      71       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;Total ram usage:       78 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    5
 10198 ;; This function calls:
 10199 ;;		_BlockErase
 10200 ;;		_ReadFlash_2Byte
 10201 ;;		_UNLOCK
 10202 ;;		_delayUS
 10203 ;; This function is called by:
 10204 ;;		_WriteBaud
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           
 10209                           ;psect for function _WriteFlash_Sequential
 10210  12BA                     _WriteFlash_Sequential:	
 10211                           
 10212                           ;FLASH.c: 114: unsigned char spaces = 32;
 10213                           
 10214                           ;incstack = 0
 10215                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10216  12BA  3020               	movlw	32
 10217  12BB  0020               	movlb	0	; select bank0
 10218  12BC  00B3               	movwf	??_WriteFlash_Sequential
 10219  12BD  0833               	movf	??_WriteFlash_Sequential,w
 10220  12BE  0021               	movlb	1	; select bank1
 10221  12BF  00E5               	movwf	WriteFlash_Sequential@spaces^(0+128)
 10222                           
 10223                           ;FLASH.c: 115: unsigned char tempH;
 10224                           ;FLASH.c: 116: unsigned char tempL;
 10225                           ;FLASH.c: 117: unsigned char i;
 10226                           ;FLASH.c: 118: unsigned int temp;
 10227                           ;FLASH.c: 119: unsigned char amountTemp =0;
 10228  12C0  01E2               	clrf	WriteFlash_Sequential@amountTemp^(0+128)
 10229                           
 10230                           ;FLASH.c: 120: unsigned char TempBufH[32];
 10231                           ;FLASH.c: 121: unsigned char TempBufL[32];
 10232                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 10233  12C1  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10234  12C2                     l5611:	
 10235  12C2  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10236  12C3  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10237  12C4  1803               	btfsc	3,0
 10238  12C5  2B33               	goto	l5613
 10239                           
 10240                           ;FLASH.c: 124: {
 10241                           ;FLASH.c: 125: amountTemp++;
 10242  12C6  3001               	movlw	1
 10243  12C7  0020               	movlb	0	; select bank0
 10244  12C8  00B3               	movwf	??_WriteFlash_Sequential
 10245  12C9  0833               	movf	??_WriteFlash_Sequential,w
 10246  12CA  0021               	movlb	1	; select bank1
 10247  12CB  07E2               	addwf	WriteFlash_Sequential@amountTemp^(0+128),f
 10248                           
 10249                           ;FLASH.c: 126: if(amountTemp <= amount)
 10250  12CC  0862               	movf	WriteFlash_Sequential@amountTemp^(0+128),w
 10251  12CD  0020               	movlb	0	; select bank0
 10252  12CE  0232               	subwf	WriteFlash_Sequential@amount,w
 10253  12CF  1C03               	skipc
 10254  12D0  2AEF               	goto	l5599
 10255                           
 10256                           ;FLASH.c: 127: {
 10257                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 10258  12D1  0831               	movf	WriteFlash_Sequential@buffer,w
 10259  12D2  0086               	movwf	6
 10260  12D3  3002               	movlw	2	; select bank4/5
 10261  12D4  0087               	movwf	7
 10262  12D5  3F40               	moviw [0]fsr1
 10263  12D6  00B3               	movwf	??_WriteFlash_Sequential
 10264  12D7  3F41               	moviw [1]fsr1
 10265  12D8  00B4               	movwf	??_WriteFlash_Sequential+1
 10266  12D9  0834               	movf	??_WriteFlash_Sequential+1,w
 10267  12DA  393F               	andlw	63
 10268  12DB  00B5               	movwf	??_WriteFlash_Sequential+2
 10269  12DC  0835               	movf	??_WriteFlash_Sequential+2,w
 10270  12DD  0021               	movlb	1	; select bank1
 10271  12DE  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10272                           
 10273                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 10274  12DF  0020               	movlb	0	; select bank0
 10275  12E0  0831               	movf	WriteFlash_Sequential@buffer,w
 10276  12E1  0086               	movwf	6
 10277  12E2  3002               	movlw	2	; select bank4/5
 10278  12E3  0087               	movwf	7
 10279  12E4  0801               	movf	1,w
 10280  12E5  00B3               	movwf	??_WriteFlash_Sequential
 10281  12E6  0833               	movf	??_WriteFlash_Sequential,w
 10282  12E7  0021               	movlb	1	; select bank1
 10283  12E8  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10284                           
 10285                           ;FLASH.c: 130: buffer++;
 10286  12E9  3002               	movlw	2
 10287  12EA  0020               	movlb	0	; select bank0
 10288  12EB  00B3               	movwf	??_WriteFlash_Sequential
 10289  12EC  0833               	movf	??_WriteFlash_Sequential,w
 10290  12ED  07B1               	addwf	WriteFlash_Sequential@buffer,f
 10291                           
 10292                           ;FLASH.c: 131: }
 10293  12EE  2B15               	goto	l5605
 10294  12EF                     l5599:	
 10295                           
 10296                           ;FLASH.c: 132: else
 10297                           ;FLASH.c: 133: {
 10298                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 10299  12EF  0830               	movf	WriteFlash_Sequential@row+1,w
 10300  12F0  01A6               	clrf	ReadFlash_2Byte@row+1
 10301  12F1  07A6               	addwf	ReadFlash_2Byte@row+1,f
 10302  12F2  082F               	movf	WriteFlash_Sequential@row,w
 10303  12F3  01A5               	clrf	ReadFlash_2Byte@row
 10304  12F4  07A5               	addwf	ReadFlash_2Byte@row,f
 10305  12F5  0021               	movlb	1	; select bank1
 10306  12F6  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10307  12F7  0020               	movlb	0	; select bank0
 10308  12F8  00B3               	movwf	??_WriteFlash_Sequential
 10309  12F9  0833               	movf	??_WriteFlash_Sequential,w
 10310  12FA  00A7               	movwf	ReadFlash_2Byte@column
 10311  12FB  319B  23CA  3192   	fcall	_ReadFlash_2Byte
 10312  12FE  0020               	movlb	0	; select bank0
 10313  12FF  0826               	movf	?_ReadFlash_2Byte+1,w
 10314  1300  0021               	movlb	1	; select bank1
 10315  1301  01E4               	clrf	(WriteFlash_Sequential@temp+1)^(0+128)
 10316  1302  07E4               	addwf	(WriteFlash_Sequential@temp+1)^(0+128),f
 10317  1303  0020               	movlb	0	; select bank0
 10318  1304  0825               	movf	?_ReadFlash_2Byte,w
 10319  1305  0021               	movlb	1	; select bank1
 10320  1306  01E3               	clrf	WriteFlash_Sequential@temp^(0+128)
 10321  1307  07E3               	addwf	WriteFlash_Sequential@temp^(0+128),f
 10322                           
 10323                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 10324  1308  0864               	movf	(WriteFlash_Sequential@temp+1)^(0+128),w
 10325  1309  393F               	andlw	63
 10326  130A  0020               	movlb	0	; select bank0
 10327  130B  00B3               	movwf	??_WriteFlash_Sequential
 10328  130C  0833               	movf	??_WriteFlash_Sequential,w
 10329  130D  0021               	movlb	1	; select bank1
 10330  130E  00E0               	movwf	WriteFlash_Sequential@tempH^(0+128)
 10331                           
 10332                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 10333  130F  0863               	movf	WriteFlash_Sequential@temp^(0+128),w
 10334  1310  0020               	movlb	0	; select bank0
 10335  1311  00B3               	movwf	??_WriteFlash_Sequential
 10336  1312  0833               	movf	??_WriteFlash_Sequential,w
 10337  1313  0021               	movlb	1	; select bank1
 10338  1314  00E1               	movwf	WriteFlash_Sequential@tempL^(0+128)
 10339  1315                     l5605:	
 10340                           
 10341                           ;FLASH.c: 138: }
 10342                           ;FLASH.c: 139: TempBufH[i] = tempH;
 10343  1315  0021               	movlb	1	; select bank1
 10344  1316  0860               	movf	WriteFlash_Sequential@tempH^(0+128),w
 10345  1317  0020               	movlb	0	; select bank0
 10346  1318  00B3               	movwf	??_WriteFlash_Sequential
 10347  1319  0021               	movlb	1	; select bank1
 10348  131A  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10349  131B  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10350  131C  0086               	movwf	6
 10351  131D  0187               	clrf	7
 10352  131E  0020               	movlb	0	; select bank0
 10353  131F  0833               	movf	??_WriteFlash_Sequential,w
 10354  1320  0081               	movwf	1
 10355                           
 10356                           ;FLASH.c: 140: TempBufL[i] = tempL;
 10357  1321  0021               	movlb	1	; select bank1
 10358  1322  0861               	movf	WriteFlash_Sequential@tempL^(0+128),w
 10359  1323  0020               	movlb	0	; select bank0
 10360  1324  00B3               	movwf	??_WriteFlash_Sequential
 10361  1325  0021               	movlb	1	; select bank1
 10362  1326  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10363  1327  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10364  1328  0086               	movwf	6
 10365  1329  0187               	clrf	7
 10366  132A  0020               	movlb	0	; select bank0
 10367  132B  0833               	movf	??_WriteFlash_Sequential,w
 10368  132C  0081               	movwf	1
 10369  132D  3001               	movlw	1
 10370  132E  00B3               	movwf	??_WriteFlash_Sequential
 10371  132F  0833               	movf	??_WriteFlash_Sequential,w
 10372  1330  0021               	movlb	1	; select bank1
 10373  1331  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10374  1332  2AC2               	goto	l5611
 10375  1333                     l5613:	
 10376                           
 10377                           ;FLASH.c: 141: }
 10378                           ;FLASH.c: 142: BlockErase(row);
 10379  1333  0020               	movlb	0	; select bank0
 10380  1334  0830               	movf	WriteFlash_Sequential@row+1,w
 10381  1335  01A6               	clrf	BlockErase@row+1
 10382  1336  07A6               	addwf	BlockErase@row+1,f
 10383  1337  082F               	movf	WriteFlash_Sequential@row,w
 10384  1338  01A5               	clrf	BlockErase@row
 10385  1339  07A5               	addwf	BlockErase@row,f
 10386  133A  319B  2399  3192   	fcall	_BlockErase
 10387                           
 10388                           ;FLASH.c: 143: delayUS(1000);
 10389  133D  3000               	movlw	0
 10390  133E  0020               	movlb	0	; select bank0
 10391  133F  00A8               	movwf	delayUS@US+3
 10392  1340  3000               	movlw	0
 10393  1341  00A7               	movwf	delayUS@US+2
 10394  1342  3003               	movlw	3
 10395  1343  00A6               	movwf	delayUS@US+1
 10396  1344  30E8               	movlw	232
 10397  1345  00A5               	movwf	delayUS@US
 10398  1346  3187  27C8  3192   	fcall	_delayUS
 10399                           
 10400                           ;FLASH.c: 144: INTCON &= ~0x80;
 10401  1349  307F               	movlw	127
 10402  134A  0020               	movlb	0	; select bank0
 10403  134B  00B3               	movwf	??_WriteFlash_Sequential
 10404  134C  0833               	movf	??_WriteFlash_Sequential,w
 10405  134D  058B               	andwf	11,f	;volatile
 10406                           
 10407                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 10408  134E  0023               	movlb	3	; select bank3
 10409  134F  1515               	bsf	21,2	;volatile
 10410                           
 10411                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 10412  1350  30BF               	movlw	191
 10413  1351  0020               	movlb	0	; select bank0
 10414  1352  00B3               	movwf	??_WriteFlash_Sequential
 10415  1353  0833               	movf	??_WriteFlash_Sequential,w
 10416  1354  0023               	movlb	3	; select bank3
 10417  1355  0595               	andwf	21,f	;volatile
 10418                           
 10419                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 10420  1356  30DF               	movlw	223
 10421  1357  0020               	movlb	0	; select bank0
 10422  1358  00B3               	movwf	??_WriteFlash_Sequential
 10423  1359  0833               	movf	??_WriteFlash_Sequential,w
 10424  135A  0023               	movlb	3	; select bank3
 10425  135B  0595               	andwf	21,f	;volatile
 10426                           
 10427                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 10428  135C  30EF               	movlw	239
 10429  135D  0020               	movlb	0	; select bank0
 10430  135E  00B3               	movwf	??_WriteFlash_Sequential
 10431  135F  0833               	movf	??_WriteFlash_Sequential,w
 10432  1360  0023               	movlb	3	; select bank3
 10433  1361  0595               	andwf	21,f	;volatile
 10434                           
 10435                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10436  1362  0020               	movlb	0	; select bank0
 10437  1363  0830               	movf	WriteFlash_Sequential@row+1,w
 10438  1364  00B4               	movwf	??_WriteFlash_Sequential+1
 10439  1365  082F               	movf	WriteFlash_Sequential@row,w
 10440  1366  00B3               	movwf	??_WriteFlash_Sequential
 10441  1367  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10442  1368  0CB3               	rrf	??_WriteFlash_Sequential,f
 10443  1369  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10444  136A  0CB3               	rrf	??_WriteFlash_Sequential,f
 10445  136B  36B4               	lsrf	??_WriteFlash_Sequential+1,f
 10446  136C  0CB3               	rrf	??_WriteFlash_Sequential,f
 10447  136D  0833               	movf	??_WriteFlash_Sequential,w
 10448  136E  397F               	andlw	127
 10449  136F  0023               	movlb	3	; select bank3
 10450  1370  0092               	movwf	18	;volatile
 10451                           
 10452                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 10453  1371  0020               	movlb	0	; select bank0
 10454  1372  082F               	movf	WriteFlash_Sequential@row,w
 10455  1373  3907               	andlw	7
 10456  1374  00B3               	movwf	??_WriteFlash_Sequential
 10457  1375  3004               	movlw	4
 10458  1376                     u7195:	
 10459  1376  35B3               	lslf	??_WriteFlash_Sequential,f
 10460  1377  3EFF               	addlw	-1
 10461  1378  1D03               	skipz
 10462  1379  2B76               	goto	u7195
 10463  137A  3533               	lslf	??_WriteFlash_Sequential,w
 10464  137B  0023               	movlb	3	; select bank3
 10465  137C  0091               	movwf	17	;volatile
 10466                           
 10467                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 10468  137D  0021               	movlb	1	; select bank1
 10469  137E  01E6               	clrf	WriteFlash_Sequential@i^(0+128)
 10470  137F                     l5643:	
 10471  137F  0865               	movf	WriteFlash_Sequential@spaces^(0+128),w
 10472  1380  0266               	subwf	WriteFlash_Sequential@i^(0+128),w
 10473  1381  1803               	btfsc	3,0
 10474  1382  2BA4               	goto	l5645
 10475                           
 10476                           ;FLASH.c: 153: {
 10477                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 10478  1383  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10479  1384  3EA0               	addlw	WriteFlash_Sequential@TempBufH& (0+255)
 10480  1385  0086               	movwf	6
 10481  1386  0187               	clrf	7
 10482  1387  0801               	movf	1,w
 10483  1388  0023               	movlb	3	; select bank3
 10484  1389  0094               	movwf	20	;volatile
 10485                           
 10486                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 10487  138A  0021               	movlb	1	; select bank1
 10488  138B  0866               	movf	WriteFlash_Sequential@i^(0+128),w
 10489  138C  3EC0               	addlw	WriteFlash_Sequential@TempBufL& (0+255)
 10490  138D  0086               	movwf	6
 10491  138E  0187               	clrf	7
 10492  138F  0801               	movf	1,w
 10493  1390  0023               	movlb	3	; select bank3
 10494  1391  0093               	movwf	19	;volatile
 10495                           
 10496                           ;FLASH.c: 156: __nop();
 10497  1392  0000               	nop
 10498                           
 10499                           ;FLASH.c: 157: __nop();
 10500  1393  0000               	nop
 10501                           
 10502                           ;FLASH.c: 158: UNLOCK();
 10503  1394  319A  220E  3192   	fcall	_UNLOCK
 10504                           
 10505                           ;FLASH.c: 159: PMADRL++;
 10506  1397  3001               	movlw	1
 10507  1398  0020               	movlb	0	; select bank0
 10508  1399  00B3               	movwf	??_WriteFlash_Sequential
 10509  139A  0833               	movf	??_WriteFlash_Sequential,w
 10510  139B  0023               	movlb	3	; select bank3
 10511  139C  0791               	addwf	17,f	;volatile
 10512  139D  3001               	movlw	1
 10513  139E  0020               	movlb	0	; select bank0
 10514  139F  00B3               	movwf	??_WriteFlash_Sequential
 10515  13A0  0833               	movf	??_WriteFlash_Sequential,w
 10516  13A1  0021               	movlb	1	; select bank1
 10517  13A2  07E6               	addwf	WriteFlash_Sequential@i^(0+128),f
 10518  13A3  2B7F               	goto	l5643
 10519  13A4                     l5645:	
 10520                           
 10521                           ;FLASH.c: 161: }
 10522                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 10523  13A4  30FB               	movlw	251
 10524  13A5  0020               	movlb	0	; select bank0
 10525  13A6  00B3               	movwf	??_WriteFlash_Sequential
 10526  13A7  0833               	movf	??_WriteFlash_Sequential,w
 10527  13A8  0023               	movlb	3	; select bank3
 10528  13A9  0595               	andwf	21,f	;volatile
 10529                           
 10530                           ;FLASH.c: 163: INTCON |= 0x80;
 10531  13AA  178B               	bsf	11,7	;volatile
 10532  13AB  0008               	return
 10533  13AC                     __end_of_WriteFlash_Sequential:	
 10534                           
 10535                           	psect	text18
 10536  1B99                     __ptext18:	
 10537 ;; *************** function _BlockErase *****************
 10538 ;; Defined at:
 10539 ;;		line 91 in file "FLASH.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  row             2    5[BANK0 ] unsigned int 
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;		None               void
 10546 ;; Registers used:
 10547 ;;		wreg, status,2, status,0, pclath, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;Total ram usage:        4 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    4
 10560 ;; This function calls:
 10561 ;;		_UNLOCK
 10562 ;; This function is called by:
 10563 ;;		_WriteFlash_Sequential
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           
 10568                           ;psect for function _BlockErase
 10569  1B99                     _BlockErase:	
 10570                           
 10571                           ;FLASH.c: 93: INTCON &= ~0x80;
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 10575  1B99  307F               	movlw	127
 10576  1B9A  0020               	movlb	0	; select bank0
 10577  1B9B  00A7               	movwf	??_BlockErase
 10578  1B9C  0827               	movf	??_BlockErase,w
 10579  1B9D  058B               	andwf	11,f	;volatile
 10580                           
 10581                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 10582  1B9E  30BF               	movlw	191
 10583  1B9F  00A7               	movwf	??_BlockErase
 10584  1BA0  0827               	movf	??_BlockErase,w
 10585  1BA1  0023               	movlb	3	; select bank3
 10586  1BA2  0595               	andwf	21,f	;volatile
 10587                           
 10588                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 10589  1BA3  0020               	movlb	0	; select bank0
 10590  1BA4  0826               	movf	BlockErase@row+1,w
 10591  1BA5  00A8               	movwf	??_BlockErase+1
 10592  1BA6  0825               	movf	BlockErase@row,w
 10593  1BA7  00A7               	movwf	??_BlockErase
 10594  1BA8  36A8               	lsrf	??_BlockErase+1,f
 10595  1BA9  0CA7               	rrf	??_BlockErase,f
 10596  1BAA  36A8               	lsrf	??_BlockErase+1,f
 10597  1BAB  0CA7               	rrf	??_BlockErase,f
 10598  1BAC  36A8               	lsrf	??_BlockErase+1,f
 10599  1BAD  0CA7               	rrf	??_BlockErase,f
 10600  1BAE  0827               	movf	??_BlockErase,w
 10601  1BAF  397F               	andlw	127
 10602  1BB0  0023               	movlb	3	; select bank3
 10603  1BB1  0092               	movwf	18	;volatile
 10604                           
 10605                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 10606  1BB2  0020               	movlb	0	; select bank0
 10607  1BB3  0825               	movf	BlockErase@row,w
 10608  1BB4  3907               	andlw	7
 10609  1BB5  00A7               	movwf	??_BlockErase
 10610  1BB6  3004               	movlw	4
 10611  1BB7                     u7055:	
 10612  1BB7  35A7               	lslf	??_BlockErase,f
 10613  1BB8  3EFF               	addlw	-1
 10614  1BB9  1D03               	skipz
 10615  1BBA  2BB7               	goto	u7055
 10616  1BBB  3527               	lslf	??_BlockErase,w
 10617  1BBC  0023               	movlb	3	; select bank3
 10618  1BBD  0091               	movwf	17	;volatile
 10619                           
 10620                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 10621  1BBE  1615               	bsf	21,4	;volatile
 10622                           
 10623                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 10624  1BBF  1515               	bsf	21,2	;volatile
 10625                           
 10626                           ;FLASH.c: 99: UNLOCK();
 10627  1BC0  319A  220E         	fcall	_UNLOCK
 10628                           
 10629                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 10630  1BC2  30FB               	movlw	251
 10631  1BC3  0020               	movlb	0	; select bank0
 10632  1BC4  00A7               	movwf	??_BlockErase
 10633  1BC5  0827               	movf	??_BlockErase,w
 10634  1BC6  0023               	movlb	3	; select bank3
 10635  1BC7  0595               	andwf	21,f	;volatile
 10636                           
 10637                           ;FLASH.c: 101: INTCON |= 0x80;
 10638  1BC8  178B               	bsf	11,7	;volatile
 10639  1BC9  0008               	return
 10640  1BCA                     __end_of_BlockErase:	
 10641                           
 10642                           	psect	text19
 10643  1A0E                     __ptext19:	
 10644 ;; *************** function _UNLOCK *****************
 10645 ;; Defined at:
 10646 ;;		line 76 in file "FLASH.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;		None               void
 10653 ;; Registers used:
 10654 ;;		wreg
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;Total ram usage:        0 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    3
 10667 ;; This function calls:
 10668 ;;		Nothing
 10669 ;; This function is called by:
 10670 ;;		_BlockErase
 10671 ;;		_WriteFlash_Sequential
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _UNLOCK
 10677  1A0E                     _UNLOCK:	
 10678                           
 10679                           ;FLASH.c: 78: PMCON2 = 0x55;
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _UNLOCK: [wreg]
 10683  1A0E  3055               	movlw	85
 10684  1A0F  0023               	movlb	3	; select bank3
 10685  1A10  0096               	movwf	22	;volatile
 10686                           
 10687                           ;FLASH.c: 79: PMCON2 = 0xAA;
 10688  1A11  30AA               	movlw	170
 10689  1A12  0096               	movwf	22	;volatile
 10690                           
 10691                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 10692  1A13  1495               	bsf	21,1	;volatile
 10693  1A14                     l896:	
 10694                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 10695                           
 10696  1A14  1895               	btfsc	21,1	;volatile
 10697  1A15  2A14               	goto	l896
 10698                           
 10699                           ;FLASH.c: 82: __nop();
 10700  1A16  0000               	nop
 10701                           
 10702                           ;FLASH.c: 83: __nop();
 10703  1A17  0000               	nop
 10704  1A18  0008               	return
 10705  1A19                     __end_of_UNLOCK:	
 10706                           
 10707                           	psect	text20
 10708  1E2E                     __ptext20:	
 10709 ;; *************** function _Reverse_Byte *****************
 10710 ;; Defined at:
 10711 ;;		line 105 in file "MISC.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;  This            1    wreg     unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  This            1    8[BANK0 ] unsigned char 
 10716 ;;  temp            1    7[BANK0 ] unsigned char 
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  1    wreg      unsigned char 
 10719 ;; Registers used:
 10720 ;;		wreg, status,2, status,0
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;Total ram usage:        4 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:    3
 10733 ;; This function calls:
 10734 ;;		Nothing
 10735 ;; This function is called by:
 10736 ;;		_PS_2_Update
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           
 10741                           ;psect for function _Reverse_Byte
 10742  1E2E                     _Reverse_Byte:	
 10743                           
 10744                           ;incstack = 0
 10745                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 10746                           ;Reverse_Byte@This stored from wreg
 10747  1E2E  0020               	movlb	0	; select bank0
 10748  1E2F  00A8               	movwf	Reverse_Byte@This
 10749                           
 10750                           ;MISC.c: 107: unsigned char temp=0;
 10751  1E30  01A7               	clrf	Reverse_Byte@temp
 10752                           
 10753                           ;MISC.c: 109: temp += (This & 0x01) << 7;
 10754  1E31  0828               	movf	Reverse_Byte@This,w
 10755  1E32  3901               	andlw	1
 10756  1E33  00A5               	movwf	??_Reverse_Byte
 10757  1E34  3006               	movlw	6
 10758  1E35                     u7575:	
 10759  1E35  35A5               	lslf	??_Reverse_Byte,f
 10760  1E36  3EFF               	addlw	-1
 10761  1E37  1D03               	skipz
 10762  1E38  2E35               	goto	u7575
 10763  1E39  3525               	lslf	??_Reverse_Byte,w
 10764  1E3A  00A6               	movwf	??_Reverse_Byte+1
 10765  1E3B  0826               	movf	??_Reverse_Byte+1,w
 10766  1E3C  07A7               	addwf	Reverse_Byte@temp,f
 10767                           
 10768                           ;MISC.c: 110: temp += (This & 0x02) << 5;
 10769  1E3D  0828               	movf	Reverse_Byte@This,w
 10770  1E3E  3902               	andlw	2
 10771  1E3F  00A5               	movwf	??_Reverse_Byte
 10772  1E40  3004               	movlw	4
 10773  1E41                     u7585:	
 10774  1E41  35A5               	lslf	??_Reverse_Byte,f
 10775  1E42  3EFF               	addlw	-1
 10776  1E43  1D03               	skipz
 10777  1E44  2E41               	goto	u7585
 10778  1E45  3525               	lslf	??_Reverse_Byte,w
 10779  1E46  00A6               	movwf	??_Reverse_Byte+1
 10780  1E47  0826               	movf	??_Reverse_Byte+1,w
 10781  1E48  07A7               	addwf	Reverse_Byte@temp,f
 10782                           
 10783                           ;MISC.c: 111: temp += (This & 0x04) << 3;
 10784  1E49  0828               	movf	Reverse_Byte@This,w
 10785  1E4A  3904               	andlw	4
 10786  1E4B  00A5               	movwf	??_Reverse_Byte
 10787  1E4C  3002               	movlw	2
 10788  1E4D                     u7595:	
 10789  1E4D  35A5               	lslf	??_Reverse_Byte,f
 10790  1E4E  3EFF               	addlw	-1
 10791  1E4F  1D03               	skipz
 10792  1E50  2E4D               	goto	u7595
 10793  1E51  3525               	lslf	??_Reverse_Byte,w
 10794  1E52  00A6               	movwf	??_Reverse_Byte+1
 10795  1E53  0826               	movf	??_Reverse_Byte+1,w
 10796  1E54  07A7               	addwf	Reverse_Byte@temp,f
 10797                           
 10798                           ;MISC.c: 112: temp += (This & 0x08) << 1;
 10799  1E55  0828               	movf	Reverse_Byte@This,w
 10800  1E56  3908               	andlw	8
 10801  1E57  0709               	addwf	9,w
 10802  1E58  00A5               	movwf	??_Reverse_Byte
 10803  1E59  0825               	movf	??_Reverse_Byte,w
 10804  1E5A  07A7               	addwf	Reverse_Byte@temp,f
 10805                           
 10806                           ;MISC.c: 113: temp += (This & 0x10) >> 1;
 10807  1E5B  3628               	lsrf	Reverse_Byte@This,w
 10808  1E5C  3908               	andlw	8
 10809  1E5D  00A5               	movwf	??_Reverse_Byte
 10810  1E5E  0825               	movf	??_Reverse_Byte,w
 10811  1E5F  07A7               	addwf	Reverse_Byte@temp,f
 10812                           
 10813                           ;MISC.c: 114: temp += (This & 0x20) >> 3;
 10814  1E60  0828               	movf	Reverse_Byte@This,w
 10815  1E61  00A5               	movwf	??_Reverse_Byte
 10816  1E62  3003               	movlw	3
 10817  1E63                     u7605:	
 10818  1E63  36A5               	lsrf	??_Reverse_Byte,f
 10819  1E64  0B89               	decfsz	9,f
 10820  1E65  2E63               	goto	u7605
 10821  1E66  0825               	movf	??_Reverse_Byte,w
 10822  1E67  3904               	andlw	4
 10823  1E68  00A6               	movwf	??_Reverse_Byte+1
 10824  1E69  0826               	movf	??_Reverse_Byte+1,w
 10825  1E6A  07A7               	addwf	Reverse_Byte@temp,f
 10826                           
 10827                           ;MISC.c: 115: temp += (This & 0x40) >> 5;
 10828  1E6B  0828               	movf	Reverse_Byte@This,w
 10829  1E6C  00A5               	movwf	??_Reverse_Byte
 10830  1E6D  3005               	movlw	5
 10831  1E6E                     u7615:	
 10832  1E6E  36A5               	lsrf	??_Reverse_Byte,f
 10833  1E6F  0B89               	decfsz	9,f
 10834  1E70  2E6E               	goto	u7615
 10835  1E71  0825               	movf	??_Reverse_Byte,w
 10836  1E72  3902               	andlw	2
 10837  1E73  00A6               	movwf	??_Reverse_Byte+1
 10838  1E74  0826               	movf	??_Reverse_Byte+1,w
 10839  1E75  07A7               	addwf	Reverse_Byte@temp,f
 10840                           
 10841                           ;MISC.c: 116: temp += (This & 0x80) >> 7;
 10842  1E76  0828               	movf	Reverse_Byte@This,w
 10843  1E77  00A5               	movwf	??_Reverse_Byte
 10844  1E78  3007               	movlw	7
 10845  1E79                     u7625:	
 10846  1E79  36A5               	lsrf	??_Reverse_Byte,f
 10847  1E7A  0B89               	decfsz	9,f
 10848  1E7B  2E79               	goto	u7625
 10849  1E7C  0825               	movf	??_Reverse_Byte,w
 10850  1E7D  3901               	andlw	1
 10851  1E7E  00A6               	movwf	??_Reverse_Byte+1
 10852  1E7F  0826               	movf	??_Reverse_Byte+1,w
 10853  1E80  07A7               	addwf	Reverse_Byte@temp,f
 10854                           
 10855                           ;MISC.c: 118: return temp;
 10856  1E81  0827               	movf	Reverse_Byte@temp,w
 10857  1E82  0008               	return
 10858  1E83                     __end_of_Reverse_Byte:	
 10859                           
 10860                           	psect	text21
 10861  1A3F                     __ptext21:	
 10862 ;; *************** function _ISNUMBER *****************
 10863 ;; Defined at:
 10864 ;;		line 126 in file "MISC.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;  ascii           1    wreg     unsigned char 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  ascii           1    5[BANK0 ] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      unsigned char 
 10871 ;; Registers used:
 10872 ;;		wreg
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;Total ram usage:        1 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    3
 10885 ;; This function calls:
 10886 ;;		Nothing
 10887 ;; This function is called by:
 10888 ;;		_PS_2_Update
 10889 ;; This function uses a non-reentrant model
 10890 ;;
 10891                           
 10892                           
 10893                           ;psect for function _ISNUMBER
 10894  1A3F                     _ISNUMBER:	
 10895                           
 10896                           ;incstack = 0
 10897                           ; Regs used in _ISNUMBER: [wreg]
 10898                           ;ISNUMBER@ascii stored from wreg
 10899  1A3F  0020               	movlb	0	; select bank0
 10900  1A40  00A5               	movwf	ISNUMBER@ascii
 10901                           
 10902                           ;MISC.c: 128: if(ascii >= '0' && ascii <='9')
 10903  1A41  3030               	movlw	48
 10904  1A42  0225               	subwf	ISNUMBER@ascii,w
 10905  1A43  1C03               	skipc
 10906  1A44  2A4B               	goto	l5923
 10907  1A45  303A               	movlw	58
 10908  1A46  0225               	subwf	ISNUMBER@ascii,w
 10909  1A47  1803               	skipnc
 10910  1A48  2A4B               	goto	l5923
 10911                           
 10912                           ;MISC.c: 129: {
 10913                           ;MISC.c: 130: return 1;
 10914  1A49  3001               	movlw	1
 10915                           
 10916                           ;MISC.c: 131: }
 10917  1A4A  0008               	return
 10918  1A4B                     l5923:	
 10919                           
 10920                           ;MISC.c: 132: else
 10921                           ;MISC.c: 133: {
 10922                           ;MISC.c: 134: return 0;
 10923  1A4B  3000               	movlw	0
 10924  1A4C  0008               	return
 10925  1A4D                     __end_of_ISNUMBER:	
 10926                           
 10927                           	psect	text22
 10928  1ACB                     __ptext22:	
 10929 ;; *************** function _Decode_Scan_Code_Shift *****************
 10930 ;; Defined at:
 10931 ;;		line 825 in file "PS_2.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  Code            1    wreg     unsigned char 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  Code            1    5[BANK0 ] unsigned char 
 10936 ;; Return value:  Size  Location     Type
 10937 ;;                  1    wreg      unsigned char 
 10938 ;; Registers used:
 10939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        1 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    3
 10952 ;; This function calls:
 10953 ;;		Nothing
 10954 ;; This function is called by:
 10955 ;;		_PS_2_Update
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _Decode_Scan_Code_Shift
 10961  1ACB                     _Decode_Scan_Code_Shift:	
 10962                           
 10963                           ;incstack = 0
 10964                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 10965                           ;Decode_Scan_Code_Shift@Code stored from wreg
 10966  1ACB  0020               	movlb	0	; select bank0
 10967  1ACC  00A5               	movwf	Decode_Scan_Code_Shift@Code
 10968                           
 10969                           ;PS_2.c: 827: Code -= 13;
 10970  1ACD  300D               	movlw	13
 10971  1ACE  02A5               	subwf	Decode_Scan_Code_Shift@Code,f
 10972                           
 10973                           ;PS_2.c: 828: if(Code <=112)
 10974  1ACF  3071               	movlw	113
 10975  1AD0  0225               	subwf	Decode_Scan_Code_Shift@Code,w
 10976  1AD1  1803               	skipnc
 10977  1AD2  2ADC               	goto	l5999
 10978                           
 10979                           ;PS_2.c: 829: {
 10980                           ;PS_2.c: 830: return ScanCodeSHIFT[Code];
 10981  1AD3  0825               	movf	Decode_Scan_Code_Shift@Code,w
 10982  1AD4  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 10983  1AD5  0084               	movwf	4
 10984  1AD6  3088               	movlw	high (_ScanCodeSHIFT| (0+32768))
 10985  1AD7  1803               	skipnc
 10986  1AD8  3E01               	addlw	1
 10987  1AD9  0085               	movwf	5
 10988  1ADA  0800               	movf	0,w	;code access
 10989                           
 10990                           ;PS_2.c: 831: }
 10991  1ADB  0008               	return
 10992  1ADC                     l5999:	
 10993                           
 10994                           ;PS_2.c: 832: else
 10995                           ;PS_2.c: 833: {
 10996                           ;PS_2.c: 834: return 0;
 10997  1ADC  3000               	movlw	0
 10998  1ADD  0008               	return
 10999  1ADE                     __end_of_Decode_Scan_Code_Shift:	
 11000                           
 11001                           	psect	text23
 11002  1AB8                     __ptext23:	
 11003 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 11004 ;; Defined at:
 11005 ;;		line 844 in file "PS_2.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  Code            1    wreg     unsigned char 
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;  Code            1    5[BANK0 ] unsigned char 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  1    wreg      unsigned char 
 11012 ;; Registers used:
 11013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;Total ram usage:        1 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    3
 11026 ;; This function calls:
 11027 ;;		Nothing
 11028 ;; This function is called by:
 11029 ;;		_PS_2_Update
 11030 ;; This function uses a non-reentrant model
 11031 ;;
 11032                           
 11033                           
 11034                           ;psect for function _Decode_Scan_Code_FunctionE0
 11035  1AB8                     _Decode_Scan_Code_FunctionE0:	
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 11039                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 11040  1AB8  0020               	movlb	0	; select bank0
 11041  1AB9  00A5               	movwf	Decode_Scan_Code_FunctionE0@Code
 11042                           
 11043                           ;PS_2.c: 846: Code -= 17;
 11044  1ABA  3011               	movlw	17
 11045  1ABB  02A5               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 11046                           
 11047                           ;PS_2.c: 847: if(Code <=108)
 11048  1ABC  306D               	movlw	109
 11049  1ABD  0225               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 11050  1ABE  1803               	skipnc
 11051  1ABF  2AC9               	goto	l6161
 11052                           
 11053                           ;PS_2.c: 848: {
 11054                           ;PS_2.c: 849: return ScanCodeFunctionE0[Code];
 11055  1AC0  0825               	movf	Decode_Scan_Code_FunctionE0@Code,w
 11056  1AC1  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 11057  1AC2  0084               	movwf	4
 11058  1AC3  3089               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 11059  1AC4  1803               	skipnc
 11060  1AC5  3E01               	addlw	1
 11061  1AC6  0085               	movwf	5
 11062  1AC7  0800               	movf	0,w	;code access
 11063                           
 11064                           ;PS_2.c: 850: }
 11065  1AC8  0008               	return
 11066  1AC9                     l6161:	
 11067                           
 11068                           ;PS_2.c: 851: else
 11069                           ;PS_2.c: 852: {
 11070                           ;PS_2.c: 853: return 0;
 11071  1AC9  3000               	movlw	0
 11072  1ACA  0008               	return
 11073  1ACB                     __end_of_Decode_Scan_Code_FunctionE0:	
 11074                           
 11075                           	psect	text24
 11076  1A5D                     __ptext24:	
 11077 ;; *************** function _Decode_Scan_Code_Function *****************
 11078 ;; Defined at:
 11079 ;;		line 863 in file "PS_2.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;  Code            1    wreg     unsigned char 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;  Code            1    5[BANK0 ] unsigned char 
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  1    wreg      unsigned char 
 11086 ;; Registers used:
 11087 ;;		wreg, fsr0l, fsr0h, pclath
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;Total ram usage:        1 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    3
 11100 ;; This function calls:
 11101 ;;		Nothing
 11102 ;; This function is called by:
 11103 ;;		_PS_2_Update
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _Decode_Scan_Code_Function
 11109  1A5D                     _Decode_Scan_Code_Function:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 11113                           ;Decode_Scan_Code_Function@Code stored from wreg
 11114  1A5D  0020               	movlb	0	; select bank0
 11115  1A5E  00A5               	movwf	Decode_Scan_Code_Function@Code
 11116                           
 11117                           ;PS_2.c: 865: if(Code <=131)
 11118  1A5F  3084               	movlw	132
 11119  1A60  0225               	subwf	Decode_Scan_Code_Function@Code,w
 11120  1A61  1803               	skipnc
 11121  1A62  2A6C               	goto	l6185
 11122                           
 11123                           ;PS_2.c: 866: {
 11124                           ;PS_2.c: 867: return ScanCodeFunctionNoE0[Code];
 11125  1A63  0825               	movf	Decode_Scan_Code_Function@Code,w
 11126  1A64  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 11127  1A65  0084               	movwf	4
 11128  1A66  3088               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 11129  1A67  1803               	skipnc
 11130  1A68  3E01               	addlw	1
 11131  1A69  0085               	movwf	5
 11132  1A6A  0800               	movf	0,w	;code access
 11133                           
 11134                           ;PS_2.c: 868: }
 11135  1A6B  0008               	return
 11136  1A6C                     l6185:	
 11137                           
 11138                           ;PS_2.c: 869: else
 11139                           ;PS_2.c: 870: {
 11140                           ;PS_2.c: 871: return 0;
 11141  1A6C  3000               	movlw	0
 11142  1A6D  0008               	return
 11143  1A6E                     __end_of_Decode_Scan_Code_Function:	
 11144                           
 11145                           	psect	text25
 11146  1AA5                     __ptext25:	
 11147 ;; *************** function _Decode_Scan_Code *****************
 11148 ;; Defined at:
 11149 ;;		line 806 in file "PS_2.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  Code            1    wreg     unsigned char 
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;  Code            1    5[BANK0 ] unsigned char 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      unsigned char 
 11156 ;; Registers used:
 11157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:        1 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    3
 11170 ;; This function calls:
 11171 ;;		Nothing
 11172 ;; This function is called by:
 11173 ;;		_PS_2_Update
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           
 11178                           ;psect for function _Decode_Scan_Code
 11179  1AA5                     _Decode_Scan_Code:	
 11180                           
 11181                           ;incstack = 0
 11182                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 11183                           ;Decode_Scan_Code@Code stored from wreg
 11184  1AA5  0020               	movlb	0	; select bank0
 11185  1AA6  00A5               	movwf	Decode_Scan_Code@Code
 11186                           
 11187                           ;PS_2.c: 808: Code -= 13;
 11188  1AA7  300D               	movlw	13
 11189  1AA8  02A5               	subwf	Decode_Scan_Code@Code,f
 11190                           
 11191                           ;PS_2.c: 809: if(Code <=112)
 11192  1AA9  3071               	movlw	113
 11193  1AAA  0225               	subwf	Decode_Scan_Code@Code,w
 11194  1AAB  1803               	skipnc
 11195  1AAC  2AB6               	goto	l6173
 11196                           
 11197                           ;PS_2.c: 810: {
 11198                           ;PS_2.c: 811: return ScanCode[Code];
 11199  1AAD  0825               	movf	Decode_Scan_Code@Code,w
 11200  1AAE  3E84               	addlw	low (_ScanCode| (0+32768))
 11201  1AAF  0084               	movwf	4
 11202  1AB0  3088               	movlw	high (_ScanCode| (0+32768))
 11203  1AB1  1803               	skipnc
 11204  1AB2  3E01               	addlw	1
 11205  1AB3  0085               	movwf	5
 11206  1AB4  0800               	movf	0,w	;code access
 11207                           
 11208                           ;PS_2.c: 812: }
 11209  1AB5  0008               	return
 11210  1AB6                     l6173:	
 11211                           
 11212                           ;PS_2.c: 813: else
 11213                           ;PS_2.c: 814: {
 11214                           ;PS_2.c: 815: return 0;
 11215  1AB6  3000               	movlw	0
 11216  1AB7  0008               	return
 11217  1AB8                     __end_of_Decode_Scan_Code:	
 11218                           
 11219                           	psect	text26
 11220  1593                     __ptext26:	
 11221 ;; *************** function _Init_System *****************
 11222 ;; Defined at:
 11223 ;;		line 96 in file "user.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  buf            60    0[BANK1 ] unsigned char [60]
 11228 ;;  Baud            4   65[BANK1 ] unsigned long 
 11229 ;;  temp            4   60[BANK1 ] unsigned long 
 11230 ;;  Parity          1   64[BANK1 ] unsigned char 
 11231 ;; Return value:  Size  Location     Type
 11232 ;;		None               void
 11233 ;; Registers used:
 11234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         0       5      69       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:       74 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:    6
 11247 ;; This function calls:
 11248 ;;		_InitUART
 11249 ;;		_ReadBaud
 11250 ;;		_UARTstringWAIT
 11251 ;;		_delayUS
 11252 ;;		_sprintf
 11253 ;; This function is called by:
 11254 ;;		_main
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           
 11259                           ;psect for function _Init_System
 11260  1593                     _Init_System:	
 11261                           
 11262                           ;user.c: 98: unsigned long temp =0;
 11263                           
 11264                           ;incstack = 0
 11265                           ; Regs used in _Init_System: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11266  1593  3000               	movlw	0
 11267  1594  0021               	movlb	1	; select bank1
 11268  1595  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11269  1596  3000               	movlw	0
 11270  1597  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11271  1598  3000               	movlw	0
 11272  1599  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11273  159A  3000               	movlw	0
 11274  159B  00DC               	movwf	Init_System@temp^(0+128)
 11275                           
 11276                           ;user.c: 99: unsigned long Baud =0;
 11277  159C  3000               	movlw	0
 11278  159D  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11279  159E  3000               	movlw	0
 11280  159F  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11281  15A0  3000               	movlw	0
 11282  15A1  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11283  15A2  3000               	movlw	0
 11284  15A3  00E1               	movwf	Init_System@Baud^(0+128)
 11285                           
 11286                           ;user.c: 100: unsigned char Parity =0;
 11287  15A4  01E0               	clrf	Init_System@Parity^(0+128)
 11288                           
 11289                           ;user.c: 101: unsigned char buf[60];
 11290                           ;user.c: 103: temp = ReadBaud((0x1800 >> 5),0);
 11291  15A5  30C0               	movlw	192
 11292  15A6  0020               	movlb	0	; select bank0
 11293  15A7  00B7               	movwf	ReadBaud@row
 11294  15A8  3000               	movlw	0
 11295  15A9  00B8               	movwf	ReadBaud@row+1
 11296  15AA  01B9               	clrf	ReadBaud@column
 11297  15AB  319F  2736  3195   	fcall	_ReadBaud
 11298  15AE  0020               	movlb	0	; select bank0
 11299  15AF  083A               	movf	?_ReadBaud+3,w
 11300  15B0  0021               	movlb	1	; select bank1
 11301  15B1  00DF               	movwf	(Init_System@temp+3)^(0+128)
 11302  15B2  0020               	movlb	0	; select bank0
 11303  15B3  0839               	movf	?_ReadBaud+2,w
 11304  15B4  0021               	movlb	1	; select bank1
 11305  15B5  00DE               	movwf	(Init_System@temp+2)^(0+128)
 11306  15B6  0020               	movlb	0	; select bank0
 11307  15B7  0838               	movf	?_ReadBaud+1,w
 11308  15B8  0021               	movlb	1	; select bank1
 11309  15B9  00DD               	movwf	(Init_System@temp+1)^(0+128)
 11310  15BA  0020               	movlb	0	; select bank0
 11311  15BB  0837               	movf	?_ReadBaud,w
 11312  15BC  0021               	movlb	1	; select bank1
 11313  15BD  00DC               	movwf	Init_System@temp^(0+128)
 11314                           
 11315                           ;user.c: 104: Baud = temp & 0x000FFFFF;
 11316  15BE  30FF               	movlw	255
 11317  15BF  055C               	andwf	Init_System@temp^(0+128),w
 11318  15C0  00E1               	movwf	Init_System@Baud^(0+128)
 11319  15C1  30FF               	movlw	255
 11320  15C2  055D               	andwf	(Init_System@temp+1)^(0+128),w
 11321  15C3  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11322  15C4  300F               	movlw	15
 11323  15C5  055E               	andwf	(Init_System@temp+2)^(0+128),w
 11324  15C6  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11325  15C7  3000               	movlw	0
 11326  15C8  055F               	andwf	(Init_System@temp+3)^(0+128),w
 11327  15C9  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11328                           
 11329                           ;user.c: 105: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
 11330  15CA  085C               	movf	Init_System@temp^(0+128),w
 11331  15CB  0020               	movlb	0	; select bank0
 11332  15CC  00D4               	movwf	??_Init_System
 11333  15CD  0021               	movlb	1	; select bank1
 11334  15CE  085D               	movf	(Init_System@temp+1)^(0+128),w
 11335  15CF  0020               	movlb	0	; select bank0
 11336  15D0  00D5               	movwf	??_Init_System+1
 11337  15D1  0021               	movlb	1	; select bank1
 11338  15D2  085E               	movf	(Init_System@temp+2)^(0+128),w
 11339  15D3  0020               	movlb	0	; select bank0
 11340  15D4  00D6               	movwf	??_Init_System+2
 11341  15D5  0021               	movlb	1	; select bank1
 11342  15D6  085F               	movf	(Init_System@temp+3)^(0+128),w
 11343  15D7  0020               	movlb	0	; select bank0
 11344  15D8  00D7               	movwf	??_Init_System+3
 11345  15D9  3014               	movlw	20
 11346  15DA                     u9615:	
 11347  15DA  36D7               	lsrf	??_Init_System+3,f
 11348  15DB  0CD6               	rrf	??_Init_System+2,f
 11349  15DC  0CD5               	rrf	??_Init_System+1,f
 11350  15DD  0CD4               	rrf	??_Init_System,f
 11351  15DE  0B89               	decfsz	9,f
 11352  15DF  2DDA               	goto	u9615
 11353  15E0  0854               	movf	??_Init_System,w
 11354  15E1  390F               	andlw	15
 11355  15E2  00D8               	movwf	??_Init_System+4
 11356  15E3  0858               	movf	??_Init_System+4,w
 11357  15E4  0021               	movlb	1	; select bank1
 11358  15E5  00E0               	movwf	Init_System@Parity^(0+128)
 11359                           
 11360                           ;user.c: 106: if(Baud <2400 || Baud > 115200)
 11361  15E6  3000               	movlw	0
 11362  15E7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11363  15E8  1D03               	skipz
 11364  15E9  2DF4               	goto	u9625
 11365  15EA  3000               	movlw	0
 11366  15EB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11367  15EC  1D03               	skipz
 11368  15ED  2DF4               	goto	u9625
 11369  15EE  3009               	movlw	9
 11370  15EF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11371  15F0  1D03               	skipz
 11372  15F1  2DF4               	goto	u9625
 11373  15F2  3060               	movlw	96
 11374  15F3  0261               	subwf	Init_System@Baud^(0+128),w
 11375  15F4                     u9625:	
 11376  15F4  1C03               	skipc
 11377  15F5  2E06               	goto	l6901
 11378  15F6  3000               	movlw	0
 11379  15F7  0264               	subwf	(Init_System@Baud+3)^(0+128),w
 11380  15F8  1D03               	skipz
 11381  15F9  2E04               	goto	u9635
 11382  15FA  3001               	movlw	1
 11383  15FB  0263               	subwf	(Init_System@Baud+2)^(0+128),w
 11384  15FC  1D03               	skipz
 11385  15FD  2E04               	goto	u9635
 11386  15FE  30C2               	movlw	194
 11387  15FF  0262               	subwf	(Init_System@Baud+1)^(0+128),w
 11388  1600  1D03               	skipz
 11389  1601  2E04               	goto	u9635
 11390  1602  3001               	movlw	1
 11391  1603  0261               	subwf	Init_System@Baud^(0+128),w
 11392  1604                     u9635:	
 11393  1604  1C03               	skipc
 11394  1605  2E0F               	goto	l6905
 11395  1606                     l6901:	
 11396                           
 11397                           ;user.c: 107: {
 11398                           ;user.c: 109: Baud = 9600;
 11399  1606  3000               	movlw	0
 11400  1607  00E4               	movwf	(Init_System@Baud+3)^(0+128)
 11401  1608  3000               	movlw	0
 11402  1609  00E3               	movwf	(Init_System@Baud+2)^(0+128)
 11403  160A  3025               	movlw	37
 11404  160B  00E2               	movwf	(Init_System@Baud+1)^(0+128)
 11405  160C  3080               	movlw	128
 11406  160D  00E1               	movwf	Init_System@Baud^(0+128)
 11407                           
 11408                           ;user.c: 110: Parity = 0;
 11409  160E  01E0               	clrf	Init_System@Parity^(0+128)
 11410  160F                     l6905:	
 11411                           
 11412                           ;user.c: 111: }
 11413                           ;user.c: 112: InitUART(Baud, Parity);
 11414  160F  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11415  1610  0020               	movlb	0	; select bank0
 11416  1611  00B6               	movwf	InitUART@Baud+3
 11417  1612  0021               	movlb	1	; select bank1
 11418  1613  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11419  1614  0020               	movlb	0	; select bank0
 11420  1615  00B5               	movwf	InitUART@Baud+2
 11421  1616  0021               	movlb	1	; select bank1
 11422  1617  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11423  1618  0020               	movlb	0	; select bank0
 11424  1619  00B4               	movwf	InitUART@Baud+1
 11425  161A  0021               	movlb	1	; select bank1
 11426  161B  0861               	movf	Init_System@Baud^(0+128),w
 11427  161C  0020               	movlb	0	; select bank0
 11428  161D  00B3               	movwf	InitUART@Baud
 11429  161E  0021               	movlb	1	; select bank1
 11430  161F  0860               	movf	Init_System@Parity^(0+128),w
 11431  1620  0020               	movlb	0	; select bank0
 11432  1621  00D4               	movwf	??_Init_System
 11433  1622  0854               	movf	??_Init_System,w
 11434  1623  00B7               	movwf	InitUART@parity
 11435  1624  3191  21CA  3195   	fcall	_InitUART
 11436                           
 11437                           ;user.c: 113: UARTstringWAIT("\r\n");
 11438  1627  3052               	movlw	low ((STR_11+17)| (0+32768))
 11439  1628  0020               	movlb	0	; select bank0
 11440  1629  00B4               	movwf	UARTstringWAIT@data
 11441  162A  308B               	movlw	high ((STR_11+17)| (0+32768))
 11442  162B  00B5               	movwf	UARTstringWAIT@data+1
 11443  162C  319B  23FC  3195   	fcall	_UARTstringWAIT
 11444                           
 11445                           ;user.c: 114: delayUS(10000);
 11446  162F  3000               	movlw	0
 11447  1630  0020               	movlb	0	; select bank0
 11448  1631  00A8               	movwf	delayUS@US+3
 11449  1632  3000               	movlw	0
 11450  1633  00A7               	movwf	delayUS@US+2
 11451  1634  3027               	movlw	39
 11452  1635  00A6               	movwf	delayUS@US+1
 11453  1636  3010               	movlw	16
 11454  1637  00A5               	movwf	delayUS@US
 11455  1638  3187  27C8  3195   	fcall	_delayUS
 11456                           
 11457                           ;user.c: 115: sprintf(buf,"KeyBoard Baud is %lu",Baud);
 11458  163B  30A0               	movlw	low Init_System@buf
 11459  163C  0020               	movlb	0	; select bank0
 11460  163D  00BD               	movwf	sprintf@sp
 11461  163E  3000               	movlw	high Init_System@buf
 11462  163F  00BE               	movwf	sprintf@sp+1
 11463  1640  3017               	movlw	low (STR_13| (0+32768))
 11464  1641  00BF               	movwf	sprintf@f
 11465  1642  308B               	movlw	high (STR_13| (0+32768))
 11466  1643  00C0               	movwf	sprintf@f+1
 11467  1644  0021               	movlb	1	; select bank1
 11468  1645  0864               	movf	(Init_System@Baud+3)^(0+128),w
 11469  1646  0020               	movlb	0	; select bank0
 11470  1647  00C4               	movwf	?_sprintf+7
 11471  1648  0021               	movlb	1	; select bank1
 11472  1649  0863               	movf	(Init_System@Baud+2)^(0+128),w
 11473  164A  0020               	movlb	0	; select bank0
 11474  164B  00C3               	movwf	?_sprintf+6
 11475  164C  0021               	movlb	1	; select bank1
 11476  164D  0862               	movf	(Init_System@Baud+1)^(0+128),w
 11477  164E  0020               	movlb	0	; select bank0
 11478  164F  00C2               	movwf	?_sprintf+5
 11479  1650  0021               	movlb	1	; select bank1
 11480  1651  0861               	movf	Init_System@Baud^(0+128),w
 11481  1652  0020               	movlb	0	; select bank0
 11482  1653  00C1               	movwf	?_sprintf+4
 11483  1654  3194  249F  3195   	fcall	_sprintf
 11484                           
 11485                           ;user.c: 116: UARTstringWAIT(buf);
 11486  1657  30A0               	movlw	low Init_System@buf
 11487  1658  0020               	movlb	0	; select bank0
 11488  1659  00B4               	movwf	UARTstringWAIT@data
 11489  165A  3000               	movlw	high Init_System@buf
 11490  165B  00B5               	movwf	UARTstringWAIT@data+1
 11491  165C  319B  23FC  3195   	fcall	_UARTstringWAIT
 11492                           
 11493                           ;user.c: 117: if(Parity)
 11494  165F  0021               	movlb	1	; select bank1
 11495  1660  0860               	movf	Init_System@Parity^(0+128),w
 11496  1661  1903               	btfsc	3,2
 11497  1662  2E85               	goto	l6931
 11498                           
 11499                           ;user.c: 118: {
 11500                           ;user.c: 119: switch (Parity)
 11501  1663  2E78               	goto	l6929
 11502  1664                     l6919:	
 11503                           ;user.c: 120: {
 11504                           ;user.c: 121: case 1:
 11505                           
 11506                           
 11507                           ;user.c: 122: UARTstringWAIT(" with Odd parity bit\r\n");
 11508  1664  30EA               	movlw	low (STR_14| (0+32768))
 11509  1665  0020               	movlb	0	; select bank0
 11510  1666  00B4               	movwf	UARTstringWAIT@data
 11511  1667  308A               	movlw	high (STR_14| (0+32768))
 11512  1668  2E89               	goto	L16
 11513  1669                     l6921:	
 11514                           ;user.c: 124: case 2:
 11515                           
 11516                           ;user.c: 123: break;
 11517                           
 11518                           
 11519                           ;user.c: 125: UARTstringWAIT(" with Even parity bit\r\n");
 11520  1669  30BA               	movlw	low (STR_15| (0+32768))
 11521  166A  0020               	movlb	0	; select bank0
 11522  166B  00B4               	movwf	UARTstringWAIT@data
 11523  166C  308A               	movlw	high (STR_15| (0+32768))
 11524  166D  2E89               	goto	L16
 11525  166E                     l6923:	
 11526                           ;user.c: 127: case 3:
 11527                           
 11528                           ;user.c: 126: break;
 11529                           
 11530                           
 11531                           ;user.c: 128: UARTstringWAIT(" with Mark bit\r\n");
 11532  166E  309F               	movlw	low (STR_16| (0+32768))
 11533  166F  0020               	movlb	0	; select bank0
 11534  1670  00B4               	movwf	UARTstringWAIT@data
 11535  1671  308B               	movlw	high (STR_16| (0+32768))
 11536  1672  2E89               	goto	L16
 11537  1673                     l6925:	
 11538                           ;user.c: 130: default:
 11539                           
 11540                           ;user.c: 129: break;
 11541                           
 11542                           
 11543                           ;user.c: 131: UARTstringWAIT(" with Space bit\r\n");
 11544  1673  308D               	movlw	low (STR_17| (0+32768))
 11545  1674  0020               	movlb	0	; select bank0
 11546  1675  00B4               	movwf	UARTstringWAIT@data
 11547  1676  308B               	movlw	high (STR_17| (0+32768))
 11548  1677  2E89               	goto	L16
 11549  1678                     l6929:	
 11550                           ;user.c: 133: }
 11551                           
 11552                           ;user.c: 132: break;
 11553                           
 11554  1678  0021               	movlb	1	; select bank1
 11555  1679  0860               	movf	Init_System@Parity^(0+128),w
 11556                           
 11557                           ; Switch size 1, requested type "space"
 11558                           ; Number of cases is 3, Range of values is 1 to 3
 11559                           ; switch strategies available:
 11560                           ; Name         Instructions Cycles
 11561                           ; simple_byte           10     6 (average)
 11562                           ; direct_byte           15     9 (fixed)
 11563                           ; jumptable            263     9 (fixed)
 11564                           ;	Chosen strategy is simple_byte
 11565  167A  3A01               	xorlw	1	; case 1
 11566  167B  1903               	skipnz
 11567  167C  2E64               	goto	l6919
 11568  167D  3A03               	xorlw	3	; case 2
 11569  167E  1903               	skipnz
 11570  167F  2E69               	goto	l6921
 11571  1680  3A01               	xorlw	1	; case 3
 11572  1681  1903               	skipnz
 11573  1682  2E6E               	goto	l6923
 11574  1683  2E73               	goto	l6925
 11575                           
 11576                           ;user.c: 134: }
 11577  1684  2E8D               	goto	l6933
 11578  1685                     l6931:	
 11579                           
 11580                           ;user.c: 135: else
 11581                           ;user.c: 136: {
 11582                           ;user.c: 137: UARTstringWAIT(" with no parity bit\r\n");
 11583  1685  3011               	movlw	low ((STR_29+22)| (0+32768))
 11584  1686  0020               	movlb	0	; select bank0
 11585  1687  00B4               	movwf	UARTstringWAIT@data
 11586  1688  308A               	movlw	high ((STR_29+22)| (0+32768))
 11587  1689                     L16:	
 11588  1689  00B5               	movwf	UARTstringWAIT@data+1
 11589  168A  319B  23FC  3195   	fcall	_UARTstringWAIT
 11590  168D                     l6933:	
 11591                           
 11592                           ;user.c: 138: }
 11593                           ;user.c: 139: delayUS(10000);
 11594  168D  3000               	movlw	0
 11595  168E  0020               	movlb	0	; select bank0
 11596  168F  00A8               	movwf	delayUS@US+3
 11597  1690  3000               	movlw	0
 11598  1691  00A7               	movwf	delayUS@US+2
 11599  1692  3027               	movlw	39
 11600  1693  00A6               	movwf	delayUS@US+1
 11601  1694  3010               	movlw	16
 11602  1695  00A5               	movwf	delayUS@US
 11603  1696  3187  27C8         	fcall	_delayUS
 11604                           
 11605                           ;user.c: 141: INTCON |= 0x08;
 11606  1698  158B               	bsf	11,3	;volatile
 11607                           
 11608                           ;user.c: 142: INTCONbits.GIE = 1;
 11609  1699  178B               	bsf	11,7	;volatile
 11610  169A  0008               	return
 11611  169B                     __end_of_Init_System:	
 11612                           
 11613                           	psect	text27
 11614  149F                     __ptext27:	
 11615 ;; *************** function _sprintf *****************
 11616 ;; Defined at:
 11617 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  sp              2   29[BANK0 ] PTR unsigned char 
 11620 ;;		 -> PS_2_Update@buf(60), SetBaud@buf(50), Init_System@buf(60), 
 11621 ;;  f               2   31[BANK0 ] PTR const unsigned char 
 11622 ;;		 -> STR_31(33), STR_21(21), STR_13(21), 
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;  _val            4   46[BANK0 ] struct .
 11625 ;;  prec            2   44[BANK0 ] int 
 11626 ;;  c               1   51[BANK0 ] char 
 11627 ;;  ap              1   50[BANK0 ] PTR void [1]
 11628 ;;		 -> ?_sprintf(2), 
 11629 ;;  flag            1   43[BANK0 ] unsigned char 
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  2   29[BANK0 ] int 
 11632 ;; Registers used:
 11633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11639 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;Total ram usage:       23 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    4
 11646 ;; This function calls:
 11647 ;;		___lldiv
 11648 ;;		___llmod
 11649 ;; This function is called by:
 11650 ;;		_Init_System
 11651 ;;		_SetBaud
 11652 ;;		_PS_2_Update
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function _sprintf
 11658  149F                     _sprintf:	
 11659                           
 11660                           ;doprnt.c: 494: va_list ap;
 11661                           ;doprnt.c: 499: signed char c;
 11662                           ;doprnt.c: 504: int prec;
 11663                           ;doprnt.c: 508: unsigned char flag;
 11664                           ;doprnt.c: 527: union {
 11665                           ;doprnt.c: 528: unsigned long _val;
 11666                           ;doprnt.c: 529: struct {
 11667                           ;doprnt.c: 530: const char * _cp;
 11668                           ;doprnt.c: 531: unsigned _len;
 11669                           ;doprnt.c: 532: } _str;
 11670                           ;doprnt.c: 533: } _val;
 11671                           ;doprnt.c: 542: *ap = __va_start();
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11675  149F  3041               	movlw	(?_sprintf+4)& (0+255)
 11676  14A0  0020               	movlb	0	; select bank0
 11677  14A1  00C5               	movwf	??_sprintf
 11678  14A2  0845               	movf	??_sprintf,w
 11679  14A3  00D2               	movwf	sprintf@ap
 11680  14A4                     l5859:	
 11681                           ;doprnt.c: 545: while(c = *f++) {
 11682                           
 11683  14A4  0840               	movf	sprintf@f+1,w
 11684  14A5  00C6               	movwf	??_sprintf+1
 11685  14A6  083F               	movf	sprintf@f,w
 11686  14A7  00C5               	movwf	??_sprintf
 11687  14A8  0ABF               	incf	sprintf@f,f
 11688  14A9  1903               	skipnz
 11689  14AA  0AC0               	incf	sprintf@f+1,f
 11690  14AB  0845               	movf	??_sprintf,w
 11691  14AC  0084               	movwf	4
 11692  14AD  0846               	movf	??_sprintf+1,w
 11693  14AE  0085               	movwf	5
 11694  14AF  0800               	movf	0,w	;code access
 11695  14B0  00C7               	movwf	??_sprintf+2
 11696  14B1  0847               	movf	??_sprintf+2,w
 11697  14B2  00D3               	movwf	sprintf@c
 11698  14B3  08D3               	movf	sprintf@c,f
 11699  14B4  1903               	btfsc	3,2
 11700  14B5  2D8D               	goto	l5861
 11701                           
 11702                           ;doprnt.c: 547: if(c != '%')
 11703  14B6  0853               	movf	sprintf@c,w
 11704  14B7  3A25               	xorlw	37
 11705  14B8  1903               	skipnz
 11706  14B9  2CC5               	goto	l5819
 11707                           
 11708                           ;doprnt.c: 549: {
 11709                           ;doprnt.c: 550: ((*sp++ = (c)));
 11710  14BA  083D               	movf	sprintf@sp,w
 11711  14BB  0086               	movwf	6
 11712  14BC  083E               	movf	sprintf@sp+1,w
 11713  14BD  0087               	movwf	7
 11714  14BE  0853               	movf	sprintf@c,w
 11715  14BF  0081               	movwf	1
 11716  14C0  3001               	movlw	1
 11717  14C1  07BD               	addwf	sprintf@sp,f
 11718  14C2  3000               	movlw	0
 11719  14C3  3DBE               	addwfc	sprintf@sp+1,f
 11720                           
 11721                           ;doprnt.c: 551: continue;
 11722  14C4  2CA4               	goto	l5859
 11723  14C5                     l5819:	
 11724                           
 11725                           ;doprnt.c: 552: }
 11726                           ;doprnt.c: 557: flag = 0;
 11727  14C5  01CB               	clrf	sprintf@flag
 11728                           
 11729                           ;doprnt.c: 644: switch(c = *f++) {
 11730                           
 11731                           ;doprnt.c: 642: loop:
 11732  14C6  2CCE               	goto	l5825
 11733  14C7                     l989:	
 11734                           ;doprnt.c: 650: case 'l':
 11735                           
 11736                           ;doprnt.c: 647: goto alldone;
 11737                           
 11738                           ;doprnt.c: 646: case 0:
 11739                           
 11740                           
 11741                           ;doprnt.c: 652: flag |= 0x10;
 11742  14C7  164B               	bsf	sprintf@flag,4
 11743                           
 11744                           ;doprnt.c: 653: goto loop;
 11745  14C8  2CCE               	goto	l5825
 11746  14C9                     l5821:	
 11747                           ;doprnt.c: 826: case 'u':
 11748                           
 11749                           ;doprnt.c: 822: continue;
 11750                           
 11751                           ;doprnt.c: 811: default:
 11752                           
 11753                           
 11754                           ;doprnt.c: 827: flag |= 0xC0;
 11755  14C9  30C0               	movlw	192
 11756  14CA  00C5               	movwf	??_sprintf
 11757  14CB  0845               	movf	??_sprintf,w
 11758  14CC  04CB               	iorwf	sprintf@flag,f
 11759                           
 11760                           ;doprnt.c: 831: }
 11761                           
 11762                           ;doprnt.c: 828: break;
 11763  14CD  2CE5               	goto	l992
 11764  14CE                     l5825:	
 11765  14CE  0840               	movf	sprintf@f+1,w
 11766  14CF  00C6               	movwf	??_sprintf+1
 11767  14D0  083F               	movf	sprintf@f,w
 11768  14D1  00C5               	movwf	??_sprintf
 11769  14D2  0ABF               	incf	sprintf@f,f
 11770  14D3  1903               	skipnz
 11771  14D4  0AC0               	incf	sprintf@f+1,f
 11772  14D5  0845               	movf	??_sprintf,w
 11773  14D6  0084               	movwf	4
 11774  14D7  0846               	movf	??_sprintf+1,w
 11775  14D8  0085               	movwf	5
 11776  14D9  0800               	movf	0,w	;code access
 11777  14DA  00D3               	movwf	sprintf@c
 11778                           
 11779                           ; Switch size 1, requested type "space"
 11780                           ; Number of cases is 3, Range of values is 0 to 117
 11781                           ; switch strategies available:
 11782                           ; Name         Instructions Cycles
 11783                           ; simple_byte           10     6 (average)
 11784                           ; direct_byte          242     6 (fixed)
 11785                           ; jumptable            260     6 (fixed)
 11786                           ;	Chosen strategy is simple_byte
 11787  14DB  3A00               	xorlw	0	; case 0
 11788  14DC  1903               	skipnz
 11789  14DD  2D8D               	goto	l5861
 11790  14DE  3A6C               	xorlw	108	; case 108
 11791  14DF  1903               	skipnz
 11792  14E0  2CC7               	goto	l989
 11793  14E1  3A19               	xorlw	25	; case 117
 11794  14E2  1903               	skipnz
 11795  14E3  2CC9               	goto	l5821
 11796  14E4  2CA4               	goto	l5859
 11797  14E5                     l992:	
 11798                           
 11799                           ;doprnt.c: 1282: {
 11800                           ;doprnt.c: 1290: if(flag & 0x10)
 11801  14E5  1E4B               	btfss	sprintf@flag,4
 11802  14E6  2CF4               	goto	l5831
 11803                           
 11804                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 11805  14E7  0852               	movf	sprintf@ap,w
 11806  14E8  0086               	movwf	6
 11807  14E9  0187               	clrf	7
 11808  14EA  3F40               	moviw [0]fsr1
 11809  14EB  00CE               	movwf	sprintf@_val
 11810  14EC  3F41               	moviw [1]fsr1
 11811  14ED  00CF               	movwf	sprintf@_val+1
 11812  14EE  3F42               	moviw [2]fsr1
 11813  14EF  00D0               	movwf	sprintf@_val+2
 11814  14F0  3F43               	moviw [3]fsr1
 11815  14F1  00D1               	movwf	sprintf@_val+3
 11816  14F2  3004               	movlw	4
 11817  14F3  2D02               	goto	L17
 11818  14F4                     l5831:	
 11819                           
 11820                           ;doprnt.c: 1292: else
 11821                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11822  14F4  0852               	movf	sprintf@ap,w
 11823  14F5  0086               	movwf	6
 11824  14F6  0187               	clrf	7
 11825  14F7  3F40               	moviw [0]fsr1
 11826  14F8  00C5               	movwf	??_sprintf
 11827  14F9  3F41               	moviw [1]fsr1
 11828  14FA  00C6               	movwf	??_sprintf+1
 11829  14FB  0845               	movf	??_sprintf,w
 11830  14FC  00CE               	movwf	sprintf@_val
 11831  14FD  0846               	movf	??_sprintf+1,w
 11832  14FE  00CF               	movwf	sprintf@_val+1
 11833  14FF  01D0               	clrf	sprintf@_val+2
 11834  1500  01D1               	clrf	sprintf@_val+3
 11835  1501  3002               	movlw	2
 11836  1502                     L17:	
 11837  1502  00C5               	movwf	??_sprintf
 11838  1503  0845               	movf	??_sprintf,w
 11839  1504  07D2               	addwf	sprintf@ap,f
 11840                           
 11841                           ;doprnt.c: 1296: }
 11842                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11843  1505  01D3               	clrf	sprintf@c
 11844  1506  0AD3               	incf	sprintf@c,f
 11845  1507  0853               	movf	sprintf@c,w
 11846  1508  3A0A               	xorlw	10
 11847  1509  1903               	btfsc	3,2
 11848  150A  2D38               	goto	l5849
 11849  150B                     l5841:	
 11850                           
 11851                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
 11852  150B  0853               	movf	sprintf@c,w
 11853  150C  00C5               	movwf	??_sprintf
 11854  150D  01C6               	clrf	??_sprintf+1
 11855  150E  35C5               	lslf	??_sprintf,f
 11856  150F  0DC6               	rlf	??_sprintf+1,f
 11857  1510  35C5               	lslf	??_sprintf,f
 11858  1511  0DC6               	rlf	??_sprintf+1,f
 11859  1512  30D3               	movlw	low (_dpowers| (0+32768))
 11860  1513  0745               	addwf	??_sprintf,w
 11861  1514  0084               	movwf	4
 11862  1515  3089               	movlw	high (_dpowers| (0+32768))
 11863  1516  3D46               	addwfc	??_sprintf+1,w
 11864  1517  0085               	movwf	5
 11865  1518  3F00               	moviw [0]fsr0
 11866  1519  00C7               	movwf	??_sprintf+2
 11867  151A  3F01               	moviw [1]fsr0
 11868  151B  00C8               	movwf	??_sprintf+3
 11869  151C  3F02               	moviw [2]fsr0
 11870  151D  00C9               	movwf	??_sprintf+4
 11871  151E  3F03               	moviw [3]fsr0
 11872  151F  00CA               	movwf	??_sprintf+5
 11873  1520  084A               	movf	??_sprintf+5,w
 11874  1521  0251               	subwf	sprintf@_val+3,w
 11875  1522  1D03               	skipz
 11876  1523  2D2E               	goto	u7485
 11877  1524  0849               	movf	??_sprintf+4,w
 11878  1525  0250               	subwf	sprintf@_val+2,w
 11879  1526  1D03               	skipz
 11880  1527  2D2E               	goto	u7485
 11881  1528  0848               	movf	??_sprintf+3,w
 11882  1529  024F               	subwf	sprintf@_val+1,w
 11883  152A  1D03               	skipz
 11884  152B  2D2E               	goto	u7485
 11885  152C  0847               	movf	??_sprintf+2,w
 11886  152D  024E               	subwf	sprintf@_val,w
 11887  152E                     u7485:	
 11888  152E  1C03               	btfss	3,0
 11889  152F  2D38               	goto	l5849
 11890                           
 11891                           ;doprnt.c: 1316: break;
 11892  1530  3001               	movlw	1
 11893  1531  00C5               	movwf	??_sprintf
 11894  1532  0845               	movf	??_sprintf,w
 11895  1533  07D3               	addwf	sprintf@c,f
 11896  1534  0853               	movf	sprintf@c,w
 11897  1535  3A0A               	xorlw	10
 11898  1536  1D03               	skipz
 11899  1537  2D0B               	goto	l5841
 11900  1538                     l5849:	
 11901                           
 11902                           ;doprnt.c: 1431: {
 11903                           ;doprnt.c: 1478: }
 11904                           ;doprnt.c: 1481: prec = c;
 11905  1538  0853               	movf	sprintf@c,w
 11906  1539  00CC               	movwf	sprintf@prec
 11907  153A  01CD               	clrf	sprintf@prec+1
 11908  153B  1BCC               	btfsc	sprintf@prec,7
 11909  153C  03CD               	decf	sprintf@prec+1,f
 11910  153D                     l5857:	
 11911                           ;doprnt.c: 1483: while(prec--) {
 11912                           
 11913  153D  30FF               	movlw	255
 11914  153E  07CC               	addwf	sprintf@prec,f
 11915  153F  30FF               	movlw	255
 11916  1540  3DCD               	addwfc	sprintf@prec+1,f
 11917  1541  30FF               	movlw	255
 11918  1542  064D               	xorwf	sprintf@prec+1,w
 11919  1543  1D03               	skipz
 11920  1544  2D47               	goto	u7505
 11921  1545  30FF               	movlw	255
 11922  1546  064C               	xorwf	sprintf@prec,w
 11923  1547                     u7505:	
 11924  1547  1903               	btfsc	3,2
 11925  1548  2CA4               	goto	l5859
 11926                           
 11927                           ;doprnt.c: 1487: {
 11928                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
 11929  1549  3000               	movlw	0
 11930  154A  00B6               	movwf	___llmod@divisor+3
 11931  154B  3000               	movlw	0
 11932  154C  00B5               	movwf	___llmod@divisor+2
 11933  154D  3000               	movlw	0
 11934  154E  00B4               	movwf	___llmod@divisor+1
 11935  154F  300A               	movlw	10
 11936  1550  00B3               	movwf	___llmod@divisor
 11937  1551  084D               	movf	sprintf@prec+1,w
 11938  1552  0085               	movwf	5
 11939  1553  084C               	movf	sprintf@prec,w
 11940  1554  0084               	movwf	4
 11941  1555  3584               	lslf	4,f
 11942  1556  0D85               	rlf	5,f
 11943  1557  3584               	lslf	4,f
 11944  1558  0D85               	rlf	5,f
 11945  1559  30D3               	movlw	low (_dpowers| (0+32768))
 11946  155A  0784               	addwf	4,f
 11947  155B  3089               	movlw	high (_dpowers| (0+32768))
 11948  155C  3D85               	addwfc	5,f
 11949  155D  3F00               	moviw [0]fsr0
 11950  155E  00A5               	movwf	___lldiv@divisor
 11951  155F  3F01               	moviw [1]fsr0
 11952  1560  00A6               	movwf	___lldiv@divisor+1
 11953  1561  3F02               	moviw [2]fsr0
 11954  1562  00A7               	movwf	___lldiv@divisor+2
 11955  1563  3F03               	moviw [3]fsr0
 11956  1564  00A8               	movwf	___lldiv@divisor+3
 11957  1565  0851               	movf	sprintf@_val+3,w
 11958  1566  00AC               	movwf	___lldiv@dividend+3
 11959  1567  0850               	movf	sprintf@_val+2,w
 11960  1568  00AB               	movwf	___lldiv@dividend+2
 11961  1569  084F               	movf	sprintf@_val+1,w
 11962  156A  00AA               	movwf	___lldiv@dividend+1
 11963  156B  084E               	movf	sprintf@_val,w
 11964  156C  00A9               	movwf	___lldiv@dividend
 11965  156D  319D  25DB  3194   	fcall	___lldiv
 11966  1570  0020               	movlb	0	; select bank0
 11967  1571  0828               	movf	?___lldiv+3,w
 11968  1572  00BA               	movwf	___llmod@dividend+3
 11969  1573  0827               	movf	?___lldiv+2,w
 11970  1574  00B9               	movwf	___llmod@dividend+2
 11971  1575  0826               	movf	?___lldiv+1,w
 11972  1576  00B8               	movwf	___llmod@dividend+1
 11973  1577  0825               	movf	?___lldiv,w
 11974  1578  00B7               	movwf	___llmod@dividend
 11975  1579  319C  24AD  3194   	fcall	___llmod
 11976  157C  0020               	movlb	0	; select bank0
 11977  157D  0833               	movf	?___llmod,w
 11978  157E  3E30               	addlw	48
 11979  157F  00C5               	movwf	??_sprintf
 11980  1580  0845               	movf	??_sprintf,w
 11981  1581  00D3               	movwf	sprintf@c
 11982                           
 11983                           ;doprnt.c: 1532: }
 11984                           ;doprnt.c: 1533: ((*sp++ = (c)));
 11985  1582  083D               	movf	sprintf@sp,w
 11986  1583  0086               	movwf	6
 11987  1584  083E               	movf	sprintf@sp+1,w
 11988  1585  0087               	movwf	7
 11989  1586  0853               	movf	sprintf@c,w
 11990  1587  0081               	movwf	1
 11991  1588  3001               	movlw	1
 11992  1589  07BD               	addwf	sprintf@sp,f
 11993  158A  3000               	movlw	0
 11994  158B  3DBE               	addwfc	sprintf@sp+1,f
 11995  158C  2D3D               	goto	l5857
 11996  158D                     l5861:	
 11997                           ;doprnt.c: 1534: }
 11998                           ;doprnt.c: 1542: }
 11999                           ;doprnt.c: 1544: alldone:
 12000                           
 12001                           
 12002                           ;doprnt.c: 1547: *sp = 0;
 12003  158D  083D               	movf	sprintf@sp,w
 12004  158E  0086               	movwf	6
 12005  158F  083E               	movf	sprintf@sp+1,w
 12006  1590  0087               	movwf	7
 12007  1591  0181               	clrf	1
 12008  1592  0008               	return
 12009  1593                     __end_of_sprintf:	
 12010                           ;doprnt.c: 1549: return 0;
 12011                           ;	Return value of _sprintf is never used
 12012                           
 12013                           
 12014                           	psect	text28
 12015  1CAD                     __ptext28:	
 12016 ;; *************** function ___llmod *****************
 12017 ;; Defined at:
 12018 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  divisor         4   19[BANK0 ] unsigned long 
 12021 ;;  dividend        4   23[BANK0 ] unsigned long 
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;  counter         1   28[BANK0 ] unsigned char 
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  4   19[BANK0 ] unsigned long 
 12026 ;; Registers used:
 12027 ;;		wreg, status,2, status,0
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12033 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;Total ram usage:       10 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    3
 12040 ;; This function calls:
 12041 ;;		Nothing
 12042 ;; This function is called by:
 12043 ;;		_sprintf
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           
 12048                           ;psect for function ___llmod
 12049  1CAD                     ___llmod:	
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12053  1CAD  0020               	movlb	0	; select bank0
 12054  1CAE  0836               	movf	___llmod@divisor+3,w
 12055  1CAF  0435               	iorwf	___llmod@divisor+2,w
 12056  1CB0  0434               	iorwf	___llmod@divisor+1,w
 12057  1CB1  0433               	iorwf	___llmod@divisor,w
 12058  1CB2  1903               	skipnz
 12059  1CB3  2CE7               	goto	l5689
 12060  1CB4  01BC               	clrf	___llmod@counter
 12061  1CB5  0ABC               	incf	___llmod@counter,f
 12062  1CB6                     l5679:	
 12063  1CB6  1BB6               	btfsc	___llmod@divisor+3,7
 12064  1CB7  2CC4               	goto	l5681
 12065  1CB8  3001               	movlw	1
 12066  1CB9                     u7295:	
 12067  1CB9  35B3               	lslf	___llmod@divisor,f
 12068  1CBA  0DB4               	rlf	___llmod@divisor+1,f
 12069  1CBB  0DB5               	rlf	___llmod@divisor+2,f
 12070  1CBC  0DB6               	rlf	___llmod@divisor+3,f
 12071  1CBD  0B89               	decfsz	9,f
 12072  1CBE  2CB9               	goto	u7295
 12073  1CBF  3001               	movlw	1
 12074  1CC0  00BB               	movwf	??___llmod
 12075  1CC1  083B               	movf	??___llmod,w
 12076  1CC2  07BC               	addwf	___llmod@counter,f
 12077  1CC3  2CB6               	goto	l5679
 12078  1CC4                     l5681:	
 12079  1CC4  0836               	movf	___llmod@divisor+3,w
 12080  1CC5  023A               	subwf	___llmod@dividend+3,w
 12081  1CC6  1D03               	skipz
 12082  1CC7  2CD2               	goto	u7315
 12083  1CC8  0835               	movf	___llmod@divisor+2,w
 12084  1CC9  0239               	subwf	___llmod@dividend+2,w
 12085  1CCA  1D03               	skipz
 12086  1CCB  2CD2               	goto	u7315
 12087  1CCC  0834               	movf	___llmod@divisor+1,w
 12088  1CCD  0238               	subwf	___llmod@dividend+1,w
 12089  1CCE  1D03               	skipz
 12090  1CCF  2CD2               	goto	u7315
 12091  1CD0  0833               	movf	___llmod@divisor,w
 12092  1CD1  0237               	subwf	___llmod@dividend,w
 12093  1CD2                     u7315:	
 12094  1CD2  1C03               	skipc
 12095  1CD3  2CDC               	goto	l5685
 12096  1CD4  0833               	movf	___llmod@divisor,w
 12097  1CD5  02B7               	subwf	___llmod@dividend,f
 12098  1CD6  0834               	movf	___llmod@divisor+1,w
 12099  1CD7  3BB8               	subwfb	___llmod@dividend+1,f
 12100  1CD8  0835               	movf	___llmod@divisor+2,w
 12101  1CD9  3BB9               	subwfb	___llmod@dividend+2,f
 12102  1CDA  0836               	movf	___llmod@divisor+3,w
 12103  1CDB  3BBA               	subwfb	___llmod@dividend+3,f
 12104  1CDC                     l5685:	
 12105  1CDC  3001               	movlw	1
 12106  1CDD                     u7325:	
 12107  1CDD  36B6               	lsrf	___llmod@divisor+3,f
 12108  1CDE  0CB5               	rrf	___llmod@divisor+2,f
 12109  1CDF  0CB4               	rrf	___llmod@divisor+1,f
 12110  1CE0  0CB3               	rrf	___llmod@divisor,f
 12111  1CE1  0B89               	decfsz	9,f
 12112  1CE2  2CDD               	goto	u7325
 12113  1CE3  3001               	movlw	1
 12114  1CE4  02BC               	subwf	___llmod@counter,f
 12115  1CE5  1D03               	btfss	3,2
 12116  1CE6  2CC4               	goto	l5681
 12117  1CE7                     l5689:	
 12118  1CE7  083A               	movf	___llmod@dividend+3,w
 12119  1CE8  00B6               	movwf	?___llmod+3
 12120  1CE9  0839               	movf	___llmod@dividend+2,w
 12121  1CEA  00B5               	movwf	?___llmod+2
 12122  1CEB  0838               	movf	___llmod@dividend+1,w
 12123  1CEC  00B4               	movwf	?___llmod+1
 12124  1CED  0837               	movf	___llmod@dividend,w
 12125  1CEE  00B3               	movwf	?___llmod
 12126  1CEF  0008               	return
 12127  1CF0                     __end_of___llmod:	
 12128                           
 12129                           	psect	text29
 12130  1BFC                     __ptext29:	
 12131 ;; *************** function _UARTstringWAIT *****************
 12132 ;; Defined at:
 12133 ;;		line 338 in file "UART.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  data            2   20[BANK0 ] PTR const unsigned char 
 12136 ;;		 -> STR_37(29), STR_36(22), STR_35(18), STR_34(17), 
 12137 ;;		 -> STR_33(24), STR_32(23), PS_2_Update@buf(60), STR_30(3), 
 12138 ;;		 -> STR_29(44), STR_28(18), STR_27(3), STR_26(22), 
 12139 ;;		 -> STR_25(18), STR_24(17), STR_23(24), STR_22(23), 
 12140 ;;		 -> SetBaud@buf(50), STR_20(24), STR_19(3), STR_18(22), 
 12141 ;;		 -> STR_17(18), STR_16(17), STR_15(24), STR_14(23), 
 12142 ;;		 -> Init_System@buf(60), STR_12(3), STR_11(20), STR_10(19), 
 12143 ;;		 -> STR_9(17), STR_8(22), STR_7(21), STR_6(24), 
 12144 ;;		 -> STR_5(35), STR_4(3), Version(4), STR_3(19), 
 12145 ;;		 -> STR_2(26), STR_1(3), 
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;		None
 12148 ;; Return value:  Size  Location     Type
 12149 ;;		None               void
 12150 ;; Registers used:
 12151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;Total ram usage:        4 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:    5
 12164 ;; This function calls:
 12165 ;;		_UARTchar
 12166 ;;		_delayUS
 12167 ;; This function is called by:
 12168 ;;		_main
 12169 ;;		_Init_System
 12170 ;;		_SetBaud
 12171 ;;		_PS_2_Update
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           
 12176                           ;psect for function _UARTstringWAIT
 12177  1BFC                     _UARTstringWAIT:	
 12178  1BFC                     l412:	
 12179                           ;incstack = 0
 12180                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12181                           ;UART.c: 340: do
 12182                           
 12183                           
 12184                           ;UART.c: 341: {
 12185                           ;UART.c: 342: delayUS(5000);
 12186  1BFC  3000               	movlw	0
 12187  1BFD  0020               	movlb	0	; select bank0
 12188  1BFE  00A8               	movwf	delayUS@US+3
 12189  1BFF  3000               	movlw	0
 12190  1C00  00A7               	movwf	delayUS@US+2
 12191  1C01  3013               	movlw	19
 12192  1C02  00A6               	movwf	delayUS@US+1
 12193  1C03  3088               	movlw	136
 12194  1C04  00A5               	movwf	delayUS@US
 12195  1C05  3187  27C8  319B   	fcall	_delayUS
 12196                           
 12197                           ;UART.c: 343: if(*data != 0)
 12198  1C08  0020               	movlb	0	; select bank0
 12199  1C09  0834               	movf	UARTstringWAIT@data,w
 12200  1C0A  0084               	movwf	4
 12201  1C0B  0835               	movf	UARTstringWAIT@data+1,w
 12202  1C0C  0085               	movwf	5
 12203  1C0D  0800               	movf	0,w	;code access
 12204  1C0E  3A00               	xorlw	0
 12205  1C0F  1903               	skipnz
 12206  1C10  2C1E               	goto	l5723
 12207                           
 12208                           ;UART.c: 344: {
 12209                           ;UART.c: 345: UARTchar(*data, 0, 0);
 12210  1C11  01AD               	clrf	UARTchar@NinethBit_override
 12211  1C12  01AE               	clrf	UARTchar@NinethBit_override_data
 12212  1C13  0834               	movf	UARTstringWAIT@data,w
 12213  1C14  0084               	movwf	4
 12214  1C15  0835               	movf	UARTstringWAIT@data+1,w
 12215  1C16  0085               	movwf	5
 12216  1C17  0800               	movf	0,w	;code access
 12217  1C18  319D  253A  319B   	fcall	_UARTchar
 12218  1C1B                     l414:	
 12219                           ;UART.c: 346: while((!TX1STAbits.TRMT));
 12220                           
 12221  1C1B  0023               	movlb	3	; select bank3
 12222  1C1C  1C9E               	btfss	30,1	;volatile
 12223  1C1D  2C1B               	goto	l414
 12224  1C1E                     l5723:	
 12225                           
 12226                           ;UART.c: 347: }
 12227                           ;UART.c: 348: } while( *data++);
 12228  1C1E  0020               	movlb	0	; select bank0
 12229  1C1F  0835               	movf	UARTstringWAIT@data+1,w
 12230  1C20  00B7               	movwf	??_UARTstringWAIT+1
 12231  1C21  0834               	movf	UARTstringWAIT@data,w
 12232  1C22  00B6               	movwf	??_UARTstringWAIT
 12233  1C23  0AB4               	incf	UARTstringWAIT@data,f
 12234  1C24  1903               	skipnz
 12235  1C25  0AB5               	incf	UARTstringWAIT@data+1,f
 12236  1C26  0836               	movf	??_UARTstringWAIT,w
 12237  1C27  0084               	movwf	4
 12238  1C28  0837               	movf	??_UARTstringWAIT+1,w
 12239  1C29  0085               	movwf	5
 12240  1C2A  0800               	movf	0,w	;code access
 12241  1C2B  3800               	iorlw	0
 12242  1C2C  1903               	btfsc	3,2
 12243  1C2D  0008               	return
 12244  1C2E  2BFC               	goto	l412
 12245  1C2F                     __end_of_UARTstringWAIT:	
 12246                           
 12247                           	psect	text30
 12248  1D3A                     __ptext30:	
 12249 ;; *************** function _UARTchar *****************
 12250 ;; Defined at:
 12251 ;;		line 227 in file "UART.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  data            1    wreg     unsigned char 
 12254 ;;  NinethBit_ov    1   13[BANK0 ] unsigned char 
 12255 ;;  NinethBit_ov    1   14[BANK0 ] unsigned char 
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  data            1   19[BANK0 ] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;		None               void
 12260 ;; Registers used:
 12261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        7 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    4
 12274 ;; This function calls:
 12275 ;;		_CheckSum_byte
 12276 ;; This function is called by:
 12277 ;;		_UARTstringWAIT
 12278 ;;		_PS_2_Update
 12279 ;;		_UARTstring
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _UARTchar
 12285  1D3A                     _UARTchar:	
 12286                           
 12287                           ;incstack = 0
 12288                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12289                           ;UARTchar@data stored from wreg
 12290  1D3A  0020               	movlb	0	; select bank0
 12291  1D3B  00B3               	movwf	UARTchar@data
 12292                           
 12293                           ;UART.c: 229: if(TXSTAbits.TX9)
 12294  1D3C  0023               	movlb	3	; select bank3
 12295  1D3D  1F1E               	btfss	30,6	;volatile
 12296  1D3E  2D85               	goto	l5525
 12297                           
 12298                           ;UART.c: 230: {
 12299                           ;UART.c: 232: if(!NinethBit_override)
 12300  1D3F  0020               	movlb	0	; select bank0
 12301  1D40  08AD               	movf	UARTchar@NinethBit_override,f
 12302  1D41  1903               	btfsc	3,2
 12303  1D42  2D6C               	goto	l5521
 12304  1D43  2D79               	goto	l5523
 12305  1D44                     l5515:	
 12306                           ;UART.c: 236: {
 12307                           ;UART.c: 237: case 1:
 12308                           
 12309                           ;UART.c: 233: {
 12310                           ;UART.c: 235: switch (PARITY)
 12311                           
 12312                           
 12313                           ;UART.c: 238: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 12314  1D44  0020               	movlb	0	; select bank0
 12315  1D45  0833               	movf	UARTchar@data,w
 12316  1D46  00AF               	movwf	??_UARTchar
 12317  1D47  01B0               	clrf	??_UARTchar+1
 12318  1D48  082F               	movf	??_UARTchar,w
 12319  1D49  00A5               	movwf	CheckSum_byte@This
 12320  1D4A  0830               	movf	??_UARTchar+1,w
 12321  1D4B  00A6               	movwf	CheckSum_byte@This+1
 12322  1D4C  3003               	movlw	3
 12323  1D4D  2D57               	goto	L20
 12324  1D4E                     l5517:	
 12325                           ;UART.c: 240: case 2:
 12326                           
 12327                           ;UART.c: 239: break;
 12328                           
 12329                           
 12330                           ;UART.c: 241: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 12331  1D4E  0020               	movlb	0	; select bank0
 12332  1D4F  0833               	movf	UARTchar@data,w
 12333  1D50  00AF               	movwf	??_UARTchar
 12334  1D51  01B0               	clrf	??_UARTchar+1
 12335  1D52  082F               	movf	??_UARTchar,w
 12336  1D53  00A5               	movwf	CheckSum_byte@This
 12337  1D54  0830               	movf	??_UARTchar+1,w
 12338  1D55  00A6               	movwf	CheckSum_byte@This+1
 12339  1D56  3002               	movlw	2
 12340  1D57                     L20:	
 12341  1D57  00B1               	movwf	??_UARTchar+2
 12342  1D58  0831               	movf	??_UARTchar+2,w
 12343  1D59  00A7               	movwf	CheckSum_byte@Odd_Even
 12344  1D5A  319B  2368  319D   	fcall	_CheckSum_byte
 12345  1D5D  0020               	movlb	0	; select bank0
 12346  1D5E  00B2               	movwf	??_UARTchar+3
 12347  1D5F  0023               	movlb	3	; select bank3
 12348  1D60  081E               	movf	30,w	;volatile
 12349  1D61  0020               	movlb	0	; select bank0
 12350  1D62  0632               	xorwf	??_UARTchar+3,w
 12351  1D63  39FE               	andlw	-2
 12352  1D64  0632               	xorwf	??_UARTchar+3,w
 12353  1D65  2D83               	goto	L19
 12354  1D66                     l387:	
 12355                           ;UART.c: 243: case 3:
 12356                           
 12357                           ;UART.c: 242: break;
 12358                           
 12359                           
 12360                           ;UART.c: 244: TXSTAbits.TX9D = 1;
 12361  1D66  0023               	movlb	3	; select bank3
 12362  1D67  141E               	bsf	30,0	;volatile
 12363                           
 12364                           ;UART.c: 245: break;
 12365  1D68  2D85               	goto	l5525
 12366  1D69                     l388:	
 12367                           ;UART.c: 246: default:
 12368                           
 12369                           
 12370                           ;UART.c: 247: TXSTAbits.TX9D = 0;
 12371  1D69  0023               	movlb	3	; select bank3
 12372  1D6A  101E               	bcf	30,0	;volatile
 12373                           
 12374                           ;UART.c: 249: }
 12375                           
 12376                           ;UART.c: 248: break;
 12377  1D6B  2D85               	goto	l5525
 12378  1D6C                     l5521:	
 12379  1D6C  0021               	movlb	1	; select bank1
 12380  1D6D  086A               	movf	_PARITY^(0+128),w
 12381                           
 12382                           ; Switch size 1, requested type "space"
 12383                           ; Number of cases is 3, Range of values is 1 to 3
 12384                           ; switch strategies available:
 12385                           ; Name         Instructions Cycles
 12386                           ; simple_byte           10     6 (average)
 12387                           ; direct_byte           15     9 (fixed)
 12388                           ; jumptable            263     9 (fixed)
 12389                           ;	Chosen strategy is simple_byte
 12390  1D6E  3A01               	xorlw	1	; case 1
 12391  1D6F  1903               	skipnz
 12392  1D70  2D44               	goto	l5515
 12393  1D71  3A03               	xorlw	3	; case 2
 12394  1D72  1903               	skipnz
 12395  1D73  2D4E               	goto	l5517
 12396  1D74  3A01               	xorlw	1	; case 3
 12397  1D75  1903               	skipnz
 12398  1D76  2D66               	goto	l387
 12399  1D77  2D69               	goto	l388
 12400                           
 12401                           ;UART.c: 250: }
 12402  1D78  2D85               	goto	l5525
 12403  1D79                     l5523:	
 12404                           
 12405                           ;UART.c: 251: else
 12406                           ;UART.c: 252: {
 12407                           ;UART.c: 253: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 12408  1D79  3001               	movlw	1
 12409  1D7A  0020               	movlb	0	; select bank0
 12410  1D7B  052E               	andwf	UARTchar@NinethBit_override_data,w
 12411  1D7C  00AF               	movwf	??_UARTchar
 12412  1D7D  0023               	movlb	3	; select bank3
 12413  1D7E  081E               	movf	30,w	;volatile
 12414  1D7F  0020               	movlb	0	; select bank0
 12415  1D80  062F               	xorwf	??_UARTchar,w
 12416  1D81  39FE               	andlw	-2
 12417  1D82  062F               	xorwf	??_UARTchar,w
 12418  1D83                     L19:	
 12419  1D83  0023               	movlb	3	; select bank3
 12420  1D84  009E               	movwf	30	;volatile
 12421  1D85                     l5525:	
 12422                           
 12423                           ;UART.c: 254: }
 12424                           ;UART.c: 255: }
 12425                           ;UART.c: 256: TXREG = data;
 12426  1D85  0020               	movlb	0	; select bank0
 12427  1D86  0833               	movf	UARTchar@data,w
 12428  1D87  0023               	movlb	3	; select bank3
 12429  1D88  009A               	movwf	26	;volatile
 12430  1D89  0008               	return
 12431  1D8A                     __end_of_UARTchar:	
 12432                           
 12433                           	psect	text31
 12434  1F36                     __ptext31:	
 12435 ;; *************** function _ReadBaud *****************
 12436 ;; Defined at:
 12437 ;;		line 187 in file "FLASH.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;  row             2   23[BANK0 ] unsigned int 
 12440 ;;  column          1   25[BANK0 ] unsigned char 
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;  temp            4   35[BANK0 ] unsigned long 
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  4   23[BANK0 ] unsigned long 
 12445 ;; Registers used:
 12446 ;;		wreg, status,2, status,0, pclath, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:       16 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    5
 12459 ;; This function calls:
 12460 ;;		_ReadFlash_4Byte
 12461 ;; This function is called by:
 12462 ;;		_Init_System
 12463 ;;		_SetBaud
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _ReadBaud
 12469  1F36                     _ReadBaud:	
 12470                           
 12471                           ;FLASH.c: 189: unsigned long temp;
 12472                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 12473                           
 12474                           ;incstack = 0
 12475                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 12476  1F36  0020               	movlb	0	; select bank0
 12477  1F37  0838               	movf	ReadBaud@row+1,w
 12478  1F38  01AB               	clrf	ReadFlash_4Byte@row+1
 12479  1F39  07AB               	addwf	ReadFlash_4Byte@row+1,f
 12480  1F3A  0837               	movf	ReadBaud@row,w
 12481  1F3B  01AA               	clrf	ReadFlash_4Byte@row
 12482  1F3C  07AA               	addwf	ReadFlash_4Byte@row,f
 12483  1F3D  0839               	movf	ReadBaud@column,w
 12484  1F3E  00BB               	movwf	??_ReadBaud
 12485  1F3F  083B               	movf	??_ReadBaud,w
 12486  1F40  00AC               	movwf	ReadFlash_4Byte@column
 12487  1F41  319D  258A  319F   	fcall	_ReadFlash_4Byte
 12488  1F44  0020               	movlb	0	; select bank0
 12489  1F45  082D               	movf	?_ReadFlash_4Byte+3,w
 12490  1F46  00C6               	movwf	ReadBaud@temp+3
 12491  1F47  082C               	movf	?_ReadFlash_4Byte+2,w
 12492  1F48  00C5               	movwf	ReadBaud@temp+2
 12493  1F49  082B               	movf	?_ReadFlash_4Byte+1,w
 12494  1F4A  00C4               	movwf	ReadBaud@temp+1
 12495  1F4B  082A               	movf	?_ReadFlash_4Byte,w
 12496  1F4C  00C3               	movwf	ReadBaud@temp
 12497                           
 12498                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 12499  1F4D  30FF               	movlw	255
 12500  1F4E  0543               	andwf	ReadBaud@temp,w
 12501  1F4F  0024               	movlb	4	; select bank4
 12502  1F50  00B2               	movwf	(_MEM^(0+512)+2)
 12503  1F51  303F               	movlw	63
 12504  1F52  0020               	movlb	0	; select bank0
 12505  1F53  0544               	andwf	ReadBaud@temp+1,w
 12506  1F54  0024               	movlb	4	; select bank4
 12507  1F55  00B3               	movwf	((_MEM+1)^(0+512)+2)
 12508                           
 12509                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 12510  1F56  0020               	movlb	0	; select bank0
 12511  1F57  0843               	movf	ReadBaud@temp,w
 12512  1F58  00BB               	movwf	??_ReadBaud
 12513  1F59  0844               	movf	ReadBaud@temp+1,w
 12514  1F5A  00BC               	movwf	??_ReadBaud+1
 12515  1F5B  0845               	movf	ReadBaud@temp+2,w
 12516  1F5C  00BD               	movwf	??_ReadBaud+2
 12517  1F5D  0846               	movf	ReadBaud@temp+3,w
 12518  1F5E  00BE               	movwf	??_ReadBaud+3
 12519  1F5F  300E               	movlw	14
 12520  1F60                     u7415:	
 12521  1F60  36BE               	lsrf	??_ReadBaud+3,f
 12522  1F61  0CBD               	rrf	??_ReadBaud+2,f
 12523  1F62  0CBC               	rrf	??_ReadBaud+1,f
 12524  1F63  0CBB               	rrf	??_ReadBaud,f
 12525  1F64  0B89               	decfsz	9,f
 12526  1F65  2F60               	goto	u7415
 12527  1F66  30FF               	movlw	255
 12528  1F67  053B               	andwf	??_ReadBaud,w
 12529  1F68  0024               	movlb	4	; select bank4
 12530  1F69  00B0               	movwf	_MEM^(0+512)
 12531  1F6A  303F               	movlw	63
 12532  1F6B  0020               	movlb	0	; select bank0
 12533  1F6C  053C               	andwf	??_ReadBaud+1,w
 12534  1F6D  0024               	movlb	4	; select bank4
 12535  1F6E  00B1               	movwf	(_MEM+1)^(0+512)
 12536                           
 12537                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 12538  1F6F  0832               	movf	(_MEM^(0+512)+2),w
 12539  1F70  0020               	movlb	0	; select bank0
 12540  1F71  00BB               	movwf	??_ReadBaud
 12541  1F72  0024               	movlb	4	; select bank4
 12542  1F73  0833               	movf	((_MEM+1)^(0+512)+2),w
 12543  1F74  0020               	movlb	0	; select bank0
 12544  1F75  00BC               	movwf	??_ReadBaud+1
 12545  1F76  01BD               	clrf	??_ReadBaud+2
 12546  1F77  01BE               	clrf	??_ReadBaud+3
 12547  1F78  0024               	movlb	4	; select bank4
 12548  1F79  0830               	movf	_MEM^(0+512),w
 12549  1F7A  0020               	movlb	0	; select bank0
 12550  1F7B  00BF               	movwf	??_ReadBaud+4
 12551  1F7C  0024               	movlb	4	; select bank4
 12552  1F7D  0831               	movf	(_MEM+1)^(0+512),w
 12553  1F7E  0020               	movlb	0	; select bank0
 12554  1F7F  00C0               	movwf	??_ReadBaud+5
 12555  1F80  01C1               	clrf	??_ReadBaud+6
 12556  1F81  01C2               	clrf	??_ReadBaud+7
 12557  1F82  300C               	movlw	12
 12558  1F83                     u7425:	
 12559  1F83  35BF               	lslf	??_ReadBaud+4,f
 12560  1F84  0DC0               	rlf	??_ReadBaud+5,f
 12561  1F85  0DC1               	rlf	??_ReadBaud+6,f
 12562  1F86  0DC2               	rlf	??_ReadBaud+7,f
 12563  1F87  0B89               	decfsz	9,f
 12564  1F88  2F83               	goto	u7425
 12565  1F89  083F               	movf	??_ReadBaud+4,w
 12566  1F8A  07BB               	addwf	??_ReadBaud,f
 12567  1F8B  0840               	movf	??_ReadBaud+5,w
 12568  1F8C  3DBC               	addwfc	??_ReadBaud+1,f
 12569  1F8D  0841               	movf	??_ReadBaud+6,w
 12570  1F8E  3DBD               	addwfc	??_ReadBaud+2,f
 12571  1F8F  0842               	movf	??_ReadBaud+7,w
 12572  1F90  3DBE               	addwfc	??_ReadBaud+3,f
 12573  1F91  083E               	movf	??_ReadBaud+3,w
 12574  1F92  00BA               	movwf	?_ReadBaud+3
 12575  1F93  083D               	movf	??_ReadBaud+2,w
 12576  1F94  00B9               	movwf	?_ReadBaud+2
 12577  1F95  083C               	movf	??_ReadBaud+1,w
 12578  1F96  00B8               	movwf	?_ReadBaud+1
 12579  1F97  083B               	movf	??_ReadBaud,w
 12580  1F98  00B7               	movwf	?_ReadBaud
 12581  1F99  0008               	return
 12582  1F9A                     __end_of_ReadBaud:	
 12583                           
 12584                           	psect	text32
 12585  1D8A                     __ptext32:	
 12586 ;; *************** function _ReadFlash_4Byte *****************
 12587 ;; Defined at:
 12588 ;;		line 62 in file "FLASH.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  row             2   10[BANK0 ] unsigned int 
 12591 ;;  column          1   12[BANK0 ] unsigned char 
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;  temp            4   19[BANK0 ] unsigned long 
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  4   10[BANK0 ] unsigned long 
 12596 ;; Registers used:
 12597 ;;		wreg, status,2, status,0, pclath, cstack
 12598 ;; Tracked objects:
 12599 ;;		On entry : 0/0
 12600 ;;		On exit  : 0/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12603 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;Total ram usage:       13 bytes
 12608 ;; Hardware stack levels used:    1
 12609 ;; Hardware stack levels required when called:    4
 12610 ;; This function calls:
 12611 ;;		_ReadFlash_2Byte
 12612 ;; This function is called by:
 12613 ;;		_ReadBaud
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _ReadFlash_4Byte
 12619  1D8A                     _ReadFlash_4Byte:	
 12620                           
 12621                           ;FLASH.c: 64: unsigned long temp =0;
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 12625  1D8A  3000               	movlw	0
 12626  1D8B  0020               	movlb	0	; select bank0
 12627  1D8C  00B6               	movwf	ReadFlash_4Byte@temp+3
 12628  1D8D  3000               	movlw	0
 12629  1D8E  00B5               	movwf	ReadFlash_4Byte@temp+2
 12630  1D8F  3000               	movlw	0
 12631  1D90  00B4               	movwf	ReadFlash_4Byte@temp+1
 12632  1D91  3000               	movlw	0
 12633  1D92  00B3               	movwf	ReadFlash_4Byte@temp
 12634                           
 12635                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 12636  1D93  082B               	movf	ReadFlash_4Byte@row+1,w
 12637  1D94  01A6               	clrf	ReadFlash_2Byte@row+1
 12638  1D95  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12639  1D96  082A               	movf	ReadFlash_4Byte@row,w
 12640  1D97  01A5               	clrf	ReadFlash_2Byte@row
 12641  1D98  07A5               	addwf	ReadFlash_2Byte@row,f
 12642  1D99  082C               	movf	ReadFlash_4Byte@column,w
 12643  1D9A  00AE               	movwf	??_ReadFlash_4Byte
 12644  1D9B  082E               	movf	??_ReadFlash_4Byte,w
 12645  1D9C  00A7               	movwf	ReadFlash_2Byte@column
 12646  1D9D  319B  23CA  319D   	fcall	_ReadFlash_2Byte
 12647  1DA0  0020               	movlb	0	; select bank0
 12648  1DA1  0825               	movf	?_ReadFlash_2Byte,w
 12649  1DA2  00AF               	movwf	??_ReadFlash_4Byte+1
 12650  1DA3  0826               	movf	?_ReadFlash_2Byte+1,w
 12651  1DA4  00B0               	movwf	??_ReadFlash_4Byte+2
 12652  1DA5  01B1               	clrf	??_ReadFlash_4Byte+3
 12653  1DA6  01B2               	clrf	??_ReadFlash_4Byte+4
 12654  1DA7  3010               	movlw	16
 12655  1DA8                     u7165:	
 12656  1DA8  35AF               	lslf	??_ReadFlash_4Byte+1,f
 12657  1DA9  0DB0               	rlf	??_ReadFlash_4Byte+2,f
 12658  1DAA  0DB1               	rlf	??_ReadFlash_4Byte+3,f
 12659  1DAB  0DB2               	rlf	??_ReadFlash_4Byte+4,f
 12660  1DAC  0B89               	decfsz	9,f
 12661  1DAD  2DA8               	goto	u7165
 12662  1DAE  0832               	movf	??_ReadFlash_4Byte+4,w
 12663  1DAF  00B6               	movwf	ReadFlash_4Byte@temp+3
 12664  1DB0  0831               	movf	??_ReadFlash_4Byte+3,w
 12665  1DB1  00B5               	movwf	ReadFlash_4Byte@temp+2
 12666  1DB2  0830               	movf	??_ReadFlash_4Byte+2,w
 12667  1DB3  00B4               	movwf	ReadFlash_4Byte@temp+1
 12668  1DB4  082F               	movf	??_ReadFlash_4Byte+1,w
 12669  1DB5  00B3               	movwf	ReadFlash_4Byte@temp
 12670                           
 12671                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 12672  1DB6  082B               	movf	ReadFlash_4Byte@row+1,w
 12673  1DB7  01A6               	clrf	ReadFlash_2Byte@row+1
 12674  1DB8  07A6               	addwf	ReadFlash_2Byte@row+1,f
 12675  1DB9  082A               	movf	ReadFlash_4Byte@row,w
 12676  1DBA  01A5               	clrf	ReadFlash_2Byte@row
 12677  1DBB  07A5               	addwf	ReadFlash_2Byte@row,f
 12678  1DBC  082C               	movf	ReadFlash_4Byte@column,w
 12679  1DBD  3E01               	addlw	1
 12680  1DBE  00AE               	movwf	??_ReadFlash_4Byte
 12681  1DBF  082E               	movf	??_ReadFlash_4Byte,w
 12682  1DC0  00A7               	movwf	ReadFlash_2Byte@column
 12683  1DC1  319B  23CA         	fcall	_ReadFlash_2Byte
 12684  1DC3  0020               	movlb	0	; select bank0
 12685  1DC4  0825               	movf	?_ReadFlash_2Byte,w
 12686  1DC5  00AF               	movwf	??_ReadFlash_4Byte+1
 12687  1DC6  0826               	movf	?_ReadFlash_2Byte+1,w
 12688  1DC7  00B0               	movwf	??_ReadFlash_4Byte+2
 12689  1DC8  01B1               	clrf	??_ReadFlash_4Byte+3
 12690  1DC9  01B2               	clrf	??_ReadFlash_4Byte+4
 12691  1DCA  082F               	movf	??_ReadFlash_4Byte+1,w
 12692  1DCB  04B3               	iorwf	ReadFlash_4Byte@temp,f
 12693  1DCC  0830               	movf	??_ReadFlash_4Byte+2,w
 12694  1DCD  04B4               	iorwf	ReadFlash_4Byte@temp+1,f
 12695  1DCE  0831               	movf	??_ReadFlash_4Byte+3,w
 12696  1DCF  04B5               	iorwf	ReadFlash_4Byte@temp+2,f
 12697  1DD0  0832               	movf	??_ReadFlash_4Byte+4,w
 12698  1DD1  04B6               	iorwf	ReadFlash_4Byte@temp+3,f
 12699                           
 12700                           ;FLASH.c: 67: return temp;
 12701  1DD2  0836               	movf	ReadFlash_4Byte@temp+3,w
 12702  1DD3  00AD               	movwf	?_ReadFlash_4Byte+3
 12703  1DD4  0835               	movf	ReadFlash_4Byte@temp+2,w
 12704  1DD5  00AC               	movwf	?_ReadFlash_4Byte+2
 12705  1DD6  0834               	movf	ReadFlash_4Byte@temp+1,w
 12706  1DD7  00AB               	movwf	?_ReadFlash_4Byte+1
 12707  1DD8  0833               	movf	ReadFlash_4Byte@temp,w
 12708  1DD9  00AA               	movwf	?_ReadFlash_4Byte
 12709  1DDA  0008               	return
 12710  1DDB                     __end_of_ReadFlash_4Byte:	
 12711                           
 12712                           	psect	text33
 12713  1BCA                     __ptext33:	
 12714 ;; *************** function _ReadFlash_2Byte *****************
 12715 ;; Defined at:
 12716 ;;		line 43 in file "FLASH.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;  row             2    5[BANK0 ] unsigned int 
 12719 ;;  column          1    7[BANK0 ] unsigned char 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;		None
 12722 ;; Return value:  Size  Location     Type
 12723 ;;                  2    5[BANK0 ] unsigned int 
 12724 ;; Registers used:
 12725 ;;		wreg, status,2, status,0
 12726 ;; Tracked objects:
 12727 ;;		On entry : 0/0
 12728 ;;		On exit  : 0/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12731 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;Total ram usage:        5 bytes
 12736 ;; Hardware stack levels used:    1
 12737 ;; Hardware stack levels required when called:    3
 12738 ;; This function calls:
 12739 ;;		Nothing
 12740 ;; This function is called by:
 12741 ;;		_ReadFlash_4Byte
 12742 ;;		_WriteFlash_Sequential
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           
 12747                           ;psect for function _ReadFlash_2Byte
 12748  1BCA                     _ReadFlash_2Byte:	
 12749                           
 12750                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 12751                           
 12752                           ;incstack = 0
 12753                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
 12754  1BCA  30BF               	movlw	191
 12755  1BCB  0020               	movlb	0	; select bank0
 12756  1BCC  00A8               	movwf	??_ReadFlash_2Byte
 12757  1BCD  0828               	movf	??_ReadFlash_2Byte,w
 12758  1BCE  0023               	movlb	3	; select bank3
 12759  1BCF  0595               	andwf	21,f	;volatile
 12760                           
 12761                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 12762  1BD0  0020               	movlb	0	; select bank0
 12763  1BD1  0826               	movf	ReadFlash_2Byte@row+1,w
 12764  1BD2  00A9               	movwf	??_ReadFlash_2Byte+1
 12765  1BD3  0825               	movf	ReadFlash_2Byte@row,w
 12766  1BD4  00A8               	movwf	??_ReadFlash_2Byte
 12767  1BD5  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12768  1BD6  0CA8               	rrf	??_ReadFlash_2Byte,f
 12769  1BD7  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12770  1BD8  0CA8               	rrf	??_ReadFlash_2Byte,f
 12771  1BD9  36A9               	lsrf	??_ReadFlash_2Byte+1,f
 12772  1BDA  0CA8               	rrf	??_ReadFlash_2Byte,f
 12773  1BDB  0828               	movf	??_ReadFlash_2Byte,w
 12774  1BDC  397F               	andlw	127
 12775  1BDD  0023               	movlb	3	; select bank3
 12776  1BDE  0092               	movwf	18	;volatile
 12777                           
 12778                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 12779  1BDF  0020               	movlb	0	; select bank0
 12780  1BE0  0825               	movf	ReadFlash_2Byte@row,w
 12781  1BE1  3907               	andlw	7
 12782  1BE2  00A8               	movwf	??_ReadFlash_2Byte
 12783  1BE3  3004               	movlw	4
 12784  1BE4                     u7035:	
 12785  1BE4  35A8               	lslf	??_ReadFlash_2Byte,f
 12786  1BE5  3EFF               	addlw	-1
 12787  1BE6  1D03               	skipz
 12788  1BE7  2BE4               	goto	u7035
 12789  1BE8  3528               	lslf	??_ReadFlash_2Byte,w
 12790  1BE9  0727               	addwf	ReadFlash_2Byte@column,w
 12791  1BEA  0023               	movlb	3	; select bank3
 12792  1BEB  0091               	movwf	17	;volatile
 12793                           
 12794                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 12795  1BEC  1415               	bsf	21,0	;volatile
 12796  1BED                     l887:	
 12797                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 12798                           
 12799  1BED  1815               	btfsc	21,0	;volatile
 12800  1BEE  2BED               	goto	l887
 12801                           
 12802                           ;FLASH.c: 50: __nop();
 12803  1BEF  0000               	nop
 12804                           
 12805                           ;FLASH.c: 51: __nop();
 12806  1BF0  0000               	nop
 12807                           
 12808                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 12809  1BF1  0023               	movlb	3	; select bank3
 12810  1BF2  0814               	movf	20,w	;volatile
 12811  1BF3  0020               	movlb	0	; select bank0
 12812  1BF4  01A6               	clrf	?_ReadFlash_2Byte+1
 12813  1BF5  07A6               	addwf	?_ReadFlash_2Byte+1,f
 12814  1BF6  0023               	movlb	3	; select bank3
 12815  1BF7  0813               	movf	19,w	;volatile
 12816  1BF8  0020               	movlb	0	; select bank0
 12817  1BF9  01A5               	clrf	?_ReadFlash_2Byte
 12818  1BFA  07A5               	addwf	?_ReadFlash_2Byte,f
 12819  1BFB  0008               	return
 12820  1BFC                     __end_of_ReadFlash_2Byte:	
 12821                           
 12822                           	psect	text34
 12823  11CA                     __ptext34:	
 12824 ;; *************** function _InitUART *****************
 12825 ;; Defined at:
 12826 ;;		line 73 in file "UART.c"
 12827 ;; Parameters:    Size  Location     Type
 12828 ;;  Baud            4   19[BANK0 ] unsigned long 
 12829 ;;  parity          1   23[BANK0 ] unsigned char 
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;  temp            4   36[BANK0 ] unsigned long 
 12832 ;;  spbrg           2   32[BANK0 ] unsigned int 
 12833 ;;  config          1   35[BANK0 ] unsigned char 
 12834 ;;  baudconfig      1   34[BANK0 ] unsigned char 
 12835 ;; Return value:  Size  Location     Type
 12836 ;;		None               void
 12837 ;; Registers used:
 12838 ;;		wreg, status,2, status,0, pclath, cstack
 12839 ;; Tracked objects:
 12840 ;;		On entry : 0/0
 12841 ;;		On exit  : 0/0
 12842 ;;		Unchanged: 0/0
 12843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12844 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;Total ram usage:       21 bytes
 12849 ;; Hardware stack levels used:    1
 12850 ;; Hardware stack levels required when called:    4
 12851 ;; This function calls:
 12852 ;;		_CloseUSART
 12853 ;;		_OpenUSART
 12854 ;;		_ReadUSART
 12855 ;;		___lldiv
 12856 ;;		_baudUSART
 12857 ;; This function is called by:
 12858 ;;		_Init_System
 12859 ;;		_SetBaud
 12860 ;; This function uses a non-reentrant model
 12861 ;;
 12862                           
 12863                           
 12864                           ;psect for function _InitUART
 12865  11CA                     _InitUART:	
 12866                           
 12867                           ;UART.c: 75: unsigned long temp;
 12868                           ;UART.c: 76: unsigned char config;
 12869                           ;UART.c: 77: unsigned int spbrg;
 12870                           ;UART.c: 78: unsigned char baudconfig;
 12871                           ;UART.c: 88: LATC |= 0b00000100;
 12872                           
 12873                           ;incstack = 0
 12874                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
 12875  11CA  0022               	movlb	2	; select bank2
 12876  11CB  150E               	bsf	14,2	;volatile
 12877                           
 12878                           ;UART.c: 89: PPSLOCK =0;
 12879  11CC  003C               	movlb	28	; select bank28
 12880  11CD  018F               	clrf	15	;volatile
 12881                           
 12882                           ;UART.c: 90: RC2PPS = 0b00000000;
 12883  11CE  003D               	movlb	29	; select bank29
 12884  11CF  01A2               	clrf	34	;volatile
 12885                           
 12886                           ;UART.c: 91: PPSLOCK =1;
 12887  11D0  3001               	movlw	1
 12888  11D1  003C               	movlb	28	; select bank28
 12889  11D2  008F               	movwf	15	;volatile
 12890                           
 12891                           ;UART.c: 93: CloseUSART();
 12892  11D3  319A  2231  3191   	fcall	_CloseUSART
 12893                           
 12894                           ;UART.c: 94: config =0;
 12895  11D6  0020               	movlb	0	; select bank0
 12896  11D7  01C3               	clrf	InitUART@config
 12897                           
 12898                           ;UART.c: 95: baudconfig =0;
 12899  11D8  01C2               	clrf	InitUART@baudconfig
 12900                           
 12901                           ;UART.c: 99: config |= 0b01000000;
 12902  11D9  1743               	bsf	InitUART@config,6
 12903                           
 12904                           ;UART.c: 101: config |= 0b00001000;
 12905  11DA  15C3               	bsf	InitUART@config,3
 12906                           
 12907                           ;UART.c: 102: config |= 0b00010000;
 12908  11DB  1643               	bsf	InitUART@config,4
 12909                           
 12910                           ;UART.c: 103: PARITY = parity;
 12911  11DC  0837               	movf	InitUART@parity,w
 12912  11DD  00B8               	movwf	??_InitUART
 12913  11DE  0838               	movf	??_InitUART,w
 12914  11DF  0021               	movlb	1	; select bank1
 12915  11E0  00EA               	movwf	_PARITY^(0+128)
 12916                           
 12917                           ;UART.c: 104: BAUD = Baud;
 12918  11E1  0020               	movlb	0	; select bank0
 12919  11E2  0836               	movf	InitUART@Baud+3,w
 12920  11E3  0024               	movlb	4	; select bank4
 12921  11E4  00AF               	movwf	(_BAUD+3)^(0+512)
 12922  11E5  0020               	movlb	0	; select bank0
 12923  11E6  0835               	movf	InitUART@Baud+2,w
 12924  11E7  0024               	movlb	4	; select bank4
 12925  11E8  00AE               	movwf	(_BAUD+2)^(0+512)
 12926  11E9  0020               	movlb	0	; select bank0
 12927  11EA  0834               	movf	InitUART@Baud+1,w
 12928  11EB  0024               	movlb	4	; select bank4
 12929  11EC  00AD               	movwf	(_BAUD+1)^(0+512)
 12930  11ED  0020               	movlb	0	; select bank0
 12931  11EE  0833               	movf	InitUART@Baud,w
 12932  11EF  0024               	movlb	4	; select bank4
 12933  11F0  00AC               	movwf	_BAUD^(0+512)
 12934                           
 12935                           ;UART.c: 105: if(parity)
 12936  11F1  0020               	movlb	0	; select bank0
 12937  11F2  0837               	movf	InitUART@parity,w
 12938  11F3  1903               	btfsc	3,2
 12939  11F4  29F7               	goto	l5771
 12940                           
 12941                           ;UART.c: 106: {
 12942                           ;UART.c: 107: config |= 0b00000010;
 12943  11F5  14C3               	bsf	InitUART@config,1
 12944                           
 12945                           ;UART.c: 108: }
 12946  11F6  29FB               	goto	l5773
 12947  11F7                     l5771:	
 12948                           
 12949                           ;UART.c: 109: else
 12950                           ;UART.c: 110: {
 12951                           ;UART.c: 111: config &= ~0b00000010;
 12952  11F7  30FD               	movlw	253
 12953  11F8  00B8               	movwf	??_InitUART
 12954  11F9  0838               	movf	??_InitUART,w
 12955  11FA  05C3               	andwf	InitUART@config,f
 12956  11FB                     l5773:	
 12957                           
 12958                           ;UART.c: 112: }
 12959                           ;UART.c: 113: baudconfig |= 0b00001000;
 12960  11FB  15C2               	bsf	InitUART@baudconfig,3
 12961                           
 12962                           ;UART.c: 116: temp = (32000000L / Baud) - 1;
 12963  11FC  0836               	movf	InitUART@Baud+3,w
 12964  11FD  00A8               	movwf	___lldiv@divisor+3
 12965  11FE  0835               	movf	InitUART@Baud+2,w
 12966  11FF  00A7               	movwf	___lldiv@divisor+2
 12967  1200  0834               	movf	InitUART@Baud+1,w
 12968  1201  00A6               	movwf	___lldiv@divisor+1
 12969  1202  0833               	movf	InitUART@Baud,w
 12970  1203  00A5               	movwf	___lldiv@divisor
 12971  1204  3001               	movlw	1
 12972  1205  00AC               	movwf	___lldiv@dividend+3
 12973  1206  30E8               	movlw	232
 12974  1207  00AB               	movwf	___lldiv@dividend+2
 12975  1208  3048               	movlw	72
 12976  1209  00AA               	movwf	___lldiv@dividend+1
 12977  120A  3000               	movlw	0
 12978  120B  00A9               	movwf	___lldiv@dividend
 12979  120C  319D  25DB  3191   	fcall	___lldiv
 12980  120F  30FF               	movlw	255
 12981  1210  0020               	movlb	0	; select bank0
 12982  1211  0725               	addwf	?___lldiv,w
 12983  1212  00C4               	movwf	InitUART@temp
 12984  1213  30FF               	movlw	255
 12985  1214  3D26               	addwfc	?___lldiv+1,w
 12986  1215  00C5               	movwf	InitUART@temp+1
 12987  1216  30FF               	movlw	255
 12988  1217  3D27               	addwfc	?___lldiv+2,w
 12989  1218  00C6               	movwf	InitUART@temp+2
 12990  1219  30FF               	movlw	255
 12991  121A  3D28               	addwfc	?___lldiv+3,w
 12992  121B  00C7               	movwf	InitUART@temp+3
 12993                           
 12994                           ;UART.c: 117: temp = (temp >> 2) - 1;
 12995  121C  30FF               	movlw	255
 12996  121D  00B8               	movwf	??_InitUART
 12997  121E  30FF               	movlw	255
 12998  121F  00B9               	movwf	??_InitUART+1
 12999  1220  30FF               	movlw	255
 13000  1221  00BA               	movwf	??_InitUART+2
 13001  1222  30FF               	movlw	255
 13002  1223  00BB               	movwf	??_InitUART+3
 13003  1224  0844               	movf	InitUART@temp,w
 13004  1225  00BC               	movwf	??_InitUART+4
 13005  1226  0845               	movf	InitUART@temp+1,w
 13006  1227  00BD               	movwf	??_InitUART+5
 13007  1228  0846               	movf	InitUART@temp+2,w
 13008  1229  00BE               	movwf	??_InitUART+6
 13009  122A  0847               	movf	InitUART@temp+3,w
 13010  122B  00BF               	movwf	??_InitUART+7
 13011  122C  3002               	movlw	2
 13012  122D                     u7445:	
 13013  122D  36BF               	lsrf	??_InitUART+7,f
 13014  122E  0CBE               	rrf	??_InitUART+6,f
 13015  122F  0CBD               	rrf	??_InitUART+5,f
 13016  1230  0CBC               	rrf	??_InitUART+4,f
 13017  1231  0B89               	decfsz	9,f
 13018  1232  2A2D               	goto	u7445
 13019  1233  083C               	movf	??_InitUART+4,w
 13020  1234  07B8               	addwf	??_InitUART,f
 13021  1235  083D               	movf	??_InitUART+5,w
 13022  1236  3DB9               	addwfc	??_InitUART+1,f
 13023  1237  083E               	movf	??_InitUART+6,w
 13024  1238  3DBA               	addwfc	??_InitUART+2,f
 13025  1239  083F               	movf	??_InitUART+7,w
 13026  123A  3DBB               	addwfc	??_InitUART+3,f
 13027  123B  083B               	movf	??_InitUART+3,w
 13028  123C  00C7               	movwf	InitUART@temp+3
 13029  123D  083A               	movf	??_InitUART+2,w
 13030  123E  00C6               	movwf	InitUART@temp+2
 13031  123F  0839               	movf	??_InitUART+1,w
 13032  1240  00C5               	movwf	InitUART@temp+1
 13033  1241  0838               	movf	??_InitUART,w
 13034  1242  00C4               	movwf	InitUART@temp
 13035                           
 13036                           ;UART.c: 118: spbrg = (unsigned int)temp;
 13037  1243  0845               	movf	InitUART@temp+1,w
 13038  1244  01C1               	clrf	InitUART@spbrg+1
 13039  1245  07C1               	addwf	InitUART@spbrg+1,f
 13040  1246  0844               	movf	InitUART@temp,w
 13041  1247  01C0               	clrf	InitUART@spbrg
 13042  1248  07C0               	addwf	InitUART@spbrg,f
 13043                           
 13044                           ;UART.c: 120: RCSTAbits.CREN = 0;
 13045  1249  0023               	movlb	3	; select bank3
 13046  124A  121D               	bcf	29,4	;volatile
 13047                           
 13048                           ;UART.c: 121: OpenUSART(config, spbrg);
 13049  124B  0020               	movlb	0	; select bank0
 13050  124C  0841               	movf	InitUART@spbrg+1,w
 13051  124D  01A6               	clrf	OpenUSART@spbrg+1
 13052  124E  07A6               	addwf	OpenUSART@spbrg+1,f
 13053  124F  0840               	movf	InitUART@spbrg,w
 13054  1250  01A5               	clrf	OpenUSART@spbrg
 13055  1251  07A5               	addwf	OpenUSART@spbrg,f
 13056  1252  0843               	movf	InitUART@config,w
 13057  1253  319C  242F  3191   	fcall	_OpenUSART
 13058                           
 13059                           ;UART.c: 122: baudUSART(baudconfig);
 13060  1256  0020               	movlb	0	; select bank0
 13061  1257  0842               	movf	InitUART@baudconfig,w
 13062  1258  3199  21E5  3191   	fcall	_baudUSART
 13063                           
 13064                           ;UART.c: 123: temp = ReadUSART();
 13065  125B  3199  21EE  3191   	fcall	_ReadUSART
 13066  125E  0020               	movlb	0	; select bank0
 13067  125F  00B8               	movwf	??_InitUART
 13068  1260  01B9               	clrf	??_InitUART+1
 13069  1261  01BA               	clrf	??_InitUART+2
 13070  1262  01BB               	clrf	??_InitUART+3
 13071  1263  083B               	movf	??_InitUART+3,w
 13072  1264  00C7               	movwf	InitUART@temp+3
 13073  1265  083A               	movf	??_InitUART+2,w
 13074  1266  00C6               	movwf	InitUART@temp+2
 13075  1267  0839               	movf	??_InitUART+1,w
 13076  1268  00C5               	movwf	InitUART@temp+1
 13077  1269  0838               	movf	??_InitUART,w
 13078  126A  00C4               	movwf	InitUART@temp
 13079                           
 13080                           ;UART.c: 124: temp = ReadUSART();
 13081  126B  3199  21EE  3191   	fcall	_ReadUSART
 13082  126E  0020               	movlb	0	; select bank0
 13083  126F  00B8               	movwf	??_InitUART
 13084  1270  01B9               	clrf	??_InitUART+1
 13085  1271  01BA               	clrf	??_InitUART+2
 13086  1272  01BB               	clrf	??_InitUART+3
 13087  1273  083B               	movf	??_InitUART+3,w
 13088  1274  00C7               	movwf	InitUART@temp+3
 13089  1275  083A               	movf	??_InitUART+2,w
 13090  1276  00C6               	movwf	InitUART@temp+2
 13091  1277  0839               	movf	??_InitUART+1,w
 13092  1278  00C5               	movwf	InitUART@temp+1
 13093  1279  0838               	movf	??_InitUART,w
 13094  127A  00C4               	movwf	InitUART@temp
 13095                           
 13096                           ;UART.c: 125: temp = ReadUSART();
 13097  127B  3199  21EE  3191   	fcall	_ReadUSART
 13098  127E  0020               	movlb	0	; select bank0
 13099  127F  00B8               	movwf	??_InitUART
 13100  1280  01B9               	clrf	??_InitUART+1
 13101  1281  01BA               	clrf	??_InitUART+2
 13102  1282  01BB               	clrf	??_InitUART+3
 13103  1283  083B               	movf	??_InitUART+3,w
 13104  1284  00C7               	movwf	InitUART@temp+3
 13105  1285  083A               	movf	??_InitUART+2,w
 13106  1286  00C6               	movwf	InitUART@temp+2
 13107  1287  0839               	movf	??_InitUART+1,w
 13108  1288  00C5               	movwf	InitUART@temp+1
 13109  1289  0838               	movf	??_InitUART,w
 13110  128A  00C4               	movwf	InitUART@temp
 13111                           
 13112                           ;UART.c: 126: temp = ReadUSART();
 13113  128B  3199  21EE  3191   	fcall	_ReadUSART
 13114  128E  0020               	movlb	0	; select bank0
 13115  128F  00B8               	movwf	??_InitUART
 13116  1290  01B9               	clrf	??_InitUART+1
 13117  1291  01BA               	clrf	??_InitUART+2
 13118  1292  01BB               	clrf	??_InitUART+3
 13119  1293  083B               	movf	??_InitUART+3,w
 13120  1294  00C7               	movwf	InitUART@temp+3
 13121  1295  083A               	movf	??_InitUART+2,w
 13122  1296  00C6               	movwf	InitUART@temp+2
 13123  1297  0839               	movf	??_InitUART+1,w
 13124  1298  00C5               	movwf	InitUART@temp+1
 13125  1299  0838               	movf	??_InitUART,w
 13126  129A  00C4               	movwf	InitUART@temp
 13127                           
 13128                           ;UART.c: 127: temp = ReadUSART();
 13129  129B  3199  21EE         	fcall	_ReadUSART
 13130  129D  0020               	movlb	0	; select bank0
 13131  129E  00B8               	movwf	??_InitUART
 13132  129F  01B9               	clrf	??_InitUART+1
 13133  12A0  01BA               	clrf	??_InitUART+2
 13134  12A1  01BB               	clrf	??_InitUART+3
 13135  12A2  083B               	movf	??_InitUART+3,w
 13136  12A3  00C7               	movwf	InitUART@temp+3
 13137  12A4  083A               	movf	??_InitUART+2,w
 13138  12A5  00C6               	movwf	InitUART@temp+2
 13139  12A6  0839               	movf	??_InitUART+1,w
 13140  12A7  00C5               	movwf	InitUART@temp+1
 13141  12A8  0838               	movf	??_InitUART,w
 13142  12A9  00C4               	movwf	InitUART@temp
 13143                           
 13144                           ;UART.c: 129: PPSLOCK =0;
 13145  12AA  003C               	movlb	28	; select bank28
 13146  12AB  018F               	clrf	15	;volatile
 13147                           
 13148                           ;UART.c: 130: RC2PPS = 0b00010100;
 13149  12AC  3014               	movlw	20
 13150  12AD  003D               	movlb	29	; select bank29
 13151  12AE  00A2               	movwf	34	;volatile
 13152                           
 13153                           ;UART.c: 131: CKPPS = 0b00010010;
 13154  12AF  3012               	movlw	18
 13155  12B0  003C               	movlb	28	; select bank28
 13156  12B1  00A5               	movwf	37	;volatile
 13157                           
 13158                           ;UART.c: 132: RXPPS = 0b00010101;
 13159  12B2  3015               	movlw	21
 13160  12B3  00A4               	movwf	36	;volatile
 13161                           
 13162                           ;UART.c: 133: PPSLOCK =1;
 13163  12B4  3001               	movlw	1
 13164  12B5  008F               	movwf	15	;volatile
 13165                           
 13166                           ;UART.c: 135: PIR1bits.RCIF = 0;
 13167  12B6  0020               	movlb	0	; select bank0
 13168  12B7  1291               	bcf	17,5	;volatile
 13169                           
 13170                           ;UART.c: 136: INTCONbits.PEIE = 1;
 13171  12B8  170B               	bsf	11,6	;volatile
 13172  12B9  0008               	return
 13173  12BA                     __end_of_InitUART:	
 13174                           
 13175                           	psect	text35
 13176  19E5                     __ptext35:	
 13177 ;; *************** function _baudUSART *****************
 13178 ;; Defined at:
 13179 ;;		line 144 in file "UART.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  baudconfig      1    wreg     unsigned char 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  baudconfig      1    5[BANK0 ] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;		None               void
 13186 ;; Registers used:
 13187 ;;		wreg, status,2
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;Total ram usage:        1 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    3
 13200 ;; This function calls:
 13201 ;;		Nothing
 13202 ;; This function is called by:
 13203 ;;		_InitUART
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207                           
 13208                           ;psect for function _baudUSART
 13209  19E5                     _baudUSART:	
 13210                           
 13211                           ;incstack = 0
 13212                           ; Regs used in _baudUSART: [wreg+status,2]
 13213                           ;baudUSART@baudconfig stored from wreg
 13214  19E5  0020               	movlb	0	; select bank0
 13215  19E6  00A5               	movwf	baudUSART@baudconfig
 13216                           
 13217                           ;UART.c: 146: BAUD1CON =0;
 13218  19E7  0023               	movlb	3	; select bank3
 13219  19E8  019F               	clrf	31	;volatile
 13220                           
 13221                           ;UART.c: 147: BAUD1CON = baudconfig;
 13222  19E9  0020               	movlb	0	; select bank0
 13223  19EA  0825               	movf	baudUSART@baudconfig,w
 13224  19EB  0023               	movlb	3	; select bank3
 13225  19EC  009F               	movwf	31	;volatile
 13226  19ED  0008               	return
 13227  19EE                     __end_of_baudUSART:	
 13228                           
 13229                           	psect	text36
 13230  1DDB                     __ptext36:	
 13231 ;; *************** function ___lldiv *****************
 13232 ;; Defined at:
 13233 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  divisor         4    5[BANK0 ] unsigned long 
 13236 ;;  dividend        4    9[BANK0 ] unsigned long 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;  quotient        4   14[BANK0 ] unsigned long 
 13239 ;;  counter         1   18[BANK0 ] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  4    5[BANK0 ] unsigned long 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:       14 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    3
 13256 ;; This function calls:
 13257 ;;		Nothing
 13258 ;; This function is called by:
 13259 ;;		_InitUART
 13260 ;;		_sprintf
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function ___lldiv
 13266  1DDB                     ___lldiv:	
 13267                           
 13268                           ;incstack = 0
 13269                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13270  1DDB  3000               	movlw	0
 13271  1DDC  0020               	movlb	0	; select bank0
 13272  1DDD  00B1               	movwf	___lldiv@quotient+3
 13273  1DDE  3000               	movlw	0
 13274  1DDF  00B0               	movwf	___lldiv@quotient+2
 13275  1DE0  3000               	movlw	0
 13276  1DE1  00AF               	movwf	___lldiv@quotient+1
 13277  1DE2  3000               	movlw	0
 13278  1DE3  00AE               	movwf	___lldiv@quotient
 13279  1DE4  0828               	movf	___lldiv@divisor+3,w
 13280  1DE5  0427               	iorwf	___lldiv@divisor+2,w
 13281  1DE6  0426               	iorwf	___lldiv@divisor+1,w
 13282  1DE7  0425               	iorwf	___lldiv@divisor,w
 13283  1DE8  1903               	skipnz
 13284  1DE9  2E25               	goto	l5669
 13285  1DEA  01B2               	clrf	___lldiv@counter
 13286  1DEB  0AB2               	incf	___lldiv@counter,f
 13287  1DEC                     l5655:	
 13288  1DEC  1BA8               	btfsc	___lldiv@divisor+3,7
 13289  1DED  2DFA               	goto	l5657
 13290  1DEE  3001               	movlw	1
 13291  1DEF                     u7225:	
 13292  1DEF  35A5               	lslf	___lldiv@divisor,f
 13293  1DF0  0DA6               	rlf	___lldiv@divisor+1,f
 13294  1DF1  0DA7               	rlf	___lldiv@divisor+2,f
 13295  1DF2  0DA8               	rlf	___lldiv@divisor+3,f
 13296  1DF3  0B89               	decfsz	9,f
 13297  1DF4  2DEF               	goto	u7225
 13298  1DF5  3001               	movlw	1
 13299  1DF6  00AD               	movwf	??___lldiv
 13300  1DF7  082D               	movf	??___lldiv,w
 13301  1DF8  07B2               	addwf	___lldiv@counter,f
 13302  1DF9  2DEC               	goto	l5655
 13303  1DFA                     l5657:	
 13304  1DFA  3001               	movlw	1
 13305  1DFB                     u7245:	
 13306  1DFB  35AE               	lslf	___lldiv@quotient,f
 13307  1DFC  0DAF               	rlf	___lldiv@quotient+1,f
 13308  1DFD  0DB0               	rlf	___lldiv@quotient+2,f
 13309  1DFE  0DB1               	rlf	___lldiv@quotient+3,f
 13310  1DFF  0B89               	decfsz	9,f
 13311  1E00  2DFB               	goto	u7245
 13312  1E01  0828               	movf	___lldiv@divisor+3,w
 13313  1E02  022C               	subwf	___lldiv@dividend+3,w
 13314  1E03  1D03               	skipz
 13315  1E04  2E0F               	goto	u7255
 13316  1E05  0827               	movf	___lldiv@divisor+2,w
 13317  1E06  022B               	subwf	___lldiv@dividend+2,w
 13318  1E07  1D03               	skipz
 13319  1E08  2E0F               	goto	u7255
 13320  1E09  0826               	movf	___lldiv@divisor+1,w
 13321  1E0A  022A               	subwf	___lldiv@dividend+1,w
 13322  1E0B  1D03               	skipz
 13323  1E0C  2E0F               	goto	u7255
 13324  1E0D  0825               	movf	___lldiv@divisor,w
 13325  1E0E  0229               	subwf	___lldiv@dividend,w
 13326  1E0F                     u7255:	
 13327  1E0F  1C03               	skipc
 13328  1E10  2E1A               	goto	l5665
 13329  1E11  0825               	movf	___lldiv@divisor,w
 13330  1E12  02A9               	subwf	___lldiv@dividend,f
 13331  1E13  0826               	movf	___lldiv@divisor+1,w
 13332  1E14  3BAA               	subwfb	___lldiv@dividend+1,f
 13333  1E15  0827               	movf	___lldiv@divisor+2,w
 13334  1E16  3BAB               	subwfb	___lldiv@dividend+2,f
 13335  1E17  0828               	movf	___lldiv@divisor+3,w
 13336  1E18  3BAC               	subwfb	___lldiv@dividend+3,f
 13337  1E19  142E               	bsf	___lldiv@quotient,0
 13338  1E1A                     l5665:	
 13339  1E1A  3001               	movlw	1
 13340  1E1B                     u7265:	
 13341  1E1B  36A8               	lsrf	___lldiv@divisor+3,f
 13342  1E1C  0CA7               	rrf	___lldiv@divisor+2,f
 13343  1E1D  0CA6               	rrf	___lldiv@divisor+1,f
 13344  1E1E  0CA5               	rrf	___lldiv@divisor,f
 13345  1E1F  0B89               	decfsz	9,f
 13346  1E20  2E1B               	goto	u7265
 13347  1E21  3001               	movlw	1
 13348  1E22  02B2               	subwf	___lldiv@counter,f
 13349  1E23  1D03               	btfss	3,2
 13350  1E24  2DFA               	goto	l5657
 13351  1E25                     l5669:	
 13352  1E25  0831               	movf	___lldiv@quotient+3,w
 13353  1E26  00A8               	movwf	?___lldiv+3
 13354  1E27  0830               	movf	___lldiv@quotient+2,w
 13355  1E28  00A7               	movwf	?___lldiv+2
 13356  1E29  082F               	movf	___lldiv@quotient+1,w
 13357  1E2A  00A6               	movwf	?___lldiv+1
 13358  1E2B  082E               	movf	___lldiv@quotient,w
 13359  1E2C  00A5               	movwf	?___lldiv
 13360  1E2D  0008               	return
 13361  1E2E                     __end_of___lldiv:	
 13362                           
 13363                           	psect	text37
 13364  19EE                     __ptext37:	
 13365 ;; *************** function _ReadUSART *****************
 13366 ;; Defined at:
 13367 ;;		line 281 in file "UART.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;		None
 13370 ;; Auto vars:     Size  Location     Type
 13371 ;;  data            1    6[BANK0 ] unsigned char 
 13372 ;; Return value:  Size  Location     Type
 13373 ;;                  1    wreg      unsigned char 
 13374 ;; Registers used:
 13375 ;;		wreg
 13376 ;; Tracked objects:
 13377 ;;		On entry : 0/0
 13378 ;;		On exit  : 0/0
 13379 ;;		Unchanged: 0/0
 13380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;Total ram usage:        2 bytes
 13386 ;; Hardware stack levels used:    1
 13387 ;; Hardware stack levels required when called:    3
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_InitUART
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _ReadUSART
 13397  19EE                     _ReadUSART:	
 13398                           
 13399                           ;UART.c: 283: char data;
 13400                           ;UART.c: 285: if(RCSTAbits.OERR)
 13401                           
 13402                           ;incstack = 0
 13403                           ; Regs used in _ReadUSART: [wreg]
 13404  19EE  0023               	movlb	3	; select bank3
 13405  19EF  189D               	btfsc	29,1	;volatile
 13406                           
 13407                           ;UART.c: 286: {
 13408                           ;UART.c: 287: RCSTAbits.CREN = 0;
 13409  19F0  121D               	bcf	29,4	;volatile
 13410                           
 13411                           ;UART.c: 288: }
 13412                           ;UART.c: 290: data = RCREG;
 13413  19F1  0819               	movf	25,w	;volatile
 13414  19F2  0020               	movlb	0	; select bank0
 13415  19F3  00A5               	movwf	??_ReadUSART
 13416  19F4  0825               	movf	??_ReadUSART,w
 13417  19F5  00A6               	movwf	ReadUSART@data
 13418                           
 13419                           ;UART.c: 292: return (data);
 13420  19F6  0826               	movf	ReadUSART@data,w
 13421  19F7  0008               	return
 13422  19F8                     __end_of_ReadUSART:	
 13423                           
 13424                           	psect	text38
 13425  1C2F                     __ptext38:	
 13426 ;; *************** function _OpenUSART *****************
 13427 ;; Defined at:
 13428 ;;		line 155 in file "UART.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;  config          1    wreg     unsigned char 
 13431 ;;  spbrg           2    5[BANK0 ] unsigned int 
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;  config          1    7[BANK0 ] unsigned char 
 13434 ;; Return value:  Size  Location     Type
 13435 ;;		None               void
 13436 ;; Registers used:
 13437 ;;		wreg, status,2
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13443 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;Total ram usage:        3 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; Hardware stack levels required when called:    3
 13450 ;; This function calls:
 13451 ;;		Nothing
 13452 ;; This function is called by:
 13453 ;;		_InitUART
 13454 ;; This function uses a non-reentrant model
 13455 ;;
 13456                           
 13457                           
 13458                           ;psect for function _OpenUSART
 13459  1C2F                     _OpenUSART:	
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in _OpenUSART: [wreg+status,2]
 13463                           ;OpenUSART@config stored from wreg
 13464  1C2F  0020               	movlb	0	; select bank0
 13465  1C30  00A7               	movwf	OpenUSART@config
 13466                           
 13467                           ;UART.c: 157: TX1STA = 0;
 13468  1C31  0023               	movlb	3	; select bank3
 13469  1C32  019E               	clrf	30	;volatile
 13470                           
 13471                           ;UART.c: 158: RC1STA = 0;
 13472  1C33  019D               	clrf	29	;volatile
 13473                           
 13474                           ;UART.c: 160: if(config&0x01)
 13475  1C34  0020               	movlb	0	; select bank0
 13476  1C35  1C27               	btfss	OpenUSART@config,0
 13477  1C36  2C39               	goto	l5537
 13478                           
 13479                           ;UART.c: 161: {
 13480                           ;UART.c: 162: TX1STAbits.SYNC = 1;
 13481  1C37  0023               	movlb	3	; select bank3
 13482  1C38  161E               	bsf	30,4	;volatile
 13483  1C39                     l5537:	
 13484                           
 13485                           ;UART.c: 163: }
 13486                           ;UART.c: 165: if(config&0x02)
 13487  1C39  0020               	movlb	0	; select bank0
 13488  1C3A  1CA7               	btfss	OpenUSART@config,1
 13489  1C3B  2C3F               	goto	l5541
 13490                           
 13491                           ;UART.c: 166: {
 13492                           ;UART.c: 167: TX1STAbits.TX9 = 1;
 13493  1C3C  0023               	movlb	3	; select bank3
 13494  1C3D  171E               	bsf	30,6	;volatile
 13495                           
 13496                           ;UART.c: 168: RC1STAbits.RX9 = 1;
 13497  1C3E  171D               	bsf	29,6	;volatile
 13498  1C3F                     l5541:	
 13499                           
 13500                           ;UART.c: 169: }
 13501                           ;UART.c: 171: if(config&0x04)
 13502  1C3F  0020               	movlb	0	; select bank0
 13503  1C40  1D27               	btfss	OpenUSART@config,2
 13504  1C41  2C44               	goto	l5545
 13505                           
 13506                           ;UART.c: 172: {
 13507                           ;UART.c: 173: TX1STAbits.CSRC = 1;
 13508  1C42  0023               	movlb	3	; select bank3
 13509  1C43  179E               	bsf	30,7	;volatile
 13510  1C44                     l5545:	
 13511                           
 13512                           ;UART.c: 174: }
 13513                           ;UART.c: 176: if(config&0x08)
 13514  1C44  0020               	movlb	0	; select bank0
 13515  1C45  1DA7               	btfss	OpenUSART@config,3
 13516  1C46  2C4A               	goto	l370
 13517                           
 13518                           ;UART.c: 177: {
 13519                           ;UART.c: 178: RC1STAbits.CREN = 1;
 13520  1C47  0023               	movlb	3	; select bank3
 13521  1C48  161D               	bsf	29,4	;volatile
 13522                           
 13523                           ;UART.c: 179: }
 13524  1C49  2C4C               	goto	l5549
 13525  1C4A                     l370:	
 13526                           
 13527                           ;UART.c: 180: else
 13528                           ;UART.c: 181: {
 13529                           ;UART.c: 182: RC1STAbits.SREN = 1;
 13530  1C4A  0023               	movlb	3	; select bank3
 13531  1C4B  169D               	bsf	29,5	;volatile
 13532  1C4C                     l5549:	
 13533                           
 13534                           ;UART.c: 183: }
 13535                           ;UART.c: 185: if(config&0x10)
 13536  1C4C  0020               	movlb	0	; select bank0
 13537  1C4D  1E27               	btfss	OpenUSART@config,4
 13538  1C4E  2C51               	goto	l5555
 13539                           
 13540                           ;UART.c: 186: {
 13541                           ;UART.c: 187: TX1STAbits.BRGH = 1;
 13542  1C4F  0023               	movlb	3	; select bank3
 13543  1C50  151E               	bsf	30,2	;volatile
 13544  1C51                     l5555:	
 13545                           ;UART.c: 191: {
 13546                           
 13547                           
 13548                           ;UART.c: 193: }
 13549                           ;UART.c: 195: if(config&0x40)
 13550  1C51  0020               	movlb	0	; select bank0
 13551  1C52  1F27               	btfss	OpenUSART@config,6
 13552  1C53  2C58               	goto	l374
 13553                           
 13554                           ;UART.c: 196: {
 13555                           ;UART.c: 197: PIR1bits.RCIF = 0;
 13556  1C54  1291               	bcf	17,5	;volatile
 13557                           
 13558                           ;UART.c: 198: PIE1bits.RCIE = 1;
 13559  1C55  0021               	movlb	1	; select bank1
 13560  1C56  1691               	bsf	17,5	;volatile
 13561                           
 13562                           ;UART.c: 199: }
 13563  1C57  2C5A               	goto	l5559
 13564  1C58                     l374:	
 13565                           
 13566                           ;UART.c: 200: else
 13567                           ;UART.c: 201: {
 13568                           ;UART.c: 202: PIE1bits.RCIE = 0;
 13569  1C58  0021               	movlb	1	; select bank1
 13570  1C59  1291               	bcf	17,5	;volatile
 13571  1C5A                     l5559:	
 13572                           
 13573                           ;UART.c: 203: }
 13574                           ;UART.c: 205: if(config&0x80)
 13575  1C5A  0020               	movlb	0	; select bank0
 13576  1C5B  1FA7               	btfss	OpenUSART@config,7
 13577  1C5C  2C61               	goto	l376
 13578                           
 13579                           ;UART.c: 206: {
 13580                           ;UART.c: 207: PIR1bits.TXIF = 0;
 13581  1C5D  1211               	bcf	17,4	;volatile
 13582                           
 13583                           ;UART.c: 208: PIE1bits.TXIE = 1;
 13584  1C5E  0021               	movlb	1	; select bank1
 13585  1C5F  1611               	bsf	17,4	;volatile
 13586                           
 13587                           ;UART.c: 209: }
 13588  1C60  2C63               	goto	l5563
 13589  1C61                     l376:	
 13590                           
 13591                           ;UART.c: 210: else
 13592                           ;UART.c: 211: {
 13593                           ;UART.c: 212: PIE1bits.TXIE = 0;
 13594  1C61  0021               	movlb	1	; select bank1
 13595  1C62  1211               	bcf	17,4	;volatile
 13596  1C63                     l5563:	
 13597                           
 13598                           ;UART.c: 213: }
 13599                           ;UART.c: 215: SPBRG = spbrg;
 13600  1C63  0020               	movlb	0	; select bank0
 13601  1C64  0825               	movf	OpenUSART@spbrg,w
 13602  1C65  0023               	movlb	3	; select bank3
 13603  1C66  009B               	movwf	27	;volatile
 13604                           
 13605                           ;UART.c: 216: SPBRGH = spbrg >> 8;
 13606  1C67  0020               	movlb	0	; select bank0
 13607  1C68  0826               	movf	OpenUSART@spbrg+1,w
 13608  1C69  0023               	movlb	3	; select bank3
 13609  1C6A  009C               	movwf	28	;volatile
 13610                           
 13611                           ;UART.c: 218: TX1STAbits.TXEN = 1;
 13612  1C6B  169E               	bsf	30,5	;volatile
 13613                           
 13614                           ;UART.c: 219: RC1STAbits.SPEN = 1;
 13615  1C6C  179D               	bsf	29,7	;volatile
 13616  1C6D  0008               	return
 13617  1C6E                     __end_of_OpenUSART:	
 13618                           
 13619                           	psect	text39
 13620  1A31                     __ptext39:	
 13621 ;; *************** function _CloseUSART *****************
 13622 ;; Defined at:
 13623 ;;		line 60 in file "UART.c"
 13624 ;; Parameters:    Size  Location     Type
 13625 ;;		None
 13626 ;; Auto vars:     Size  Location     Type
 13627 ;;		None
 13628 ;; Return value:  Size  Location     Type
 13629 ;;		None               void
 13630 ;; Registers used:
 13631 ;;		wreg, status,2, status,0
 13632 ;; Tracked objects:
 13633 ;;		On entry : 0/0
 13634 ;;		On exit  : 0/0
 13635 ;;		Unchanged: 0/0
 13636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;Total ram usage:        1 bytes
 13642 ;; Hardware stack levels used:    1
 13643 ;; Hardware stack levels required when called:    3
 13644 ;; This function calls:
 13645 ;;		Nothing
 13646 ;; This function is called by:
 13647 ;;		_InitUART
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           
 13652                           ;psect for function _CloseUSART
 13653  1A31                     _CloseUSART:	
 13654                           
 13655                           ;UART.c: 62: RCSTA&=0b01001111;
 13656                           
 13657                           ;incstack = 0
 13658                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
 13659  1A31  304F               	movlw	79
 13660  1A32  0020               	movlb	0	; select bank0
 13661  1A33  00A5               	movwf	??_CloseUSART
 13662  1A34  0825               	movf	??_CloseUSART,w
 13663  1A35  0023               	movlb	3	; select bank3
 13664  1A36  059D               	andwf	29,f	;volatile
 13665                           
 13666                           ;UART.c: 63: TX1STAbits.TXEN=0;
 13667  1A37  129E               	bcf	30,5	;volatile
 13668                           
 13669                           ;UART.c: 64: PIE1&=0b11001111;
 13670  1A38  30CF               	movlw	207
 13671  1A39  0020               	movlb	0	; select bank0
 13672  1A3A  00A5               	movwf	??_CloseUSART
 13673  1A3B  0825               	movf	??_CloseUSART,w
 13674  1A3C  0021               	movlb	1	; select bank1
 13675  1A3D  0591               	andwf	17,f	;volatile
 13676  1A3E  0008               	return
 13677  1A3F                     __end_of_CloseUSART:	
 13678                           
 13679                           	psect	text40
 13680  13AC                     __ptext40:	
 13681 ;; *************** function _Init_PS_2_Send *****************
 13682 ;; Defined at:
 13683 ;;		line 1040 in file "PS_2.c"
 13684 ;; Parameters:    Size  Location     Type
 13685 ;;		None
 13686 ;; Auto vars:     Size  Location     Type
 13687 ;;		None
 13688 ;; Return value:  Size  Location     Type
 13689 ;;                  1    wreg      unsigned char 
 13690 ;; Registers used:
 13691 ;;		wreg, status,2, status,0, pclath, cstack
 13692 ;; Tracked objects:
 13693 ;;		On entry : 0/0
 13694 ;;		On exit  : 0/0
 13695 ;;		Unchanged: 0/0
 13696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;Total ram usage:        0 bytes
 13702 ;; Hardware stack levels used:    1
 13703 ;; Hardware stack levels required when called:    5
 13704 ;; This function calls:
 13705 ;;		_PS_2_DISABLE_INTERRUPT
 13706 ;;		_PS_2_ENABLE_INTERRUPT
 13707 ;;		_Send_PS2
 13708 ;;		_delayUS
 13709 ;; This function is called by:
 13710 ;;		_main
 13711 ;; This function uses a non-reentrant model
 13712 ;;
 13713                           
 13714                           
 13715                           ;psect for function _Init_PS_2_Send
 13716  13AC                     _Init_PS_2_Send:	
 13717                           
 13718                           ;PS_2.c: 1042: PS_2_DISABLE_INTERRUPT(0b00100000);
 13719                           
 13720                           ;incstack = 0
 13721                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
 13722  13AC  3020               	movlw	32
 13723  13AD  319A  22F6  3193   	fcall	_PS_2_DISABLE_INTERRUPT
 13724                           
 13725                           ;PS_2.c: 1045: if(Send_PS2(0xED))
 13726  13B0  30ED               	movlw	237
 13727  13B1  318C  24A9  3193   	fcall	_Send_PS2
 13728  13B4  3A00               	xorlw	0
 13729  13B5  1903               	skipnz
 13730  13B6  2BB9               	goto	l6985
 13731                           
 13732                           ;PS_2.c: 1046: {
 13733                           ;PS_2.c: 1047: return 0;
 13734  13B7  3000               	movlw	0
 13735  13B8  0008               	return
 13736  13B9                     l6985:	
 13737                           
 13738                           ;PS_2.c: 1048: }
 13739                           ;PS_2.c: 1049: delayUS(100);
 13740  13B9  3000               	movlw	0
 13741  13BA  0020               	movlb	0	; select bank0
 13742  13BB  00A8               	movwf	delayUS@US+3
 13743  13BC  3000               	movlw	0
 13744  13BD  00A7               	movwf	delayUS@US+2
 13745  13BE  3000               	movlw	0
 13746  13BF  00A6               	movwf	delayUS@US+1
 13747  13C0  3064               	movlw	100
 13748  13C1  00A5               	movwf	delayUS@US
 13749  13C2  3187  27C8  3193   	fcall	_delayUS
 13750                           
 13751                           ;PS_2.c: 1050: if(Send_PS2(0x01))
 13752  13C5  3001               	movlw	1
 13753  13C6  318C  24A9  3193   	fcall	_Send_PS2
 13754  13C9  3A00               	xorlw	0
 13755  13CA  1903               	skipnz
 13756  13CB  2BCE               	goto	l6991
 13757                           
 13758                           ;PS_2.c: 1051: {
 13759                           ;PS_2.c: 1052: return 0;
 13760  13CC  3000               	movlw	0
 13761  13CD  0008               	return
 13762  13CE                     l6991:	
 13763                           
 13764                           ;PS_2.c: 1053: }
 13765                           ;PS_2.c: 1054: delayUS(5000);
 13766  13CE  3000               	movlw	0
 13767  13CF  0020               	movlb	0	; select bank0
 13768  13D0  00A8               	movwf	delayUS@US+3
 13769  13D1  3000               	movlw	0
 13770  13D2  00A7               	movwf	delayUS@US+2
 13771  13D3  3013               	movlw	19
 13772  13D4  00A6               	movwf	delayUS@US+1
 13773  13D5  3088               	movlw	136
 13774  13D6  00A5               	movwf	delayUS@US
 13775  13D7  3187  27C8  3193   	fcall	_delayUS
 13776                           
 13777                           ;PS_2.c: 1057: if(Send_PS2(0xED))
 13778  13DA  30ED               	movlw	237
 13779  13DB  318C  24A9  3193   	fcall	_Send_PS2
 13780  13DE  3A00               	xorlw	0
 13781  13DF  1903               	skipnz
 13782  13E0  2BE3               	goto	l6997
 13783                           
 13784                           ;PS_2.c: 1058: {
 13785                           ;PS_2.c: 1059: return 0;
 13786  13E1  3000               	movlw	0
 13787  13E2  0008               	return
 13788  13E3                     l6997:	
 13789                           
 13790                           ;PS_2.c: 1060: }
 13791                           ;PS_2.c: 1061: delayUS(100);
 13792  13E3  3000               	movlw	0
 13793  13E4  0020               	movlb	0	; select bank0
 13794  13E5  00A8               	movwf	delayUS@US+3
 13795  13E6  3000               	movlw	0
 13796  13E7  00A7               	movwf	delayUS@US+2
 13797  13E8  3000               	movlw	0
 13798  13E9  00A6               	movwf	delayUS@US+1
 13799  13EA  3064               	movlw	100
 13800  13EB  00A5               	movwf	delayUS@US
 13801  13EC  3187  27C8  3193   	fcall	_delayUS
 13802                           
 13803                           ;PS_2.c: 1062: if(Send_PS2(0x04))
 13804  13EF  3004               	movlw	4
 13805  13F0  318C  24A9  3193   	fcall	_Send_PS2
 13806  13F3  3A00               	xorlw	0
 13807  13F4  1903               	skipnz
 13808  13F5  2BF8               	goto	l7003
 13809                           
 13810                           ;PS_2.c: 1063: {
 13811                           ;PS_2.c: 1064: return 0;
 13812  13F6  3000               	movlw	0
 13813  13F7  0008               	return
 13814  13F8                     l7003:	
 13815                           
 13816                           ;PS_2.c: 1065: }
 13817                           ;PS_2.c: 1066: delayUS(5000);
 13818  13F8  3000               	movlw	0
 13819  13F9  0020               	movlb	0	; select bank0
 13820  13FA  00A8               	movwf	delayUS@US+3
 13821  13FB  3000               	movlw	0
 13822  13FC  00A7               	movwf	delayUS@US+2
 13823  13FD  3013               	movlw	19
 13824  13FE  00A6               	movwf	delayUS@US+1
 13825  13FF  3088               	movlw	136
 13826  1400  00A5               	movwf	delayUS@US
 13827  1401  3187  27C8  3193   	fcall	_delayUS
 13828                           
 13829                           ;PS_2.c: 1069: if(Send_PS2(0xED))
 13830  1404  30ED               	movlw	237
 13831  1405  318C  24A9  3193   	fcall	_Send_PS2
 13832  1408  3A00               	xorlw	0
 13833  1409  1903               	skipnz
 13834  140A  2C0D               	goto	l7009
 13835                           
 13836                           ;PS_2.c: 1070: {
 13837                           ;PS_2.c: 1071: return 0;
 13838  140B  3000               	movlw	0
 13839  140C  0008               	return
 13840  140D                     l7009:	
 13841                           
 13842                           ;PS_2.c: 1072: }
 13843                           ;PS_2.c: 1073: delayUS(1000);
 13844  140D  3000               	movlw	0
 13845  140E  0020               	movlb	0	; select bank0
 13846  140F  00A8               	movwf	delayUS@US+3
 13847  1410  3000               	movlw	0
 13848  1411  00A7               	movwf	delayUS@US+2
 13849  1412  3003               	movlw	3
 13850  1413  00A6               	movwf	delayUS@US+1
 13851  1414  30E8               	movlw	232
 13852  1415  00A5               	movwf	delayUS@US
 13853  1416  3187  27C8  3193   	fcall	_delayUS
 13854                           
 13855                           ;PS_2.c: 1074: if(Send_PS2(0x02))
 13856  1419  3002               	movlw	2
 13857  141A  318C  24A9  3193   	fcall	_Send_PS2
 13858  141D  3A00               	xorlw	0
 13859  141E  1903               	skipnz
 13860  141F  2C22               	goto	l7015
 13861                           
 13862                           ;PS_2.c: 1075: {
 13863                           ;PS_2.c: 1076: return 0;
 13864  1420  3000               	movlw	0
 13865  1421  0008               	return
 13866  1422                     l7015:	
 13867                           
 13868                           ;PS_2.c: 1077: }
 13869                           ;PS_2.c: 1078: delayUS(5000);
 13870  1422  3000               	movlw	0
 13871  1423  0020               	movlb	0	; select bank0
 13872  1424  00A8               	movwf	delayUS@US+3
 13873  1425  3000               	movlw	0
 13874  1426  00A7               	movwf	delayUS@US+2
 13875  1427  3013               	movlw	19
 13876  1428  00A6               	movwf	delayUS@US+1
 13877  1429  3088               	movlw	136
 13878  142A  00A5               	movwf	delayUS@US
 13879  142B  3187  27C8  3193   	fcall	_delayUS
 13880                           
 13881                           ;PS_2.c: 1081: if(Send_PS2(0xED))
 13882  142E  30ED               	movlw	237
 13883  142F  318C  24A9  3193   	fcall	_Send_PS2
 13884  1432  3A00               	xorlw	0
 13885  1433  1903               	skipnz
 13886  1434  2C37               	goto	l7021
 13887                           
 13888                           ;PS_2.c: 1082: {
 13889                           ;PS_2.c: 1083: return 0;
 13890  1435  3000               	movlw	0
 13891  1436  0008               	return
 13892  1437                     l7021:	
 13893                           
 13894                           ;PS_2.c: 1084: }
 13895                           ;PS_2.c: 1085: delayUS(100);
 13896  1437  3000               	movlw	0
 13897  1438  0020               	movlb	0	; select bank0
 13898  1439  00A8               	movwf	delayUS@US+3
 13899  143A  3000               	movlw	0
 13900  143B  00A7               	movwf	delayUS@US+2
 13901  143C  3000               	movlw	0
 13902  143D  00A6               	movwf	delayUS@US+1
 13903  143E  3064               	movlw	100
 13904  143F  00A5               	movwf	delayUS@US
 13905  1440  3187  27C8  3193   	fcall	_delayUS
 13906                           
 13907                           ;PS_2.c: 1086: if(Send_PS2(0x00))
 13908  1443  3000               	movlw	0
 13909  1444  318C  24A9  3193   	fcall	_Send_PS2
 13910  1447  3A00               	xorlw	0
 13911  1448  1903               	skipnz
 13912  1449  2C4C               	goto	l7027
 13913                           
 13914                           ;PS_2.c: 1087: {
 13915                           ;PS_2.c: 1088: return 0;
 13916  144A  3000               	movlw	0
 13917  144B  0008               	return
 13918  144C                     l7027:	
 13919                           
 13920                           ;PS_2.c: 1089: }
 13921                           ;PS_2.c: 1092: if(Send_PS2(0xf4))
 13922  144C  30F4               	movlw	244
 13923  144D  318C  24A9  3193   	fcall	_Send_PS2
 13924  1450  3A00               	xorlw	0
 13925  1451  1903               	skipnz
 13926  1452  2C55               	goto	l7033
 13927                           
 13928                           ;PS_2.c: 1093: {
 13929                           ;PS_2.c: 1094: return 0;
 13930  1453  3000               	movlw	0
 13931  1454  0008               	return
 13932  1455                     l7033:	
 13933                           
 13934                           ;PS_2.c: 1095: }
 13935                           ;PS_2.c: 1098: if(Send_PS2(0xf4))
 13936  1455  30F4               	movlw	244
 13937  1456  318C  24A9  3193   	fcall	_Send_PS2
 13938  1459  3A00               	xorlw	0
 13939  145A  1903               	skipnz
 13940  145B  2C5E               	goto	l7039
 13941                           
 13942                           ;PS_2.c: 1099: {
 13943                           ;PS_2.c: 1100: return 0;
 13944  145C  3000               	movlw	0
 13945  145D  0008               	return
 13946  145E                     l7039:	
 13947                           
 13948                           ;PS_2.c: 1101: }
 13949                           ;PS_2.c: 1104: if(Send_PS2(0xf0))
 13950  145E  30F0               	movlw	240
 13951  145F  318C  24A9  3193   	fcall	_Send_PS2
 13952  1462  3A00               	xorlw	0
 13953  1463  1903               	skipnz
 13954  1464  2C67               	goto	l7045
 13955                           
 13956                           ;PS_2.c: 1105: {
 13957                           ;PS_2.c: 1106: return 0;
 13958  1465  3000               	movlw	0
 13959  1466  0008               	return
 13960  1467                     l7045:	
 13961                           
 13962                           ;PS_2.c: 1107: }
 13963                           ;PS_2.c: 1108: delayUS(100);
 13964  1467  3000               	movlw	0
 13965  1468  0020               	movlb	0	; select bank0
 13966  1469  00A8               	movwf	delayUS@US+3
 13967  146A  3000               	movlw	0
 13968  146B  00A7               	movwf	delayUS@US+2
 13969  146C  3000               	movlw	0
 13970  146D  00A6               	movwf	delayUS@US+1
 13971  146E  3064               	movlw	100
 13972  146F  00A5               	movwf	delayUS@US
 13973  1470  3187  27C8  3193   	fcall	_delayUS
 13974                           
 13975                           ;PS_2.c: 1109: if(Send_PS2(0x02))
 13976  1473  3002               	movlw	2
 13977  1474  318C  24A9  3193   	fcall	_Send_PS2
 13978  1477  3A00               	xorlw	0
 13979  1478  1903               	skipnz
 13980  1479  2C7C               	goto	l7051
 13981                           
 13982                           ;PS_2.c: 1110: {
 13983                           ;PS_2.c: 1111: return 0;
 13984  147A  3000               	movlw	0
 13985  147B  0008               	return
 13986  147C                     l7051:	
 13987                           
 13988                           ;PS_2.c: 1112: }
 13989                           ;PS_2.c: 1115: if(Send_PS2(0xf3))
 13990  147C  30F3               	movlw	243
 13991  147D  318C  24A9  3193   	fcall	_Send_PS2
 13992  1480  3A00               	xorlw	0
 13993  1481  1903               	skipnz
 13994  1482  2C85               	goto	l7057
 13995                           
 13996                           ;PS_2.c: 1116: {
 13997                           ;PS_2.c: 1117: return 0;
 13998  1483  3000               	movlw	0
 13999  1484  0008               	return
 14000  1485                     l7057:	
 14001                           
 14002                           ;PS_2.c: 1118: }
 14003                           ;PS_2.c: 1119: delayUS(100);
 14004  1485  3000               	movlw	0
 14005  1486  0020               	movlb	0	; select bank0
 14006  1487  00A8               	movwf	delayUS@US+3
 14007  1488  3000               	movlw	0
 14008  1489  00A7               	movwf	delayUS@US+2
 14009  148A  3000               	movlw	0
 14010  148B  00A6               	movwf	delayUS@US+1
 14011  148C  3064               	movlw	100
 14012  148D  00A5               	movwf	delayUS@US
 14013  148E  3187  27C8  3193   	fcall	_delayUS
 14014                           
 14015                           ;PS_2.c: 1120: if(Send_PS2(0x2F))
 14016  1491  302F               	movlw	47
 14017  1492  318C  24A9  3193   	fcall	_Send_PS2
 14018  1495  3A00               	xorlw	0
 14019  1496  1903               	skipnz
 14020  1497  2C9A               	goto	l7063
 14021                           
 14022                           ;PS_2.c: 1121: {
 14023                           ;PS_2.c: 1122: return 0;
 14024  1498  3000               	movlw	0
 14025  1499  0008               	return
 14026  149A                     l7063:	
 14027                           
 14028                           ;PS_2.c: 1123: }
 14029                           ;PS_2.c: 1125: PS_2_ENABLE_INTERRUPT(0b00100000);
 14030  149A  3020               	movlw	32
 14031  149B  318B  23C2         	fcall	_PS_2_ENABLE_INTERRUPT
 14032                           
 14033                           ;PS_2.c: 1126: return 1;
 14034  149D  3001               	movlw	1
 14035  149E  0008               	return
 14036  149F                     __end_of_Init_PS_2_Send:	
 14037                           
 14038                           	psect	text41
 14039  0CA9                     __ptext41:	
 14040 ;; *************** function _Send_PS2 *****************
 14041 ;; Defined at:
 14042 ;;		line 880 in file "PS_2.c"
 14043 ;; Parameters:    Size  Location     Type
 14044 ;;  command         1    wreg     unsigned char 
 14045 ;; Auto vars:     Size  Location     Type
 14046 ;;  command         1   20[BANK0 ] unsigned char 
 14047 ;;  timeout         2   22[BANK0 ] unsigned int 
 14048 ;;  i               1   21[BANK0 ] unsigned char 
 14049 ;;  oddparity       1   19[BANK0 ] unsigned char 
 14050 ;; Return value:  Size  Location     Type
 14051 ;;                  1    wreg      unsigned char 
 14052 ;; Registers used:
 14053 ;;		wreg, status,2, status,0, pclath, cstack
 14054 ;; Tracked objects:
 14055 ;;		On entry : 0/0
 14056 ;;		On exit  : 0/0
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;Total ram usage:        9 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    4
 14066 ;; This function calls:
 14067 ;;		_CheckSum_byte
 14068 ;;		_Clock_TRIS
 14069 ;;		_Data_TRIS
 14070 ;;		_PS_2_ENABLE_INTERRUPT
 14071 ;;		_READ_PS_2_PIN
 14072 ;;		_delayUS
 14073 ;; This function is called by:
 14074 ;;		_PS_2_Update
 14075 ;;		_Init_PS_2_Send
 14076 ;;		_Keyboard_Connected
 14077 ;; This function uses a non-reentrant model
 14078 ;;
 14079                           
 14080                           
 14081                           ;psect for function _Send_PS2
 14082  0CA9                     _Send_PS2:	
 14083                           
 14084                           ;incstack = 0
 14085                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 14086                           ;Send_PS2@command stored from wreg
 14087  0CA9  0020               	movlb	0	; select bank0
 14088  0CAA  00B4               	movwf	Send_PS2@command
 14089                           
 14090                           ;PS_2.c: 882: unsigned char i=0;
 14091  0CAB  01B5               	clrf	Send_PS2@i
 14092                           
 14093                           ;PS_2.c: 883: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 14094  0CAC  0834               	movf	Send_PS2@command,w
 14095  0CAD  00AF               	movwf	??_Send_PS2
 14096  0CAE  01B0               	clrf	??_Send_PS2+1
 14097  0CAF  082F               	movf	??_Send_PS2,w
 14098  0CB0  00A5               	movwf	CheckSum_byte@This
 14099  0CB1  0830               	movf	??_Send_PS2+1,w
 14100  0CB2  00A6               	movwf	CheckSum_byte@This+1
 14101  0CB3  3003               	movlw	3
 14102  0CB4  00B1               	movwf	??_Send_PS2+2
 14103  0CB5  0831               	movf	??_Send_PS2+2,w
 14104  0CB6  00A7               	movwf	CheckSum_byte@Odd_Even
 14105  0CB7  319B  2368  318C   	fcall	_CheckSum_byte
 14106  0CBA  0020               	movlb	0	; select bank0
 14107  0CBB  00B2               	movwf	??_Send_PS2+3
 14108  0CBC  0832               	movf	??_Send_PS2+3,w
 14109  0CBD  00B3               	movwf	Send_PS2@oddparity
 14110                           
 14111                           ;PS_2.c: 884: unsigned int timeout =0;
 14112  0CBE  01B6               	clrf	Send_PS2@timeout
 14113  0CBF  01B7               	clrf	Send_PS2@timeout+1
 14114                           
 14115                           ;PS_2.c: 886: Clock_TRIS(0);
 14116  0CC0  3000               	movlw	0
 14117  0CC1  3199  21F8  318C   	fcall	_Clock_TRIS
 14118                           
 14119                           ;PS_2.c: 887: Data_TRIS(0);
 14120  0CC4  3000               	movlw	0
 14121  0CC5  319A  2203  318C   	fcall	_Data_TRIS
 14122                           
 14123                           ;PS_2.c: 888: LATA &= ~0b00100000;
 14124  0CC8  30DF               	movlw	223
 14125  0CC9  0020               	movlb	0	; select bank0
 14126  0CCA  00AF               	movwf	??_Send_PS2
 14127  0CCB  082F               	movf	??_Send_PS2,w
 14128  0CCC  0022               	movlb	2	; select bank2
 14129  0CCD  058C               	andwf	12,f	;volatile
 14130                           
 14131                           ;PS_2.c: 889: delayUS(300);
 14132  0CCE  3000               	movlw	0
 14133  0CCF  0020               	movlb	0	; select bank0
 14134  0CD0  00A8               	movwf	delayUS@US+3
 14135  0CD1  3000               	movlw	0
 14136  0CD2  00A7               	movwf	delayUS@US+2
 14137  0CD3  3001               	movlw	1
 14138  0CD4  00A6               	movwf	delayUS@US+1
 14139  0CD5  302C               	movlw	44
 14140  0CD6  00A5               	movwf	delayUS@US
 14141  0CD7  3187  27C8  318C   	fcall	_delayUS
 14142                           
 14143                           ;PS_2.c: 890: LATA &= ~0b00010000;
 14144  0CDA  30EF               	movlw	239
 14145  0CDB  0020               	movlb	0	; select bank0
 14146  0CDC  00AF               	movwf	??_Send_PS2
 14147  0CDD  082F               	movf	??_Send_PS2,w
 14148  0CDE  0022               	movlb	2	; select bank2
 14149  0CDF  058C               	andwf	12,f	;volatile
 14150                           
 14151                           ;PS_2.c: 891: delayUS(20);
 14152  0CE0  3000               	movlw	0
 14153  0CE1  0020               	movlb	0	; select bank0
 14154  0CE2  00A8               	movwf	delayUS@US+3
 14155  0CE3  3000               	movlw	0
 14156  0CE4  00A7               	movwf	delayUS@US+2
 14157  0CE5  3000               	movlw	0
 14158  0CE6  00A6               	movwf	delayUS@US+1
 14159  0CE7  3014               	movlw	20
 14160  0CE8  00A5               	movwf	delayUS@US
 14161  0CE9  3187  27C8  318C   	fcall	_delayUS
 14162                           
 14163                           ;PS_2.c: 892: Clock_TRIS(1);
 14164  0CEC  3001               	movlw	1
 14165  0CED  3199  21F8  318C   	fcall	_Clock_TRIS
 14166                           
 14167                           ;PS_2.c: 893: timeout=0;
 14168  0CF0  0020               	movlb	0	; select bank0
 14169  0CF1  01B6               	clrf	Send_PS2@timeout
 14170  0CF2  01B7               	clrf	Send_PS2@timeout+1
 14171  0CF3                     l6027:	
 14172                           ;PS_2.c: 894: while(READ_PS_2_PIN(0b00100000))
 14173                           
 14174  0CF3  3020               	movlw	32
 14175  0CF4  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14176  0CF7  3800               	iorlw	0
 14177  0CF8  1903               	btfsc	3,2
 14178  0CF9  2D10               	goto	l6029
 14179                           
 14180                           ;PS_2.c: 895: {
 14181                           ;PS_2.c: 896: __nop();
 14182  0CFA  0000               	nop
 14183                           
 14184                           ;PS_2.c: 897: timeout++;
 14185  0CFB  3001               	movlw	1
 14186  0CFC  0020               	movlb	0	; select bank0
 14187  0CFD  07B6               	addwf	Send_PS2@timeout,f
 14188  0CFE  3000               	movlw	0
 14189  0CFF  3DB7               	addwfc	Send_PS2@timeout+1,f
 14190                           
 14191                           ;PS_2.c: 898: if(timeout > 15000)
 14192  0D00  303A               	movlw	58
 14193  0D01  0237               	subwf	Send_PS2@timeout+1,w
 14194  0D02  3099               	movlw	153
 14195  0D03  1903               	skipnz
 14196  0D04  0236               	subwf	Send_PS2@timeout,w
 14197  0D05  1C03               	skipc
 14198  0D06  2CF3               	goto	l6027
 14199                           
 14200                           ;PS_2.c: 899: {
 14201                           ;PS_2.c: 900: Clock_TRIS(1);
 14202  0D07  3001               	movlw	1
 14203  0D08  3199  21F8  318C   	fcall	_Clock_TRIS
 14204                           
 14205                           ;PS_2.c: 901: Data_TRIS(1);
 14206  0D0B  3001               	movlw	1
 14207  0D0C  319A  2203         	fcall	_Data_TRIS
 14208                           
 14209                           ;PS_2.c: 902: return 1;
 14210  0D0E  3001               	movlw	1
 14211  0D0F  0008               	return
 14212  0D10                     l6029:	
 14213                           
 14214                           ;PS_2.c: 903: }
 14215                           ;PS_2.c: 904: }
 14216                           ;PS_2.c: 905: for(i=0;i<8;i++)
 14217  0D10  0020               	movlb	0	; select bank0
 14218  0D11  01B5               	clrf	Send_PS2@i
 14219  0D12  3008               	movlw	8
 14220  0D13  0235               	subwf	Send_PS2@i,w
 14221  0D14  1803               	btfsc	3,0
 14222  0D15  2D6C               	goto	l803
 14223  0D16                     l802:	
 14224                           
 14225                           ;PS_2.c: 906: {
 14226                           ;PS_2.c: 907: if(command & 0x1)
 14227  0D16  1C34               	btfss	Send_PS2@command,0
 14228  0D17  2D1B               	goto	l6037
 14229                           
 14230                           ;PS_2.c: 908: {
 14231                           ;PS_2.c: 909: LATA |= 0b00010000;
 14232  0D18  0022               	movlb	2	; select bank2
 14233  0D19  160C               	bsf	12,4	;volatile
 14234                           
 14235                           ;PS_2.c: 910: }
 14236  0D1A  2D21               	goto	l6039
 14237  0D1B                     l6037:	
 14238                           
 14239                           ;PS_2.c: 911: else
 14240                           ;PS_2.c: 912: {
 14241                           ;PS_2.c: 913: LATA &= ~0b00010000;
 14242  0D1B  30EF               	movlw	239
 14243  0D1C  0020               	movlb	0	; select bank0
 14244  0D1D  00AF               	movwf	??_Send_PS2
 14245  0D1E  082F               	movf	??_Send_PS2,w
 14246  0D1F  0022               	movlb	2	; select bank2
 14247  0D20  058C               	andwf	12,f	;volatile
 14248  0D21                     l6039:	
 14249                           
 14250                           ;PS_2.c: 914: }
 14251                           ;PS_2.c: 915: command >> = 1;
 14252  0D21  1003               	clrc
 14253  0D22  0020               	movlb	0	; select bank0
 14254  0D23  0CB4               	rrf	Send_PS2@command,f
 14255                           
 14256                           ;PS_2.c: 916: timeout=0;
 14257  0D24  01B6               	clrf	Send_PS2@timeout
 14258  0D25  01B7               	clrf	Send_PS2@timeout+1
 14259  0D26                     l6051:	
 14260                           ;PS_2.c: 917: while(!READ_PS_2_PIN(0b00100000))
 14261                           
 14262  0D26  3020               	movlw	32
 14263  0D27  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14264  0D2A  3A00               	xorlw	0
 14265  0D2B  1D03               	btfss	3,2
 14266  0D2C  2D43               	goto	l6053
 14267                           
 14268                           ;PS_2.c: 918: {
 14269                           ;PS_2.c: 919: __nop();
 14270  0D2D  0000               	nop
 14271                           
 14272                           ;PS_2.c: 920: timeout++;
 14273  0D2E  3001               	movlw	1
 14274  0D2F  0020               	movlb	0	; select bank0
 14275  0D30  07B6               	addwf	Send_PS2@timeout,f
 14276  0D31  3000               	movlw	0
 14277  0D32  3DB7               	addwfc	Send_PS2@timeout+1,f
 14278                           
 14279                           ;PS_2.c: 921: if(timeout > 15000)
 14280  0D33  303A               	movlw	58
 14281  0D34  0237               	subwf	Send_PS2@timeout+1,w
 14282  0D35  3099               	movlw	153
 14283  0D36  1903               	skipnz
 14284  0D37  0236               	subwf	Send_PS2@timeout,w
 14285  0D38  1C03               	skipc
 14286  0D39  2D26               	goto	l6051
 14287                           
 14288                           ;PS_2.c: 922: {
 14289                           ;PS_2.c: 923: Clock_TRIS(1);
 14290  0D3A  3001               	movlw	1
 14291  0D3B  3199  21F8  318C   	fcall	_Clock_TRIS
 14292                           
 14293                           ;PS_2.c: 924: Data_TRIS(1);
 14294  0D3E  3001               	movlw	1
 14295  0D3F  319A  2203         	fcall	_Data_TRIS
 14296                           
 14297                           ;PS_2.c: 925: return 1;
 14298  0D41  3001               	movlw	1
 14299  0D42  0008               	return
 14300  0D43                     l6053:	
 14301                           
 14302                           ;PS_2.c: 926: }
 14303                           ;PS_2.c: 927: }
 14304                           ;PS_2.c: 928: timeout=0;
 14305  0D43  0020               	movlb	0	; select bank0
 14306  0D44  01B6               	clrf	Send_PS2@timeout
 14307  0D45  01B7               	clrf	Send_PS2@timeout+1
 14308  0D46                     l6063:	
 14309                           ;PS_2.c: 929: while(READ_PS_2_PIN(0b00100000))
 14310                           
 14311  0D46  3020               	movlw	32
 14312  0D47  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14313  0D4A  3800               	iorlw	0
 14314  0D4B  1903               	btfsc	3,2
 14315  0D4C  2D63               	goto	l6065
 14316                           
 14317                           ;PS_2.c: 930: {
 14318                           ;PS_2.c: 931: __nop();
 14319  0D4D  0000               	nop
 14320                           
 14321                           ;PS_2.c: 932: timeout++;
 14322  0D4E  3001               	movlw	1
 14323  0D4F  0020               	movlb	0	; select bank0
 14324  0D50  07B6               	addwf	Send_PS2@timeout,f
 14325  0D51  3000               	movlw	0
 14326  0D52  3DB7               	addwfc	Send_PS2@timeout+1,f
 14327                           
 14328                           ;PS_2.c: 933: if(timeout > 15000)
 14329  0D53  303A               	movlw	58
 14330  0D54  0237               	subwf	Send_PS2@timeout+1,w
 14331  0D55  3099               	movlw	153
 14332  0D56  1903               	skipnz
 14333  0D57  0236               	subwf	Send_PS2@timeout,w
 14334  0D58  1C03               	skipc
 14335  0D59  2D46               	goto	l6063
 14336                           
 14337                           ;PS_2.c: 934: {
 14338                           ;PS_2.c: 935: Clock_TRIS(1);
 14339  0D5A  3001               	movlw	1
 14340  0D5B  3199  21F8  318C   	fcall	_Clock_TRIS
 14341                           
 14342                           ;PS_2.c: 936: Data_TRIS(1);
 14343  0D5E  3001               	movlw	1
 14344  0D5F  319A  2203         	fcall	_Data_TRIS
 14345                           
 14346                           ;PS_2.c: 937: return 1;
 14347  0D61  3001               	movlw	1
 14348  0D62  0008               	return
 14349  0D63                     l6065:	
 14350  0D63  3001               	movlw	1
 14351  0D64  0020               	movlb	0	; select bank0
 14352  0D65  00AF               	movwf	??_Send_PS2
 14353  0D66  082F               	movf	??_Send_PS2,w
 14354  0D67  07B5               	addwf	Send_PS2@i,f
 14355  0D68  3008               	movlw	8
 14356  0D69  0235               	subwf	Send_PS2@i,w
 14357  0D6A  1C03               	skipc
 14358  0D6B  2D16               	goto	l802
 14359  0D6C                     l803:	
 14360                           
 14361                           ;PS_2.c: 938: }
 14362                           ;PS_2.c: 939: }
 14363                           ;PS_2.c: 940: }
 14364                           ;PS_2.c: 942: if(oddparity & 0x1)
 14365  0D6C  1C33               	btfss	Send_PS2@oddparity,0
 14366  0D6D  2D71               	goto	l6071
 14367                           
 14368                           ;PS_2.c: 943: {
 14369                           ;PS_2.c: 944: LATA |= 0b00010000;
 14370  0D6E  0022               	movlb	2	; select bank2
 14371  0D6F  160C               	bsf	12,4	;volatile
 14372                           
 14373                           ;PS_2.c: 945: }
 14374  0D70  2D77               	goto	l6073
 14375  0D71                     l6071:	
 14376                           
 14377                           ;PS_2.c: 946: else
 14378                           ;PS_2.c: 947: {
 14379                           ;PS_2.c: 948: LATA &= ~0b00010000;
 14380  0D71  30EF               	movlw	239
 14381  0D72  0020               	movlb	0	; select bank0
 14382  0D73  00AF               	movwf	??_Send_PS2
 14383  0D74  082F               	movf	??_Send_PS2,w
 14384  0D75  0022               	movlb	2	; select bank2
 14385  0D76  058C               	andwf	12,f	;volatile
 14386  0D77                     l6073:	
 14387                           
 14388                           ;PS_2.c: 949: }
 14389                           ;PS_2.c: 950: timeout=0;
 14390  0D77  0020               	movlb	0	; select bank0
 14391  0D78  01B6               	clrf	Send_PS2@timeout
 14392  0D79  01B7               	clrf	Send_PS2@timeout+1
 14393  0D7A                     l6083:	
 14394                           ;PS_2.c: 951: while(!READ_PS_2_PIN(0b00100000))
 14395                           
 14396  0D7A  3020               	movlw	32
 14397  0D7B  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14398  0D7E  3A00               	xorlw	0
 14399  0D7F  1D03               	btfss	3,2
 14400  0D80  2D97               	goto	l6085
 14401                           
 14402                           ;PS_2.c: 952: {
 14403                           ;PS_2.c: 953: __nop();
 14404  0D81  0000               	nop
 14405                           
 14406                           ;PS_2.c: 954: timeout++;
 14407  0D82  3001               	movlw	1
 14408  0D83  0020               	movlb	0	; select bank0
 14409  0D84  07B6               	addwf	Send_PS2@timeout,f
 14410  0D85  3000               	movlw	0
 14411  0D86  3DB7               	addwfc	Send_PS2@timeout+1,f
 14412                           
 14413                           ;PS_2.c: 955: if(timeout > 15000)
 14414  0D87  303A               	movlw	58
 14415  0D88  0237               	subwf	Send_PS2@timeout+1,w
 14416  0D89  3099               	movlw	153
 14417  0D8A  1903               	skipnz
 14418  0D8B  0236               	subwf	Send_PS2@timeout,w
 14419  0D8C  1C03               	skipc
 14420  0D8D  2D7A               	goto	l6083
 14421                           
 14422                           ;PS_2.c: 956: {
 14423                           ;PS_2.c: 957: Clock_TRIS(1);
 14424  0D8E  3001               	movlw	1
 14425  0D8F  3199  21F8  318C   	fcall	_Clock_TRIS
 14426                           
 14427                           ;PS_2.c: 958: Data_TRIS(1);
 14428  0D92  3001               	movlw	1
 14429  0D93  319A  2203         	fcall	_Data_TRIS
 14430                           
 14431                           ;PS_2.c: 959: return 1;
 14432  0D95  3001               	movlw	1
 14433  0D96  0008               	return
 14434  0D97                     l6085:	
 14435                           
 14436                           ;PS_2.c: 960: }
 14437                           ;PS_2.c: 961: }
 14438                           ;PS_2.c: 962: timeout=0;
 14439  0D97  0020               	movlb	0	; select bank0
 14440  0D98  01B6               	clrf	Send_PS2@timeout
 14441  0D99  01B7               	clrf	Send_PS2@timeout+1
 14442  0D9A                     l6095:	
 14443                           ;PS_2.c: 963: while(READ_PS_2_PIN(0b00100000))
 14444                           
 14445  0D9A  3020               	movlw	32
 14446  0D9B  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14447  0D9E  3800               	iorlw	0
 14448  0D9F  1903               	btfsc	3,2
 14449  0DA0  2DB7               	goto	l6097
 14450                           
 14451                           ;PS_2.c: 964: {
 14452                           ;PS_2.c: 965: __nop();
 14453  0DA1  0000               	nop
 14454                           
 14455                           ;PS_2.c: 966: timeout++;
 14456  0DA2  3001               	movlw	1
 14457  0DA3  0020               	movlb	0	; select bank0
 14458  0DA4  07B6               	addwf	Send_PS2@timeout,f
 14459  0DA5  3000               	movlw	0
 14460  0DA6  3DB7               	addwfc	Send_PS2@timeout+1,f
 14461                           
 14462                           ;PS_2.c: 967: if(timeout > 15000)
 14463  0DA7  303A               	movlw	58
 14464  0DA8  0237               	subwf	Send_PS2@timeout+1,w
 14465  0DA9  3099               	movlw	153
 14466  0DAA  1903               	skipnz
 14467  0DAB  0236               	subwf	Send_PS2@timeout,w
 14468  0DAC  1C03               	skipc
 14469  0DAD  2D9A               	goto	l6095
 14470                           
 14471                           ;PS_2.c: 968: {
 14472                           ;PS_2.c: 969: Clock_TRIS(1);
 14473  0DAE  3001               	movlw	1
 14474  0DAF  3199  21F8  318C   	fcall	_Clock_TRIS
 14475                           
 14476                           ;PS_2.c: 970: Data_TRIS(1);
 14477  0DB2  3001               	movlw	1
 14478  0DB3  319A  2203         	fcall	_Data_TRIS
 14479                           
 14480                           ;PS_2.c: 971: return 1;
 14481  0DB5  3001               	movlw	1
 14482  0DB6  0008               	return
 14483  0DB7                     l6097:	
 14484                           
 14485                           ;PS_2.c: 972: }
 14486                           ;PS_2.c: 973: }
 14487                           ;PS_2.c: 975: Data_TRIS(1);
 14488  0DB7  3001               	movlw	1
 14489  0DB8  319A  2203  318C   	fcall	_Data_TRIS
 14490                           
 14491                           ;PS_2.c: 977: timeout=0;
 14492  0DBB  0020               	movlb	0	; select bank0
 14493  0DBC  01B6               	clrf	Send_PS2@timeout
 14494  0DBD  01B7               	clrf	Send_PS2@timeout+1
 14495  0DBE                     l6109:	
 14496                           ;PS_2.c: 978: while(READ_PS_2_PIN(0b00010000))
 14497                           
 14498  0DBE  3010               	movlw	16
 14499  0DBF  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14500  0DC2  3800               	iorlw	0
 14501  0DC3  1903               	btfsc	3,2
 14502  0DC4  2DDB               	goto	l6111
 14503                           
 14504                           ;PS_2.c: 979: {
 14505                           ;PS_2.c: 980: __nop();
 14506  0DC5  0000               	nop
 14507                           
 14508                           ;PS_2.c: 981: timeout++;
 14509  0DC6  3001               	movlw	1
 14510  0DC7  0020               	movlb	0	; select bank0
 14511  0DC8  07B6               	addwf	Send_PS2@timeout,f
 14512  0DC9  3000               	movlw	0
 14513  0DCA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14514                           
 14515                           ;PS_2.c: 982: if(timeout > 15000)
 14516  0DCB  303A               	movlw	58
 14517  0DCC  0237               	subwf	Send_PS2@timeout+1,w
 14518  0DCD  3099               	movlw	153
 14519  0DCE  1903               	skipnz
 14520  0DCF  0236               	subwf	Send_PS2@timeout,w
 14521  0DD0  1C03               	skipc
 14522  0DD1  2DBE               	goto	l6109
 14523                           
 14524                           ;PS_2.c: 983: {
 14525                           ;PS_2.c: 984: Clock_TRIS(1);
 14526  0DD2  3001               	movlw	1
 14527  0DD3  3199  21F8  318C   	fcall	_Clock_TRIS
 14528                           
 14529                           ;PS_2.c: 985: Data_TRIS(1);
 14530  0DD6  3001               	movlw	1
 14531  0DD7  319A  2203         	fcall	_Data_TRIS
 14532                           
 14533                           ;PS_2.c: 986: return 1;
 14534  0DD9  3001               	movlw	1
 14535  0DDA  0008               	return
 14536  0DDB                     l6111:	
 14537                           
 14538                           ;PS_2.c: 987: }
 14539                           ;PS_2.c: 988: }
 14540                           ;PS_2.c: 989: timeout=0;
 14541  0DDB  0020               	movlb	0	; select bank0
 14542  0DDC  01B6               	clrf	Send_PS2@timeout
 14543  0DDD  01B7               	clrf	Send_PS2@timeout+1
 14544  0DDE                     l6121:	
 14545                           ;PS_2.c: 990: while(READ_PS_2_PIN(0b00100000))
 14546                           
 14547  0DDE  3020               	movlw	32
 14548  0DDF  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14549  0DE2  3800               	iorlw	0
 14550  0DE3  1903               	btfsc	3,2
 14551  0DE4  2DFB               	goto	l6123
 14552                           
 14553                           ;PS_2.c: 991: {
 14554                           ;PS_2.c: 992: __nop();
 14555  0DE5  0000               	nop
 14556                           
 14557                           ;PS_2.c: 993: timeout++;
 14558  0DE6  3001               	movlw	1
 14559  0DE7  0020               	movlb	0	; select bank0
 14560  0DE8  07B6               	addwf	Send_PS2@timeout,f
 14561  0DE9  3000               	movlw	0
 14562  0DEA  3DB7               	addwfc	Send_PS2@timeout+1,f
 14563                           
 14564                           ;PS_2.c: 994: if(timeout > 15000)
 14565  0DEB  303A               	movlw	58
 14566  0DEC  0237               	subwf	Send_PS2@timeout+1,w
 14567  0DED  3099               	movlw	153
 14568  0DEE  1903               	skipnz
 14569  0DEF  0236               	subwf	Send_PS2@timeout,w
 14570  0DF0  1C03               	skipc
 14571  0DF1  2DDE               	goto	l6121
 14572                           
 14573                           ;PS_2.c: 995: {
 14574                           ;PS_2.c: 996: Clock_TRIS(1);
 14575  0DF2  3001               	movlw	1
 14576  0DF3  3199  21F8  318C   	fcall	_Clock_TRIS
 14577                           
 14578                           ;PS_2.c: 997: Data_TRIS(1);
 14579  0DF6  3001               	movlw	1
 14580  0DF7  319A  2203         	fcall	_Data_TRIS
 14581                           
 14582                           ;PS_2.c: 998: return 1;
 14583  0DF9  3001               	movlw	1
 14584  0DFA  0008               	return
 14585  0DFB                     l6123:	
 14586                           
 14587                           ;PS_2.c: 999: }
 14588                           ;PS_2.c: 1000: }
 14589                           ;PS_2.c: 1001: timeout=0;
 14590  0DFB  0020               	movlb	0	; select bank0
 14591  0DFC  01B6               	clrf	Send_PS2@timeout
 14592  0DFD  01B7               	clrf	Send_PS2@timeout+1
 14593  0DFE                     l6133:	
 14594                           ;PS_2.c: 1002: while(!READ_PS_2_PIN(0b00010000))
 14595                           
 14596  0DFE  3010               	movlw	16
 14597  0DFF  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14598  0E02  3A00               	xorlw	0
 14599  0E03  1D03               	btfss	3,2
 14600  0E04  2E1B               	goto	l6135
 14601                           
 14602                           ;PS_2.c: 1003: {
 14603                           ;PS_2.c: 1004: __nop();
 14604  0E05  0000               	nop
 14605                           
 14606                           ;PS_2.c: 1005: timeout++;
 14607  0E06  3001               	movlw	1
 14608  0E07  0020               	movlb	0	; select bank0
 14609  0E08  07B6               	addwf	Send_PS2@timeout,f
 14610  0E09  3000               	movlw	0
 14611  0E0A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14612                           
 14613                           ;PS_2.c: 1006: if(timeout > 15000)
 14614  0E0B  303A               	movlw	58
 14615  0E0C  0237               	subwf	Send_PS2@timeout+1,w
 14616  0E0D  3099               	movlw	153
 14617  0E0E  1903               	skipnz
 14618  0E0F  0236               	subwf	Send_PS2@timeout,w
 14619  0E10  1C03               	skipc
 14620  0E11  2DFE               	goto	l6133
 14621                           
 14622                           ;PS_2.c: 1007: {
 14623                           ;PS_2.c: 1008: Clock_TRIS(1);
 14624  0E12  3001               	movlw	1
 14625  0E13  3199  21F8  318C   	fcall	_Clock_TRIS
 14626                           
 14627                           ;PS_2.c: 1009: Data_TRIS(1);
 14628  0E16  3001               	movlw	1
 14629  0E17  319A  2203         	fcall	_Data_TRIS
 14630                           
 14631                           ;PS_2.c: 1010: return 1;
 14632  0E19  3001               	movlw	1
 14633  0E1A  0008               	return
 14634  0E1B                     l6135:	
 14635                           
 14636                           ;PS_2.c: 1011: }
 14637                           ;PS_2.c: 1012: }
 14638                           ;PS_2.c: 1013: timeout=0;
 14639  0E1B  0020               	movlb	0	; select bank0
 14640  0E1C  01B6               	clrf	Send_PS2@timeout
 14641  0E1D  01B7               	clrf	Send_PS2@timeout+1
 14642  0E1E                     l6145:	
 14643                           ;PS_2.c: 1014: while(!READ_PS_2_PIN(0b00100000))
 14644                           
 14645  0E1E  3020               	movlw	32
 14646  0E1F  319A  2280  318C   	fcall	_READ_PS_2_PIN
 14647  0E22  3A00               	xorlw	0
 14648  0E23  1D03               	btfss	3,2
 14649  0E24  2E3B               	goto	l6147
 14650                           
 14651                           ;PS_2.c: 1015: {
 14652                           ;PS_2.c: 1016: __nop();
 14653  0E25  0000               	nop
 14654                           
 14655                           ;PS_2.c: 1017: timeout++;
 14656  0E26  3001               	movlw	1
 14657  0E27  0020               	movlb	0	; select bank0
 14658  0E28  07B6               	addwf	Send_PS2@timeout,f
 14659  0E29  3000               	movlw	0
 14660  0E2A  3DB7               	addwfc	Send_PS2@timeout+1,f
 14661                           
 14662                           ;PS_2.c: 1018: if(timeout > 15000)
 14663  0E2B  303A               	movlw	58
 14664  0E2C  0237               	subwf	Send_PS2@timeout+1,w
 14665  0E2D  3099               	movlw	153
 14666  0E2E  1903               	skipnz
 14667  0E2F  0236               	subwf	Send_PS2@timeout,w
 14668  0E30  1C03               	skipc
 14669  0E31  2E1E               	goto	l6145
 14670                           
 14671                           ;PS_2.c: 1019: {
 14672                           ;PS_2.c: 1020: Clock_TRIS(1);
 14673  0E32  3001               	movlw	1
 14674  0E33  3199  21F8  318C   	fcall	_Clock_TRIS
 14675                           
 14676                           ;PS_2.c: 1021: Data_TRIS(1);
 14677  0E36  3001               	movlw	1
 14678  0E37  319A  2203         	fcall	_Data_TRIS
 14679                           
 14680                           ;PS_2.c: 1022: return 1;
 14681  0E39  3001               	movlw	1
 14682  0E3A  0008               	return
 14683  0E3B                     l6147:	
 14684                           
 14685                           ;PS_2.c: 1023: }
 14686                           ;PS_2.c: 1024: }
 14687                           ;PS_2.c: 1027: Clock_TRIS(1);
 14688  0E3B  3001               	movlw	1
 14689  0E3C  3199  21F8  318C   	fcall	_Clock_TRIS
 14690                           
 14691                           ;PS_2.c: 1028: Data_TRIS(1);
 14692  0E3F  3001               	movlw	1
 14693  0E40  319A  2203  318C   	fcall	_Data_TRIS
 14694                           
 14695                           ;PS_2.c: 1029: PS_2_ENABLE_INTERRUPT(0b00100000);
 14696  0E43  3020               	movlw	32
 14697  0E44  318B  23C2         	fcall	_PS_2_ENABLE_INTERRUPT
 14698                           
 14699                           ;PS_2.c: 1030: return 0;
 14700  0E46  3000               	movlw	0
 14701  0E47  0008               	return
 14702  0E48                     __end_of_Send_PS2:	
 14703                           
 14704                           	psect	text42
 14705  07C8                     __ptext42:	
 14706 ;; *************** function _delayUS *****************
 14707 ;; Defined at:
 14708 ;;		line 48 in file "MISC.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;  US              4    5[BANK0 ] long 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  i               4   10[BANK0 ] long 
 14713 ;;  j               1   14[BANK0 ] unsigned char 
 14714 ;; Return value:  Size  Location     Type
 14715 ;;		None               void
 14716 ;; Registers used:
 14717 ;;		wreg, status,2, status,0
 14718 ;; Tracked objects:
 14719 ;;		On entry : 0/0
 14720 ;;		On exit  : 0/0
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14723 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;Total ram usage:       10 bytes
 14728 ;; Hardware stack levels used:    1
 14729 ;; Hardware stack levels required when called:    3
 14730 ;; This function calls:
 14731 ;;		Nothing
 14732 ;; This function is called by:
 14733 ;;		_main
 14734 ;;		_Init_System
 14735 ;;		_UARTstringWAIT
 14736 ;;		_SetBaud
 14737 ;;		_PS_2_Update
 14738 ;;		_Send_PS2
 14739 ;;		_Init_PS_2_Send
 14740 ;;		_Keyboard_Connected
 14741 ;;		_WriteFlash_Sequential
 14742 ;;		_InternalADC_Read
 14743 ;;		_UART_send_break_timed
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           
 14748                           ;psect for function _delayUS
 14749  07C8                     _delayUS:	
 14750                           
 14751                           ;MISC.c: 50: long i;
 14752                           ;MISC.c: 51: unsigned char j;
 14753                           ;MISC.c: 52: for(i=0;i<US;i+=6)
 14754                           
 14755                           ;incstack = 0
 14756                           ; Regs used in _delayUS: [wreg+status,2+status,0]
 14757  07C8  3000               	movlw	0
 14758  07C9  0020               	movlb	0	; select bank0
 14759  07CA  00AD               	movwf	delayUS@i+3
 14760  07CB  3000               	movlw	0
 14761  07CC  00AC               	movwf	delayUS@i+2
 14762  07CD  3000               	movlw	0
 14763  07CE  00AB               	movwf	delayUS@i+1
 14764  07CF  3000               	movlw	0
 14765  07D0  00AA               	movwf	delayUS@i
 14766  07D1                     l266:	
 14767  07D1  082D               	movf	delayUS@i+3,w
 14768  07D2  3A80               	xorlw	128
 14769  07D3  00A9               	movwf	??_delayUS
 14770  07D4  0828               	movf	delayUS@US+3,w
 14771  07D5  3A80               	xorlw	128
 14772  07D6  0229               	subwf	??_delayUS,w
 14773  07D7  1D03               	skipz
 14774  07D8  2FE3               	goto	u6953
 14775  07D9  0827               	movf	delayUS@US+2,w
 14776  07DA  022C               	subwf	delayUS@i+2,w
 14777  07DB  1D03               	skipz
 14778  07DC  2FE3               	goto	u6953
 14779  07DD  0826               	movf	delayUS@US+1,w
 14780  07DE  022B               	subwf	delayUS@i+1,w
 14781  07DF  1D03               	skipz
 14782  07E0  2FE3               	goto	u6953
 14783  07E1  0825               	movf	delayUS@US,w
 14784  07E2  022A               	subwf	delayUS@i,w
 14785  07E3                     u6953:	
 14786  07E3  1803               	btfsc	3,0
 14787  07E4  0008               	return
 14788                           
 14789                           ;MISC.c: 53: {
 14790                           ;MISC.c: 54: for(j=0;j<32;j++)
 14791  07E5  01AE               	clrf	delayUS@j
 14792  07E6  3020               	movlw	32
 14793  07E7  022E               	subwf	delayUS@j,w
 14794  07E8  1803               	btfsc	3,0
 14795  07E9  2FF4               	goto	l5443
 14796  07EA                     l268:	
 14797                           
 14798                           ;MISC.c: 55: {
 14799                           ;MISC.c: 56: __nop();
 14800  07EA  0000               	nop
 14801  07EB  3001               	movlw	1
 14802  07EC  0020               	movlb	0	; select bank0
 14803  07ED  00A9               	movwf	??_delayUS
 14804  07EE  0829               	movf	??_delayUS,w
 14805  07EF  07AE               	addwf	delayUS@j,f
 14806  07F0  3020               	movlw	32
 14807  07F1  022E               	subwf	delayUS@j,w
 14808  07F2  1C03               	skipc
 14809  07F3  2FEA               	goto	l268
 14810  07F4                     l5443:	
 14811  07F4  3006               	movlw	6
 14812  07F5  07AA               	addwf	delayUS@i,f
 14813  07F6  3000               	movlw	0
 14814  07F7  3DAB               	addwfc	delayUS@i+1,f
 14815  07F8  3000               	movlw	0
 14816  07F9  3DAC               	addwfc	delayUS@i+2,f
 14817  07FA  3000               	movlw	0
 14818  07FB  3DAD               	addwfc	delayUS@i+3,f
 14819  07FC  2FD1               	goto	l266
 14820  07FD                     __end_of_delayUS:	
 14821                           
 14822                           	psect	text43
 14823  1A80                     __ptext43:	
 14824 ;; *************** function _READ_PS_2_PIN *****************
 14825 ;; Defined at:
 14826 ;;		line 223 in file "PS_2.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;  DATA_CLK        1    wreg     unsigned char 
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;  DATA_CLK        1    5[BANK0 ] unsigned char 
 14831 ;; Return value:  Size  Location     Type
 14832 ;;                  1    wreg      unsigned char 
 14833 ;; Registers used:
 14834 ;;		wreg
 14835 ;; Tracked objects:
 14836 ;;		On entry : 0/0
 14837 ;;		On exit  : 0/0
 14838 ;;		Unchanged: 0/0
 14839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;Total ram usage:        1 bytes
 14845 ;; Hardware stack levels used:    1
 14846 ;; Hardware stack levels required when called:    3
 14847 ;; This function calls:
 14848 ;;		Nothing
 14849 ;; This function is called by:
 14850 ;;		_Send_PS2
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           
 14855                           ;psect for function _READ_PS_2_PIN
 14856  1A80                     _READ_PS_2_PIN:	
 14857                           
 14858                           ;incstack = 0
 14859                           ; Regs used in _READ_PS_2_PIN: [wreg]
 14860                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
 14861  1A80  0020               	movlb	0	; select bank0
 14862  1A81  00A5               	movwf	READ_PS_2_PIN@DATA_CLK
 14863                           
 14864                           ;PS_2.c: 225: if(DATA_CLK == 0b00100000)
 14865  1A82  0825               	movf	READ_PS_2_PIN@DATA_CLK,w
 14866  1A83  3A20               	xorlw	32
 14867  1A84  1D03               	skipz
 14868  1A85  2A8C               	goto	l589
 14869                           
 14870                           ;PS_2.c: 226: {
 14871                           ;PS_2.c: 228: if((PORTA & 0b00100000) == 0b00100000)
 14872  1A86  1E8C               	btfss	12,5	;volatile
 14873  1A87  2A8A               	goto	l5703
 14874                           
 14875                           ;PS_2.c: 229: {
 14876                           ;PS_2.c: 230: return (1);
 14877  1A88  3001               	movlw	1
 14878                           
 14879                           ;PS_2.c: 231: }
 14880  1A89  0008               	return
 14881  1A8A                     l5703:	
 14882                           
 14883                           ;PS_2.c: 232: else
 14884                           ;PS_2.c: 233: {
 14885                           ;PS_2.c: 234: return 0;
 14886  1A8A  3000               	movlw	0
 14887                           
 14888                           ;PS_2.c: 235: }
 14889                           ;PS_2.c: 236: }
 14890  1A8B  0008               	return
 14891  1A8C                     l589:	
 14892                           
 14893                           ;PS_2.c: 237: else
 14894                           ;PS_2.c: 238: {
 14895                           ;PS_2.c: 240: if((PORTA & 0b00010000) == 0b00010000)
 14896  1A8C  1E0C               	btfss	12,4	;volatile
 14897  1A8D  2A90               	goto	l5713
 14898                           
 14899                           ;PS_2.c: 241: {
 14900                           ;PS_2.c: 242: return (1);
 14901  1A8E  3001               	movlw	1
 14902                           
 14903                           ;PS_2.c: 243: }
 14904  1A8F  0008               	return
 14905  1A90                     l5713:	
 14906                           
 14907                           ;PS_2.c: 244: else
 14908                           ;PS_2.c: 245: {
 14909                           ;PS_2.c: 246: return 0;
 14910  1A90  3000               	movlw	0
 14911  1A91  0008               	return
 14912  1A92                     __end_of_READ_PS_2_PIN:	
 14913                           
 14914                           	psect	text44
 14915  0BC2                     __ptext44:	
 14916 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
 14917 ;; Defined at:
 14918 ;;		line 198 in file "PS_2.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  DATA_CLK        1    wreg     unsigned char 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 14923 ;; Return value:  Size  Location     Type
 14924 ;;		None               void
 14925 ;; Registers used:
 14926 ;;		wreg, status,2, status,0
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;Total ram usage:        2 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    3
 14939 ;; This function calls:
 14940 ;;		Nothing
 14941 ;; This function is called by:
 14942 ;;		_main
 14943 ;;		_PS_2_Update
 14944 ;;		_Send_PS2
 14945 ;;		_Init_PS_2_Send
 14946 ;;		_Keyboard_Connected
 14947 ;; This function uses a non-reentrant model
 14948 ;;
 14949                           
 14950                           
 14951                           ;psect for function _PS_2_ENABLE_INTERRUPT
 14952  0BC2                     _PS_2_ENABLE_INTERRUPT:	
 14953                           
 14954                           ;incstack = 0
 14955                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 14956                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 14957  0BC2  0020               	movlb	0	; select bank0
 14958  0BC3  00A6               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK
 14959                           
 14960                           ;PS_2.c: 200: if(DATA_CLK == 0b00100000)
 14961  0BC4  0826               	movf	PS_2_ENABLE_INTERRUPT@DATA_CLK,w
 14962  0BC5  3A20               	xorlw	32
 14963  0BC6  1D03               	skipz
 14964  0BC7  2BCF               	goto	l5731
 14965                           
 14966                           ;PS_2.c: 201: {
 14967                           ;PS_2.c: 204: IOCAF &= ~0b00100000;
 14968  0BC8  30DF               	movlw	223
 14969  0BC9  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 14970  0BCA  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 14971  0BCB  0027               	movlb	7	; select bank7
 14972  0BCC  0593               	andwf	19,f	;volatile
 14973                           
 14974                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 14975  0BCD  1692               	bsf	18,5	;volatile
 14976                           
 14977                           ;PS_2.c: 207: }
 14978  0BCE  0008               	return
 14979  0BCF                     l5731:	
 14980                           
 14981                           ;PS_2.c: 208: else
 14982                           ;PS_2.c: 209: {
 14983                           ;PS_2.c: 212: IOCAF &= ~0b00010000;
 14984  0BCF  30EF               	movlw	239
 14985  0BD0  0020               	movlb	0	; select bank0
 14986  0BD1  00A5               	movwf	??_PS_2_ENABLE_INTERRUPT
 14987  0BD2  0825               	movf	??_PS_2_ENABLE_INTERRUPT,w
 14988  0BD3  0027               	movlb	7	; select bank7
 14989  0BD4  0593               	andwf	19,f	;volatile
 14990                           
 14991                           ;PS_2.c: 213: IOCAN |= 0b00010000;
 14992  0BD5  1612               	bsf	18,4	;volatile
 14993  0BD6  0008               	return
 14994  0BD7                     __end_of_PS_2_ENABLE_INTERRUPT:	
 14995                           
 14996                           	psect	text45
 14997  1A03                     __ptext45:	
 14998 ;; *************** function _Data_TRIS *****************
 14999 ;; Defined at:
 15000 ;;		line 134 in file "PS_2.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;  direction       1    wreg     unsigned char 
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;  direction       1    5[BANK0 ] unsigned char 
 15005 ;; Return value:  Size  Location     Type
 15006 ;;		None               void
 15007 ;; Registers used:
 15008 ;;		wreg, status,2, status,0
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;Total ram usage:        1 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    3
 15021 ;; This function calls:
 15022 ;;		Nothing
 15023 ;; This function is called by:
 15024 ;;		_PS_2_INIT
 15025 ;;		_Send_PS2
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _Data_TRIS
 15031  1A03                     _Data_TRIS:	
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
 15035                           ;Data_TRIS@direction stored from wreg
 15036  1A03  0020               	movlb	0	; select bank0
 15037  1A04  00A5               	movwf	Data_TRIS@direction
 15038                           
 15039                           ;PS_2.c: 136: if(direction == 0)
 15040  1A05  08A5               	movf	Data_TRIS@direction,f
 15041  1A06  1D03               	skipz
 15042  1A07  2A0B               	goto	l569
 15043                           
 15044                           ;PS_2.c: 137: {
 15045                           ;PS_2.c: 138: TRISAbits.TRISA4 = 0;
 15046  1A08  0021               	movlb	1	; select bank1
 15047  1A09  120C               	bcf	12,4	;volatile
 15048                           
 15049                           ;PS_2.c: 139: }
 15050  1A0A  0008               	return
 15051  1A0B                     l569:	
 15052                           
 15053                           ;PS_2.c: 140: else
 15054                           ;PS_2.c: 141: {
 15055                           ;PS_2.c: 142: TRISAbits.TRISA4 = 1;
 15056  1A0B  0021               	movlb	1	; select bank1
 15057  1A0C  160C               	bsf	12,4	;volatile
 15058  1A0D  0008               	return
 15059  1A0E                     __end_of_Data_TRIS:	
 15060                           
 15061                           	psect	text46
 15062  19F8                     __ptext46:	
 15063 ;; *************** function _Clock_TRIS *****************
 15064 ;; Defined at:
 15065 ;;		line 117 in file "PS_2.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  direction       1    wreg     unsigned char 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;  direction       1    5[BANK0 ] unsigned char 
 15070 ;; Return value:  Size  Location     Type
 15071 ;;		None               void
 15072 ;; Registers used:
 15073 ;;		wreg, status,2, status,0
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;Total ram usage:        1 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    3
 15086 ;; This function calls:
 15087 ;;		Nothing
 15088 ;; This function is called by:
 15089 ;;		_PS_2_INIT
 15090 ;;		_Send_PS2
 15091 ;; This function uses a non-reentrant model
 15092 ;;
 15093                           
 15094                           
 15095                           ;psect for function _Clock_TRIS
 15096  19F8                     _Clock_TRIS:	
 15097                           
 15098                           ;incstack = 0
 15099                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
 15100                           ;Clock_TRIS@direction stored from wreg
 15101  19F8  0020               	movlb	0	; select bank0
 15102  19F9  00A5               	movwf	Clock_TRIS@direction
 15103                           
 15104                           ;PS_2.c: 119: if(direction == 0)
 15105  19FA  08A5               	movf	Clock_TRIS@direction,f
 15106  19FB  1D03               	skipz
 15107  19FC  2A00               	goto	l564
 15108                           
 15109                           ;PS_2.c: 120: {
 15110                           ;PS_2.c: 121: TRISAbits.TRISA5 = 0;
 15111  19FD  0021               	movlb	1	; select bank1
 15112  19FE  128C               	bcf	12,5	;volatile
 15113                           
 15114                           ;PS_2.c: 122: }
 15115  19FF  0008               	return
 15116  1A00                     l564:	
 15117                           
 15118                           ;PS_2.c: 123: else
 15119                           ;PS_2.c: 124: {
 15120                           ;PS_2.c: 125: TRISAbits.TRISA5 = 1;
 15121  1A00  0021               	movlb	1	; select bank1
 15122  1A01  168C               	bsf	12,5	;volatile
 15123  1A02  0008               	return
 15124  1A03                     __end_of_Clock_TRIS:	
 15125                           
 15126                           	psect	text47
 15127  1B68                     __ptext47:	
 15128 ;; *************** function _CheckSum_byte *****************
 15129 ;; Defined at:
 15130 ;;		line 68 in file "MISC.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  This            2    5[BANK0 ] unsigned int 
 15133 ;;  Odd_Even        1    7[BANK0 ] unsigned char 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  ThisTemp        2    9[BANK0 ] unsigned int 
 15136 ;;  i               1   12[BANK0 ] unsigned char 
 15137 ;;  Parity          1   11[BANK0 ] unsigned char 
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      unsigned char 
 15140 ;; Registers used:
 15141 ;;		wreg, status,2, status,0
 15142 ;; Tracked objects:
 15143 ;;		On entry : 0/0
 15144 ;;		On exit  : 0/0
 15145 ;;		Unchanged: 0/0
 15146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15147 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15150 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15151 ;;Total ram usage:        8 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; Hardware stack levels required when called:    3
 15154 ;; This function calls:
 15155 ;;		Nothing
 15156 ;; This function is called by:
 15157 ;;		_UARTchar
 15158 ;;		_PS_2_Update
 15159 ;;		_Send_PS2
 15160 ;; This function uses a non-reentrant model
 15161 ;;
 15162                           
 15163                           
 15164                           ;psect for function _CheckSum_byte
 15165  1B68                     _CheckSum_byte:	
 15166                           
 15167                           ;MISC.c: 70: char i = 0;
 15168                           
 15169                           ;incstack = 0
 15170                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
 15171  1B68  0020               	movlb	0	; select bank0
 15172  1B69  01AC               	clrf	CheckSum_byte@i
 15173                           
 15174                           ;MISC.c: 71: unsigned char Parity = 0;
 15175  1B6A  01AB               	clrf	CheckSum_byte@Parity
 15176                           
 15177                           ;MISC.c: 72: unsigned int ThisTemp = This;
 15178  1B6B  0826               	movf	CheckSum_byte@This+1,w
 15179  1B6C  01AA               	clrf	CheckSum_byte@ThisTemp+1
 15180  1B6D  07AA               	addwf	CheckSum_byte@ThisTemp+1,f
 15181  1B6E  0825               	movf	CheckSum_byte@This,w
 15182  1B6F  01A9               	clrf	CheckSum_byte@ThisTemp
 15183  1B70  07A9               	addwf	CheckSum_byte@ThisTemp,f
 15184                           
 15185                           ;MISC.c: 74: for (i =0; i<8; i++)
 15186  1B71  01AC               	clrf	CheckSum_byte@i
 15187  1B72  3008               	movlw	8
 15188  1B73  022C               	subwf	CheckSum_byte@i,w
 15189  1B74  1803               	btfsc	3,0
 15190  1B75  2B89               	goto	l5459
 15191  1B76                     l274:	
 15192                           
 15193                           ;MISC.c: 75: {
 15194                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 15195  1B76  1C29               	btfss	CheckSum_byte@ThisTemp,0
 15196  1B77  2B7C               	goto	l276
 15197                           
 15198                           ;MISC.c: 77: {
 15199                           ;MISC.c: 78: Parity++;
 15200  1B78  3001               	movlw	1
 15201  1B79  00A8               	movwf	??_CheckSum_byte
 15202  1B7A  0828               	movf	??_CheckSum_byte,w
 15203  1B7B  07AB               	addwf	CheckSum_byte@Parity,f
 15204  1B7C                     l276:	
 15205                           
 15206                           ;MISC.c: 79: }
 15207                           ;MISC.c: 80: ThisTemp >>= 1;
 15208  1B7C  3001               	movlw	1
 15209  1B7D                     u6985:	
 15210  1B7D  36AA               	lsrf	CheckSum_byte@ThisTemp+1,f
 15211  1B7E  0CA9               	rrf	CheckSum_byte@ThisTemp,f
 15212  1B7F  0B89               	decfsz	9,f
 15213  1B80  2B7D               	goto	u6985
 15214  1B81  3001               	movlw	1
 15215  1B82  00A8               	movwf	??_CheckSum_byte
 15216  1B83  0828               	movf	??_CheckSum_byte,w
 15217  1B84  07AC               	addwf	CheckSum_byte@i,f
 15218  1B85  3008               	movlw	8
 15219  1B86  022C               	subwf	CheckSum_byte@i,w
 15220  1B87  1C03               	skipc
 15221  1B88  2B76               	goto	l274
 15222  1B89                     l5459:	
 15223                           
 15224                           ;MISC.c: 81: }
 15225                           ;MISC.c: 82: if(Odd_Even == 3)
 15226  1B89  0827               	movf	CheckSum_byte@Odd_Even,w
 15227  1B8A  3A03               	xorlw	3
 15228  1B8B  1D03               	skipz
 15229  1B8C  2B93               	goto	l277
 15230                           
 15231                           ;MISC.c: 83: {
 15232                           ;MISC.c: 84: if(Parity % 2 == 0)
 15233  1B8D  182B               	btfsc	CheckSum_byte@Parity,0
 15234  1B8E  2B91               	goto	l5467
 15235                           
 15236                           ;MISC.c: 85: {
 15237                           ;MISC.c: 86: return 1;
 15238  1B8F  3001               	movlw	1
 15239  1B90  0008               	return
 15240  1B91                     l5467:	
 15241                           
 15242                           ;MISC.c: 87: }
 15243                           ;MISC.c: 88: return 0;
 15244  1B91  3000               	movlw	0
 15245                           
 15246                           ;MISC.c: 89: }
 15247  1B92  0008               	return
 15248  1B93                     l277:	
 15249                           
 15250                           ;MISC.c: 90: else
 15251                           ;MISC.c: 91: {
 15252                           ;MISC.c: 92: if(Parity % 2 == 1)
 15253  1B93  1C2B               	btfss	CheckSum_byte@Parity,0
 15254  1B94  2B97               	goto	l5477
 15255                           
 15256                           ;MISC.c: 93: {
 15257                           ;MISC.c: 94: return 1;
 15258  1B95  3001               	movlw	1
 15259  1B96  0008               	return
 15260  1B97                     l5477:	
 15261                           
 15262                           ;MISC.c: 95: }
 15263                           ;MISC.c: 96: return 0;
 15264  1B97  3000               	movlw	0
 15265  1B98  0008               	return
 15266  1B99                     __end_of_CheckSum_byte:	
 15267                           
 15268                           	psect	text48
 15269  1AF6                     __ptext48:	
 15270 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
 15271 ;; Defined at:
 15272 ;;		line 175 in file "PS_2.c"
 15273 ;; Parameters:    Size  Location     Type
 15274 ;;  DATA_CLK        1    wreg     unsigned char 
 15275 ;; Auto vars:     Size  Location     Type
 15276 ;;  DATA_CLK        1    6[BANK0 ] unsigned char 
 15277 ;; Return value:  Size  Location     Type
 15278 ;;		None               void
 15279 ;; Registers used:
 15280 ;;		wreg, status,2, status,0
 15281 ;; Tracked objects:
 15282 ;;		On entry : 0/0
 15283 ;;		On exit  : 0/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;Total ram usage:        2 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; Hardware stack levels required when called:    3
 15293 ;; This function calls:
 15294 ;;		Nothing
 15295 ;; This function is called by:
 15296 ;;		_main
 15297 ;;		_PS_2_Update
 15298 ;;		_Init_PS_2_Send
 15299 ;;		_Keyboard_Connected
 15300 ;; This function uses a non-reentrant model
 15301 ;;
 15302                           
 15303                           
 15304                           ;psect for function _PS_2_DISABLE_INTERRUPT
 15305  1AF6                     _PS_2_DISABLE_INTERRUPT:	
 15306                           
 15307                           ;incstack = 0
 15308                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 15309                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 15310  1AF6  0020               	movlb	0	; select bank0
 15311  1AF7  00A6               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK
 15312                           
 15313                           ;PS_2.c: 177: if(DATA_CLK == 0b00100000)
 15314  1AF8  0826               	movf	PS_2_DISABLE_INTERRUPT@DATA_CLK,w
 15315  1AF9  3A20               	xorlw	32
 15316  1AFA  1D03               	skipz
 15317  1AFB  2B08               	goto	l5889
 15318                           
 15319                           ;PS_2.c: 178: {
 15320                           ;PS_2.c: 181: IOCAN &= ~0b00100000;
 15321  1AFC  30DF               	movlw	223
 15322  1AFD  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15323  1AFE  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15324  1AFF  0027               	movlb	7	; select bank7
 15325  1B00  0592               	andwf	18,f	;volatile
 15326                           
 15327                           ;PS_2.c: 182: IOCAF &= ~0b00100000;
 15328  1B01  30DF               	movlw	223
 15329  1B02  0020               	movlb	0	; select bank0
 15330  1B03  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15331  1B04  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15332  1B05  0027               	movlb	7	; select bank7
 15333  1B06  0593               	andwf	19,f	;volatile
 15334                           
 15335                           ;PS_2.c: 183: }
 15336  1B07  0008               	return
 15337  1B08                     l5889:	
 15338                           
 15339                           ;PS_2.c: 184: else
 15340                           ;PS_2.c: 185: {
 15341                           ;PS_2.c: 188: IOCAN &= ~0b00010000;
 15342  1B08  30EF               	movlw	239
 15343  1B09  0020               	movlb	0	; select bank0
 15344  1B0A  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15345  1B0B  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15346  1B0C  0027               	movlb	7	; select bank7
 15347  1B0D  0592               	andwf	18,f	;volatile
 15348                           
 15349                           ;PS_2.c: 189: IOCAF &= ~0b00010000;
 15350  1B0E  30EF               	movlw	239
 15351  1B0F  0020               	movlb	0	; select bank0
 15352  1B10  00A5               	movwf	??_PS_2_DISABLE_INTERRUPT
 15353  1B11  0825               	movf	??_PS_2_DISABLE_INTERRUPT,w
 15354  1B12  0027               	movlb	7	; select bank7
 15355  1B13  0593               	andwf	19,f	;volatile
 15356  1B14  0008               	return
 15357  1B15                     __end_of_PS_2_DISABLE_INTERRUPT:	
 15358                           
 15359                           	psect	text49
 15360  1B15                     __ptext49:	
 15361 ;; *************** function _InitApp *****************
 15362 ;; Defined at:
 15363 ;;		line 63 in file "user.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;		None
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;		None
 15368 ;; Return value:  Size  Location     Type
 15369 ;;		None               void
 15370 ;; Registers used:
 15371 ;;		wreg, status,2
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;Total ram usage:        0 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    3
 15384 ;; This function calls:
 15385 ;;		Nothing
 15386 ;; This function is called by:
 15387 ;;		_main
 15388 ;; This function uses a non-reentrant model
 15389 ;;
 15390                           
 15391                           
 15392                           ;psect for function _InitApp
 15393  1B15                     _InitApp:	
 15394                           
 15395                           ;user.c: 65: LATC =0;
 15396                           
 15397                           ;incstack = 0
 15398                           ; Regs used in _InitApp: [wreg+status,2]
 15399  1B15  0022               	movlb	2	; select bank2
 15400  1B16  018E               	clrf	14	;volatile
 15401                           
 15402                           ;user.c: 66: LATA =0;
 15403  1B17  018C               	clrf	12	;volatile
 15404                           
 15405                           ;user.c: 67: TRISCbits.TRISC2 = 0;
 15406  1B18  0021               	movlb	1	; select bank1
 15407  1B19  110E               	bcf	14,2	;volatile
 15408                           
 15409                           ;user.c: 68: TRISCbits.TRISC1 = 0;
 15410  1B1A  108E               	bcf	14,1	;volatile
 15411                           
 15412                           ;user.c: 69: TRISCbits.TRISC3 = 0;
 15413  1B1B  118E               	bcf	14,3	;volatile
 15414                           
 15415                           ;user.c: 70: TRISCbits.TRISC4 = 0;
 15416  1B1C  120E               	bcf	14,4	;volatile
 15417                           
 15418                           ;user.c: 71: TRISAbits.TRISA2 = 1;
 15419  1B1D  150C               	bsf	12,2	;volatile
 15420                           
 15421                           ;user.c: 72: TRISCbits.TRISC0 = 0;
 15422  1B1E  100E               	bcf	14,0	;volatile
 15423                           
 15424                           ;user.c: 75: LATC |= 0b00000010;
 15425  1B1F  0022               	movlb	2	; select bank2
 15426  1B20  148E               	bsf	14,1	;volatile
 15427                           
 15428                           ;user.c: 76: PPSLOCK =0;
 15429  1B21  003C               	movlb	28	; select bank28
 15430  1B22  018F               	clrf	15	;volatile
 15431                           
 15432                           ;user.c: 77: RC2PPS = 0b00010100;
 15433  1B23  3014               	movlw	20
 15434  1B24  003D               	movlb	29	; select bank29
 15435  1B25  00A2               	movwf	34	;volatile
 15436                           
 15437                           ;user.c: 78: CKPPS = 0b00010010;
 15438  1B26  3012               	movlw	18
 15439  1B27  003C               	movlb	28	; select bank28
 15440  1B28  00A5               	movwf	37	;volatile
 15441                           
 15442                           ;user.c: 79: RXPPS = 0b00010101;
 15443  1B29  3015               	movlw	21
 15444  1B2A  00A4               	movwf	36	;volatile
 15445                           
 15446                           ;user.c: 80: PPSLOCK =1;
 15447  1B2B  3001               	movlw	1
 15448  1B2C  008F               	movwf	15	;volatile
 15449                           
 15450                           ;user.c: 82: ANSELA &= ~0xFF;
 15451  1B2D  0023               	movlb	3	; select bank3
 15452  1B2E  018C               	clrf	12	;volatile
 15453                           
 15454                           ;user.c: 83: ANSELA |= 0b00000100;
 15455  1B2F  150C               	bsf	12,2	;volatile
 15456                           
 15457                           ;user.c: 84: ANSELC &= ~0xFF;
 15458  1B30  018E               	clrf	14	;volatile
 15459                           
 15460                           ;user.c: 85: OPTION_REGbits.nWPUEN = 0;
 15461  1B31  0021               	movlb	1	; select bank1
 15462  1B32  1395               	bcf	21,7	;volatile
 15463                           
 15464                           ;user.c: 86: WPUC = 0b00100000;
 15465  1B33  3020               	movlw	32
 15466  1B34  0024               	movlb	4	; select bank4
 15467  1B35  008E               	movwf	14	;volatile
 15468                           
 15469                           ;user.c: 87: WPUA = 0;
 15470  1B36  018C               	clrf	12	;volatile
 15471  1B37  0008               	return
 15472  1B38                     __end_of_InitApp:	
 15473                           
 15474                           	psect	text50
 15475  1A6E                     __ptext50:	
 15476 ;; *************** function _ConfigureOscillator *****************
 15477 ;; Defined at:
 15478 ;;		line 40 in file "system.c"
 15479 ;; Parameters:    Size  Location     Type
 15480 ;;		None
 15481 ;; Auto vars:     Size  Location     Type
 15482 ;;		None
 15483 ;; Return value:  Size  Location     Type
 15484 ;;		None               void
 15485 ;; Registers used:
 15486 ;;		wreg, status,2, status,0
 15487 ;; Tracked objects:
 15488 ;;		On entry : 0/0
 15489 ;;		On exit  : 0/0
 15490 ;;		Unchanged: 0/0
 15491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;Total ram usage:        1 bytes
 15497 ;; Hardware stack levels used:    1
 15498 ;; Hardware stack levels required when called:    3
 15499 ;; This function calls:
 15500 ;;		Nothing
 15501 ;; This function is called by:
 15502 ;;		_main
 15503 ;; This function uses a non-reentrant model
 15504 ;;
 15505                           
 15506                           
 15507                           ;psect for function _ConfigureOscillator
 15508  1A6E                     _ConfigureOscillator:	
 15509                           
 15510                           ;system.c: 42: OSCCON= 0b11110000;
 15511                           
 15512                           ;incstack = 0
 15513                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 15514  1A6E  30F0               	movlw	240
 15515  1A6F  0021               	movlb	1	; select bank1
 15516  1A70  0099               	movwf	25	;volatile
 15517  1A71                     l4919:	
 15518                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
 15519                           
 15520  1A71  3000               	movlw	0
 15521  1A72  181A               	btfsc	26,0	;volatile
 15522  1A73  3001               	movlw	1
 15523  1A74  051A               	andwf	26,w	;volatile
 15524  1A75  1903               	btfsc	3,2
 15525  1A76  2A71               	goto	l4919
 15526  1A77                     l4921:	
 15527                           ;system.c: 44: while(!(OSCSTAT & = 0b01000000));
 15528                           
 15529  1A77  3040               	movlw	64
 15530  1A78  0020               	movlb	0	; select bank0
 15531  1A79  00A5               	movwf	??_ConfigureOscillator
 15532  1A7A  0825               	movf	??_ConfigureOscillator,w
 15533  1A7B  0021               	movlb	1	; select bank1
 15534  1A7C  059A               	andwf	26,f	;volatile
 15535  1A7D  1D03               	btfss	3,2
 15536  1A7E  0008               	return
 15537  1A7F  2A77               	goto	l4921
 15538  1A80                     __end_of_ConfigureOscillator:	
 15539                           
 15540                           	psect	intentry
 15541  0004                     __pintentry:	
 15542 ;; *************** function _isr *****************
 15543 ;; Defined at:
 15544 ;;		line 70 in file "interrupts.c"
 15545 ;; Parameters:    Size  Location     Type
 15546 ;;		None
 15547 ;; Auto vars:     Size  Location     Type
 15548 ;;  rx              1    4[BANK0 ] unsigned char 
 15549 ;;  Rx_fault        1    3[BANK0 ] unsigned char 
 15550 ;; Return value:  Size  Location     Type
 15551 ;;		None               void
 15552 ;; Registers used:
 15553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15554 ;; Tracked objects:
 15555 ;;		On entry : 0/0
 15556 ;;		On exit  : 0/0
 15557 ;;		Unchanged: 0/0
 15558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;Total ram usage:        4 bytes
 15564 ;; Hardware stack levels used:    1
 15565 ;; Hardware stack levels required when called:    2
 15566 ;; This function calls:
 15567 ;;		i1_READ_PS_2_PIN
 15568 ;;		i1_ReadUSART
 15569 ;;		i1_UART_send_break
 15570 ;;		i1_UARTchar
 15571 ;; This function is called by:
 15572 ;;		Interrupt level 1
 15573 ;; This function uses a non-reentrant model
 15574 ;;
 15575                           
 15576  0004                     _isr:	
 15577                           
 15578                           ;incstack = 0
 15579                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15580  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15581  0005  3180               	pagesel	$
 15582  0006  0020               	movlb	0	; select bank0
 15583  0007  087F               	movf	127,w
 15584  0008  00A2               	movwf	??_isr+1
 15585                           
 15586                           ;interrupts.c: 72: unsigned char rx;
 15587                           ;interrupts.c: 73: unsigned char Rx_fault =0;
 15588  0009  01A3               	clrf	isr@Rx_fault
 15589                           
 15590                           ;interrupts.c: 75: if(IOCAF & 0b00100000)
 15591  000A  0027               	movlb	7	; select bank7
 15592  000B  1E93               	btfss	19,5	;volatile
 15593  000C  287C               	goto	i1l63
 15594                           
 15595                           ;interrupts.c: 76: {
 15596                           ;interrupts.c: 78: LATC |= 0b00010000;
 15597  000D  0022               	movlb	2	; select bank2
 15598  000E  160E               	bsf	14,4	;volatile
 15599                           
 15600                           ;interrupts.c: 79: if(PS_2_bits <44)
 15601  000F  302C               	movlw	44
 15602  0010  0020               	movlb	0	; select bank0
 15603  0011  026A               	subwf	_PS_2_bits,w
 15604  0012  1803               	skipnc
 15605  0013  287A               	goto	i1l5271
 15606                           
 15607                           ;interrupts.c: 80: {
 15608                           ;interrupts.c: 81: if(PS_2_bits <11 )
 15609  0014  300B               	movlw	11
 15610  0015  026A               	subwf	_PS_2_bits,w
 15611  0016  1803               	skipnc
 15612  0017  2830               	goto	i1l5245
 15613                           
 15614                           ;interrupts.c: 82: {
 15615                           ;interrupts.c: 83: PS_2_Read_Data_FirstTEMP <<= 1;
 15616  0018  3001               	movlw	1
 15617  0019  0024               	movlb	4	; select bank4
 15618  001A                     u660_25:	
 15619  001A  35A0               	lslf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15620  001B  0DA1               	rlf	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15621  001C  0B89               	decfsz	9,f
 15622  001D  281A               	goto	u660_25
 15623                           
 15624                           ;interrupts.c: 84: if(READ_PS_2_PIN(0b00010000))
 15625  001E  3010               	movlw	16
 15626  001F  319A  2292  3180   	fcall	i1_READ_PS_2_PIN
 15627  0022  3A00               	xorlw	0
 15628  0023  1903               	skipnz
 15629  0024  282A               	goto	i1l5241
 15630                           
 15631                           ;interrupts.c: 85: {
 15632                           ;interrupts.c: 86: PS_2_Read_Data_FirstTEMP++;
 15633  0025  3001               	movlw	1
 15634  0026  0024               	movlb	4	; select bank4
 15635  0027  07A0               	addwf	_PS_2_Read_Data_FirstTEMP^(0+512),f
 15636  0028  3000               	movlw	0
 15637  0029  3DA1               	addwfc	(_PS_2_Read_Data_FirstTEMP+1)^(0+512),f
 15638  002A                     i1l5241:	
 15639                           
 15640                           ;interrupts.c: 87: }
 15641                           ;interrupts.c: 88: PS_2_Read_Data_SecondTEMP = 0;
 15642  002A  0024               	movlb	4	; select bank4
 15643  002B  01A4               	clrf	_PS_2_Read_Data_SecondTEMP^(0+512)
 15644  002C  01A5               	clrf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512)
 15645                           
 15646                           ;interrupts.c: 89: PS_2_Read_Data_ThirdTEMP = 0;
 15647  002D  01A6               	clrf	_PS_2_Read_Data_ThirdTEMP^(0+512)
 15648  002E  01A7               	clrf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512)
 15649                           
 15650                           ;interrupts.c: 90: }
 15651  002F  2872               	goto	i1l5267
 15652  0030                     i1l5245:	
 15653                           
 15654                           ;interrupts.c: 91: else if(PS_2_bits <22 )
 15655  0030  3016               	movlw	22
 15656  0031  0020               	movlb	0	; select bank0
 15657  0032  026A               	subwf	_PS_2_bits,w
 15658  0033  1803               	skipnc
 15659  0034  2848               	goto	i1l5253
 15660                           
 15661                           ;interrupts.c: 92: {
 15662                           ;interrupts.c: 93: PS_2_Read_Data_SecondTEMP <<= 1;
 15663  0035  3001               	movlw	1
 15664  0036  0024               	movlb	4	; select bank4
 15665  0037                     u663_25:	
 15666  0037  35A4               	lslf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15667  0038  0DA5               	rlf	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15668  0039  0B89               	decfsz	9,f
 15669  003A  2837               	goto	u663_25
 15670                           
 15671                           ;interrupts.c: 94: if(READ_PS_2_PIN(0b00010000))
 15672  003B  3010               	movlw	16
 15673  003C  319A  2292  3180   	fcall	i1_READ_PS_2_PIN
 15674  003F  3A00               	xorlw	0
 15675  0040  1903               	skipnz
 15676  0041  2872               	goto	i1l5267
 15677                           
 15678                           ;interrupts.c: 95: {
 15679                           ;interrupts.c: 96: PS_2_Read_Data_SecondTEMP++;
 15680  0042  3001               	movlw	1
 15681  0043  0024               	movlb	4	; select bank4
 15682  0044  07A4               	addwf	_PS_2_Read_Data_SecondTEMP^(0+512),f
 15683  0045  3000               	movlw	0
 15684  0046  3DA5               	addwfc	(_PS_2_Read_Data_SecondTEMP+1)^(0+512),f
 15685                           
 15686                           ;interrupts.c: 97: }
 15687                           ;interrupts.c: 98: }
 15688  0047  2872               	goto	i1l5267
 15689  0048                     i1l5253:	
 15690                           
 15691                           ;interrupts.c: 99: else if(PS_2_bits <33 )
 15692  0048  3021               	movlw	33
 15693  0049  0020               	movlb	0	; select bank0
 15694  004A  026A               	subwf	_PS_2_bits,w
 15695  004B  1803               	skipnc
 15696  004C  2860               	goto	i1l5261
 15697                           
 15698                           ;interrupts.c: 100: {
 15699                           ;interrupts.c: 101: PS_2_Read_Data_ThirdTEMP <<= 1;
 15700  004D  3001               	movlw	1
 15701  004E  0024               	movlb	4	; select bank4
 15702  004F                     u666_25:	
 15703  004F  35A6               	lslf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15704  0050  0DA7               	rlf	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15705  0051  0B89               	decfsz	9,f
 15706  0052  284F               	goto	u666_25
 15707                           
 15708                           ;interrupts.c: 102: if(READ_PS_2_PIN(0b00010000))
 15709  0053  3010               	movlw	16
 15710  0054  319A  2292  3180   	fcall	i1_READ_PS_2_PIN
 15711  0057  3A00               	xorlw	0
 15712  0058  1903               	skipnz
 15713  0059  2872               	goto	i1l5267
 15714                           
 15715                           ;interrupts.c: 103: {
 15716                           ;interrupts.c: 104: PS_2_Read_Data_ThirdTEMP++;
 15717  005A  3001               	movlw	1
 15718  005B  0024               	movlb	4	; select bank4
 15719  005C  07A6               	addwf	_PS_2_Read_Data_ThirdTEMP^(0+512),f
 15720  005D  3000               	movlw	0
 15721  005E  3DA7               	addwfc	(_PS_2_Read_Data_ThirdTEMP+1)^(0+512),f
 15722                           
 15723                           ;interrupts.c: 105: }
 15724                           ;interrupts.c: 106: }
 15725  005F  2872               	goto	i1l5267
 15726  0060                     i1l5261:	
 15727                           
 15728                           ;interrupts.c: 107: else
 15729                           ;interrupts.c: 108: {
 15730                           ;interrupts.c: 109: PS_2_Read_Data_ForthTEMP <<= 1;
 15731  0060  3001               	movlw	1
 15732  0061  0024               	movlb	4	; select bank4
 15733  0062                     u668_25:	
 15734  0062  35A2               	lslf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 15735  0063  0DA3               	rlf	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 15736  0064  0B89               	decfsz	9,f
 15737  0065  2862               	goto	u668_25
 15738                           
 15739                           ;interrupts.c: 110: if(READ_PS_2_PIN(0b00010000))
 15740  0066  3010               	movlw	16
 15741  0067  319A  2292  3180   	fcall	i1_READ_PS_2_PIN
 15742  006A  3A00               	xorlw	0
 15743  006B  1903               	skipnz
 15744  006C  2872               	goto	i1l5267
 15745                           
 15746                           ;interrupts.c: 111: {
 15747                           ;interrupts.c: 112: PS_2_Read_Data_ForthTEMP++;
 15748  006D  3001               	movlw	1
 15749  006E  0024               	movlb	4	; select bank4
 15750  006F  07A2               	addwf	_PS_2_Read_Data_ForthTEMP^(0+512),f
 15751  0070  3000               	movlw	0
 15752  0071  3DA3               	addwfc	(_PS_2_Read_Data_ForthTEMP+1)^(0+512),f
 15753  0072                     i1l5267:	
 15754                           
 15755                           ;interrupts.c: 113: }
 15756                           ;interrupts.c: 114: }
 15757                           ;interrupts.c: 115: PS_2_bits++;
 15758  0072  3001               	movlw	1
 15759  0073  0020               	movlb	0	; select bank0
 15760  0074  00A1               	movwf	??_isr
 15761  0075  0821               	movf	??_isr,w
 15762  0076  07EA               	addwf	_PS_2_bits,f
 15763                           
 15764                           ;interrupts.c: 116: Read_Timer = 0;
 15765  0077  0022               	movlb	2	; select bank2
 15766  0078  01ED               	clrf	_Read_Timer^(0+256)
 15767  0079  01EE               	clrf	(_Read_Timer+1)^(0+256)
 15768  007A                     i1l5271:	
 15769                           
 15770                           ;interrupts.c: 117: }
 15771                           ;interrupts.c: 118: IOCAF &= ~0b00100000;
 15772  007A  30DF               	movlw	223
 15773  007B  287F               	goto	L21
 15774  007C                     i1l63:	
 15775                           ;interrupts.c: 119: }
 15776                           
 15777                           
 15778                           ;interrupts.c: 120: else if (IOCAF & 0b00010000)
 15779  007C  1E13               	btfss	19,4	;volatile
 15780  007D  2885               	goto	i1l76
 15781                           
 15782                           ;interrupts.c: 121: {
 15783                           ;interrupts.c: 122: IOCAF &= ~0b00010000;
 15784  007E  30EF               	movlw	239
 15785  007F                     L21:	
 15786  007F  0020               	movlb	0	; select bank0
 15787  0080  00A1               	movwf	??_isr
 15788  0081  0821               	movf	??_isr,w
 15789  0082  0027               	movlb	7	; select bank7
 15790  0083  0593               	andwf	19,f	;volatile
 15791                           
 15792                           ;interrupts.c: 123: }
 15793  0084  28D8               	goto	i1l89
 15794  0085                     i1l76:	
 15795                           
 15796                           ;interrupts.c: 124: else if (PIR1bits.RCIF)
 15797  0085  0020               	movlb	0	; select bank0
 15798  0086  1E91               	btfss	17,5	;volatile
 15799  0087  28B6               	goto	i1l78
 15800                           
 15801                           ;interrupts.c: 125: {
 15802                           ;interrupts.c: 127: LATC |= 0b00001000;
 15803  0088  0022               	movlb	2	; select bank2
 15804  0089  158E               	bsf	14,3	;volatile
 15805                           
 15806                           ;interrupts.c: 128: SinLEDtimer = 0;
 15807  008A  0024               	movlb	4	; select bank4
 15808  008B  01A8               	clrf	_SinLEDtimer^(0+512)
 15809  008C  01A9               	clrf	(_SinLEDtimer+1)^(0+512)
 15810                           
 15811                           ;interrupts.c: 129: Rx_fault = 0;
 15812  008D  0020               	movlb	0	; select bank0
 15813  008E  01A3               	clrf	isr@Rx_fault
 15814                           
 15815                           ;interrupts.c: 130: if(RC1STAbits.FERR)
 15816  008F  0023               	movlb	3	; select bank3
 15817  0090  1D1D               	btfss	29,2	;volatile
 15818  0091  2895               	goto	i1l5283
 15819                           
 15820                           ;interrupts.c: 131: {
 15821                           ;interrupts.c: 132: Rx_fault =1;
 15822  0092  0020               	movlb	0	; select bank0
 15823  0093  01A3               	clrf	isr@Rx_fault
 15824  0094  0AA3               	incf	isr@Rx_fault,f
 15825  0095                     i1l5283:	
 15826                           
 15827                           ;interrupts.c: 133: }
 15828                           ;interrupts.c: 134: rx = ReadUSART();
 15829  0095  3199  21DC  3180   	fcall	i1_ReadUSART
 15830  0098  0020               	movlb	0	; select bank0
 15831  0099  00A1               	movwf	??_isr
 15832  009A  0821               	movf	??_isr,w
 15833  009B  00A4               	movwf	isr@rx
 15834                           
 15835                           ;interrupts.c: 135: if(Rx_fault == 1)
 15836  009C  0823               	movf	isr@Rx_fault,w
 15837  009D  3A01               	xorlw	1
 15838  009E  1D03               	skipz
 15839  009F  28A7               	goto	i1l5291
 15840                           
 15841                           ;interrupts.c: 136: {
 15842                           ;interrupts.c: 137: if(rx == 0)
 15843  00A0  08A4               	movf	isr@rx,f
 15844  00A1  1D03               	skipz
 15845  00A2  28B3               	goto	i1l5293
 15846                           
 15847                           ;interrupts.c: 138: {
 15848                           ;interrupts.c: 139: UART_send_break();
 15849  00A3  3199  21BF  3180   	fcall	i1_UART_send_break
 15850                           
 15851                           ;interrupts.c: 140: }
 15852                           ;interrupts.c: 141: }
 15853  00A6  28B3               	goto	i1l5293
 15854  00A7                     i1l5291:	
 15855                           
 15856                           ;interrupts.c: 142: else
 15857                           ;interrupts.c: 143: {
 15858                           ;interrupts.c: 144: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 15859  00A7  01F8               	clrf	i1UARTchar@NinethBit_override
 15860  00A8  0AF8               	incf	i1UARTchar@NinethBit_override,f
 15861  00A9  3000               	movlw	0
 15862  00AA  0023               	movlb	3	; select bank3
 15863  00AB  181D               	btfsc	29,0	;volatile
 15864  00AC  3001               	movlw	1
 15865  00AD  00F9               	movwf	i1UARTchar@NinethBit_override_data
 15866  00AE  0020               	movlb	0	; select bank0
 15867  00AF  0824               	movf	isr@rx,w
 15868  00B0  319C  24F0  3180   	fcall	i1_UARTchar
 15869  00B3                     i1l5293:	
 15870                           
 15871                           ;interrupts.c: 145: }
 15872                           ;interrupts.c: 146: PIR1bits.RCIF = 0;
 15873  00B3  0020               	movlb	0	; select bank0
 15874  00B4  1291               	bcf	17,5	;volatile
 15875                           
 15876                           ;interrupts.c: 147: }
 15877  00B5  28D8               	goto	i1l89
 15878  00B6                     i1l78:	
 15879                           
 15880                           ;interrupts.c: 148: else if(PIR1bits.TMR2IF)
 15881  00B6  1C91               	btfss	17,1	;volatile
 15882  00B7  28D7               	goto	i1l84
 15883                           
 15884                           ;interrupts.c: 149: {
 15885                           ;interrupts.c: 151: PIE1bits.TMR2IE = 0;
 15886  00B8  0021               	movlb	1	; select bank1
 15887  00B9  1091               	bcf	17,1	;volatile
 15888                           
 15889                           ;interrupts.c: 152: blinkdelay++;LATC ^= 0b00000010;
 15890  00BA  3001               	movlw	1
 15891  00BB  0020               	movlb	0	; select bank0
 15892  00BC  00A1               	movwf	??_isr
 15893  00BD  0821               	movf	??_isr,w
 15894  00BE  0021               	movlb	1	; select bank1
 15895  00BF  07EB               	addwf	_blinkdelay^(0+128),f
 15896  00C0  3002               	movlw	2
 15897  00C1  0020               	movlb	0	; select bank0
 15898  00C2  00A1               	movwf	??_isr
 15899  00C3  0821               	movf	??_isr,w
 15900  00C4  0022               	movlb	2	; select bank2
 15901  00C5  068E               	xorwf	14,f	;volatile
 15902                           
 15903                           ;interrupts.c: 153: if(blinkdelay > 4)
 15904  00C6  3005               	movlw	5
 15905  00C7  0021               	movlb	1	; select bank1
 15906  00C8  026B               	subwf	_blinkdelay^(0+128),w
 15907  00C9  1C03               	skipc
 15908  00CA  28D4               	goto	i1l5307
 15909                           
 15910                           ;interrupts.c: 154: {
 15911                           ;interrupts.c: 155: if(Alarm)
 15912  00CB  0868               	movf	_Alarm^(0+128),w
 15913  00CC  1903               	btfsc	3,2
 15914  00CD  28D0               	goto	i1l86
 15915                           
 15916                           ;interrupts.c: 156: {
 15917                           ;interrupts.c: 157: __nop();
 15918  00CE  0000               	nop
 15919                           
 15920                           ;interrupts.c: 158: }
 15921  00CF  28D2               	goto	i1l5305
 15922  00D0                     i1l86:	
 15923                           
 15924                           ;interrupts.c: 159: else
 15925                           ;interrupts.c: 160: {
 15926                           ;interrupts.c: 161: LATC |= 0b00000010;
 15927  00D0  0022               	movlb	2	; select bank2
 15928  00D1  148E               	bsf	14,1	;volatile
 15929  00D2                     i1l5305:	
 15930                           
 15931                           ;interrupts.c: 162: }
 15932                           ;interrupts.c: 163: blinkdelay =0;
 15933  00D2  0021               	movlb	1	; select bank1
 15934  00D3  01EB               	clrf	_blinkdelay^(0+128)
 15935  00D4                     i1l5307:	
 15936                           
 15937                           ;interrupts.c: 164: }
 15938                           ;interrupts.c: 165: PIR1bits.TMR2IF =0;
 15939  00D4  0020               	movlb	0	; select bank0
 15940  00D5  1091               	bcf	17,1	;volatile
 15941                           
 15942                           ;interrupts.c: 167: }
 15943  00D6  28D8               	goto	i1l89
 15944  00D7                     i1l84:	
 15945                           
 15946                           ;interrupts.c: 168: else
 15947                           ;interrupts.c: 169: {
 15948                           ;interrupts.c: 171: __nop();
 15949  00D7  0000               	nop
 15950  00D8                     i1l89:	
 15951  00D8  0020               	movlb	0	; select bank0
 15952  00D9  0822               	movf	??_isr+1,w
 15953  00DA  00FF               	movwf	127
 15954  00DB  107E               	bcf	126,0	;clear compiler interrupt flag
 15955  00DC  0009               	retfie
 15956  00DD                     __end_of_isr:	
 15957                           
 15958                           	psect	text52
 15959  1CF0                     __ptext52:	
 15960 ;; *************** function i1_UARTchar *****************
 15961 ;; Defined at:
 15962 ;;		line 227 in file "UART.c"
 15963 ;; Parameters:    Size  Location     Type
 15964 ;;  data            1    wreg     unsigned char 
 15965 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 15966 ;;  NinethBit_ov    1    9[COMMON] unsigned char 
 15967 ;; Auto vars:     Size  Location     Type
 15968 ;;  data            1    0[BANK0 ] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;		None               void
 15971 ;; Registers used:
 15972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15973 ;; Tracked objects:
 15974 ;;		On entry : 0/0
 15975 ;;		On exit  : 0/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15982 ;;Total ram usage:        7 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:    1
 15985 ;; This function calls:
 15986 ;;		i1_CheckSum_byte
 15987 ;; This function is called by:
 15988 ;;		_isr
 15989 ;; This function uses a non-reentrant model
 15990 ;;
 15991                           
 15992                           
 15993                           ;psect for function i1_UARTchar
 15994  1CF0                     i1_UARTchar:	
 15995                           
 15996                           ;incstack = 0
 15997                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15998                           ;i1UARTchar@data stored from wreg
 15999  1CF0  0020               	movlb	0	; select bank0
 16000  1CF1  00A0               	movwf	i1UARTchar@data
 16001                           
 16002                           ;UART.c: 229: if(TXSTAbits.TX9)
 16003  1CF2  0023               	movlb	3	; select bank3
 16004  1CF3  1F1E               	btfss	30,6	;volatile
 16005  1CF4  2D35               	goto	i1l5187
 16006                           
 16007                           ;UART.c: 230: {
 16008                           ;UART.c: 232: if(!NinethBit_override)
 16009  1CF5  08F8               	movf	i1UARTchar@NinethBit_override,f
 16010  1CF6  1903               	btfsc	3,2
 16011  1CF7  2D1F               	goto	i1l5183
 16012  1CF8  2D2C               	goto	i1l5185
 16013  1CF9                     i1l5177:	
 16014                           ;UART.c: 236: {
 16015                           ;UART.c: 237: case 1:
 16016                           
 16017                           ;UART.c: 233: {
 16018                           ;UART.c: 235: switch (PARITY)
 16019                           
 16020                           
 16021                           ;UART.c: 238: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 16022  1CF9  0020               	movlb	0	; select bank0
 16023  1CFA  0820               	movf	i1UARTchar@data,w
 16024  1CFB  00FA               	movwf	??i1_UARTchar
 16025  1CFC  01FB               	clrf	??i1_UARTchar+1
 16026  1CFD  087A               	movf	??i1_UARTchar,w
 16027  1CFE  00F0               	movwf	i1CheckSum_byte@This
 16028  1CFF  087B               	movf	??i1_UARTchar+1,w
 16029  1D00  00F1               	movwf	i1CheckSum_byte@This+1
 16030  1D01  3003               	movlw	3
 16031  1D02  2D0C               	goto	L24
 16032  1D03                     i1l5179:	
 16033                           ;UART.c: 240: case 2:
 16034                           
 16035                           ;UART.c: 239: break;
 16036                           
 16037                           
 16038                           ;UART.c: 241: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 16039  1D03  0020               	movlb	0	; select bank0
 16040  1D04  0820               	movf	i1UARTchar@data,w
 16041  1D05  00FA               	movwf	??i1_UARTchar
 16042  1D06  01FB               	clrf	??i1_UARTchar+1
 16043  1D07  087A               	movf	??i1_UARTchar,w
 16044  1D08  00F0               	movwf	i1CheckSum_byte@This
 16045  1D09  087B               	movf	??i1_UARTchar+1,w
 16046  1D0A  00F1               	movwf	i1CheckSum_byte@This+1
 16047  1D0B  3002               	movlw	2
 16048  1D0C                     L24:	
 16049  1D0C  00FC               	movwf	??i1_UARTchar+2
 16050  1D0D  087C               	movf	??i1_UARTchar+2,w
 16051  1D0E  00F2               	movwf	i1CheckSum_byte@Odd_Even
 16052  1D0F  319B  2338  319C   	fcall	i1_CheckSum_byte
 16053  1D12  00FD               	movwf	??i1_UARTchar+3
 16054  1D13  0023               	movlb	3	; select bank3
 16055  1D14  081E               	movf	30,w	;volatile
 16056  1D15  067D               	xorwf	??i1_UARTchar+3,w
 16057  1D16  39FE               	andlw	-2
 16058  1D17  067D               	xorwf	??i1_UARTchar+3,w
 16059  1D18  2D34               	goto	L23
 16060  1D19                     i1l387:	
 16061                           ;UART.c: 243: case 3:
 16062                           
 16063                           ;UART.c: 242: break;
 16064                           
 16065                           
 16066                           ;UART.c: 244: TXSTAbits.TX9D = 1;
 16067  1D19  0023               	movlb	3	; select bank3
 16068  1D1A  141E               	bsf	30,0	;volatile
 16069                           
 16070                           ;UART.c: 245: break;
 16071  1D1B  2D35               	goto	i1l5187
 16072  1D1C                     i1l388:	
 16073                           ;UART.c: 246: default:
 16074                           
 16075                           
 16076                           ;UART.c: 247: TXSTAbits.TX9D = 0;
 16077  1D1C  0023               	movlb	3	; select bank3
 16078  1D1D  101E               	bcf	30,0	;volatile
 16079                           
 16080                           ;UART.c: 249: }
 16081                           
 16082                           ;UART.c: 248: break;
 16083  1D1E  2D35               	goto	i1l5187
 16084  1D1F                     i1l5183:	
 16085  1D1F  0021               	movlb	1	; select bank1
 16086  1D20  086A               	movf	_PARITY^(0+128),w
 16087                           
 16088                           ; Switch size 1, requested type "space"
 16089                           ; Number of cases is 3, Range of values is 1 to 3
 16090                           ; switch strategies available:
 16091                           ; Name         Instructions Cycles
 16092                           ; simple_byte           10     6 (average)
 16093                           ; direct_byte           15     9 (fixed)
 16094                           ; jumptable            263     9 (fixed)
 16095                           ;	Chosen strategy is simple_byte
 16096  1D21  3A01               	xorlw	1	; case 1
 16097  1D22  1903               	skipnz
 16098  1D23  2CF9               	goto	i1l5177
 16099  1D24  3A03               	xorlw	3	; case 2
 16100  1D25  1903               	skipnz
 16101  1D26  2D03               	goto	i1l5179
 16102  1D27  3A01               	xorlw	1	; case 3
 16103  1D28  1903               	skipnz
 16104  1D29  2D19               	goto	i1l387
 16105  1D2A  2D1C               	goto	i1l388
 16106                           
 16107                           ;UART.c: 250: }
 16108  1D2B  2D35               	goto	i1l5187
 16109  1D2C                     i1l5185:	
 16110                           
 16111                           ;UART.c: 251: else
 16112                           ;UART.c: 252: {
 16113                           ;UART.c: 253: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 16114  1D2C  3001               	movlw	1
 16115  1D2D  0579               	andwf	i1UARTchar@NinethBit_override_data,w
 16116  1D2E  00FA               	movwf	??i1_UARTchar
 16117  1D2F  0023               	movlb	3	; select bank3
 16118  1D30  081E               	movf	30,w	;volatile
 16119  1D31  067A               	xorwf	??i1_UARTchar,w
 16120  1D32  39FE               	andlw	-2
 16121  1D33  067A               	xorwf	??i1_UARTchar,w
 16122  1D34                     L23:	
 16123  1D34  009E               	movwf	30	;volatile
 16124  1D35                     i1l5187:	
 16125                           
 16126                           ;UART.c: 254: }
 16127                           ;UART.c: 255: }
 16128                           ;UART.c: 256: TXREG = data;
 16129  1D35  0020               	movlb	0	; select bank0
 16130  1D36  0820               	movf	i1UARTchar@data,w
 16131  1D37  0023               	movlb	3	; select bank3
 16132  1D38  009A               	movwf	26	;volatile
 16133  1D39  0008               	return
 16134  1D3A                     __end_ofi1_UARTchar:	
 16135                           
 16136                           	psect	text53
 16137  1B38                     __ptext53:	
 16138 ;; *************** function i1_CheckSum_byte *****************
 16139 ;; Defined at:
 16140 ;;		line 68 in file "MISC.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  This            2    0[COMMON] unsigned int 
 16143 ;;  Odd_Even        1    2[COMMON] unsigned char 
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;  CheckSum_byt    2    4[COMMON] unsigned int 
 16146 ;;  CheckSum_byt    1    7[COMMON] unsigned char 
 16147 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  1    wreg      unsigned char 
 16150 ;; Registers used:
 16151 ;;		wreg, status,2, status,0
 16152 ;; Tracked objects:
 16153 ;;		On entry : 0/0
 16154 ;;		On exit  : 0/0
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16157 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;Total ram usage:        8 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; This function calls:
 16164 ;;		Nothing
 16165 ;; This function is called by:
 16166 ;;		i1_UARTchar
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           
 16171                           ;psect for function i1_CheckSum_byte
 16172  1B38                     i1_CheckSum_byte:	
 16173                           
 16174                           ;MISC.c: 70: char i = 0;
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 16178  1B38  01F7               	clrf	i1CheckSum_byte@i
 16179                           
 16180                           ;MISC.c: 71: unsigned char Parity = 0;
 16181  1B39  01F6               	clrf	i1CheckSum_byte@Parity
 16182                           
 16183                           ;MISC.c: 72: unsigned int ThisTemp = This;
 16184  1B3A  0871               	movf	i1CheckSum_byte@This+1,w
 16185  1B3B  01F5               	clrf	i1CheckSum_byte@ThisTemp+1
 16186  1B3C  07F5               	addwf	i1CheckSum_byte@ThisTemp+1,f
 16187  1B3D  0870               	movf	i1CheckSum_byte@This,w
 16188  1B3E  01F4               	clrf	i1CheckSum_byte@ThisTemp
 16189  1B3F  07F4               	addwf	i1CheckSum_byte@ThisTemp,f
 16190                           
 16191                           ;MISC.c: 74: for (i =0; i<8; i++)
 16192  1B40  01F7               	clrf	i1CheckSum_byte@i
 16193  1B41  3008               	movlw	8
 16194  1B42  0277               	subwf	i1CheckSum_byte@i,w
 16195  1B43  1803               	btfsc	3,0
 16196  1B44  2B58               	goto	i1l4895
 16197  1B45                     i1l274:	
 16198                           
 16199                           ;MISC.c: 75: {
 16200                           ;MISC.c: 76: if((ThisTemp & 0x01) == 1)
 16201  1B45  1C74               	btfss	i1CheckSum_byte@ThisTemp,0
 16202  1B46  2B4B               	goto	i1l276
 16203                           
 16204                           ;MISC.c: 77: {
 16205                           ;MISC.c: 78: Parity++;
 16206  1B47  3001               	movlw	1
 16207  1B48  00F3               	movwf	??i1_CheckSum_byte
 16208  1B49  0873               	movf	??i1_CheckSum_byte,w
 16209  1B4A  07F6               	addwf	i1CheckSum_byte@Parity,f
 16210  1B4B                     i1l276:	
 16211                           
 16212                           ;MISC.c: 79: }
 16213                           ;MISC.c: 80: ThisTemp >>= 1;
 16214  1B4B  3001               	movlw	1
 16215  1B4C                     u619_25:	
 16216  1B4C  36F5               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 16217  1B4D  0CF4               	rrf	i1CheckSum_byte@ThisTemp,f
 16218  1B4E  0B89               	decfsz	9,f
 16219  1B4F  2B4C               	goto	u619_25
 16220  1B50  3001               	movlw	1
 16221  1B51  00F3               	movwf	??i1_CheckSum_byte
 16222  1B52  0873               	movf	??i1_CheckSum_byte,w
 16223  1B53  07F7               	addwf	i1CheckSum_byte@i,f
 16224  1B54  3008               	movlw	8
 16225  1B55  0277               	subwf	i1CheckSum_byte@i,w
 16226  1B56  1C03               	skipc
 16227  1B57  2B45               	goto	i1l274
 16228  1B58                     i1l4895:	
 16229                           
 16230                           ;MISC.c: 81: }
 16231                           ;MISC.c: 82: if(Odd_Even == 3)
 16232  1B58  0872               	movf	i1CheckSum_byte@Odd_Even,w
 16233  1B59  3A03               	xorlw	3
 16234  1B5A  1D03               	skipz
 16235  1B5B  2B62               	goto	i1l277
 16236                           
 16237                           ;MISC.c: 83: {
 16238                           ;MISC.c: 84: if(Parity % 2 == 0)
 16239  1B5C  1876               	btfsc	i1CheckSum_byte@Parity,0
 16240  1B5D  2B60               	goto	i1l4903
 16241                           
 16242                           ;MISC.c: 85: {
 16243                           ;MISC.c: 86: return 1;
 16244  1B5E  3001               	movlw	1
 16245  1B5F  0008               	return
 16246  1B60                     i1l4903:	
 16247                           
 16248                           ;MISC.c: 87: }
 16249                           ;MISC.c: 88: return 0;
 16250  1B60  3000               	movlw	0
 16251                           
 16252                           ;MISC.c: 89: }
 16253  1B61  0008               	return
 16254  1B62                     i1l277:	
 16255                           
 16256                           ;MISC.c: 90: else
 16257                           ;MISC.c: 91: {
 16258                           ;MISC.c: 92: if(Parity % 2 == 1)
 16259  1B62  1C76               	btfss	i1CheckSum_byte@Parity,0
 16260  1B63  2B66               	goto	i1l4913
 16261                           
 16262                           ;MISC.c: 93: {
 16263                           ;MISC.c: 94: return 1;
 16264  1B64  3001               	movlw	1
 16265  1B65  0008               	return
 16266  1B66                     i1l4913:	
 16267                           
 16268                           ;MISC.c: 95: }
 16269                           ;MISC.c: 96: return 0;
 16270  1B66  3000               	movlw	0
 16271  1B67  0008               	return
 16272  1B68                     __end_ofi1_CheckSum_byte:	
 16273                           
 16274                           	psect	text54
 16275  19BF                     __ptext54:	
 16276 ;; *************** function i1_UART_send_break *****************
 16277 ;; Defined at:
 16278 ;;		line 301 in file "UART.c"
 16279 ;; Parameters:    Size  Location     Type
 16280 ;;		None
 16281 ;; Auto vars:     Size  Location     Type
 16282 ;;		None
 16283 ;; Return value:  Size  Location     Type
 16284 ;;		None               void
 16285 ;; Registers used:
 16286 ;;		wreg
 16287 ;; Tracked objects:
 16288 ;;		On entry : 0/0
 16289 ;;		On exit  : 0/0
 16290 ;;		Unchanged: 0/0
 16291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;Total ram usage:        0 bytes
 16297 ;; Hardware stack levels used:    1
 16298 ;; This function calls:
 16299 ;;		Nothing
 16300 ;; This function is called by:
 16301 ;;		_isr
 16302 ;; This function uses a non-reentrant model
 16303 ;;
 16304                           
 16305                           
 16306                           ;psect for function i1_UART_send_break
 16307  19BF                     i1_UART_send_break:	
 16308                           
 16309                           ;UART.c: 303: TX1STA |= 0b00001000;
 16310                           
 16311                           ;incstack = 0
 16312                           ; Regs used in i1_UART_send_break: [wreg]
 16313  19BF  0023               	movlb	3	; select bank3
 16314  19C0  159E               	bsf	30,3	;volatile
 16315                           
 16316                           ;UART.c: 304: TXREG = 'd';
 16317  19C1  3064               	movlw	100
 16318  19C2  009A               	movwf	26	;volatile
 16319  19C3  0008               	return
 16320  19C4                     __end_ofi1_UART_send_break:	
 16321                           
 16322                           	psect	text55
 16323  19DC                     __ptext55:	
 16324 ;; *************** function i1_ReadUSART *****************
 16325 ;; Defined at:
 16326 ;;		line 281 in file "UART.c"
 16327 ;; Parameters:    Size  Location     Type
 16328 ;;		None
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  ReadUSART       1    1[COMMON] unsigned char 
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  1    wreg      unsigned char 
 16333 ;; Registers used:
 16334 ;;		wreg
 16335 ;; Tracked objects:
 16336 ;;		On entry : 0/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;Total ram usage:        2 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; This function calls:
 16347 ;;		Nothing
 16348 ;; This function is called by:
 16349 ;;		_isr
 16350 ;; This function uses a non-reentrant model
 16351 ;;
 16352                           
 16353                           
 16354                           ;psect for function i1_ReadUSART
 16355  19DC                     i1_ReadUSART:	
 16356                           
 16357                           ;UART.c: 283: char data;
 16358                           ;UART.c: 285: if(RCSTAbits.OERR)
 16359                           
 16360                           ;incstack = 0
 16361                           ; Regs used in i1_ReadUSART: [wreg]
 16362  19DC  0023               	movlb	3	; select bank3
 16363  19DD  189D               	btfsc	29,1	;volatile
 16364                           
 16365                           ;UART.c: 286: {
 16366                           ;UART.c: 287: RCSTAbits.CREN = 0;
 16367  19DE  121D               	bcf	29,4	;volatile
 16368                           
 16369                           ;UART.c: 288: }
 16370                           ;UART.c: 290: data = RCREG;
 16371  19DF  0819               	movf	25,w	;volatile
 16372  19E0  00F0               	movwf	??i1_ReadUSART
 16373  19E1  0870               	movf	??i1_ReadUSART,w
 16374  19E2  00F1               	movwf	i1ReadUSART@data
 16375                           
 16376                           ;UART.c: 292: return (data);
 16377  19E3  0871               	movf	i1ReadUSART@data,w
 16378  19E4  0008               	return
 16379  19E5                     __end_ofi1_ReadUSART:	
 16380                           
 16381                           	psect	text56
 16382  1A92                     __ptext56:	
 16383 ;; *************** function i1_READ_PS_2_PIN *****************
 16384 ;; Defined at:
 16385 ;;		line 223 in file "PS_2.c"
 16386 ;; Parameters:    Size  Location     Type
 16387 ;;  DATA_CLK        1    wreg     unsigned char 
 16388 ;; Auto vars:     Size  Location     Type
 16389 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 16390 ;; Return value:  Size  Location     Type
 16391 ;;                  1    wreg      unsigned char 
 16392 ;; Registers used:
 16393 ;;		wreg
 16394 ;; Tracked objects:
 16395 ;;		On entry : 0/0
 16396 ;;		On exit  : 0/0
 16397 ;;		Unchanged: 0/0
 16398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;Total ram usage:        1 bytes
 16404 ;; Hardware stack levels used:    1
 16405 ;; This function calls:
 16406 ;;		Nothing
 16407 ;; This function is called by:
 16408 ;;		_isr
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function i1_READ_PS_2_PIN
 16414  1A92                     i1_READ_PS_2_PIN:	
 16415                           
 16416                           ;incstack = 0
 16417                           ; Regs used in i1_READ_PS_2_PIN: [wreg]
 16418                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 16419  1A92  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 16420                           
 16421                           ;PS_2.c: 225: if(DATA_CLK == 0b00100000)
 16422  1A93  0870               	movf	i1READ_PS_2_PIN@DATA_CLK,w
 16423  1A94  3A20               	xorlw	32
 16424  1A95  1D03               	skipz
 16425  1A96  2A9E               	goto	i1l589
 16426                           
 16427                           ;PS_2.c: 226: {
 16428                           ;PS_2.c: 228: if((PORTA & 0b00100000) == 0b00100000)
 16429  1A97  0020               	movlb	0	; select bank0
 16430  1A98  1E8C               	btfss	12,5	;volatile
 16431  1A99  2A9C               	goto	i1l5211
 16432                           
 16433                           ;PS_2.c: 229: {
 16434                           ;PS_2.c: 230: return (1);
 16435  1A9A  3001               	movlw	1
 16436                           
 16437                           ;PS_2.c: 231: }
 16438  1A9B  0008               	return
 16439  1A9C                     i1l5211:	
 16440                           
 16441                           ;PS_2.c: 232: else
 16442                           ;PS_2.c: 233: {
 16443                           ;PS_2.c: 234: return 0;
 16444  1A9C  3000               	movlw	0
 16445                           
 16446                           ;PS_2.c: 235: }
 16447                           ;PS_2.c: 236: }
 16448  1A9D  0008               	return
 16449  1A9E                     i1l589:	
 16450                           
 16451                           ;PS_2.c: 237: else
 16452                           ;PS_2.c: 238: {
 16453                           ;PS_2.c: 240: if((PORTA & 0b00010000) == 0b00010000)
 16454  1A9E  0020               	movlb	0	; select bank0
 16455  1A9F  1E0C               	btfss	12,4	;volatile
 16456  1AA0  2AA3               	goto	i1l5221
 16457                           
 16458                           ;PS_2.c: 241: {
 16459                           ;PS_2.c: 242: return (1);
 16460  1AA1  3001               	movlw	1
 16461                           
 16462                           ;PS_2.c: 243: }
 16463  1AA2  0008               	return
 16464  1AA3                     i1l5221:	
 16465                           
 16466                           ;PS_2.c: 244: else
 16467                           ;PS_2.c: 245: {
 16468                           ;PS_2.c: 246: return 0;
 16469  1AA3  3000               	movlw	0
 16470  1AA4  0008               	return
 16471  1AA5                     __end_ofi1_READ_PS_2_PIN:	
 16472  007E                     btemp	set	126	;btemp
 16473  007E                     pic14e$flags	set	126
 16474  007E                     wtemp	set	126
 16475  007E                     wtemp0	set	126
 16476  0080                     wtemp1	set	128
 16477  0082                     wtemp2	set	130
 16478  0084                     wtemp3	set	132
 16479  0086                     wtemp4	set	134
 16480  0088                     wtemp5	set	136
 16481  007F                     wtemp6	set	127
 16482  007E                     ttemp	set	126
 16483  007E                     ttemp0	set	126
 16484  0081                     ttemp1	set	129
 16485  0084                     ttemp2	set	132
 16486  0087                     ttemp3	set	135
 16487  007F                     ttemp4	set	127
 16488  007E                     ltemp	set	126
 16489  007E                     ltemp0	set	126
 16490  0082                     ltemp1	set	130
 16491  0086                     ltemp2	set	134
 16492  0080                     ltemp3	set	128


Data Sizes:
    Strings     454
    Constant    507
    Data        14
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     72      76
    BANK2            80     63      79
    BANK3            80      9      24
    BANK4            80      0      24
    BANK5            80     65      65
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_31(CODE[33]), STR_21(CODE[21]), STR_13(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> PS_2_Update@buf(BANK5[60]), SetBaud@buf(BANK2[50]), Init_System@buf(BANK1[60]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1042$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_37(CODE[29]), STR_36(CODE[22]), STR_35(CODE[18]), STR_34(CODE[17]), 
		 -> STR_33(CODE[24]), STR_32(CODE[23]), PS_2_Update@buf(BANK5[60]), STR_30(CODE[3]), 
		 -> STR_29(CODE[44]), STR_28(CODE[18]), STR_27(CODE[3]), STR_26(CODE[22]), 
		 -> STR_25(CODE[18]), STR_24(CODE[17]), STR_23(CODE[24]), STR_22(CODE[23]), 
		 -> SetBaud@buf(BANK2[50]), STR_20(CODE[24]), STR_19(CODE[3]), STR_18(CODE[22]), 
		 -> STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[24]), STR_14(CODE[23]), 
		 -> Init_System@buf(BANK1[60]), STR_12(CODE[3]), STR_11(CODE[20]), STR_10(CODE[19]), 
		 -> STR_9(CODE[17]), STR_8(CODE[22]), STR_7(CODE[21]), STR_6(CODE[24]), 
		 -> STR_5(CODE[35]), STR_4(CODE[3]), Version(BANK4[4]), STR_3(CODE[19]), 
		 -> STR_2(CODE[26]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte

Critical Paths under _main in BANK0

    _main->_Keyboard_Connected
    _ReadVoltage->___flmul
    ___lwtofl->___flpack
    ___flmul->___fldiv
    ___fldiv->___lwtofl
    _InternalADC_Read->_delayUS
    _PS_2_INIT->_Clock_TRIS
    _PS_2_INIT->_Data_TRIS
    _PS_2_INIT->_INIT_PS_2_INTERRUPT
    _PS_2_Update->_SetBaud
    _SetBaud->_sprintf
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->_delayUS
    _Init_System->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS

Critical Paths under _isr in BANK0

    _isr->i1_UARTchar

Critical Paths under _main in BANK1

    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _PS_2_Update->_SetBaud

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_PS_2_Update
    _Keyboard_Connected->_PS_2_Update

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  154527
                                             69 BANK0      1     1      0
                                             71 BANK1      1     1      0
                _ConfigureOscillator
                            _InitApp
                     _Init_PS_2_Send
                        _Init_System
                 _Keyboard_Connected
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _PS_2_Update
                        _ReadVoltage
                     _UARTstringWAIT
                             ___flge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___flge                                              16     8      8     648
                                              5 BANK0     16     8      8
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                         11     7      4   11524
                                             60 BANK0      5     1      4
                                              0 BANK1      6     6      0
                 _DisableInternalADC
                   _InternalADC_Read
                            ___fldiv
                            ___flmul
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             5     1      4    2481
                                             15 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             20    12      8    3015
                                             40 BANK0     20    12      8
                            ___fldiv (ARG)
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             20    12      8    2944
                                             20 BANK0     20    12      8
                           ___flpack
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2373
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     5     3      2    3016
                                             15 BANK0      5     3      2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0      84
                         _Clock_TRIS
                          _Data_TRIS
                _INIT_PS_2_INTERRUPT
 ---------------------------------------------------------------------------------
 (2) _INIT_PS_2_INTERRUPT                                  1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Connected                                   4     4      0   56388
                                             65 BANK0      4     4      0
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                        _PS_2_Update
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _PS_2_Update                                         74    74      0   48339
                                              0 BANK3      9     9      0
                                              0 BANK5     65    65      0
                      _CheckSum_byte
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                       _Reverse_Byte
                           _Send_PS2
                            _SetBaud
                    _UART_send_break
                           _UARTchar
                     _UARTstringWAIT
                             ___lmul
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     290
                                              5 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetBaud                                             76    71      5   22974
                                             52 BANK0     13     8      5
                                              0 BANK2     63    63      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                          _WriteBaud
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WriteBaud                                           19    12      7    5131
                                             22 BANK0     19    12      7
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (4) _WriteFlash_Sequential                               78    74      4    4742
                                             15 BANK0      7     3      4
                                              0 BANK1     71    71      0
                         _BlockErase
                    _ReadFlash_2Byte
                             _UNLOCK
                            _delayUS
 ---------------------------------------------------------------------------------
 (5) _BlockErase                                           4     2      2     139
                                              5 BANK0      4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (5) _UNLOCK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Reverse_Byte                                         4     4      0     306
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ISNUMBER                                             1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Shift                               1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_FunctionE0                          1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code_Function                            1     1      0      62
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Decode_Scan_Code                                     1     1      0      65
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         74    74      0   17349
                                             52 BANK0      5     5      0
                                              0 BANK1     69    69      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    15      8    1929
                                             29 BANK0     23    15      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                             19 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       4     2      2    9099
                                             20 BANK0      4     2      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             7     5      2    3095
                                             13 BANK0      7     5      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _ReadBaud                                            16    12      4    1308
                                             23 BANK0     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_4Byte                                     13     9      4     873
                                             10 BANK0     13     9      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (5) _ReadFlash_2Byte                                      5     2      3     555
                                              5 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _InitUART                                            21    16      5    1636
                                             19 BANK0     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (4) _baudUSART                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              5 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            2     2      0      34
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OpenUSART                                            3     1      2     387
                                              5 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _CloseUSART                                           1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_PS_2_Send                                       0     0      0    7978
             _PS_2_DISABLE_INTERRUPT
              _PS_2_ENABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _Send_PS2                                             9     9      0    4931
                                             15 BANK0      9     9      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
              _PS_2_ENABLE_INTERRUPT
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    2985
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _READ_PS_2_PIN                                        1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_ENABLE_INTERRUPT                                2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Data_TRIS                                            1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clock_TRIS                                           1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        8     5      3    1316
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _PS_2_DISABLE_INTERRUPT                               2     2      0      31
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0     542
                                              1 BANK0      4     4      0
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                  i1_UART_send_break
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (9) i1_UARTchar                                           7     5      2     427
                                              8 COMMON     6     4      2
                                              0 BANK0      1     1      0
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (10) i1_CheckSum_byte                                     8     5      3     265
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (9) i1_UART_send_break                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_ReadUSART                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_PS_2_Send
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _Keyboard_Connected
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _PS_2_Update
       _CheckSum_byte
       _Decode_Scan_Code
       _Decode_Scan_Code_Function
       _Decode_Scan_Code_FunctionE0
       _Decode_Scan_Code_Shift
       _ISNUMBER
       _PS_2_DISABLE_INTERRUPT
       _PS_2_ENABLE_INTERRUPT
       _Reverse_Byte
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _PS_2_ENABLE_INTERRUPT
         _READ_PS_2_PIN
         _delayUS
       _SetBaud
         _InitUART
           _CloseUSART
           _OpenUSART
           _ReadUSART
           ___lldiv
           _baudUSART
         _ReadBaud
           _ReadFlash_4Byte
             _ReadFlash_2Byte
         _UARTstringWAIT
           _UARTchar
             _CheckSum_byte
           _delayUS
         _WriteBaud
           _WriteFlash_Sequential
             _BlockErase
               _UNLOCK
             _ReadFlash_2Byte
             _UNLOCK
             _delayUS
         _delayUS
         _sprintf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
       _UART_send_break
       _UARTchar
         _CheckSum_byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       ___lmul
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _delayUS
   _PS_2_DISABLE_INTERRUPT
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _INIT_PS_2_INTERRUPT
   _PS_2_Update
     _CheckSum_byte
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _PS_2_DISABLE_INTERRUPT
     _PS_2_ENABLE_INTERRUPT
     _Reverse_Byte
     _Send_PS2
       _CheckSum_byte
       _Clock_TRIS
       _Data_TRIS
       _PS_2_ENABLE_INTERRUPT
       _READ_PS_2_PIN
       _delayUS
     _SetBaud
       _InitUART
         _CloseUSART
         _OpenUSART
         _ReadUSART
         ___lldiv
         _baudUSART
       _ReadBaud
         _ReadFlash_4Byte
           _ReadFlash_2Byte
       _UARTstringWAIT
         _UARTchar
           _CheckSum_byte
         _delayUS
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _ReadFlash_2Byte
           _UNLOCK
           _delayUS
       _delayUS
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _UART_send_break
     _UARTchar
       _CheckSum_byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     ___lmul
     _delayUS
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___fldiv
       ___flpack
       ___lwtofl (ARG)
         ___flpack
     ___flmul
       ___fldiv (ARG)
         ___flpack
         ___lwtofl (ARG)
           ___flpack
       ___flpack (ARG)
       ___lwtofl (ARG)
         ___flpack
     ___lwtofl
       ___flpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___flge
   _delayUS

 _isr (ROOT)
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_UART_send_break
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     46      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     3F      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      18      11       30.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      18      13       30.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50     41      41      15       81.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     165      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     165      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jan 23 18:50:08 2015

              _PS_2_DISABLE_INTERRUPT 1AF6                     ??_ReadFlash_2Byte 0028  
                   ??_ReadFlash_4Byte 002E                                     _i 016C  
                        ___fldiv@cntr 0045                          ___fldiv@sign 0047  
                         __CFG_CP$OFF 0000                    Data_TRIS@direction 0025  
                ?_INIT_PS_2_INTERRUPT 0070                          ___flpack@arg 0025  
                         __CFG_LVP$ON 0000                          ___flpack@exp 0029  
                                 l160 0E5C                                   l412 1BFC  
                                 l172 0FE6                                   l414 1C1B  
                                 l424 1783                                   l274 1B76  
                                 l266 07D1                                   l370 1C4A  
                                 l276 1B7C                                   l268 07EA  
                                 l277 1B93                                   l374 1C58  
                                 l376 1C61                                   l802 0D16  
                                 l803 0D6C                                   l387 1D66  
                                 l564 1A00                                   l388 1D69  
                                 l741 0795                                   l574 1A5A  
                                 l569 1A0B                                   l729 0550  
                                 l659 03CD                                   l589 1A8C  
                                 l749 0698                                   l951 1C7C  
                                 l954 1CA1                                   l887 1BED  
                                 l992 14E5                                   l896 1A14  
                                 l989 14C7                                   _MEM 0230  
                                 _PR2 001B                                   _isr 0004  
                        __CFG_BORV$LO 0000                                   wreg 0009  
                        ___flmul@cntr 005A                          ___flmul@sign 005B  
          __end_of_ScanCodeFunctionE0 09D3                         ___flpack@sign 002A  
                                l1170 1080                                  l1164 1066  
                                l6111 0DDB                                  l6121 0DDE  
                                l6123 0DFB                                  l6051 0D26  
                                l6027 0CF3                                  l7003 13F8  
                                l6211 1043                                  l5155 1FC4  
                                l6133 0DFE                                  l6109 0DBE  
                                l6053 0D43                                  l6037 0D1B  
                                l6029 0D10                                  l7021 1437  
                                l6221 106B                                  l6213 104E  
                                l6135 0E1B                                  l6071 0D71  
                                l6063 0D46                                  l6039 0D21  
                                l7015 1422                                  l6223 1074  
                                l6215 1053                                  l6207 103A  
                                l5159 1FED                                  l6145 0E1E  
                                l6073 0D77                                  l6065 0D63  
                                l7033 1455                                  l7009 140D  
                                l5521 1D6C                                  l6161 1AC9  
                                l6401 039D                                  l6241 012A  
                                l5443 07F4                                  l6147 0E3B  
                                l6083 0D7A                                  l7051 147C  
                                l7027 144C                                  l5515 1D44  
                                l5523 1D79                                  l5611 12C2  
                                l6403 038B                                  l7131 0EFE  
                                l7107 0E86                                  l6085 0D97  
                                l7045 1467                                  l5541 1C3F  
                                l5517 1D4E                                  l5525 1D85  
                                l6173 1AB6                                  l5613 1333  
                                l5605 1315                                  l6501 048A  
                                l6405 03A3                                  l6341 031D  
                                l6309 02D1                                  l6261 0196  
                                l5703 1A8A                                  l6095 0D9A  
                                l7063 149A                                  l7039 145E  
                                l6191 1009                                  l6415 03BA  
                                l6271 01F0                                  l6239 0128  
                                l7151 0F7F                                  l4921 1A77  
                                l5713 1A90                                  l6097 0DB7  
                                l7057 1485                                  l5545 1C44  
                                l5537 1C39                                  l6185 1A6C  
                                l6505 0495                                  l6361 0346  
                                l6353 0337                                  l6409 03AB  
                                l6337 0314                                  l6329 0301  
                                l6345 0326                                  l6441 0406  
                                l6273 01F4                                  l7153 0F83  
                                l7129 0EF8                                  l5467 1B91  
                                l5459 1B89                                  l5731 0BCF  
                                l5563 1C63                                  l5555 1C51  
                                l5723 1C1E                                  l5643 137F  
                                l6195 1013                                  l6523 04BB  
                                l6419 03C4                                  l6283 024E  
                                l6259 0194                                  l7171 0FFC  
                                l7147 0F59                                  l7139 0F1D  
                                l5477 1B97                                  l5549 1C4C  
                                l5821 14C9                                  l5645 13A4  
                                l6533 04D4                                  l6525 04A9  
                                l6461 042E                                  l6453 041F  
                                l6437 03E6                                  l6429 03DA  
                                l6357 033E                                  l6365 034C  
                                l6285 0254                                  l7165 0FE8  
                                l4919 1A71                                  l5559 1C5A  
                                l5655 1DEC                                  l5831 14F4  
                                l6703 06E9                                  l6607 0578  
                                l6551 04E1                                  l6535 04D7  
                                l6527 04C1                                  l6391 0372  
                                l6295 02AE                                  l7159 0FD0  
                                l5665 1E1A                                  l5657 1DFA  
                                l5681 1CC4                                  l5841 150B  
                                l5825 14CE                                  l6721 0743  
                                l6561 0510                                  l6553 04F9  
                                l6537 04C2                                  l6481 045B  
                                l6465 0437                                  l6457 0426  
                                l6393 038A                                  l6369 0357  
                                l6297 02B6                                  l6801 1124  
                                l7169 0FF7                                  l5771 11F7  
                                l5819 14C5                                  l5923 1A4B  
                                l6723 0748                                  l6731 0757  
                                l6627 05D1                                  l6563 04FA  
                                l6539 04DD                                  l6491 0462  
                                l6379 036D                                  ?_isr 0070  
      __size_of_PS_2_ENABLE_INTERRUPT 0015                                  l5669 1E25  
                                l5773 11FB                                  l5685 1CDC  
                                l5861 158D                                  l6901 1606  
                                l6741 0793                                  l6725 074D  
                                l6733 0764                                  l6653 0610  
                                l6637 05FC                                  l6549 04F3  
                                l6565 0516                                  l6477 0455  
                                l6493 0477                                  l6389 0384  
                                l5679 1CB6                                  l5599 12EF  
                                l6727 0752                                  l6735 076C  
                                l6743 0796                                  l6647 0604  
                                l6559 050C                                  l6487 0474  
                                l6479 0443                                  l6591 055F  
                                l6807 113E                                  l5689 1CE7  
                                l5857 153D                                  l5849 1538  
                                l6921 1669                                  l6905 160F  
                                l5953 177D                                  l6737 077F  
                                l6673 068F                                  l6665 0641  
                                l6577 0537                                  l6497 0481  
                                l6489 045D                                  l6825 11A3  
                                l5859 14A4                                  l6923 166E  
                                l6931 1685                                  l6691 06C4  
                                l6683 06AD                                  l6587 0551  
                                l6819 1183                                  l6925 1673  
                                l6933 168D                                  l5981 17DB  
                                l5949 176A                                  l6861 0C5B  
                                l6845 0C0C                                  l6919 1664  
                                l5975 17CD                                  l5967 17AC  
                                l6695 06D2                                  l6687 06BB  
                                l6679 06A4                                  l6599 056C  
                                l6839 0BF2                                  l5889 1B08  
                                l6929 1678                                  l5977 17D1  
                                l5985 17E0                                  l6873 0C7B  
                                l6857 0C51                                  _BAUD 022C  
                                l5979 17D6                                  l5987 17ED  
                                l6699 06DB                                  l6963 1EA0  
                                l5989 17F4                                  l6965 1ECC  
                                l6869 0C71                                  l6991 13CE  
                                l5999 1ADC                                  l6975 1ED6  
                                l6985 13B9                                  l6997 13E3  
                                _ECHO 00E9                                  STR_1 0B52  
                                STR_2 0A88                                  STR_3 0B68  
                                STR_4 0B52                                  STR_5 0A27  
                                STR_6 0AD2                                  STR_7 0B2C  
                                STR_8 0B01                                  STR_9 0BB0  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 0167         __end_of_PS_2_ENABLE_INTERRUPT 0BD7  
                                _PIE1 0091                                  u7035 1BE4  
                                i1l63 007C                                  u7055 1BB7  
                                u7225 1DEF                                  u8105 1088  
                                u7315 1CD2                                  u8035 1048  
                                i1l84 00D7                                  i1l76 0085  
                                u7245 1DFB                                  u7165 1DA8  
                                u7325 1CDD                                  u8205 0232  
                                i1l86 00D0                                  i1l78 00B6  
                                u7255 1E0F                                  u7415 1F60  
                                u8055 1060                                  _RALT 01AC  
                                i1l89 00D8                                  u7265 1E1B  
                                u7425 1F83                                  u7505 1547  
                                u8225 0292                                  u7195 1376  
                                u8075 106E                                  u7445 122D  
                                u7605 1E63                                  u7525 1EE0  
                                u8165 0178                                  u7295 1CB9  
                                u7615 1E6E                                  u7535 1F15  
                                u7625 1E79                                  u8185 01D4  
                                u7485 152E                                  u7575 1E35  
                                u7655 16F6                                  u6953 07E3  
                                u7585 1E41                                  u7665 174B  
                                u7595 1E4D                                  u7675 1768  
                                u9355 0711                                  u9435 114C  
                                u9515 0C1A                                  u9365 0721  
                                u9445 115F                                  u9525 0C2D  
                                u9615 15DA                                  u9455 1184  
                                u6985 1B7D                                  u9625 15F4  
                                u9465 1198                                  u9545 0C5C  
                                u9635 1604                                  u9395 1C82  
                                u9475 11A4                                  u9555 0C63  
                                u7985 1014                                  u9585 0C7C  
                                u7995 101B                                  u9675 1EB7  
                                u9595 0C83                                  _WPUA 020C  
                                _WPUC 020E                          __CFG_WRT$OFF 0000  
                                _main 0E48                    UARTstringWAIT@data 0034  
                                fsr0h 0005                                  fsr1h 0007  
                                fsr0l 0004                                  indf0 0000  
                                indf1 0001                                  fsr1l 0006  
                                btemp 007E                   baudUSART@baudconfig 0025  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 0156                                  start 00DD  
                                ttemp 007E                                  wtemp 007E  
                       __CFG_IESO$OFF 0000                      Reverse_Byte@This 0028  
           WriteFlash_Sequential@temp 00E3                      Reverse_Byte@temp 0027  
                       __CFG_MCLRE$ON 0000                            _BlockErase 1B99  
                         ?i1_UARTchar 0078               ?_Decode_Scan_Code_Shift 0070  
                     __end_of_InitApp 1B38                       __end_of_SetBaud 1800  
                          _Clock_TRIS 19F8                         ??_Init_System 0054  
              __size_of_READ_PS_2_PIN 0012                                 ??_isr 0021  
                 _Right_Shift_Key_old 016B                        _Init_PS_2_Send 13AC  
                   ??i1_READ_PS_2_PIN 0070       UARTchar@NinethBit_override_data 002E  
   i1UARTchar@NinethBit_override_data 0079                 ??_INIT_PS_2_INTERRUPT 0025  
           _Decode_Scan_Code_Function 1A5D                           ReadBaud@row 0037  
     WriteFlash_Sequential@amountTemp 00E2                         ??_ReadVoltage 0060  
                          _CloseUSART 1A31                                 ?_main 0070  
            __size_ofi1_CheckSum_byte 0030                       __end_of___fldiv 11CA  
                               STR_10 0B55                                 STR_11 0B41  
                               STR_12 0B52                                 STR_20 0AA2  
                               STR_21 0B17                                 STR_13 0B17  
                               STR_30 0B52                                 STR_22 0AEA  
                               STR_14 0AEA                                 STR_23 0ABA  
                               STR_15 0ABA                                 STR_31 0A4A  
                               STR_24 0B9F                                 STR_32 0AEA  
                               STR_16 0B9F                                 STR_25 0B8D  
                               STR_33 0ABA                                 STR_17 0B8D  
                       __CFG_WDTE$OFF 0000                                 STR_34 0B9F  
                               STR_26 0A11                                 STR_18 0A11  
                               STR_27 0B52                                 STR_19 0B52  
                               STR_35 0B8D                                 STR_36 0A11  
                               STR_28 0B7B                                 STR_37 0A6B  
                               STR_29 09FB                       __end_of___flmul 0CA9  
                    __end_of_ISNUMBER 1A4D                       __end_of___lldiv 1E2E  
                               _CKPPS 0E25                       __end_of___llmod 1CF0  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 _IOCAP 0391  
                               i1l274 1B45                                 i1l276 1B4B  
                               i1l277 1B62                                 i1l387 1D19  
                               i1l388 1D1C                                 i1l589 1A9E  
                               _RCREG 0199                                 _RCSTA 019D  
                               _SPBRG 019B                  _PS_2_Read_Data_First 01A0  
                               _PORTA 000C                  _PS_2_Read_Data_Forth 01A2  
                        InitUART@Baud 0033                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 1A6E  
                               _Alarm 00E8                  _PS_2_Read_Data_Third 01A6  
                     __end_of_delayUS 07FD                      _InternalADC_Read 1C6E  
                 ___lmul@multiplicand 0029                        __CFG_FCMEN$OFF 0000  
          __end_of_Keyboard_Connected 1ED8                          InitUART@temp 0044  
               _WriteFlash_Sequential 12BA                 ReadFlash_2Byte@column 0027  
                    __end_of_UARTchar 1D8A                            SetBaud@buf 0120  
                     __end_of_dpowers 09FB                    __size_of_PS_2_INIT 000C  
                               main@i 00E7                                 isr@rx 0024  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
             InternalADC_Read@channel 0033                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 1593                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 1ADE                         _ScanCodeSHIFT 08F5  
                     _UART_send_break 19C4                       __initialization 00DF  
              __end_of_Init_PS_2_Send 149F                    __size_of_Data_TRIS 000B  
                        __end_of_main 1000                      __end_of_InitUART 12BA  
                          _Read_Timer 016D                      ??_UARTstringWAIT 0036  
                         isr@Rx_fault 0023                      __end_of_ReadBaud 1F9A  
          __end_of_DisableInternalADC 19DC                      __end_of_ScanCode 08F5  
                      __CFG_LPBOR$OFF 0000                      __end_of_Send_PS2 0E48  
                              ??_main 0065          __end_of_ScanCodeFunctionNoE0 0884  
                      __CFG_PLLEN$OFF 0000                   __end_of_Init_System 169B  
                        ReadBaud@temp 0043                      i1CheckSum_byte@i 0077  
       Decode_Scan_Code_Function@Code 0025                   __end_of_ReadVoltage 1109  
               ReadFlash_4Byte@column 002C                                _ADCON0 009D  
                              _ADCON1 009E                   __size_ofi1_UARTchar 004A  
                    ___llmod@dividend 0037                                _ADRESH 009C  
                              _ADRESL 009B                      __end_of___flpack 109B  
                       _READ_PS_2_PIN 1A80                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                              _HFIOFS 04D0                                _RC1STA 019D  
                              _RC2PPS 0EA2                                i1l5211 1A9C  
                              i1l5221 1AA3                                i1l5305 00D2  
                              i1l5241 002A                                i1l5307 00D4  
                              i1l5261 0060                                i1l5253 0048  
                              i1l5245 0030                                i1l5183 1D1F  
                              i1l5271 007A                                i1l5177 1CF9  
                              i1l5185 1D2C                                i1l5179 1D03  
                              i1l5187 1D35                                i1l5291 00A7  
                              i1l5283 0095                                i1l5267 0072  
                              i1l5293 00B3                                i1l4903 1B60  
                              i1l4913 1B66                                i1l4895 1B58  
                              _INTCON 000B                                _FVRCON 0117  
                              _PARITY 00EA                                _PMADRH 0192  
                              _PMADRL 0191                      __end_of___lwtofl 1AF6  
                              _PMDATH 0194                                _PMDATL 0193  
                              _PMCON1 0195                                _PMCON2 0196  
                  __size_of_ReadUSART 000A                                _OSCCON 0099  
                              u619_25 1B4C                                u660_25 001A  
                              u663_25 0037                                u666_25 004F  
                              u668_25 0062                                _SPBRGH 019C  
                              _TX1STA 019E                                _UNLOCK 1A0E  
               _PS_2_Read_Data_Second 01A4                             ??_InitApp 0025  
               ??_ConfigureOscillator 0025                                _Delete 0166  
                      __CFG_PWRTE$OFF 0000                             ??_SetBaud 0059  
                         ?_BlockErase 0025                         InitUART@spbrg 0040  
                         SetBaud@Baud 0054                    __size_of_OpenUSART 003F  
                     ?_Init_PS_2_Send 0070                                ___flge 1F9A  
                   ?_Decode_Scan_Code 0070                                ___lmul 1000  
                           ??___fldiv 003C                        __CFG_STVREN$ON 0000  
                           ??___flmul 0050                             ??___lldiv 002D  
                         ?_Clock_TRIS 0070                             ??___llmod 003B  
                         SetBaud@temp 015A                     __end_of_PS_2_INIT 1A25  
                  ??_Decode_Scan_Code 0025                          ?i1_ReadUSART 0070  
                           ??_delayUS 0029  __size_of_Decode_Scan_Code_FunctionE0 0013  
                         ?_CloseUSART 0070                ?_WriteFlash_Sequential 002F  
                     SetBaud@Baudtemp 0152                __size_of_CheckSum_byte 0031  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 1A0E                             ??_sprintf 0045  
             i1READ_PS_2_PIN@DATA_CLK 0070                            ___flge@ff1 0025  
                          ___flge@ff2 0029                          ?_PS_2_Update 0070  
             __end_of_UART_send_break 19C9                       _ReadFlash_2Byte 1BCA  
                     _ReadFlash_4Byte 1D8A                            ___fldiv@f1 0038  
                          ___fldiv@f2 0034                            ___fldiv@f3 0041  
             __end_of__initialization 0115                    __size_of_WriteBaud 005E  
                          ___flmul@f1 0048                            ___flmul@f2 004C  
                      PS_2_Update@buf 02A0               ?_PS_2_DISABLE_INTERRUPT 0070  
                           ?_ISNUMBER 0070                    __size_of_baudUSART 0009  
                      __pcstackCOMMON 0070                          __pidataBANK2 07FD  
                        __pidataBANK4 1A25                             ?_UARTchar 002D  
                  InitUART@baudconfig 0042                           _Init_System 1593  
                   __end_of_ReadUSART 19F8                            ___lwtofl@c 002F  
                         _ReadVoltage 109B                       ReadVoltage@temp 00A4  
                        WriteBaud@row 0036                        _OPTION_REGbits 0095  
                 ReadFlash_4Byte@temp 0033                         ReadUSART@data 0026  
                         _SinLEDtimer 0228    __size_of_Decode_Scan_Code_Function 0011  
                   __end_of_OpenUSART 1C6E                   __size_of_BlockErase 0031  
                     WriteBaud@Parity 003C                     Send_PS2@oddparity 0033  
                          __pbssBANK0 0066                            __pbssBANK1 00E8  
                          __pbssBANK2 015F                            __pbssBANK3 01A0  
                          __pbssBANK4 0220                   __size_of_Clock_TRIS 000B  
                           ?_InitUART 0033                             ?_ReadBaud 0037  
      __end_of_PS_2_DISABLE_INTERRUPT 1B15                    ReadVoltage@voltage 00A0  
                             ?_UNLOCK 0070                       i1_READ_PS_2_PIN 1A92  
                 __size_of_CloseUSART 000E                             ?_Send_PS2 0070  
                          ??_ISNUMBER 0025                  _ScanCodeFunctionNoE0 0800  
            __end_of_InternalADC_Read 1CAD                    _ScanCodeFunctionE0 0966  
                       _CheckSum_byte 1B68                            __pmaintext 0E48  
                        ??i1_UARTchar 007A                           _ParityTyped 01AB  
                       BlockErase@row 0025                               ?___flge 0025  
                             ?___lmul 0025                   i1CheckSum_byte@This 0070  
                       _Caps_Lock_Key 0164                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 002F  
                          _blinkdelay 00EB                             ?___flpack 0025  
                      ___lmul@product 002D                 i1CheckSum_byte@Parity 0076  
                           ?___lwtofl 002F                     __end_of_WriteBaud 1F36  
                     ??_READ_PS_2_PIN 0025                     __end_of_baudUSART 19EE  
             __end_of_ReadFlash_2Byte 1BFC               __end_of_ReadFlash_4Byte 1DDB  
                             _OSCSTAT 009A                   Clock_TRIS@direction 0025  
                             _PPSLOCK 0E0F                    __end_ofi1_UARTchar 1D3A  
                          ??_InitUART 0038                            ??_ReadBaud 003B  
               READ_PS_2_PIN@DATA_CLK 0025                      ?_UART_send_break 0070  
               _PS_2_ENABLE_INTERRUPT 0BC2                       __size_of_UNLOCK 000B  
                             _InitApp 1B15                            ??_Send_PS2 002F  
                  _Keyboard_Connected 1E83                               _SetBaud 169B  
                      InitUART@config 0043                        ?_CheckSum_byte 0025  
         __end_of_INIT_PS_2_INTERRUPT 1A5D                        InitUART@parity 0037  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0025  
                             _Version 0234                       __size_of___flge 0066  
                             ___fldiv 1109                       __size_of___lmul 0030  
                             ___flmul 0BD7                   ?_Keyboard_Connected 0070  
                             ___lldiv 1DDB                               ___llmod 1CAD  
                          ??___flpack 002B                               _delayUS 07C8  
                             __ptext1 1F9A                               __ptext2 109B  
                             __ptext3 1ADE                               __ptext4 0BD7  
                             __ptext5 1109                               __ptext6 1030  
                             __ptext7 1C6E                               __ptext8 19D5  
                             __ptext9 1A19                            ??___lwtofl 0033  
                __size_ofi1_ReadUSART 0009                               _dpowers 09D3  
                           _T2CONbits 001C               i1CheckSum_byte@ThisTemp 0074  
                        __size_of_isr 00D9           WriteFlash_Sequential@amount 0032  
         WriteFlash_Sequential@buffer 0031                    _DisableInternalADC 19D5  
         WriteFlash_Sequential@spaces 00E5               __end_ofi1_READ_PS_2_PIN 1AA5  
                ??_Keyboard_Connected 0061                               _sprintf 149F  
                             clrloop0 19D0                     _Caps_Lock_Key_old 0165  
                end_of_initialization 0115                       i1ReadUSART@data 0071  
                             init_ram 19C9                   ?_DisableInternalADC 0070  
                             initloop 19CA                      ??_Init_PS_2_Send 0038  
        ?_Decode_Scan_Code_FunctionE0 0070                  __size_of_PS_2_Update 06AF  
                     ___lldiv@divisor 0025                       ___lldiv@counter 0032  
                        ??_BlockErase 0027                             _RCSTAbits 019D  
                        ??_Clock_TRIS 0025                          __pstringtext 0800  
            _PS_2_Read_Data_FirstTEMP 0220                       i1_CheckSum_byte 1B38  
             ??_WriteFlash_Sequential 0033                          ??_CloseUSART 0025  
                ??_DisableInternalADC 0025              _PS_2_Read_Data_ForthTEMP 0222  
                           _PS_2_INIT 1A19                      __CFG_FOSC$INTOSC 0000  
                           _PS_2_bits 006A                             _TRISAbits 008C  
                           _TRISCbits 008E             __size_of_Decode_Scan_Code 0013  
                    ?_ReadFlash_2Byte 0025                      ?_ReadFlash_4Byte 002A  
                         ___fldiv@exp 0046                    __end_of_BlockErase 1BCA  
         __end_of_ConfigureOscillator 1A80                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 1A03                           ___flmul@exp 0055  
                           _BaudTyped 0066                             _Data_TRIS 1A03  
                     PS_2_Update@temp 02E0                             _CapsCount 01A8  
                           _Caps_Lock 01A9              _PS_2_Read_Data_ThirdTEMP 0226  
                     ??_CheckSum_byte 0028                           _CCP2CONbits 029A  
                           _TXSTAbits 019E                        __end_of_UNLOCK 1A19  
                  __end_of_CloseUSART 1A3F         ??_Decode_Scan_Code_FunctionE0 0025  
                   __size_of_ISNUMBER 000E                        __end_of___flge 2000  
               CheckSum_byte@Odd_Even 0027                          ?_Init_System 0070  
                      __end_of___lmul 1030                     __size_of_UARTchar 0050  
                        ?_ReadVoltage 005C                            ?_PS_2_INIT 0070  
                           Send_PS2@i 0035           INIT_PS_2_INTERRUPT@DATA_CLK 0025  
                 start_initialization 00DF                             _ReadUSART 19EE  
             __size_of_UARTstringWAIT 0033                 CheckSum_byte@ThisTemp 0029  
                         __end_of_isr 00DD                         WriteBaud@Baud 0038  
                __end_of_Reverse_Byte 1E83                      ?i1_READ_PS_2_PIN 0070  
            ??_Decode_Scan_Code_Shift 0025                         WriteBaud@temp 0045  
                           _OpenUSART 1C2F                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0025                       ___llmod@divisor 0033  
                   __size_of_InitUART 00F0                       ___llmod@counter 003C  
                   __size_of_ReadBaud 0064                             _Shift_Key 01AE  
             __end_ofi1_CheckSum_byte 1B68                     ?_InternalADC_Read 002F  
                   __size_of_Send_PS2 019F                              ??___flge 002D  
                            ??___lmul 002D             _PS_2_Read_Data_SecondTEMP 0224  
                  ??_InternalADC_Read 0031                           __pdataBANK2 016D  
                         __pdataBANK4 022C                     __size_of___flpack 006B  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtofl 0018                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01AF                         __pcstackBANK5 02A0  
                           _WriteBaud 1ED8                   __end_of__stringdata 0BC1  
                  ReadFlash_2Byte@row 0025                             _baudUSART 19E5  
                  ReadFlash_4Byte@row 002A                            ?_OpenUSART 0025  
                         sprintf@_val 004E                           sprintf@flag 004B  
                         sprintf@prec 004C                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 0966       Decode_Scan_Code_FunctionE0@Code 0025  
                            ?_SetBaud 0054                        ReadBaud@column 0039  
                            ?___fldiv 0034                              ?___flmul 0048  
                            ?___lldiv 0025                              ?___llmod 0033  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 00A0  
       WriteFlash_Sequential@TempBufL 00C0                              ?_delayUS 0025  
              WriteFlash_Sequential@i 00E6            Decode_Scan_Code_Shift@Code 0025  
                            _BAUD1CON 019F                           ??_PS_2_INIT 0026  
                            _BAUDMODE 0163                      _Decode_Scan_Code 1AA5  
                          ?_WriteBaud 0036                 __end_of_READ_PS_2_PIN 1A92  
                            ?_sprintf 003D            UARTchar@NinethBit_override 002D  
                     _PS_2_Update$820 02DF                       _PS_2_Update$817 02DC  
                     _PS_2_Update$818 02DD                       _PS_2_Update$819 02DE  
                          ?_baudUSART 0070                             delayUS@US 0025  
     __size_of_Decode_Scan_Code_Shift 0013            ?_Decode_Scan_Code_Function 0070  
                         ??_Data_TRIS 0025            WriteFlash_Sequential@tempH 00E0  
          WriteFlash_Sequential@tempL 00E1                     i1_UART_send_break 19BF  
                           clear_ram0 19CF                              _PIE1bits 0091  
                            _ISNUMBER 1A3F                    ?i1_UART_send_break 0070  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 002F  
                            _UARTchar 1D3A                         ??i1_ReadUSART 0070  
                 ??i1_UART_send_break 0070                              _LControl 0168  
        __size_of_INIT_PS_2_INTERRUPT 0010                           __stringdata 09FB  
                __size_of_Init_System 0108        __size_of_WriteFlash_Sequential 00F2  
       __end_of_WriteFlash_Sequential 13AC                 __size_of_Reverse_Byte 0055  
                      _UARTstringWAIT 1BFC                           ??_ReadUSART 0025  
                __size_of_ReadVoltage 006E                              _RControl 016A  
            ??_PS_2_DISABLE_INTERRUPT 0025               ??_PS_2_ENABLE_INTERRUPT 0025  
                   ___lmul@multiplier 0025           __size_of_Keyboard_Connected 0055  
                            SetBaud@i 015E                         ??_PS_2_Update 01AF  
                            _InitUART 11CA             __end_ofi1_UART_send_break 19C4  
                            _ReadBaud 1F36                           ??_OpenUSART 0027  
                            _ScanCode 0884                       OpenUSART@config 0027  
   __end_of_Decode_Scan_Code_Function 1A6E                              _Send_PS2 0CA9  
                    __size_of_InitApp 0023                      __size_of_SetBaud 0165  
                        _Reverse_Byte 1E2E                      __size_of___fldiv 00C1  
                    __size_of___flmul 00D2                _Decode_Scan_Code_Shift 1ACB  
                    __size_of___lldiv 0053                      __size_of___llmod 0043  
                            ___flpack 1030                         SetBaud@Parity 0058  
                    __size_of_delayUS 0035           __size_of_DisableInternalADC 0007  
              __end_of_UARTstringWAIT 1C2F                              ___lwtofl 1ADE  
                     Send_PS2@command 0034                   __end_ofi1_ReadUSART 19E5  
                         ??_WriteBaud 003D                       Send_PS2@timeout 0036  
                       ISNUMBER@ascii 0025                              __ptext10 1A4D  
                            __ptext11 1E83                              __ptext20 1E2E  
                            __ptext12 0119                              __ptext21 1A3F  
                            __ptext13 1000                              __ptext30 1D3A  
                            __ptext22 1ACB                              __ptext14 19C4  
                            __ptext31 1F36                              __ptext23 1AB8  
                            __ptext15 169B                              __ptext40 13AC  
                            __ptext32 1D8A                              __ptext24 1A5D  
                            __ptext16 1ED8                              __ptext41 0CA9  
                            __ptext33 1BCA                              __ptext25 1AA5  
                            __ptext17 12BA                              __ptext50 1A6E  
                            __ptext42 07C8                              __ptext34 11CA  
                            __ptext26 1593                              __ptext18 1B99  
                            __ptext43 1A80                              __ptext35 19E5  
                            __ptext27 149F                              __ptext19 1A0E  
                            __ptext52 1CF0                              __ptext44 0BC2  
                            __ptext36 1DDB                              __ptext28 1CAD  
                            __ptext53 1B38                              __ptext45 1A03  
                            __ptext37 19EE                              __ptext29 1BFC  
                            __ptext54 19BF                              __ptext46 19F8  
                            __ptext38 1C2F                              __ptext55 19DC  
                            __ptext47 1B68                              __ptext39 1A31  
                            __ptext56 1A92                              __ptext48 1AF6  
                            __ptext49 1B15         PS_2_ENABLE_INTERRUPT@DATA_CLK 0026  
                         ??_baudUSART 0025                      __size_of_sprintf 00F4  
                 Keyboard_Connected@i 0061                         __size_of_main 01B8  
            __size_of_ReadFlash_2Byte 0032              __size_of_ReadFlash_4Byte 0051  
                            delayUS@i 002A                              delayUS@j 002E  
                        _pwrLEDtoggle 022A          __size_of_ConfigureOscillator 0012  
               __end_of_CheckSum_byte 1B99                   __end_of_PS_2_Update 07C8  
                          _RC1STAbits 019D                        CheckSum_byte@i 002C  
                      _Left_Shift_Key 01AA               __size_of_Init_PS_2_Send 00F3  
                   ??_UART_send_break 0025                 ___flmul@f3_as_product 0056  
                     ?_UARTstringWAIT 0034                   CheckSum_byte@Parity 002B  
                          _INTCONbits 000B             __size_of_InternalADC_Read 003F  
                      OpenUSART@spbrg 0025                          UARTchar@data 0033  
        i1UARTchar@NinethBit_override 0078                           pic14e$flags 007E  
     __size_of_PS_2_DISABLE_INTERRUPT 001F                              intlevel1 0000  
                           sprintf@ap 0052                             sprintf@sp 003D  
          __size_ofi1_UART_send_break 0005                      ___lldiv@dividend 0029  
 __end_of_Decode_Scan_Code_FunctionE0 1ACB           _Decode_Scan_Code_FunctionE0 1AB8  
                   __CFG_CLKOUTEN$OFF 0000                        _BatteryVoltage 015F  
            __size_ofi1_READ_PS_2_PIN 0013              __end_of_Decode_Scan_Code 1AB8  
                          i1_UARTchar 1CF0                       _Right_Shift_Key 01AD  
                         i1_ReadUSART 19DC                              sprintf@c 0053  
                            sprintf@f 003F                      ___lldiv@quotient 002E  
                Decode_Scan_Code@Code 0025                     Init_System@Parity 00E0  
                  _Left_Shift_Key_old 0169                            _TX1STAbits 019E  
                   CheckSum_byte@This 0025                        i1UARTchar@data 0020  
                         _PS_2_Update 0119                   _INIT_PS_2_INTERRUPT 1A4D  
         ??_Decode_Scan_Code_Function 0025                       Init_System@Baud 00E1  
                     Init_System@temp 00DC                        Init_System@buf 00A0  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 0026  
